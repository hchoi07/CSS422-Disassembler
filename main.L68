00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/7/2020 10:37:34 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main File
00000000                             3  *-----------------------------------------------------------
00001000                             4              ORG $1000
00001000                             5  MAIN:
00001000  2E7C 00100000              6              MOVEA.L #$00100000,SP
00001006                             7      
00001006  4EB9 00001052              8  run_prog    JSR     io_subroutine
0000100C  4EB9 000011D2              9              JSR     main_loop
00001012                            10  
00001012  FFFF FFFF                 11              SIMHALT             ; halt simulator   
00001016                            12          
00001016                            13              INCLUDE 'toHex.x68'
00001016                            14  toHex:
00001016  48E7 DDFE                 15              MOVEM.L     A0-A6/D0-D1/D3-D5/D7,-(SP)
0000101A  0C06 0030                 16              CMPI.B      #$30,D6
0000101E  6D10                      17              BLT.B       ERR
00001020  BC3C 0039                 18              CMP.B       #$39,D6
00001024  6E16                      19              BGT.B       letter
00001026  0406 0030                 20              SUBI.B      #$30,D6
0000102A  4CDF 7FBB                 21              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
0000102E  4E75                      22              RTS
00001030                            23        
00001030  243C FFFFFFFF             24  ERR         MOVE.L      #not_hex,D2
00001036  4CDF 7FBB                 25              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
0000103A  4E75                      26              RTS
0000103C                            27          
0000103C  0C06 0041                 28  letter      CMPI.B      #$41,D6
00001040  6DEE                      29              BLT.B       ERR
00001042  0C06 0046                 30              CMPI.B      #$46,D6
00001046  6EE8                      31              BGT.B       ERR
00001048  0406 0037                 32              SUBI.B      #$37,D6
0000104C  4CDF 7FBB                 33              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
00001050  4E75                      34              RTS
00001052                            35  
00001052                            36  
00001052                            37  
00001052                            38  
00001052                            39  
00001052                            40  
00001052                            41  -------------------- end include --------------------
00001052                            42              INCLUDE 'io_subroutine.x68'
00001052                            43  
00001052                            44  io_subroutine:
00001052  48E7 CFFE                 45              MOVEM.L      D0-D1/D4-D7/A0-A6,-(SP)
00001056                            46              *display the intro message to the user
00001056  43F9 0000866A             47              LEA         LOAD_MESSAGE, A1
0000105C  103C 000D                 48              MOVE.B      #13, D0
00001060  4E4F                      49              TRAP        #15
00001062                            50              *display the intro message to the user
00001062  43F9 000086D3             51              LEA         LOAD2_MESSAGE, A1
00001068  103C 000D                 52              MOVE.B      #13, D0
0000106C  4E4F                      53              TRAP        #15
0000106E                            54  
0000106E  43F9 0000873A             55  INPUT1      LEA         START_REQUEST, A1
00001074  103C 000E                 56              MOVE.B      #14, D0
00001078  4E4F                      57              TRAP        #15
0000107A                            58  
0000107A                            59              *------Code for input-----
0000107A  183C 0000                 60              MOVE.B      #0,D4           *counter 
0000107E  1A3C 0008                 61              MOVE.B      #8,D5
00001082  BA04                      62  input_loop  CMP.B       D4,D5           *loop 8 time for a long info
00001084  6700 0016                 63              BEQ         ipt_done
00001088                            64              *inside loop code
00001088  103C 0005                 65              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
0000108C  4E4F                      66              TRAP        #15
0000108E  1C01                      67              MOVE.B      D1,D6
00001090  4EB8 1016                 68              JSR         toHex           *convert the value to hex
00001094  E98F                      69              LSL.L       #4,D7           *Move the hex value one byte left
00001096  DE86                      70              ADD.L       D6,D7           *append the character to the input
00001098                            71              *loop code done
00001098  5204                      72  cont        ADDQ.B      #1,D4           *increment the counter
0000109A  60E6                      73              BRA         input_loop
0000109C                            74              
0000109C                            75              
0000109C                            76  ipt_done    *provide a new line
0000109C  43F9 000088EF             77              LEA         SPACE, A1
000010A2  103C 000E                 78              MOVE.B      #14, D0
000010A6  4E4F                      79              TRAP        #15
000010A8                            80              *test if there was a non hex value inputted
000010A8  B4BC FFFFFFFF             81              CMP.L       #not_hex,D2
000010AE  6600 0016                 82              BNE         input1pass
000010B2                            83              *else, display message
000010B2  43F9 000087EE             84              LEA         NOT_HEX_MSG, A1
000010B8  103C 000D                 85              MOVE.B      #13, D0
000010BC  4E4F                      86              TRAP        #15
000010BE  243C 00000000             87              MOVE.L      #hex_clear,D2
000010C4  60A8                      88              BRA         INPUT1
000010C6                            89              
000010C6  2607                      90  input1pass  MOVE.L      D7,D3   *move the hex value to D3
000010C8                            91       
000010C8                            92  range_check1:
000010C8                            93              *test if input is less than lowest address
000010C8  B6BC 00007000             94              CMP.L       #start_Adr,D3
000010CE  6D00 0010                 95              BLT         wrong_range1
000010D2                            96              *test if the input is greater than lowest address
000010D2  B6BC 000073BA             97              CMP.L       #end_Adr,D3
000010D8  6E00 0006                 98              BGT         wrong_range1
000010DC                            99              *noting wrong, continue
000010DC  6000 0010                100              BRA         boundary1
000010E0                           101  
000010E0                           102  wrong_range1:
000010E0                           103              *not in correct range
000010E0  43F9 00008819            104              LEA         BAD_RANGE, A1
000010E6  103C 000D                105              MOVE.B      #13, D0
000010EA  4E4F                     106              TRAP        #15
000010EC                           107              *return to input
000010EC  6080                     108              BRA         INPUT1
000010EE                           109  
000010EE                           110  boundary1:
000010EE                           111              *test if input is on the word boundary
000010EE  2803                     112              MOVE.L      D3,D4
000010F0  88FC 0002                113              DIVU        #2,D4
000010F4  4244                     114              CLR.W       D4
000010F6  4844                     115              SWAP        D4
000010F8                           116              
000010F8  B8BC 00000000            117              CMP.L       #hex_clear,D4
000010FE  6700 0012                118              BEQ         INPUT2
00001102                           119              *else, not on boundary
00001102  43F9 000088A5            120              LEA         BAD_BOUND, A1
00001108  103C 000D                121              MOVE.B      #13, D0
0000110C  4E4F                     122              TRAP        #15   
0000110E                           123              *go back to start
0000110E  6000 FF5E                124              BRA         INPUT1  
00001112                           125              
00001112  43F9 00008795            126  INPUT2      LEA         END_REQUEST, A1
00001118  103C 000E                127              MOVE.B      #14, D0
0000111C  4E4F                     128              TRAP        #15
0000111E                           129  
0000111E                           130              *------Code for input-----
0000111E  183C 0000                131              MOVE.B      #0,D4           *counter 
00001122  1A3C 0008                132              MOVE.B      #8,D5
00001126  BA04                     133  input_loop2 CMP.B       D4,D5           *loop 8 time for a long info
00001128  6700 0016                134              BEQ         ipt_done2
0000112C                           135              *inside loop code
0000112C  103C 0005                136              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
00001130  4E4F                     137              TRAP        #15
00001132  1C01                     138              MOVE.B      D1,D6
00001134  4EB8 1016                139              JSR         toHex           *convert the value to hex
00001138  E98F                     140              LSL.L       #4,D7           *Move the hex value one byte left
0000113A  DE86                     141              ADD.L       D6,D7           *append the character to the input
0000113C                           142              *loop code done
0000113C  5204                     143  cont2       ADDQ.B      #1,D4           *increment the counter
0000113E  60E6                     144              BRA         input_loop2
00001140                           145              
00001140                           146              
00001140                           147  ipt_done2   *provide a new line
00001140  43F9 000088EF            148              LEA         SPACE, A1
00001146  103C 000E                149              MOVE.B      #14, D0
0000114A  4E4F                     150              TRAP        #15
0000114C                           151              *test if there was a non hex value inputted
0000114C  B4BC FFFFFFFF            152              CMP.L       #not_hex,D2
00001152  6600 0016                153              BNE         input2pass
00001156                           154              *else, display message
00001156  43F9 000087EE            155              LEA         NOT_HEX_MSG, A1
0000115C  103C 000D                156              MOVE.B      #13, D0
00001160  4E4F                     157              TRAP        #15
00001162  243C 00000000            158              MOVE.L      #hex_clear,D2
00001168  60A8                     159              BRA         INPUT2
0000116A                           160              
0000116A  2407                     161  input2pass  MOVE.L      D7,D2   *move the hex value to D2
0000116C                           162              
0000116C                           163  range_check2:
0000116C                           164              *test if input is less than lowest address
0000116C  B4BC 00007000            165              CMP.L       #start_Adr,D2
00001172  6D00 0010                166              BLT         wrong_range2
00001176                           167              *test if the input is greater than lowest address
00001176  B4BC 000073BA            168              CMP.L       #end_Adr,D2
0000117C  6E00 0006                169              BGT         wrong_range2
00001180                           170              *noting wrong, continue
00001180  6000 0010                171              BRA         boundary2
00001184                           172  
00001184                           173  wrong_range2:
00001184                           174              *not in correct range
00001184  43F9 00008819            175              LEA         BAD_RANGE, A1
0000118A  103C 000D                176              MOVE.B      #13, D0
0000118E  4E4F                     177              TRAP        #15
00001190                           178              *get input 2 again
00001190  6080                     179              BRA         INPUT2
00001192                           180              
00001192                           181  boundary2:
00001192                           182              *test if input is on the word boundary
00001192  2802                     183              MOVE.L      D2,D4
00001194  88FC 0002                184              DIVU        #2,D4
00001198  4244                     185              CLR.W       D4
0000119A  4844                     186              SWAP        D4
0000119C                           187              
0000119C  B8BC 00000000            188              CMP.L       #hex_clear,D4
000011A2  6700 0012                189              BEQ         test_ends
000011A6                           190              *else, not on boundary
000011A6  43F9 000088A5            191              LEA         BAD_BOUND, A1
000011AC  103C 000D                192              MOVE.B      #13, D0
000011B0  4E4F                     193              TRAP        #15   
000011B2                           194              *go back to start
000011B2  6000 FF5E                195              BRA         INPUT2  
000011B6                           196  
000011B6                           197  test_ends:  
000011B6                           198              *test if the starting address is less than the ending address
000011B6  B483                     199              CMP.L       D3,D2
000011B8  6F00 0008                200              BLE         end_bad
000011BC  4CDF 7FF3                201              MOVEM.L      (SP)+,D0-D1/D4-D7/A0-A6
000011C0  4E75                     202              RTS
000011C2                           203  
000011C2                           204  end_bad:    
000011C2                           205              *not in correct range
000011C2  43F9 00008855            206              LEA         BAD_END, A1
000011C8  103C 000D                207              MOVE.B      #13, D0
000011CC  4E4F                     208              TRAP        #15   
000011CE                           209              *go back to start
000011CE  6000 FE9E                210              BRA         INPUT1  
000011D2                           211  
000011D2                           212      
000011D2                           213  
000011D2                           214  
000011D2                           215  
000011D2                           216  -------------------- end include --------------------
000011D2                           217              INCLUDE 'main_loop.x68'
000011D2                           218  main_loop:
000011D2  183C 0000                219              MOVE.B      #0,D4           *counter 
000011D6  1A3C 001E                220              MOVE.B      #30,D5
000011DA                           221  
000011DA  2043                     222              MOVE.L      D3,A0   *move the starting address to A0
000011DC  5482                     223              ADDQ.L      #2,D2   *add 1 word to ending address so it gets covered
000011DE  2442                     224              MOVE.L      D2,A2   *move the ending address to A2
000011E0  B5C8                     225  loopM       CMP.L       A0,A2
000011E2  6700 004A                226              BEQ         loopM_done
000011E6                           227              *inside loop code
000011E6  88FC 001D                228              DIVU        #29,D4      *test if full page has been reached
000011EA  4244                     229              CLR.W       D4
000011EC  4844                     230              SWAP        D4
000011EE  B8BC 00000000            231              CMP.L       #hex_clear,D4
000011F4  6600 002A                232              BNE         loopM_Cont
000011F8                           233              *pause till enter inputted
000011F8                           234              *display the prompt message to the user
000011F8  43F9 000088F2            235  entr_lp     LEA         PRESS_ENTER, A1
000011FE  103C 000E                236              MOVE.B      #14, D0
00001202  4E4F                     237              TRAP        #15
00001204                           238              *look for enter key
00001204  103C 0005                239              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
00001208  4E4F                     240              TRAP        #15
0000120A  B2BC 0000000D            241              CMP.L       #CR,D1          
00001210  6700 000E                242              BEQ         loopM_Cont      *continue if enter pressed
00001214  B2BC 0000000A            243              CMP.L       #LF,D1
0000121A  6700 0004                244              BEQ         loopM_Cont
0000121E  60D8                     245              BRA         entr_lp
00001220                           246              *resume
00001220  3010                     247  loopM_Cont  MOVE.W      (A0),D0 *move the opcode into D0 for testing
00001222  4EB9 00002072            248              JSR         opcode_subroutine
00001228                           249              *loop code end
00001228  5448                     250              ADDQ        #2,A0   *move the pointer one word
0000122A  5244                     251              ADDQ        #1,D4   *add one to the output counter
0000122C  60B2                     252              BRA         loopM   
0000122E                           253                
0000122E                           254              *ask if the user wants to test again  
0000122E  43F9 0000890F            255  loopM_done  LEA         RESTART_Q, A1
00001234  103C 000D                256              MOVE.B      #13, D0
00001238  4E4F                     257              TRAP        #15
0000123A                           258              *look for q or r key
0000123A  103C 0005                259              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
0000123E  4E4F                     260              TRAP        #15
00001240  B2BC 00000072            261              CMP.L       #RT,D1          
00001246  6700 000E                262              BEQ         run_again       *r pressed, restart
0000124A  B2BC 00000071            263              CMP.L       #QT,D1
00001250  6700 0014                264              BEQ         exit_loop       *q pressed, exit
00001254  60D8                     265              BRA         loopM_done      *neither, ask again
00001256                           266             
00001256                           267  run_again   *print new line
00001256  43F9 000088EF            268              LEA         SPACE,A1
0000125C  103C 000E                269              MOVE.B      #14,D0              *move number 14 into d0 for string
00001260  4E4F                     270              TRAP        #15                 *print the data
00001262  4EB8 1006                271              JSR         run_prog   *go back for input
00001266                           272              
00001266  4E75                     273  exit_loop   RTS
00001268                           274  
00001268                           275  
00001268                           276  
00001268                           277  
00001268                           278  -------------------- end include --------------------
00001268                           279              INCLUDE 'output.x68'
00001268                           280  print_string:
00001268  48E7 FFFE                281      MOVEM.L     D0-D7/A0-A6, -(SP)
0000126C  103C 000E                282      MOVE.B      #14,D0              *move number 14 into d0 for string plus
00001270  4E4F                     283      TRAP        #15
00001272  4CDF 7FFF                284      MOVEM.L     (SP)+, D0-D7/A0-A6
00001276  4E75                     285      RTS
00001278                           286      
00001278                           287  print_hex:
00001278  48E7 FFFE                288      MOVEM.L     D0-D7/A0-A6, -(SP)
0000127C  103C 000F                289      MOVE.B      #15,D0
00001280  143C 0010                290      MOVE.B      #16,D2          *display in base 16 (hex)
00001284  4E4F                     291      TRAP        #15
00001286  4CDF 7FFF                292      MOVEM.L     (SP)+, D0-D7/A0-A6
0000128A  4E75                     293      RTS
0000128C                           294  
0000128C                           295  print_string_op_nn:
0000128C  48E7 FFFE                296      MOVEM.L     D0-D7/A0-A6, -(SP)
00001290  3600                     297      MOVE.W      D0,D3           *move full opcode to D2 temporarily
00001292  2449                     298      MOVEA.L     A1,A2           *move string into A2 temp
00001294                           299      *print the line number
00001294  4EB9 00001404            300      JSR         print_line_number
0000129A                           301      *print a tab
0000129A  43F9 0000890D            302      LEA         TAB,A1
000012A0  103C 000E                303      MOVE.B      #14,D0              *move number 14 into d0 for string
000012A4  4E4F                     304      TRAP        #15                 *print the data
000012A6                           305      *print data
000012A6  224A                     306      MOVE.L      A2,A1
000012A8  103C 000E                307      MOVE.B      #14,D0              *move number 14 into d0 for string
000012AC  4E4F                     308      TRAP        #15                 *print the data
000012AE                           309      *print a tab
000012AE  43F9 0000890D            310      LEA         TAB,A1
000012B4  103C 000E                311      MOVE.B      #14,D0              *move number 14 into d0 for string
000012B8  4E4F                     312      TRAP        #15                 *print the data
000012BA                           313      
000012BA  4CDF 7FFF                314      MOVEM.L     (SP)+, D0-D7/A0-A6
000012BE  4E75                     315      RTS
000012C0                           316  
000012C0                           317  
000012C0                           318  print_string_op_nl:
000012C0  48E7 FFFE                319      MOVEM.L     D0-D7/A0-A6, -(SP)
000012C4  3600                     320      MOVE.W      D0,D3           *move full opcode to D2 temporarily
000012C6  2449                     321      MOVEA.L     A1,A2           *move string into A2 temp
000012C8                           322      *print the line number
000012C8  4EB9 00001404            323      JSR         print_line_number
000012CE                           324      *print a tab
000012CE  43F9 0000890D            325      LEA         TAB,A1
000012D4  103C 000E                326      MOVE.B      #14,D0              *move number 14 into d0 for string
000012D8  4E4F                     327      TRAP        #15                 *print the data
000012DA                           328      *print data
000012DA  224A                     329      MOVE.L      A2,A1
000012DC  103C 000E                330      MOVE.B      #14,D0              *move number 14 into d0 for string
000012E0  4E4F                     331      TRAP        #15                 *print the data
000012E2                           332      *print new line
000012E2  43F9 000088EF            333      LEA         SPACE,A1
000012E8  103C 000E                334      MOVE.B      #14,D0              *move number 14 into d0 for string
000012EC  4E4F                     335      TRAP        #15                 *print the data
000012EE                           336      
000012EE  4CDF 7FFF                337      MOVEM.L     (SP)+, D0-D7/A0-A6
000012F2  4E75                     338      RTS
000012F4                           339  
000012F4                           340  print_string_sized:
000012F4  48E7 FFFE                341      MOVEM.L     D0-D7/A0-A6, -(SP)
000012F8  2601                     342      MOVE.L      D1,D3           *move full opcode to D2 temporarily
000012FA  2449                     343      MOVEA.L     A1,A2           *move string into A2 temp
000012FC                           344      *print the line number
000012FC  4EB9 00001404            345      JSR         print_line_number
00001302                           346      *print a tab
00001302  43F9 0000890D            347      LEA         TAB,A1
00001308  103C 000E                348      MOVE.B      #14,D0              *move number 14 into d0 for string
0000130C  4E4F                     349      TRAP        #15                 *print the data
0000130E                           350      *print data
0000130E  224A                     351      MOVE.L      A2,A1
00001310  103C 000E                352      MOVE.B      #14,D0              *move number 14 into d0 for string
00001314  4E4F                     353      TRAP        #15                 *print the data
00001316                           354      *print a tab
00001316  43F9 0000890D            355      LEA         TAB,A1
0000131C  103C 000E                356      MOVE.B      #14,D0              *move number 14 into d0 for string
00001320  4E4F                     357      TRAP        #15                 *print the data
00001322                           358      *print opcode
00001322  2201                     359      MOVE.L      D1,D1
00001324  103C 000F                360      MOVE.B      #15,D0
00001328  143C 0010                361      MOVE.B      #16,D2          *display in base 16 (hex)
0000132C  4E4F                     362      TRAP        #15
0000132E                           363      *print new line
0000132E  43F9 000088EF            364      LEA         SPACE,A1
00001334  103C 000E                365      MOVE.B      #14,D0              *move number 14 into d0 for string
00001338  4E4F                     366      TRAP        #15                 *print the data
0000133A                           367      
0000133A  4CDF 7FFF                368      MOVEM.L     (SP)+, D0-D7/A0-A6
0000133E  4E75                     369      RTS
00001340                           370  
00001340                           371  print_data:
00001340  48E7 FFFE                372      MOVEM.L     D0-D7/A0-A6, -(SP)
00001344  3600                     373      MOVE.W      D0,D3           *move full opcode to D2 temporarily
00001346  2449                     374      MOVEA.L     A1,A2           *move string into A2 temp
00001348                           375      *print the line number
00001348  4EB9 00001404            376      JSR         print_line_number
0000134E                           377      *print a tab
0000134E  43F9 0000890D            378      LEA         TAB,A1
00001354  103C 000E                379      MOVE.B      #14,D0              *move number 14 into d0 for string
00001358  4E4F                     380      TRAP        #15                 *print the data
0000135A                           381      *print data
0000135A  224A                     382      MOVE.L      A2,A1
0000135C  103C 000E                383      MOVE.B      #14,D0              *move number 14 into d0 for string
00001360  4E4F                     384      TRAP        #15                 *print the data
00001362                           385      *print a tab
00001362  43F9 0000890D            386      LEA         TAB,A1
00001368  103C 000E                387      MOVE.B      #14,D0              *move number 14 into d0 for string
0000136C  4E4F                     388      TRAP        #15                 *print the data
0000136E                           389      *print $
0000136E  43F9 00008A37            390      LEA         ea_$,A1
00001374  103C 000E                391      MOVE.B      #14,D0              *move number 14 into d0 for string
00001378  4E4F                     392      TRAP        #15                 *print the data
0000137A                           393      *print opcode
0000137A  4EB9 0000145A            394      JSR         print_opcode_word   *print the opcode in 4 digits
00001380                           395      *print new line
00001380  43F9 000088EF            396      LEA         SPACE,A1
00001386  103C 000E                397      MOVE.B      #14,D0              *move number 14 into d0 for string
0000138A  4E4F                     398      TRAP        #15                 *print the data
0000138C                           399      
0000138C  4CDF 7FFF                400      MOVEM.L     (SP)+, D0-D7/A0-A6
00001390  4E75                     401      RTS
00001392                           402  
00001392                           403  print_bcc:
00001392  48E7 FFFE                404      MOVEM.L     D0-D7/A0-A6, -(SP)
00001396  2803                     405      MOVE.L      D3,D4
00001398  3600                     406      MOVE.W      D0,D3           *move full opcode to D2 temporarily
0000139A  2449                     407      MOVEA.L     A1,A2           *move string into A2 temp
0000139C                           408      *print the line number
0000139C  4EB9 00001404            409      JSR         print_line_number
000013A2                           410      *print a tab
000013A2  43F9 0000890D            411      LEA         TAB,A1
000013A8  103C 000E                412      MOVE.B      #14,D0              *move number 14 into d0 for string
000013AC  4E4F                     413      TRAP        #15                 *print the data
000013AE                           414      *print data
000013AE  224A                     415      MOVE.L      A2,A1
000013B0  103C 000E                416      MOVE.B      #14,D0              *move number 14 into d0 for string
000013B4  4E4F                     417      TRAP        #15                 *print the data
000013B6                           418      *print a tab
000013B6  43F9 0000890D            419      LEA         TAB,A1
000013BC  103C 000E                420      MOVE.B      #14,D0              *move number 14 into d0 for string
000013C0  4E4F                     421      TRAP        #15                 *print the data
000013C2                           422      *print displaced address
000013C2  2604                     423      MOVE.L      D4,D3
000013C4  4EB9 000013DC            424      JSR         print_displacedAddress
000013CA                           425      *print new line
000013CA  43F9 000088EF            426      LEA         SPACE,A1
000013D0  103C 000E                427      MOVE.B      #14,D0              *move number 14 into d0 for string
000013D4  4E4F                     428      TRAP        #15                 *print the data
000013D6                           429      
000013D6  4CDF 7FFF                430      MOVEM.L     (SP)+, D0-D7/A0-A6
000013DA  4E75                     431      RTS
000013DC                           432  
000013DC                           433  print_displacedAddress:
000013DC  48E7 FFFE                434              MOVEM.L     D0-D7/A0-A6, -(SP)
000013E0  7800                     435              MOVE.L      #0,D4           *counter 
000013E2  7A08                     436              MOVE.L      #8,D5
000013E4  4281                     437              CLR.L       D1
000013E6  700F                     438              MOVE.L      #15,D0
000013E8  7410                     439              MOVE.L      #16,D2          *display in base 16 (hex)
000013EA  BA04                     440  disp_loop   CMP.B       D4,D5           *loop 8 time for a long of info
000013EC  6700 0010                441              BEQ         disp_done
000013F0                           442              *inside loop code
000013F0  E99B                     443              ROL.L       #4,D3          *rotate bits so last is first
000013F2  1203                     444              MOVE.B      D3,D1
000013F4  E909                     445              LSL.B       #4,D1           *rotate left then right to get rid 
000013F6  E809                     446              LSR.B       #4,D1           *of the other character
000013F8  4E4F                     447              TRAP        #15             *print 1 hex character
000013FA                           448              
000013FA                           449              *loop code done
000013FA  5204                     450              ADDQ.B  #1,D4           *increment the counter
000013FC  60EC                     451              BRA     disp_loop
000013FE                           452              
000013FE  4CDF 7FFF                453  disp_done   MOVEM.L     (SP)+, D0-D7/A0-A6
00001402  4E75                     454              RTS
00001404                           455  
00001404                           456  print_line_number:
00001404  48E7 FFFE                457              MOVEM.L     D0-D7/A0-A6, -(SP)
00001408  2608                     458              MOVE.L      A0,D3
0000140A  7800                     459              MOVE.L      #0,D4           *counter 
0000140C  7A08                     460              MOVE.L      #8,D5
0000140E  4281                     461              CLR.L       D1
00001410  700F                     462              MOVE.L      #15,D0
00001412  7410                     463              MOVE.L      #16,D2          *display in base 16 (hex)
00001414  BA04                     464  line_loop   CMP.B       D4,D5           *loop 2 time for a byte of info
00001416  6700 0010                465              BEQ         line_done
0000141A                           466              *inside loop code
0000141A  E99B                     467              ROL.L       #4,D3          *rotate bits so last is first
0000141C  1203                     468              MOVE.B      D3,D1
0000141E  E909                     469              LSL.B       #4,D1           *rotate left then right to get rid 
00001420  E809                     470              LSR.B       #4,D1           *of the other character
00001422  4E4F                     471              TRAP        #15             *print 1 hex character
00001424                           472              
00001424                           473              *loop code done
00001424  5204                     474              ADDQ.B  #1,D4           *increment the counter
00001426  60EC                     475              BRA     line_loop
00001428                           476              
00001428  4CDF 7FFF                477  line_done   MOVEM.L     (SP)+, D0-D7/A0-A6
0000142C  4E75                     478              RTS
0000142E                           479              
0000142E                           480  print_eat:
0000142E  48E7 FFFE                481      MOVEM.L     D0-D7/A0-A6, -(SP)
00001432                           482      *print data
00001432  103C 000E                483      MOVE.B      #14,D0              *move number 14 into d0 for string
00001436  4E4F                     484      TRAP        #15                 *print the data
00001438  4CDF 7FFF                485      MOVEM.L     (SP)+, D0-D7/A0-A6
0000143C  4E75                     486      RTS
0000143E                           487      
0000143E                           488  print_ea:
0000143E  48E7 FFFE                489      MOVEM.L     D0-D7/A0-A6, -(SP)
00001442                           490      *print data
00001442  103C 000E                491      MOVE.B      #14,D0              *move number 14 into d0 for string
00001446  4E4F                     492      TRAP        #15                 *print the data in A1
00001448                           493      *print new line
00001448  43F9 000088EF            494      LEA         SPACE,A1
0000144E  103C 000E                495      MOVE.B      #14,D0              *move number 14 into d0 for string
00001452  4E4F                     496      TRAP        #15                 *print the data
00001454  4CDF 7FFF                497      MOVEM.L     (SP)+, D0-D7/A0-A6
00001458  4E75                     498      RTS
0000145A                           499  
0000145A                           500  print_opcode_word:
0000145A  48E7 FFFE                501              MOVEM.L     D0-D7/A0-A6, -(SP)
0000145E                           502              *MOVE.L      A0,D3
0000145E  7800                     503              MOVE.L      #0,D4           *counter 
00001460  7A04                     504              MOVE.L      #4,D5
00001462  4281                     505              CLR.L       D1
00001464  700F                     506              MOVE.L      #15,D0
00001466  7410                     507              MOVE.L      #16,D2          *display in base 16 (hex)
00001468  BA04                     508  opWd_loop   CMP.B       D4,D5           *loop 4 time for a word of info
0000146A  6700 0010                509              BEQ         opWd_done
0000146E                           510              *inside loop code
0000146E  E95B                     511              ROL.W       #4,D3          *rotate bits so last is first
00001470  1203                     512              MOVE.B      D3,D1
00001472  E909                     513              LSL.B       #4,D1           *rotate left then right to get rid 
00001474  E809                     514              LSR.B       #4,D1           *of the other character
00001476  4E4F                     515              TRAP        #15             *print 1 hex character
00001478                           516              
00001478                           517              *loop code done
00001478  5204                     518              ADDQ.B      #1,D4           *increment the counter
0000147A  60EC                     519              BRA         opWd_loop
0000147C                           520              
0000147C  4CDF 7FFF                521  opWd_done   MOVEM.L     (SP)+, D0-D7/A0-A6
00001480  4E75                     522              RTS
00001482                           523  
00001482                           524  
00001482                           525  
00001482                           526  
00001482                           527  
00001482                           528  
00001482                           529  
00001482                           530  
00001482                           531  -------------------- end include --------------------
00001482                           532              INCLUDE 'opcode_size.X68'
00001482                           533  movea_size:
00001482  48E7 FDFE                534          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001486  3200                     535          MOVE.W      D0,D1           *put the full opcode into D1
00001488  C27C 3000                536          AND.W       #mask_size_MOVES,D1 *mask to only see the size bits
0000148C                           537          
0000148C                           538          *test for word size
0000148C  B27C 3000                539  MA_W    CMP.W       #m_size_W_MOVES,D1
00001490  6600 001E                540          BNE         MA_L
00001494  43F9 0000850F            541          LEA         opcode_MOVEAW,A1
0000149A  1C3C 0002                542          MOVE.B      #word_size,D6
0000149E  4EB8 128C                543          JSR         print_string_op_nn  *print the opcode
000014A2  4EB9 00006B28            544          JSR         MOVEA_sub
000014A8  4EB8 143E                545          JSR         print_ea
000014AC  6000 002C                546          BRA         MA_END
000014B0                           547          
000014B0                           548          *test for long size
000014B0  B27C 2000                549  MA_L    CMP.W       #m_size_L_MOVES,D1
000014B4  6600 001E                550          BNE         MA_FAIL
000014B8  43F9 00008517            551          LEA         opcode_MOVEAL,A1
000014BE  1C3C 0003                552          MOVE.B      #long_size,D6
000014C2  4EB8 128C                553          JSR         print_string_op_nn  *print the opcode
000014C6  4EB9 00006B28            554          JSR         MOVEA_sub
000014CC  4EB8 143E                555          JSR         print_ea
000014D0  6000 0008                556          BRA         MA_END
000014D4                           557          
000014D4                           558          *did not match, its data
000014D4  4EB9 00002364            559  MA_FAIL JSR         op_DATA
000014DA                           560          
000014DA  4CDF 7FBF                561  MA_END  MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000014DE  4E75                     562          RTS
000014E0                           563  
000014E0                           564  move_size:
000014E0  48E7 FDFE                565          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000014E4  3200                     566          MOVE.W      D0,D1           *put the full opcode into D1
000014E6  C27C 3000                567          AND.W       #mask_size_MOVES,D1 *mask to only see the size bits
000014EA                           568          
000014EA                           569          *test for byte size
000014EA  B27C 1000                570          CMP.W       #m_size_B_MOVES,D1
000014EE  6600 0020                571          BNE         M_W
000014F2  43F9 000084E6            572          LEA         opcode_MOVEB,A1    *move the value for printing
000014F8  1C3C 0001                573          MOVE.B      #byte_size,D6
000014FC  4EB8 128C                574          JSR         print_string_op_nn  *print the opcode
00001500  3200                     575          MOVE.W      D0,D1               *reload full address
00001502  4EB9 00004A82            576          JSR         MOVE_MOVE
00001508  4EB8 143E                577          JSR         print_ea
0000150C  6000 0054                578          BRA         M_END
00001510                           579          
00001510                           580          *test for word size
00001510  B27C 3000                581  M_W     CMP.W       #m_size_W_MOVES,D1
00001514  6600 0020                582          BNE         M_L
00001518  43F9 000084ED            583          LEA         opcode_MOVEW,A1
0000151E  1C3C 0002                584          MOVE.B      #word_size,D6
00001522  4EB8 128C                585          JSR         print_string_op_nn  *print the opcode
00001526  3200                     586          MOVE.W      D0,D1               *reload full address
00001528  4EB9 00004A82            587          JSR         MOVE_MOVE
0000152E  4EB8 143E                588          JSR         print_ea
00001532  6000 002E                589          BRA         M_END
00001536                           590          
00001536                           591          *test for long size
00001536  B27C 2000                592  M_L     CMP.W       #m_size_L_MOVES,D1
0000153A  6600 0020                593          BNE         M_FAIL
0000153E  43F9 000084F4            594          LEA         opcode_MOVEL,A1
00001544  1C3C 0003                595          MOVE.B      #long_size,D6
00001548  4EB8 128C                596          JSR         print_string_op_nn  *print the opcode
0000154C  3200                     597          MOVE.W      D0,D1               *reload full address
0000154E  4EB9 00004A82            598          JSR         MOVE_MOVE
00001554  4EB8 143E                599          JSR         print_ea
00001558  6000 0008                600          BRA         M_END
0000155C                           601          
0000155C  4EB9 00002364            602  M_FAIL  JSR         op_DATA
00001562                           603          
00001562  4CDF 7FBF                604  M_END   MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001566  4E75                     605          RTS
00001568                           606          
00001568                           607  movem_rm_size:
00001568  48E7 FDFE                608          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000156C  3200                     609          MOVE.W      D0,D1           *put the full opcode into D1
0000156E  C27C 0040                610          AND.W       #mask_size_MOVEM,D1 *mask to only see the size bits
00001572                           611          
00001572                           612          *test for word size
00001572  B27C 0000                613          CMP.W       #m_size_W_MOVEM,D1
00001576  6600 001E                614          BNE         MOVEM_rm_L 
0000157A  43F9 00008655            615          LEA         opcode_MOVEMW,A1    *move the value for printing
00001580  1C3C 0002                616          MOVE.B      #word_size,D6
00001584  4EB8 128C                617          JSR         print_string_op_nn  *print the opcode
00001588  4EB9 00005338            618          JSR         MOVEM_sub
0000158E  4EB8 143E                619          JSR         print_ea
00001592  6000 002C                620          BRA         MOVEM_rm_END
00001596                           621          
00001596                           622          *test for long size
00001596                           623  MOVEM_rm_L  
00001596  B27C 0040                624          CMP.W       #m_size_L_MOVEM,D1
0000159A  6600 001E                625          BNE         MOVEM_rm_FAIL
0000159E  43F9 0000865D            626          LEA         opcode_MOVEML,A1
000015A4  1C3C 0003                627          MOVE.B      #long_size,D6
000015A8  4EB8 128C                628          JSR         print_string_op_nn  *print the opcode
000015AC  4EB9 00005338            629          JSR         MOVEM_sub
000015B2  4EB8 143E                630          JSR         print_ea
000015B6  6000 0008                631          BRA         MOVEM_rm_END
000015BA                           632          
000015BA                           633  MOVEM_rm_FAIL 
000015BA  4EB9 00002364            634          JSR         op_DATA
000015C0                           635  
000015C0                           636  MOVEM_rm_END 
000015C0  4CDF 7FBF                637          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000015C4  4E75                     638          RTS
000015C6                           639  
000015C6                           640  movem_mr_size:
000015C6  48E7 FDFE                641          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000015CA  3200                     642          MOVE.W      D0,D1           *put the full opcode into D1
000015CC  C27C 0040                643          AND.W       #mask_size_MOVEM,D1 *mask to only see the size bits
000015D0                           644          
000015D0                           645          *test for word size
000015D0  B27C 0000                646          CMP.W       #m_size_W_MOVEM,D1
000015D4  6600 001E                647          BNE         MOVEM_mr_L
000015D8  43F9 00008655            648          LEA         opcode_MOVEMW,A1    *move the value for printing
000015DE  1C3C 0002                649          MOVE.B      #word_size,D6
000015E2  4EB8 128C                650          JSR         print_string_op_nn  *print the opcode
000015E6  4EB9 00005338            651          JSR         MOVEM_sub
000015EC  4EB8 143E                652          JSR         print_ea
000015F0  6000 002C                653          BRA         MOVEM_mr_END
000015F4                           654          
000015F4                           655          *test for long size
000015F4                           656  MOVEM_mr_L  
000015F4  B27C 0040                657          CMP.W       #m_size_L_MOVEM,D1
000015F8  6600 001E                658          BNE         MOVEM_mr_FAIL
000015FC  43F9 0000865D            659          LEA         opcode_MOVEML,A1
00001602  1C3C 0003                660          MOVE.B      #long_size,D6
00001606  4EB8 128C                661          JSR         print_string_op_nn  *print the opcode
0000160A  4EB9 00005338            662          JSR         MOVEM_sub
00001610  4EB8 143E                663          JSR         print_ea
00001614  6000 0008                664          BRA         MOVEM_mr_END
00001618                           665          
00001618                           666  MOVEM_mr_FAIL 
00001618  4EB9 00002364            667          JSR         op_DATA
0000161E                           668  
0000161E                           669  MOVEM_mr_END 
0000161E  4CDF 7FBF                670          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001622  4E75                     671          RTS
00001624                           672  
00001624                           673          
00001624                           674  nop_size:
00001624  48E7 FDFE                675          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001628  43F9 0000851F            676          LEA         opcode_NOP,A1
0000162E  1C3C 0000                677          MOVE.B      #no_size,D6
00001632  4EB8 12C0                678          JSR         print_string_op_nl  *print the opcode
00001636  4CDF 7FBF                679          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000163A  4E75                     680          RTS
0000163C                           681          
0000163C                           682  rts_size:
0000163C  48E7 FDFE                683          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001640  43F9 00008641            684          LEA         opcode_RTS,A1
00001646  1C3C 0000                685          MOVE.B      #no_size,D6
0000164A  4EB8 12C0                686          JSR         print_string_op_nl  *print the opcode
0000164E  4CDF 7FBF                687          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001652  4E75                     688          RTS
00001654                           689          
00001654                           690          
00001654                           691  lea_size:
00001654  48E7 FDFE                692          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001658  43F9 0000856A            693          LEA         opcode_LEA,A1
0000165E  1C3C 0003                694          MOVE.B      #long_size,D6
00001662  4EB8 128C                695          JSR         print_string_op_nn  *print the opcode
00001666  4EB9 0000487A            696          JSR         LEA_sub
0000166C  4EB8 143E                697          JSR         print_ea
00001670  4CDF 7FBF                698          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001674  4E75                     699          RTS
00001676                           700          
00001676                           701  jsr_size:
00001676  48E7 FDFE                702          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000167A  43F9 0000863D            703          LEA         opcode_JSR,A1
00001680  1C3C 0000                704          MOVE.B      #no_size,D6
00001684  4EB8 128C                705          JSR         print_string_op_nn  *print the opcode
00001688  4EB9 0000474A            706          JSR         JSR_sub
0000168E  4EB8 143E                707          JSR         print_ea
00001692  4CDF 7FBF                708          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001696  4E75                     709          RTS
00001698                           710          
00001698                           711  not_size:
00001698  48E7 FDFE                712          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000169C  3200                     713          MOVE.W      D0,D1           *put the full opcode into D1
0000169E  C27C 00C0                714          AND.W       #mask_size_NOT,D1 *mask to only see the size bits
000016A2                           715          
000016A2                           716          *test for byte size
000016A2  B27C 0000                717          CMP.W       #m_size_B_NOT,D1
000016A6  6600 001E                718          BNE         NOT_W
000016AA  43F9 0000858F            719          LEA         opcode_NOTB,A1    *move the value for printing
000016B0  1C3C 0001                720          MOVE.B      #byte_size,D6
000016B4  4EB8 128C                721          JSR         print_string_op_nn  *print the opcode
000016B8  4EB9 000071D0            722          JSR         NOT_sub
000016BE  4EB8 143E                723          JSR         print_ea
000016C2  6000 0050                724          BRA         NOT_END
000016C6                           725          
000016C6                           726          *test for word size
000016C6  B27C 0040                727  NOT_W   CMP.W       #m_size_W_NOT,D1
000016CA  6600 001E                728          BNE         NOT_L
000016CE  43F9 00008595            729          LEA         opcode_NOTW,A1
000016D4  1C3C 0002                730          MOVE.B      #word_size,D6
000016D8  4EB8 128C                731          JSR         print_string_op_nn  *print the opcode
000016DC  4EB9 000071D0            732          JSR         NOT_sub
000016E2  4EB8 143E                733          JSR         print_ea
000016E6  6000 002C                734          BRA         NOT_END
000016EA                           735          
000016EA                           736          *test for long size
000016EA  B27C 0080                737  NOT_L   CMP.W       #m_size_L_NOT,D1
000016EE  6600 001E                738          BNE         NOT_FAIL
000016F2  43F9 0000859B            739          LEA         opcode_NOTL,A1
000016F8  1C3C 0003                740          MOVE.B      #long_size,D6
000016FC  4EB8 128C                741          JSR         print_string_op_nn  *print the opcode
00001700  4EB9 000071D0            742          JSR         NOT_sub
00001706  4EB8 143E                743          JSR         print_ea
0000170A  6000 0008                744          BRA         NOT_END
0000170E                           745          
0000170E                           746          *does not match any
0000170E  4EB9 00002364            747  NOT_FAIL JSR         op_DATA
00001714                           748          
00001714  4CDF 7FBF                749  NOT_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001718  4E75                     750          RTS
0000171A                           751  
0000171A                           752  
0000171A                           753  adda_size:
0000171A  48E7 FDFE                754          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000171E  3200                     755          MOVE.W      D0,D1           *put the full opcode into D1
00001720  C27C 0100                756          AND.W       #mask_size_ADDA,D1 *mask to only see the size bits
00001724                           757          
00001724                           758          *test for word size
00001724  B27C 0000                759          CMP.W       #m_size_W_ADDA,D1
00001728  6600 001E                760          BNE         ADDA_L
0000172C  43F9 00008535            761          LEA         opcode_ADDAW,A1    *move the value for printing
00001732  1C3C 0002                762          MOVE.B      #word_size,D6
00001736  4EB8 128C                763          JSR         print_string_op_nn  *print the opcode
0000173A  4EB9 0000366E            764          JSR         ADDA_sub
00001740  4EB8 143E                765          JSR         print_ea
00001744  6000 002C                766          BRA         ADDA_END
00001748                           767          
00001748                           768          *test for long size
00001748  B27C 0100                769  ADDA_L  CMP.W       #m_size_L_ADDA,D1
0000174C  6600 001E                770          BNE         ADDA_FAIL
00001750  43F9 0000853C            771          LEA         opcode_ADDAL,A1
00001756  1C3C 0003                772          MOVE.B      #long_size,D6
0000175A  4EB8 128C                773          JSR         print_string_op_nn  *print the opcode
0000175E  4EB9 0000366E            774          JSR         ADDA_sub
00001764  4EB8 143E                775          JSR         print_ea
00001768  6000 0008                776          BRA         ADDA_END
0000176C                           777          
0000176C  4EB9 00002364            778  ADDA_FAIL JSR         op_DATA
00001772                           779  
00001772  4CDF 7FBF                780  ADDA_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001776  4E75                     781          RTS
00001778                           782          
00001778                           783  add_size:
00001778  48E7 FDFE                784          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000177C  3200                     785          MOVE.W      D0,D1           *put the full opcode into D1
0000177E  C27C 00C0                786          AND.W       #mask_size_ADD,D1 *mask to only see the size bits
00001782                           787          
00001782                           788          *test for byte size
00001782  B27C 0000                789          CMP.W       #m_size_B_ADD,D1
00001786  6600 001E                790          BNE         ADD_W
0000178A  43F9 00008523            791          LEA         opcode_ADDB,A1    *move the value for printing
00001790  1C3C 0001                792          MOVE.B      #byte_size,D6
00001794  4EB8 128C                793          JSR         print_string_op_nn  *print the opcode
00001798  4EB9 0000237A            794          JSR         ADD_ADD             *calculate ea and print
0000179E  4EB8 143E                795          JSR         print_ea
000017A2  6000 0050                796          BRA         ADD_END
000017A6                           797          
000017A6                           798          *test for word size
000017A6  B27C 0040                799  ADD_W   CMP.W       #m_size_W_ADD,D1
000017AA  6600 001E                800          BNE         ADD_L
000017AE  43F9 00008529            801          LEA         opcode_ADDW,A1
000017B4  1C3C 0002                802          MOVE.B      #word_size,D6
000017B8  4EB8 128C                803          JSR         print_string_op_nn  *print the opcode
000017BC  4EB9 0000237A            804          JSR         ADD_ADD             *calculate ea and print
000017C2  4EB8 143E                805          JSR         print_ea
000017C6  6000 002C                806          BRA         ADD_END
000017CA                           807          
000017CA                           808          *test for long size
000017CA  B27C 0080                809  ADD_L   CMP.W       #m_size_L_ADD,D1
000017CE  6600 001E                810          BNE         ADD_FAIL
000017D2  43F9 0000852F            811          LEA         opcode_ADDL,A1
000017D8  1C3C 0003                812          MOVE.B      #long_size,D6
000017DC  4EB8 128C                813          JSR         print_string_op_nn  *print the opcode
000017E0  4EB9 0000237A            814          JSR         ADD_ADD             *calculate ea and print
000017E6  4EB8 143E                815          JSR         print_ea
000017EA  6000 0008                816          BRA         ADD_END
000017EE                           817          
000017EE  4EB9 00002364            818  ADD_FAIL JSR         op_DATA
000017F4                           819          
000017F4  4CDF 7FBF                820  ADD_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000017F8  4E75                     821          RTS
000017FA                           822  
000017FA                           823  bcc_size:
000017FA  48E7 FDFE                824          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000017FE  3200                     825          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001800  C27C 00FF                826          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001804                           827          
00001804                           828          *test for long displacement size
00001804  B27C 00FF                829  BCC_L   CMP.W       #m_size_L_bcc,D1
00001808  6600 000E                830          BNE         BCC_W
0000180C                           831          *grab the next 32 bits
0000180C  2210                     832          MOVE.L      (A0),D1         *move the long value into D1
0000180E  5848                     833          ADDQ        #4,A0           *increment the pointer by 1 long
00001810  4EB8 12F4                834          JSR         print_string_sized  *print the output
00001814  6000 001E                835          BRA         BCC_END
00001818                           836          
00001818                           837          *test for word displacement size
00001818  B27C 0000                838  BCC_W   CMP.W       #m_size_W_bcc,D1
0000181C  6600 000E                839          BNE         BCC_B
00001820                           840          *grab the next 16 bits
00001820  3210                     841          MOVE.W      (A0),D1         *move the long value into D1
00001822  5448                     842          ADDQ        #2,A0           *increment the pointer by 1 word
00001824  4EB8 12F4                843          JSR         print_string_sized  *print the output
00001828  6000 000A                844          BRA         BCC_END
0000182C                           845          
0000182C                           846          *neither so it is byte size, print byte
0000182C  4EB8 12C0                847  BCC_B   JSR         print_string_op_nl
00001830  6000 0002                848          BRA         BCC_END
00001834                           849          
00001834  4CDF 7FBF                850  BCC_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001838  4E75                     851          RTS
0000183A                           852  
0000183A                           853  
0000183A                           854  bgt_size:
0000183A  48E7 FDFE                855          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000183E  3200                     856          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001840  C27C 00FF                857          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001844                           858          
00001844                           859          *test for long displacement size
00001844  B27C 00FF                860  BGT_L   CMP.W       #m_size_L_bcc,D1
00001848  6600 001E                861          BNE         BGT_W
0000184C  43F9 0000860D            862          LEA         opcode_BGT,A1
00001852                           863          *grab the next 32 bits
00001852  5448                     864          ADDQ        #2,A0           *increment the pointer by 1 word
00001854  2610                     865          MOVE.L      (A0),D3         *move the data to D3
00001856  2408                     866          MOVE.L      A0,D2           *move the address location to D2
00001858  5448                     867          ADDQ        #2,A0           *increment the pointer by another 1 word
0000185A  4EB9 00001A12            868          JSR         bcc_address
00001860  4EB8 1392                869          JSR         print_bcc       *print the output
00001864  6000 0044                870          BRA         BGT_END
00001868                           871          
00001868                           872          *test for word displacement size
00001868  B27C 0000                873  BGT_W   CMP.W       #m_size_W_bcc,D1
0000186C  6600 001E                874          BNE         BGT_B
00001870  43F9 00008617            875          LEA         opcode_BGTW,A1
00001876                           876          *grab the next 16 bits
00001876  5448                     877          ADDQ        #2,A0           *increment the pointer by 1 word
00001878  3610                     878          MOVE.W      (A0),D3         *move the data to D3
0000187A  2408                     879          MOVE.L      A0,D2           *move the address location to D2
0000187C  48C3                     880          EXT.L       D3              *make the word into long
0000187E  4EB9 00001A12            881          JSR         bcc_address
00001884  4EB8 1392                882          JSR         print_bcc       *print the output
00001888  6000 0020                883          BRA         BGT_END
0000188C                           884          
0000188C                           885          *neither so it is byte size, print byte
0000188C  43F9 00008611            886  BGT_B   LEA         opcode_BGTB,A1
00001892  3610                     887          MOVE.W      (A0),D3         *move the data to D3
00001894  E14B                     888          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
00001896  E04B                     889          LSR.W       #8,D3
00001898  2408                     890          MOVE.L      A0,D2           *move the address location to D2
0000189A  48C3                     891          EXT.L       D3              *make the word into long
0000189C  4EB9 00001A12            892          JSR         bcc_address
000018A2  4EB8 1392                893          JSR         print_bcc       *print the output
000018A6  6000 0002                894          BRA         BGT_END
000018AA                           895          
000018AA  4CDF 7FBF                896  BGT_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000018AE  4E75                     897          RTS
000018B0                           898          
000018B0                           899  beq_size:
000018B0  48E7 FDFE                900          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000018B4  3200                     901          MOVE.W      D0,D1           *refresh the entire opcode into D1
000018B6  C27C 00FF                902          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
000018BA                           903          
000018BA                           904          *test for long displacement size
000018BA  B27C 00FF                905  BEQ_L   CMP.W       #m_size_L_bcc,D1
000018BE  6600 001E                906          BNE         BEQ_W
000018C2  43F9 0000862D            907          LEA         opcode_BEQ,A1
000018C8                           908          *grab the next 32 bits
000018C8  5448                     909          ADDQ        #2,A0           *increment the pointer by 1 word
000018CA  2610                     910          MOVE.L      (A0),D3         *move the data to D3
000018CC  2408                     911          MOVE.L      A0,D2           *move the address location to D2
000018CE  5448                     912          ADDQ        #2,A0           *increment the pointer by another 1 word
000018D0  4EB9 00001A12            913          JSR         bcc_address
000018D6  4EB8 1392                914          JSR         print_bcc       *print the output
000018DA  6000 0044                915          BRA         BEQ_END
000018DE                           916          
000018DE                           917          *test for word displacement size
000018DE  B27C 0000                918  BEQ_W   CMP.W       #m_size_W_bcc,D1
000018E2  6600 001E                919          BNE         BEQ_B
000018E6  43F9 00008637            920          LEA         opcode_BEQW,A1
000018EC                           921          *grab the next 16 bits
000018EC  5448                     922          ADDQ        #2,A0           *increment the pointer by 1 word
000018EE  3610                     923          MOVE.W      (A0),D3         *move the data to D3
000018F0  2408                     924          MOVE.L      A0,D2           *move the address location to D2
000018F2  48C3                     925          EXT.L       D3              *make the word into long
000018F4  4EB9 00001A12            926          JSR         bcc_address
000018FA  4EB8 1392                927          JSR         print_bcc       *print the output
000018FE  6000 0020                928          BRA         BEQ_END
00001902                           929          
00001902                           930          *neither so it is byte size, print byte
00001902  43F9 00008631            931  BEQ_B   LEA         opcode_BEQB,A1
00001908  3610                     932          MOVE.W      (A0),D3         *move the data to D3
0000190A  E14B                     933          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
0000190C  E04B                     934          LSR.W       #8,D3
0000190E  2408                     935          MOVE.L      A0,D2           *move the address location to D2
00001910  48C3                     936          EXT.L       D3              *make the word into long
00001912  4EB9 00001A12            937          JSR         bcc_address
00001918  4EB8 1392                938          JSR         print_bcc       *print the output
0000191C  6000 0002                939          BRA         BEQ_END
00001920                           940          
00001920  4CDF 7FBF                941  BEQ_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001924  4E75                     942          RTS
00001926                           943          
00001926                           944  ble_size:
00001926  48E7 FDFE                945          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000192A  3200                     946          MOVE.W      D0,D1           *refresh the entire opcode into D1
0000192C  C27C 00FF                947          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001930                           948          
00001930                           949          *test for long displacement size
00001930  B27C 00FF                950  BLE_L   CMP.W       #m_size_L_bcc,D1
00001934  6600 001E                951          BNE         BLE_W
00001938  43F9 0000861D            952          LEA         opcode_BLE,A1
0000193E                           953          *grab the next 32 bits
0000193E  5448                     954          ADDQ        #2,A0           *increment the pointer by 1 word
00001940  2610                     955          MOVE.L      (A0),D3         *move the data to D3
00001942  2408                     956          MOVE.L      A0,D2           *move the address location to D2
00001944  5448                     957          ADDQ        #2,A0           *increment the pointer by another 1 word
00001946  4EB9 00001A12            958          JSR         bcc_address
0000194C  4EB8 1392                959          JSR         print_bcc       *print the output
00001950  6000 0044                960          BRA         BLE_END
00001954                           961          
00001954                           962          *test for word displacement size
00001954  B27C 0000                963  BLE_W   CMP.W       #m_size_W_bcc,D1
00001958  6600 001E                964          BNE         BLE_B
0000195C  43F9 00008627            965          LEA         opcode_BLEW,A1
00001962                           966          *grab the next 16 bits
00001962  5448                     967          ADDQ        #2,A0           *increment the pointer by 1 word
00001964  3610                     968          MOVE.W      (A0),D3         *move the data to D3
00001966  2408                     969          MOVE.L      A0,D2           *move the address location to D2
00001968  48C3                     970          EXT.L       D3              *make the word into long
0000196A  4EB9 00001A12            971          JSR         bcc_address
00001970  4EB8 1392                972          JSR         print_bcc       *print the output
00001974  6000 0020                973          BRA         BLE_END
00001978                           974          
00001978                           975          *neither so it is byte size, print byte
00001978  43F9 00008621            976  BLE_B   LEA         opcode_BLEB,A1
0000197E  3610                     977          MOVE.W      (A0),D3         *move the data to D3
00001980  E14B                     978          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
00001982  E04B                     979          LSR.W       #8,D3
00001984  2408                     980          MOVE.L      A0,D2           *move the address location to D2
00001986  48C3                     981          EXT.L       D3              *make the word into long
00001988  4EB9 00001A12            982          JSR         bcc_address
0000198E  4EB8 1392                983          JSR         print_bcc       *print the output
00001992  6000 0002                984          BRA         BLE_END
00001996                           985          
00001996  4CDF 7FBF                986  BLE_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000199A  4E75                     987          RTS
0000199C                           988  
0000199C                           989  
0000199C                           990          
0000199C                           991  bra_size:
0000199C  48E7 FDFE                992          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000019A0  3200                     993          MOVE.W      D0,D1           *refresh the entire opcode into D1
000019A2  C27C 00FF                994          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
000019A6                           995          
000019A6                           996          *test for long displacement size
000019A6  B27C 00FF                997  BRA_L   CMP.W       #m_size_L_bcc,D1
000019AA  6600 001E                998          BNE         BRA_W
000019AE  43F9 00008645            999          LEA         opcode_BRA,A1
000019B4                          1000          *grab the next 32 bits
000019B4  5448                    1001          ADDQ        #2,A0           *increment the pointer by 1 word
000019B6  2610                    1002          MOVE.L      (A0),D3         *move the data to D3
000019B8  2408                    1003          MOVE.L      A0,D2           *move the address location to D2
000019BA  5448                    1004          ADDQ        #2,A0           *increment the pointer by another 1 word
000019BC  4EB9 00001A12           1005          JSR         bcc_address
000019C2  4EB8 1392               1006          JSR         print_bcc       *print the output
000019C6  6000 0044               1007          BRA         BRA_END
000019CA                          1008          
000019CA                          1009          *test for word displacement size
000019CA  B27C 0000               1010  BRA_W   CMP.W       #m_size_W_bcc,D1
000019CE  6600 001E               1011          BNE         BRA_B
000019D2  43F9 0000864F           1012          LEA         opcode_BRAW,A1
000019D8                          1013          *grab the next 16 bits
000019D8  5448                    1014          ADDQ        #2,A0           *increment the pointer by 1 word
000019DA  3610                    1015          MOVE.W      (A0),D3         *move the data to D3
000019DC  2408                    1016          MOVE.L      A0,D2           *move the address location to D2
000019DE  48C3                    1017          EXT.L       D3              *make the word into long
000019E0  4EB9 00001A12           1018          JSR         bcc_address
000019E6  4EB8 1392               1019          JSR         print_bcc       *print the output
000019EA  6000 0020               1020          BRA         BRA_END
000019EE                          1021          
000019EE                          1022          *neither so it is byte size, print byte
000019EE  43F9 00008649           1023  BRA_B   LEA         opcode_BRAB,A1
000019F4  3610                    1024          MOVE.W      (A0),D3         *move the data to D3
000019F6  E14B                    1025          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
000019F8  E04B                    1026          LSR.W       #8,D3
000019FA  2408                    1027          MOVE.L      A0,D2           *move the address location to D2
000019FC  48C3                    1028          EXT.L       D3              *make the word into long
000019FE  4EB9 00001A12           1029          JSR         bcc_address
00001A04  4EB8 1392               1030          JSR         print_bcc       *print the output
00001A08  6000 0002               1031          BRA         BRA_END
00001A0C                          1032          
00001A0C  4CDF 7FBF               1033  BRA_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001A10  4E75                    1034          RTS
00001A12                          1035  
00001A12                          1036  bcc_address:
00001A12  48E7 EFFE               1037          MOVEM.L     D0-D2/D4-D7/A0-A6, -(SP)
00001A16  B6BC 00000000           1038          CMP.L       #0,D3           *compare against 0
00001A1C  6D00 0008               1039          BLT         bcc_negative    *branch if the value is negative
00001A20                          1040          *else
00001A20  D682                    1041          ADD.L       D2,D3           *add address by displacement
00001A22  6000 000A               1042          BRA         bcc_add_end     *return for printing
00001A26                          1043  bcc_negative
00001A26  7800                    1044          MOVE.L      #0,D4
00001A28  9883                    1045          SUB.L       D3,D4           *flip the bits
00001A2A  9484                    1046          SUB.L       D4,D2           *get the address of displacemnt
00001A2C  2602                    1047          MOVE.L      D2,D3           *move back for printing
00001A2E                          1048  bcc_add_end  
00001A2E  4CDF 7FF7               1049          MOVEM.L     (SP)+, D0-D2/D4-D7/A0-A6
00001A32  4E75                    1050          RTS
00001A34                          1051                  
00001A34                          1052  lsl_r_size:
00001A34  48E7 FDFE               1053          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001A38  3200                    1054          MOVE.W      D0,D1           *put the full opcode into D1
00001A3A  C27C 00C0               1055          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001A3E                          1056          
00001A3E                          1057          *test for byte size
00001A3E  B27C 0000               1058          CMP.W       #m_size_B_shfts,D1
00001A42  6600 001E               1059          BNE         LSLR_W
00001A46  43F9 000085A1           1060          LEA         opcode_LSLB,A1    *move the value for printing
00001A4C  1C3C 0001               1061          MOVE.B      #byte_size,D6
00001A50  4EB8 128C               1062          JSR         print_string_op_nn  *print the opcode
00001A54  4EB9 00006592           1063          JSR         LSD_sub
00001A5A  4EB8 143E               1064          JSR         print_ea
00001A5E  6000 0050               1065          BRA         LSLR_END
00001A62                          1066          
00001A62                          1067          *test for word size
00001A62  B27C 0040               1068  LSLR_W  CMP.W       #m_size_W_shfts,D1
00001A66  6600 001E               1069          BNE         LSLR_L
00001A6A  43F9 000085A7           1070          LEA         opcode_LSLW,A1
00001A70  1C3C 0002               1071          MOVE.B      #word_size,D6
00001A74  4EB8 128C               1072          JSR         print_string_op_nn  *print the opcode
00001A78  4EB9 00006592           1073          JSR         LSD_sub
00001A7E  4EB8 143E               1074          JSR         print_ea
00001A82  6000 002C               1075          BRA         LSLR_END
00001A86                          1076          
00001A86                          1077          *test for long size
00001A86  B27C 0080               1078  LSLR_L  CMP.W       #m_size_L_shfts,D1
00001A8A  6600 001E               1079          BNE         LSLR_FAIL
00001A8E  43F9 000085AD           1080          LEA         opcode_LSLL,A1
00001A94  1C3C 0003               1081          MOVE.B      #long_size,D6
00001A98  4EB8 128C               1082          JSR         print_string_op_nn  *print the opcode
00001A9C  4EB9 00006592           1083          JSR         LSD_sub
00001AA2  4EB8 143E               1084          JSR         print_ea
00001AA6  6000 0008               1085          BRA         LSLR_END
00001AAA                          1086          
00001AAA                          1087          *did not match any
00001AAA  4EB9 00002364           1088  LSLR_FAIL JSR         op_DATA
00001AB0                          1089          
00001AB0  4CDF 7FBF               1090  LSLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001AB4  4E75                    1091          RTS
00001AB6                          1092  
00001AB6                          1093  lsl_m_size:
00001AB6  48E7 FDFE               1094          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001ABA  3200                    1095          MOVE.W      D0,D1           *put the full opcode into D1
00001ABC                          1096          *memory only works on word size
00001ABC  43F9 000085A7           1097          LEA         opcode_LSLW,A1
00001AC2  1C3C 0002               1098          MOVE.B      #word_size,D6
00001AC6  4EB8 128C               1099          JSR         print_string_op_nn  *print the opcode
00001ACA  4EB9 00006592           1100          JSR         LSD_sub
00001AD0  4EB8 143E               1101          JSR         print_ea
00001AD4  6000 0002               1102          BRA         LSLM_END
00001AD8                          1103          
00001AD8  4CDF 7FBF               1104  LSLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001ADC  4E75                    1105          RTS
00001ADE                          1106  
00001ADE                          1107  
00001ADE                          1108  lsr_r_size:
00001ADE  48E7 FDFE               1109          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001AE2  3200                    1110          MOVE.W      D0,D1           *put the full opcode into D1
00001AE4  C27C 00C0               1111          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001AE8                          1112          
00001AE8                          1113          *test for byte size
00001AE8  B27C 0000               1114          CMP.W       #m_size_B_shfts,D1
00001AEC  6600 001E               1115          BNE         LSRR_W
00001AF0  43F9 000085B3           1116          LEA         opcode_LSRB,A1    *move the value for printing
00001AF6  1C3C 0001               1117          MOVE.B      #byte_size,D6
00001AFA  4EB8 128C               1118          JSR         print_string_op_nn  *print the opcode
00001AFE  4EB9 00006592           1119          JSR         LSD_sub
00001B04  4EB8 143E               1120          JSR         print_ea
00001B08  6000 0050               1121          BRA         LSRR_END
00001B0C                          1122          
00001B0C                          1123          *test for word size
00001B0C  B27C 0040               1124  LSRR_W  CMP.W       #m_size_W_shfts,D1
00001B10  6600 001E               1125          BNE         LSRR_L
00001B14  43F9 000085B9           1126          LEA         opcode_LSRW,A1
00001B1A  1C3C 0002               1127          MOVE.B      #word_size,D6
00001B1E  4EB8 128C               1128          JSR         print_string_op_nn  *print the opcode
00001B22  4EB9 00006592           1129          JSR         LSD_sub
00001B28  4EB8 143E               1130          JSR         print_ea
00001B2C  6000 002C               1131          BRA         LSRR_END
00001B30                          1132          
00001B30                          1133          *test for long size
00001B30  B27C 0080               1134  LSRR_L  CMP.W       #m_size_L_shfts,D1
00001B34  6600 001E               1135          BNE         LSRR_FAIL
00001B38  43F9 000085BF           1136          LEA         opcode_LSRL,A1
00001B3E  1C3C 0003               1137          MOVE.B      #long_size,D6
00001B42  4EB8 128C               1138          JSR         print_string_op_nn  *print the opcode
00001B46  4EB9 00006592           1139          JSR         LSD_sub
00001B4C  4EB8 143E               1140          JSR         print_ea
00001B50  6000 0008               1141          BRA         LSRR_END
00001B54                          1142          
00001B54  4EB9 00002364           1143  LSRR_FAIL JSR         op_DATA
00001B5A                          1144          
00001B5A  4CDF 7FBF               1145  LSRR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001B5E  4E75                    1146          RTS
00001B60                          1147          
00001B60                          1148  lsr_m_size:
00001B60  48E7 FDFE               1149          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001B64  3200                    1150          MOVE.W      D0,D1           *put the full opcode into D1
00001B66                          1151          *memory only works on word size
00001B66  43F9 000085B9           1152          LEA         opcode_LSRW,A1
00001B6C  1C3C 0002               1153          MOVE.B      #word_size,D6
00001B70  4EB8 128C               1154          JSR         print_string_op_nn  *print the opcode
00001B74  4EB9 00006592           1155          JSR         LSD_sub
00001B7A  4EB8 143E               1156          JSR         print_ea
00001B7E  6000 0002               1157          BRA         LSRM_END
00001B82                          1158          
00001B82  4CDF 7FBF               1159  LSRM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001B86  4E75                    1160          RTS
00001B88                          1161  
00001B88                          1162  asl_r_size:
00001B88  48E7 FDFE               1163          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001B8C  3200                    1164          MOVE.W      D0,D1           *put the full opcode into D1
00001B8E  C27C 00C0               1165          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001B92                          1166          
00001B92                          1167          *test for byte size
00001B92  B27C 0000               1168          CMP.W       #m_size_B_shfts,D1
00001B96  6600 001E               1169          BNE         ASLR_W
00001B9A  43F9 000085C5           1170          LEA         opcode_ASLB,A1    *move the value for printing
00001BA0  1C3C 0001               1171          MOVE.B      #byte_size,D6
00001BA4  4EB8 128C               1172          JSR         print_string_op_nn  *print the opcode
00001BA8  4EB9 000041A8           1173          JSR         ASD_sub
00001BAE  4EB8 143E               1174          JSR         print_ea
00001BB2  6000 0050               1175          BRA         ASLR_END
00001BB6                          1176          
00001BB6                          1177          *test for word size
00001BB6  B27C 0040               1178  ASLR_W  CMP.W       #m_size_W_shfts,D1
00001BBA  6600 001E               1179          BNE         ASLR_L
00001BBE  43F9 000085CB           1180          LEA         opcode_ASLW,A1
00001BC4  1C3C 0002               1181          MOVE.B      #word_size,D6
00001BC8  4EB8 128C               1182          JSR         print_string_op_nn  *print the opcode
00001BCC  4EB9 000041A8           1183          JSR         ASD_sub
00001BD2  4EB8 143E               1184          JSR         print_ea
00001BD6  6000 002C               1185          BRA         ASLR_END
00001BDA                          1186          
00001BDA                          1187          *test for long size
00001BDA  B27C 0080               1188  ASLR_L  CMP.W       #m_size_L_shfts,D1
00001BDE  6600 001E               1189          BNE         ASLR_FAIL
00001BE2  43F9 000085D1           1190          LEA         opcode_ASLL,A1
00001BE8  1C3C 0003               1191          MOVE.B      #long_size,D6
00001BEC  4EB8 128C               1192          JSR         print_string_op_nn  *print the opcode
00001BF0  4EB9 000041A8           1193          JSR         ASD_sub
00001BF6  4EB8 143E               1194          JSR         print_ea
00001BFA  6000 0008               1195          BRA         ASLR_END
00001BFE                          1196         
00001BFE  4EB9 00002364           1197  ASLR_FAIL JSR         op_DATA
00001C04                          1198          
00001C04  4CDF 7FBF               1199  ASLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001C08  4E75                    1200          RTS
00001C0A                          1201          
00001C0A                          1202  asl_m_size:
00001C0A  48E7 FDFE               1203          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001C0E  3200                    1204          MOVE.W      D0,D1           *put the full opcode into D1
00001C10                          1205          *memory only works on word size
00001C10  43F9 000085CB           1206          LEA         opcode_ASLW,A1
00001C16  1C3C 0002               1207          MOVE.B      #word_size,D6
00001C1A  4EB8 128C               1208          JSR         print_string_op_nn  *print the opcode
00001C1E  4EB9 000041A8           1209          JSR         ASD_sub
00001C24  4EB8 143E               1210          JSR         print_ea
00001C28  6000 0002               1211          BRA         ASLM_END
00001C2C                          1212          
00001C2C  4CDF 7FBF               1213  ASLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001C30  4E75                    1214          RTS
00001C32                          1215          
00001C32                          1216  
00001C32                          1217  asr_r_size:
00001C32  48E7 FDFE               1218          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001C36  3200                    1219          MOVE.W      D0,D1           *put the full opcode into D1
00001C38  C27C 00C0               1220          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001C3C                          1221          
00001C3C                          1222          *test for byte size
00001C3C  B27C 0000               1223          CMP.W       #m_size_B_shfts,D1
00001C40  6600 001E               1224          BNE         ASRR_W
00001C44  43F9 000085D7           1225          LEA         opcode_ASRB,A1    *move the value for printing
00001C4A  1C3C 0001               1226          MOVE.B      #byte_size,D6
00001C4E  4EB8 128C               1227          JSR         print_string_op_nn  *print the opcode
00001C52  4EB9 000041A8           1228          JSR         ASD_sub
00001C58  4EB8 143E               1229          JSR         print_ea
00001C5C  6000 0050               1230          BRA         ASRR_END
00001C60                          1231          
00001C60                          1232          *test for word size
00001C60  B27C 0040               1233  ASRR_W  CMP.W       #m_size_W_shfts,D1
00001C64  6600 001E               1234          BNE         ASRR_L
00001C68  43F9 000085DD           1235          LEA         opcode_ASRW,A1
00001C6E  1C3C 0002               1236          MOVE.B      #word_size,D6
00001C72  4EB8 128C               1237          JSR         print_string_op_nn  *print the opcode
00001C76  4EB9 000041A8           1238          JSR         ASD_sub
00001C7C  4EB8 143E               1239          JSR         print_ea
00001C80  6000 002C               1240          BRA         ASRR_END
00001C84                          1241          
00001C84                          1242          *test for long size
00001C84  B27C 0080               1243  ASRR_L  CMP.W       #m_size_L_shfts,D1
00001C88  6600 001E               1244          BNE         ASRR_FAIL
00001C8C  43F9 000085E3           1245          LEA         opcode_ASRL,A1
00001C92  1C3C 0003               1246          MOVE.B      #long_size,D6
00001C96  4EB8 128C               1247          JSR         print_string_op_nn  *print the opcode
00001C9A  4EB9 000041A8           1248          JSR         ASD_sub
00001CA0  4EB8 143E               1249          JSR         print_ea
00001CA4  6000 0008               1250          BRA         ASRR_END
00001CA8                          1251          
00001CA8  4EB9 00002364           1252  ASRR_FAIL JSR         op_DATA
00001CAE                          1253          
00001CAE  4CDF 7FBF               1254  ASRR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001CB2  4E75                    1255          RTS
00001CB4                          1256  
00001CB4                          1257  asr_m_size:
00001CB4  48E7 FDFE               1258          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001CB8  3200                    1259          MOVE.W      D0,D1           *put the full opcode into D1
00001CBA                          1260          *memory only works on word size
00001CBA  43F9 000085DD           1261          LEA         opcode_ASRW,A1
00001CC0  1C3C 0002               1262          MOVE.B      #word_size,D6
00001CC4  4EB8 128C               1263          JSR         print_string_op_nn  *print the opcode
00001CC8  4EB9 000041A8           1264          JSR         ASD_sub
00001CCE  4EB8 143E               1265          JSR         print_ea
00001CD2  6000 0002               1266          BRA         ASRM_END
00001CD6                          1267          
00001CD6  4CDF 7FBF               1268  ASRM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001CDA  4E75                    1269          RTS
00001CDC                          1270          
00001CDC                          1271  
00001CDC                          1272  rol_r_size:
00001CDC  48E7 FDFE               1273          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001CE0  3200                    1274          MOVE.W      D0,D1           *put the full opcode into D1
00001CE2  C27C 00C0               1275          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001CE6                          1276          
00001CE6                          1277          *test for byte size
00001CE6  B27C 0000               1278          CMP.W       #m_size_B_shfts,D1
00001CEA  6600 001E               1279          BNE         ROLR_W
00001CEE  43F9 000085E9           1280          LEA         opcode_ROLB,A1    *move the value for printing
00001CF4  1C3C 0001               1281          MOVE.B      #byte_size,D6
00001CF8  4EB8 128C               1282          JSR         print_string_op_nn  *print the opcode
00001CFC  4EB9 00007F4C           1283          JSR         ROD_sub
00001D02  4EB8 143E               1284          JSR         print_ea
00001D06  6000 0050               1285          BRA         ROLR_END
00001D0A                          1286          
00001D0A                          1287          *test for word size
00001D0A  B27C 0040               1288  ROLR_W  CMP.W       #m_size_W_shfts,D1
00001D0E  6600 001E               1289          BNE         ROLR_L
00001D12  43F9 000085EF           1290          LEA         opcode_ROLW,A1
00001D18  1C3C 0002               1291          MOVE.B      #word_size,D6
00001D1C  4EB8 128C               1292          JSR         print_string_op_nn  *print the opcode
00001D20  4EB9 00007F4C           1293          JSR         ROD_sub
00001D26  4EB8 143E               1294          JSR         print_ea
00001D2A  6000 002C               1295          BRA         ROLR_END
00001D2E                          1296          
00001D2E                          1297          *test for long size
00001D2E  B27C 0080               1298  ROLR_L  CMP.W       #m_size_L_shfts,D1
00001D32  6600 001E               1299          BNE         ROLR_FAIL
00001D36  43F9 000085F5           1300          LEA         opcode_ROLL,A1
00001D3C  1C3C 0003               1301          MOVE.B      #long_size,D6
00001D40  4EB8 128C               1302          JSR         print_string_op_nn  *print the opcode
00001D44  4EB9 00007F4C           1303          JSR         ROD_sub
00001D4A  4EB8 143E               1304          JSR         print_ea
00001D4E  6000 0008               1305          BRA         ROLR_END
00001D52                          1306          
00001D52  4EB9 00002364           1307  ROLR_FAIL JSR         op_DATA
00001D58                          1308          
00001D58  4CDF 7FBF               1309  ROLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001D5C  4E75                    1310          RTS
00001D5E                          1311  
00001D5E                          1312  rol_m_size:
00001D5E  48E7 FDFE               1313          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001D62  3200                    1314          MOVE.W      D0,D1           *put the full opcode into D1
00001D64                          1315          *memory only works on word size
00001D64  43F9 000085EF           1316          LEA         opcode_ROLW,A1
00001D6A  1C3C 0002               1317          MOVE.B      #word_size,D6
00001D6E  4EB8 128C               1318          JSR         print_string_op_nn  *print the opcode
00001D72  4EB9 00007F4C           1319          JSR         ROD_sub
00001D78  4EB8 143E               1320          JSR         print_ea
00001D7C  6000 0002               1321          BRA         ROLM_END
00001D80                          1322          
00001D80  4CDF 7FBF               1323  ROLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001D84  4E75                    1324          RTS
00001D86                          1325          
00001D86                          1326  
00001D86                          1327  ror_r_size:
00001D86  48E7 FDFE               1328          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001D8A  3200                    1329          MOVE.W      D0,D1           *put the full opcode into D1
00001D8C  C27C 00C0               1330          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001D90                          1331          
00001D90                          1332          *test for byte size
00001D90  B27C 0000               1333          CMP.W       #m_size_B_shfts,D1
00001D94  6600 001E               1334          BNE         RORR_W
00001D98  43F9 000085FB           1335          LEA         opcode_RORB,A1    *move the value for printing
00001D9E  1C3C 0001               1336          MOVE.B      #byte_size,D6
00001DA2  4EB8 128C               1337          JSR         print_string_op_nn  *print the opcode
00001DA6  4EB9 00007F4C           1338          JSR         ROD_sub
00001DAC  4EB8 143E               1339          JSR         print_ea
00001DB0  6000 0050               1340          BRA         RORR_END
00001DB4                          1341          
00001DB4                          1342          *test for word size
00001DB4  B27C 0040               1343  RORR_W  CMP.W       #m_size_W_shfts,D1
00001DB8  6600 001E               1344          BNE         RORR_L
00001DBC  43F9 00008601           1345          LEA         opcode_RORW,A1
00001DC2  1C3C 0002               1346          MOVE.B      #word_size,D6
00001DC6  4EB8 128C               1347          JSR         print_string_op_nn  *print the opcode
00001DCA  4EB9 00007F4C           1348          JSR         ROD_sub
00001DD0  4EB8 143E               1349          JSR         print_ea
00001DD4  6000 002C               1350          BRA         RORR_END
00001DD8                          1351          
00001DD8                          1352          *test for long size
00001DD8  B27C 0080               1353  RORR_L  CMP.W       #m_size_L_shfts,D1
00001DDC  6600 001E               1354          BNE         RORR_FAIL
00001DE0  43F9 00008607           1355          LEA         opcode_RORL,A1
00001DE6  1C3C 0003               1356          MOVE.B      #long_size,D6
00001DEA  4EB8 128C               1357          JSR         print_string_op_nn  *print the opcode
00001DEE  4EB9 00007F4C           1358          JSR         ROD_sub
00001DF4  4EB8 143E               1359          JSR         print_ea
00001DF8  6000 0008               1360          BRA         RORR_END
00001DFC                          1361          
00001DFC  4EB9 00002364           1362  RORR_FAIL JSR         op_DATA
00001E02                          1363          
00001E02  4CDF 7FBF               1364  RORR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001E06  4E75                    1365          RTS
00001E08                          1366  
00001E08                          1367  ror_m_size:
00001E08  48E7 FDFE               1368          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001E0C  3200                    1369          MOVE.W      D0,D1           *put the full opcode into D1
00001E0E                          1370          *memory only works on word size
00001E0E  43F9 00008601           1371          LEA         opcode_RORW,A1
00001E14  1C3C 0002               1372          MOVE.B      #word_size,D6
00001E18  4EB8 128C               1373          JSR         print_string_op_nn  *print the opcode
00001E1C  4EB9 00007F4C           1374          JSR         ROD_sub
00001E22  4EB8 143E               1375          JSR         print_ea
00001E26  6000 0002               1376          BRA         RORM_END
00001E2A                          1377          
00001E2A  4CDF 7FBF               1378  RORM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001E2E  4E75                    1379          RTS
00001E30                          1380          
00001E30                          1381  
00001E30                          1382  addq_size:
00001E30  48E7 FDFE               1383          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001E34  3200                    1384          MOVE.W      D0,D1           *put the full opcode into D1
00001E36  C27C 00C0               1385          AND.W       #mask_size_ADD,D1 *mask to only see the size bits
00001E3A                          1386          
00001E3A                          1387          *test for byte size
00001E3A  B27C 0000               1388          CMP.W       #m_size_B_ADD,D1
00001E3E  6600 001E               1389          BNE         ADDQ_W
00001E42  43F9 00008543           1390          LEA         opcode_ADDQB,A1    *move the value for printing
00001E48  1C3C 0001               1391          MOVE.B      #byte_size,D6
00001E4C  4EB8 128C               1392          JSR         print_string_op_nn  *print the opcode
00001E50  4EB9 00003C28           1393          JSR         ADDQ_sub
00001E56  4EB8 143E               1394          JSR         print_ea
00001E5A  6000 0050               1395          BRA         ADDQ_END
00001E5E                          1396          
00001E5E                          1397          *test for word size
00001E5E  B27C 0040               1398  ADDQ_W  CMP.W       #m_size_W_ADD,D1
00001E62  6600 001E               1399          BNE         ADDQ_L
00001E66  43F9 0000854A           1400          LEA         opcode_ADDQW,A1
00001E6C  1C3C 0002               1401          MOVE.B      #word_size,D6
00001E70  4EB8 128C               1402          JSR         print_string_op_nn  *print the opcode
00001E74  4EB9 00003C28           1403          JSR         ADDQ_sub
00001E7A  4EB8 143E               1404          JSR         print_ea
00001E7E  6000 002C               1405          BRA         ADDQ_END
00001E82                          1406          
00001E82                          1407          *test for long size
00001E82  B27C 0080               1408  ADDQ_L  CMP.W       #m_size_L_ADD,D1
00001E86  6600 001E               1409          BNE         ADDQ_FAIL
00001E8A  43F9 00008551           1410          LEA         opcode_ADDQL,A1
00001E90  1C3C 0003               1411          MOVE.B      #long_size,D6
00001E94  4EB8 128C               1412          JSR         print_string_op_nn  *print the opcode
00001E98  4EB9 00003C28           1413          JSR         ADDQ_sub
00001E9E  4EB8 143E               1414          JSR         print_ea
00001EA2  6000 0008               1415          BRA         ADDQ_END
00001EA6                          1416          
00001EA6  4EB9 00002364           1417  ADDQ_FAIL JSR         op_DATA
00001EAC                          1418          
00001EAC  4CDF 7FBF               1419  ADDQ_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001EB0  4E75                    1420          RTS
00001EB2                          1421  
00001EB2                          1422  
00001EB2                          1423  sub_size:
00001EB2  48E7 FDFE               1424          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001EB6  3200                    1425          MOVE.W      D0,D1           *put the full opcode into D1
00001EB8  C27C 00C0               1426          AND.W       #mask_size_SUB,D1 *mask to only see the size bits
00001EBC                          1427          
00001EBC                          1428          *test for byte size
00001EBC  B27C 0000               1429          CMP.W       #m_size_B_SUB,D1
00001EC0  6600 001E               1430          BNE         SUB_W
00001EC4  43F9 00008558           1431          LEA         opcode_SUBB,A1    *move the value for printing
00001ECA  1C3C 0001               1432          MOVE.B      #byte_size,D6
00001ECE  4EB8 128C               1433          JSR         print_string_op_nn  *print the opcode
00001ED2  4EB9 00005C66           1434          JSR         SUB_sub
00001ED8  4EB8 143E               1435          JSR         print_ea
00001EDC  6000 0050               1436          BRA         SUB_END
00001EE0                          1437          
00001EE0                          1438          *test for word size
00001EE0  B27C 0040               1439  SUB_W   CMP.W       #m_size_W_SUB,D1
00001EE4  6600 001E               1440          BNE         SUB_L
00001EE8  43F9 0000855E           1441          LEA         opcode_SUBW,A1
00001EEE  1C3C 0002               1442          MOVE.B      #word_size,D6
00001EF2  4EB8 128C               1443          JSR         print_string_op_nn  *print the opcode
00001EF6  4EB9 00005C66           1444          JSR         SUB_sub
00001EFC  4EB8 143E               1445          JSR         print_ea
00001F00  6000 002C               1446          BRA         SUB_END
00001F04                          1447          
00001F04                          1448          *test for long size
00001F04  B27C 0080               1449  SUB_L   CMP.W       #m_size_L_SUB,D1
00001F08  6600 001E               1450          BNE         SUB_FAIL
00001F0C  43F9 00008564           1451          LEA         opcode_SUBL,A1
00001F12  1C3C 0003               1452          MOVE.B      #long_size,D6
00001F16  4EB8 128C               1453          JSR         print_string_op_nn  *print the opcode
00001F1A  4EB9 00005C66           1454          JSR         SUB_sub
00001F20  4EB8 143E               1455          JSR         print_ea
00001F24  6000 0008               1456          BRA         SUB_END
00001F28                          1457          
00001F28  4EB9 00002364           1458  SUB_FAIL JSR         op_DATA
00001F2E                          1459          
00001F2E  4CDF 7FBF               1460  SUB_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001F32  4E75                    1461          RTS
00001F34                          1462  
00001F34                          1463  and_size:
00001F34  48E7 FDFE               1464          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001F38  3200                    1465          MOVE.W      D0,D1           *put the full opcode into D1
00001F3A  C27C 00C0               1466          AND.W       #mask_size_logic,D1 *mask to only see the size bits
00001F3E                          1467          
00001F3E                          1468          *test for byte size
00001F3E  B27C 0000               1469          CMP.W       #m_size_B_logic,D1
00001F42  6600 001E               1470          BNE         AND_W
00001F46  43F9 0000856E           1471          LEA         opcode_ANDB,A1    *move the value for printing
00001F4C  1C3C 0001               1472          MOVE.B      #byte_size,D6
00001F50  4EB8 128C               1473          JSR         print_string_op_nn  *print the opcode
00001F54  4EB9 00002CB0           1474          JSR         AND_sub
00001F5A  4EB8 143E               1475          JSR         print_ea
00001F5E  6000 0050               1476          BRA         AND_END
00001F62                          1477          
00001F62                          1478          *test for word size
00001F62  B27C 0040               1479  AND_W   CMP.W       #m_size_W_logic,D1
00001F66  6600 001E               1480          BNE         AND_L
00001F6A  43F9 00008574           1481          LEA         opcode_ANDW,A1
00001F70  1C3C 0002               1482          MOVE.B      #word_size,D6
00001F74  4EB8 128C               1483          JSR         print_string_op_nn  *print the opcode
00001F78  4EB9 00002CB0           1484          JSR         AND_sub
00001F7E  4EB8 143E               1485          JSR         print_ea
00001F82  6000 002C               1486          BRA         AND_END
00001F86                          1487          
00001F86                          1488          *test for long size
00001F86  B27C 0080               1489  AND_L   CMP.W       #m_size_L_logic,D1
00001F8A  6600 001E               1490          BNE         AND_FAIL
00001F8E  43F9 0000857A           1491          LEA         opcode_ANDL,A1
00001F94  1C3C 0003               1492          MOVE.B      #long_size,D6
00001F98  4EB8 128C               1493          JSR         print_string_op_nn  *print the opcode
00001F9C  4EB9 00002CB0           1494          JSR         AND_sub
00001FA2  4EB8 143E               1495          JSR         print_ea
00001FA6  6000 0008               1496          BRA         AND_END
00001FAA                          1497          
00001FAA  4EB9 00002364           1498  AND_FAIL JSR         op_DATA
00001FB0                          1499          
00001FB0  4CDF 7FBF               1500  AND_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001FB4  4E75                    1501          RTS
00001FB6                          1502          
00001FB6                          1503  or_size:
00001FB6  48E7 FDFE               1504          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001FBA  3200                    1505          MOVE.W      D0,D1           *put the full opcode into D1
00001FBC  C27C 00C0               1506          AND.W       #mask_size_logic,D1 *mask to only see the size bits
00001FC0                          1507          
00001FC0                          1508          *test for byte size
00001FC0  B27C 0000               1509          CMP.W       #m_size_B_logic,D1
00001FC4  6600 001E               1510          BNE         OR_W
00001FC8  43F9 00008580           1511          LEA         opcode_ORB,A1    *move the value for printing
00001FCE  1C3C 0001               1512          MOVE.B      #byte_size,D6
00001FD2  4EB8 128C               1513          JSR         print_string_op_nn  *print the opcode
00001FD6  4EB9 0000759A           1514          JSR         OR_sub
00001FDC  4EB8 143E               1515          JSR         print_ea
00001FE0  6000 0050               1516          BRA         OR_END
00001FE4                          1517          
00001FE4                          1518          *test for word size
00001FE4  B27C 0040               1519  OR_W    CMP.W       #m_size_W_logic,D1
00001FE8  6600 001E               1520          BNE         OR_L
00001FEC  43F9 00008585           1521          LEA         opcode_ORW,A1
00001FF2  1C3C 0002               1522          MOVE.B      #word_size,D6
00001FF6  4EB8 128C               1523          JSR         print_string_op_nn  *print the opcode
00001FFA  4EB9 0000759A           1524          JSR         OR_sub
00002000  4EB8 143E               1525          JSR         print_ea
00002004  6000 002C               1526          BRA         OR_END
00002008                          1527          
00002008                          1528          *test for long size
00002008  B27C 0080               1529  OR_L    CMP.W       #m_size_L_logic,D1
0000200C  6600 001E               1530          BNE         OR_FAIL
00002010  43F9 0000858A           1531          LEA         opcode_ORL,A1
00002016  1C3C 0003               1532          MOVE.B      #long_size,D6
0000201A  4EB8 128C               1533          JSR         print_string_op_nn  *print the opcode
0000201E  4EB9 0000759A           1534          JSR         OR_sub
00002024  4EB8 143E               1535          JSR         print_ea
00002028  6000 0008               1536          BRA         OR_END
0000202C                          1537          
0000202C  4EB9 00002364           1538  OR_FAIL JSR         op_DATA
00002032                          1539          
00002032  4CDF 7FBF               1540  OR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00002036  4E75                    1541          RTS
00002038                          1542  
00002038                          1543  moveq_size:
00002038  48E7 FDFE               1544          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000203C  3200                    1545          MOVE.W      D0,D1           *put the full opcode into D1
0000203E  C27C F100               1546          AND.W       #mask_size_MOVEQ,D1 *mask to only see the size bits
00002042                          1547          
00002042                          1548          *test for long size (only)
00002042  B27C 7000               1549          CMP.W       #m_size_L_MOVEQ,D1
00002046  6600 001E               1550          BNE         MOVEQ_FAIL
0000204A  43F9 00008501           1551          LEA         opcode_MOVEQ,A1    *move the value for printing
00002050  1C3C 0003               1552          MOVE.B      #long_size,D6
00002054  4EB8 128C               1553          JSR         print_string_op_nn  *print the opcode
00002058  4EB9 000070E0           1554          JSR         MOVEQ_sub
0000205E  4EB8 143E               1555          JSR         print_ea
00002062  6000 0008               1556          BRA         MOVEQ_END
00002066                          1557          
00002066                          1558  MOVEQ_FAIL 
00002066  4EB9 00002364           1559          JSR         op_DATA
0000206C                          1560          
0000206C                          1561  MOVEQ_END 
0000206C  4CDF 7FBF               1562          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00002070  4E75                    1563          RTS
00002072                          1564  
00002072                          1565  
00002072                          1566  
00002072                          1567  
00002072                          1568  
00002072                          1569  
00002072                          1570  
00002072                          1571  
00002072                          1572  
00002072                          1573  
00002072                          1574  
00002072                          1575  
00002072                          1576  
00002072                          1577  
00002072                          1578  -------------------- end include --------------------
00002072                          1579              INCLUDE 'opcode_subroutine.x68'
00002072                          1580  opcode_subroutine:
00002072  48E7 FFFE               1581          MOVEM.L     D0-D7/A0-A6, -(SP)
00002076  3200                    1582          MOVE.W      D0,D1
00002078                          1583          *MOVE.W      #mask_opcode,D2      *move the mask into D2
00002078  C27C C000               1584          AND.W       #mask_MOVE,D1               *mask to only see the first 2 bits
0000207C                          1585          
0000207C                          1586          *test the move operations (00SS)
0000207C  B27C 0000               1587          CMP.W       #match_MOVE,D1
00002080  6600 000C               1588          BNE         skip1
00002084  4EB9 00002142           1589          JSR         move_decode
0000208A  6000 00B0               1590          BRA         end_op
0000208E                          1591          
0000208E                          1592          *test the 0100 clump and jump to subroutine (nop,lea,not,jsr,rts,movem)
0000208E  3200                    1593  skip1   MOVE.W      D0,D1
00002090  C27C F000               1594          AND.W       #mask_opcode,D1               *mask the full machine code by the opcode mask
00002094  B27C 4000               1595          CMP.W       #match_G0100,D1
00002098  6600 000C               1596          BNE         skip2       
0000209C  4EB9 0000216A           1597          JSR         group1_decode   *opcode matches group starting with 0100
000020A2  6000 0098               1598          BRA         end_op
000020A6                          1599  
000020A6                          1600          *test the 1101 clump and jump to subroutine (add,adda)
000020A6  B27C D000               1601  skip2   CMP.W       #match_G1101,D1
000020AA  6600 000C               1602          BNE         skip3
000020AE  4EB9 000021EE           1603          JSR         group2_decode
000020B4  6000 0086               1604          BRA         end_op
000020B8                          1605          
000020B8                          1606          *test the 0110 clump and jump to subroutine (bra,bgt,beq)
000020B8  B27C 6000               1607  skip3   CMP.W       #match_G0110,D1
000020BC  6600 000C               1608          BNE         skip4
000020C0  4EB9 00002218           1609          JSR         group3_decode
000020C6  6000 0074               1610          BRA         end_op
000020CA                          1611          
000020CA                          1612          *test the 1110 clump and jump to subroutine (lsl/lsr,asl/asr,rol/ror)
000020CA  B27C E000               1613  skip4   CMP.W       #match_G1110,D1
000020CE  6600 000C               1614          BNE         skip5
000020D2  4EB9 00002260           1615          JSR         group4_decode
000020D8  6000 0062               1616          BRA         end_op
000020DC                          1617  
000020DC                          1618          *test addq
000020DC  B27C 5000               1619  skip5   CMP.W       #match_ADDQ,D1
000020E0  6600 000C               1620          BNE         skip6
000020E4  4EB9 0000231E           1621          JSR         op_ADDQ
000020EA  6000 0050               1622          BRA         end_op
000020EE                          1623          
000020EE                          1624          *test sub
000020EE  B27C 9000               1625  skip6   CMP.W       #match_SUB,D1
000020F2  6600 000C               1626          BNE         skip7
000020F6  4EB9 0000232C           1627          JSR         op_SUB
000020FC  6000 003E               1628          BRA         end_op
00002100                          1629          
00002100                          1630          *test and
00002100  B27C C000               1631  skip7   CMP.W       #match_AND,D1
00002104  6600 000C               1632          BNE         skip8
00002108  4EB9 0000233A           1633          JSR         op_AND
0000210E  6000 002C               1634          BRA         end_op
00002112                          1635          
00002112                          1636          *test or
00002112  B27C 8000               1637  skip8   CMP.W       #match_OR,D1
00002116  6600 000C               1638          BNE         skip9
0000211A  4EB9 00002348           1639          JSR         op_OR
00002120  6000 001A               1640          BRA         end_op
00002124                          1641          
00002124  B27C 7000               1642  skip9   CMP.W       #match_MOVEQ,D1
00002128  6600 000C               1643          BNE         data
0000212C  4EB9 00002356           1644          JSR         op_MOVEQ
00002132  6000 0008               1645          BRA         end_op
00002136                          1646          
00002136  4EB9 00002364           1647  data    JSR         op_DATA
0000213C                          1648          
0000213C  4CDF 7FFF               1649  end_op  MOVEM.L     (SP)+, D0-D7/A0-A6
00002140  4E75                    1650          RTS
00002142                          1651          
00002142                          1652  move_decode:
00002142  48E7 FFFE               1653          MOVEM.L     D0-D7/A0-A6, -(SP)
00002146  3200                    1654          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002148  C27C 01C0               1655          AND.W       #mask_MOVE_A,D1  *get only the differentiating bits of move/movea
0000214C                          1656          
0000214C  B27C 0040               1657          CMP.W       #match_MOVEA,D1
00002150  6700 000C               1658          BEQ         op_MOVEA
00002154                          1659          
00002154  6000 000E               1660          BRA         op_MOVE
00002158                          1661          
00002158  4CDF 7FFF               1662  end_MV  MOVEM.L     (SP)+, D0-D7/A0-A6
0000215C  4E75                    1663          RTS
0000215E                          1664          
0000215E                          1665  op_MOVEA:
0000215E  4EB8 1482               1666          JSR         movea_size  *find the size of the operation
00002162  60F4                    1667          BRA         end_MV
00002164                          1668  
00002164                          1669  op_MOVE:
00002164  4EB8 14E0               1670          JSR         move_size
00002168  60EE                    1671          BRA         end_MV
0000216A                          1672  
0000216A                          1673  group1_decode:
0000216A  48E7 FFFE               1674          MOVEM.L     D0-D7/A0-A6, -(SP)
0000216E  3200                    1675          MOVE.W      D0,D1           *put the full opcode back into D1
00002170                          1676          
00002170  B27C 4E71               1677          CMP.W       #match_NOP,D1   *test the full opcode against NOP
00002174  6700 004E               1678          BEQ         op_NOP
00002178                          1679          
00002178  B27C 4E75               1680          CMP.W       #match_RTS,D1   *test the full opcode against RTS
0000217C  6700 004C               1681          BEQ         op_RTS
00002180                          1682          
00002180  C27C F1C0               1683          AND.W       #mask_LEA,D1    *test the masked opcode against LEA
00002184  B27C 41C0               1684          CMP.W       #match_LEA,D1   *look for 0100 xxx1 11xx
00002188  6700 0046               1685          BEQ         op_LEA
0000218C                          1686          
0000218C  3200                    1687          MOVE.W      D0,D1           *refresh D1 back into the full opcode
0000218E  C27C FF80               1688          AND.W       #mask_MOVEM,D1    *test the masked opcode against movem
00002192  B27C 4880               1689          CMP.W       #match_MOVEM_RM,D1   *look for 0100 1000 1000
00002196  6700 003E               1690          BEQ         op_MOVEM_RM
0000219A  B27C 4C80               1691          CMP.W       #match_MOVEM_MR,D1   *look for 0100 1100 1000
0000219E  6700 003C               1692          BEQ         op_MOVEM_MR
000021A2                          1693          
000021A2  3200                    1694          MOVE.W      D0,D1           *refresh D1 back into the full opcode
000021A4  C27C FFC0               1695          AND.W       #mask_JSR,D1    *test the masked opcode against JSR
000021A8  B27C 4E80               1696          CMP.W       #match_JSR,D1   *look for 0100 1110 10xx
000021AC  6700 0034               1697          BEQ         op_JSR
000021B0                          1698          
000021B0  3200                    1699          MOVE.W      D0,D1           *refresh D1 back into the full opcode
000021B2  C27C FF00               1700          AND.W       #mask_NOT,D1    *test the masked opcode against NOT
000021B6  B27C 4600               1701          CMP.W       #match_NOT,D1   *look for 0100 0110
000021BA  6700 002C               1702          BEQ         op_NOT
000021BE                          1703          
000021BE  4CDF 7FFF               1704  end_G1  MOVEM.L     (SP)+, D0-D7/A0-A6
000021C2  4E75                    1705          RTS
000021C4                          1706          
000021C4                          1707  op_NOP:
000021C4  4EB8 1624               1708          JSR         nop_size
000021C8  60F4                    1709          BRA         end_G1
000021CA                          1710  
000021CA                          1711  op_RTS:
000021CA  4EB8 163C               1712          JSR         rts_size
000021CE  60EE                    1713          BRA         end_G1
000021D0                          1714  
000021D0                          1715  op_LEA:
000021D0  4EB8 1654               1716          JSR         lea_size
000021D4  60E8                    1717          BRA         end_G1
000021D6                          1718          
000021D6                          1719  op_MOVEM_RM:
000021D6  4EB8 1568               1720          JSR         movem_rm_size
000021DA  60E2                    1721          BRA         end_G1
000021DC                          1722          
000021DC                          1723  op_MOVEM_MR:
000021DC  4EB8 15C6               1724          JSR         movem_mr_size
000021E0  60DC                    1725          BRA         end_G1
000021E2                          1726          
000021E2                          1727  op_JSR:
000021E2  4EB8 1676               1728          JSR         jsr_size
000021E6  60D6                    1729          BRA         end_G1
000021E8                          1730  
000021E8                          1731  op_NOT:
000021E8  4EB8 1698               1732          JSR         not_size
000021EC  60D0                    1733          BRA         end_G1
000021EE                          1734  
000021EE                          1735  group2_decode:
000021EE  48E7 FFFE               1736          MOVEM.L     D0-D7/A0-A6, -(SP)
000021F2  3200                    1737          MOVE.W      D0,D1       *refresh the entire opcode into D1
000021F4                          1738          
000021F4  C27C F0C0               1739          AND.W       #mask_ADDA,D1   *test the masked opcode against the 
000021F8  B27C D0C0               1740          CMP.W       #match_ADDA,D1  *difference between add/adda
000021FC  6700 000C               1741          BEQ         op_ADDA         
00002200                          1742          
00002200  6000 0010               1743          BRA         op_ADD          *if its not adda, it is add
00002204                          1744          
00002204  4CDF 7FFF               1745  end_G2  MOVEM.L     (SP)+, D0-D7/A0-A6
00002208  4E75                    1746          RTS
0000220A                          1747  
0000220A                          1748  op_ADDA:
0000220A  4EB8 171A               1749          JSR         adda_size
0000220E  3200                    1750          MOVE.W      D0,D1
00002210                          1751          *JSR         ADDA_sub
00002210                          1752          *JSR         print_ea
00002210  60F2                    1753          BRA         end_G2
00002212                          1754  
00002212                          1755  op_ADD:
00002212  4EB8 1778               1756          JSR         add_size
00002216  60EC                    1757          BRA         end_G2
00002218                          1758  
00002218                          1759  group3_decode:
00002218  48E7 FFFE               1760          MOVEM.L     D0-D7/A0-A6, -(SP)
0000221C  3200                    1761          MOVE.W      D0,D1       *refresh the entire opcode into D1
0000221E  C27C FF00               1762          AND.W       #mask_BCC,D1
00002222                          1763          
00002222  B27C 6E00               1764          CMP.W       #match_BGT,D1   *test the first 8 bits against the BGT cond
00002226  6700 0020               1765          BEQ         op_BGT
0000222A                          1766          
0000222A  B27C 6700               1767          CMP.W       #match_BEQ,D1   *test the first 8 bits against the BEQ cond
0000222E  6700 001E               1768          BEQ         op_BEQ
00002232                          1769          
00002232  B27C 6F00               1770          CMP.W       #match_BLE,D1
00002236  6700 001C               1771          BEQ         op_BLE
0000223A                          1772          
0000223A  B27C 6000               1773          CMP.W       #match_BRA,D1   *test the first 8 bits against the BRA cond
0000223E  6700 001A               1774          BEQ         op_BRA
00002242                          1775          
00002242                          1776          
00002242                          1777          
00002242  4CDF 7FFF               1778  end_G3  MOVEM.L     (SP)+, D0-D7/A0-A6
00002246  4E75                    1779          RTS
00002248                          1780          
00002248                          1781  op_BGT:
00002248  4EB8 183A               1782          JSR         bgt_size
0000224C  60F4                    1783          BRA         end_G3
0000224E                          1784  
0000224E                          1785  op_BEQ:
0000224E  4EB8 18B0               1786          JSR         beq_size
00002252  60EE                    1787          BRA         end_G3
00002254                          1788          
00002254                          1789  op_BLE:
00002254  4EB8 1926               1790          JSR         ble_size
00002258  60E8                    1791          BRA         end_G3
0000225A                          1792  
0000225A                          1793  op_BRA:
0000225A  4EB8 199C               1794          JSR         bra_size
0000225E  60E2                    1795          BRA         end_G3
00002260                          1796  
00002260                          1797  group4_decode:
00002260  48E7 FFFE               1798          MOVEM.L     D0-D7/A0-A6, -(SP)
00002264  3200                    1799          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002266  C27C FFC0               1800          AND.W       #mask_SHFT_M,D1   *look at the first 10 bits for memory shift
0000226A                          1801          
0000226A                          1802          *test memory shift left
0000226A  B27C E3C0               1803          CMP.W       #match_LSL_M,D1  
0000226E  6700 0066               1804          BEQ         op_LSL_M      
00002272                          1805          
00002272                          1806          *test memory shift right
00002272  B27C E2C0               1807          CMP.W       #match_LSR_M,D1  
00002276  6700 0064               1808          BEQ         op_LSR_M    
0000227A                          1809          
0000227A                          1810          *test memory shift left
0000227A  B27C E1C0               1811          CMP.W       #match_ASL_M,D1  
0000227E  6700 0062               1812          BEQ         op_ASL_M      
00002282                          1813          
00002282                          1814          *test memory shift right
00002282  B27C E0C0               1815          CMP.W       #match_ASR_M,D1  
00002286  6700 0060               1816          BEQ         op_ASR_M  
0000228A                          1817          
0000228A                          1818          *test memory rotate left
0000228A  B27C E7C0               1819          CMP.W       #match_ROL_M,D1  
0000228E  6700 005E               1820          BEQ         op_ROL_M      
00002292                          1821  
00002292                          1822          *test memory rotate right
00002292  B27C E6C0               1823          CMP.W       #match_ROR_M,D1  
00002296  6700 005C               1824          BEQ         op_ROR_M  
0000229A                          1825          
0000229A                          1826          *look at select bits for the register shifts
0000229A  3200                    1827          MOVE.W      D0,D1       *refresh the entire opcode into D1
0000229C  C27C F118               1828          AND.W       #mask_SHFT_R,D1
000022A0                          1829          
000022A0  B27C E108               1830          CMP.W       #match_LSL_R,D1
000022A4  6700 0054               1831          BEQ         op_LSL_R
000022A8                          1832          
000022A8  B27C E008               1833          CMP.W       #match_LSR_R,D1
000022AC  6700 0052               1834          BEQ         op_LSR_R
000022B0                          1835          
000022B0  B27C E100               1836          CMP.W       #match_ASL_R,D1
000022B4  6700 0050               1837          BEQ         op_ASL_R
000022B8                          1838          
000022B8  B27C E000               1839          CMP.W       #match_ASR_R,D1
000022BC  6700 004E               1840          BEQ         op_ASR_R
000022C0                          1841          
000022C0  B27C E118               1842          CMP.W       #match_ROL_R,D1
000022C4  6700 004C               1843          BEQ         op_ROL_R
000022C8                          1844          
000022C8  B27C E018               1845          CMP.W       #match_ROR_R,D1
000022CC  6700 004A               1846          BEQ         op_ROR_R
000022D0                          1847          
000022D0  4CDF 7FFF               1848  end_G4  MOVEM.L     (SP)+, D0-D7/A0-A6
000022D4  4E75                    1849          RTS
000022D6                          1850          
000022D6                          1851  op_LSL_M:
000022D6  4EB8 1AB6               1852          JSR     lsl_m_size
000022DA  60F4                    1853          BRA     end_G4
000022DC                          1854          
000022DC                          1855  op_LSR_M:
000022DC  4EB8 1B60               1856          JSR     lsr_m_size
000022E0  60EE                    1857          BRA     end_G4
000022E2                          1858          
000022E2                          1859  op_ASL_M:
000022E2  4EB8 1C0A               1860          JSR     asl_m_size
000022E6  60E8                    1861          BRA     end_G4
000022E8                          1862          
000022E8                          1863  op_ASR_M:
000022E8  4EB8 1CB4               1864          JSR     asr_m_size
000022EC  60E2                    1865          BRA     end_G4
000022EE                          1866  
000022EE                          1867  op_ROL_M:
000022EE  4EB8 1D5E               1868          JSR     rol_m_size
000022F2  60DC                    1869          BRA     end_G4
000022F4                          1870  
000022F4                          1871  op_ROR_M:
000022F4  4EB8 1E08               1872          JSR     ror_m_size
000022F8  60D6                    1873          BRA     end_G4
000022FA                          1874          
000022FA                          1875  op_LSL_R:
000022FA  4EB8 1A34               1876          JSR     lsl_r_size
000022FE  60D0                    1877          BRA     end_G4
00002300                          1878  
00002300                          1879  op_LSR_R:
00002300  4EB8 1ADE               1880          JSR     lsr_r_size
00002304  60CA                    1881          BRA     end_G4
00002306                          1882  
00002306                          1883  op_ASL_R:
00002306  4EB8 1B88               1884          JSR     asl_r_size
0000230A  60C4                    1885          BRA     end_G4
0000230C                          1886  
0000230C                          1887  op_ASR_R:
0000230C  4EB8 1C32               1888          JSR     asr_r_size
00002310  60BE                    1889          BRA     end_G4
00002312                          1890  
00002312                          1891  op_ROL_R:
00002312  4EB8 1CDC               1892          JSR     rol_r_size
00002316  60B8                    1893          BRA     end_G4
00002318                          1894  
00002318                          1895  op_ROR_R:
00002318  4EB8 1D86               1896          JSR     ror_r_size
0000231C  60B2                    1897          BRA     end_G4
0000231E                          1898  
0000231E                          1899  op_ADDQ:
0000231E  48E7 FFFE               1900          MOVEM.L     D0-D7/A0-A6, -(SP)
00002322                          1901          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002322  4EB8 1E30               1902          JSR         addq_size
00002326                          1903          
00002326  4CDF 7FFF               1904  end_AQ  MOVEM.L     (SP)+, D0-D7/A0-A6
0000232A  4E75                    1905          RTS
0000232C                          1906  
0000232C                          1907          
0000232C                          1908  op_SUB:
0000232C  48E7 FFFE               1909          MOVEM.L     D0-D7/A0-A6, -(SP)
00002330                          1910          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002330  4EB8 1EB2               1911          JSR         sub_size
00002334                          1912          
00002334  4CDF 7FFF               1913  end_SB  MOVEM.L     (SP)+, D0-D7/A0-A6
00002338  4E75                    1914          RTS
0000233A                          1915        
0000233A                          1916  
0000233A                          1917  op_AND:
0000233A  48E7 FFFE               1918          MOVEM.L     D0-D7/A0-A6, -(SP)
0000233E                          1919          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000233E  4EB8 1F34               1920          JSR         and_size
00002342                          1921          
00002342  4CDF 7FFF               1922  end_AN  MOVEM.L     (SP)+, D0-D7/A0-A6
00002346  4E75                    1923          RTS
00002348                          1924          
00002348                          1925  op_OR:
00002348  48E7 FFFE               1926          MOVEM.L     D0-D7/A0-A6, -(SP)
0000234C                          1927          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000234C  4EB8 1FB6               1928          JSR         or_size
00002350                          1929          
00002350  4CDF 7FFF               1930  end_OR  MOVEM.L     (SP)+, D0-D7/A0-A6
00002354  4E75                    1931          RTS
00002356                          1932          
00002356                          1933  op_MOVEQ:
00002356  48E7 FFFE               1934          MOVEM.L     D0-D7/A0-A6, -(SP)
0000235A                          1935          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000235A  4EB8 2038               1936          JSR         moveq_size
0000235E                          1937          
0000235E                          1938  end_MOVEQ  
0000235E  4CDF 7FFF               1939          MOVEM.L     (SP)+, D0-D7/A0-A6
00002362  4E75                    1940          RTS
00002364                          1941  
00002364                          1942  op_DATA:
00002364  48E7 FFFE               1943          MOVEM.L     D0-D7/A0-A6, -(SP)
00002368  43F9 00008665           1944          LEA         opcode_DATA,A1  *move data string into 
0000236E  3200                    1945          MOVE.W      D0,D1           *move the full data into D1 for printing
00002370  4EB8 1340               1946          JSR         print_data
00002374                          1947          
00002374  4CDF 7FFF               1948  end_DATA MOVEM.L     (SP)+, D0-D7/A0-A6
00002378  4E75                    1949          RTS
0000237A                          1950  
0000237A                          1951  
0000237A                          1952  
0000237A                          1953  
0000237A                          1954  
0000237A                          1955  
0000237A                          1956  
0000237A                          1957  
0000237A                          1958  
0000237A                          1959  
0000237A                          1960  -------------------- end include --------------------
0000237A                          1961              INCLUDE 'ADD Subroutine.x68'
0000237A  48E7 7D3E               1962  ADD_ADD                                MOVEM.L            D1-D5/D7/A2-A6, -(SP)                     ;preserve the registers, 
0000237E                          1963  ;-----------------------------ea,Dn-----------------------------------------------------------------------------------------------------
0000237E  C2BC 000001C0           1964                                         AND.L              #mask_opmode,D1                              ;load mask to determine the operand order
00002384                          1965                                  
00002384  B2BC 00000000           1966  ADD_ea_Dn_match                        CMP.L              #match_ADD_b_Dn_ea,D1                 ;check to see if it's Dn,ea
0000238A  6700 004C               1967                                         BEQ                ADD_ea_Dn                                 ;if equal go figure out data register
0000238E  6600 0002               1968                                         BNE                ADD_ea_Dn_match_w                         ;if not check word size for same order
00002392                          1969  
00002392  B2BC 00000040           1970  ADD_ea_Dn_match_w                      CMP.L              #match_ADD_w_Dn_ea,D1                 ;check to see if it's Dn,ea
00002398  6700 003E               1971                                         BEQ                ADD_ea_Dn                                 ;if equal go figure out data register
0000239C  6600 0002               1972                                         BNE                ADD_ea_Dn_match_l                         ;if not check long size for same order
000023A0                          1973  
000023A0  B2BC 00000080           1974  ADD_ea_Dn_match_l                      CMP.L              #match_ADD_l_Dn_ea,D1                 ;check to see if it's Dn,ea
000023A6  6700 050A               1975                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out data register
000023AA  6600 0002               1976                                         BNE                ADD_Dn_ea_match                           ;if not check other order
000023AE                          1977  
000023AE  B2BC 00000100           1978  ADD_Dn_ea_match                        CMP.L              #match_ADD_b_ea_Dn,D1                 ;check to see if it's ea,Dn
000023B4  6700 04FC               1979                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000023B8  6600 0002               1980                                         BNE                ADD_Dn_ea_match_w                         ;if not go check word size for same order
000023BC                          1981  
000023BC  B2BC 00000140           1982  ADD_Dn_ea_match_w                      CMP.L              #match_ADD_w_ea_Dn,D1                 ;check to see if it's ea,Dn
000023C2  6700 04EE               1983                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000023C6  6600 0002               1984                                         BNE                ADD_Dn_ea_match_l                         ;if not go check word size for same order
000023CA                          1985  
000023CA  B2BC 00000180           1986  ADD_Dn_ea_match_l                      CMP.L              #match_ADD_l_ea_Dn,D1                 ;check to see if it's ea,Dn
000023D0  6700 04E0               1987                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000023D4  6600 08CE               1988                                         BNE                ADD_ERROR                                 ;if not go to error message
000023D8                          1989  ;--------------------------------------------------------------------------------------------------------------------------
000023D8                          1990  ;-------------------------------------------------------------------------------------------------------------------------
000023D8  4241                    1991  ADD_ea_Dn                            CLR               D1                                            ;clear D1 to load new mask                                
000023DA  C2BC 00000038           1992                                   AND.L             #mask_ADD_ea_mode,D1                          ;move the mask to D1
000023E0                          1993  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
000023E0  B2BC 00000000           1994  ADD_ea_Dn_data_reg_dir           CMP.L             #match_ADD_Dn,D1                              ;check to see if mode is data reg direct
000023E6  6600 0006               1995                                   BNE               ADD_ea_Dn_add_reg_indir                             ;if not, go check add reg dir
000023EA  6700 0060               1996                                   BEQ               ADD_ea_Dn_Dn_reg                                  ;if equal go figure out the register
000023EE                          1997  
000023EE  B2BC 00000010           1998  ADD_ea_Dn_add_reg_indir          CMP.L             #match_ADD_An_indir,D1                        ;check to see if mode is add reg indir
000023F4  6600 0006               1999                                   BNE               ADD_ea_Dn_add_reg_indir_predec                    ;if not, go check add reg indir predec 
000023F8  6700 0122               2000                                   BEQ               ADD_ea_Dn_An_indir_reg                            ;if equal go figure out the register           
000023FC                          2001             
000023FC  B2BC 00000020           2002  ADD_ea_Dn_add_reg_indir_predec   CMP.L             #match_ADD_An_indir_predec,D1                  ;check to see if mode is add reg indor w/ postinc
00002402  6600 0006               2003                                   BNE               ADD_ea_Dn_add_reg_indir_postinc                    ;if not go check add reg indir/predec
00002406  6700 02B4               2004                                   BEQ               ADD_ea_Dn_An_indir_predec                          ;if equal go figure out the register
0000240A                          2005                        
0000240A  B2BC 00000018           2006  ADD_ea_Dn_add_reg_indir_postinc  CMP.L             #match_ADD_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00002410  6600 0006               2007                                   BNE               ADD_ea_Dn_abs_add_word                                  ;if not go check abs add word
00002414  6700 01D6               2008                                   BEQ               ADD_ea_Dn_An_indir_postinc_reg                          ;if equal go figure out the register
00002418                          2009  
00002418  C4BC 0000003F           2010  ADD_ea_Dn_abs_add_word           AND.L             #mask_ADD_abs_add,D2                        ;load mask to determine if abs add word or long
0000241E                          2011                                   
0000241E  B4BC 00000038           2012                                   CMP.L             #match_ADD_abs_add_word,D2                  ;check if abs add word
00002424  2A18                    2013                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00002426  6600 0006               2014                                   BNE               ADD_ea_Dn_abs_add_long                                  ;if not go check abs add long
0000242A  6700 0360               2015                                   BEQ               ADD_ea_Dn_abs_add_word_out                              ;if equal go to output
0000242E                          2016    
0000242E  B4BC 00000039           2017  ADD_ea_Dn_abs_add_long           CMP.L             #match_ADD_abs_add_long,D2                  ;check to see if abs add long
00002434  6700 0364               2018                                   BEQ               ADD_ea_Dn_abs_add_long_out                              ;if equal go to output
00002438                          2019                                   
00002438  B2BC 0000003C           2020  ADD_ea_Dn_immediate_add          CMP.L             #match_imm_add,D1                             ;check if immediate address
0000243E  6700 036A               2021                                   BEQ               ADD_ea_Dn_immediate_add_out                             ;if equal go to immediate add ADD routine
00002442  6600 0860               2022                                   BNE               ADD_ERROR                                         ;if not equal go to error mesage ADD routine
00002446                          2023  
00002446                          2024  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00002446                          2025                                   
00002446  C4BC 0000003F           2026                                   AND.L              #mask_ADD_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
0000244C                          2027  ;-----------------------------------Data Register Direct--------------------------------
0000244C  B4BC 00000000           2028  ADD_ea_Dn_Dn_reg                 CMP.L              #match_ADD_D0,D2                       ;check to see in the register is 0
00002452  6600 0006               2029                                   BNE                ADD_ea_Dn_rD1                                     ;if not go check register 1
00002456  6700 0064               2030                                   BEQ                ADD_ea_Dn_D0_out                              ;if equal go to output ADDroutine
0000245A                          2031  
0000245A  B4BC 00000001           2032  ADD_ea_Dn_rD1                    CMP.L              #match_ADD_D1,D2                       ;check to see in the register is 1
00002460  6600 0006               2033                                   BNE                ADD_ea_Dn_rD2                                     ;if not go check register 2
00002464  6700 0062               2034                                   BEQ                ADD_ea_Dn_D1_out                              ;if equal go to output ADDroutine
00002468                          2035  
00002468  B4BC 00000002           2036  ADD_ea_Dn_rD2                    CMP.L              #match_ADD_D2,D2                       ;check to see in the register is 2
0000246E  6600 0006               2037                                   BNE                ADD_ea_Dn_rD3                                     ;if not go check register 3
00002472  6700 0060               2038                                   BEQ                ADD_ea_Dn_D2_out                              ;if equal go to output ADDroutine
00002476                          2039  
00002476  B4BC 00000003           2040  ADD_ea_Dn_rD3                    CMP.L              #match_ADD_D3,D2                       ;check to see in the register is 3
0000247C  6600 0006               2041                                   BNE                ADD_ea_Dn_rD4                                     ;if not go check register 4
00002480  6700 005E               2042                                   BEQ                ADD_ea_Dn_D3_out                              ;if equal go to output ADDroutine
00002484                          2043  
00002484  B4BC 00000004           2044  ADD_ea_Dn_rD4                    CMP.L              #match_ADD_D4,D2                       ;check to see in the register is 4
0000248A  6600 0006               2045                                   BNE                ADD_ea_Dn_rD5                                     ;if not go check register 5
0000248E  6700 005C               2046                                   BEQ                ADD_ea_Dn_D4_out                              ;if equal go to output ADDroutine
00002492                          2047  
00002492  B4BC 00000005           2048  ADD_ea_Dn_rD5                    CMP.L              #match_ADD_D5,D2                       ;check to see in the register is 5
00002498  6600 0006               2049                                   BNE                ADD_ea_Dn_rD6                                     ;if not go check register 6
0000249C  6700 005A               2050                                   BEQ                ADD_ea_Dn_D5_out                              ;if equal go to output ADDroutine
000024A0                          2051  
000024A0  B4BC 00000006           2052  ADD_ea_Dn_rD6                    CMP.L              #match_ADD_D6,D2                       ;check to see in the register is 6
000024A6  6600 0006               2053                                   BNE                ADD_ea_Dn_rD7                                     ;if not go check register 7
000024AA  6700 0058               2054                                   BEQ                ADD_ea_Dn_D6_out                              ;if equal go to output ADDroutine
000024AE                          2055  
000024AE  B4BC 00000007           2056  ADD_ea_Dn_rD7                    CMP.L              #match_ADD_D7,D2                       ;check to see in the register is 7
000024B4  6700 005A               2057                                   BEQ                ADD_ea_Dn_D7_out                              ;if equal go to output ADDroutine
000024B8  6600 07EA               2058                                   BNE                ADD_ERROR                               ;if not equal, got to error message
000024BC                          2059  ;--------------------Data Register Direct Output-----------------------
000024BC  227C 00008965           2060  ADD_ea_Dn_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
000024C2  4EB9 000027DA           2061                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024C8                          2062  
000024C8  227C 00008968           2063  ADD_ea_Dn_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
000024CE  4EB9 000027DA           2064                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024D4                          2065  
000024D4                          2066  
000024D4  227C 0000896B           2067  ADD_ea_Dn_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
000024DA  4EB9 000027DA           2068                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024E0                          2069  
000024E0  227C 0000896E           2070  ADD_ea_Dn_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
000024E6  4EB9 000027DA           2071                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024EC                          2072  
000024EC                          2073  
000024EC  227C 00008971           2074  ADD_ea_Dn_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
000024F2  4EB9 000027DA           2075                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024F8                          2076  
000024F8                          2077  
000024F8  227C 00008974           2078  ADD_ea_Dn_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
000024FE  4EB9 000027DA           2079                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002504                          2080  
00002504                          2081  
00002504  227C 00008977           2082  ADD_ea_Dn_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
0000250A  4EB9 000027DA           2083                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002510                          2084  
00002510                          2085  
00002510  227C 0000897A           2086  ADD_ea_Dn_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00002516  4EB9 000027DA           2087                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000251C                          2088  
0000251C                          2089  ;------------------Address Register Indirect-----------------------
0000251C  B4BC 00000010           2090  ADD_ea_Dn_An_indir_reg           CMP.L          #match_ADD_An_indir_r0,D2              ;check reg is equal to 0
00002522  6600 0006               2091                                   BNE             ADD_ea_Dn_An_indir_reg1                           ;if not try reg 1
00002526  6700 0064               2092                                   BEQ             ADD_ea_Dn_An_indir_reg0_out                       ;if equal go to output ADDroutine
0000252A                          2093  
0000252A  B4BC 00000011           2094  ADD_ea_Dn_An_indir_reg1          CMP.L           #match_ADD_An_indir_r1,D2              ;check reg is equal to 1
00002530  6600 0006               2095                                   BNE             ADD_ea_Dn_An_indir_reg2                           ;if not try reg 2
00002534  6700 0062               2096                                   BEQ             ADD_ea_Dn_An_indir_reg1_out                       ;if equal go to output ADDroutine
00002538                          2097  
00002538  B4BC 00000012           2098  ADD_ea_Dn_An_indir_reg2          CMP.L           #match_ADD_An_indir_r2,D2              ;check reg is equal to 2
0000253E  6600 0006               2099                                   BNE             ADD_ea_Dn_An_indir_reg3                           ;if not try reg 3
00002542  6700 0060               2100                                   BEQ             ADD_ea_Dn_An_indir_reg2_out                       ;if equal go to output ADDroutine
00002546                          2101  
00002546  B4BC 00000013           2102  ADD_ea_Dn_An_indir_reg3          CMP.L           #match_ADD_An_indir_r3,D2              ;check reg is equal to 3
0000254C  6600 0006               2103                                   BNE             ADD_ea_Dn_An_indir_reg4                           ;if not try reg 4
00002550  6700 005E               2104                                   BEQ             ADD_ea_Dn_An_indir_reg3_out                       ;if equal go to output ADDroutine
00002554                          2105      
00002554  B4BC 00000014           2106  ADD_ea_Dn_An_indir_reg4          CMP.L           #match_ADD_An_indir_r4,D2              ;check reg is equal to 4
0000255A  6600 0006               2107                                   BNE             ADD_ea_Dn_An_indir_reg5                           ;if not try reg 5
0000255E  6700 005C               2108                                   BEQ             ADD_ea_Dn_An_indir_reg4_out                       ;if equal go to output ADDroutine
00002562                          2109          
00002562  B4BC 00000015           2110  ADD_ea_Dn_An_indir_reg5          CMP.L           #match_ADD_An_indir_r5,D2              ;check reg is equal to 5
00002568  6600 0006               2111                                   BNE             ADD_ea_Dn_An_indir_reg6                           ;if not try reg 6
0000256C  6700 005A               2112                                   BEQ             ADD_ea_Dn_An_indir_reg5_out                       ;if equal go to output ADDroutine
00002570                          2113  
00002570  B4BC 00000016           2114  ADD_ea_Dn_An_indir_reg6          CMP.L           #match_ADD_An_indir_r6,D2              ;check reg is equal to 6
00002576  6600 0006               2115                                   BNE             ADD_ea_Dn_An_indir_reg7                           ;if not try reg 7
0000257A  6700 0058               2116                                   BEQ             ADD_ea_Dn_An_indir_reg6_out                       ;if equal go to output ADDroutine
0000257E                          2117  
0000257E  B4BC 00000017           2118  ADD_ea_Dn_An_indir_reg7          CMP.L           #match_ADD_An_indir_r7,D2              ;check reg is equal to 7
00002584  6700 005A               2119                                   BEQ             ADD_ea_Dn_An_indir_reg7_out                       ;if equal go to output ADDroutine
00002588  6600 071A               2120                                   BNE             ADD_ERROR                                   :if not equal to an addresssing mode, pritn error
0000258C                          2121  
0000258C                          2122  ;--------------------Address Register Indirect Output-----------------------
0000258C  227C 000089A5           2123  ADD_ea_Dn_An_indir_reg0_out             MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00002592  4EB9 000027DA           2124                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002598                          2125  
00002598  227C 000089AA           2126  ADD_ea_Dn_An_indir_reg1_out             MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
0000259E  4EB9 000027DA           2127                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025A4                          2128  
000025A4  227C 000089AF           2129  ADD_ea_Dn_An_indir_reg2_out             MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
000025AA  4EB9 000027DA           2130                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025B0                          2131  
000025B0  227C 000089B4           2132  ADD_ea_Dn_An_indir_reg3_out             MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
000025B6  4EB9 000027DA           2133                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025BC                          2134  
000025BC  227C 000089B9           2135  ADD_ea_Dn_An_indir_reg4_out             MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
000025C2  4EB9 000027DA           2136                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025C8                          2137  
000025C8  227C 000089BE           2138  ADD_ea_Dn_An_indir_reg5_out             MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
000025CE  4EB9 000027DA           2139                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025D4                          2140  
000025D4  227C 000089C3           2141  ADD_ea_Dn_An_indir_reg6_out             MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
000025DA  4EB9 000027DA           2142                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025E0                          2143                                          
000025E0  227C 000089C8           2144  ADD_ea_Dn_An_indir_reg7_out             MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
000025E6  4EB9 000027DA           2145                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025EC                          2146  
000025EC                          2147  ;------------------Address Register Indirect with Post Increment-----------------------
000025EC  B4BC 00000018           2148  ADD_ea_Dn_An_indir_postinc_reg              CMP.L      #match_ADD_An_indir_postinc_r0,D2        ;check reg is equal to 0
000025F2  6600 0006               2149                                              BNE        ADD_ea_Dn_An_indir_postinc_reg1                      ;if not try reg 1
000025F6  6700 0064               2150                                              BEQ        ADD_ea_Dn_An_indir_postin_r0_out               ;if equal go to output ADDroutine
000025FA                          2151  
000025FA  B4BC 00000019           2152  ADD_ea_Dn_An_indir_postinc_reg1             CMP.L      #match_ADD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00002600  6600 0006               2153                                              BNE        ADD_ea_Dn_An_indir_postinc_reg2                      ;if not try reg 2
00002604  6700 0062               2154                                              BEQ        ADD_ea_Dn_An_indir_postin_r1_out               ;if equal go to output ADDroutine
00002608                          2155  
00002608  B4BC 0000001A           2156  ADD_ea_Dn_An_indir_postinc_reg2             CMP.L      #match_ADD_An_indir_postinc_r2,D2        ;check reg is equal to 2
0000260E  6600 0006               2157                                              BNE        ADD_ea_Dn_An_indir_postinc_reg3                      ;if not try reg 3
00002612  6700 0060               2158                                              BEQ        ADD_ea_Dn_An_indir_postin_r2_out               ;if equal go to output ADDroutine
00002616                          2159  
00002616  B4BC 0000001B           2160  ADD_ea_Dn_An_indir_postinc_reg3             CMP.L      #match_ADD_An_indir_postinc_r3,D2        ;check reg is equal to 3
0000261C  6600 0006               2161                                              BNE        ADD_ea_Dn_An_indir_postinc_reg4                      ;if not try reg 4
00002620  6700 005E               2162                                              BEQ        ADD_ea_Dn_An_indir_postin_r3_out               ;if equal go to output ADDroutine
00002624                          2163   
00002624  B4BC 0000001C           2164  ADD_ea_Dn_An_indir_postinc_reg4             CMP.L      #match_ADD_An_indir_postinc_r4,D2        ;check reg is equal to 4
0000262A  6600 0006               2165                                              BNE        ADD_ea_Dn_An_indir_postinc_reg5                      ;if not try reg 5
0000262E  6700 005C               2166                                              BEQ        ADD_ea_Dn_An_indir_postin_r4_out               ;if equal go to output ADDroutine
00002632                          2167  
00002632  B4BC 0000001D           2168  ADD_ea_Dn_An_indir_postinc_reg5             CMP.L      #match_ADD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00002638  6600 0006               2169                                              BNE        ADD_ea_Dn_An_indir_postinc_reg6                      ;if not try reg 6
0000263C  6700 005A               2170                                              BEQ        ADD_ea_Dn_An_indir_postin_r5_out               ;if equal go to output ADDroutine
00002640                          2171  
00002640  B4BC 0000001E           2172  ADD_ea_Dn_An_indir_postinc_reg6             CMP.L      #match_ADD_An_indir_postinc_r6,D2         ;check reg is equal to 6
00002646  6600 0006               2173                                              BNE        ADD_ea_Dn_An_indir_postinc_reg7                        ;if not try reg 7
0000264A  6700 0058               2174                                              BEQ        ADD_ea_Dn_An_indir_postin_r6_out                    ;if equal go to output ADDroutine
0000264E                          2175  
0000264E  B4BC 0000001F           2176  ADD_ea_Dn_An_indir_postinc_reg7             CMP.L      #match_ADD_An_indir_postinc_r7,D2         ;check reg is equal to 7
00002654  6700 005A               2177                                              BEQ        ADD_ea_Dn_An_indir_postin_r7_out                    ;if equal go to output ADDroutine
00002658  6600 064A               2178                                              BNE        ADD_ERROR                                        :if not equal to an addresssing mode, pritn error
0000265C                          2179  
0000265C                          2180  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000265C  227C 000089CD           2181  ADD_ea_Dn_An_indir_postin_r0_out                MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00002662  4EB9 000027DA           2182                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002668                          2183  
00002668  227C 000089D3           2184  ADD_ea_Dn_An_indir_postin_r1_out                MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
0000266E  4EB9 000027DA           2185                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002674                          2186  
00002674  227C 000089D9           2187  ADD_ea_Dn_An_indir_postin_r2_out                MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
0000267A  4EB9 000027DA           2188                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002680                          2189  
00002680  227C 000089DF           2190  ADD_ea_Dn_An_indir_postin_r3_out                MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00002686  4EB9 000027DA           2191                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000268C                          2192  
0000268C  227C 000089E5           2193  ADD_ea_Dn_An_indir_postin_r4_out                MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00002692  4EB9 000027DA           2194                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002698                          2195  
00002698  227C 000089EB           2196  ADD_ea_Dn_An_indir_postin_r5_out                MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
0000269E  4EB9 000027DA           2197                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026A4                          2198  
000026A4  227C 000089F1           2199  ADD_ea_Dn_An_indir_postin_r6_out                MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
000026AA  4EB9 000027DA           2200                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026B0                          2201  
000026B0  227C 000089F7           2202  ADD_ea_Dn_An_indir_postin_r7_out                MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
000026B6  4EB9 000027DA           2203                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026BC                          2204  
000026BC                          2205  ;------------------Address Register Indirect with Pre Decrement-----------------------
000026BC  B4BC 00000020           2206  ADD_ea_Dn_An_indir_predec                   CMP.L      #match_ADD_An_indir_predec_reg0,D2       ;check reg is equal to 0
000026C2  6600 0006               2207                                              BNE        ADD_ea_Dn_An_indir_predec_reg1                      ;if not try reg 1
000026C6  6700 0064               2208                                              BEQ        ADD_ea_Dn_An_indir_prede_r0_out               ;if equal go to output ADDroutine
000026CA                          2209  
000026CA  B4BC 00000021           2210  ADD_ea_Dn_An_indir_predec_reg1              CMP.L      #match_ADD_An_indir_predec_reg1,D2       ;check reg is equal to 1
000026D0  6600 0006               2211                                              BNE        ADD_ea_Dn_An_indir_predec_reg2                      ;if not try reg 2
000026D4  6700 0062               2212                                              BEQ        ADD_ea_Dn_An_indir_prede_r1_out               ;if equal go to output ADDroutine
000026D8                          2213  
000026D8  B4BC 00000022           2214  ADD_ea_Dn_An_indir_predec_reg2              CMP.L      #match_ADD_An_indir_predec_reg2,D2       ;check reg is equal to 2
000026DE  6600 0006               2215                                              BNE        ADD_ea_Dn_An_indir_predec_reg3                      ;if not try reg 3
000026E2  6700 0060               2216                                              BEQ        ADD_ea_Dn_An_indir_prede_r2_out               ;if equal go to output ADDroutine
000026E6                          2217  
000026E6  B4BC 00000023           2218  ADD_ea_Dn_An_indir_predec_reg3              CMP.L      #match_ADD_An_indir_predec_reg3,D2       ;check reg is equal to 3
000026EC  6600 0006               2219                                              BNE        ADD_ea_Dn_An_indir_predec_reg4                      ;if not try reg 4
000026F0  6700 005E               2220                                              BEQ        ADD_ea_Dn_An_indir_prede_r3_out               ;if equal go to output ADDroutine
000026F4                          2221  
000026F4  B4BC 00000024           2222  ADD_ea_Dn_An_indir_predec_reg4              CMP.L      #match_ADD_An_indir_predec_reg4,D2       ;check reg is equal to 4
000026FA  6600 0006               2223                                              BNE        ADD_ea_Dn_An_indir_predec_reg5                      ;if not try reg 5
000026FE  6700 005C               2224                                              BEQ        ADD_ea_Dn_An_indir_prede_r4_out               ;if equal go to output ADDroutine
00002702                          2225  
00002702  B4BC 00000025           2226  ADD_ea_Dn_An_indir_predec_reg5              CMP.L      #match_ADD_An_indir_predec_reg5,D2       ;check reg is equal to 5
00002708  6600 0006               2227                                              BNE        ADD_ea_Dn_An_indir_predec_reg6                     ;if not try reg 6
0000270C  6700 005A               2228                                              BEQ        ADD_ea_Dn_An_indir_prede_r5_out               ;if equal go to output ADDroutine
00002710                          2229  
00002710  B4BC 00000026           2230  ADD_ea_Dn_An_indir_predec_reg6              CMP.L      #match_ADD_An_indir_predec_reg6,D2       ;check reg is equal to 6
00002716  6600 0006               2231                                              BNE        ADD_ea_Dn_An_indir_predec_reg7                     ;if not try reg 7
0000271A  6700 0058               2232                                              BEQ        ADD_ea_Dn_An_indir_prede_r6_out               ;if equal go to output ADDroutine
0000271E                          2233  
0000271E  B4BC 00000027           2234  ADD_ea_Dn_An_indir_predec_reg7              CMP.L      #match_ADD_An_indir_predec_reg7,D2       ;check reg is equal to 7
00002724  6700 005A               2235                                              BEQ        ADD_ea_Dn_An_indir_prede_r7_out               ;if equal go to output ADDroutine
00002728  6600 057A               2236                                              BNE        ADD_ERROR                                    :if not equal to an addresssing mode, pritn error
0000272C                          2237  
0000272C                          2238  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000272C  227C 000089FD           2239  ADD_ea_Dn_An_indir_prede_r0_out         MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
00002732  4EB9 000027DA           2240                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002738                          2241                                              
00002738  227C 00008A03           2242  ADD_ea_Dn_An_indir_prede_r1_out         MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
0000273E  4EB9 000027DA           2243                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002744                          2244  
00002744  227C 00008A09           2245  ADD_ea_Dn_An_indir_prede_r2_out         MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
0000274A  4EB9 000027DA           2246                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002750                          2247  
00002750  227C 00008A0F           2248  ADD_ea_Dn_An_indir_prede_r3_out         MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
00002756  4EB9 000027DA           2249                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000275C                          2250  
0000275C  227C 00008A15           2251  ADD_ea_Dn_An_indir_prede_r4_out         MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
00002762  4EB9 000027DA           2252                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002768                          2253  
00002768  227C 00008A1B           2254  ADD_ea_Dn_An_indir_prede_r5_out         MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
0000276E  4EB9 000027DA           2255                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002774                          2256  
00002774  227C 00008A21           2257  ADD_ea_Dn_An_indir_prede_r6_out         MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
0000277A  4EB9 000027DA           2258                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002780                          2259  
00002780  227C 00008A27           2260  ADD_ea_Dn_An_indir_prede_r7_out         MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00002786  4EB9 000027DA           2261                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000278C                          2262          
0000278C                          2263  ;------------------Absolute Addressing Output-----------------------
0000278C  22FC 00008A37           2264  ADD_ea_Dn_abs_add_word_out               MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002792  22C5                    2265                                        MOVE.L      D5,(A1)+                           ;load address                  
00002794  4CDF 7CBE               2266                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002798  4E75                    2267                                        RTS                                            :return to ADDroutine
0000279A                          2268                                             
0000279A                          2269  
0000279A  2A18                    2270  ADD_ea_Dn_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000279C  22FC 00008A37           2271                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000027A2  22C5                    2272                                        MOVE.L      D5,(A1)+                           ;load address                  
000027A4  4CDF 7CBE               2273                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000027A8  4E75                    2274                                        RTS                                            :return to ADDroutine                                            
000027AA                          2275  ;---------------Immediate Addresing---------------------------
000027AA  2A18                    2276  ADD_ea_Dn_immediate_add_out          MOVE.L     (A0)+,D5                             ;capture the immediate address
000027AC  BCBC 000000FC           2277                                       CMP.L       #match_imm_add_word,D6               ;check to see if need to pull word
000027B2  2A18                    2278                                       MOVE.L      (A0)+,D5                            ;pull the word
000027B4  6700 0006               2279                                       BEQ         ADD_ea_Dn_imm_add_w                           ;if equal go pull word    
000027B8  6600 0010               2280                                       BNE         ADD_ea_Dn_imm_add_l                           ;if not equal, go check long
000027BC                          2281                                           
000027BC  22FC 00008A37           2282  ADD_ea_Dn_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
000027C2  32C5                    2283                                        MOVE.W     D5,(A1)+                             ;load the word address                           
000027C4  4EB9 000027DA           2284                                        JSR        ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000027CA                          2285                                           
000027CA  2A18                    2286  ADD_ea_Dn_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
000027CC  22FC 00008A37           2287                                        MOVE.L     #ea_$,(A1)+                          ;load the $
000027D2  2245                    2288                                        MOVE.L     D5,A1                               ;move to A1
000027D4  4EB9 000027DA           2289                                        JSR        ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000027DA                          2290  
000027DA                          2291  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000027DA  4282                    2292  ADD_determine_second_op                         CLR.L       D2                          ;clear D2 
000027DC  C4BC 00000E00           2293                                                  AND.L       #mask_ADD_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
000027E2                          2294                                                  
000027E2  B4BC 00000000           2295  ea_Dn_ADD_reg0                                  CMP.L       #match_ADD_reg0,D2      ;check to see if reg equal 0
000027E8  6600 0006               2296                                                  BNE         ea_Dn_ADD_reg1                  ;if not equal got check reg 1
000027EC  6700 0064               2297                                                  BEQ         ea_Dn_ADD_reg0_out              ;if equal go to output
000027F0                          2298                                                  
000027F0  B4BC 00000200           2299  ea_Dn_ADD_reg1                                  CMP.L       #match_ADD_reg1,D2      ;check to see if reg equal 1
000027F6  6600 0006               2300                                                  BNE         ea_Dn_ADD_reg2                  ;if not equal got check reg 2
000027FA  6700 0062               2301                                                  BEQ         ea_Dn_ADD_reg1_out              ;if equal go to output
000027FE                          2302  
000027FE  B4BC 00000400           2303  ea_Dn_ADD_reg2                                  CMP.L       #match_ADD_reg2,D2      ;check to see if reg equal 2
00002804  6600 0006               2304                                                  BNE         ea_Dn_ADD_reg3                  ;if not equal got check reg 3
00002808  6700 0060               2305                                                  BEQ         ea_Dn_ADD_reg2_out              ;if equal go to output
0000280C                          2306  
0000280C  B4BC 00000600           2307  ea_Dn_ADD_reg3                                  CMP.L       #match_ADD_reg3,D2      ;check to see if reg equal 3
00002812  6600 0006               2308                                                  BNE         ea_Dn_ADD_reg4                  ;if not equal got check reg 4
00002816  6700 005E               2309                                                  BEQ         ea_Dn_ADD_reg3_out              ;if equal go to output
0000281A                          2310                                                  
0000281A  B4BC 00000800           2311  ea_Dn_ADD_reg4                                  CMP.L       #match_ADD_reg4,D2      ;check to see if reg equal 4
00002820  6600 0006               2312                                                  BNE         ea_Dn_ADD_reg5                  ;if not equal got check reg 5
00002824  6700 005C               2313                                                  BEQ         ea_Dn_ADD_reg4_out              ;if equal go to output
00002828                          2314  
00002828  B4BC 00000A00           2315  ea_Dn_ADD_reg5                                  CMP.L       #match_ADD_reg5,D2      ;check to see if reg equal 5
0000282E  6600 0006               2316                                                  BNE         ea_Dn_ADD_reg6                  ;if not equal got check reg 6
00002832  6700 005A               2317                                                  BEQ         ea_Dn_ADD_reg5_out              ;if equal go to output
00002836                          2318  
00002836  B4BC 00000C00           2319  ea_Dn_ADD_reg6                                  CMP.L       #match_ADD_reg6,D2      ;check to see if reg equal 6
0000283C  6600 0006               2320                                                  BNE         ea_Dn_ADD_reg7                  ;if not equal got check reg 7
00002840  6700 0058               2321                                                  BEQ         ea_Dn_ADD_reg6_out              ;if equal go to output          
00002844                          2322  
00002844  B4BC 00000E00           2323  ea_Dn_ADD_reg7                                  CMP.L       #match_ADD_reg7,D2      ;check to see if reg equal 7
0000284A  6700 005A               2324                                                  BEQ         ea_Dn_ADD_reg7_out              ;if equal go to output
0000284E  6600 0454               2325                                                  BNE         ADD_ERROR                         ;if not equal to an addresssing mode, pritn error
00002852                          2326                                  
00002852                          2327  
00002852                          2328  ;--------------------Data Output-----------------------
00002852  227C 00008965           2329  ea_Dn_ADD_reg0_out                         MOVE.L           #ea_D0,A1                                          ;load string constant into A1
00002858  4CDF 7CBE               2330                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000285C  4E75                    2331                                              RTS
0000285E                          2332                                              
0000285E  227C 00008968           2333  ea_Dn_ADD_reg1_out                         MOVE.L           #ea_D1,A1                                       ;load string constant into A1
00002864  4CDF 7CBE               2334                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002868  4E75                    2335                                              RTS
0000286A                          2336                                              
0000286A  227C 0000896B           2337  ea_Dn_ADD_reg2_out                         MOVE.L           #ea_D2,A1                                       ;load string constant into A1
00002870  4CDF 7CBE               2338                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002874  4E75                    2339                                              RTS
00002876                          2340                                              
00002876  227C 0000896E           2341  ea_Dn_ADD_reg3_out                         MOVE.L           #ea_D3,A1                                           ;load string constant into A1
0000287C  4CDF 7CBE               2342                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002880  4E75                    2343                                              RTS
00002882                          2344                                              
00002882  227C 00008971           2345  ea_Dn_ADD_reg4_out                         MOVE.L           #ea_D4,A1                                           ;load string constant into A1
00002888  4CDF 7CBE               2346                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000288C  4E75                    2347                                              RTS
0000288E                          2348                                              
0000288E  227C 00008974           2349  ea_Dn_ADD_reg5_out                         MOVE.L           #ea_D5,A1                                           ;load string constant into A1
00002894  4CDF 7CBE               2350                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002898  4E75                    2351                                              RTS
0000289A                          2352                                              
0000289A  227C 00008977           2353  ea_Dn_ADD_reg6_out                         MOVE.L           #ea_D6,A1                                           ;load string constant into A1
000028A0  4CDF 7CBE               2354                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000028A4  4E75                    2355                                              RTS
000028A6                          2356                                              
000028A6  227C 0000897A           2357  ea_Dn_ADD_reg7_out                         MOVE.L           #ea_D7,A1                                           ;load string constant into A1
000028AC  4CDF 7CBE               2358                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000028B0  4E75                    2359                                              RTS             
000028B2                          2360                                              
000028B2                          2361                      
000028B2                          2362  
000028B2                          2363  
000028B2                          2364  
000028B2                          2365  
000028B2                          2366  
000028B2                          2367  
000028B2                          2368  
000028B2                          2369  
000028B2                          2370  
000028B2                          2371  
000028B2                          2372  
000028B2                          2373  
000028B2                          2374  
000028B2                          2375  
000028B2                          2376  
000028B2                          2377  
000028B2                          2378  
000028B2                          2379  
000028B2                          2380  
000028B2                          2381  
000028B2                          2382  
000028B2                          2383  
000028B2                          2384  
000028B2                          2385  
000028B2                          2386  
000028B2                          2387  
000028B2                          2388  
000028B2                          2389  
000028B2                          2390  
000028B2                          2391  
000028B2                          2392                          
000028B2                          2393  ;------------------------------------------------------------------------------------------------------------------------------------------
000028B2                          2394  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
000028B2                          2395  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000028B2  4282                    2396  ADD_Dn_ea                                               CLR.L       D2                                ;clear D2 
000028B4  C4BC 00000E00           2397                                                  AND.L       #mask_ADD_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
000028BA                          2398                                                  
000028BA  B4BC 00000000           2399  Dn_ea_ADD_reg0                                  CMP.L       #match_ADD_reg0,D2                  ;check to see if reg equal 0
000028C0  6600 0006               2400                                                  BNE         Dn_ea_ADD_reg1                  ;if not equal got check reg 1
000028C4  6700 0064               2401                                                  BEQ         Dn_ea_ADD_reg0_out              ;if equal go to output
000028C8                          2402                                                  
000028C8  B4BC 00000200           2403  Dn_ea_ADD_reg1                                  CMP.L       #match_ADD_reg1,D2                  ;check to see if reg equal 1
000028CE  6600 0006               2404                                                  BNE         Dn_ea_ADD_reg2                  ;if not equal got check reg 2
000028D2  6700 0062               2405                                                  BEQ         Dn_ea_ADD_reg1_out              ;if equal go to output
000028D6                          2406  
000028D6  B4BC 00000400           2407  Dn_ea_ADD_reg2                                  CMP.L       #match_ADD_reg2,D2                  ;check to see if reg equal 2
000028DC  6600 0006               2408                                                  BNE         Dn_ea_ADD_reg3                  ;if not equal got check reg 3
000028E0  6700 0060               2409                                                  BEQ         Dn_ea_ADD_reg2_out              ;if equal go to output
000028E4                          2410  
000028E4  B4BC 00000600           2411  Dn_ea_ADD_reg3                                  CMP.L       #match_ADD_reg3,D2                  ;check to see if reg equal 3
000028EA  6600 0006               2412                                                  BNE         Dn_ea_ADD_reg4                  ;if not equal got check reg 4
000028EE  6700 005E               2413                                                  BEQ         Dn_ea_ADD_reg3_out              ;if equal go to output
000028F2                          2414                                                  
000028F2  B4BC 00000800           2415  Dn_ea_ADD_reg4                                  CMP.L       #match_ADD_reg4,D2                  ;check to see if reg equal 4
000028F8  6600 0006               2416                                                  BNE         Dn_ea_ADD_reg5                  ;if not equal got check reg 5
000028FC  6700 005C               2417                                                  BEQ         Dn_ea_ADD_reg4_out              ;if equal go to output
00002900                          2418  
00002900  B4BC 00000A00           2419  Dn_ea_ADD_reg5                                  CMP.L       #match_ADD_reg5,D2                  ;check to see if reg equal 5
00002906  6600 0006               2420                                                  BNE         Dn_ea_ADD_reg6                  ;if not equal got check reg 6
0000290A  6700 005A               2421                                                  BEQ         Dn_ea_ADD_reg5_out              ;if equal go to output
0000290E                          2422  
0000290E  B4BC 00000C00           2423  Dn_ea_ADD_reg6                                  CMP.L       #match_ADD_reg6,D2                  ;check to see if reg equal 6
00002914  6600 0006               2424                                                  BNE         Dn_ea_ADD_reg7                  ;if not equal got check reg 7
00002918  6700 0058               2425                                                  BEQ         Dn_ea_ADD_reg6_out              ;if equal go to output          
0000291C                          2426  
0000291C  B4BC 00000E00           2427  Dn_ea_ADD_reg7                                  CMP.L       #match_ADD_reg7,D2                  ;check to see if reg equal 7
00002922  6700 005A               2428                                                  BEQ         Dn_ea_ADD_reg7_out              ;if equal go to output
00002926  6600 037C               2429                                                  BNE         ADD_ERROR                                ;if not equal to an addresssing mode, pritn error
0000292A                          2430                                  
0000292A                          2431  
0000292A                          2432  ;--------------------Data Output-----------------------
0000292A  227C 00008965           2433  Dn_ea_ADD_reg0_out               MOVE.L         #ea_D0,A1                                          ;load string constant into A1
00002930  4EB9 0000298A           2434                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002936                          2435  
00002936                          2436                                              
00002936  227C 00008968           2437  Dn_ea_ADD_reg1_out               MOVE.L         #ea_D1,A1                                       ;load string constant into A1
0000293C  4EB9 0000298A           2438                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002942                          2439                                              
00002942  227C 0000896B           2440  Dn_ea_ADD_reg2_out               MOVE.L         #ea_D2,A1                                       ;load string constant into A1
00002948  4EB9 0000298A           2441                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
0000294E                          2442                                              
0000294E  227C 0000896E           2443  Dn_ea_ADD_reg3_out               MOVE.L         #ea_D3,A1                                           ;load string constant into A1
00002954  4EB9 0000298A           2444                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
0000295A                          2445                                              
0000295A  227C 00008971           2446  Dn_ea_ADD_reg4_out               MOVE.L         #ea_D4,A1                                           ;load string constant into A1
00002960  4EB9 0000298A           2447                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002966                          2448                                              
00002966  227C 00008974           2449  Dn_ea_ADD_reg5_out               MOVE.L         #ea_D5,A1                                           ;load string constant into A1
0000296C  4EB9 0000298A           2450                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002972                          2451                                              
00002972  227C 00008977           2452  Dn_ea_ADD_reg6_out               MOVE.L         #ea_D6,A1                                           ;load string constant into A1
00002978  4EB9 0000298A           2453                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
0000297E                          2454                                              
0000297E  227C 0000897A           2455  Dn_ea_ADD_reg7_out               MOVE.L         #ea_D7,A1                                           ;load string constant into A1
00002984  4EB9 0000298A           2456                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
0000298A                          2457                                              
0000298A                          2458  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
0000298A  4241                    2459  ADD_determine_second_operand     CLR               D1                                            ;clear D1 to load new mask                                
0000298C  C2BC 00000038           2460                                   AND.L             #mask_ADD_ea_mode,D1                        ;move the mask to D1
00002992                          2461  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00002992  B2BC 00000010           2462  ADD_Dn_ea_add_reg_indir          CMP.L             #match_ADD_An_indir,D1                      ;check to see if mode is add reg indir
00002998  6600 0006               2463                                   BNE               ADD_Dn_ea_add_reg_indir_predec                          ;if not, go check add reg indir predec 
0000299C  6700 0048               2464                                   BEQ               ADD_Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
000029A0                          2465             
000029A0  B2BC 00000020           2466  ADD_Dn_ea_add_reg_indir_predec   CMP.L             #match_ADD_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
000029A6  6600 0006               2467                                   BNE               ADD_Dn_ea_add_reg_indir_postinc                         ;if not go check add reg indir/predec
000029AA  6700 01DA               2468                                   BEQ               ADD_Dn_ea_An_indir_predec                               ;if equal go figure out the register
000029AE                          2469                        
000029AE  B2BC 00000018           2470  ADD_Dn_ea_add_reg_indir_postinc  CMP.L             #match_ADD_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
000029B4  6600 0006               2471                                   BNE               ADD_Dn_ea_abs_add_word                                  ;if not go check abs add word
000029B8  6700 00FC               2472                                   BEQ               ADD_Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
000029BC                          2473  
000029BC  C4BC 0000003F           2474  ADD_Dn_ea_abs_add_word           AND.L             #mask_ADD_abs_add,D2                        ;load mask to determine if abs add word or long
000029C2                          2475                                   
000029C2  B4BC 00000038           2476                                   CMP.L             #match_ADD_abs_add_word,D2                  ;check if abs add word
000029C8  2A18                    2477                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000029CA  6600 0006               2478                                   BNE               ADD_Dn_ea_abs_add_long                                  ;if not go check abs add long
000029CE  6700 0286               2479                                   BEQ               ADD_Dn_ea_abs_add_word_out                              ;if equal go to output
000029D2                          2480    
000029D2  B4BC 00000039           2481  ADD_Dn_ea_abs_add_long           CMP.L             #match_ADD_abs_add_long,D2                  ;check to see if abs add long
000029D8  6700 028A               2482                                   BEQ               ADD_Dn_ea_abs_add_long_out                              ;if equal go to output
000029DC  6600 02C6               2483                                   BNE               ADD_ERROR                                         ;if not equal go to error mesage ADD routine
000029E0                          2484  
000029E0                          2485  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000029E0                          2486                                   
000029E0  C4BC 0000003F           2487                                   AND.L              #mask_ADD_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
000029E6                          2488  ;------------------Address Register Indirect-----------------------
000029E6  B4BC 00000010           2489  ADD_Dn_ea_An_indir_reg           CMP.L          #match_ADD_An_indir_r0,D2              ;check reg is equal to 0
000029EC  6600 0006               2490                                   BNE             ADD_Dn_ea_An_indir_reg1                           ;if not try reg 1
000029F0  6700 0064               2491                                   BEQ             ADD_Dn_ea_An_indir_reg0_out                       ;if equal go to output ADDroutine
000029F4                          2492  
000029F4  B4BC 00000011           2493  ADD_Dn_ea_An_indir_reg1          CMP.L           #match_ADD_An_indir_r1,D2              ;check reg is equal to 1
000029FA  6600 0006               2494                                   BNE             ADD_Dn_ea_An_indir_reg2                           ;if not try reg 2
000029FE  6700 0062               2495                                   BEQ             ADD_Dn_ea_An_indir_reg1_out                       ;if equal go to output ADDroutine
00002A02                          2496  
00002A02  B4BC 00000012           2497  ADD_Dn_ea_An_indir_reg2          CMP.L           #match_ADD_An_indir_r2,D2              ;check reg is equal to 2
00002A08  6600 0006               2498                                   BNE             ADD_Dn_ea_An_indir_reg3                           ;if not try reg 3
00002A0C  6700 0060               2499                                   BEQ             ADD_Dn_ea_An_indir_reg2_out                       ;if equal go to output ADDroutine
00002A10                          2500  
00002A10  B4BC 00000013           2501  ADD_Dn_ea_An_indir_reg3          CMP.L           #match_ADD_An_indir_r3,D2              ;check reg is equal to 3
00002A16  6600 0006               2502                                   BNE             ADD_Dn_ea_An_indir_reg4                           ;if not try reg 4
00002A1A  6700 005E               2503                                   BEQ             ADD_Dn_ea_An_indir_reg3_out                       ;if equal go to output ADDroutine
00002A1E                          2504      
00002A1E  B4BC 00000014           2505  ADD_Dn_ea_An_indir_reg4          CMP.L           #match_ADD_An_indir_r4,D2              ;check reg is equal to 4
00002A24  6600 0006               2506                                   BNE             ADD_Dn_ea_An_indir_reg5                           ;if not try reg 5
00002A28  6700 005C               2507                                   BEQ             ADD_Dn_ea_An_indir_reg4_out                       ;if equal go to output ADDroutine
00002A2C                          2508          
00002A2C  B4BC 00000015           2509  ADD_Dn_ea_An_indir_reg5          CMP.L           #match_ADD_An_indir_r5,D2              ;check reg is equal to 5
00002A32  6600 0006               2510                                   BNE             ADD_Dn_ea_An_indir_reg6                           ;if not try reg 6
00002A36  6700 005A               2511                                   BEQ             ADD_Dn_ea_An_indir_reg5_out                       ;if equal go to output ADDroutine
00002A3A                          2512  
00002A3A  B4BC 00000016           2513  ADD_Dn_ea_An_indir_reg6          CMP.L           #match_ADD_An_indir_r6,D2              ;check reg is equal to 6
00002A40  6600 0006               2514                                   BNE             ADD_Dn_ea_An_indir_reg7                           ;if not try reg 7
00002A44  6700 0058               2515                                   BEQ             ADD_Dn_ea_An_indir_reg6_out                       ;if equal go to output ADDroutine
00002A48                          2516  
00002A48  B4BC 00000017           2517  ADD_Dn_ea_An_indir_reg7          CMP.L           #match_ADD_An_indir_r7,D2              ;check reg is equal to 7
00002A4E  6700 005A               2518                                   BEQ             ADD_Dn_ea_An_indir_reg7_out                       ;if equal go to output ADDroutine
00002A52  6600 0250               2519                                   BNE             ADD_ERROR                                   :if not equal to an addresssing mode, pritn error
00002A56                          2520  
00002A56                          2521  ;--------------------Address Register Indirect Output-----------------------
00002A56  227C 000089A5           2522  ADD_Dn_ea_An_indir_reg0_out         MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00002A5C  4CDF 7CBE               2523                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A60  4E75                    2524                                       RTS
00002A62                          2525  
00002A62  227C 000089AA           2526  ADD_Dn_ea_An_indir_reg1_out         MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00002A68  4CDF 7CBE               2527                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A6C  4E75                    2528                                       RTS
00002A6E                          2529  
00002A6E  227C 000089AF           2530  ADD_Dn_ea_An_indir_reg2_out         MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00002A74  4CDF 7CBE               2531                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A78  4E75                    2532                                       RTS
00002A7A                          2533  
00002A7A  227C 000089B4           2534  ADD_Dn_ea_An_indir_reg3_out         MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00002A80  4CDF 7CBE               2535                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A84  4E75                    2536                                       RTS
00002A86                          2537  
00002A86  227C 000089B9           2538  ADD_Dn_ea_An_indir_reg4_out         MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00002A8C  4CDF 7CBE               2539                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A90  4E75                    2540                                       RTS
00002A92                          2541  
00002A92  227C 000089BE           2542  ADD_Dn_ea_An_indir_reg5_out         MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00002A98  4CDF 7CBE               2543                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A9C  4E75                    2544                                       RTS
00002A9E                          2545  
00002A9E  227C 000089C3           2546  ADD_Dn_ea_An_indir_reg6_out         MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00002AA4  4CDF 7CBE               2547                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002AA8  4E75                    2548                                       RTS
00002AAA                          2549                                          
00002AAA  227C 000089C8           2550  ADD_Dn_ea_An_indir_reg7_out         MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00002AB0  4CDF 7CBE               2551                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002AB4  4E75                    2552                                       RTS
00002AB6                          2553  
00002AB6                          2554  ;------------------Address Register Indirect with Post Increment-----------------------
00002AB6  B4BC 00000018           2555  ADD_Dn_ea_An_indir_postinc_reg              CMP.L      #match_ADD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00002ABC  6600 0006               2556                                              BNE        ADD_Dn_ea_An_indir_postinc_reg1                      ;if not try reg 1
00002AC0  6700 0064               2557                                              BEQ        ADD_Dn_ea_An_indir_postin_r0_out                  ;if equal go to output ADDroutine
00002AC4                          2558  
00002AC4  B4BC 00000019           2559  ADD_Dn_ea_An_indir_postinc_reg1             CMP.L      #match_ADD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00002ACA  6600 0006               2560                                              BNE        ADD_Dn_ea_An_indir_postinc_reg2                      ;if not try reg 2
00002ACE  6700 0062               2561                                              BEQ        ADD_Dn_ea_An_indir_postin_r1_out                  ;if equal go to output ADDroutine
00002AD2                          2562  
00002AD2  B4BC 0000001A           2563  ADD_Dn_ea_An_indir_postinc_reg2             CMP.L      #match_ADD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00002AD8  6600 0006               2564                                              BNE        ADD_Dn_ea_An_indir_postinc_reg3                      ;if not try reg 3
00002ADC  6700 0060               2565                                              BEQ        ADD_Dn_ea_An_indir_postin_r2_out                  ;if equal go to output ADDroutine
00002AE0                          2566  
00002AE0  B4BC 0000001B           2567  ADD_Dn_ea_An_indir_postinc_reg3             CMP.L      #match_ADD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00002AE6  6600 0006               2568                                              BNE        ADD_Dn_ea_An_indir_postinc_reg4                      ;if not try reg 4
00002AEA  6700 005E               2569                                              BEQ        ADD_Dn_ea_An_indir_postin_r3_out                  ;if equal go to output ADDroutine
00002AEE                          2570   
00002AEE  B4BC 0000001C           2571  ADD_Dn_ea_An_indir_postinc_reg4             CMP.L      #match_ADD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00002AF4  6600 0006               2572                                              BNE        ADD_Dn_ea_An_indir_postinc_reg5                      ;if not try reg 5
00002AF8  6700 005C               2573                                              BEQ        ADD_Dn_ea_An_indir_postin_r4_out                  ;if equal go to output ADDroutine
00002AFC                          2574  
00002AFC  B4BC 0000001D           2575  ADD_Dn_ea_An_indir_postinc_reg5             CMP.L      #match_ADD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00002B02  6600 0006               2576                                              BNE        ADD_Dn_ea_An_indir_postinc_reg6                      ;if not try reg 6
00002B06  6700 005A               2577                                              BEQ        ADD_Dn_ea_An_indir_postin_r5_out                  ;if equal go to output ADDroutine
00002B0A                          2578  
00002B0A  B4BC 0000001E           2579  ADD_Dn_ea_An_indir_postinc_reg6             CMP.L      #match_ADD_An_indir_postinc_r6,D2         ;check reg is equal to 6
00002B10  6600 0006               2580                                              BNE        ADD_Dn_ea_An_indir_postinc_reg7                        ;if not try reg 7
00002B14  6700 0058               2581                                              BEQ        ADD_Dn_ea_An_indir_postin_r6_out                    ;if equal go to output ADDroutine
00002B18                          2582  
00002B18  B4BC 0000001F           2583  ADD_Dn_ea_An_indir_postinc_reg7             CMP.L      #match_ADD_An_indir_postinc_r7,D2         ;check reg is equal to 7
00002B1E  6700 005A               2584                                              BEQ        ADD_Dn_ea_An_indir_postin_r7_out                    ;if equal go to output ADDroutine
00002B22  6600 0180               2585                                              BNE        ADD_ERROR                                        :if not equal to an addresssing mode, pritn error
00002B26                          2586  
00002B26                          2587  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00002B26  227C 000089CD           2588  ADD_Dn_ea_An_indir_postin_r0_out                MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00002B2C  4CDF 7CBE               2589                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B30  4E75                    2590                                                  RTS
00002B32                          2591  
00002B32  227C 000089D3           2592  ADD_Dn_ea_An_indir_postin_r1_out                MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00002B38  4CDF 7CBE               2593                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B3C  4E75                    2594                                                  RTS
00002B3E                          2595  
00002B3E  227C 000089D9           2596  ADD_Dn_ea_An_indir_postin_r2_out                MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00002B44  4CDF 7CBE               2597                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B48  4E75                    2598                                                  RTS
00002B4A                          2599  
00002B4A  227C 000089DF           2600  ADD_Dn_ea_An_indir_postin_r3_out                MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00002B50  4CDF 7CBE               2601                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B54  4E75                    2602                                                  RTS
00002B56                          2603  
00002B56  227C 000089E5           2604  ADD_Dn_ea_An_indir_postin_r4_out                MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00002B5C  4CDF 7CBE               2605                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B60  4E75                    2606                                                  RTS
00002B62                          2607  
00002B62  227C 000089EB           2608  ADD_Dn_ea_An_indir_postin_r5_out                MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00002B68  4CDF 7CBE               2609                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B6C  4E75                    2610                                                  RTS
00002B6E                          2611  
00002B6E  227C 000089F1           2612  ADD_Dn_ea_An_indir_postin_r6_out                MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00002B74  4CDF 7CBE               2613                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B78  4E75                    2614                                                  RTS
00002B7A                          2615  
00002B7A  227C 000089F7           2616  ADD_Dn_ea_An_indir_postin_r7_out                MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00002B80  4CDF 7CBE               2617                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B84  4E75                    2618                                                  RTS
00002B86                          2619  
00002B86                          2620  ;------------------Address Register Indirect with Pre Decrement-----------------------
00002B86  B4BC 00000020           2621  ADD_Dn_ea_An_indir_predec                   CMP.L      #match_ADD_An_indir_predec_reg0,D2       ;check reg is equal to 0
00002B8C  6600 0006               2622                                              BNE        ADD_Dn_ea_An_indir_predec_reg1                      ;if not try reg 1
00002B90  6700 0064               2623                                              BEQ        ADD_Dn_ea_An_indir_prede_r0_out               ;if equal go to output ADDroutine
00002B94                          2624  
00002B94  B4BC 00000021           2625  ADD_Dn_ea_An_indir_predec_reg1              CMP.L      #match_ADD_An_indir_predec_reg1,D2       ;check reg is equal to 1
00002B9A  6600 0006               2626                                              BNE        ADD_Dn_ea_An_indir_predec_reg2                      ;if not try reg 2
00002B9E  6700 0062               2627                                              BEQ        ADD_Dn_ea_An_indir_prede_r1_out               ;if equal go to output ADDroutine
00002BA2                          2628  
00002BA2  B4BC 00000022           2629  ADD_Dn_ea_An_indir_predec_reg2              CMP.L      #match_ADD_An_indir_predec_reg2,D2       ;check reg is equal to 2
00002BA8  6600 0006               2630                                              BNE        ADD_Dn_ea_An_indir_predec_reg3                      ;if not try reg 3
00002BAC  6700 0060               2631                                              BEQ        ADD_Dn_ea_An_indir_prede_r2_out               ;if equal go to output ADDroutine
00002BB0                          2632  
00002BB0  B4BC 00000023           2633  ADD_Dn_ea_An_indir_predec_reg3              CMP.L      #match_ADD_An_indir_predec_reg3,D2       ;check reg is equal to 3
00002BB6  6600 0006               2634                                              BNE        ADD_Dn_ea_An_indir_predec_reg4                      ;if not try reg 4
00002BBA  6700 005E               2635                                              BEQ        ADD_Dn_ea_An_indir_prede_r3_out               ;if equal go to output ADDroutine
00002BBE                          2636  
00002BBE  B4BC 00000024           2637  ADD_Dn_ea_An_indir_predec_reg4              CMP.L      #match_ADD_An_indir_predec_reg4,D2       ;check reg is equal to 4
00002BC4  6600 0006               2638                                              BNE        ADD_Dn_ea_An_indir_predec_reg5                      ;if not try reg 5
00002BC8  6700 005C               2639                                              BEQ        ADD_Dn_ea_An_indir_prede_r4_out               ;if equal go to output ADDroutine
00002BCC                          2640  
00002BCC  B4BC 00000025           2641  ADD_Dn_ea_An_indir_predec_reg5              CMP.L      #match_ADD_An_indir_predec_reg5,D2       ;check reg is equal to 5
00002BD2  6600 0006               2642                                              BNE        ADD_Dn_ea_An_indir_predec_reg6                     ;if not try reg 6
00002BD6  6700 005A               2643                                              BEQ        ADD_Dn_ea_An_indir_prede_r5_out               ;if equal go to output ADDroutine
00002BDA                          2644  
00002BDA  B4BC 00000026           2645  ADD_Dn_ea_An_indir_predec_reg6              CMP.L      #match_ADD_An_indir_predec_reg6,D2       ;check reg is equal to 6
00002BE0  6600 0006               2646                                              BNE        ADD_Dn_ea_An_indir_predec_reg7                     ;if not try reg 7
00002BE4  6700 0058               2647                                              BEQ        ADD_Dn_ea_An_indir_prede_r6_out               ;if equal go to output ADDroutine
00002BE8                          2648  
00002BE8  B4BC 00000027           2649  ADD_Dn_ea_An_indir_predec_reg7              CMP.L      #match_ADD_An_indir_predec_reg7,D2       ;check reg is equal to 7
00002BEE  6700 005A               2650                                              BEQ        ADD_Dn_ea_An_indir_prede_r7_out               ;if equal go to output ADDroutine
00002BF2  6600 00B0               2651                                              BNE        ADD_ERROR                                    :if not equal to an addresssing mode, pritn error
00002BF6                          2652  
00002BF6                          2653  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00002BF6  227C 000089FD           2654  ADD_Dn_ea_An_indir_prede_r0_out            MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00002BFC  4CDF 7CBE               2655                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C00  4E75                    2656                                                 RTS
00002C02                          2657                                              
00002C02  227C 00008A03           2658  ADD_Dn_ea_An_indir_prede_r1_out            MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00002C08  4CDF 7CBE               2659                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C0C  4E75                    2660                                                 RTS
00002C0E                          2661  
00002C0E  227C 00008A09           2662  ADD_Dn_ea_An_indir_prede_r2_out            MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00002C14  4CDF 7CBE               2663                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C18  4E75                    2664                                                 RTS
00002C1A                          2665  
00002C1A  227C 00008A0F           2666  ADD_Dn_ea_An_indir_prede_r3_out            MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00002C20  4CDF 7CBE               2667                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C24  4E75                    2668                                                 RTS
00002C26                          2669  
00002C26  227C 00008A15           2670  ADD_Dn_ea_An_indir_prede_r4_out            MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00002C2C  4CDF 7CBE               2671                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C30  4E75                    2672                                                 RTS
00002C32                          2673  
00002C32  227C 00008A1B           2674  ADD_Dn_ea_An_indir_prede_r5_out            MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00002C38  4CDF 7CBE               2675                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C3C  4E75                    2676                                                 RTS
00002C3E                          2677  
00002C3E  227C 00008A21           2678  ADD_Dn_ea_An_indir_prede_r6_out            MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00002C44  4CDF 7CBE               2679                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C48  4E75                    2680                                                 RTS
00002C4A                          2681  
00002C4A  227C 00008A27           2682  ADD_Dn_ea_An_indir_prede_r7_out            MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00002C50  4CDF 7CBE               2683                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C54  4E75                    2684                                                 RTS
00002C56                          2685                                              
00002C56                          2686  ;------------------Absolute Addressing Output-----------------------
00002C56  22FC 00008A37           2687  ADD_Dn_ea_abs_add_word_out            MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002C5C  22C5                    2688                                        MOVE.L      D5,(A1)+                           ;load address                  
00002C5E  4CDF 7CBE               2689                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C62  4E75                    2690                                        RTS                                            :return to ADDroutine
00002C64                          2691                                             
00002C64                          2692  
00002C64                          2693  
00002C64  2A18                    2694  ADD_Dn_ea_abs_add_long_out            MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00002C66  22FC 00008A37           2695                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002C6C  22C5                    2696                                        MOVE.L      D5,(A1)+                           ;load address                  
00002C6E  4CDF 7CBE               2697                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C72  4E75                    2698                                        RTS                                            :return to ADDroutine                                            
00002C74                          2699  ;---------------Immediate Addresing--------------------------
00002C74  2A18                    2700  ADD_Dn_ea_immediate_add_out           MOVE.L        (A0)+,D5                             ;capture the immediate address
00002C76  BCBC 000000FC           2701                                        CMP.L       #match_imm_add_word,D6               ;check to see if need to pull word
00002C7C  2A18                    2702                                        MOVE.L      (A0)+,D5                            ;pull the word
00002C7E  6700 0006               2703                                        BEQ         ADD_Dn_ea_imm_add_w                           ;if equal go pull word    
00002C82  6600 0010               2704                                        BNE         ADD_Dn_ea_imm_add_l                           ;if not equal, go check long
00002C86                          2705                                           
00002C86  22FC 00008A37           2706  ADD_Dn_ea_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
00002C8C  32C5                    2707                                        MOVE.W     D5,(A1)+                             ;load the word address                           
00002C8E  4CDF 7CBE               2708                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002C92  4E75                    2709                                        RTS
00002C94                          2710                                           
00002C94  2A18                    2711  ADD_Dn_ea_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
00002C96  22FC 00008A37           2712                                        MOVE.L     #ea_$,(A1)+                          ;load the $
00002C9C  2245                    2713                                        MOVE.L     D5,A1                               ;move to A1
00002C9E  4CDF 7CBE               2714                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002CA2  4E75                    2715                                        RTS
00002CA4                          2716  
00002CA4                          2717  
00002CA4                          2718  
00002CA4                          2719  
00002CA4                          2720  
00002CA4                          2721  
00002CA4                          2722  
00002CA4                          2723  
00002CA4                          2724  
00002CA4                          2725  
00002CA4                          2726  
00002CA4                          2727                                   
00002CA4                          2728  ;----------------------Error Handling----------------------------------------
00002CA4  43F9 00008951           2729  ADD_ERROR                                           LEA     ERROR_MESSAGE,A1                                         ;load error messge into A3
00002CAA  4CDF 7CBE               2730                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002CAE  4E75                    2731                                                  RTS
00002CB0                          2732                                                  
00002CB0                          2733                                                  
00002CB0  =000001C0               2734  mask_opmode                          EQU         $01C0                   ;mask for the opmode to determine operand order
00002CB0                          2735  
00002CB0  =00000038               2736  mask_ADD_ea_mode                    EQU         $0038
00002CB0  =0000003F               2737  mask_ADD_abs_add                    EQU         $003F
00002CB0  =0000003F               2738  mask_ADD_ea_reg_and_mode            EQU         $003F
00002CB0  =00000E00               2739  mask_ADD_An_reg                 EQU         $0E00
00002CB0                          2740  
00002CB0                          2741  
00002CB0  =00000100               2742  match_ADD_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
00002CB0  =00000140               2743  match_ADD_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
00002CB0  =00000180               2744  match_ADD_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
00002CB0                          2745  
00002CB0  =00000000               2746  match_ADD_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
00002CB0  =00000040               2747  match_ADD_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
00002CB0  =00000080               2748  match_ADD_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
00002CB0                          2749  
00002CB0                          2750  
00002CB0                          2751  
00002CB0  =00000000               2752  match_ADD_Dn                        EQU         $0000
00002CB0  =00000008               2753  match_ADD_An                        EQU         $0008
00002CB0  =00000010               2754  match_ADD_An_indir                  EQU         $0010
00002CB0  =00000020               2755  match_ADD_An_indir_predec           EQU         $0020
00002CB0  =00000018               2756  match_ADD_An_indir_postinc          EQU         $0018
00002CB0  =00000038               2757  match_ADD_abs_add_word              EQU         $0038
00002CB0  =00000039               2758  match_ADD_abs_add_long              EQU         $0039
00002CB0                          2759  
00002CB0  =00000000               2760  match_ADD_D0                            EQU         $0000
00002CB0  =00000001               2761  match_ADD_D1                            EQU         $0001
00002CB0  =00000002               2762  match_ADD_D2                            EQU         $0002
00002CB0  =00000003               2763  match_ADD_D3                            EQU         $0003
00002CB0  =00000004               2764  match_ADD_D4                            EQU         $0004
00002CB0  =00000005               2765  match_ADD_D5                            EQU         $0005
00002CB0  =00000006               2766  match_ADD_D6                            EQU         $0006
00002CB0  =00000007               2767  match_ADD_D7                            EQU         $0007
00002CB0                          2768  
00002CB0  =00000008               2769  match_ADD_A0                            EQU         $0008
00002CB0  =00000009               2770  match_ADD_A1                            EQU         $0009
00002CB0  =0000000A               2771  match_ADD_A2                            EQU         $000A
00002CB0  =0000000B               2772  match_ADD_A3                            EQU         $000B
00002CB0  =0000000C               2773  match_ADD_A4                            EQU         $000C
00002CB0  =0000000D               2774  match_ADD_A5                            EQU         $000D
00002CB0  =0000000E               2775  match_ADD_A6                            EQU         $000E
00002CB0  =0000000F               2776  match_ADD_A7                            EQU         $000F
00002CB0                          2777  
00002CB0  =00000010               2778  match_ADD_An_indir_r0                   EQU         $0010
00002CB0  =00000011               2779  match_ADD_An_indir_r1                   EQU         $0011
00002CB0  =00000012               2780  match_ADD_An_indir_r2                   EQU         $0012
00002CB0  =00000013               2781  match_ADD_An_indir_r3                   EQU         $0013
00002CB0  =00000014               2782  match_ADD_An_indir_r4                   EQU         $0014
00002CB0  =00000015               2783  match_ADD_An_indir_r5                   EQU         $0015
00002CB0  =00000016               2784  match_ADD_An_indir_r6                   EQU         $0016
00002CB0  =00000017               2785  match_ADD_An_indir_r7                   EQU         $0017
00002CB0                          2786  
00002CB0  =00000018               2787  match_ADD_An_indir_postinc_r0       EQU         $0018
00002CB0  =00000019               2788  match_ADD_An_indir_postinc_r1       EQU         $0019
00002CB0  =0000001A               2789  match_ADD_An_indir_postinc_r2       EQU         $001A
00002CB0  =0000001B               2790  match_ADD_An_indir_postinc_r3       EQU         $001B
00002CB0  =0000001C               2791  match_ADD_An_indir_postinc_r4       EQU         $001C
00002CB0  =0000001D               2792  match_ADD_An_indir_postinc_r5       EQU         $001D
00002CB0  =0000001E               2793  match_ADD_An_indir_postinc_r6       EQU         $001E
00002CB0  =0000001F               2794  match_ADD_An_indir_postinc_r7       EQU         $001F
00002CB0                          2795  
00002CB0  =00000020               2796  match_ADD_An_indir_predec_reg0          EQU         $0020
00002CB0  =00000021               2797  match_ADD_An_indir_predec_reg1          EQU         $0021
00002CB0  =00000022               2798  match_ADD_An_indir_predec_reg2          EQU         $0022
00002CB0  =00000023               2799  match_ADD_An_indir_predec_reg3          EQU         $0023
00002CB0  =00000024               2800  match_ADD_An_indir_predec_reg4          EQU         $0024
00002CB0  =00000025               2801  match_ADD_An_indir_predec_reg5          EQU         $0025
00002CB0  =00000026               2802  match_ADD_An_indir_predec_reg6          EQU         $0026
00002CB0  =00000027               2803  match_ADD_An_indir_predec_reg7          EQU         $0027
00002CB0                          2804  
00002CB0  =0000003C               2805  match_imm_add                           EQU         $003C
00002CB0  =000000FC               2806  match_imm_add_word                      EQU         $00FC
00002CB0  =000001FC               2807  match_imm_add_long                      EQU         $01FC
00002CB0                          2808  
00002CB0  =00000000               2809  match_ADD_reg0                          EQU         $0000
00002CB0  =00000200               2810  match_ADD_reg1                          EQU         $0200
00002CB0  =00000400               2811  match_ADD_reg2                          EQU         $0400
00002CB0  =00000600               2812  match_ADD_reg3                          EQU         $0600
00002CB0  =00000800               2813  match_ADD_reg4                          EQU         $0800
00002CB0  =00000A00               2814  match_ADD_reg5                          EQU         $0A00
00002CB0  =00000C00               2815  match_ADD_reg6                          EQU         $0C00
00002CB0  =00000E00               2816  match_ADD_reg7                          EQU         $0E00
00002CB0                          2817  
00002CB0                          2818  
00002CB0                          2819  
00002CB0                          2820  
00002CB0                          2821  
00002CB0                          2822  
00002CB0                          2823  
00002CB0                          2824  
00002CB0                          2825  
00002CB0                          2826  
00002CB0                          2827  
00002CB0                          2828  
00002CB0                          2829  
00002CB0                          2830  
00002CB0                          2831  -------------------- end include --------------------
00002CB0                          2832              INCLUDE 'AND Subroutine.x68'
00002CB0                          2833     
00002CB0                          2834  ;--------------------------------------------------------AND ANDroutine-----------------------------------------------------------------------
00002CB0  48E7 7D3E               2835  AND_sub                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)              ;preserve the registers, 
00002CB4                          2836                                   
00002CB4  C2BC 000001C0           2837                                         AND.L              #mask_opmode,D1                       ;load mask to determine the operand order
00002CBA                          2838                                  
00002CBA  B2BC 00000000           2839  AND_Dn_ea_match                        CMP.L              #match_AND_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00002CC0  6700 05DE               2840                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002CC4  6600 0002               2841                                         BNE                AND_Dn_ea_match_w                     ;if not check word size for same order
00002CC8                          2842  
00002CC8  B2BC 00000040           2843  AND_Dn_ea_match_w                      CMP.L              #match_AND_w_Dn_ea,D1                 ;check to see if it's Dn,ea
00002CCE  6700 05D0               2844                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002CD2  6600 0002               2845                                         BNE                AND_Dn_ea_match_l                     ;if not check long size for same order
00002CD6                          2846  
00002CD6  B2BC 00000080           2847  AND_Dn_ea_match_l                      CMP.L              #match_AND_l_Dn_ea,D1                 ;check to see if it's Dn,ea
00002CDC  6700 05C2               2848                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002CE0  6600 0002               2849                                         BNE                AND_ea_Dn_match                           ;if not check other order
00002CE4                          2850  
00002CE4  B2BC 00000100           2851  AND_ea_Dn_match                        CMP.L              #match_AND_b_ea_Dn,D1                 ;check to see if it's ea,Dn
00002CEA  6700 0022               2852                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002CEE  6600 0002               2853                                         BNE                AND_ea_Dn_match_w                     ;if not go check word size for same order
00002CF2                          2854  
00002CF2  B2BC 00000140           2855  AND_ea_Dn_match_w                      CMP.L              #match_AND_w_ea_Dn,D1                 ;check to see if it's ea,Dn
00002CF8  6700 0014               2856                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002CFC  6600 0002               2857                                         BNE                AND_ea_Dn_match_l                     ;if not go check word size for same order
00002D00                          2858  
00002D00  B2BC 00000180           2859  AND_ea_Dn_match_l                      CMP.L              #match_AND_l_ea_Dn,D1                 ;check to see if it's ea,Dn
00002D06  6700 0006               2860                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002D0A  6600 0956               2861                                         BNE                ERROR                                 ;if not go to error message
00002D0E                          2862  ;--------------------------------------------------------------------------------------------------------------------------
00002D0E                          2863  ;-------------------------------------------------------------------------------------------------------------------------
00002D0E  4241                    2864  AND_ea_Dn                            CLR               D1                                          ;clear D1 to load new mask                                
00002D10  C2BC 00000038           2865                                       AND.L             #mask_AND_ea_mode,D1                        ;move the mask to D1
00002D16                          2866  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00002D16  B2BC 00000010           2867  AND_ea_Dn_add_reg_indir              CMP.L             #match_AND_An_indir,D1                       ;check to see if mode is add reg indir
00002D1C  6600 0006               2868                                       BNE               AND_ea_Dn_add_reg_indir_pdec                 ;if not, go check add reg indir predec 
00002D20  6700 01E8               2869                                       BEQ               AND_ea_Dn_An_indir_reg                       ;if equal go figure out the register           
00002D24                          2870             
00002D24  B2BC 00000020           2871  AND_ea_Dn_add_reg_indir_pdec         CMP.L             #match_AND_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00002D2A  6600 0006               2872                                       BNE               AND_ea_Dn_add_reg_indir_pinc                 ;if not go check add reg indir/predec
00002D2E  6700 037A               2873                                       BEQ               AND_ea_Dn_An_indir_predec                      ;if equal go figure out the register
00002D32                          2874                        
00002D32  B2BC 00000018           2875  AND_ea_Dn_add_reg_indir_pinc         CMP.L             #match_AND_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00002D38  6600 0006               2876                                       BNE               AND_ea_Dn_abs_add_word                       ;if not go check abs add word
00002D3C  6700 029C               2877                                       BEQ               AND_ea_Dn_An_indir_pinc_reg                    ;if equal go figure out the register
00002D40                          2878  
00002D40  C4BC 0000003F           2879  AND_ea_Dn_abs_add_word               AND.L             #mask_AND_abs_add,D2                         ;load mask to determine if abs add word or long
00002D46                          2880                                   
00002D46  B4BC 00000038           2881                                       CMP.L             #match_AND_abs_add_word,D2                   ;check if abs add word
00002D4C  2A18                    2882                                       MOVE.L            (A0)+,D5                                     ;pull the next word instruction that holds the address
00002D4E  6600 0006               2883                                       BNE               AND_ea_Dn_abs_add_long                       ;if not go check abs add long
00002D52  6700 0426               2884                                       BEQ               AND_ea_Dn_abs_add_word_out                   ;if equal go to output
00002D56                          2885    
00002D56  B4BC 00000039           2886  AND_ea_Dn_abs_add_long               CMP.L             #match_AND_abs_add_long,D2                   ;check to see if abs add long
00002D5C  6700 042A               2887                                       BEQ               AND_ea_Dn_abs_add_long_out                   ;if equal go to output
00002D60  6600 0900               2888                                       BNE               ERROR                                        ;if not equal go to error mesage AND routine
00002D64                          2889  
00002D64                          2890  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00002D64                          2891                                   
00002D64  C4BC 0000003F           2892                                   AND.L              #mask_AND_ea_reg_and_mode,D2             ;load the mask into D2 for the mode and the register
00002D6A                          2893  ;-----------------------------------Data Register Direct--------------------------------
00002D6A  B4BC 00000000           2894  AND_ea_Dn_Dn_reg                 CMP.L              #match_AND_D0,D2                         ;check to see in the register is 0
00002D70  6600 0006               2895                                   BNE                AND_ea_Dn_rD1                            ;if not go check register 1
00002D74  6700 0064               2896                                   BEQ                AND_ea_Dn_D0_out                         ;if equal go to output ANDroutine
00002D78                          2897  
00002D78  B4BC 00000001           2898  AND_ea_Dn_rD1                    CMP.L              #match_AND_D1,D2                          ;check to see in the register is 1
00002D7E  6600 0006               2899                                   BNE                AND_ea_Dn_rD2                             ;if not go check register 2
00002D82  6700 0062               2900                                   BEQ                AND_ea_Dn_D1_out                          ;if equal go to output ANDroutine
00002D86                          2901  
00002D86  B4BC 00000002           2902  AND_ea_Dn_rD2                    CMP.L              #match_AND_D2,D2                          ;check to see in the register is 2
00002D8C  6600 0006               2903                                   BNE                AND_ea_Dn_rD3                             ;if not go check register 3
00002D90  6700 0060               2904                                   BEQ                AND_ea_Dn_D2_out                          ;if equal go to output ANDroutine
00002D94                          2905  
00002D94  B4BC 00000003           2906  AND_ea_Dn_rD3                    CMP.L              #match_AND_D3,D2                          ;check to see in the register is 3
00002D9A  6600 0006               2907                                   BNE                AND_ea_Dn_rD4                             ;if not go check register 4
00002D9E  6700 005E               2908                                   BEQ                AND_ea_Dn_D3_out                          ;if equal go to output ANDroutine
00002DA2                          2909  
00002DA2  B4BC 00000004           2910  AND_ea_Dn_rD4                    CMP.L              #match_AND_D4,D2                          ;check to see in the register is 4
00002DA8  6600 0006               2911                                   BNE                AND_ea_Dn_rD5                             ;if not go check register 5
00002DAC  6700 005C               2912                                   BEQ                AND_ea_Dn_D4_out                          ;if equal go to output ANDroutine
00002DB0                          2913  
00002DB0  B4BC 00000005           2914  AND_ea_Dn_rD5                    CMP.L              #match_AND_D5,D2                          ;check to see in the register is 5
00002DB6  6600 0006               2915                                   BNE                AND_ea_Dn_rD6                             ;if not go check register 6
00002DBA  6700 005A               2916                                   BEQ                AND_ea_Dn_D5_out                          ;if equal go to output ANDroutine
00002DBE                          2917  
00002DBE  B4BC 00000006           2918  AND_ea_Dn_rD6                    CMP.L              #match_AND_D6,D2                          ;check to see in the register is 6
00002DC4  6600 0006               2919                                   BNE                AND_ea_Dn_rD7                             ;if not go check register 7
00002DC8  6700 0058               2920                                   BEQ                AND_ea_Dn_D6_out                          ;if equal go to output ANDroutine
00002DCC                          2921  
00002DCC  B4BC 00000007           2922  AND_ea_Dn_rD7                    CMP.L              #match_AND_D7,D2                          ;check to see in the register is 7
00002DD2  6700 005A               2923                                   BEQ                AND_ea_Dn_D7_out                          ;if equal go to output ANDroutine
00002DD6  6600 088A               2924                                   BNE                ERROR                                     ;if not equal, got to error message
00002DDA                          2925  ;--------------------Data Register Direct Output-----------------------
00002DDA  227C 00008965           2926  AND_ea_Dn_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
00002DE0  4EB9 000031C8           2927                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DE6                          2928  
00002DE6  227C 00008968           2929  AND_ea_Dn_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
00002DEC  4EB9 000031C8           2930                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DF2                          2931  
00002DF2  227C 0000896B           2932  AND_ea_Dn_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
00002DF8  4EB9 000031C8           2933                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DFE                          2934  
00002DFE  227C 0000896E           2935  AND_ea_Dn_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
00002E04  4EB9 000031C8           2936                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E0A                          2937  
00002E0A  227C 00008971           2938  AND_ea_Dn_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
00002E10  4EB9 000031C8           2939                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E16                          2940  
00002E16  227C 00008974           2941  AND_ea_Dn_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00002E1C  4EB9 000031C8           2942                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E22                          2943  
00002E22  227C 00008977           2944  AND_ea_Dn_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00002E28  4EB9 000031C8           2945                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E2E                          2946  
00002E2E  227C 0000897A           2947  AND_ea_Dn_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00002E34  4EB9 000031C8           2948                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E3A                          2949  
00002E3A                          2950  ;------------------Address Register Direct-----------------------
00002E3A  B4BC 00000008           2951  AND_ea_Dn_An_reg                 CMP.L           #match_AND_A0,D2                        ;check reg is equal to 0
00002E40  6600 0006               2952                                   BNE             AND_ea_Dn_rA1                           ;if not try reg 1
00002E44  6700 0134               2953                                   BEQ             AND_ea_Dn_An_indir_reg0_out             ;if equal go to output ANDroutine
00002E48                          2954  
00002E48  B4BC 00000009           2955  AND_ea_Dn_rA1                    CMP.L           #match_AND_A1,D2                        ;check reg is equal to 1
00002E4E  6600 0006               2956                                   BNE             AND_ea_Dn_rA2                           ;if not try reg 2
00002E52  6700 0132               2957                                   BEQ             AND_ea_Dn_An_indir_reg1_out             ;if equal go to output ANDroutine
00002E56                          2958  
00002E56  B4BC 0000000A           2959  AND_ea_Dn_rA2                    CMP.L           #match_AND_A2,D2                        ;check reg is equal to 2
00002E5C  6600 0006               2960                                   BNE             AND_ea_Dn_rA3                           ;if not try reg 3
00002E60  6700 0130               2961                                   BEQ             AND_ea_Dn_An_indir_reg2_out             ;if equal go to output ANDroutine
00002E64                          2962  
00002E64  B4BC 0000000B           2963  AND_ea_Dn_rA3                    CMP.L           #match_AND_A3,D2                        ;check reg is equal to 3
00002E6A  6600 0006               2964                                   BNE             AND_ea_Dn_rA4                           ;if not try reg 4
00002E6E  6700 012E               2965                                   BEQ             AND_ea_Dn_An_indir_reg3_out             ;if equal go to output ANDroutine
00002E72                          2966  
00002E72  B4BC 0000000C           2967  AND_ea_Dn_rA4                    CMP.L           #match_AND_A4,D2                        ;check reg is equal to 4
00002E78  6600 0006               2968                                   BNE             AND_ea_Dn_rA5                           ;if not try reg 5
00002E7C  6700 012C               2969                                   BEQ             AND_ea_Dn_An_indir_reg4_out             ;if equal go to output ANDroutine
00002E80                          2970              
00002E80  B4BC 0000000D           2971  AND_ea_Dn_rA5                    CMP.L           #match_AND_A5,D2                        ;check reg is equal to 5
00002E86  6600 0006               2972                                   BNE             AND_ea_Dn_rA6                           ;if not try reg 6
00002E8A  6700 012A               2973                                   BEQ             AND_ea_Dn_An_indir_reg5_out             ;if equal go to output ANDroutine
00002E8E                          2974  
00002E8E  B4BC 0000000E           2975  AND_ea_Dn_rA6                    CMP.L           #match_AND_A6,D2                        ;check reg is equal to 6
00002E94  6600 0006               2976                                   BNE             AND_ea_Dn_rA7                           ;if not try reg 7
00002E98  6700 0128               2977                                   BEQ             AND_ea_Dn_An_indir_reg6_out             ;if equal go to output ANDroutine
00002E9C                          2978  
00002E9C  B4BC 0000000F           2979  AND_ea_Dn_rA7                    CMP.L           #match_AND_A7,D2                        ;check reg is equal to 7
00002EA2  6700 012A               2980                                   BEQ             AND_ea_Dn_An_indir_reg7_out             ;if equal go to output ANDroutine
00002EA6  6600 07BA               2981                                   BNE             ERROR                                   ;if not equal to an addresssing mode, pritn error
00002EAA                          2982  
00002EAA                          2983  ;--------------------Address Register Direct Output-----------------------
00002EAA  227C 0000897D           2984  AND_ea_Dn_A0_out                MOVE.L          #ea_A0,A1                               ;load string constant into A1
00002EB0  4EB9 000031C8           2985                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EB6                          2986                                  
00002EB6  227C 00008980           2987  AND_ea_Dn_A1_out                MOVE.L          #ea_A1,A1                               ;load string constant into A1
00002EBC  4EB9 000031C8           2988                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EC2                          2989                                  
00002EC2  227C 00008983           2990  AND_ea_Dn_A2_out                MOVE.L          #ea_A2,A1                               ;load string constant into A1
00002EC8  4EB9 000031C8           2991                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002ECE                          2992                                  
00002ECE  227C 00008986           2993  AND_ea_Dn_A3_out                MOVE.L          #ea_A3,A1                               ;load string constant into A1
00002ED4  4EB9 000031C8           2994                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EDA                          2995  
00002EDA  227C 00008989           2996  AND_ea_Dn_A4_out                MOVE.L          #ea_A4,A1                               ;load string constant into A1
00002EE0  4EB9 000031C8           2997                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EE6                          2998  
00002EE6  227C 0000898C           2999  AND_ea_Dn_A5_out                MOVE.L          #ea_A5,A1                               ;load string constant into A1
00002EEC  4EB9 000031C8           3000                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EF2                          3001  
00002EF2  227C 0000898F           3002  AND_ea_Dn_A6_out                MOVE.L          #ea_A6,A1                               ;load string constant into A1
00002EF8  4EB9 000031C8           3003                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EFE                          3004  
00002EFE  227C 00008992           3005  AND_ea_Dn_A7_out                MOVE.L          #ea_A7,A1                               ;load string constant into A1
00002F04  4EB9 000031C8           3006                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F0A                          3007  
00002F0A                          3008  ;------------------Address Register Indirect-----------------------
00002F0A  B4BC 00000010           3009  AND_ea_Dn_An_indir_reg           CMP.L          #match_AND_An_indir_r0,D2              ;check reg is equal to 0
00002F10  6600 0006               3010                                   BNE             AND_ea_Dn_An_indir_reg1               ;if not try reg 1
00002F14  6700 0064               3011                                   BEQ             AND_ea_Dn_An_indir_reg0_out           ;if equal go to output ANDroutine
00002F18                          3012  
00002F18  B4BC 00000011           3013  AND_ea_Dn_An_indir_reg1          CMP.L           #match_AND_An_indir_r1,D2             ;check reg is equal to 1
00002F1E  6600 0006               3014                                   BNE             AND_ea_Dn_An_indir_reg2               ;if not try reg 2
00002F22  6700 0062               3015                                   BEQ             AND_ea_Dn_An_indir_reg1_out           ;if equal go to output ANDroutine
00002F26                          3016  
00002F26  B4BC 00000012           3017  AND_ea_Dn_An_indir_reg2          CMP.L           #match_AND_An_indir_r2,D2             ;check reg is equal to 2
00002F2C  6600 0006               3018                                   BNE             AND_ea_Dn_An_indir_reg3               ;if not try reg 3
00002F30  6700 0060               3019                                   BEQ             AND_ea_Dn_An_indir_reg2_out           ;if equal go to output ANDroutine
00002F34                          3020  
00002F34  B4BC 00000013           3021  AND_ea_Dn_An_indir_reg3          CMP.L           #match_AND_An_indir_r3,D2             ;check reg is equal to 3
00002F3A  6600 0006               3022                                   BNE             AND_ea_Dn_An_indir_reg4               ;if not try reg 4
00002F3E  6700 005E               3023                                   BEQ             AND_ea_Dn_An_indir_reg3_out           ;if equal go to output ANDroutine
00002F42                          3024      
00002F42  B4BC 00000014           3025  AND_ea_Dn_An_indir_reg4          CMP.L           #match_AND_An_indir_r4,D2             ;check reg is equal to 4
00002F48  6600 0006               3026                                   BNE             AND_ea_Dn_An_indir_reg5               ;if not try reg 5
00002F4C  6700 005C               3027                                   BEQ             AND_ea_Dn_An_indir_reg4_out           ;if equal go to output ANDroutine
00002F50                          3028          
00002F50  B4BC 00000015           3029  AND_ea_Dn_An_indir_reg5          CMP.L           #match_AND_An_indir_r5,D2             ;check reg is equal to 5
00002F56  6600 0006               3030                                   BNE             AND_ea_Dn_An_indir_reg6               ;if not try reg 6
00002F5A  6700 005A               3031                                   BEQ             AND_ea_Dn_An_indir_reg5_out           ;if equal go to output ANDroutine
00002F5E                          3032  
00002F5E  B4BC 00000016           3033  AND_ea_Dn_An_indir_reg6          CMP.L           #match_AND_An_indir_r6,D2             ;check reg is equal to 6
00002F64  6600 0006               3034                                   BNE             AND_ea_Dn_An_indir_reg7               ;if not try reg 7
00002F68  6700 0058               3035                                   BEQ             AND_ea_Dn_An_indir_reg6_out           ;if equal go to output ANDroutine
00002F6C                          3036  
00002F6C  B4BC 00000017           3037  AND_ea_Dn_An_indir_reg7          CMP.L           #match_AND_An_indir_r7,D2             ;check reg is equal to 7
00002F72  6700 005A               3038                                   BEQ             AND_ea_Dn_An_indir_reg7_out           ;if equal go to output ANDroutine
00002F76  6600 06EA               3039                                   BNE             ERROR                                 ;if not equal to an addresssing mode, pritn error
00002F7A                          3040  
00002F7A                          3041  ;--------------------Address Register Indirect Output-----------------------
00002F7A  227C 000089A5           3042  AND_ea_Dn_An_indir_reg0_out                 MOVE.L          #ea_indir_A0,A1                       ;load string constant into A1
00002F80  4EB9 000031C8           3043                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F86                          3044  
00002F86  227C 000089AA           3045  AND_ea_Dn_An_indir_reg1_out                 MOVE.L          #ea_indir_A1,A1                     ;load string constant into A1
00002F8C  4EB9 000031C8           3046                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F92                          3047  
00002F92  227C 000089AF           3048  AND_ea_Dn_An_indir_reg2_out                 MOVE.L          #ea_indir_A2,A1                     ;load string constant into A1
00002F98  4EB9 000031C8           3049                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F9E                          3050  
00002F9E  227C 000089B4           3051  AND_ea_Dn_An_indir_reg3_out                 MOVE.L          #ea_indir_A3,A1                     ;load string constant into A1
00002FA4  4EB9 000031C8           3052                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FAA                          3053  
00002FAA  227C 000089B9           3054  AND_ea_Dn_An_indir_reg4_out                 MOVE.L          #ea_indir_A4,A1                     ;load string constant into A1
00002FB0  4EB9 000031C8           3055                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FB6                          3056  
00002FB6  227C 000089BE           3057  AND_ea_Dn_An_indir_reg5_out                 MOVE.L          #ea_indir_A5,A1                     ;load string constant into A1
00002FBC  4EB9 000031C8           3058                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FC2                          3059  
00002FC2  227C 000089C3           3060  AND_ea_Dn_An_indir_reg6_out                 MOVE.L          #ea_indir_A6,A1                     ;load string constant into A1
00002FC8  4EB9 000031C8           3061                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FCE                          3062                                          
00002FCE  227C 000089C8           3063  AND_ea_Dn_An_indir_reg7_out                 MOVE.L          #ea_indir_A7,A1                     ;load string constant into A1
00002FD4  4EB9 000031C8           3064                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FDA                          3065  
00002FDA                          3066  ;------------------Address Register Indirect with Post Increment-----------------------
00002FDA  B4BC 00000018           3067  AND_ea_Dn_An_indir_pinc_reg                 CMP.L      #match_AND_An_indir_postinc_r0,D2                    ;check reg is equal to 0
00002FE0  6600 0006               3068                                              BNE        AND_ea_Dn_An_indir_pinc_r1                      ;if not try reg 1
00002FE4  6700 0064               3069                                              BEQ        AND_ea_Dn_An_indir_pinc_r0_out                  ;if equal go to output ANDroutine
00002FE8                          3070  
00002FE8  B4BC 00000019           3071  AND_ea_Dn_An_indir_pinc_r1                  CMP.L      #match_AND_An_indir_postinc_r1,D2                    ;check reg is equal to 1
00002FEE  6600 0006               3072                                              BNE        AND_ea_Dn_An_indir_pinc_r2                      ;if not try reg 2
00002FF2  6700 0062               3073                                              BEQ        AND_ea_Dn_An_indir_pinc_r1_out                  ;if equal go to output ANDroutine
00002FF6                          3074  
00002FF6  B4BC 0000001A           3075  AND_ea_Dn_An_indir_pinc_r2                  CMP.L      #match_AND_An_indir_postinc_r2,D2                    ;check reg is equal to 2
00002FFC  6600 0006               3076                                              BNE        AND_ea_Dn_An_indir_pinc_r3                      ;if not try reg 3
00003000  6700 0060               3077                                              BEQ        AND_ea_Dn_An_indir_pinc_r2_out                  ;if equal go to output ANDroutine
00003004                          3078  
00003004  B4BC 0000001B           3079  AND_ea_Dn_An_indir_pinc_r3                  CMP.L      #match_AND_An_indir_postinc_r3,D2                    ;check reg is equal to 3
0000300A  6600 0006               3080                                              BNE        AND_ea_Dn_An_indir_pinc_r4                      ;if not try reg 4
0000300E  6700 005E               3081                                              BEQ        AND_ea_Dn_An_indir_pinc_r3_out                  ;if equal go to output ANDroutine
00003012                          3082   
00003012  B4BC 0000001C           3083  AND_ea_Dn_An_indir_pinc_r4                  CMP.L      #match_AND_An_indir_postinc_r4,D2                    ;check reg is equal to 4
00003018  6600 0006               3084                                              BNE        AND_ea_Dn_An_indir_pinc_r5                      ;if not try reg 5
0000301C  6700 005C               3085                                              BEQ        AND_ea_Dn_An_indir_pinc_r4_out                  ;if equal go to output ANDroutine
00003020                          3086  
00003020  B4BC 0000001D           3087  AND_ea_Dn_An_indir_pinc_r5                  CMP.L      #match_AND_An_indir_postinc_r5,D2                    ;check reg is equal to 5
00003026  6600 0006               3088                                              BNE        AND_ea_Dn_An_indir_pinc_r6                      ;if not try reg 6
0000302A  6700 005A               3089                                              BEQ        AND_ea_Dn_An_indir_pinc_r5_out                  ;if equal go to output ANDroutine
0000302E                          3090  
0000302E  B4BC 0000001E           3091  AND_ea_Dn_An_indir_pinc_r6                  CMP.L      #match_AND_An_indir_postinc_r6,D2                      ;check reg is equal to 6
00003034  6600 0006               3092                                              BNE        AND_ea_Dn_An_indir_pinc_r7                        ;if not try reg 7
00003038  6700 0058               3093                                              BEQ        AND_ea_Dn_An_indir_pinc_r6_out                    ;if equal go to output ANDroutine
0000303C                          3094  
0000303C  B4BC 0000001F           3095  AND_ea_Dn_An_indir_pinc_r7                  CMP.L      #match_AND_An_indir_postinc_r7,D2                      ;check reg is equal to 7
00003042  6700 005A               3096                                              BEQ        AND_ea_Dn_An_indir_pinc_r7_out                    ;if equal go to output ANDroutine
00003046  6600 061A               3097                                              BNE        ERROR                                                  ;if not equal to an addresssing mode, pritn error
0000304A                          3098  
0000304A                          3099  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000304A  227C 000089CD           3100  AND_ea_Dn_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1               ;load string constant into A1
00003050  4EB9 000031C8           3101                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003056                          3102  
00003056  227C 000089D3           3103  AND_ea_Dn_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1               ;load string constant into A1
0000305C  4EB9 000031C8           3104                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003062                          3105  
00003062  227C 000089D9           3106  AND_ea_Dn_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1               ;load string constant into A1
00003068  4EB9 000031C8           3107                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000306E                          3108  
0000306E  227C 000089DF           3109  AND_ea_Dn_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1               ;load string constant into A1
00003074  4EB9 000031C8           3110                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000307A                          3111  
0000307A  227C 000089E5           3112  AND_ea_Dn_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1               ;load string constant into A1
00003080  4EB9 000031C8           3113                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003086                          3114  
00003086  227C 000089EB           3115  AND_ea_Dn_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1               ;load string constant into A1
0000308C  4EB9 000031C8           3116                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003092                          3117  
00003092  227C 000089F1           3118  AND_ea_Dn_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1               ;load string constant into A1
00003098  4EB9 000031C8           3119                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000309E                          3120  
0000309E  227C 000089F7           3121  AND_ea_Dn_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1               ;load string constant into A1
000030A4  4EB9 000031C8           3122                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000030AA                          3123  
000030AA                          3124  
000030AA                          3125  ;------------------Address Register Indirect with Pre Decrement-----------------------
000030AA  B4BC 00000020           3126  AND_ea_Dn_An_indir_predec                       CMP.L      #match_AND_An_indir_predec_reg0,D2               ;check reg is equal to 0
000030B0  6600 0006               3127                                                  BNE        AND_ea_Dn_An_indir_pdec_r1                   ;if not try reg 1
000030B4  6700 0064               3128                                                  BEQ        AND_ea_Dn_An_indir_pdec_r0_out               ;if equal go to output ANDroutine
000030B8                          3129  
000030B8  B4BC 00000021           3130  AND_ea_Dn_An_indir_pdec_r1                      CMP.L      #match_AND_An_indir_predec_reg1,D2               ;check reg is equal to 1
000030BE  6600 0006               3131                                                  BNE        AND_ea_Dn_An_indir_pdec_r2                   ;if not try reg 2
000030C2  6700 0062               3132                                                  BEQ        AND_ea_Dn_An_indir_pdec_r1_out               ;if equal go to output ANDroutine
000030C6                          3133  
000030C6  B4BC 00000022           3134  AND_ea_Dn_An_indir_pdec_r2                      CMP.L      #match_AND_An_indir_predec_reg2,D2               ;check reg is equal to 2
000030CC  6600 0006               3135                                                  BNE        AND_ea_Dn_An_indir_pdec_r3                   ;if not try reg 3
000030D0  6700 0060               3136                                                  BEQ        AND_ea_Dn_An_indir_pdec_r2_out               ;if equal go to output ANDroutine
000030D4                          3137  
000030D4  B4BC 00000023           3138  AND_ea_Dn_An_indir_pdec_r3                      CMP.L      #match_AND_An_indir_predec_reg3,D2               ;check reg is equal to 3
000030DA  6600 0006               3139                                                  BNE        AND_ea_Dn_An_indir_pdec_r4                   ;if not try reg 4
000030DE  6700 005E               3140                                                  BEQ        AND_ea_Dn_An_indir_pdec_r3_out               ;if equal go to output ANDroutine
000030E2                          3141  
000030E2  B4BC 00000024           3142  AND_ea_Dn_An_indir_pdec_r4                      CMP.L      #match_AND_An_indir_predec_reg4,D2               ;check reg is equal to 4
000030E8  6600 0006               3143                                                  BNE        AND_ea_Dn_An_indir_pdec_r5                   ;if not try reg 5
000030EC  6700 005C               3144                                                  BEQ        AND_ea_Dn_An_indir_pdec_r4_out               ;if equal go to output ANDroutine
000030F0                          3145  
000030F0  B4BC 00000025           3146  AND_ea_Dn_An_indir_pdec_r5                      CMP.L      #match_AND_An_indir_predec_reg5,D2               ;check reg is equal to 5
000030F6  6600 0006               3147                                                  BNE        AND_ea_Dn_An_indir_pdec_r6                   ;if not try reg 6
000030FA  6700 005A               3148                                                  BEQ        AND_ea_Dn_An_indir_pdec_r5_out               ;if equal go to output ANDroutine
000030FE                          3149  
000030FE  B4BC 00000026           3150  AND_ea_Dn_An_indir_pdec_r6                      CMP.L      #match_AND_An_indir_predec_reg6,D2               ;check reg is equal to 6
00003104  6600 0006               3151                                                  BNE        AND_ea_Dn_An_indir_pdec_r7                   ;if not try reg 7
00003108  6700 0058               3152                                                  BEQ        AND_ea_Dn_An_indir_pdec_r6_out               ;if equal go to output ANDroutine
0000310C                          3153  
0000310C  B4BC 00000027           3154  AND_ea_Dn_An_indir_pdec_r7                      CMP.L      #match_AND_An_indir_predec_reg7,D2               ;check reg is equal to 7
00003112  6700 005A               3155                                                  BEQ        AND_ea_Dn_An_indir_pdec_r7_out               ;if equal go to output ANDroutine
00003116  6600 054A               3156                                                  BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
0000311A                          3157  
0000311A                          3158  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000311A  227C 000089FD           3159  AND_ea_Dn_An_indir_pdec_r0_out                  MOVE.L          #ea_indir_predec_A0,A1           ;load string constant into A1
00003120  4EB9 000031C8           3160                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003126                          3161                                              
00003126  227C 00008A03           3162  AND_ea_Dn_An_indir_pdec_r1_out                  MOVE.L          #ea_indir_predec_A1,A1           ;load string constant into A1
0000312C  4EB9 000031C8           3163                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003132                          3164  
00003132  227C 00008A09           3165  AND_ea_Dn_An_indir_pdec_r2_out                  MOVE.L          #ea_indir_predec_A2,A1           ;load string constant into A1
00003138  4EB9 000031C8           3166                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
0000313E                          3167  
0000313E  227C 00008A0F           3168  AND_ea_Dn_An_indir_pdec_r3_out                  MOVE.L          #ea_indir_predec_A3,A1           ;load string constant into A1
00003144  4EB9 000031C8           3169                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
0000314A                          3170  
0000314A  227C 00008A15           3171  AND_ea_Dn_An_indir_pdec_r4_out                  MOVE.L          #ea_indir_predec_A4,A1           ;load string constant into A1
00003150  4EB9 000031C8           3172                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003156                          3173  
00003156  227C 00008A1B           3174  AND_ea_Dn_An_indir_pdec_r5_out                  MOVE.L          #ea_indir_predec_A5,A1           ;load string constant into A1
0000315C  4EB9 000031C8           3175                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003162                          3176  
00003162  227C 00008A21           3177  AND_ea_Dn_An_indir_pdec_r6_out                  MOVE.L          #ea_indir_predec_A6,A1           ;load string constant into A1
00003168  4EB9 000031C8           3178                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
0000316E                          3179  
0000316E  227C 00008A27           3180  AND_ea_Dn_An_indir_pdec_r7_out                  MOVE.L          #ea_indir_predec_A7,A1           ;load string constant into A1
00003174  4EB9 000031C8           3181                                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000317A                          3182          
0000317A                          3183  ;------------------Absolute Addressing Output-----------------------
0000317A  22FC 00008A37           3184  AND_ea_Dn_abs_add_word_out                MOVE.L      #ea_$,(A1)+                       ;load $ for hex and increment A1
00003180  22C5                    3185                                            MOVE.L      D5,(A1)+                          ;load address                  
00003182  4EB9 000031C8           3186                                            JSR         AND_determine_second_op           ;jump to ANDroutine to determine second operand
00003188                          3187                                             
00003188                          3188  
00003188  2A18                    3189  AND_ea_Dn_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000318A  22FC 00008A37           3190                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003190  22C5                    3191                                           MOVE.L      D5,(A1)+                           ;load address                  
00003192  4EB9 000031C8           3192                                           JSR         AND_determine_second_op            ;jump to ANDroutine to determine second operand
00003198                          3193  
00003198                          3194  ;---------------Immediate Addresing---------------------------
00003198  2A18                    3195  AND_ea_Dn_immediate_add_out         MOVE.L      (A0)+,D5                           ;capture the immediate address
0000319A  BCBC 000000FC           3196                                      CMP.L       #match_AND_imm_add_word,D6         ;check to see if need to pull word
000031A0  2A18                    3197                                      MOVE.L      (A0)+,D5                           ;pull the word
000031A2  6700 0006               3198                                      BEQ         AND_ea_Dn_imm_add_w                ;if equal go pull word    
000031A6  6600 0010               3199                                      BNE         AND_ea_Dn_imm_add_l                ;if not equal, go check long
000031AA                          3200                                           
000031AA  22FC 00008A37           3201  AND_ea_Dn_imm_add_w                 MOVE.L     #ea_$,(A1)+                         ;load the $
000031B0  32C5                    3202                                      MOVE.W     D5,(A1)+                            ;load the word address                           
000031B2  4EB9 000031C8           3203                                      JSR        AND_determine_second_op             ;jump to ANDroutine to determine second operand
000031B8                          3204                                           
000031B8  2A18                    3205  AND_ea_Dn_imm_add_l                 MOVE.L     (A0)+,D5                            ;pull the long and increase the pointer
000031BA  22FC 00008A37           3206                                      MOVE.L     #ea_$,(A1)+                         ;load the $
000031C0  2245                    3207                                      MOVE.L     D5,A1                               ;move to A1
000031C2  4EB9 000031C8           3208                                      JSR        AND_determine_second_op             ;jump to ANDroutine to determine second operand
000031C8                          3209  
000031C8                          3210  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000031C8  4282                    3211  AND_determine_second_op                         CLR.L       D2                          ;clear D2 
000031CA  C4BC 00000E00           3212                                                  AND.L       #mask_AND_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
000031D0                          3213                                                  
000031D0  B4BC 00000000           3214  ea_Dn_AND_reg0                                  CMP.L       #match_AND_reg0,D2            ;check to see if reg equal 0
000031D6  6600 0006               3215                                                  BNE         ea_Dn_AND_reg1              ;if not equal got check reg 1
000031DA  6700 0064               3216                                                  BEQ         ea_Dn_AND_reg0_out          ;if equal go to output
000031DE                          3217                                                  
000031DE  B4BC 00000200           3218  ea_Dn_AND_reg1                                  CMP.L       #match_AND_reg1,D2             ;check to see if reg equal 1
000031E4  6600 0006               3219                                                  BNE         ea_Dn_AND_reg2               ;if not equal got check reg 2
000031E8  6700 0062               3220                                                  BEQ         ea_Dn_AND_reg1_out           ;if equal go to output
000031EC                          3221  
000031EC  B4BC 00000400           3222  ea_Dn_AND_reg2                                  CMP.L       #match_AND_reg2,D2             ;check to see if reg equal 2
000031F2  6600 0006               3223                                                  BNE         ea_Dn_AND_reg3               ;if not equal got check reg 3
000031F6  6700 0060               3224                                                  BEQ         ea_Dn_AND_reg2_out           ;if equal go to output
000031FA                          3225  
000031FA  B4BC 00000600           3226  ea_Dn_AND_reg3                                  CMP.L       #match_AND_reg3,D2             ;check to see if reg equal 3
00003200  6600 0006               3227                                                  BNE         ea_Dn_AND_reg4               ;if not equal got check reg 4
00003204  6700 005E               3228                                                  BEQ         ea_Dn_AND_reg3_out           ;if equal go to output
00003208                          3229                                                  
00003208  B4BC 00000800           3230  ea_Dn_AND_reg4                                  CMP.L       #match_AND_reg4,D2             ;check to see if reg equal 4
0000320E  6600 0006               3231                                                  BNE         ea_Dn_AND_reg5               ;if not equal got check reg 5
00003212  6700 005C               3232                                                  BEQ         ea_Dn_AND_reg4_out           ;if equal go to output
00003216                          3233  
00003216  B4BC 00000A00           3234  ea_Dn_AND_reg5                                  CMP.L       #match_AND_reg5,D2             ;check to see if reg equal 5
0000321C  6600 0006               3235                                                  BNE         ea_Dn_AND_reg6               ;if not equal got check reg 6
00003220  6700 005A               3236                                                  BEQ         ea_Dn_AND_reg5_out           ;if equal go to output
00003224                          3237  
00003224  B4BC 00000C00           3238  ea_Dn_AND_reg6                                  CMP.L       #match_AND_reg6,D2             ;check to see if reg equal 6
0000322A  6600 0006               3239                                                  BNE         ea_Dn_AND_reg7               ;if not equal got check reg 7
0000322E  6700 0058               3240                                                  BEQ         ea_Dn_AND_reg6_out           ;if equal go to output         
00003232                          3241  
00003232  B4BC 00000E00           3242  ea_Dn_AND_reg7                                  CMP.L       #match_AND_reg7,D2             ;check to see if reg equal 7
00003238  6700 005A               3243                                                  BEQ         ea_Dn_AND_reg7_out           ;if equal go to output
0000323C  6600 0424               3244                                                  BNE         ERROR                          ;if not equal to an addresssing mode, pritn error
00003240                          3245                                  
00003240                          3246  
00003240                          3247  ;--------------------Data Output-----------------------
00003240  227C 00008965           3248  ea_Dn_AND_reg0_out                              MOVE.L          #ea_D0,A1                        ;load string constant into A1
00003246  4CDF 7CBE               3249                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000324A  4E75                    3250                                                  RTS
0000324C                          3251                                              
0000324C  227C 00008968           3252  ea_Dn_AND_reg1_out                              MOVE.L          #ea_D1,A1                       ;load string constant into A1
00003252  4CDF 7CBE               3253                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003256  4E75                    3254                                                  RTS
00003258                          3255                                              
00003258  227C 0000896B           3256  ea_Dn_AND_reg2_out                              MOVE.L          #ea_D2,A1                       ;load string constant into A1
0000325E  4CDF 7CBE               3257                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003262  4E75                    3258                                                  RTS
00003264                          3259                                              
00003264  227C 0000896E           3260  ea_Dn_AND_reg3_out                              MOVE.L          #ea_D3,A1                       ;load string constant into A1
0000326A  4CDF 7CBE               3261                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000326E  4E75                    3262                                                  RTS
00003270                          3263                                              
00003270  227C 00008971           3264  ea_Dn_AND_reg4_out                              MOVE.L          #ea_D4,A1                       ;load string constant into A1
00003276  4CDF 7CBE               3265                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000327A  4E75                    3266                                                  RTS
0000327C                          3267                                              
0000327C  227C 00008974           3268  ea_Dn_AND_reg5_out                              MOVE.L          #ea_D5,A1                       ;load string constant into A1
00003282  4CDF 7CBE               3269                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003286  4E75                    3270                                                  RTS
00003288                          3271                                              
00003288  227C 00008977           3272  ea_Dn_AND_reg6_out                              MOVE.L          #ea_D6,A1                       ;load string constant into A1
0000328E  4CDF 7CBE               3273                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003292  4E75                    3274                                                  RTS
00003294                          3275                                              
00003294  227C 0000897A           3276  ea_Dn_AND_reg7_out                              MOVE.L          #ea_D7,A1                       ;load string constant into A1
0000329A  4CDF 7CBE               3277                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000329E  4E75                    3278                                                  RTS             
000032A0                          3279                                              
000032A0                          3280                      
000032A0                          3281  
000032A0                          3282  
000032A0                          3283  
000032A0                          3284  
000032A0                          3285  
000032A0                          3286  
000032A0                          3287  
000032A0                          3288  
000032A0                          3289  
000032A0                          3290  
000032A0                          3291  
000032A0                          3292  
000032A0                          3293  
000032A0                          3294  
000032A0                          3295  
000032A0                          3296  
000032A0                          3297  
000032A0                          3298  
000032A0                          3299  
000032A0                          3300  
000032A0                          3301  
000032A0                          3302  
000032A0                          3303  
000032A0                          3304  
000032A0                          3305  
000032A0                          3306  
000032A0                          3307  
000032A0                          3308  
000032A0                          3309  
000032A0                          3310  
000032A0                          3311                          
000032A0                          3312  ;------------------------------------------------------------------------------------------------------------------------------------------
000032A0                          3313  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
000032A0                          3314  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000032A0  4282                    3315  AND_Dn_ea                                       CLR.L       D2                                ;clear D2 
000032A2  C4BC 00000E00           3316                                                  AND.L       #mask_AND_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
000032A8                          3317                                                  
000032A8  B4BC 00000000           3318  Dn_ea_AND_reg0                                  CMP.L       #match_AND_reg0,D2                  ;check to see if reg equal 0
000032AE  6600 0006               3319                                                  BNE         Dn_ea_AND_reg1                  ;if not equal got check reg 1
000032B2  6700 0064               3320                                                  BEQ         Dn_ea_AND_reg0_out              ;if equal go to output
000032B6                          3321                                                  
000032B6  B4BC 00000200           3322  Dn_ea_AND_reg1                                  CMP.L       #match_AND_reg1,D2                  ;check to see if reg equal 1
000032BC  6600 0006               3323                                                  BNE         Dn_ea_AND_reg2                  ;if not equal got check reg 2
000032C0  6700 0062               3324                                                  BEQ         Dn_ea_AND_reg1_out              ;if equal go to output
000032C4                          3325  
000032C4  B4BC 00000400           3326  Dn_ea_AND_reg2                                  CMP.L       #match_AND_reg2,D2                  ;check to see if reg equal 2
000032CA  6600 0006               3327                                                  BNE         Dn_ea_AND_reg3                  ;if not equal got check reg 3
000032CE  6700 0060               3328                                                  BEQ         Dn_ea_AND_reg2_out              ;if equal go to output
000032D2                          3329  
000032D2  B4BC 00000600           3330  Dn_ea_AND_reg3                                  CMP.L       #match_AND_reg3,D2                  ;check to see if reg equal 3
000032D8  6600 0006               3331                                                  BNE         Dn_ea_AND_reg4                  ;if not equal got check reg 4
000032DC  6700 005E               3332                                                  BEQ         Dn_ea_AND_reg3_out              ;if equal go to output
000032E0                          3333                                                  
000032E0  B4BC 00000800           3334  Dn_ea_AND_reg4                                  CMP.L       #match_AND_reg4,D2                  ;check to see if reg equal 4
000032E6  6600 0006               3335                                                  BNE         Dn_ea_AND_reg5                  ;if not equal got check reg 5
000032EA  6700 005C               3336                                                  BEQ         Dn_ea_AND_reg4_out              ;if equal go to output
000032EE                          3337  
000032EE  B4BC 00000A00           3338  Dn_ea_AND_reg5                                  CMP.L       #match_AND_reg5,D2                  ;check to see if reg equal 5
000032F4  6600 0006               3339                                                  BNE         Dn_ea_AND_reg6                  ;if not equal got check reg 6
000032F8  6700 005A               3340                                                  BEQ         Dn_ea_AND_reg5_out              ;if equal go to output
000032FC                          3341  
000032FC  B4BC 00000C00           3342  Dn_ea_AND_reg6                                  CMP.L       #match_AND_reg6,D2                  ;check to see if reg equal 6
00003302  6600 0006               3343                                                  BNE         Dn_ea_AND_reg7                  ;if not equal got check reg 7
00003306  6700 0058               3344                                                  BEQ         Dn_ea_AND_reg6_out              ;if equal go to output          
0000330A                          3345  
0000330A  B4BC 00000E00           3346  Dn_ea_AND_reg7                                  CMP.L       #match_AND_reg7,D2                  ;check to see if reg equal 7
00003310  6700 005A               3347                                                  BEQ         Dn_ea_AND_reg7_out              ;if equal go to output
00003314  6600 034C               3348                                                  BNE          ERROR                                ;if not equal to an addresssing mode, pritn error
00003318                          3349                                  
00003318                          3350  
00003318                          3351  ;--------------------Data Output-----------------------
00003318  227C 00008965           3352  Dn_ea_AND_reg0_out               MOVE.L         #ea_D0,A1                                          ;load string constant into A1
0000331E  4EB9 00003378           3353                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003324                          3354                                              
00003324  227C 00008968           3355  Dn_ea_AND_reg1_out               MOVE.L         #ea_D1,A1                                       ;load string constant into A1
0000332A  4EB9 00003378           3356                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003330                          3357                                              
00003330  227C 0000896B           3358  Dn_ea_AND_reg2_out               MOVE.L         #ea_D2,A1                                       ;load string constant into A1
00003336  4EB9 00003378           3359                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
0000333C                          3360                                              
0000333C  227C 0000896E           3361  Dn_ea_AND_reg3_out               MOVE.L         #ea_D3,A1                                           ;load string constant into A1
00003342  4EB9 00003378           3362                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003348                          3363                                              
00003348  227C 00008971           3364  Dn_ea_AND_reg4_out               MOVE.L         #ea_D4,A1                                           ;load string constant into A1
0000334E  4EB9 00003378           3365                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003354                          3366                                              
00003354  227C 00008974           3367  Dn_ea_AND_reg5_out               MOVE.L         #ea_D5,A1                                           ;load string constant into A1
0000335A  4EB9 00003378           3368                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003360                          3369                                              
00003360  227C 00008977           3370  Dn_ea_AND_reg6_out               MOVE.L         #ea_D6,A1                                           ;load string constant into A1
00003366  4EB9 00003378           3371                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
0000336C                          3372                                              
0000336C  227C 0000897A           3373  Dn_ea_AND_reg7_out               MOVE.L         #ea_D7,A1                                           ;load string constant into A1
00003372  4EB9 00003378           3374                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003378                          3375                                              
00003378                          3376  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00003378  4241                    3377  AND_determine_second_operand         CLR               D1                                            ;clear D1 to load new mask                                
0000337A  C2BC 00000038           3378                                   AND.L             #mask_AND_ea_mode,D1                        ;move the mask to D1
00003380                          3379  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00003380  B2BC 00000010           3380  Dn_ea_add_reg_indir              CMP.L             #match_AND_An_indir,D1                      ;check to see if mode is add reg indir
00003386  6600 0006               3381                                   BNE               Dn_ea_add_reg_indir_predec                          ;if not, go check add reg indir predec 
0000338A  6700 0048               3382                                   BEQ               Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
0000338E                          3383             
0000338E  B2BC 00000020           3384  Dn_ea_add_reg_indir_predec       CMP.L             #match_AND_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00003394  6600 0006               3385                                   BNE               Dn_ea_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00003398  6700 01DA               3386                                   BEQ               Dn_ea_An_indir_predec                               ;if equal go figure out the register
0000339C                          3387                        
0000339C  B2BC 00000018           3388  Dn_ea_add_reg_indir_postinc      CMP.L             #match_AND_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
000033A2  6600 0006               3389                                   BNE               Dn_ea_abs_add_word                                  ;if not go check abs add word
000033A6  6700 00FC               3390                                   BEQ               Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
000033AA                          3391  
000033AA  C4BC 0000003F           3392  Dn_ea_abs_add_word               AND.L             #mask_AND_abs_add,D2                        ;load mask to determine if abs add word or long
000033B0                          3393                                   
000033B0  B4BC 00000038           3394                                   CMP.L             #match_AND_abs_add_word,D2                  ;check if abs add word
000033B6  2A18                    3395                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000033B8  6600 0006               3396                                   BNE               Dn_ea_abs_add_long                                  ;if not go check abs add long
000033BC  6700 0286               3397                                   BEQ               Dn_ea_abs_add_word_out                              ;if equal go to output
000033C0                          3398    
000033C0  B4BC 00000039           3399  Dn_ea_abs_add_long               CMP.L             #match_AND_abs_add_long,D2                  ;check to see if abs add long
000033C6  6700 028A               3400                                   BEQ               Dn_ea_abs_add_long_out                              ;if equal go to output
000033CA  6600 0296               3401                                   BNE               ERROR                                         ;if not equal go to error mesage AND routine
000033CE                          3402  
000033CE                          3403  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000033CE                          3404                                   
000033CE  C4BC 0000003F           3405                                   AND.L              #mask_AND_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
000033D4                          3406  ;------------------Address Register Indirect-----------------------
000033D4  B4BC 00000010           3407  Dn_ea_An_indir_reg               CMP.L          #match_AND_An_indir_r0,D2              ;check reg is equal to 0
000033DA  6600 0006               3408                                   BNE             Dn_ea_An_indir_reg1                           ;if not try reg 1
000033DE  6700 0064               3409                                   BEQ             Dn_ea_An_indir_reg0_out                       ;if equal go to output ANDroutine
000033E2                          3410  
000033E2  B4BC 00000011           3411  Dn_ea_An_indir_reg1              CMP.L           #match_AND_An_indir_r1,D2              ;check reg is equal to 1
000033E8  6600 0006               3412                                   BNE             Dn_ea_An_indir_reg2                           ;if not try reg 2
000033EC  6700 0062               3413                                   BEQ             Dn_ea_An_indir_reg1_out                       ;if equal go to output ANDroutine
000033F0                          3414  
000033F0  B4BC 00000012           3415  Dn_ea_An_indir_reg2              CMP.L           #match_AND_An_indir_r2,D2              ;check reg is equal to 2
000033F6  6600 0006               3416                                   BNE             Dn_ea_An_indir_reg3                           ;if not try reg 3
000033FA  6700 0060               3417                                   BEQ             Dn_ea_An_indir_reg2_out                       ;if equal go to output ANDroutine
000033FE                          3418  
000033FE  B4BC 00000013           3419  Dn_ea_An_indir_reg3              CMP.L           #match_AND_An_indir_r3,D2              ;check reg is equal to 3
00003404  6600 0006               3420                                   BNE             Dn_ea_An_indir_reg4                           ;if not try reg 4
00003408  6700 005E               3421                                   BEQ             Dn_ea_An_indir_reg3_out                       ;if equal go to output ANDroutine
0000340C                          3422      
0000340C  B4BC 00000014           3423  Dn_ea_An_indir_reg4              CMP.L           #match_AND_An_indir_r4,D2              ;check reg is equal to 4
00003412  6600 0006               3424                                   BNE             Dn_ea_An_indir_reg5                           ;if not try reg 5
00003416  6700 005C               3425                                   BEQ             Dn_ea_An_indir_reg4_out                       ;if equal go to output ANDroutine
0000341A                          3426          
0000341A  B4BC 00000015           3427  Dn_ea_An_indir_reg5              CMP.L           #match_AND_An_indir_r5,D2              ;check reg is equal to 5
00003420  6600 0006               3428                                   BNE             Dn_ea_An_indir_reg6                           ;if not try reg 6
00003424  6700 005A               3429                                   BEQ             Dn_ea_An_indir_reg5_out                       ;if equal go to output ANDroutine
00003428                          3430  
00003428  B4BC 00000016           3431  Dn_ea_An_indir_reg6              CMP.L           #match_AND_An_indir_r6,D2              ;check reg is equal to 6
0000342E  6600 0006               3432                                   BNE             Dn_ea_An_indir_reg7                           ;if not try reg 7
00003432  6700 0058               3433                                   BEQ             Dn_ea_An_indir_reg6_out                       ;if equal go to output ANDroutine
00003436                          3434  
00003436  B4BC 00000017           3435  Dn_ea_An_indir_reg7              CMP.L           #match_AND_An_indir_r7,D2              ;check reg is equal to 7
0000343C  6700 005A               3436                                   BEQ             Dn_ea_An_indir_reg7_out                       ;if equal go to output ANDroutine
00003440  6600 0220               3437                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00003444                          3438  
00003444                          3439  ;--------------------Address Register Indirect Output-----------------------
00003444  227C 000089A5           3440  Dn_ea_An_indir_reg0_out         MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
0000344A  4CDF 7CBE               3441                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000344E  4E75                    3442                                   RTS
00003450                          3443  
00003450  227C 000089AA           3444  Dn_ea_An_indir_reg1_out         MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00003456  4CDF 7CBE               3445                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000345A  4E75                    3446                                   RTS
0000345C                          3447  
0000345C  227C 000089AF           3448  Dn_ea_An_indir_reg2_out         MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00003462  4CDF 7CBE               3449                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003466  4E75                    3450                                   RTS
00003468                          3451  
00003468  227C 000089B4           3452  Dn_ea_An_indir_reg3_out         MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
0000346E  4CDF 7CBE               3453                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003472  4E75                    3454                                   RTS
00003474                          3455  
00003474  227C 000089B9           3456  Dn_ea_An_indir_reg4_out         MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
0000347A  4CDF 7CBE               3457                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000347E  4E75                    3458                                   RTS
00003480                          3459  
00003480  227C 000089BE           3460  Dn_ea_An_indir_reg5_out         MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00003486  4CDF 7CBE               3461                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000348A  4E75                    3462                                   RTS
0000348C                          3463  
0000348C  227C 000089C3           3464  Dn_ea_An_indir_reg6_out         MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00003492  4CDF 7CBE               3465                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003496  4E75                    3466                                   RTS
00003498                          3467                                          
00003498  227C 000089C8           3468  Dn_ea_An_indir_reg7_out         MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
0000349E  4CDF 7CBE               3469                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000034A2  4E75                    3470                                   RTS
000034A4                          3471  
000034A4                          3472  ;------------------Address Register Indirect with Post Increment-----------------------
000034A4  B4BC 00000018           3473  Dn_ea_An_indir_postinc_reg                  CMP.L      #match_AND_An_indir_postinc_r0,D2        ;check reg is equal to 0
000034AA  6600 0006               3474                                              BNE        Dn_ea_An_indir_postinc_reg1                      ;if not try reg 1
000034AE  6700 0064               3475                                              BEQ        Dn_ea_An_indir_postinc_reg0_out                  ;if equal go to output ANDroutine
000034B2                          3476  
000034B2  B4BC 00000019           3477  Dn_ea_An_indir_postinc_reg1                 CMP.L      #match_AND_An_indir_postinc_r1,D2        ;check reg is equal to 1
000034B8  6600 0006               3478                                              BNE        Dn_ea_An_indir_postinc_reg2                      ;if not try reg 2
000034BC  6700 0062               3479                                              BEQ        Dn_ea_An_indir_postinc_reg1_out                  ;if equal go to output ANDroutine
000034C0                          3480  
000034C0  B4BC 0000001A           3481  Dn_ea_An_indir_postinc_reg2                 CMP.L      #match_AND_An_indir_postinc_r2,D2        ;check reg is equal to 2
000034C6  6600 0006               3482                                              BNE        Dn_ea_An_indir_postinc_reg3                      ;if not try reg 3
000034CA  6700 0060               3483                                              BEQ        Dn_ea_An_indir_postinc_reg2_out                  ;if equal go to output ANDroutine
000034CE                          3484  
000034CE  B4BC 0000001B           3485  Dn_ea_An_indir_postinc_reg3                 CMP.L      #match_AND_An_indir_postinc_r3,D2        ;check reg is equal to 3
000034D4  6600 0006               3486                                              BNE        Dn_ea_An_indir_postinc_reg4                      ;if not try reg 4
000034D8  6700 005E               3487                                              BEQ        Dn_ea_An_indir_postinc_reg3_out                  ;if equal go to output ANDroutine
000034DC                          3488   
000034DC  B4BC 0000001C           3489  Dn_ea_An_indir_postinc_reg4                 CMP.L      #match_AND_An_indir_postinc_r4,D2        ;check reg is equal to 4
000034E2  6600 0006               3490                                              BNE        Dn_ea_An_indir_postinc_reg5                      ;if not try reg 5
000034E6  6700 005C               3491                                              BEQ        Dn_ea_An_indir_postinc_reg4_out                  ;if equal go to output ANDroutine
000034EA                          3492  
000034EA  B4BC 0000001D           3493  Dn_ea_An_indir_postinc_reg5                 CMP.L      #match_AND_An_indir_postinc_r5,D2        ;check reg is equal to 5
000034F0  6600 0006               3494                                              BNE        Dn_ea_An_indir_postinc_reg6                      ;if not try reg 6
000034F4  6700 005A               3495                                              BEQ        Dn_ea_An_indir_postinc_reg5_out                  ;if equal go to output ANDroutine
000034F8                          3496  
000034F8  B4BC 0000001E           3497  Dn_ea_An_indir_postinc_reg6                 CMP.L      #match_AND_An_indir_postinc_r6,D2         ;check reg is equal to 6
000034FE  6600 0006               3498                                              BNE        Dn_ea_An_indir_postinc_reg7                        ;if not try reg 7
00003502  6700 0058               3499                                              BEQ        Dn_ea_An_indir_postinc_reg6_out                    ;if equal go to output ANDroutine
00003506                          3500  
00003506  B4BC 0000001F           3501  Dn_ea_An_indir_postinc_reg7                 CMP.L      #match_AND_An_indir_postinc_r7,D2         ;check reg is equal to 7
0000350C  6700 005A               3502                                              BEQ        Dn_ea_An_indir_postinc_reg7_out                    ;if equal go to output ANDroutine
00003510  6600 0150               3503                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
00003514                          3504  
00003514                          3505  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00003514  227C 000089CD           3506  Dn_ea_An_indir_postinc_reg0_out             MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
0000351A  4CDF 7CBE               3507                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000351E  4E75                    3508                                          RTS
00003520                          3509  
00003520  227C 000089D3           3510  Dn_ea_An_indir_postinc_reg1_out             MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00003526  4CDF 7CBE               3511                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000352A  4E75                    3512                                          RTS
0000352C                          3513  
0000352C  227C 000089D9           3514  Dn_ea_An_indir_postinc_reg2_out             MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00003532  4CDF 7CBE               3515                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003536  4E75                    3516                                          RTS
00003538                          3517  
00003538  227C 000089DF           3518  Dn_ea_An_indir_postinc_reg3_out             MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
0000353E  4CDF 7CBE               3519                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003542  4E75                    3520                                          RTS
00003544                          3521  
00003544  227C 000089E5           3522  Dn_ea_An_indir_postinc_reg4_out             MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
0000354A  4CDF 7CBE               3523                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000354E  4E75                    3524                                          RTS
00003550                          3525  
00003550  227C 000089EB           3526  Dn_ea_An_indir_postinc_reg5_out             MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00003556  4CDF 7CBE               3527                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000355A  4E75                    3528                                          RTS
0000355C                          3529  
0000355C  227C 000089F1           3530  Dn_ea_An_indir_postinc_reg6_out             MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00003562  4CDF 7CBE               3531                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003566  4E75                    3532                                          RTS
00003568                          3533  
00003568  227C 000089F7           3534  Dn_ea_An_indir_postinc_reg7_out             MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
0000356E  4CDF 7CBE               3535                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003572  4E75                    3536                                          RTS
00003574                          3537  
00003574                          3538  ;------------------Address Register Indirect with Pre Decrement-----------------------
00003574  B4BC 00000020           3539  Dn_ea_An_indir_predec                       CMP.L      #match_AND_An_indir_predec_reg0,D2       ;check reg is equal to 0
0000357A  6600 0006               3540                                              BNE        Dn_ea_An_indir_predec_reg1                      ;if not try reg 1
0000357E  6700 0064               3541                                              BEQ        Dn_ea_An_indir_predec_reg0_out               ;if equal go to output ANDroutine
00003582                          3542  
00003582  B4BC 00000021           3543  Dn_ea_An_indir_predec_reg1                  CMP.L      #match_AND_An_indir_predec_reg1,D2       ;check reg is equal to 1
00003588  6600 0006               3544                                              BNE        Dn_ea_An_indir_predec_reg2                      ;if not try reg 2
0000358C  6700 0062               3545                                              BEQ        Dn_ea_An_indir_predec_reg1_out               ;if equal go to output ANDroutine
00003590                          3546  
00003590  B4BC 00000022           3547  Dn_ea_An_indir_predec_reg2                  CMP.L      #match_AND_An_indir_predec_reg2,D2       ;check reg is equal to 2
00003596  6600 0006               3548                                              BNE        Dn_ea_An_indir_predec_reg3                      ;if not try reg 3
0000359A  6700 0060               3549                                              BEQ        Dn_ea_An_indir_predec_reg2_out               ;if equal go to output ANDroutine
0000359E                          3550  
0000359E  B4BC 00000023           3551  Dn_ea_An_indir_predec_reg3                  CMP.L      #match_AND_An_indir_predec_reg3,D2       ;check reg is equal to 3
000035A4  6600 0006               3552                                              BNE        Dn_ea_An_indir_predec_reg4                      ;if not try reg 4
000035A8  6700 005E               3553                                              BEQ        Dn_ea_An_indir_predec_reg3_out               ;if equal go to output ANDroutine
000035AC                          3554  
000035AC  B4BC 00000024           3555  Dn_ea_An_indir_predec_reg4                  CMP.L      #match_AND_An_indir_predec_reg4,D2       ;check reg is equal to 4
000035B2  6600 0006               3556                                              BNE        Dn_ea_An_indir_predec_reg5                      ;if not try reg 5
000035B6  6700 005C               3557                                              BEQ        Dn_ea_An_indir_predec_reg4_out               ;if equal go to output ANDroutine
000035BA                          3558  
000035BA  B4BC 00000025           3559  Dn_ea_An_indir_predec_reg5                  CMP.L      #match_AND_An_indir_predec_reg5,D2       ;check reg is equal to 5
000035C0  6600 0006               3560                                              BNE        Dn_ea_An_indir_predec_reg6                     ;if not try reg 6
000035C4  6700 005A               3561                                              BEQ        Dn_ea_An_indir_predec_reg5_out               ;if equal go to output ANDroutine
000035C8                          3562  
000035C8  B4BC 00000026           3563  Dn_ea_An_indir_predec_reg6                  CMP.L      #match_AND_An_indir_predec_reg6,D2       ;check reg is equal to 6
000035CE  6600 0006               3564                                              BNE        Dn_ea_An_indir_predec_reg7                     ;if not try reg 7
000035D2  6700 0058               3565                                              BEQ        Dn_ea_An_indir_predec_reg6_out               ;if equal go to output ANDroutine
000035D6                          3566  
000035D6  B4BC 00000027           3567  Dn_ea_An_indir_predec_reg7                  CMP.L      #match_AND_An_indir_predec_reg7,D2       ;check reg is equal to 7
000035DC  6700 005A               3568                                              BEQ        Dn_ea_An_indir_predec_reg7_out               ;if equal go to output ANDroutine
000035E0  6600 0080               3569                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
000035E4                          3570  
000035E4                          3571  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000035E4  227C 000089FD           3572  Dn_ea_An_indir_predec_reg0_out             MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
000035EA  4CDF 7CBE               3573                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000035EE  4E75                    3574                                              RTS
000035F0                          3575                                              
000035F0  227C 00008A03           3576  Dn_ea_An_indir_predec_reg1_out             MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
000035F6  4CDF 7CBE               3577                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000035FA  4E75                    3578                                              RTS
000035FC                          3579  
000035FC  227C 00008A09           3580  Dn_ea_An_indir_predec_reg2_out             MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00003602  4CDF 7CBE               3581                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003606  4E75                    3582                                              RTS
00003608                          3583  
00003608  227C 00008A0F           3584  Dn_ea_An_indir_predec_reg3_out             MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
0000360E  4CDF 7CBE               3585                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003612  4E75                    3586                                              RTS
00003614                          3587  
00003614  227C 00008A15           3588  Dn_ea_An_indir_predec_reg4_out             MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
0000361A  4CDF 7CBE               3589                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000361E  4E75                    3590                                              RTS
00003620                          3591  
00003620  227C 00008A1B           3592  Dn_ea_An_indir_predec_reg5_out             MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00003626  4CDF 7CBE               3593                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000362A  4E75                    3594                                              RTS
0000362C                          3595  
0000362C  227C 00008A21           3596  Dn_ea_An_indir_predec_reg6_out             MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00003632  4CDF 7CBE               3597                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003636  4E75                    3598                                              RTS
00003638                          3599  
00003638  227C 00008A27           3600  Dn_ea_An_indir_predec_reg7_out             MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
0000363E  4CDF 7CBE               3601                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003642  4E75                    3602                                              RTS
00003644                          3603                                              
00003644                          3604  ;------------------Absolute Addressing Output-----------------------
00003644  22FC 00008A37           3605  Dn_ea_abs_add_word_out                       MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000364A  22C5                    3606                                        MOVE.L      D5,(A1)+                           ;load address                  
0000364C  4CDF 7CBE               3607                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003650  4E75                    3608                                        RTS                                            :return to ANDroutine
00003652                          3609                                             
00003652                          3610  
00003652  2A18                    3611  Dn_ea_abs_add_long_out                       MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00003654  22FC 00008A37           3612                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000365A  22C5                    3613                                        MOVE.L      D5,(A1)+                           ;load address                  
0000365C  4CDF 7CBE               3614                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003660  4E75                    3615                                        RTS                                            :return to ANDroutine                                                                             
00003662                          3616  ;----------------------Error Handling----------------------------------------
00003662  43F9 00008951           3617  ERROR                                           LEA     ERROR_MESSAGE,A1                                          ;load error messge into A3
00003668  4CDF 7CBE               3618                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000366C  4E75                    3619                                                  RTS
0000366E                          3620  
0000366E  =000001C0               3621  mask_opmode                          EQU         $01C0                   ;mask for the opmode to determine operand order
0000366E                          3622  
0000366E  =00000038               3623  mask_AND_ea_mode                    EQU         $0038
0000366E  =0000003F               3624  mask_AND_abs_add                    EQU         $003F
0000366E  =0000003F               3625  mask_AND_ea_reg_and_mode            EQU         $003F
0000366E  =00000E00               3626  mask_AND_An_reg                 EQU         $0E00
0000366E                          3627  
0000366E                          3628  
0000366E  =00000100               3629  match_AND_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
0000366E  =00000140               3630  match_AND_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
0000366E  =00000180               3631  match_AND_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
0000366E                          3632  
0000366E  =00000000               3633  match_AND_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
0000366E  =00000040               3634  match_AND_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
0000366E  =00000080               3635  match_AND_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
0000366E                          3636  
0000366E                          3637  
0000366E                          3638  
0000366E  =00000000               3639  match_AND_Dn                        EQU         $0000
0000366E  =00000010               3640  match_AND_An_indir                  EQU         $0010
0000366E  =00000020               3641  match_AND_An_indir_predec           EQU         $0020
0000366E  =00000018               3642  match_AND_An_indir_postinc          EQU         $0018
0000366E  =00000038               3643  match_AND_abs_add_word              EQU         $0038
0000366E  =00000039               3644  match_AND_abs_add_long              EQU         $0039
0000366E                          3645  
0000366E  =00000000               3646  match_AND_D0                            EQU         $0000
0000366E  =00000001               3647  match_AND_D1                            EQU         $0001
0000366E  =00000002               3648  match_AND_D2                            EQU         $0002
0000366E  =00000003               3649  match_AND_D3                            EQU         $0003
0000366E  =00000004               3650  match_AND_D4                            EQU         $0004
0000366E  =00000005               3651  match_AND_D5                            EQU         $0005
0000366E  =00000006               3652  match_AND_D6                            EQU         $0006
0000366E  =00000007               3653  match_AND_D7                            EQU         $0007
0000366E                          3654  
0000366E  =00000008               3655  match_AND_A0                            EQU         $0008
0000366E  =00000009               3656  match_AND_A1                            EQU         $0009
0000366E  =0000000A               3657  match_AND_A2                            EQU         $000A
0000366E  =0000000B               3658  match_AND_A3                            EQU         $000B
0000366E  =0000000C               3659  match_AND_A4                            EQU         $000C
0000366E  =0000000D               3660  match_AND_A5                            EQU         $000D
0000366E  =0000000E               3661  match_AND_A6                            EQU         $000E
0000366E  =0000000F               3662  match_AND_A7                            EQU         $000F
0000366E                          3663  
0000366E  =00000010               3664  match_AND_An_indir_r0                   EQU         $0010
0000366E  =00000011               3665  match_AND_An_indir_r1                   EQU         $0011
0000366E  =00000012               3666  match_AND_An_indir_r2                   EQU         $0012
0000366E  =00000013               3667  match_AND_An_indir_r3                   EQU         $0013
0000366E  =00000014               3668  match_AND_An_indir_r4                   EQU         $0014
0000366E  =00000015               3669  match_AND_An_indir_r5                   EQU         $0015
0000366E  =00000016               3670  match_AND_An_indir_r6                   EQU         $0016
0000366E  =00000017               3671  match_AND_An_indir_r7                   EQU         $0017
0000366E                          3672  
0000366E  =00000018               3673  match_AND_An_indir_postinc_r0       EQU         $0018
0000366E  =00000019               3674  match_AND_An_indir_postinc_r1       EQU         $0019
0000366E  =0000001A               3675  match_AND_An_indir_postinc_r2       EQU         $001A
0000366E  =0000001B               3676  match_AND_An_indir_postinc_r3       EQU         $001B
0000366E  =0000001C               3677  match_AND_An_indir_postinc_r4       EQU         $001C
0000366E  =0000001D               3678  match_AND_An_indir_postinc_r5       EQU         $001D
0000366E  =0000001E               3679  match_AND_An_indir_postinc_r6       EQU         $001E
0000366E  =0000001F               3680  match_AND_An_indir_postinc_r7       EQU         $001F
0000366E                          3681  
0000366E  =00000020               3682  match_AND_An_indir_predec_reg0          EQU         $0020
0000366E  =00000021               3683  match_AND_An_indir_predec_reg1          EQU         $0021
0000366E  =00000022               3684  match_AND_An_indir_predec_reg2          EQU         $0022
0000366E  =00000023               3685  match_AND_An_indir_predec_reg3          EQU         $0023
0000366E  =00000024               3686  match_AND_An_indir_predec_reg4          EQU         $0024
0000366E  =00000025               3687  match_AND_An_indir_predec_reg5          EQU         $0025
0000366E  =00000026               3688  match_AND_An_indir_predec_reg6          EQU         $0026
0000366E  =00000027               3689  match_AND_An_indir_predec_reg7          EQU         $0027
0000366E                          3690  
0000366E  =0000003C               3691  match_AND_imm_add                           EQU         $003C
0000366E  =000000FC               3692  match_AND_imm_add_word                      EQU         $00FC
0000366E  =000001FC               3693  match_AND_imm_add_long                      EQU         $01FC
0000366E                          3694  
0000366E  =00000000               3695  match_AND_reg0                          EQU         $0000
0000366E  =00000200               3696  match_AND_reg1                          EQU         $0200
0000366E  =00000400               3697  match_AND_reg2                          EQU         $0400
0000366E  =00000600               3698  match_AND_reg3                          EQU         $0600
0000366E  =00000800               3699  match_AND_reg4                          EQU         $0800
0000366E  =00000A00               3700  match_AND_reg5                          EQU         $0A00
0000366E  =00000C00               3701  match_AND_reg6                          EQU         $0C00
0000366E  =00000E00               3702  match_AND_reg7                          EQU         $0E00
0000366E                          3703  
0000366E                          3704  
0000366E                          3705  
0000366E                          3706  
0000366E                          3707  
0000366E                          3708  
0000366E                          3709  
0000366E                          3710  
0000366E                          3711  
0000366E                          3712  
0000366E                          3713  -------------------- end include --------------------
0000366E                          3714              INCLUDE 'ADDA Subroutine.x68'
0000366E  48E7 7D3E               3715  ADDA_sub                         MOVEM.L           D1-D5/D7/A2-A6, -(SP)                         ;preserve the registers, 
00003672  C2BC 00000038           3716                                   AND.L             #mask_ADDA_ea_mode,D1                         ;move the mask to D1
00003678                          3717  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00003678  B2BC 00000000           3718  ADDA_data_reg_dir                CMP.L             #match_ADDA_Dn,D1                             ;check to see if mode is data reg direct
0000367E  6600 0006               3719                                   BNE               ADDA_add_reg_dir                              ;if not, go check add reg dir
00003682  6700 006E               3720                                   BEQ               ADDA_Dn_reg                                   ;if equal go figure out the register
00003686                          3721  
00003686  B2BC 00000008           3722  ADDA_add_reg_dir                 CMP.L             #match_ADDA_An,D1                             ;check if mode is add reg direct
0000368C  6600 0006               3723                                   BNE               ADDA_add_reg_indir                            ;if not, go check add reg indir
00003690  6700 0130               3724                                   BEQ               ADDA_An_reg                                   ;if equal go figure out the reg
00003694                          3725   
00003694  B2BC 00000010           3726  ADDA_add_reg_indir               CMP.L             #match_ADDA_An_indir,D1                       ;check to see if mode is add reg indir
0000369A  6600 0006               3727                                   BNE               ADDA_add_reg_indir_predec                     ;if not, go check add reg indir predec 
0000369E  6700 01F2               3728                                   BEQ               ADDA_An_indir_reg                             ;if equal go figure out the register           
000036A2                          3729             
000036A2  B2BC 00000020           3730  ADDA_add_reg_indir_predec        CMP.L             #match_ADDA_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
000036A8  6600 0006               3731                                   BNE               ADDA_add_reg_indir_postinc                    ;if not go check add reg indir/predec
000036AC  6700 0384               3732                                   BEQ               ADDA_An_indir_predec                          ;if equal go figure out the register
000036B0                          3733                        
000036B0  B2BC 00000018           3734  ADDA_add_reg_indir_postinc       CMP.L             #match_ADDA_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
000036B6  6600 0006               3735                                   BNE               ADDA_abs_add_word                             ;if not go check abs add word
000036BA  6700 02A6               3736                                   BEQ               ADDA_An_indir_postinc_reg                     ;if equal go figure out the register
000036BE                          3737  
000036BE  C4BC 0000003F           3738  ADDA_abs_add_word                AND.L             #mask_ADDA_abs_add,D2                         ;load mask to determine if abs add word or long
000036C4                          3739                                   
000036C4  B4BC 00000038           3740                                   CMP.L             #match_ADDA_abs_add_word,D2                   ;check if abs add word
000036CA  2A18                    3741                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000036CC  6600 0006               3742                                   BNE               ADDA_abs_add_long                             ;if not go check abs add long
000036D0  6700 0430               3743                                   BEQ               ADDA_abs_add_word_out                         ;if equal go to output
000036D4                          3744    
000036D4  B4BC 00000039           3745  ADDA_abs_add_long                CMP.L             #match_ADDA_abs_add_long,D2                   ;check to see if abs add long
000036DA  6700 0434               3746                                   BEQ               ADDA_abs_add_long_out                         ;if equal go to output
000036DE                          3747                                   
000036DE  B2BC 0000003C           3748  ADDA_immediate_add               CMP.L             #match_ADDA_imm_add,D1                             ;check if immediate address
000036E4  6700 043A               3749                                   BEQ               ADDA_immediate_add_out                        ;if equal go to immediate add sub routine
000036E8  6600 FF78               3750                                   BNE               ERROR                                         ;if not equal go to error mesage sub routine
000036EC                          3751  
000036EC                          3752  
000036EC                          3753  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000036EC                          3754                                   
000036EC  C4BC 0000003F           3755                                   AND.L              #mask_ADDA_ea_reg_and_mode,D2                ;load the mask into D2 for the mode and the register
000036F2                          3756  ;-----------------------------------Data Register Direct--------------------------------
000036F2  B4BC 00000000           3757  ADDA_Dn_reg                      CMP.L              #match_ADDA_D0,D2                            ;check to see in the register is 0
000036F8  6600 0006               3758                                   BNE                ADDA_rD1                                     ;if not go check register 1
000036FC  6700 0064               3759                                   BEQ                ADDA_D0_out                                  ;if equal go to output subroutine
00003700                          3760  
00003700  B4BC 00000001           3761  ADDA_rD1                         CMP.L              #match_ADDA_D1,D2                            ;check to see in the register is 1
00003706  6600 0006               3762                                   BNE                ADDA_rD2                                     ;if not go check register 2
0000370A  6700 0062               3763                                   BEQ                ADDA_D1_out                                  ;if equal go to output subroutine
0000370E                          3764  
0000370E  B4BC 00000002           3765  ADDA_rD2                         CMP.L              #match_ADDA_D2,D2                            ;check to see in the register is 2
00003714  6600 0006               3766                                   BNE                ADDA_rD3                                     ;if not go check register 3
00003718  6700 0060               3767                                   BEQ                ADDA_D2_out                                  ;if equal go to output subroutine
0000371C                          3768  
0000371C  B4BC 00000003           3769  ADDA_rD3                         CMP.L              #match_ADDA_D3,D2                            ;check to see in the register is 3
00003722  6600 0006               3770                                   BNE                ADDA_rD4                                     ;if not go check register 4
00003726  6700 005E               3771                                   BEQ                ADDA_D3_out                                  ;if equal go to output subroutine
0000372A                          3772  
0000372A  B4BC 00000004           3773  ADDA_rD4                         CMP.L              #match_ADDA_D4,D2                            ;check to see in the register is 4
00003730  6600 0006               3774                                   BNE                ADDA_rD5                                     ;if not go check register 5
00003734  6700 005C               3775                                   BEQ                ADDA_D4_out                                  ;if equal go to output subroutine
00003738                          3776  
00003738  B4BC 00000005           3777  ADDA_rD5                         CMP.L              #match_ADDA_D5,D2                            ;check to see in the register is 5
0000373E  6600 0006               3778                                   BNE                ADDA_rD6                                     ;if not go check register 6
00003742  6700 005A               3779                                   BEQ                ADDA_D5_out                                  ;if equal go to output subroutine
00003746                          3780  
00003746  B4BC 00000006           3781  ADDA_rD6                         CMP.L              #match_ADDA_D6,D2                            ;check to see in the register is 6
0000374C  6600 0006               3782                                   BNE                ADDA_rD7                                     ;if not go check register 7
00003750  6700 0058               3783                                   BEQ                ADDA_D6_out                                  ;if equal go to output subroutine
00003754                          3784  
00003754  B4BC 00000007           3785  ADDA_rD7                         CMP.L              #match_ADDA_D7,D2                            ;check to see in the register is 7
0000375A  6700 005A               3786                                   BEQ                ADDA_D7_out                                  ;if equal go to output subroutine
0000375E  6600 FF02               3787                                   BNE                ERROR                                        ;if not equal, got to error message
00003762                          3788  
00003762                          3789  
00003762                          3790  ;--------------------Data Register Direct Output-----------------------
00003762  227C 00008965           3791  ADDA_D0_out                     MOVE.L              #ea_D0,A1                    ;load string constant into A1
00003768  4EB9 00003B50           3792                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000376E                          3793  
0000376E  227C 00008968           3794  ADDA_D1_out                     MOVE.L              #ea_D1,A1                    ;load string constant into A1
00003774  4EB9 00003B50           3795                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000377A                          3796  
0000377A                          3797  
0000377A  227C 0000896B           3798  ADDA_D2_out                     MOVE.L              #ea_D2,A1                    ;load string constant into A1
00003780  4EB9 00003B50           3799                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003786                          3800  
00003786  227C 0000896E           3801  ADDA_D3_out                     MOVE.L          #ea_D3,A1                    ;load string constant into A1
0000378C  4EB9 00003B50           3802                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003792                          3803  
00003792                          3804  
00003792  227C 00008971           3805  ADDA_D4_out                     MOVE.L          #ea_D4,A1                        ;load string constant into A1
00003798  4EB9 00003B50           3806                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000379E                          3807  
0000379E                          3808  
0000379E  227C 00008974           3809  ADDA_D5_out                     MOVE.L          #ea_D5,A1                    ;load string constant into A1
000037A4  4EB9 00003B50           3810                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037AA                          3811  
000037AA                          3812  
000037AA  227C 00008977           3813  ADDA_D6_out                     MOVE.L          #ea_D6,A1                    ;load string constant into A1
000037B0  4EB9 00003B50           3814                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037B6                          3815  
000037B6                          3816  
000037B6  227C 0000897A           3817  ADDA_D7_out                     MOVE.L          #ea_D7,A1                    ;load string constant into A1
000037BC  4EB9 00003B50           3818                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037C2                          3819  
000037C2                          3820  
000037C2                          3821  ;------------------Address Register Direct-----------------------
000037C2  B4BC 00000008           3822  ADDA_An_reg                      CMP.L           #match_ADDA_A0,D2                               ;check reg is equal to 0
000037C8  6600 0006               3823                                   BNE             ADDA_rA1                                        ;if not try reg 1
000037CC  6700 0134               3824                                   BEQ             ADDA_An_indir_reg0_out                          ;if equal go to output subroutine
000037D0                          3825  
000037D0  B4BC 00000009           3826  ADDA_rA1                         CMP.L           #match_ADDA_A1,D2                               ;check reg is equal to 1
000037D6  6600 0006               3827                                   BNE             ADDA_rA2                                        ;if not try reg 2
000037DA  6700 0132               3828                                   BEQ             ADDA_An_indir_reg1_out                          ;if equal go to output subroutine
000037DE                          3829  
000037DE  B4BC 0000000A           3830  ADDA_rA2                         CMP.L           #match_ADDA_A2,D2                               ;check reg is equal to 2
000037E4  6600 0006               3831                                   BNE             ADDA_rA3                                        ;if not try reg 3
000037E8  6700 0130               3832                                   BEQ             ADDA_An_indir_reg2_out                          ;if equal go to output subroutine
000037EC                          3833  
000037EC  B4BC 0000000B           3834  ADDA_rA3                         CMP.L           #match_ADDA_A3,D2                               ;check reg is equal to 3
000037F2  6600 0006               3835                                   BNE             ADDA_rA4                                        ;if not try reg 4
000037F6  6700 012E               3836                                   BEQ             ADDA_An_indir_reg3_out                          ;if equal go to output subroutine
000037FA                          3837  
000037FA  B4BC 0000000C           3838  ADDA_rA4                         CMP.L           #match_ADDA_A4,D2                               ;check reg is equal to 4
00003800  6600 0006               3839                                   BNE             ADDA_rA5                                        ;if not try reg 5
00003804  6700 012C               3840                                   BEQ             ADDA_An_indir_reg4_out                          ;if equal go to output subroutine
00003808                          3841              
00003808  B4BC 0000000D           3842  ADDA_rA5                         CMP.L           #match_ADDA_A5,D2                               ;check reg is equal to 5
0000380E  6600 0006               3843                                   BNE             ADDA_rA6                                        ;if not try reg 6
00003812  6700 012A               3844                                   BEQ             ADDA_An_indir_reg5_out                          ;if equal go to output subroutine
00003816                          3845  
00003816  B4BC 0000000E           3846  ADDA_rA6                         CMP.L           #match_ADDA_A6,D2                               ;check reg is equal to 6
0000381C  6600 0006               3847                                   BNE             ADDA_rA7                                        ;if not try reg 7
00003820  6700 0128               3848                                   BEQ             ADDA_An_indir_reg6_out                          ;if equal go to output subroutine
00003824                          3849  
00003824  B4BC 0000000F           3850  ADDA_rA7                         CMP.L           #match_ADDA_A7,D2                               ;check reg is equal to 7
0000382A  6700 012A               3851                                   BEQ             ADDA_An_indir_reg7_out                          ;if equal go to output subroutine
0000382E  6600 FE32               3852                                   BNE             ERROR                                           ;if not equal to an addresssing mode, pritn error
00003832                          3853  
00003832                          3854  
00003832                          3855  ;--------------------Address Register Direct Output-----------------------
00003832  227C 0000897D           3856  ADDA_A0_out                      MOVE.L              #ea_A0,A1                                       ;load string constant into A1
00003838  4EB9 00003B50           3857                                   JSR                ADDA_determine_second_op                         ;jump to subroutine to determine second operand
0000383E                          3858                                  
0000383E  227C 00008980           3859  ADDA_A1_out                      MOVE.L             #ea_A1,A1                                    ;load string constant into A1
00003844  4EB9 00003B50           3860                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000384A                          3861                                  
0000384A  227C 00008983           3862  ADDA_A2_out                      MOVE.L             #ea_A2,A1                                    ;load string constant into A1
00003850  4EB9 00003B50           3863                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003856                          3864                                  
00003856  227C 00008986           3865  ADDA_A3_out                      MOVE.L             #ea_A3,A1                                    ;load string constant into A1
0000385C  4EB9 00003B50           3866                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003862                          3867  
00003862  227C 00008989           3868  ADDA_A4_out                      MOVE.L             #ea_A4,A1                                    ;load string constant into A1
00003868  4EB9 00003B50           3869                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000386E                          3870  
0000386E  227C 0000898C           3871  ADDA_A5_out                      MOVE.L             #ea_A5,A1                                     ;load string constant into A1
00003874  4EB9 00003B50           3872                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000387A                          3873  
0000387A  227C 0000898F           3874  ADDA_A6_out                      MOVE.L             #ea_A6,A1                                    ;load string constant into A1
00003880  4EB9 00003B50           3875                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003886                          3876  
00003886  227C 00008992           3877  ADDA_A7_out                      MOVE.L             #ea_A7,A1                                    ;load string constant into A1
0000388C  4EB9 00003B50           3878                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003892                          3879  
00003892                          3880  
00003892                          3881  ;------------------Address Register Indirect-----------------------
00003892  B4BC 00000010           3882  ADDA_An_indir_reg                CMP.L              #match_ADDA_An_indir_r0,D2                   ;check reg is equal to 0
00003898  6600 0006               3883                                   BNE                ADDA_An_indir_reg1                           ;if not try reg 1
0000389C  6700 0064               3884                                   BEQ                ADDA_An_indir_reg0_out                       ;if equal go to output subroutine
000038A0                          3885  
000038A0  B4BC 00000011           3886  ADDA_An_indir_reg1               CMP.L              #match_ADDA_An_indir_r1,D2                   ;check reg is equal to 1
000038A6  6600 0006               3887                                   BNE                ADDA_An_indir_reg2                           ;if not try reg 2
000038AA  6700 0062               3888                                   BEQ                ADDA_An_indir_reg1_out                       ;if equal go to output subroutine
000038AE                          3889  
000038AE  B4BC 00000012           3890  ADDA_An_indir_reg2               CMP.L              #match_ADDA_An_indir_r2,D2                   ;check reg is equal to 2
000038B4  6600 0006               3891                                   BNE                ADDA_An_indir_reg3                           ;if not try reg 3
000038B8  6700 0060               3892                                   BEQ                ADDA_An_indir_reg2_out                       ;if equal go to output subroutine
000038BC                          3893  
000038BC  B4BC 00000013           3894  ADDA_An_indir_reg3               CMP.L              #match_ADDA_An_indir_r3,D2                   ;check reg is equal to 3
000038C2  6600 0006               3895                                   BNE                ADDA_An_indir_reg4                           ;if not try reg 4
000038C6  6700 005E               3896                                   BEQ                ADDA_An_indir_reg3_out                       ;if equal go to output subroutine
000038CA                          3897      
000038CA  B4BC 00000014           3898  ADDA_An_indir_reg4               CMP.L              #match_ADDA_An_indir_r4,D2                   ;check reg is equal to 4
000038D0  6600 0006               3899                                   BNE                ADDA_An_indir_reg5                           ;if not try reg 5
000038D4  6700 005C               3900                                   BEQ                ADDA_An_indir_reg4_out                       ;if equal go to output subroutine
000038D8                          3901          
000038D8  B4BC 00000015           3902  ADDA_An_indir_reg5               CMP.L              #match_ADDA_An_indir_r5,D2                   ;check reg is equal to 5
000038DE  6600 0006               3903                                   BNE                ADDA_An_indir_reg6                           ;if not try reg 6
000038E2  6700 005A               3904                                   BEQ                ADDA_An_indir_reg5_out                       ;if equal go to output subroutine
000038E6                          3905  
000038E6  B4BC 00000016           3906  ADDA_An_indir_reg6               CMP.L              #match_ADDA_An_indir_r6,D2                   ;check reg is equal to 6
000038EC  6600 0006               3907                                   BNE                ADDA_An_indir_reg7                           ;if not try reg 7
000038F0  6700 0058               3908                                   BEQ                ADDA_An_indir_reg6_out                       ;if equal go to output subroutine
000038F4                          3909  
000038F4  B4BC 00000017           3910  ADDA_An_indir_reg7               CMP.L              #match_ADDA_An_indir_r7,D2                   ;check reg is equal to 7
000038FA  6700 005A               3911                                   BEQ                ADDA_An_indir_reg7_out                       ;if equal go to output subroutine
000038FE  6600 FD62               3912                                   BNE                ERROR                                        ;if not equal to an addresssing mode, pritn error
00003902                          3913  
00003902                          3914  
00003902                          3915  ;--------------------Address Register Indirect Output-----------------------
00003902  227C 000089A5           3916  ADDA_An_indir_reg0_out           MOVE.L         #ea_indir_A0,A1                             ;load string constant into A1
00003908  4EB9 00003B50           3917                                   JSR            ADDA_determine_second_op                    ;jump to subroutine to determine second operand
0000390E                          3918  
0000390E  227C 000089AA           3919  ADDA_An_indir_reg1_out           MOVE.L         #ea_indir_A1,A1                             ;load string constant into A1
00003914  4EB9 00003B50           3920                                   JSR            ADDA_determine_second_op                    ;jump to subroutine to determine second operand
0000391A                          3921  
0000391A  227C 000089AF           3922  ADDA_An_indir_reg2_out           MOVE.L         #ea_indir_A2,A1                              ;load string constant into A1
00003920  4EB9 00003B50           3923                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003926                          3924  
00003926  227C 000089B4           3925  ADDA_An_indir_reg3_out           MOVE.L         #ea_indir_A3,A1                              ;load string constant into A1
0000392C  4EB9 00003B50           3926                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003932                          3927  
00003932  227C 000089B9           3928  ADDA_An_indir_reg4_out           MOVE.L         #ea_indir_A4,A1                            ;load string constant into A1
00003938  4EB9 00003B50           3929                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000393E                          3930  
0000393E  227C 000089BE           3931  ADDA_An_indir_reg5_out           MOVE.L         #ea_indir_A5,A1                             ;load string constant into A1
00003944  4EB9 00003B50           3932                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
0000394A                          3933  
0000394A  227C 000089C3           3934  ADDA_An_indir_reg6_out          MOVE.L          #ea_indir_A6,A1                             ;load string constant into A1
00003950  4EB9 00003B50           3935                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
00003956                          3936                                          
00003956  227C 000089C8           3937  ADDA_An_indir_reg7_out           MOVE.L         #ea_indir_A7,A1                             ;load string constant into A1
0000395C  4EB9 00003B50           3938                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
00003962                          3939  
00003962                          3940  
00003962                          3941  ;------------------Address Register Indirect with Post Increment-----------------------
00003962  B4BC 00000018           3942  ADDA_An_indir_postinc_reg        CMP.L              #match_ADDA_An_indir_postinc_reg0,D2         ;check reg is equal to 0
00003968  6600 0006               3943                                   BNE                ADDA_An_indir_postinc_reg1                   ;if not try reg 1
0000396C  6700 0064               3944                                   BEQ                ADDA_An_indir_postinc_reg0_out               ;if equal go to output subroutine
00003970                          3945  
00003970  B4BC 00000019           3946  ADDA_An_indir_postinc_reg1       CMP.L              #match_ADDA_An_indir_postinc_reg1,D2         ;check reg is equal to 1
00003976  6600 0006               3947                                   BNE            ADDA_An_indir_postinc_reg2                   ;if not try reg 2
0000397A  6700 0062               3948                                   BEQ            ADDA_An_indir_postinc_reg1_out               ;if equal go to output subroutine
0000397E                          3949  
0000397E  B4BC 0000001A           3950  ADDA_An_indir_postinc_reg2       CMP.L          #match_ADDA_An_indir_postinc_reg2,D2         ;check reg is equal to 2
00003984  6600 0006               3951                                   BNE            ADDA_An_indir_postinc_reg3                   ;if not try reg 3
00003988  6700 0060               3952                                   BEQ            ADDA_An_indir_postinc_reg2_out               ;if equal go to output subroutine
0000398C                          3953  
0000398C  B4BC 0000001B           3954  ADDA_An_indir_postinc_reg3       CMP.L          #match_ADDA_An_indir_postinc_reg3,D2         ;check reg is equal to 3
00003992  6600 0006               3955                                   BNE            ADDA_An_indir_postinc_reg4                   ;if not try reg 4
00003996  6700 005E               3956                                   BEQ            ADDA_An_indir_postinc_reg3_out               ;if equal go to output subroutine
0000399A                          3957   
0000399A  B4BC 0000001C           3958  ADDA_An_indir_postinc_reg4       CMP.L          #match_ADDA_An_indir_postinc_reg4,D2         ;check reg is equal to 4
000039A0  6600 0006               3959                                   BNE            ADDA_An_indir_postinc_reg5                   ;if not try reg 5
000039A4  6700 005C               3960                                   BEQ            ADDA_An_indir_postinc_reg4_out               ;if equal go to output subroutine
000039A8                          3961  
000039A8  B4BC 0000001D           3962  ADDA_An_indir_postinc_reg5       CMP.L          #match_ADDA_An_indir_postinc_reg5,D2         ;check reg is equal to 5
000039AE  6600 0006               3963                                   BNE            ADDA_An_indir_postinc_reg6                   ;if not try reg 6
000039B2  6700 005A               3964                                   BEQ            ADDA_An_indir_postinc_reg5_out               ;if equal go to output subroutine
000039B6                          3965  
000039B6  B4BC 0000001E           3966  ADDA_An_indir_postinc_reg6       CMP.L          #match_ADDA_An_indir_postinc_reg6,D2         ;check reg is equal to 6
000039BC  6600 0006               3967                                   BNE            ADDA_An_indir_postinc_reg7                   ;if not try reg 7
000039C0  6700 0058               3968                                   BEQ            ADDA_An_indir_postinc_reg6_out               ;if equal go to output subroutine
000039C4                          3969  
000039C4  B4BC 0000001F           3970  ADDA_An_indir_postinc_reg7       CMP.L          #match_ADDA_An_indir_postinc_reg7,D2         ;check reg is equal to 7
000039CA  6700 005A               3971                                   BEQ            ADDA_An_indir_postinc_reg7_out               ;if equal go to output subroutine
000039CE  6600 FC92               3972                                   BNE                ERROR                                        ;if not equal to an addresssing mode, pritn error
000039D2                          3973  
000039D2                          3974  
000039D2                          3975  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000039D2  227C 000089CD           3976  ADDA_An_indir_postinc_reg0_out        MOVE.L            #ea_indir_postinc_A0,A1              ;load string constant into A1
000039D8  4EB9 00003B50           3977                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
000039DE                          3978  
000039DE  227C 000089D3           3979  ADDA_An_indir_postinc_reg1_out        MOVE.L            #ea_indir_postinc_A1,A1              ;load string constant into A1
000039E4  4EB9 00003B50           3980                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
000039EA                          3981  
000039EA  227C 000089D9           3982  ADDA_An_indir_postinc_reg2_out        MOVE.L            #ea_indir_postinc_A2,A1              ;load string constant into A1
000039F0  4EB9 00003B50           3983                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
000039F6                          3984  
000039F6  227C 000089DF           3985  ADDA_An_indir_postinc_reg3_out        MOVE.L            #ea_indir_postinc_A3,A1              ;load string constant into A1
000039FC  4EB9 00003B50           3986                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003A02                          3987  
00003A02  227C 000089E5           3988  ADDA_An_indir_postinc_reg4_out        MOVE.L            #ea_indir_postinc_A4,A1          ;load string constant into A1
00003A08  4EB9 00003B50           3989                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003A0E                          3990  
00003A0E  227C 000089EB           3991  ADDA_An_indir_postinc_reg5_out        MOVE.L            #ea_indir_postinc_A5,A1              ;load string constant into A1
00003A14  4EB9 00003B50           3992                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003A1A                          3993  
00003A1A  227C 000089F1           3994  ADDA_An_indir_postinc_reg6_out        MOVE.L            #ea_indir_postinc_A6,A1              ;load string constant into A1
00003A20  4EB9 00003B50           3995                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003A26                          3996  
00003A26  227C 000089F7           3997  ADDA_An_indir_postinc_reg7_out        MOVE.L            #ea_indir_postinc_A7,A1              ;load string constant into A1
00003A2C  4EB9 00003B50           3998                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003A32                          3999  
00003A32                          4000  
00003A32                          4001  ;------------------Address Register Indirect with Pre Decrement-----------------------
00003A32  B4BC 00000020           4002  ADDA_An_indir_predec                  CMP.L             #match_ADDA_An_indir_predec_reg0,D2        ;check reg is equal to 0
00003A38  6600 0006               4003                                        BNE               ADDA_An_indir_predec_reg1                  ;if not try reg 1
00003A3C  6700 0064               4004                                        BEQ               ADDA_An_indir_predec_reg0_out              ;if equal go to output subroutine
00003A40                          4005  
00003A40  B4BC 00000021           4006  ADDA_An_indir_predec_reg1             CMP.L             #match_ADDA_An_indir_predec_reg1,D2        ;check reg is equal to 1
00003A46  6600 0006               4007                                        BNE               ADDA_An_indir_predec_reg2                  ;if not try reg 2
00003A4A  6700 0062               4008                                        BEQ               ADDA_An_indir_predec_reg1_out              ;if equal go to output subroutine
00003A4E                          4009  
00003A4E  B4BC 00000022           4010  ADDA_An_indir_predec_reg2             CMP.L             #match_ADDA_An_indir_predec_reg2,D2        ;check reg is equal to 2
00003A54  6600 0006               4011                                        BNE               ADDA_An_indir_predec_reg3                  ;if not try reg 3
00003A58  6700 0060               4012                                        BEQ               ADDA_An_indir_predec_reg2_out              ;if equal go to output subroutine
00003A5C                          4013  
00003A5C  B4BC 00000023           4014  ADDA_An_indir_predec_reg3             CMP.L             #match_ADDA_An_indir_predec_reg3,D2        ;check reg is equal to 3
00003A62  6600 0006               4015                                        BNE               ADDA_An_indir_predec_reg4                  ;if not try reg 4
00003A66  6700 005E               4016                                        BEQ               ADDA_An_indir_predec_reg3_out              ;if equal go to output subroutine
00003A6A                          4017  
00003A6A  B4BC 00000024           4018  ADDA_An_indir_predec_reg4             CMP.L             #match_ADDA_An_indir_predec_reg4,D2        ;check reg is equal to 4
00003A70  6600 0006               4019                                        BNE               ADDA_An_indir_predec_reg5                  ;if not try reg 5
00003A74  6700 005C               4020                                        BEQ               ADDA_An_indir_predec_reg4_out              ;if equal go to output subroutine
00003A78                          4021  
00003A78  B4BC 00000025           4022  ADDA_An_indir_predec_reg5             CMP.L             #match_ADDA_An_indir_predec_reg5,D2        ;check reg is equal to 5
00003A7E  6600 0006               4023                                        BNE               ADDA_An_indir_predec_reg6                  ;if not try reg 6
00003A82  6700 005A               4024                                        BEQ               ADDA_An_indir_predec_reg5_out              ;if equal go to output subroutine
00003A86                          4025  
00003A86  B4BC 00000026           4026  ADDA_An_indir_predec_reg6             CMP.L             #match_ADDA_An_indir_predec_reg6,D2        ;check reg is equal to 6
00003A8C  6600 0006               4027                                        BNE               ADDA_An_indir_predec_reg7                  ;if not try reg 7
00003A90  6700 0058               4028                                        BEQ               ADDA_An_indir_predec_reg6_out              ;if equal go to output subroutine
00003A94                          4029  
00003A94  B4BC 00000027           4030  ADDA_An_indir_predec_reg7             CMP.L             #match_ADDA_An_indir_predec_reg7,D2        ;check reg is equal to 7
00003A9A  6700 005A               4031                                        BEQ               ADDA_An_indir_predec_reg7_out              ;if equal go to output subroutine
00003A9E  6600 FBC2               4032                                        BNE               ERROR                                      ;if not equal to an addresssing mode, pritn error
00003AA2                          4033  
00003AA2                          4034  
00003AA2                          4035  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00003AA2  227C 000089FD           4036  ADDA_An_indir_predec_reg0_out         MOVE.L        #ea_indir_predec_A0,A1             ;load string constant into A1
00003AA8  4EB9 00003B50           4037                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003AAE                          4038                                              
00003AAE  227C 00008A03           4039  ADDA_An_indir_predec_reg1_out         MOVE.L        #ea_indir_predec_A1,A1             ;load string constant into A1
00003AB4  4EB9 00003B50           4040                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003ABA                          4041  
00003ABA  227C 00008A09           4042  ADDA_An_indir_predec_reg2_out         MOVE.L        #ea_indir_predec_A2,A1             ;load string constant into A1
00003AC0  4EB9 00003B50           4043                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003AC6                          4044  
00003AC6  227C 00008A0F           4045  ADDA_An_indir_predec_reg3_out         MOVE.L        #ea_indir_predec_A3,A1             ;load string constant into A1
00003ACC  4EB9 00003B50           4046                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003AD2                          4047  
00003AD2  227C 00008A15           4048  ADDA_An_indir_predec_reg4_out         MOVE.L        #ea_indir_predec_A4,A1             ;load string constant into A1
00003AD8  4EB9 00003B50           4049                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003ADE                          4050  
00003ADE  227C 00008A1B           4051  ADDA_An_indir_predec_reg5_out         MOVE.L        #ea_indir_predec_A5,A1             ;load string constant into A1
00003AE4  4EB9 00003B50           4052                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003AEA                          4053  
00003AEA  227C 00008A21           4054  ADDA_An_indir_predec_reg6_out         MOVE.L        #ea_indir_predec_A6,A1             ;load string constant into A1
00003AF0  4EB9 00003B50           4055                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003AF6                          4056  
00003AF6  227C 00008A27           4057  ADDA_An_indir_predec_reg7_out         MOVE.L        #ea_indir_predec_A7,A1             ;load string constant into A1
00003AFC  4EB9 00003B50           4058                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003B02                          4059          
00003B02                          4060  
00003B02                          4061  ;------------------Absolute Addressing Output-----------------------
00003B02  22FC 00008A37           4062  ADDA_abs_add_word_out                    MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003B08  22C5                    4063                                           MOVE.L      D5,(A1)+                           ;load address                  
00003B0A  4CDF 7CBE               4064                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003B0E  4E75                    4065                                           RTS                                            :return to subroutine
00003B10                          4066                                             
00003B10                          4067  
00003B10  2A18                    4068  ADDA_abs_add_long_out                    MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00003B12  22FC 00008A37           4069                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003B18  22C5                    4070                                           MOVE.L      D5,(A1)+                           ;load address                  
00003B1A  4CDF 7CBE               4071                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003B1E  4E75                    4072                                           RTS                                            :return to subroutine                                            
00003B20                          4073  ;---------------Immediate Addresing---------------------------
00003B20  2A18                    4074  ADDA_immediate_add_out                  MOVE.L       (A0)+,D5                           ;capture the immediate address
00003B22  BCBC 000000FC           4075                                          CMP.L       #match_ADDA_imm_add_word,D6             ;check to see if need to pull word
00003B28  2A18                    4076                                          MOVE.L      (A0)+,D5                           ;pull the word
00003B2A  6700 0006               4077                                          BEQ         ADDA_imm_add_w                     ;if equal go pull word    
00003B2E  6600 0010               4078                                          BNE         ADDA_imm_add_l                     ;if not equal, go check long
00003B32                          4079                                           
00003B32  22FC 00008A37           4080  ADDA_imm_add_w                           MOVE.L      #ea_$,(A1)+                        ;load the $
00003B38  32C5                    4081                                           MOVE.W      D5,(A1)+                           ;load the word address                           
00003B3A  4EB9 00003B50           4082                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003B40                          4083                                           
00003B40  2A18                    4084  ADDA_imm_add_l                           MOVE.L      (A0)+,D5                           ;pull the long and increase the pointer
00003B42  22FC 00008A37           4085                                           MOVE.L      #ea_$,(A1)+                        ;load the $
00003B48  2245                    4086                                           MOVE.L      D5,A1                              ;move to A1
00003B4A  4EB9 00003B50           4087                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003B50                          4088                                                
00003B50                          4089  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003B50  4282                    4090  ADDA_determine_second_op        CLR.L       D2              ;clear D2 
00003B52  C4BC 00000E00           4091                                  AND.L       #mask_ADDA_An_reg,D2        ;load the mask for the register into D2, masks bit 11-9
00003B58                          4092                                                  
00003B58  B4BC 00000000           4093  ADDA_reg0                       CMP.L       #match_ADDA_reg0,D2     ;check to see if reg equal 0
00003B5E  6600 0006               4094                                  BNE         ADDA_reg1           ;if not equal got check reg 1
00003B62  6700 0064               4095                                  BEQ         ADDA_reg0_out           ;if equal go to output
00003B66                          4096                                                  
00003B66  B4BC 00000200           4097  ADDA_reg1                       CMP.L       #match_ADDA_reg1,D2     ;check to see if reg equal 1
00003B6C  6600 0006               4098                                  BNE         ADDA_reg2           ;if not equal got check reg 2
00003B70  6700 0062               4099                                  BEQ         ADDA_reg1_out           ;if equal go to output
00003B74                          4100  
00003B74  B4BC 00000400           4101  ADDA_reg2                       CMP.L       #match_ADDA_reg2,D2     ;check to see if reg equal 2
00003B7A  6600 0006               4102                                  BNE         ADDA_reg3           ;if not equal got check reg 3
00003B7E  6700 0060               4103                                  BEQ         ADDA_reg2_out           ;if equal go to output
00003B82                          4104  
00003B82  B4BC 00000600           4105  ADDA_reg3                       CMP.L       #match_ADDA_reg3,D2     ;check to see if reg equal 3
00003B88  6600 0006               4106                                  BNE         ADDA_reg4           ;if not equal got check reg 4
00003B8C  6700 005E               4107                                  BEQ         ADDA_reg3_out           ;if equal go to output
00003B90                          4108                                                  
00003B90  B4BC 00000800           4109  ADDA_reg4                       CMP.L       #match_ADDA_reg4,D2     ;check to see if reg equal 4
00003B96  6600 0006               4110                                  BNE         ADDA_reg5           ;if not equal got check reg 5
00003B9A  6700 005C               4111                                  BEQ         ADDA_reg4_out           ;if equal go to output
00003B9E                          4112  
00003B9E  B4BC 00000A00           4113  ADDA_reg5                       CMP.L       #match_ADDA_reg5,D2     ;check to see if reg equal 5
00003BA4  6600 0006               4114                                  BNE         ADDA_reg6           ;if not equal got check reg 6
00003BA8  6700 005A               4115                                  BEQ         ADDA_reg5_out           ;if equal go to output
00003BAC                          4116  
00003BAC  B4BC 00000C00           4117  ADDA_reg6                       CMP.L       #match_ADDA_reg6,D2     ;check to see if reg equal 6
00003BB2  6600 0006               4118                                  BNE         ADDA_reg7           ;if not equal got check reg 7
00003BB6  6700 0058               4119                                  BEQ         ADDA_reg6_out           ;if equal go to output          
00003BBA                          4120  
00003BBA  B4BC 00000E00           4121  ADDA_reg7                       CMP.L       #match_ADDA_reg7,D2     ;check to see if reg equal 7
00003BC0  6700 005A               4122                                  BEQ         ADDA_reg7_out           ;if equal go to output
00003BC4  6600 FA9C               4123                                  BNE         ERROR                           ;if not equal to an addresssing mode, pritn error
00003BC8                          4124                                  
00003BC8                          4125  
00003BC8                          4126  ;--------------------Data Output-----------------------
00003BC8  227C 0000897D           4127  ADDA_reg0_out                   MOVE.L      #ea_A0,A1               ;load string constant into A1
00003BCE  4CDF 7CBE               4128                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003BD2  4E75                    4129                                  RTS
00003BD4                          4130                                              
00003BD4  227C 00008980           4131  ADDA_reg1_out                   MOVE.L      #ea_A1,A1           ;load string constant into A1
00003BDA  4CDF 7CBE               4132                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003BDE  4E75                    4133                                  RTS
00003BE0                          4134                                              
00003BE0  227C 00008983           4135  ADDA_reg2_out                   MOVE.L      #ea_A2,A1           ;load string constant into A1
00003BE6  4CDF 7CBE               4136                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003BEA  4E75                    4137                                  RTS
00003BEC                          4138                                              
00003BEC  227C 00008986           4139  ADDA_reg3_out                   MOVE.L      #ea_A3,A1           ;load string constant into A1
00003BF2  4CDF 7CBE               4140                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003BF6  4E75                    4141                                  RTS
00003BF8                          4142                                              
00003BF8  227C 00008989           4143  ADDA_reg4_out                   MOVE.L      #ea_A4,A1           ;load string constant into A1
00003BFE  4CDF 7CBE               4144                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003C02  4E75                    4145                                  RTS
00003C04                          4146                                              
00003C04  227C 0000898C           4147  ADDA_reg5_out                   MOVE.L      #ea_A5,A1           ;load string constant into A1
00003C0A  4CDF 7CBE               4148                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003C0E  4E75                    4149                                  RTS
00003C10                          4150                                              
00003C10  227C 0000898F           4151  ADDA_reg6_out                   MOVE.L      #ea_A6,A1           ;load string constant into A1
00003C16  4CDF 7CBE               4152                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003C1A  4E75                    4153                                  RTS
00003C1C                          4154                                              
00003C1C  227C 00008992           4155  ADDA_reg7_out                   MOVE.L      #ea_A7,A1           ;load string constant into A1
00003C22  4CDF 7CBE               4156                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003C26  4E75                    4157                                  RTS
00003C28                          4158                                  
00003C28                          4159  
00003C28                          4160  ;----------------------Error Handling----------------------------------------
00003C28  =00000038               4161  mask_ADDA_ea_mode               EQU         $0038
00003C28  =0000003F               4162  mask_ADDA_abs_add               EQU         $003F
00003C28  =0000003F               4163  mask_ADDA_ea_reg_and_mode       EQU         $003F
00003C28  =00000E00               4164  mask_ADDA_An_reg                EQU         $0E00
00003C28                          4165  
00003C28  =00000000               4166  match_ADDA_Dn                   EQU         $0000
00003C28  =00000008               4167  match_ADDA_An                   EQU         $0008
00003C28  =00000010               4168  match_ADDA_An_indir             EQU         $0010
00003C28  =00000020               4169  match_ADDA_An_indir_predec      EQU         $0020
00003C28  =00000018               4170  match_ADDA_An_indir_postinc     EQU         $0018
00003C28  =00000038               4171  match_ADDA_abs_add_word         EQU         $0038
00003C28  =00000039               4172  match_ADDA_abs_add_long         EQU         $0039
00003C28                          4173  
00003C28  =00000000               4174  match_ADDA_D0               EQU         $0000
00003C28  =00000001               4175  match_ADDA_D1               EQU         $0001
00003C28  =00000002               4176  match_ADDA_D2               EQU         $0002
00003C28  =00000003               4177  match_ADDA_D3               EQU         $0003
00003C28  =00000004               4178  match_ADDA_D4               EQU         $0004
00003C28  =00000005               4179  match_ADDA_D5               EQU         $0005
00003C28  =00000006               4180  match_ADDA_D6               EQU         $0006
00003C28  =00000007               4181  match_ADDA_D7               EQU         $0007
00003C28                          4182  
00003C28  =00000008               4183  match_ADDA_A0               EQU         $0008
00003C28  =00000009               4184  match_ADDA_A1               EQU         $0009
00003C28  =0000000A               4185  match_ADDA_A2               EQU         $000A
00003C28  =0000000B               4186  match_ADDA_A3               EQU         $000B
00003C28  =0000000C               4187  match_ADDA_A4               EQU         $000C
00003C28  =0000000D               4188  match_ADDA_A5               EQU         $000D
00003C28  =0000000E               4189  match_ADDA_A6               EQU         $000E
00003C28  =0000000F               4190  match_ADDA_A7               EQU         $000F
00003C28                          4191  
00003C28  =00000010               4192  match_ADDA_An_indir_r0          EQU         $0010
00003C28  =00000011               4193  match_ADDA_An_indir_r1          EQU         $0011
00003C28  =00000012               4194  match_ADDA_An_indir_r2          EQU         $0012
00003C28  =00000013               4195  match_ADDA_An_indir_r3          EQU         $0013
00003C28  =00000014               4196  match_ADDA_An_indir_r4          EQU         $0014
00003C28  =00000015               4197  match_ADDA_An_indir_r5          EQU         $0015
00003C28  =00000016               4198  match_ADDA_An_indir_r6          EQU         $0016
00003C28  =00000017               4199  match_ADDA_An_indir_r7          EQU         $0017
00003C28                          4200  
00003C28  =00000018               4201  match_ADDA_An_indir_postinc_reg0    EQU         $0018
00003C28  =00000019               4202  match_ADDA_An_indir_postinc_reg1    EQU         $0019
00003C28  =0000001A               4203  match_ADDA_An_indir_postinc_reg2    EQU         $001A
00003C28  =0000001B               4204  match_ADDA_An_indir_postinc_reg3    EQU         $001B
00003C28  =0000001C               4205  match_ADDA_An_indir_postinc_reg4    EQU         $001C
00003C28  =0000001D               4206  match_ADDA_An_indir_postinc_reg5    EQU         $001D
00003C28  =0000001E               4207  match_ADDA_An_indir_postinc_reg6    EQU         $001E
00003C28  =0000001F               4208  match_ADDA_An_indir_postinc_reg7    EQU         $001F
00003C28                          4209  
00003C28  =00000020               4210  match_ADDA_An_indir_predec_reg0     EQU         $0020
00003C28  =00000021               4211  match_ADDA_An_indir_predec_reg1     EQU         $0021
00003C28  =00000022               4212  match_ADDA_An_indir_predec_reg2     EQU         $0022
00003C28  =00000023               4213  match_ADDA_An_indir_predec_reg3     EQU         $0023
00003C28  =00000024               4214  match_ADDA_An_indir_predec_reg4     EQU         $0024
00003C28  =00000025               4215  match_ADDA_An_indir_predec_reg5     EQU         $0025
00003C28  =00000026               4216  match_ADDA_An_indir_predec_reg6     EQU         $0026
00003C28  =00000027               4217  match_ADDA_An_indir_predec_reg7     EQU         $0027
00003C28                          4218  
00003C28  =0000003C               4219  match_ADDA_imm_add                      EQU                 $003C
00003C28  =000000FC               4220  match_ADDA_imm_add_word                 EQU                 $00FC
00003C28  =000001FC               4221  match_ADDA_imm_add_long                 EQU                 $01FC
00003C28                          4222  
00003C28  =00000000               4223  match_ADDA_reg0             EQU         $0000
00003C28  =00000200               4224  match_ADDA_reg1             EQU         $0200
00003C28  =00000400               4225  match_ADDA_reg2             EQU         $0400
00003C28  =00000600               4226  match_ADDA_reg3             EQU         $0600
00003C28  =00000800               4227  match_ADDA_reg4             EQU         $0800
00003C28  =00000A00               4228  match_ADDA_reg5             EQU         $0A00
00003C28  =00000C00               4229  match_ADDA_reg6             EQU         $0C00
00003C28  =00000E00               4230  match_ADDA_reg7             EQU         $0E00
00003C28                          4231  
00003C28                          4232  
00003C28                          4233  
00003C28                          4234  
00003C28                          4235  
00003C28                          4236  
00003C28                          4237  
00003C28                          4238  -------------------- end include --------------------
00003C28                          4239              INCLUDE 'ADDQ Subroutine.x68'
00003C28  48E7 7D3E               4240  ADDQ_sub                         MOVEM.L           D1-D5/D7/A2-A6, -(SP)                               ;preserve the registers, 
00003C2C  C2BC 00000038           4241                                   AND.L             #mask_ADDQ_ea_mode,D1                                   ;move the mask to D1
00003C32                          4242                                   
00003C32                          4243  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003C32  4282                    4244                                  CLR.L       D2                                              ;clear D2 
00003C34  C4BC 00000E00           4245                                  AND.L       #mask_ADDQ_reg,D2                               ;load the mask for the register into D2, masks bit 11-9
00003C3A                          4246                                                  
00003C3A  B4BC 00000000           4247  ADDQ_reg0                       CMP.L       #match_ADDQ_reg0,D2                             ;check to see if reg equal 0
00003C40  6600 0006               4248                                  BNE         ADDQ_reg1                                       ;if not equal got check reg 1
00003C44  6700 0064               4249                                  BEQ         ADDQ_reg0_out                                   ;if equal go to output
00003C48                          4250                                              
00003C48  B4BC 00000200           4251  ADDQ_reg1                       CMP.L       #match_ADDQ_reg1,D2                             ;check to see if reg equal 1
00003C4E  6600 0006               4252                                  BNE         ADDQ_reg2                                       ;if not equal got check reg 2
00003C52  6700 0062               4253                                  BEQ         ADDQ_reg1_out                                   ;if equal go to output
00003C56                          4254  
00003C56  B4BC 00000400           4255  ADDQ_reg2                       CMP.L       #match_ADDQ_reg2,D2                             ;check to see if reg equal 2
00003C5C  6600 0006               4256                                  BNE         ADDQ_reg3                                       ;if not equal got check reg 3
00003C60  6700 0060               4257                                  BEQ         ADDQ_reg2_out                                   ;if equal go to output
00003C64                          4258  
00003C64  B4BC 00000600           4259  ADDQ_reg3                       CMP.L       #match_ADDQ_reg3,D2                             ;check to see if reg equal 3
00003C6A  6600 0006               4260                                  BNE         ADDQ_reg4                                       ;if not equal got check reg 4
00003C6E  6700 005E               4261                                  BEQ         ADDQ_reg3_out                                   ;if equal go to output
00003C72                          4262                                                  
00003C72  B4BC 00000800           4263  ADDQ_reg4                       CMP.L       #match_ADDQ_reg4,D2                             ;check to see if reg equal 4
00003C78  6600 0006               4264                                  BNE         ADDQ_reg5                                       ;if not equal got check reg 5
00003C7C  6700 005C               4265                                  BEQ         ADDQ_reg4_out                                   ;if equal go to output
00003C80                          4266  
00003C80  B4BC 00000A00           4267  ADDQ_reg5                       CMP.L       #match_ADDQ_reg5,D2                             ;check to see if reg equal 5
00003C86  6600 0006               4268                                  BNE         ADDQ_reg6                                       ;if not equal got check reg 6
00003C8A  6700 005A               4269                                  BEQ         ADDQ_reg5_out                                   ;if equal go to output
00003C8E                          4270  
00003C8E  B4BC 00000C00           4271  ADDQ_reg6                       CMP.L       #match_ADDQ_reg6,D2                             ;check to see if reg equal 6
00003C94  6600 0006               4272                                  BNE         ADDQ_reg7                                       ;if not equal got check reg 7
00003C98  6700 0058               4273                                  BEQ         ADDQ_reg6_out                                   ;if equal go to output          
00003C9C                          4274  
00003C9C  B4BC 00000E00           4275  ADDQ_reg7                       CMP.L       #match_ADDQ_reg7,D2                             ;check to see if reg equal 7
00003CA2  6700 005A               4276                                  BEQ         ADDQ_reg7_out                                   ;if equal go to output
00003CA6  6600 F9BA               4277                                  BNE         ERROR                                                ;if not equal to an addresssing mode, pritn error
00003CAA                          4278                                  
00003CAA                          4279  
00003CAA                          4280  ;--------------------Data Output-----------------------
00003CAA  227C 00008A3B           4281  ADDQ_reg0_out                               MOVE.L      #ea_data0,A1                               ;load string constant into A1
00003CB0  4EB9 00003D0A           4282                                              JSR         ADDQ_determine_second_operand                ;jump to subroutine to determine the second operand
00003CB6                          4283                                              
00003CB6  227C 00008A3E           4284  ADDQ_reg1_out                               MOVE.L      #ea_data1,A1                            ;load string constant into A1
00003CBC  4EB9 00003D0A           4285                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003CC2                          4286  
00003CC2  227C 00008A41           4287  ADDQ_reg2_out                               MOVE.L      #ea_data2,A1                                ;load string constant into A1
00003CC8  4EB9 00003D0A           4288                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003CCE                          4289  
00003CCE  227C 00008A44           4290  ADDQ_reg3_out                               MOVE.L      #ea_data3,A1                                    ;load string constant into A1
00003CD4  4EB9 00003D0A           4291                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003CDA                          4292   
00003CDA  227C 00008A47           4293  ADDQ_reg4_out                               MOVE.L      #ea_data4,A1                            ;load string constant into A1
00003CE0  4EB9 00003D0A           4294                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003CE6                          4295  
00003CE6  227C 00008A4A           4296  ADDQ_reg5_out                               MOVE.L      #ea_data5,A1                            ;load string constant into A1
00003CEC  4EB9 00003D0A           4297                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003CF2                          4298  
00003CF2  227C 00008A4D           4299  ADDQ_reg6_out                               MOVE.L      #ea_data6,A1                            ;load string constant into A1
00003CF8  4EB9 00003D0A           4300                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003CFE                          4301  
00003CFE  227C 00008A50           4302  ADDQ_reg7_out                               MOVE.L      #ea_data7,A1                            ;load string constant into A1
00003D04  4EB9 00003D0A           4303                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003D0A                          4304                  
00003D0A                          4305  
00003D0A                          4306  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00003D0A                          4307  ADDQ_determine_second_operand
00003D0A  B2BC 00000000           4308  ADDQ_data_reg_dir                CMP.L             #match_ADDQ_Dn,D1                             ;check to see if mode is data reg direct
00003D10  6600 0006               4309                                   BNE               ADDQ_add_reg_dir                                   ;if not, go check add reg dir
00003D14  6700 005E               4310                                   BEQ               ADDQ_Dn_reg                                        ;if equal go figure out the register
00003D18                          4311  
00003D18  B2BC 00000008           4312  ADDQ_add_reg_dir                 CMP.L             #match_ADDQ_An,D1                             ;check if mode is add reg direct
00003D1E  6600 0006               4313                                   BNE               ADDQ_add_reg_indir                                 ;if not, go check add reg indir
00003D22  6700 0126               4314                                   BEQ               ADDQ_An_reg                                        ;if equal go figure out the reg
00003D26                          4315   
00003D26  B2BC 00000010           4316  ADDQ_add_reg_indir               CMP.L             #match_ADDQ_An_indir,D1                       ;check to see if mode is add reg indir
00003D2C  6600 0006               4317                                   BNE               ADDQ_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00003D30  6700 01E8               4318                                   BEQ               ADDQ_An_indir_reg                                  ;if equal go figure out the register           
00003D34                          4319             
00003D34  B2BC 00000020           4320  ADDQ_add_reg_indir_predec        CMP.L             #match_ADDQ_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00003D3A  6600 0006               4321                                   BNE               ADDQ_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00003D3E  6700 037A               4322                                   BEQ               ADDQ_An_indir_predec                               ;if equal go figure out the register
00003D42                          4323                        
00003D42  B2BC 00000018           4324  ADDQ_add_reg_indir_postinc       CMP.L             #match_ADDQ_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00003D48  6600 0006               4325                                   BNE               ADDQ_abs_add_word                                  ;if not go check abs add word
00003D4C  6700 029C               4326                                   BEQ               ADDQ_An_indir_pinc_reg                          ;if equal go figure out the register
00003D50                          4327  
00003D50  C4BC 0000003F           4328  ADDQ_abs_add_word                AND.L             #mask_ADDQ_abs_add,D2                         ;load mask to determine if abs add word or long
00003D56                          4329                                   
00003D56  B4BC 00000038           4330                                   CMP.L             #match_ADDQ_abs_add_word,D2                   ;check if abs add word
00003D5C  2A18                    4331                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00003D5E  6600 0006               4332                                   BNE               ADDQ_abs_add_long                                  ;if not go check abs add long
00003D62  6700 0426               4333                                   BEQ               ADDQ_abs_add_word_out                              ;if equal go to output
00003D66                          4334    
00003D66  B4BC 00000039           4335  ADDQ_abs_add_long                CMP.L             #match_ADDQ_abs_add_long,D2                    ;check to see if abs add long
00003D6C  6700 042A               4336                                   BEQ               ADDQ_abs_add_long_out                               ;if equal go to output
00003D70  6600 F8F0               4337                                   BNE               ERROR
00003D74                          4338  
00003D74                          4339  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00003D74                          4340                                   
00003D74                          4341                                   
00003D74                          4342  ;-----------------------------------Data Register Direct--------------------------------
00003D74  C4BC 0000003F           4343  ADDQ_Dn_reg                      AND.L              #mask_ADDQ_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00003D7A  B4BC 00000000           4344                                   CMP.L              #match_ADDQ_D0,D2                       ;check to see in the register is 0
00003D80  6600 0006               4345                                   BNE                ADDQ_rD1                                     ;if not go check register 1
00003D84  6700 0064               4346                                   BEQ                ADDQ_D0_out                              ;if equal go to output subroutine
00003D88                          4347  
00003D88  B4BC 00000001           4348  ADDQ_rD1                         CMP.L              #match_ADDQ_D1,D2                       ;check to see in the register is 1
00003D8E  6600 0006               4349                                   BNE                ADDQ_rD2                                     ;if not go check register 2
00003D92  6700 0062               4350                                   BEQ                ADDQ_D1_out                              ;if equal go to output subroutine
00003D96                          4351  
00003D96  B4BC 00000002           4352  ADDQ_rD2                         CMP.L              #match_ADDQ_D2,D2                       ;check to see in the register is 2
00003D9C  6600 0006               4353                                   BNE                ADDQ_rD3                                     ;if not go check register 3
00003DA0  6700 0060               4354                                   BEQ                ADDQ_D2_out                              ;if equal go to output subroutine
00003DA4                          4355  
00003DA4  B4BC 00000003           4356  ADDQ_rD3                         CMP.L              #match_ADDQ_D3,D2                       ;check to see in the register is 3
00003DAA  6600 0006               4357                                   BNE                ADDQ_rD4                                     ;if not go check register 4
00003DAE  6700 005E               4358                                   BEQ                ADDQ_D3_out                              ;if equal go to output subroutine
00003DB2                          4359  
00003DB2  B4BC 00000004           4360  ADDQ_rD4                         CMP.L              #match_ADDQ_D4,D2                       ;check to see in the register is 4
00003DB8  6600 0006               4361                                   BNE                ADDQ_rD5                                     ;if not go check register 5
00003DBC  6700 005C               4362                                   BEQ                ADDQ_D4_out                              ;if equal go to output subroutine
00003DC0                          4363  
00003DC0  B4BC 00000005           4364  ADDQ_rD5                         CMP.L              #match_ADDQ_D5,D2                       ;check to see in the register is 5
00003DC6  6600 0006               4365                                   BNE                ADDQ_rD6                                     ;if not go check register 6
00003DCA  6700 005A               4366                                   BEQ                ADDQ_D5_out                              ;if equal go to output subroutine
00003DCE                          4367  
00003DCE  B4BC 00000006           4368  ADDQ_rD6                         CMP.L              #match_ADDQ_D6,D2                       ;check to see in the register is 6
00003DD4  6600 0006               4369                                   BNE                ADDQ_rD7                                     ;if not go check register 7
00003DD8  6700 0058               4370                                   BEQ                ADDQ_D6_out                              ;if equal go to output subroutine
00003DDC                          4371  
00003DDC  B4BC 00000007           4372  ADDQ_rD7                         CMP.L              #match_ADDQ_D7,D2                       ;check to see in the register is 7
00003DE2  6700 005A               4373                                   BEQ                ADDQ_D7_out                              ;if equal go to output subroutine
00003DE6  6600 F87A               4374                                   BNE                ERROR                                   ;if not equal, got to error message
00003DEA                          4375  ;--------------------Data Register Direct Output-----------------------
00003DEA  227C 00008965           4376  ADDQ_D0_out                     MOVE.L              #ea_D0,A1                           ;load string constant into A1
00003DF0  4CDF 7CBE               4377                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003DF4  4E75                    4378                                  RTS                                                     ;return to subroutine
00003DF6                          4379  
00003DF6  227C 00008968           4380  ADDQ_D1_out                     MOVE.L              #ea_D1,A1                           ;load string constant into A1
00003DFC  4CDF 7CBE               4381                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E00  4E75                    4382                                  RTS                                                     ;return to subroutine
00003E02                          4383  
00003E02                          4384  
00003E02  227C 0000896B           4385  ADDQ_D2_out                     MOVE.L              #ea_D2,A1                           ;load string constant into A1
00003E08  4CDF 7CBE               4386                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E0C  4E75                    4387                                  RTS                                                     ;return to subroutine
00003E0E                          4388  
00003E0E  227C 0000896E           4389  ADDQ_D3_out                     MOVE.L              #ea_D3,A1                           ;load string constant into A1
00003E14  4CDF 7CBE               4390                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E18  4E75                    4391                                  RTS                                                     ;return to subroutine
00003E1A                          4392  
00003E1A                          4393  
00003E1A  227C 00008971           4394  ADDQ_D4_out                     MOVE.L              #ea_D4,A1                           ;load string constant into A1
00003E20  4CDF 7CBE               4395                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E24  4E75                    4396                                  RTS                                                     ;return to subroutine
00003E26                          4397      
00003E26                          4398  
00003E26  227C 00008974           4399  ADDQ_D5_out                     MOVE.L              #ea_D5,A1                           ;load string constant into A1
00003E2C  4CDF 7CBE               4400                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E30  4E75                    4401                                  RTS                                                     ;return to subroutine
00003E32                          4402  
00003E32                          4403  
00003E32  227C 00008977           4404  ADDQ_D6_out                     MOVE.L              #ea_D6,A1                           ;load string constant into A1
00003E38  4CDF 7CBE               4405                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E3C  4E75                    4406                                  RTS                                                     ;return to subroutine
00003E3E                          4407  
00003E3E                          4408  
00003E3E  227C 0000897A           4409  ADDQ_D7_out                     MOVE.L              #ea_D7,A1                           ;load string constant into A1
00003E44  4CDF 7CBE               4410                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E48  4E75                    4411                                  RTS                                                     ;return to subroutine
00003E4A                          4412  
00003E4A                          4413  ;------------------Address Register Direct-----------------------
00003E4A  B4BC 00000008           4414  ADDQ_An_reg                      CMP.L           #match_ADDQ_A0,D2                           ;check reg is equal to 0
00003E50  6600 0006               4415                                   BNE             ADDQ_rA1                                    ;if not try reg 1
00003E54  6700 0134               4416                                   BEQ             ADDQ_An_indir_reg0_out                      ;if equal go to output subroutine
00003E58                          4417  
00003E58  B4BC 00000009           4418  ADDQ_rA1                         CMP.L           #match_ADDQ_A1,D2                           ;check reg is equal to 1
00003E5E  6600 0006               4419                                   BNE             ADDQ_rA2                                    ;if not try reg 2
00003E62  6700 0132               4420                                   BEQ             ADDQ_An_indir_reg1_out                      ;if equal go to output subroutine
00003E66                          4421  
00003E66  B4BC 0000000A           4422  ADDQ_rA2                         CMP.L           #match_ADDQ_A2,D2                           ;check reg is equal to 2
00003E6C  6600 0006               4423                                   BNE             ADDQ_rA3                                    ;if not try reg 3
00003E70  6700 0130               4424                                   BEQ             ADDQ_An_indir_reg2_out                      ;if equal go to output subroutine
00003E74                          4425  
00003E74  B4BC 0000000B           4426  ADDQ_rA3                         CMP.L           #match_ADDQ_A3,D2                           ;check reg is equal to 3
00003E7A  6600 0006               4427                                   BNE             ADDQ_rA4                                    ;if not try reg 4
00003E7E  6700 012E               4428                                   BEQ             ADDQ_An_indir_reg3_out                      ;if equal go to output subroutine
00003E82                          4429  
00003E82  B4BC 0000000C           4430  ADDQ_rA4                         CMP.L           #match_ADDQ_A4,D2                           ;check reg is equal to 4
00003E88  6600 0006               4431                                   BNE             ADDQ_rA5                                    ;if not try reg 5
00003E8C  6700 012C               4432                                   BEQ             ADDQ_An_indir_reg4_out                      ;if equal go to output subroutine
00003E90                          4433              
00003E90  B4BC 0000000D           4434  ADDQ_rA5                         CMP.L           #match_ADDQ_A5,D2                           ;check reg is equal to 5
00003E96  6600 0006               4435                                   BNE             ADDQ_rA6                                    ;if not try reg 6
00003E9A  6700 012A               4436                                   BEQ             ADDQ_An_indir_reg5_out                      ;if equal go to output subroutine
00003E9E                          4437  
00003E9E  B4BC 0000000E           4438  ADDQ_rA6                         CMP.L           #match_ADDQ_A6,D2                           ;check reg is equal to 6
00003EA4  6600 0006               4439                                   BNE             ADDQ_rA7                                    ;if not try reg 7
00003EA8  6700 0128               4440                                   BEQ             ADDQ_An_indir_reg6_out                      ;if equal go to output subroutine
00003EAC                          4441  
00003EAC  B4BC 0000000F           4442  ADDQ_rA7                         CMP.L           #match_ADDQ_A7,D2                           ;check reg is equal to 7
00003EB2  6700 012A               4443                                   BEQ             ADDQ_An_indir_reg7_out                      ;if equal go to output subroutine
00003EB6  6600 F7AA               4444                                   BNE             ERROR                                       ;if not equal to an addresssing mode, pritn error
00003EBA                          4445  
00003EBA                          4446  ;--------------------Address Register Direct Output-----------------------
00003EBA  227C 00008992           4447  ADDQ_A0_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003EC0  4CDF 7CBE               4448                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EC4  4E75                    4449                                       RTS                                            return to subroutine
00003EC6                          4450                                  
00003EC6  227C 00008992           4451  ADDQ_A1_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003ECC  4CDF 7CBE               4452                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003ED0  4E75                    4453                                       RTS                                            ;return to subroutine
00003ED2                          4454                                  
00003ED2  227C 00008992           4455  ADDQ_A2_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003ED8  4CDF 7CBE               4456                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EDC  4E75                    4457                                       RTS                                            ;return to subroutine
00003EDE                          4458                                  
00003EDE  227C 00008992           4459  ADDQ_A3_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003EE4  4CDF 7CBE               4460                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EE8  4E75                    4461                                       RTS                                            ;return to subroutine
00003EEA                          4462  
00003EEA  227C 00008992           4463  ADDQ_A4_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003EF0  4CDF 7CBE               4464                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EF4  4E75                    4465                                       RTS                                            ;return to subroutine
00003EF6                          4466  
00003EF6  227C 00008992           4467  ADDQ_A5_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003EFC  4CDF 7CBE               4468                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003F00  4E75                    4469                                       RTS                                            ;return to subroutine
00003F02                          4470  
00003F02  227C 00008992           4471  ADDQ_A6_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003F08  4CDF 7CBE               4472                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003F0C  4E75                    4473                                       RTS                                            ;return to subroutine
00003F0E                          4474  
00003F0E  227C 00008992           4475  ADDQ_A7_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003F14  4CDF 7CBE               4476                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003F18  4E75                    4477                                       RTS                                            ;return to subroutine
00003F1A                          4478  
00003F1A                          4479  ;------------------Address Register Indirect-----------------------
00003F1A  B4BC 00000010           4480  ADDQ_An_indir_reg                CMP.L           #match_ADDQ_An_indir_r0,D2              ;check reg is equal to 0
00003F20  6600 0006               4481                                   BNE             ADDQ_An_indir_reg1                      ;if not try reg 1
00003F24  6700 0064               4482                                   BEQ             ADDQ_An_indir_reg0_out                  ;if equal go to output subroutine
00003F28                          4483  
00003F28  B4BC 00000011           4484  ADDQ_An_indir_reg1               CMP.L           #match_ADDQ_An_indir_r1,D2              ;check reg is equal to 1
00003F2E  6600 0006               4485                                   BNE             ADDQ_An_indir_reg2                      ;if not try reg 2
00003F32  6700 0062               4486                                   BEQ             ADDQ_An_indir_reg1_out                  ;if equal go to output subroutine
00003F36                          4487  
00003F36  B4BC 00000012           4488  ADDQ_An_indir_reg2               CMP.L           #match_ADDQ_An_indir_r2,D2              ;check reg is equal to 2
00003F3C  6600 0006               4489                                   BNE             ADDQ_An_indir_reg3                      ;if not try reg 3
00003F40  6700 0060               4490                                   BEQ             ADDQ_An_indir_reg2_out                  ;if equal go to output subroutine
00003F44                          4491  
00003F44  B4BC 00000013           4492  ADDQ_An_indir_reg3               CMP.L           #match_ADDQ_An_indir_r3,D2              ;check reg is equal to 3
00003F4A  6600 0006               4493                                   BNE             ADDQ_An_indir_reg4                      ;if not try reg 4
00003F4E  6700 005E               4494                                   BEQ             ADDQ_An_indir_reg3_out                  ;if equal go to output subroutine
00003F52                          4495      
00003F52  B4BC 00000014           4496  ADDQ_An_indir_reg4               CMP.L           #match_ADDQ_An_indir_r4,D2              ;check reg is equal to 4
00003F58  6600 0006               4497                                   BNE             ADDQ_An_indir_reg5                      ;if not try reg 5
00003F5C  6700 005C               4498                                   BEQ             ADDQ_An_indir_reg4_out                  ;if equal go to output subroutine
00003F60                          4499          
00003F60  B4BC 00000015           4500  ADDQ_An_indir_reg5               CMP.L           #match_ADDQ_An_indir_r5,D2              ;check reg is equal to 5
00003F66  6600 0006               4501                                   BNE             ADDQ_An_indir_reg6                      ;if not try reg 6
00003F6A  6700 005A               4502                                   BEQ             ADDQ_An_indir_reg5_out                  ;if equal go to output subroutine
00003F6E                          4503  
00003F6E  B4BC 00000016           4504  ADDQ_An_indir_reg6               CMP.L           #match_ADDQ_An_indir_r6,D2              ;check reg is equal to 6
00003F74  6600 0006               4505                                   BNE             ADDQ_An_indir_reg7                      ;if not try reg 7
00003F78  6700 0058               4506                                   BEQ             ADDQ_An_indir_reg6_out                  ;if equal go to output subroutine
00003F7C                          4507  
00003F7C  B4BC 00000017           4508  ADDQ_An_indir_reg7               CMP.L           #match_ADDQ_An_indir_r7,D2              ;check reg is equal to 7
00003F82  6700 005A               4509                                   BEQ             ADDQ_An_indir_reg7_out                  ;if equal go to output subroutine
00003F86  6600 F6DA               4510                                   BNE             ERROR                                   ;if not equal to an addresssing mode, pritn error
00003F8A                          4511  
00003F8A                          4512  ;--------------------Address Register Indirect Output-----------------------
00003F8A  227C 000089A5           4513  ADDQ_An_indir_reg0_out                      MOVE.L      #ea_indir_A0,A1                           ;load string constant into A1
00003F90  4CDF 7CBE               4514                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003F94  4E75                    4515                                              RTS                                                     ;return to subroutine
00003F96                          4516  
00003F96  227C 000089AA           4517  ADDQ_An_indir_reg1_out                      MOVE.L      #ea_indir_A1,A1                           ;load string constant into A1
00003F9C  4CDF 7CBE               4518                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FA0  4E75                    4519                                              RTS                                                     ;return to subroutine
00003FA2                          4520  
00003FA2  227C 000089AF           4521  ADDQ_An_indir_reg2_out                      MOVE.L      #ea_indir_A2,A1                           ;load string constant into A1
00003FA8  4CDF 7CBE               4522                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FAC  4E75                    4523                                              RTS                                                     ;return to subroutine
00003FAE                          4524  
00003FAE  227C 000089B4           4525  ADDQ_An_indir_reg3_out                      MOVE.L      #ea_indir_A3,A1                           ;load string constant into A1
00003FB4  4CDF 7CBE               4526                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FB8  4E75                    4527                                              RTS                                                     ;return to subroutine
00003FBA                          4528  
00003FBA  227C 000089B9           4529  ADDQ_An_indir_reg4_out                      MOVE.L      #ea_indir_A4,A1                           ;load string constant into A1
00003FC0  4CDF 7CBE               4530                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FC4  4E75                    4531                                              RTS                                                     ;return to subroutine
00003FC6                          4532  
00003FC6  227C 000089BE           4533  ADDQ_An_indir_reg5_out                      MOVE.L      #ea_indir_A5,A1                           ;load string constant into A1
00003FCC  4CDF 7CBE               4534                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FD0  4E75                    4535                                              RTS                                                     ;return to subroutine
00003FD2                          4536  
00003FD2  227C 000089C3           4537  ADDQ_An_indir_reg6_out                      MOVE.L      #ea_indir_A6,A1                           ;load string constant into A1
00003FD8  4CDF 7CBE               4538                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FDC  4E75                    4539                                              RTS                                                     ;return to subroutine
00003FDE                          4540                                          
00003FDE  227C 000089C8           4541  ADDQ_An_indir_reg7_out                      MOVE.L      #ea_indir_A7,A1                           ;load string constant into A1
00003FE4  4CDF 7CBE               4542                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FE8  4E75                    4543                                              RTS                                                     ;return to subroutine
00003FEA                          4544  
00003FEA                          4545  ;------------------Address Register Indirect with Post Increment-----------------------
00003FEA  B4BC 00000018           4546  ADDQ_An_indir_pinc_reg                      CMP.L      #match_ADDQ_An_indir_postinc_reg0,D2            ;check reg is equal to 0
00003FF0  6600 0006               4547                                              BNE        ADDQ_An_indir_pinc_r1                           ;if not try reg 1
00003FF4  6700 0064               4548                                              BEQ        ADDQ_An_indir_pinc_r0_out                       ;if equal go to output subroutine
00003FF8                          4549  
00003FF8  B4BC 00000019           4550  ADDQ_An_indir_pinc_r1                       CMP.L      #match_ADDQ_An_indir_postinc_reg1,D2            ;check reg is equal to 1
00003FFE  6600 0006               4551                                              BNE        ADDQ_An_indir_pinc_r2                           ;if not try reg 2
00004002  6700 0062               4552                                              BEQ        ADDQ_An_indir_pinc_r1_out                       ;if equal go to output subroutine
00004006                          4553  
00004006  B4BC 0000001A           4554  ADDQ_An_indir_pinc_r2                       CMP.L      #match_ADDQ_An_indir_postinc_reg2,D2            ;check reg is equal to 2
0000400C  6600 0006               4555                                              BNE        ADDQ_An_indir_pinc_r3                           ;if not try reg 3
00004010  6700 0060               4556                                              BEQ        ADDQ_An_indir_pinc_r2_out                       ;if equal go to output subroutine
00004014                          4557  
00004014  B4BC 0000001B           4558  ADDQ_An_indir_pinc_r3                       CMP.L      #match_ADDQ_An_indir_postinc_reg3,D2            ;check reg is equal to 3
0000401A  6600 0006               4559                                              BNE        ADDQ_An_indir_pinc_r4                           ;if not try reg 4
0000401E  6700 005E               4560                                              BEQ        ADDQ_An_indir_pinc_r3_out                       ;if equal go to output subroutine
00004022                          4561   
00004022  B4BC 0000001C           4562  ADDQ_An_indir_pinc_r4                       CMP.L      #match_ADDQ_An_indir_postinc_reg4,D2            ;check reg is equal to 4
00004028  6600 0006               4563                                              BNE        ADDQ_An_indir_pinc_r5                           ;if not try reg 5
0000402C  6700 005C               4564                                              BEQ        ADDQ_An_indir_pinc_r4_out                       ;if equal go to output subroutine
00004030                          4565  
00004030  B4BC 0000001D           4566  ADDQ_An_indir_pinc_r5                       CMP.L      #match_ADDQ_An_indir_postinc_reg5,D2            ;check reg is equal to 5
00004036  6600 0006               4567                                              BNE        ADDQ_An_indir_pinc_r6                           ;if not try reg 6
0000403A  6700 005A               4568                                              BEQ        ADDQ_An_indir_pinc_r5_out                       ;if equal go to output subroutine
0000403E                          4569  
0000403E  B4BC 0000001E           4570  ADDQ_An_indir_pinc_r6                       CMP.L      #match_ADDQ_An_indir_postinc_reg6,D2             ;check reg is equal to 6
00004044  6600 0006               4571                                              BNE        ADDQ_An_indir_pinc_r7                            ;if not try reg 7
00004048  6700 0058               4572                                              BEQ        ADDQ_An_indir_pinc_r6_out                        ;if equal go to output subroutine
0000404C                          4573  
0000404C  B4BC 0000001F           4574  ADDQ_An_indir_pinc_r7                       CMP.L      #match_ADDQ_An_indir_postinc_reg7,D2             ;check reg is equal to 7
00004052  6700 005A               4575                                              BEQ        ADDQ_An_indir_pinc_r7_out                        ;if equal go to output subroutine
00004056  6600 F60A               4576                                              BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
0000405A                          4577  
0000405A                          4578  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000405A  227C 000089CD           4579  ADDQ_An_indir_pinc_r0_out                       MOVE.L      #ea_indir_postinc_A0,A1                           ;load string constant into A1
00004060  4CDF 7CBE               4580                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004064  4E75                    4581                                                  RTS                                                         ;return to subroutine
00004066                          4582  
00004066  227C 000089D3           4583  ADDQ_An_indir_pinc_r1_out                       MOVE.L      #ea_indir_postinc_A1,A1                           ;load string constant into A1
0000406C  4CDF 7CBE               4584                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004070  4E75                    4585                                                  RTS                                                         ;return to subroutine
00004072                          4586  
00004072  227C 000089D9           4587  ADDQ_An_indir_pinc_r2_out                       MOVE.L      #ea_indir_postinc_A2,A1                           ;load string constant into A1
00004078  4CDF 7CBE               4588                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000407C  4E75                    4589                                                  RTS                                                         ;return to subroutine
0000407E                          4590  
0000407E  227C 000089DF           4591  ADDQ_An_indir_pinc_r3_out                       MOVE.L      #ea_indir_postinc_A3,A1                           ;load string constant into A1
00004084  4CDF 7CBE               4592                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004088  4E75                    4593                                                  RTS                                                         ;return to subroutine
0000408A                          4594  
0000408A  227C 000089E5           4595  ADDQ_An_indir_pinc_r4_out                       MOVE.L      #ea_indir_postinc_A4,A1                           ;load string constant into A1
00004090  4CDF 7CBE               4596                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004094  4E75                    4597                                                  RTS                                                         ;return to subroutine
00004096                          4598  
00004096  227C 000089EB           4599  ADDQ_An_indir_pinc_r5_out                       MOVE.L      #ea_indir_postinc_A5,A1                           ;load string constant into A1
0000409C  4CDF 7CBE               4600                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000040A0  4E75                    4601                                                  RTS                                                         ;return to subroutine
000040A2                          4602  
000040A2  227C 000089F1           4603  ADDQ_An_indir_pinc_r6_out                       MOVE.L      #ea_indir_postinc_A6,A1                           ;load string constant into A1
000040A8  4CDF 7CBE               4604                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000040AC  4E75                    4605                                                  RTS                                                         ;return to subroutine
000040AE                          4606  
000040AE  227C 000089F7           4607  ADDQ_An_indir_pinc_r7_out                       MOVE.L      #ea_indir_postinc_A7,A1                           ;load string constant into A1
000040B4  4CDF 7CBE               4608                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000040B8  4E75                    4609                                                  RTS                                                         ;return to subroutine
000040BA                          4610  
000040BA                          4611  ;------------------Address Register Indirect with Pre Decrement-----------------------
000040BA  B4BC 00000020           4612  ADDQ_An_indir_predec                        CMP.L      #match_ADDQ_An_indir_predec_reg0,D2           ;check reg is equal to 0
000040C0  6600 0006               4613                                              BNE        ADDQ_An_indir_pdec_r1                         ;if not try reg 1
000040C4  6700 0064               4614                                              BEQ        ADDQ_An_indir_pdec_r0_out                     ;if equal go to output subroutine
000040C8                          4615  
000040C8  B4BC 00000021           4616  ADDQ_An_indir_pdec_r1                       CMP.L      #match_ADDQ_An_indir_predec_reg1,D2           ;check reg is equal to 1
000040CE  6600 0006               4617                                              BNE        ADDQ_An_indir_pdec_r2                         ;if not try reg 2
000040D2  6700 0062               4618                                              BEQ        ADDQ_An_indir_pdec_r1_out                     ;if equal go to output subroutine
000040D6                          4619  
000040D6  B4BC 00000022           4620  ADDQ_An_indir_pdec_r2                       CMP.L      #match_ADDQ_An_indir_predec_reg2,D2           ;check reg is equal to 2
000040DC  6600 0006               4621                                              BNE        ADDQ_An_indir_pdec_r3                         ;if not try reg 3
000040E0  6700 0060               4622                                              BEQ        ADDQ_An_indir_pdec_r2_out                     ;if equal go to output subroutine
000040E4                          4623  
000040E4  B4BC 00000023           4624  ADDQ_An_indir_pdec_r3                       CMP.L      #match_ADDQ_An_indir_predec_reg3,D2           ;check reg is equal to 3
000040EA  6600 0006               4625                                              BNE        ADDQ_An_indir_pdec_r4                         ;if not try reg 4
000040EE  6700 005E               4626                                              BEQ        ADDQ_An_indir_pdec_r3_out                     ;if equal go to output subroutine
000040F2                          4627  
000040F2  B4BC 00000024           4628  ADDQ_An_indir_pdec_r4                       CMP.L      #match_ADDQ_An_indir_predec_reg4,D2           ;check reg is equal to 4
000040F8  6600 0006               4629                                              BNE        ADDQ_An_indir_pdec_r5                         ;if not try reg 5
000040FC  6700 005C               4630                                              BEQ        ADDQ_An_indir_pdec_r4_out                     ;if equal go to output subroutine
00004100                          4631  
00004100  B4BC 00000025           4632  ADDQ_An_indir_pdec_r5                       CMP.L      #match_ADDQ_An_indir_predec_reg5,D2           ;check reg is equal to 5
00004106  6600 0006               4633                                              BNE        ADDQ_An_indir_pdec_r6                         ;if not try reg 6
0000410A  6700 005A               4634                                              BEQ        ADDQ_An_indir_pdec_r5_out                     ;if equal go to output subroutine
0000410E                          4635  
0000410E  B4BC 00000026           4636  ADDQ_An_indir_pdec_r6                       CMP.L      #match_ADDQ_An_indir_predec_reg6,D2           ;check reg is equal to 6
00004114  6600 0006               4637                                              BNE        ADDQ_An_indir_pdec_r7                         ;if not try reg 7
00004118  6700 0058               4638                                              BEQ        ADDQ_An_indir_pdec_r6_out                     ;if equal go to output subroutine
0000411C                          4639  
0000411C  B4BC 00000027           4640  ADDQ_An_indir_pdec_r7                       CMP.L      #match_ADDQ_An_indir_predec_reg7,D2           ;check reg is equal to 7
00004122  6700 005A               4641                                              BEQ        ADDQ_An_indir_pdec_r7_out                    ;if equal go to output subroutine
00004126  6600 F53A               4642                                              BNE        ERROR                                        ;if not equal to an addresssing mode, pritn error
0000412A                          4643  
0000412A                          4644  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000412A  227C 000089FD           4645  ADDQ_An_indir_pdec_r0_out                   MOVE.L      #ea_indir_predec_A0,A1                        ;load string constant into A1
00004130  4CDF 7CBE               4646                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004134  4E75                    4647                                              RTS                                                     ;return to subroutine
00004136                          4648                                              
00004136  227C 00008A03           4649  ADDQ_An_indir_pdec_r1_out                   MOVE.L      #ea_indir_predec_A1,A1                      ;load string constant into A1
0000413C  4CDF 7CBE               4650                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004140  4E75                    4651                                              RTS                                                     ;return to subroutine
00004142                          4652  
00004142  227C 00008A09           4653  ADDQ_An_indir_pdec_r2_out                   MOVE.L      #ea_indir_predec_A2,A1                      ;load string constant into A1
00004148  4CDF 7CBE               4654                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000414C  4E75                    4655                                              RTS                                                     ;return to subroutine
0000414E                          4656  
0000414E  227C 00008A0F           4657  ADDQ_An_indir_pdec_r3_out                   MOVE.L      #ea_indir_predec_A3,A1                      ;load string constant into A1
00004154  4CDF 7CBE               4658                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004158  4E75                    4659                                              RTS                                                     ;return to subroutine
0000415A                          4660  
0000415A  227C 00008A15           4661  ADDQ_An_indir_pdec_r4_out                   MOVE.L      #ea_indir_predec_A4,A1                      ;load string constant into A1
00004160  4CDF 7CBE               4662                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004164  4E75                    4663                                              RTS                                                     ;return to subroutine
00004166                          4664  
00004166  227C 00008A1B           4665  ADDQ_An_indir_pdec_r5_out                   MOVE.L      #ea_indir_predec_A5,A1                      ;load string constant into A1
0000416C  4CDF 7CBE               4666                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004170  4E75                    4667                                              RTS                                                     ;return to subroutine
00004172                          4668  
00004172  227C 00008A21           4669  ADDQ_An_indir_pdec_r6_out                   MOVE.L      #ea_indir_predec_A6,A1                      ;load string constant into A1
00004178  4CDF 7CBE               4670                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000417C  4E75                    4671                                              RTS                                                     ;return to subroutine
0000417E                          4672  
0000417E  227C 00008A27           4673  ADDQ_An_indir_pdec_r7_out                   MOVE.L      #ea_indir_predec_A7,A1                      ;load string constant into A1
00004184  4CDF 7CBE               4674                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004188  4E75                    4675                                              RTS                                                     ;return to subroutine
0000418A                          4676  
0000418A                          4677  ;------------------Absolute Addressing Output-----------------------
0000418A  22FC 00008A37           4678  ADDQ_abs_add_word_out                    MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00004190  22C5                    4679                                           MOVE.L      D5,(A1)+                           ;load address                  
00004192  4CDF 7CBE               4680                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004196  4E75                    4681                                           RTS                                            :return to subroutine
00004198                          4682                                             
00004198                          4683  
00004198  2A18                    4684  ADDQ_abs_add_long_out                    MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000419A  22FC 00008A37           4685                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
000041A0  22C5                    4686                                           MOVE.L      D5,(A1)+                           ;load address                  
000041A2  4CDF 7CBE               4687                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000041A6  4E75                    4688                                           RTS                                           
000041A8                          4689  ;----------------------Error Handling----------------------------------------
000041A8                          4690  
000041A8                          4691  
000041A8  =00000038               4692  mask_ADDQ_ea_mode           EQU         $0038
000041A8  =0000003F               4693  mask_ADDQ_abs_add           EQU         $003F
000041A8  =0000003F               4694  mask_ADDQ_ea_reg_and_mode   EQU         $003F
000041A8  =00000E00               4695  mask_ADDQ_reg               EQU         $0E00
000041A8                          4696  
000041A8  =00000000               4697  match_ADDQ_Dn               EQU         $0000
000041A8  =00000008               4698  match_ADDQ_An               EQU         $0008
000041A8  =00000010               4699  match_ADDQ_An_indir         EQU         $0010
000041A8  =00000020               4700  match_ADDQ_An_indir_predec  EQU         $0020
000041A8  =00000018               4701  match_ADDQ_An_indir_postinc EQU         $0018
000041A8  =00000038               4702  match_ADDQ_abs_add_word     EQU         $0038
000041A8  =00000039               4703  match_ADDQ_abs_add_long     EQU         $0039
000041A8                          4704  
000041A8  =00000000               4705  match_ADDQ_D0               EQU         $0000
000041A8  =00000001               4706  match_ADDQ_D1               EQU         $0001
000041A8  =00000002               4707  match_ADDQ_D2               EQU         $0002
000041A8  =00000003               4708  match_ADDQ_D3               EQU         $0003
000041A8  =00000004               4709  match_ADDQ_D4               EQU         $0004
000041A8  =00000005               4710  match_ADDQ_D5               EQU         $0005
000041A8  =00000006               4711  match_ADDQ_D6               EQU         $0006
000041A8  =00000007               4712  match_ADDQ_D7               EQU         $0007
000041A8                          4713  
000041A8  =00000008               4714  match_ADDQ_A0               EQU         $0008
000041A8  =00000009               4715  match_ADDQ_A1               EQU         $0009
000041A8  =0000000A               4716  match_ADDQ_A2               EQU         $000A
000041A8  =0000000B               4717  match_ADDQ_A3               EQU         $000B
000041A8  =0000000C               4718  match_ADDQ_A4               EQU         $000C
000041A8  =0000000D               4719  match_ADDQ_A5               EQU         $000D
000041A8  =0000000E               4720  match_ADDQ_A6               EQU         $000E
000041A8  =0000000F               4721  match_ADDQ_A7               EQU         $000F
000041A8                          4722  
000041A8  =00000010               4723  match_ADDQ_An_indir_r0      EQU         $0010
000041A8  =00000011               4724  match_ADDQ_An_indir_r1      EQU         $0011
000041A8  =00000012               4725  match_ADDQ_An_indir_r2      EQU         $0012
000041A8  =00000013               4726  match_ADDQ_An_indir_r3      EQU         $0013
000041A8  =00000014               4727  match_ADDQ_An_indir_r4      EQU         $0014
000041A8  =00000015               4728  match_ADDQ_An_indir_r5      EQU         $0015
000041A8  =00000016               4729  match_ADDQ_An_indir_r6      EQU         $0016
000041A8  =00000017               4730  match_ADDQ_An_indir_r7      EQU         $0017
000041A8                          4731  
000041A8  =00000018               4732  match_ADDQ_An_indir_postinc_reg0        EQU         $0018
000041A8  =00000019               4733  match_ADDQ_An_indir_postinc_reg1        EQU         $0019
000041A8  =0000001A               4734  match_ADDQ_An_indir_postinc_reg2        EQU         $001A
000041A8  =0000001B               4735  match_ADDQ_An_indir_postinc_reg3        EQU         $001B
000041A8  =0000001C               4736  match_ADDQ_An_indir_postinc_reg4        EQU         $001C
000041A8  =0000001D               4737  match_ADDQ_An_indir_postinc_reg5        EQU         $001D
000041A8  =0000001E               4738  match_ADDQ_An_indir_postinc_reg6        EQU         $001E
000041A8  =0000001F               4739  match_ADDQ_An_indir_postinc_reg7        EQU         $001F
000041A8                          4740  
000041A8  =00000020               4741  match_ADDQ_An_indir_predec_reg0         EQU         $0020
000041A8  =00000021               4742  match_ADDQ_An_indir_predec_reg1         EQU         $0021
000041A8  =00000022               4743  match_ADDQ_An_indir_predec_reg2         EQU         $0022
000041A8  =00000023               4744  match_ADDQ_An_indir_predec_reg3         EQU         $0023
000041A8  =00000024               4745  match_ADDQ_An_indir_predec_reg4         EQU         $0024
000041A8  =00000025               4746  match_ADDQ_An_indir_predec_reg5         EQU         $0025
000041A8  =00000026               4747  match_ADDQ_An_indir_predec_reg6         EQU         $0026
000041A8  =00000027               4748  match_ADDQ_An_indir_predec_reg7         EQU         $0027
000041A8                          4749  
000041A8                          4750  
000041A8  =00000000               4751  match_ADDQ_reg0                         EQU         $0000
000041A8  =00000200               4752  match_ADDQ_reg1                         EQU         $0200
000041A8  =00000400               4753  match_ADDQ_reg2                         EQU         $0400
000041A8  =00000600               4754  match_ADDQ_reg3                         EQU         $0600
000041A8  =00000800               4755  match_ADDQ_reg4                         EQU         $0800
000041A8  =00000A00               4756  match_ADDQ_reg5                         EQU         $0A00
000041A8  =00000C00               4757  match_ADDQ_reg6                         EQU         $0C00
000041A8  =00000E00               4758  match_ADDQ_reg7                         EQU         $0E00
000041A8                          4759  
000041A8                          4760  
000041A8                          4761  
000041A8                          4762  
000041A8                          4763  
000041A8                          4764  
000041A8                          4765  
000041A8                          4766  -------------------- end include --------------------
000041A8                          4767              INCLUDE 'ASD Subroutine.x68'
000041A8                          4768  
000041A8  48E7 7D3E               4769  ASD_sub                          MOVEM.L           D1-D5/D7/A2-A6, -(SP)                     ;preserve the registers,\ 
000041AC                          4770                                   
000041AC                          4771  ;------------------------Determine Shift Type-----------------------------------------------------------------
000041AC  C2BC 000000C0           4772  shift_type                       AND.L              #mask_ASD_shift_type,D1                 ;load mask into D1
000041B2  B2BC 000000C0           4773                                   CMP.L              #match_ASD_mem_shift,D1                 ;check to see if memory shift
000041B8  6700 0006               4774                                   BEQ                ASD_mem_shift                               ;if equal go to mem shift subroutine
000041BC  6600 02F6               4775                                   BNE                ASD_reg_shift                               ;if ASD mem shift, go to reg shift
000041C0                          4776  
000041C0                          4777  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
000041C0  4241                    4778  ASD_mem_shift                    CLR               D1                                        ;clear shift mask
000041C2  C2BC 00000038           4779                                   AND.L             #mask_ASD_ea_mode,D1                      ;move the mask to D1
000041C8                          4780  
000041C8  B2BC 00000010           4781  ASD_An_indir                     CMP.L             #match_ASD_An_indir,D1                    ;check to see if mode is add reg indir
000041CE  6600 0014               4782                                   BNE               ASD_An_indir_predec                           ;if ASD, go check add reg indir predec 
000041D2  6700 0042               4783                                   BEQ               ASD_An_indir_reg                              ;if equal go figure out the register           
000041D6                          4784            
000041D6  B2BC 00000020           4785  ASD_An_indir_postinc             CMP.L             #match_ASD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
000041DC  6600 0006               4786                                   BNE               ASD_An_indir_predec                           ;if ASD go check add reg indir/predec
000041E0  6700 010C               4787                                   BEQ               ASD_An_indir_postinc_reg                      ;if equal go figure out the register
000041E4                          4788                        
000041E4  B2BC 00000018           4789  ASD_An_indir_predec              CMP.L             #match_ASD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
000041EA  6600 0006               4790                                   BNE               ASD_abs_add_word                              ;if ASD go check abs add word
000041EE  6700 01D6               4791                                   BEQ               ASD_An_indir_predec_reg                       ;if equal go figure out the register
000041F2                          4792  
000041F2  C4BC 0000003F           4793  ASD_abs_add_word                 AND.L             #mask_ASD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
000041F8                          4794                                   
000041F8  B4BC 00000039           4795                                   CMP.L             #match_ASD_abs_add_word,D2                ;check if abs add word
000041FE  2A18                    4796                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00004200  6600 0006               4797                                   BNE               ASD_abs_add_long                              ;if ASD go check abs add long
00004204  6700 0290               4798                                   BEQ               ASD_abs_add_word_out                          ;if equal go to output
00004208                          4799    
00004208  B4BC 0000003C           4800  ASD_abs_add_long                 CMP.L             #match_ASD_abs_add_long,D2                ;check to see if abs add long
0000420E  6700 0294               4801                                   BEQ               ASD_abs_add_long_out                          ;if equal go to output
00004212  6600 F44E               4802                                   BNE               ERROR                                     ;if ASD equal to an addresssing mode, pritn error
00004216                          4803                               
00004216                          4804  
00004216                          4805  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004216                          4806                                              
00004216                          4807  ;------------------Address Register Indirect-----------------------
00004216  4242                    4808  ASD_An_indir_reg                            CLR             D2                                      ;make sure D2 is empty
00004218  C4BC 0000003F           4809                                              AND.L           #mask_ASD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
0000421E                          4810                                              
0000421E  B4BC 00000010           4811                                              CMP.L           #match_ASD_An_indir_r0,D2              ;check reg is equal to 0
00004224  6600 0006               4812                                              BNE             ASD_An_indir_reg1                            ;if ASD try reg 1
00004228  6700 0064               4813                                              BEQ             ASD_An_indir_reg0_out                     ;if equal go to output subroutine
0000422C                          4814  
0000422C  B4BC 00000011           4815  ASD_An_indir_reg1                           CMP.L           #match_ASD_An_indir_r1,D2              ;check reg is equal to 1
00004232  6600 0006               4816                                              BNE             ASD_An_indir_reg2                            ;if ASD try reg 2
00004236  6700 0062               4817                                              BEQ             ASD_An_indir_reg1_out                     ;if equal go to output subroutine
0000423A                          4818  
0000423A  B4BC 00000012           4819  ASD_An_indir_reg2                           CMP.L           #match_ASD_An_indir_r2,D2              ;check reg is equal to 2
00004240  6600 0006               4820                                              BNE             ASD_An_indir_reg3                            ;if ASD try reg 3
00004244  6700 0060               4821                                              BEQ             ASD_An_indir_reg2_out                     ;if equal go to output subroutine
00004248                          4822  
00004248  B4BC 00000013           4823  ASD_An_indir_reg3                           CMP.L           #match_ASD_An_indir_r3,D2              ;check reg is equal to 3
0000424E  6600 0006               4824                                              BNE             ASD_An_indir_reg4                            ;if ASD try reg 4
00004252  6700 005E               4825                                              BEQ             ASD_An_indir_reg3_out                     ;if equal go to output subroutine
00004256                          4826  
00004256  B4BC 00000014           4827  ASD_An_indir_reg4                           CMP.L           #match_ASD_An_indir_r4,D2              ;check reg is equal to 4
0000425C  6600 0006               4828                                              BNE             ASD_An_indir_reg5                            ;if ASD try reg 5
00004260  6700 005C               4829                                              BEQ             ASD_An_indir_reg4_out                    ;if equal go to output subroutine
00004264                          4830  
00004264  B4BC 00000015           4831  ASD_An_indir_reg5                           CMP.L           #match_ASD_An_indir_r5,D2              ;check reg is equal to 5
0000426A  6600 0006               4832                                              BNE             ASD_An_indir_reg6                            ;if ASD try reg 6
0000426E  6700 005A               4833                                              BEQ             ASD_An_indir_reg5_out                     ;if equal go to output subroutine
00004272                          4834  
00004272  B4BC 00000016           4835  ASD_An_indir_reg6                           CMP.L           #match_ASD_An_indir_r6,D2              ;check reg is equal to 6
00004278  6700 005C               4836                                              BEQ             ASD_An_indir_reg6_out                     ;if equal go to output subroutine
0000427C  6600 0002               4837                                              BNE             ASD_An_indir_reg7                            ;if ASD try reg 7
00004280                          4838  
00004280  B4BC 00000017           4839  ASD_An_indir_reg7                           CMP.L           #match_ASD_An_indir_r7,D2              ;check reg is equal to 6
00004286  6700 005A               4840                                              BEQ             ASD_An_indir_reg7_out                     ;if equal go to output subroutine
0000428A  6600 F3D6               4841                                              BNE             ERROR                                        :if ASD equal to an addresssing mode, pritn error
0000428E                          4842  
0000428E                          4843  ;--------------------Address Register Indirect Output-----------------------
0000428E  227C 000089A5           4844  ASD_An_indir_reg0_out                       MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
00004294  4CDF 7CBE               4845                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004298  4E75                    4846                                              RTS                                                         ;return to subroutine
0000429A                          4847                                      
0000429A  227C 000089AA           4848  ASD_An_indir_reg1_out                       MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
000042A0  4CDF 7CBE               4849                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042A4  4E75                    4850                                              RTS                                                         ;return to subroutine
000042A6                          4851                                              
000042A6  227C 000089AF           4852  ASD_An_indir_reg2_out                       MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
000042AC  4CDF 7CBE               4853                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042B0  4E75                    4854                                              RTS                                                     ;return to subroutine
000042B2                          4855  
000042B2  227C 000089B4           4856  ASD_An_indir_reg3_out                       MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
000042B8  4CDF 7CBE               4857                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042BC  4E75                    4858                                              RTS                                                         ;return to subroutine
000042BE                          4859                                              
000042BE  227C 000089B9           4860  ASD_An_indir_reg4_out                       MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
000042C4  4CDF 7CBE               4861                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042C8  4E75                    4862                                              RTS                                                         ;return to subroutine
000042CA                          4863                                          
000042CA  227C 000089BE           4864  ASD_An_indir_reg5_out                       MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
000042D0  4CDF 7CBE               4865                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042D4  4E75                    4866                                              RTS                                                     ;return to subroutine
000042D6                          4867  
000042D6  227C 000089C3           4868  ASD_An_indir_reg6_out                       MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
000042DC  4CDF 7CBE               4869                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042E0  4E75                    4870                                              RTS                                                         ;return to subroutine
000042E2                          4871  
000042E2  227C 000089C8           4872  ASD_An_indir_reg7_out                       MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
000042E8  4CDF 7CBE               4873                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042EC  4E75                    4874                                              RTS                                                         ;return to subroutine
000042EE                          4875  
000042EE                          4876  
000042EE                          4877  ;------------------Address Register Indirect with Post Increment-----------------------
000042EE  4242                    4878  ASD_An_indir_postinc_reg                    CLR        D2                                      ;make sure D2 is empty
000042F0  C4BC 0000003F           4879                                              AND.L      #mask_ASD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
000042F6                          4880  
000042F6  B4BC 00000020           4881                                              CMP.L      #match_ASD_An_indir_postinc_r0,D2        ;check reg is equal to 0
000042FC  6600 0006               4882                                              BNE        ASD_An_indir_pinc_r1                      ;if ASD try reg 1
00004300  6700 0064               4883                                              BEQ        ASD_An_indir_pinc_r0_out               ;if equal go to output subroutine
00004304                          4884  
00004304  B4BC 00000021           4885  ASD_An_indir_pinc_r1                        CMP.L      #match_ASD_An_indir_postinc_r1,D2        ;check reg is equal to 1
0000430A  6600 0006               4886                                              BNE        ASD_An_indir_pinc_r2                      ;if ASD try reg 2
0000430E  6700 0062               4887                                              BEQ        ASD_An_indir_pinc_r1_out               ;if equal go to output subroutine
00004312                          4888  
00004312  B4BC 00000022           4889  ASD_An_indir_pinc_r2                        CMP.L      #match_ASD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00004318  6600 0006               4890                                              BNE        ASD_An_indir_pinc_r3                      ;if ASD try reg 3
0000431C  6700 0060               4891                                              BEQ        ASD_An_indir_pinc_r2_out               ;if equal go to output subroutine
00004320                          4892      
00004320  B4BC 00000023           4893  ASD_An_indir_pinc_r3                        CMP.L      #match_ASD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00004326  6600 0006               4894                                              BNE        ASD_An_indir_pinc_r4                      ;if ASD try reg 4
0000432A  6700 005E               4895                                              BEQ        ASD_An_indir_pinc_r3_out               ;if equal go to output subroutine
0000432E                          4896  
0000432E  B4BC 00000024           4897  ASD_An_indir_pinc_r4                        CMP.L      #match_ASD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00004334  6600 0006               4898                                              BNE        ASD_An_indir_pinc_r5                      ;if ASD try reg 5
00004338  6700 005C               4899                                              BEQ        ASD_An_indir_pinc_r4_out               ;if equal go to output subroutine
0000433C                          4900  
0000433C  B4BC 00000025           4901  ASD_An_indir_pinc_r5                        CMP.L      #match_ASD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00004342  6600 0006               4902                                              BNE        ASD_An_indir_pinc_r6                      ;if ASD try reg 6
00004346  6700 005A               4903                                              BEQ        ASD_An_indir_pinc_r5_out               ;if equal go to output subroutine
0000434A                          4904  
0000434A  B4BC 00000026           4905  ASD_An_indir_pinc_r6                        CMP.L      #match_ASD_An_indir_postinc_r6,D2        ;check reg is equal to 6
00004350  6700 005C               4906                                              BEQ        ASD_An_indir_pinc_r6_out              ;if equal go to output subroutine
00004354  6600 0002               4907                                              BNE        ASD_An_indir_pinc_r7
00004358                          4908  
00004358                          4909  
00004358  B4BC 00000026           4910  ASD_An_indir_pinc_r7                        CMP.L      #match_ASD_An_indir_postinc_r6,D2        ;check reg is equal to 6
0000435E  6700 005A               4911                                              BEQ        ASD_An_indir_pinc_r7_out              ;if equal go to output subroutine
00004362  6600 F2FE               4912                                              BNE        ERROR                                        :if ASD equal to an addresssing mode, pritn error
00004366                          4913  
00004366                          4914  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00004366  227C 000089D3           4915  ASD_An_indir_pinc_r0_out                        MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
0000436C  4CDF 7CBE               4916                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004370  4E75                    4917                                                  RTS                                             ;return to subroutine
00004372                          4918  
00004372  227C 000089D3           4919  ASD_An_indir_pinc_r1_out                        MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
00004378  4CDF 7CBE               4920                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000437C  4E75                    4921                                                  RTS                                             ;return to subroutine
0000437E                          4922  
0000437E  227C 000089D9           4923  ASD_An_indir_pinc_r2_out                        MOVE.L          #ea_indir_postinc_A2,A1         ;load string constant into A1
00004384  4CDF 7CBE               4924                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004388  4E75                    4925                                                  RTS                                             ;return to subroutine
0000438A                          4926  
0000438A  227C 000089DF           4927  ASD_An_indir_pinc_r3_out                        MOVE.L          #ea_indir_postinc_A3,A1         ;load string constant into A1
00004390  4CDF 7CBE               4928                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004394  4E75                    4929                                                  RTS                                             ;return to subroutine
00004396                          4930  
00004396  227C 000089E5           4931  ASD_An_indir_pinc_r4_out                        MOVE.L          #ea_indir_postinc_A4,A1         ;load string constant into A1
0000439C  4CDF 7CBE               4932                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000043A0  4E75                    4933                                                  RTS                                             ;return to subroutine
000043A2                          4934  
000043A2  227C 000089EB           4935  ASD_An_indir_pinc_r5_out                        MOVE.L          #ea_indir_postinc_A5,A1         ;load string constant into A1
000043A8  4CDF 7CBE               4936                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000043AC  4E75                    4937                                                  RTS                                             ;return to subroutine
000043AE                          4938   
000043AE  227C 000089F1           4939  ASD_An_indir_pinc_r6_out                        MOVE.L          #ea_indir_postinc_A6,A1         ;load string constant into A1
000043B4  4CDF 7CBE               4940                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000043B8  4E75                    4941                                                  RTS                                             ;return to subroutine
000043BA                          4942  
000043BA  227C 000089F7           4943  ASD_An_indir_pinc_r7_out                        MOVE.L          #ea_indir_postinc_A7,A1         ;load string constant into A1
000043C0  4CDF 7CBE               4944                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000043C4  4E75                    4945                                                  RTS                                             ;return to subroutine
000043C6                          4946  
000043C6                          4947                                                      
000043C6                          4948  ;------------------Address Register Indirect with Pre Decrement-----------------------
000043C6  B4BC 00000018           4949  ASD_An_indir_predec_reg                     CMP.L      #match_ASD_An_indir_predec_r0,D2         ;check reg is equal to 0
000043CC  6600 0006               4950                                              BNE        ASD_An_indir_pdec_r1                      ;if ASD try reg 1
000043D0  6700 0064               4951                                              BEQ        ASD_An_indir_pdec_r0_out               ;if equal go to output subroutine
000043D4                          4952  
000043D4  B4BC 00000019           4953  ASD_An_indir_pdec_r1                        CMP.L      #match_ASD_An_indir_predec_r1,D2         ;check reg is equal to 1
000043DA  6600 0006               4954                                              BNE        ASD_An_indir_pdec_r2                      ;if ASD try reg 2
000043DE  6700 0062               4955                                              BEQ        ASD_An_indir_pdec_r1_out               ;if equal go to output subroutine
000043E2                          4956  
000043E2  B4BC 0000001A           4957  ASD_An_indir_pdec_r2                        CMP.L      #match_ASD_An_indir_predec_r2,D2         ;check reg is equal to 2
000043E8  6600 0006               4958                                              BNE        ASD_An_indir_pdec_r3                      ;if ASD try reg 3
000043EC  6700 0060               4959                                              BEQ        ASD_An_indir_pdec_r2_out               ;if equal go to output subroutine
000043F0                          4960  
000043F0  B4BC 0000001B           4961  ASD_An_indir_pdec_r3                        CMP.L      #match_ASD_An_indir_predec_r3,D2         ;check reg is equal to 3
000043F6  6600 0006               4962                                              BNE        ASD_An_indir_pdec_r4                      ;if ASD try reg 4
000043FA  6700 005E               4963                                              BEQ        ASD_An_indir_pdec_r3_out               ;if equal go to output subroutine
000043FE                          4964  
000043FE  B4BC 0000001C           4965  ASD_An_indir_pdec_r4                        CMP.L      #match_ASD_An_indir_predec_r4,D2         ;check reg is equal to 4
00004404  6600 0006               4966                                              BNE        ASD_An_indir_pdec_r5                      ;if ASD try reg 5
00004408  6700 005C               4967                                              BEQ        ASD_An_indir_pdec_r4_out               ;if equal go to output subroutine
0000440C                          4968  
0000440C  B4BC 0000001D           4969  ASD_An_indir_pdec_r5                        CMP.L        #match_ASD_An_indir_predec_r5,D2         ;check reg is equal to 5
00004412  6600 0006               4970                                              BNE        ASD_An_indir_pdec_r6                      ;if ASD try reg 6
00004416  6700 005A               4971                                              BEQ        ASD_An_indir_pdec_r5_out               ;if equal go to output subroutine
0000441A                          4972  
0000441A  B4BC 0000001E           4973  ASD_An_indir_pdec_r6                        CMP.L        #match_ASD_An_indir_predec_r6,D2         ;check reg is equal to 6
00004420  6700 005C               4974                                              BEQ        ASD_An_indir_pdec_r6_out               ;if equal go to output subroutine
00004424  6600 0002               4975                                              BNE        ASD_An_indir_pdec_r7
00004428                          4976  
00004428  B4BC 0000001E           4977  ASD_An_indir_pdec_r7                        CMP.L        #match_ASD_An_indir_predec_r6,D2         ;check reg is equal to 6
0000442E  6700 005A               4978                                              BEQ        ASD_An_indir_pdec_r7_out               ;if equal go to output subroutine
00004432  6600 F22E               4979                                              BNE        ERROR                                        :if ASD equal to an addresssing mode, pritn error
00004436                          4980  
00004436                          4981  
00004436                          4982  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00004436  227C 000089FD           4983  ASD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
0000443C  4CDF 7CBE               4984                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004440  4E75                    4985                                              RTS                                                     ;return to subroutine
00004442                          4986  
00004442  227C 00008A03           4987  ASD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
00004448  4CDF 7CBE               4988                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000444C  4E75                    4989                                              RTS                                                     ;return to subroutine
0000444E                          4990                                                      
0000444E  227C 00008A09           4991  ASD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
00004454  4CDF 7CBE               4992                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004458  4E75                    4993                                              RTS                                                     ;return to subroutine
0000445A                          4994  
0000445A  227C 00008A0F           4995  ASD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
00004460  4CDF 7CBE               4996                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004464  4E75                    4997                                              RTS                                                     ;return to subroutine
00004466                          4998  
00004466  227C 00008A15           4999  ASD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
0000446C  4CDF 7CBE               5000                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004470  4E75                    5001                                              RTS                                                     ;return to subroutine
00004472                          5002      
00004472  227C 00008A1B           5003  ASD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00004478  4CDF 7CBE               5004                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000447C  4E75                    5005                                              RTS                                                     ;return to subroutine
0000447E                          5006      
0000447E  227C 00008A21           5007  ASD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
00004484  4CDF 7CBE               5008                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004488  4E75                    5009                                              RTS                                                     ;return to subroutine
0000448A                          5010  
0000448A  227C 00008A27           5011  ASD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
00004490  4CDF 7CBE               5012                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004494  4E75                    5013                                              RTS                                                     ;return to subroutine
00004496                          5014  
00004496                          5015                                                      
00004496                          5016  ;------------------Absolute Addressing Output-----------------------
00004496  22FC 00008A37           5017  ASD_abs_add_word_out                      MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000449C  22C5                    5018                                           MOVE.L      D5,(A1)+                           ;load address                  
0000449E  4CDF 7CBE               5019                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000044A2  4E75                    5020                                           RTS                                            :return to subroutine
000044A4                          5021                                             
000044A4                          5022  
000044A4  2A18                    5023  ASD_abs_add_long_out                      MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000044A6  22FC 00008A37           5024                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000044AC  22C5                    5025                                           MOVE.L      D5,(A1)+                           ;load address                  
000044AE  4CDF 7CBE               5026                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000044B2  4E75                    5027                                           RTS                                            :return to subroutine                                            
000044B4                          5028  ;----------------------Error Handling----------------------------------------
000044B4                          5029                                         ;return to subroutine
000044B4                          5030                                                  
000044B4                          5031  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
000044B4                          5032  ; determine if the shift is a data register or a immediate value
000044B4  4241                    5033  ASD_reg_shift                       CLR         D1                              ;clear D1
000044B6  C2BC 00000020           5034                                      AND.L       #mask_ASD_reg_shift_ir,D1           ;load the mask into D1
000044BC  B2BC 00000020           5035                                      CMP.L       #match_ASD_shift_reg,D1             ;check to see if the shift is a data register
000044C2  6700 0006               5036                                       BEQ         ASD_shift_reg                       ;if the shift is a register, go to subroutine
000044C6  6600 007A               5037                                      BNE         ASD_count_val                       ;if ASD go to immediate value subroutine
000044CA                          5038  
000044CA                          5039  ;i/r = 1, the shift is a Data register                                    
000044CA                          5040  ; this the subroutine for the data register shift
000044CA  4241                    5041  ASD_shift_reg                           CLR         D1                              ;clear D1
000044CC  C2BC 00000020           5042                                          AND.L       #mask_ASD_reg_shift,D1              ;load mask into D1 for bits 11-9
000044D2                          5043  
000044D2  B2BC 00000000           5044  ASD_count_reg0                          CMP.L       #match_ASD_count_reg0,D1            ;check to see if count/shift = 0
000044D8  6600 0006               5045                                          BNE         ASD_count_reg1                    ;if ASD go check 1
000044DC  6700 0134               5046                                          BEQ         ASD_count_reg0_out                ;got to output
000044E0                          5047                                      
000044E0  B2BC 00000200           5048  ASD_count_reg1                          CMP.L       #match_ASD_count_reg1,D1            ;check to see if count/shift = 1
000044E6  6600 0006               5049                                          BNE         ASD_count_reg2                    ;if ASD go check 2
000044EA  6700 0132               5050                                          BEQ         ASD_count_reg1_out                ;got to output
000044EE                          5051  
000044EE  B2BC 00000400           5052  ASD_count_reg2                          CMP.L       #match_ASD_count_reg2,D1            ;check to see if count/shift = 2
000044F4  6600 0006               5053                                          BNE         ASD_count_reg3                    ;if ASD go check 3
000044F8  6700 0130               5054                                          BEQ         ASD_count_reg2_out                ;got to output
000044FC                          5055  
000044FC  B2BC 00000600           5056  ASD_count_reg3                          CMP.L       #match_ASD_count_reg3,D1            ;check to see if count/shift = 3
00004502  6600 0006               5057                                          BNE         ASD_count_reg4                    ;if ASD go check 4
00004506  6700 012E               5058                                          BEQ         ASD_count_reg3_out                ;got to output
0000450A                          5059  
0000450A  B2BC 00000800           5060  ASD_count_reg4                          CMP.L       #match_ASD_count_reg4,D1            ;check to see if count/shift = 4
00004510  6600 0006               5061                                          BNE         ASD_count_reg5                    ;if ASD go check 5
00004514  6700 012C               5062                                          BEQ         ASD_count_reg4_out                ;got to output
00004518                          5063    
00004518  B2BC 00000A00           5064  ASD_count_reg5                          CMP.L       #match_ASD_count_reg5,D1            ;check to see if count/shift = 5
0000451E  6600 0006               5065                                          BNE         ASD_count_reg6                      ;if ASD go check 6
00004522  6700 012A               5066                                          BEQ         ASD_count_reg5_out                  ;got to output
00004526                          5067  
00004526  B2BC 00000C00           5068  ASD_count_reg6                          CMP.L       #match_ASD_count_reg6,D1            ;check to see if count/shift = 6
0000452C  6600 0006               5069                                          BNE         ASD_count_reg7                      ;if ASD go check 7
00004530  6700 0128               5070                                          BEQ         ASD_count_reg6_out                  ;got to output
00004534                          5071  
00004534  B2BC 00000E00           5072  ASD_count_reg7                          CMP.L       #match_ASD_count_reg7,D1            ;check to see if count/shift = 7
0000453A  6600 F126               5073                                          BNE         ERROR                           ; if none of the registers, then print error message
0000453E  6700 0126               5074                                          BEQ         ASD_count_reg7_out                  ;got to output
00004542                          5075  
00004542                          5076  
00004542                          5077  
00004542                          5078  ;i/r = 0, the shift is an immediate value
00004542                          5079  ;1-7 = 1-7
00004542                          5080  ;0 = 8
00004542                          5081  ; this is the subroutine for the immedite value shift
00004542  B2BC 00000000           5082  ASD_count_val                       CMP.L       #match_ASD_count_val0,D1          ;check to see if shift count is 0
00004548  6600 0006               5083                                      BNE         ASD_count_val1                    ;if ASD 0 check 1
0000454C  6700 0064               5084                                      BEQ         ASD_count_val0_out                ;if 0 got to output
00004550                          5085  
00004550  B2BC 00000200           5086  ASD_count_val1                      CMP.L       #match_ASD_count_val1,D1          ;check to see if shift count is 0
00004556  6600 0006               5087                                      BNE         ASD_count_val2                    ;if ASD 0 check 1
0000455A  6700 0062               5088                                      BEQ         ASD_count_val1_out                ;if 0 got to output
0000455E                          5089  
0000455E  B2BC 00000400           5090  ASD_count_val2                      CMP.L       #match_ASD_count_val2,D1          ;check to see if shift count is 0
00004564  6600 0006               5091                                      BNE         ASD_count_val3                    ;if ASD 0 check 1
00004568  6700 0060               5092                                      BEQ         ASD_count_val2_out                ;if 0 got to output
0000456C                          5093  
0000456C  B2BC 00000600           5094  ASD_count_val3                      CMP.L       #match_ASD_count_val3,D1          ;check to see if shift count is 0
00004572  6600 0006               5095                                      BNE         ASD_count_val4                    ;if ASD 0 check 1
00004576  6700 005E               5096                                      BEQ         ASD_count_val3_out                ;if 0 got to output
0000457A                          5097  
0000457A  B2BC 00000800           5098  ASD_count_val4                      CMP.L       #match_ASD_count_val4,D1          ;check to see if shift count is 0
00004580  6600 0006               5099                                      BNE         ASD_count_val5                    ;if ASD 0 check 1
00004584  6700 005C               5100                                      BEQ         ASD_count_val4_out                ;if 0 got to output
00004588                          5101  
00004588  B2BC 00000A00           5102  ASD_count_val5                      CMP.L       #match_ASD_count_val5,D1          ;check to see if shift count is 0
0000458E  6600 0006               5103                                      BNE         ASD_count_val6                    ;if ASD 0 check 1
00004592  6700 005A               5104                                      BEQ         ASD_count_val5_out                ;if 0 got to output
00004596                          5105  
00004596  B2BC 00000C00           5106  ASD_count_val6                      CMP.L       #match_ASD_count_val6,D1          ;check to see if shift count is 0
0000459C  6600 0006               5107                                      BNE         ASD_count_val7                    ;if ASD 0 check 1
000045A0  6700 0058               5108                                      BEQ         ASD_count_val6_out                ;if 0 got to output
000045A4                          5109  
000045A4  B2BC 00000E00           5110  ASD_count_val7                      CMP.L       #match_ASD_count_val7,D1          ;check to see if shift count is 0
000045AA  6600 F0B6               5111                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
000045AE  6700 0056               5112                                      BEQ         ASD_count_val7_out                ;if 0 got to output
000045B2                          5113  
000045B2                          5114  ;-----------------------------------Count Shift Immedite Value Output---------------------------
000045B2  227C 00008995           5115  ASD_count_val0_out                MOVE.L            #ea_val0,A1             ;load string constant into A1
000045B8  4EB9 00004672           5116                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000045BE                          5117                                
000045BE  227C 00008997           5118  ASD_count_val1_out                MOVE.L            #ea_val1,A1             ;load string constant into A1
000045C4  4EB9 00004672           5119                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000045CA                          5120  
000045CA  227C 00008999           5121  ASD_count_val2_out                MOVE.L            #ea_val2,A1             ;load string constant into A1
000045D0  4EB9 00004672           5122                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000045D6                          5123  
000045D6  227C 0000899B           5124  ASD_count_val3_out                MOVE.L            #ea_val3,A1             ;load string constant into A1
000045DC  4EB9 00004672           5125                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000045E2                          5126  
000045E2  227C 0000899D           5127  ASD_count_val4_out                MOVE.L            #ea_val4,A1             ;load string constant into A1
000045E8  4EB9 00004672           5128                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000045EE                          5129      
000045EE  227C 0000899F           5130  ASD_count_val5_out                MOVE.L            #ea_val5,A1             ;load string constant into A1
000045F4  4EB9 00004672           5131                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000045FA                          5132  
000045FA  227C 000089A1           5133  ASD_count_val6_out                MOVE.L            #ea_val6,A1             ;load string constant into A1
00004600  4EB9 00004672           5134                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004606                          5135  
00004606  227C 000089A3           5136  ASD_count_val7_out                MOVE.L            #ea_val7,A1             ;load string constant into A1
0000460C  4EB9 00004672           5137                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004612                          5138  
00004612                          5139  ;-------------------------Count Shift Output (Dn)-----------------------------------------
00004612  227C 00008965           5140  ASD_count_reg0_out                MOVE.L            #ea_D0,A1           ;load string constant into A1
00004618  4EB9 00004672           5141                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
0000461E                          5142                                
0000461E  227C 00008968           5143  ASD_count_reg1_out                MOVE.L            #ea_D1,A1           ;load string constant into A1
00004624  4EB9 00004672           5144                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
0000462A                          5145                                
0000462A  227C 0000896B           5146  ASD_count_reg2_out                MOVE.L            #ea_D2,A1           ;load string constant into A1
00004630  4EB9 00004672           5147                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004636                          5148                                
00004636  227C 0000896E           5149  ASD_count_reg3_out                MOVE.L            #ea_D3,A1           ;load string constant into A1
0000463C  4EB9 00004672           5150                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004642                          5151                                
00004642  227C 00008971           5152  ASD_count_reg4_out                MOVE.L            #ea_D4,A1           ;load string constant into A1
00004648  4EB9 00004672           5153                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
0000464E                          5154                                
0000464E  227C 00008974           5155  ASD_count_reg5_out                MOVE.L            #ea_D5,A1           ;load string constant into A1
00004654  4EB9 00004672           5156                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
0000465A                          5157                                
0000465A  227C 00008977           5158  ASD_count_reg6_out                MOVE.L            #ea_D6,A1           ;load string constant into A1
00004660  4EB9 00004672           5159                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004666                          5160                                
00004666  227C 0000897A           5161  ASD_count_reg7_out                MOVE.L            #ea_D7,A1           ;load string constant into A1
0000466C  4EB9 00004672           5162                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand                                    
00004672                          5163                                      
00004672                          5164                                      
00004672                          5165  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
00004672  4241                    5166  ASD_Dn0                         CLR             D1                  ;clear D1
00004674  C2BC 00000007           5167                                  AND.L           #mask_ASD_data_reg,D1   ;load data register mask for second operand
0000467A                          5168                                  
0000467A  B2BC 00000000           5169                                  CMP.L           #match_ASD_D_reg0,D1          ;check if data register is D0
00004680  6700 0068               5170                                  BEQ             ASD_D0_out              ;if equal got to output subroutine
00004684  6600 0002               5171                                  BNE             ASD_Dn1                 ;if ASD check D1
00004688                          5172                                  
00004688  B2BC 00000001           5173  ASD_Dn1                         CMP.L           #match_ASD_D_reg1,D1          ;check if data register is D0
0000468E  6700 0066               5174                                  BEQ             ASD_D1_out              ;if equal got to output subroutine
00004692  6600 0002               5175                                  BNE             ASD_Dn2                 ;if ASD check D2
00004696                          5176  
00004696  B2BC 00000002           5177  ASD_Dn2                         CMP.L           #match_ASD_D_reg2,D1          ;check if data register is D0
0000469C  6700 0064               5178                                  BEQ             ASD_D2_out              ;if equal got to output subroutine
000046A0  6600 0002               5179                                  BNE             ASD_Dn3                 ;if ASD check D3
000046A4                          5180  
000046A4  B2BC 00000003           5181  ASD_Dn3                         CMP.L           #match_ASD_D_reg3,D1          ;check if data register is D0
000046AA  6700 0062               5182                                  BEQ             ASD_D3_out              ;if equal got to output subroutine
000046AE  6600 0002               5183                                  BNE             ASD_Dn4                 ;if ASD check D4
000046B2                          5184  
000046B2  B2BC 00000004           5185  ASD_Dn4                         CMP.L           #match_ASD_D_reg4,D1          ;check if data register is D0
000046B8  6700 0060               5186                                  BEQ             ASD_D4_out              ;if equal got to output subroutine
000046BC  6600 0002               5187                                  BNE             ASD_Dn5                 ;if ASD check D5
000046C0                          5188  
000046C0  B2BC 00000005           5189  ASD_Dn5                         CMP.L           #match_ASD_D_reg5,D1          ;check if data register is D0
000046C6  6700 005E               5190                                  BEQ             ASD_D5_out              ;if equal got to output subroutine
000046CA  6600 0002               5191                                  BNE             ASD_Dn6                 ;if ASD check D6
000046CE                          5192  
000046CE  B2BC 00000006           5193  ASD_Dn6                         CMP.L           #match_ASD_D_reg6,D1          ;check if data register is D0
000046D4  6700 005C               5194                                  BEQ             ASD_D6_out              ;if equal got to output subroutine
000046D8  6600 0002               5195                                  BNE             ASD_Dn7                 ;if ASD check D7
000046DC                          5196  
000046DC  B2BC 00000007           5197  ASD_Dn7                         CMP.L           #match_ASD_D_reg7,D1          ;check if data register is D0
000046E2  6700 005A               5198                                  BEQ             ASD_D7_out              ;if equal got to output subroutine
000046E6  6600 EF7A               5199                                  BNE             ERROR               :if none of the registers go to error sub routine
000046EA                          5200                                  
000046EA                          5201                                  
000046EA                          5202  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
000046EA  227C 00008965           5203  ASD_D0_out                        MOVE.L            #ea_D0,A1           ;load string constant into A1
000046F0  4CDF 7CBE               5204                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000046F4  4E75                    5205                                   RTS                                    ;return to subroutine
000046F6                          5206  
000046F6  227C 00008968           5207  ASD_D1_out                        MOVE.L            #ea_D1,A1           ;load string constant into A1
000046FC  4CDF 7CBE               5208                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004700  4E75                    5209                                    RTS                                   ;return to subroutine
00004702                          5210  
00004702  227C 0000896B           5211  ASD_D2_out                        MOVE.L            #ea_D2,A1           ;load string constant into A1
00004708  4CDF 7CBE               5212                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000470C  4E75                    5213                                    RTS                                   ;return to subroutine
0000470E                          5214              
0000470E  227C 0000896E           5215  ASD_D3_out                        MOVE.L            #ea_D3,A1           ;load string constant into A1
00004714  4CDF 7CBE               5216                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004718  4E75                    5217                                    RTS                                   ;return to subroutine
0000471A                          5218  
0000471A  227C 00008971           5219  ASD_D4_out                        MOVE.L            #ea_D4,A1           ;load string constant into A1
00004720  4CDF 7CBE               5220                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004724  4E75                    5221                                    RTS                                   ;return to subroutine
00004726                          5222  
00004726  227C 00008974           5223  ASD_D5_out                        MOVE.L            #ea_D5,A1           ;load string constant into A1
0000472C  4CDF 7CBE               5224                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004730  4E75                    5225                                    RTS                                   ;return to subroutine
00004732                          5226  
00004732  227C 00008977           5227  ASD_D6_out                        MOVE.L            #ea_D6,A1           ;load string constant into A1
00004738  4CDF 7CBE               5228                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000473C  4E75                    5229                                    RTS                                   ;return to subroutine
0000473E                          5230  
0000473E  227C 0000897A           5231  ASD_D7_out                        MOVE.L            #ea_D7,A1           ;load string constant into A1
00004744  4CDF 7CBE               5232                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004748  4E75                    5233                                    RTS                                   ;return to subroutine
0000474A                          5234  
0000474A                          5235  
0000474A                          5236                                      
0000474A  =000000C0               5237  mask_ASD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
0000474A  =00000038               5238  mask_ASD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
0000474A  =0000003F               5239  mask_ASD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
0000474A  =0000003F               5240  mask_ASD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
0000474A  =00000020               5241  mask_ASD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
0000474A  =00000E00               5242  mask_ASD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
0000474A  =00000020               5243  mask_ASD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
0000474A  =00000007               5244  mask_ASD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
0000474A                          5245  
0000474A  =00000000               5246  match_ASD_D_reg0                                EQU             $0000               ;match for second operand data register 0
0000474A  =00000001               5247  match_ASD_D_reg1                                EQU             $0001               ;match for second operand data register 1
0000474A  =00000002               5248  match_ASD_D_reg2                                EQU             $0002               ;match for second operand data register 2
0000474A  =00000003               5249  match_ASD_D_reg3                                EQU             $0003               ;match for second operand data register 3
0000474A  =00000004               5250  match_ASD_D_reg4                                EQU             $0004               ;match for second operand data register 4
0000474A  =00000005               5251  match_ASD_D_reg5                                EQU             $0005               ;match for second operand data register 5
0000474A  =00000006               5252  match_ASD_D_reg6                                EQU             $0006               ;match for second operand data register 6
0000474A  =00000007               5253  match_ASD_D_reg7                                EQU             $0007               ;match for second operand data register 7
0000474A                          5254  
0000474A  =00000000               5255  match_ASD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
0000474A  =00000200               5256  match_ASD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
0000474A  =00000400               5257  match_ASD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
0000474A  =00000600               5258  match_ASD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
0000474A  =00000800               5259  match_ASD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
0000474A  =00000A00               5260  match_ASD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
0000474A  =00000C00               5261  match_ASD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
0000474A  =00000E00               5262  match_ASD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
0000474A                          5263  
0000474A  =00000020               5264  match_ASD_shift_reg                             EQU             $0020               ;match to for a register shift
0000474A  =00000000               5265  match_ASD_count_val0                            EQU             $0000               ;match for shift reg 0
0000474A  =00000200               5266  match_ASD_count_val1                           EQU             $0200               ;match for shift reg 1
0000474A  =00000400               5267  match_ASD_count_val2                            EQU             $0400               ;match for shift reg 2
0000474A  =00000600               5268  match_ASD_count_val3                            EQU             $0600               ;match for shift reg 3
0000474A  =00000800               5269  match_ASD_count_val4                            EQU             $0800               ;match for shift reg 4
0000474A  =00000A00               5270  match_ASD_count_val5                            EQU             $0A00               ;match for shift reg 5
0000474A  =00000C00               5271  match_ASD_count_val6                            EQU             $0C00               ;match for shift reg 6
0000474A  =00000E00               5272  match_ASD_count_val7                            EQU             $0E00               ;match for shift reg 7
0000474A                          5273  
0000474A  =00000020               5274  match_ASD_shift_count                           EQU             $0020
0000474A  =000000C0               5275  match_ASD_mem_shift                         EQU             $00C0              ;match for memory shift
0000474A  =00000010               5276  match_ASD_An_indir                          EQU             $0010              ;match for add reg indir
0000474A  =00000020               5277  match_ASD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
0000474A  =00000018               5278  match_ASD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
0000474A  =00000039               5279  match_ASD_abs_add_word                      EQU             $0039              ;match for word abs add 
0000474A  =0000003C               5280  match_ASD_abs_add_long                      EQU             $003C              ;match for long abs add
0000474A                          5281  
0000474A                          5282  
0000474A  =00000010               5283  match_ASD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
0000474A  =00000011               5284  match_ASD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
0000474A  =00000012               5285  match_ASD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
0000474A  =00000013               5286  match_ASD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
0000474A  =00000014               5287  match_ASD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
0000474A  =00000015               5288  match_ASD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
0000474A  =00000016               5289  match_ASD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
0000474A  =00000017               5290  match_ASD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
0000474A                          5291  
0000474A                          5292  
0000474A  =00000020               5293  match_ASD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
0000474A  =00000021               5294  match_ASD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
0000474A  =00000022               5295  match_ASD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
0000474A  =00000023               5296  match_ASD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
0000474A  =00000024               5297  match_ASD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
0000474A  =00000025               5298  match_ASD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
0000474A  =00000026               5299  match_ASD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
0000474A  =00000027               5300  match_ASD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
0000474A                          5301  
0000474A                          5302  
0000474A                          5303  
0000474A  =00000018               5304  match_ASD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
0000474A  =00000019               5305  match_ASD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
0000474A  =0000001A               5306  match_ASD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
0000474A  =0000001B               5307  match_ASD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
0000474A  =0000001C               5308  match_ASD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
0000474A  =0000001D               5309  match_ASD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
0000474A  =0000001E               5310  match_ASD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
0000474A  =0000001F               5311  match_ASD_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
0000474A                          5312  
0000474A                          5313  
0000474A                          5314  
0000474A                          5315  
0000474A                          5316  
0000474A                          5317  
0000474A                          5318  
0000474A                          5319  -------------------- end include --------------------
0000474A                          5320              INCLUDE 'JSR Subroutine.x68'
0000474A                          5321  
0000474A                          5322     
0000474A  48E7 7D3E               5323  JSR_sub                          MOVEM.L           D1-D5/D7/A2-A6, -(SP)                                    ;preserve the registers, 
0000474E  C2BC 00000038           5324                                   AND.L             #mask_JSR_ea_mode,D1                                   ;move the mask to D1
00004754                          5325  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004754  B2BC 00000010           5326  JSR_add_reg_indir                CMP.L             #match_JSR_An_indir,D1                       ;check to see if mode is add reg indir
0000475A  6600 0006               5327                                   BNE               JSR_abs_add_word                                 ;if not, go check add reg indir predec 
0000475E  6700 0026               5328                                   BEQ               JSR_An_indir_reg                                  ;if equal go figure out the register           
00004762                          5329             
00004762  C4BC 0000003F           5330  JSR_abs_add_word                 AND.L             #mask_JSR_abs_add,D2                          ;load mask to determine if abs add word or long
00004768                          5331                                   
00004768  B4BC 00000038           5332                                   CMP.L             #match_JSR_abs_add_word,D2                    ;check if abs add word
0000476E  2A18                    5333                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address 
00004770  6600 0006               5334                                   BNE               JSR_abs_add_long                                  ;if not go check abs add long
00004774  6700 00E6               5335                                   BEQ               JSR_abs_add_word_out                              ;if equal go to output
00004778                          5336    
00004778  B4BC 00000039           5337  JSR_abs_add_long                 CMP.L             #match_JSR_abs_add_long,D2                     ;check to see if abs add long
0000477E  6700 00EA               5338                                   BEQ               JSR_abs_add_long_out                               ;if equal go to output
00004782  6600 EEDE               5339                                   BNE               ERROR                                         ;if not equal go to error mesage sub routine
00004786                          5340  
00004786                          5341  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004786                          5342                                   
00004786                          5343                       
00004786                          5344  ;------------------Address Register Indirect-----------------------
00004786  C4BC 0000003F           5345  JSR_An_indir_reg                 AND.L           #mask_JSR_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
0000478C  B4BC 00000010           5346                                   CMP.L           #match_JSR_An_indir_r0,D2              ;check reg is equal to 0
00004792  6600 0006               5347                                   BNE             JSR_An_indir_reg1                           ;if not try reg 1
00004796  6700 0064               5348                                   BEQ             JSR_An_indir_reg0_out                       ;if equal go to output subroutine
0000479A                          5349  
0000479A  B4BC 00000011           5350  JSR_An_indir_reg1                CMP.L           #match_JSR_An_indir_r1,D2              ;check reg is equal to 1
000047A0  6600 0006               5351                                   BNE             JSR_An_indir_reg2                           ;if not try reg 2
000047A4  6700 0062               5352                                   BEQ             JSR_An_indir_reg1_out                       ;if equal go to output subroutine
000047A8                          5353  
000047A8  B4BC 00000012           5354  JSR_An_indir_reg2                CMP.L           #match_JSR_An_indir_r2,D2              ;check reg is equal to 2
000047AE  6600 0006               5355                                   BNE             JSR_An_indir_reg3                           ;if not try reg 3
000047B2  6700 0060               5356                                   BEQ             JSR_An_indir_reg2_out                       ;if equal go to output subroutine
000047B6                          5357  
000047B6  B4BC 00000013           5358  JSR_An_indir_reg3                CMP.L           #match_JSR_An_indir_r3,D2              ;check reg is equal to 3
000047BC  6600 0006               5359                                   BNE             JSR_An_indir_reg4                           ;if not try reg 4
000047C0  6700 005E               5360                                   BEQ             JSR_An_indir_reg3_out                       ;if equal go to output subroutine
000047C4                          5361      
000047C4  B4BC 00000014           5362  JSR_An_indir_reg4                CMP.L           #match_JSR_An_indir_r4,D2              ;check reg is equal to 4
000047CA  6600 0006               5363                                   BNE             JSR_An_indir_reg5                           ;if not try reg 5
000047CE  6700 005C               5364                                   BEQ             JSR_An_indir_reg4_out                       ;if equal go to output subroutine
000047D2                          5365          
000047D2  B4BC 00000015           5366  JSR_An_indir_reg5                CMP.L           #match_JSR_An_indir_r5,D2              ;check reg is equal to 5
000047D8  6600 0006               5367                                   BNE             JSR_An_indir_reg6                           ;if not try reg 6
000047DC  6700 005A               5368                                   BEQ             JSR_An_indir_reg5_out                       ;if equal go to output subroutine
000047E0                          5369  
000047E0  B4BC 00000016           5370  JSR_An_indir_reg6                CMP.L           #match_JSR_An_indir_r6,D2              ;check reg is equal to 6
000047E6  6600 0006               5371                                   BNE             JSR_An_indir_reg7                           ;if not try reg 7
000047EA  6700 0058               5372                                   BEQ             JSR_An_indir_reg6_out                       ;if equal go to output subroutine
000047EE                          5373  
000047EE  B4BC 00000017           5374  JSR_An_indir_reg7                CMP.L           #match_JSR_An_indir_r7,D2              ;check reg is equal to 7
000047F4  6700 005A               5375                                   BEQ             JSR_An_indir_reg7_out                       ;if equal go to output subroutine
000047F8  6600 EE68               5376                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
000047FC                          5377  
000047FC                          5378  ;--------------------Address Register Indirect Output-----------------------
000047FC  227C 000089A5           5379  JSR_An_indir_reg0_out                       MOVE.L          #ea_indir_A0,A1                 ;load string constant into A1
00004802  4CDF 7CBE               5380                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                         
00004806  4E75                    5381                                              RTS                                                 ;return to subroutine
00004808                          5382  
00004808  227C 000089AA           5383  JSR_An_indir_reg1_out                       MOVE.L          #ea_indir_A1,A1                 ;load string constant into A1
0000480E  4CDF 7CBE               5384                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004812  4E75                    5385                                              RTS                                                 ;return to subroutine
00004814                          5386  
00004814  227C 000089AF           5387  JSR_An_indir_reg2_out                       MOVE.L          #ea_indir_A2,A1                 ;load string constant into A1
0000481A  4CDF 7CBE               5388                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000481E  4E75                    5389                                              RTS                                                 ;return to subroutine
00004820                          5390  
00004820  227C 000089B4           5391  JSR_An_indir_reg3_out                       MOVE.L          #ea_indir_A3,A1                 ;load string constant into A1
00004826  4CDF 7CBE               5392                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000482A  4E75                    5393                                              RTS                                                 ;return to subroutine
0000482C                          5394  
0000482C  227C 000089B9           5395  JSR_An_indir_reg4_out                       MOVE.L          #ea_indir_A4,A1                 ;load string constant into A1
00004832  4CDF 7CBE               5396                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004836  4E75                    5397                                              RTS                                                 ;return to subroutine
00004838                          5398  
00004838  227C 000089BE           5399  JSR_An_indir_reg5_out                       MOVE.L          #ea_indir_A5,A1                 ;load string constant into A1
0000483E  4CDF 7CBE               5400                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004842  4E75                    5401                                              RTS                                                 ;return to subroutine
00004844                          5402  
00004844  227C 000089C3           5403  JSR_An_indir_reg6_out                       MOVE.L          #ea_indir_A6,A1                 ;load string constant into A1
0000484A  4CDF 7CBE               5404                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000484E  4E75                    5405                                              RTS                                                 ;return to subroutine
00004850                          5406                                          
00004850  227C 000089C8           5407  JSR_An_indir_reg7_out                       MOVE.L          #ea_indir_A7,A1                 ;load string constant into A1
00004856  4CDF 7CBE               5408                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000485A  4E75                    5409                                              RTS                                                 ;return to subroutine
0000485C                          5410  
0000485C                          5411  ;------------------Absolute Addressing Output-----------------------
0000485C  22FC 00008A37           5412  JSR_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00004862  22C5                    5413                                           MOVE.L      D5,(A1)+                           ;load address                  
00004864  4CDF 7CBE               5414                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004868  4E75                    5415                                           RTS                                            :return to subroutine
0000486A                          5416                                             
0000486A                          5417  
0000486A  2A18                    5418  JSR_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000486C  22FC 00008A37           5419                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004872  22C5                    5420                                           MOVE.L      D5,(A1)+                           ;load address                  
00004874  4CDF 7CBE               5421                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004878  4E75                    5422                                           RTS                                            :return to subroutine                                            
0000487A                          5423  
0000487A                          5424  
0000487A  =00000038               5425  mask_JSR_ea_mode                        EQU         $0038
0000487A  =0000003F               5426  mask_JSR_abs_add                        EQU         $003F
0000487A  =0000003F               5427  mask_JSR_ea_reg_and_mode                EQU         $003F
0000487A  =00000E00               5428  mask_JSR_An_reg                     EQU         $0E00
0000487A                          5429  
0000487A  =00000000               5430  match_JSR_Dn                            EQU         $0000
0000487A  =00000010               5431  match_JSR_An_indir                  EQU         $0010
0000487A  =00000038               5432  match_JSR_abs_add_word              EQU         $0038
0000487A  =00000039               5433  match_JSR_abs_add_long              EQU         $0039
0000487A                          5434  
0000487A  =00000000               5435  match_JSR_D0                            EQU         $0000
0000487A  =00000001               5436  match_JSR_D1                            EQU         $0001
0000487A  =00000002               5437  match_JSR_D2                            EQU         $0002
0000487A  =00000003               5438  match_JSR_D3                            EQU         $0003
0000487A  =00000004               5439  match_JSR_D4                            EQU         $0004
0000487A  =00000005               5440  match_JSR_D5                            EQU         $0005
0000487A  =00000006               5441  match_JSR_D6                            EQU         $0006
0000487A  =00000007               5442  match_JSR_D7                            EQU         $0007
0000487A                          5443  
0000487A  =00000010               5444  match_JSR_An_indir_r0               EQU         $0010
0000487A  =00000011               5445  match_JSR_An_indir_r1               EQU         $0011
0000487A  =00000012               5446  match_JSR_An_indir_r2               EQU         $0012
0000487A  =00000013               5447  match_JSR_An_indir_r3               EQU         $0013
0000487A  =00000014               5448  match_JSR_An_indir_r4               EQU         $0014
0000487A  =00000015               5449  match_JSR_An_indir_r5               EQU         $0015
0000487A  =00000016               5450  match_JSR_An_indir_r6               EQU         $0016
0000487A  =00000017               5451  match_JSR_An_indir_r7               EQU         $0017
0000487A                          5452  
0000487A                          5453  
0000487A                          5454  
0000487A                          5455  
0000487A                          5456  
0000487A                          5457  -------------------- end include --------------------
0000487A                          5458              INCLUDE 'LEA Subroutine.x68'
0000487A                          5459  
0000487A                          5460     
0000487A  48E7 7D3E               5461  LEA_sub                          MOVEM.L           D1-D5/D7/A2-A6, -(SP)                      ;preserve the registers, 
0000487E  C2BC 00000038           5462                                   AND.L             #mask_LEA_ea_mode,D1                         ;move the mask to D1
00004884                          5463  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004884  B2BC 00000010           5464  LEA_add_reg_indir                CMP.L             #match_LEA_An_indir,D1                       ;check to see if mode is add reg indir
0000488A  6600 0006               5465                                   BNE               LEA_abs_add_word                             ;if not, go check add reg indir predec 
0000488E  6700 0026               5466                                   BEQ               LEA_An_indir_reg                             ;if equal go figure out the register           
00004892                          5467             
00004892  C4BC 0000003F           5468  LEA_abs_add_word                 AND.L             #mask_LEA_abs_add,D2                         ;load mask to determine if abs add word or long
00004898                          5469                                   
00004898  B4BC 00000038           5470                                   CMP.L             #match_LEA_abs_add_word,D2                   ;check if abs add word
0000489E  2A18                    5471                                   MOVE.L            (A0)+,D5                                     ;pull the next word instruction that holds the address
000048A0  6600 0006               5472                                   BNE               LEA_abs_add_long                             ;if not go check abs add long
000048A4  6700 00E6               5473                                   BEQ               LEA_abs_add_word_out                         ;if equal go to output
000048A8                          5474    
000048A8  B4BC 00000039           5475  LEA_abs_add_long                 CMP.L             #match_LEA_abs_add_long,D2                   ;check to see if abs add long
000048AE  6700 00EA               5476                                   BEQ               LEA_abs_add_long_out                         ;if equal go to output
000048B2  6600 EDAE               5477                                   BNE               ERROR                                        ;if not equal go to error mesage sub routine
000048B6                          5478  
000048B6                          5479  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000048B6                          5480                                  
000048B6                          5481                                 
000048B6                          5482  ;------------------Address Register Indirect-----------------------
000048B6  C4BC 0000003F           5483  LEA_An_indir_reg                 AND.L           #mask_LEA_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register 
000048BC  B4BC 00000010           5484                                   CMP.L           #match_LEA_An_indir_r0,D2              ;check reg is equal to 0
000048C2  6600 0006               5485                                   BNE             LEA_An_indir_reg1                           ;if not try reg 1
000048C6  6700 0064               5486                                   BEQ             LEA_An_indir_reg0_out                       ;if equal go to output subroutine
000048CA                          5487  
000048CA  B4BC 00000011           5488  LEA_An_indir_reg1                CMP.L           #match_LEA_An_indir_r1,D2              ;check reg is equal to 1
000048D0  6600 0006               5489                                   BNE             LEA_An_indir_reg2                           ;if not try reg 2
000048D4  6700 0062               5490                                   BEQ             LEA_An_indir_reg1_out                       ;if equal go to output subroutine
000048D8                          5491  
000048D8  B4BC 00000012           5492  LEA_An_indir_reg2                CMP.L           #match_LEA_An_indir_r2,D2              ;check reg is equal to 2
000048DE  6600 0006               5493                                   BNE             LEA_An_indir_reg3                           ;if not try reg 3
000048E2  6700 0060               5494                                   BEQ             LEA_An_indir_reg2_out                       ;if equal go to output subroutine
000048E6                          5495  
000048E6  B4BC 00000013           5496  LEA_An_indir_reg3                CMP.L           #match_LEA_An_indir_r3,D2              ;check reg is equal to 3
000048EC  6600 0006               5497                                   BNE             LEA_An_indir_reg4                           ;if not try reg 4
000048F0  6700 005E               5498                                   BEQ             LEA_An_indir_reg3_out                       ;if equal go to output subroutine
000048F4                          5499      
000048F4  B4BC 00000014           5500  LEA_An_indir_reg4                CMP.L           #match_LEA_An_indir_r4,D2              ;check reg is equal to 4
000048FA  6600 0006               5501                                   BNE             LEA_An_indir_reg5                           ;if not try reg 5
000048FE  6700 005C               5502                                   BEQ             LEA_An_indir_reg4_out                       ;if equal go to output subroutine
00004902                          5503          
00004902  B4BC 00000015           5504  LEA_An_indir_reg5                CMP.L           #match_LEA_An_indir_r5,D2              ;check reg is equal to 5
00004908  6600 0006               5505                                   BNE             LEA_An_indir_reg6                           ;if not try reg 6
0000490C  6700 005A               5506                                   BEQ             LEA_An_indir_reg5_out                       ;if equal go to output subroutine
00004910                          5507  
00004910  B4BC 00000016           5508  LEA_An_indir_reg6                CMP.L           #match_LEA_An_indir_r6,D2              ;check reg is equal to 6
00004916  6600 0006               5509                                   BNE             LEA_An_indir_reg7                           ;if not try reg 7
0000491A  6700 0058               5510                                   BEQ             LEA_An_indir_reg6_out                       ;if equal go to output subroutine
0000491E                          5511  
0000491E  B4BC 00000017           5512  LEA_An_indir_reg7                CMP.L           #match_LEA_An_indir_r7,D2              ;check reg is equal to 7
00004924  6700 005A               5513                                   BEQ             LEA_An_indir_reg7_out                       ;if equal go to output subroutine
00004928  6600 ED38               5514                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
0000492C                          5515  
0000492C                          5516  ;--------------------Address Register Indirect Output-----------------------
0000492C  227C 000089A5           5517  LEA_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00004932  4EB9 000049AA           5518                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004938                          5519  
00004938  227C 000089AA           5520  LEA_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
0000493E  4EB9 000049AA           5521                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004944                          5522  
00004944  227C 000089AF           5523  LEA_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
0000494A  4EB9 000049AA           5524                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004950                          5525  
00004950  227C 000089B4           5526  LEA_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00004956  4EB9 000049AA           5527                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000495C                          5528  
0000495C  227C 000089B9           5529  LEA_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00004962  4EB9 000049AA           5530                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004968                          5531  
00004968  227C 000089BE           5532  LEA_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
0000496E  4EB9 000049AA           5533                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004974                          5534  
00004974  227C 000089C3           5535  LEA_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
0000497A  4EB9 000049AA           5536                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004980                          5537                                          
00004980  227C 000089C8           5538  LEA_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00004986  4EB9 000049AA           5539                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000498C                          5540  
0000498C                          5541  ;------------------Absolute Addressing Output-----------------------
0000498C  22FC 00008A37           5542  LEA_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004992  22C5                    5543                                           MOVE.L      D5,(A1)+                           ;load address                  
00004994  4EB9 000049AA           5544                                           JSR         LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000499A                          5545                                             
0000499A                          5546  
0000499A  2A18                    5547  LEA_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000499C  22FC 00008A37           5548                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000049A2  22C5                    5549                                           MOVE.L      D5,(A1)+                           ;load address                  
000049A4  4EB9 000049AA           5550                                           JSR         LEA_determine_second_op                 ;jump to subroutine to determine second operand
000049AA                          5551                                                
000049AA                          5552  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000049AA  4282                    5553  LEA_determine_second_op                         CLR.L       D2                                              ;clear D2 
000049AC  C4BC 00000E00           5554                                                  AND.L       #mask_LEA_An_reg,D2                             ;load the mask for the register into D2, masks bit 11-9
000049B2                          5555                                                  
000049B2  B4BC 00000000           5556  LEA_reg0                                        CMP.L       #match_LEA_reg0,D2                              ;check to see if reg equal 0
000049B8  6600 0006               5557                                                  BNE         LEA_reg1                                        ;if not equal got check reg 1
000049BC  6700 0064               5558                                                  BEQ         LEA_reg0_out                                    ;if equal go to output
000049C0                          5559                                                  
000049C0  B4BC 00000200           5560  LEA_reg1                                        CMP.L       #match_LEA_reg1,D2                              ;check to see if reg equal 1
000049C6  6600 0006               5561                                                  BNE         LEA_reg2                                        ;if not equal got check reg 2
000049CA  6700 0062               5562                                                  BEQ         LEA_reg1_out                                    ;if equal go to output
000049CE                          5563  
000049CE  B4BC 00000400           5564  LEA_reg2                                        CMP.L       #match_LEA_reg2,D2                              ;check to see if reg equal 2
000049D4  6600 0006               5565                                                  BNE         LEA_reg3                                        ;if not equal got check reg 3
000049D8  6700 0060               5566                                                  BEQ         LEA_reg2_out                                    ;if equal go to output
000049DC                          5567  
000049DC  B4BC 00000600           5568  LEA_reg3                                        CMP.L       #match_LEA_reg3,D2                              ;check to see if reg equal 3
000049E2  6600 0006               5569                                                  BNE         LEA_reg4                                        ;if not equal got check reg 4
000049E6  6700 005E               5570                                                  BEQ         LEA_reg3_out                                    ;if equal go to output
000049EA                          5571                                                  
000049EA  B4BC 00000800           5572  LEA_reg4                                        CMP.L       #match_LEA_reg4,D2                              ;check to see if reg equal 4
000049F0  6600 0006               5573                                                  BNE         LEA_reg5                                        ;if not equal got check reg 5
000049F4  6700 005C               5574                                                  BEQ         LEA_reg4_out                                    ;if equal go to output
000049F8                          5575  
000049F8  B4BC 00000A00           5576  LEA_reg5                                        CMP.L       #match_LEA_reg5,D2                              ;check to see if reg equal 5
000049FE  6600 0006               5577                                                  BNE         LEA_reg6                                        ;if not equal got check reg 6
00004A02  6700 005A               5578                                                  BEQ         LEA_reg5_out                                    ;if equal go to output
00004A06                          5579  
00004A06  B4BC 00000C00           5580  LEA_reg6                                        CMP.L       #match_LEA_reg6,D2                              ;check to see if reg equal 6
00004A0C  6600 0006               5581                                                  BNE         LEA_reg7                                        ;if not equal got check reg 7
00004A10  6700 0058               5582                                                  BEQ         LEA_reg6_out                                    ;if equal go to output          
00004A14                          5583  
00004A14  B4BC 00000E00           5584  LEA_reg7                                        CMP.L       #match_LEA_reg7,D2                              ;check to see if reg equal 7
00004A1A  6700 005A               5585                                                  BEQ         LEA_reg7_out                                    ;if equal go to output
00004A1E  6600 EC42               5586                                                  BNE         ERROR                                                       ;if not equal to an addresssing mode, pritn error
00004A22                          5587                                  
00004A22                          5588  
00004A22                          5589  ;--------------------Data Output-----------------------
00004A22  227C 0000897D           5590  LEA_reg0_out                                MOVE.L          #ea_A0,A1                                          ;load string constant into A1
00004A28  4CDF 7CBE               5591                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004A2C  4E75                    5592                                              RTS
00004A2E                          5593                                              
00004A2E  227C 00008980           5594  LEA_reg1_out                                MOVE.L          #ea_A1,A1                                       ;load string constant into A1
00004A34  4CDF 7CBE               5595                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004A38  4E75                    5596                                              RTS
00004A3A                          5597                                              
00004A3A  227C 00008983           5598  LEA_reg2_out                                MOVE.L          #ea_A2,A1                                       ;load string constant into A1
00004A40  4CDF 7CBE               5599                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004A44  4E75                    5600                                              RTS
00004A46                          5601                                              
00004A46  227C 00008986           5602  LEA_reg3_out                                MOVE.L          #ea_A3,A1                                           ;load string constant into A1
00004A4C  4CDF 7CBE               5603                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004A50  4E75                    5604                                              RTS
00004A52                          5605                                              
00004A52  227C 00008989           5606  LEA_reg4_out                                MOVE.L          #ea_A4,A1                                           ;load string constant into A1
00004A58  4CDF 7CBE               5607                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004A5C  4E75                    5608                                              RTS
00004A5E                          5609                                              
00004A5E  227C 0000898C           5610  LEA_reg5_out                                MOVE.L          #ea_A5,A1                                           ;load string constant into A1
00004A64  4CDF 7CBE               5611                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004A68  4E75                    5612                                              RTS
00004A6A                          5613                                              
00004A6A  227C 0000898F           5614  LEA_reg6_out                                MOVE.L          #ea_A6,A1                                           ;load string constant into A1
00004A70  4CDF 7CBE               5615                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004A74  4E75                    5616                                              RTS
00004A76                          5617                                              
00004A76  227C 00008992           5618  LEA_reg7_out                                MOVE.L          #ea_A7,A1                                           ;load string constant into A1
00004A7C  4CDF 7CBE               5619                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004A80  4E75                    5620                                              RTS             
00004A82                          5621  
00004A82  =00000038               5622  mask_LEA_ea_mode                        EQU         $0038
00004A82  =0000003F               5623  mask_LEA_abs_add                        EQU         $003F
00004A82  =0000003F               5624  mask_LEA_ea_reg_and_mode                EQU         $003F
00004A82  =00000E00               5625  mask_LEA_An_reg                     EQU         $0E00
00004A82                          5626  
00004A82  =00000010               5627  match_LEA_An_indir                      EQU         $0010
00004A82  =00000038               5628  match_LEA_abs_add_word                  EQU         $0038
00004A82  =00000039               5629  match_LEA_abs_add_long                  EQU         $0039
00004A82                          5630  
00004A82  =00000010               5631  match_LEA_An_indir_r0                   EQU         $0010
00004A82  =00000011               5632  match_LEA_An_indir_r1                   EQU         $0011
00004A82  =00000012               5633  match_LEA_An_indir_r2                   EQU         $0012
00004A82  =00000013               5634  match_LEA_An_indir_r3                   EQU         $0013
00004A82  =00000014               5635  match_LEA_An_indir_r4                   EQU         $0014
00004A82  =00000015               5636  match_LEA_An_indir_r5                   EQU         $0015
00004A82  =00000016               5637  match_LEA_An_indir_r6                   EQU         $0016
00004A82  =00000017               5638  match_LEA_An_indir_r7                   EQU         $0017
00004A82                          5639  
00004A82  =0000003C               5640  match_imm_add                           EQU         $003C
00004A82  =000000FC               5641  match_imm_add_word                      EQU         $00FC
00004A82  =000001FC               5642  match_imm_add_long                      EQU         $01FC
00004A82                          5643  
00004A82  =00000000               5644  match_LEA_reg0                          EQU         $0000
00004A82  =00000200               5645  match_LEA_reg1                          EQU         $0200
00004A82  =00000400               5646  match_LEA_reg2                          EQU         $0400
00004A82  =00000600               5647  match_LEA_reg3                          EQU         $0600
00004A82  =00000800               5648  match_LEA_reg4                          EQU         $0800
00004A82  =00000A00               5649  match_LEA_reg5                          EQU         $0A00
00004A82  =00000C00               5650  match_LEA_reg6                          EQU         $0C00
00004A82  =00000E00               5651  match_LEA_reg7                          EQU         $0E00
00004A82                          5652  
00004A82                          5653  
00004A82                          5654  
00004A82                          5655  
00004A82                          5656  
00004A82                          5657  
00004A82                          5658  
00004A82                          5659  
00004A82                          5660  -------------------- end include --------------------
00004A82                          5661              INCLUDE 'MOVE Subroutine.x68'
00004A82                          5662  
00004A82  48E7 7D3E               5663  MOVE_MOVE                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)                      ;preserve the registers, 
00004A86                          5664  
00004A86  C2BC 00000038           5665                                  AND.L             #mask_MOVE_src_ea_mode,D1                          ;move the mask to D1
00004A8C                          5666  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004A8C  B2BC 00000000           5667  MOVE_data_reg_dir               CMP.L             #match_MOVE_src_Dn,D1                              ;check to see if mode is data reg direct
00004A92  6600 0006               5668                                   BNE               MOVE_add_reg_indir                             ;if not, go check add reg dir
00004A96  6700 0056               5669                                   BEQ               MOVE_Dn_reg                                  ;if equal go figure out the register
00004A9A                          5670  
00004A9A  B2BC 00000010           5671  MOVE_add_reg_indir              CMP.L             #match_MOVE_src_An_indir,D1                        ;check to see if mode is add reg indir
00004AA0  6600 0006               5672                                   BNE               MOVE_add_reg_indir_predec                    ;if not, go check add reg indir predec 
00004AA4  6700 0118               5673                                   BEQ               MOVE_An_indir_reg                            ;if equal go figure out the register           
00004AA8                          5674             
00004AA8  B2BC 00000020           5675  MOVE_add_reg_indir_predec       CMP.L             #match_MOVE_src_An_indir_predec,D1                  ;check to see if mode is add reg indor w/ postinc
00004AAE  6600 0006               5676                                   BNE               MOVE_add_reg_indir_postinc                    ;if not go check add reg indir/predec
00004AB2  6700 02AA               5677                                   BEQ               MOVE_An_indir_predec                          ;if equal go figure out the register
00004AB6                          5678                        
00004AB6  B2BC 00000018           5679  MOVE_add_reg_indir_postinc      CMP.L             #match_MOVE_src_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00004ABC  6600 0006               5680                                   BNE               MOVE_abs_add_word                                  ;if not go check abs add word
00004AC0  6700 01CC               5681                                   BEQ               MOVE_An_indir_postinc_reg                          ;if equal go figure out the register
00004AC4                          5682  
00004AC4  C4BC 0000003F           5683  MOVE_abs_add_word               AND.L             #mask_MOVE_src_abs_add,D2                        ;load mask to determine if abs add word or long
00004ACA                          5684                                   
00004ACA  B4BC 00000038           5685                                   CMP.L             #match_MOVE_src_abs_add_word,D2                  ;check if abs add word
00004AD0  2A18                    5686                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00004AD2  6600 0006               5687                                   BNE               MOVE_abs_add_long                                  ;if not go check abs add long
00004AD6  6700 0356               5688                                   BEQ               MOVE_abs_add_word_out                              ;if equal go to output
00004ADA                          5689    
00004ADA  B4BC 00000039           5690  MOVE_abs_add_long               CMP.L             #match_MOVE_src_abs_add_long,D2                  ;check to see if abs add long
00004AE0  6700 035A               5691                                   BEQ               MOVE_abs_add_long_out                              ;if equal go to output
00004AE4  6600 0846               5692                                   BNE               MOVE_ERROR                                         ;if not equal go to error mesage MOVE routine
00004AE8                          5693  
00004AE8                          5694  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004AE8                          5695                                   
00004AE8  C4BC 0000003F           5696                                   AND.L              #mask_MOVE_src_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00004AEE                          5697  ;-----------------------------------Data Register Direct--------------------------------
00004AEE  B4BC 00000000           5698  MOVE_Dn_reg                    CMP.L              #match_MOVE_src_D0,D2                       ;check to see in the register is 0
00004AF4  6600 0006               5699                                   BNE                MOVE_rD1                                     ;if not go check register 1
00004AF8  6700 0064               5700                                   BEQ                MOVE_D0_out                              ;if equal go to output MOVEroutine
00004AFC                          5701  
00004AFC  B4BC 00000001           5702  MOVE_rD1                        CMP.L              #match_MOVE_src_D1,D2                       ;check to see in the register is 1
00004B02  6600 0006               5703                                   BNE                MOVE_rD2                                     ;if not go check register 2
00004B06  6700 0062               5704                                   BEQ                MOVE_D1_out                              ;if equal go to output MOVEroutine
00004B0A                          5705  
00004B0A  B4BC 00000002           5706  MOVE_rD2                        CMP.L              #match_MOVE_src_D2,D2                       ;check to see in the register is 2
00004B10  6600 0006               5707                                   BNE                MOVE_rD3                                     ;if not go check register 3
00004B14  6700 0060               5708                                   BEQ                MOVE_D2_out                              ;if equal go to output MOVEroutine
00004B18                          5709  
00004B18  B4BC 00000003           5710  MOVE_rD3                        CMP.L              #match_MOVE_src_D3,D2                       ;check to see in the register is 3
00004B1E  6600 0006               5711                                   BNE                MOVE_rD4                                     ;if not go check register 4
00004B22  6700 005E               5712                                   BEQ                MOVE_D3_out                              ;if equal go to output MOVEroutine
00004B26                          5713  
00004B26  B4BC 00000004           5714  MOVE_rD4                        CMP.L              #match_MOVE_src_D4,D2                       ;check to see in the register is 4
00004B2C  6600 0006               5715                                   BNE                MOVE_rD5                                     ;if not go check register 5
00004B30  6700 005C               5716                                   BEQ                MOVE_D4_out                              ;if equal go to output MOVEroutine
00004B34                          5717  
00004B34  B4BC 00000005           5718  MOVE_rD5                        CMP.L              #match_MOVE_src_D5,D2                       ;check to see in the register is 5
00004B3A  6600 0006               5719                                   BNE                MOVE_rD6                                     ;if not go check register 6
00004B3E  6700 005A               5720                                   BEQ                MOVE_D5_out                              ;if equal go to output MOVEroutine
00004B42                          5721  
00004B42  B4BC 00000006           5722  MOVE_rD6                        CMP.L              #match_MOVE_src_D6,D2                       ;check to see in the register is 6
00004B48  6600 0006               5723                                   BNE                MOVE_rD7                                     ;if not go check register 7
00004B4C  6700 0058               5724                                   BEQ                MOVE_D6_out                              ;if equal go to output MOVEroutine
00004B50                          5725  
00004B50  B4BC 00000007           5726  MOVE_rD7                        CMP.L              #match_MOVE_src_D7,D2                       ;check to see in the register is 7
00004B56  6700 005A               5727                                   BEQ                MOVE_D7_out                              ;if equal go to output MOVEroutine
00004B5A  6600 07D0               5728                                   BNE                MOVE_ERROR                               ;if not equal, got to error message
00004B5E                          5729  ;--------------------Data Register Direct Output-----------------------
00004B5E  227C 00008965           5730  MOVE_D0_out                    MOVE.L          #ea_D0,A1                            ;load string constant into A1
00004B64  4EB9 00004E4C           5731                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B6A                          5732  
00004B6A  227C 00008968           5733  MOVE_D1_out                    MOVE.L          #ea_D1,A1                            ;load string constant into A1
00004B70  4EB9 00004E4C           5734                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B76                          5735  
00004B76                          5736  
00004B76  227C 0000896B           5737  MOVE_D2_out                    MOVE.L          #ea_D2,A1                            ;load string constant into A1
00004B7C  4EB9 00004E4C           5738                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B82                          5739  
00004B82  227C 0000896E           5740  MOVE_D3_out                    MOVE.L           #ea_D3,A1                           ;load string constant into A1
00004B88  4EB9 00004E4C           5741                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B8E                          5742  
00004B8E                          5743  
00004B8E  227C 00008971           5744  MOVE_D4_out                    MOVE.L           #ea_D4,A1                           ;load string constant into A1
00004B94  4EB9 00004E4C           5745                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B9A                          5746  
00004B9A                          5747  
00004B9A  227C 00008974           5748  MOVE_D5_out                    MOVE.L           #ea_D5,A1                           ;load string constant into A1
00004BA0  4EB9 00004E4C           5749                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004BA6                          5750  
00004BA6                          5751  
00004BA6  227C 00008977           5752  MOVE_D6_out                    MOVE.L           #ea_D6,A1                           ;load string constant into A1
00004BAC  4EB9 00004E4C           5753                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004BB2                          5754  
00004BB2                          5755  
00004BB2  227C 0000897A           5756  MOVE_D7_out                    MOVE.L           #ea_D7,A1                           ;load string constant into A1
00004BB8  4EB9 00004E4C           5757                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004BBE                          5758  
00004BBE                          5759  ;------------------Address Register Indirect-----------------------
00004BBE  B4BC 00000010           5760  MOVE_An_indir_reg               CMP.L          #match_MOVE_src_An_indir_r0,D2              ;check reg is equal to 0
00004BC4  6600 0006               5761                                   BNE             MOVE_An_indir_reg1                           ;if not try reg 1
00004BC8  6700 0064               5762                                   BEQ             MOVE_An_indir_reg0_out                       ;if equal go to output MOVEroutine
00004BCC                          5763  
00004BCC  B4BC 00000011           5764  MOVE_An_indir_reg1              CMP.L           #match_MOVE_src_An_indir_r1,D2              ;check reg is equal to 1
00004BD2  6600 0006               5765                                   BNE             MOVE_An_indir_reg2                           ;if not try reg 2
00004BD6  6700 0062               5766                                   BEQ             MOVE_An_indir_reg1_out                       ;if equal go to output MOVEroutine
00004BDA                          5767  
00004BDA  B4BC 00000012           5768  MOVE_An_indir_reg2              CMP.L           #match_MOVE_src_An_indir_r2,D2              ;check reg is equal to 2
00004BE0  6600 0006               5769                                   BNE             MOVE_An_indir_reg3                           ;if not try reg 3
00004BE4  6700 0060               5770                                   BEQ             MOVE_An_indir_reg2_out                       ;if equal go to output MOVEroutine
00004BE8                          5771  
00004BE8  B4BC 00000013           5772  MOVE_An_indir_reg3              CMP.L           #match_MOVE_src_An_indir_r3,D2              ;check reg is equal to 3
00004BEE  6600 0006               5773                                   BNE             MOVE_An_indir_reg4                           ;if not try reg 4
00004BF2  6700 005E               5774                                   BEQ             MOVE_An_indir_reg3_out                       ;if equal go to output MOVEroutine
00004BF6                          5775      
00004BF6  B4BC 00000014           5776  MOVE_An_indir_reg4              CMP.L           #match_MOVE_src_An_indir_r4,D2              ;check reg is equal to 4
00004BFC  6600 0006               5777                                   BNE             MOVE_An_indir_reg5                           ;if not try reg 5
00004C00  6700 005C               5778                                   BEQ             MOVE_An_indir_reg4_out                       ;if equal go to output MOVEroutine
00004C04                          5779          
00004C04  B4BC 00000015           5780  MOVE_An_indir_reg5              CMP.L           #match_MOVE_src_An_indir_r5,D2              ;check reg is equal to 5
00004C0A  6600 0006               5781                                   BNE             MOVE_An_indir_reg6                           ;if not try reg 6
00004C0E  6700 005A               5782                                   BEQ             MOVE_An_indir_reg5_out                       ;if equal go to output MOVEroutine
00004C12                          5783  
00004C12  B4BC 00000016           5784  MOVE_An_indir_reg6              CMP.L           #match_MOVE_src_An_indir_r6,D2              ;check reg is equal to 6
00004C18  6600 0006               5785                                   BNE             MOVE_An_indir_reg7                           ;if not try reg 7
00004C1C  6700 0058               5786                                   BEQ             MOVE_An_indir_reg6_out                       ;if equal go to output MOVEroutine
00004C20                          5787  
00004C20  B4BC 00000017           5788  MOVE_An_indir_reg7              CMP.L           #match_MOVE_src_An_indir_r7,D2              ;check reg is equal to 7
00004C26  6700 005A               5789                                   BEQ             MOVE_An_indir_reg7_out                       ;if equal go to output MOVEroutine
00004C2A  6600 0700               5790                                   BNE             MOVE_ERROR                                   :if not equal to an addresssing mode, pritn error
00004C2E                          5791  
00004C2E                          5792  ;--------------------Address Register Indirect Output-----------------------
00004C2E  227C 000089A5           5793  MOVE_An_indir_reg0_out                 MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
00004C34  4EB9 00004E4C           5794                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C3A                          5795  
00004C3A  227C 000089AA           5796  MOVE_An_indir_reg1_out                 MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
00004C40  4EB9 00004E4C           5797                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C46                          5798  
00004C46  227C 000089AF           5799  MOVE_An_indir_reg2_out                 MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
00004C4C  4EB9 00004E4C           5800                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C52                          5801  
00004C52  227C 000089B4           5802  MOVE_An_indir_reg3_out                 MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
00004C58  4EB9 00004E4C           5803                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C5E                          5804  
00004C5E  227C 000089B9           5805  MOVE_An_indir_reg4_out                 MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
00004C64  4EB9 00004E4C           5806                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C6A                          5807  
00004C6A  227C 000089BE           5808  MOVE_An_indir_reg5_out                 MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
00004C70  4EB9 00004E4C           5809                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C76                          5810  
00004C76  227C 000089C3           5811  MOVE_An_indir_reg6_out                 MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
00004C7C  4EB9 00004E4C           5812                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C82                          5813                                          
00004C82  227C 000089C8           5814  MOVE_An_indir_reg7_out                 MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
00004C88  4EB9 00004E4C           5815                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C8E                          5816  
00004C8E                          5817  ;------------------Address Register Indirect with Post Increment-----------------------
00004C8E  B4BC 00000018           5818  MOVE_An_indir_postinc_reg                  CMP.L      #match_MOVE_src_An_indir_pinc_r0,D2        ;check reg is equal to 0
00004C94  6600 0006               5819                                              BNE        MOVE_An_indir_postinc_reg1                      ;if not try reg 1
00004C98  6700 0064               5820                                              BEQ        MOVE_An_indir_postinc_reg0_out               ;if equal go to output MOVEroutine
00004C9C                          5821  
00004C9C  B4BC 00000019           5822  MOVE_An_indir_postinc_reg1                 CMP.L      #match_MOVE_src_An_indir_pinc_r1,D2        ;check reg is equal to 1
00004CA2  6600 0006               5823                                              BNE        MOVE_An_indir_postinc_reg2                      ;if not try reg 2
00004CA6  6700 0062               5824                                              BEQ        MOVE_An_indir_postinc_reg1_out               ;if equal go to output MOVEroutine
00004CAA                          5825  
00004CAA  B4BC 0000001A           5826  MOVE_An_indir_postinc_reg2                 CMP.L      #match_MOVE_src_An_indir_pinc_r2,D2        ;check reg is equal to 2
00004CB0  6600 0006               5827                                              BNE        MOVE_An_indir_postinc_reg3                      ;if not try reg 3
00004CB4  6700 0060               5828                                              BEQ        MOVE_An_indir_postinc_reg2_out               ;if equal go to output MOVEroutine
00004CB8                          5829  
00004CB8  B4BC 0000001B           5830  MOVE_An_indir_postinc_reg3                 CMP.L      #match_MOVE_src_An_indir_pinc_r3,D2        ;check reg is equal to 3
00004CBE  6600 0006               5831                                              BNE        MOVE_An_indir_postinc_reg4                      ;if not try reg 4
00004CC2  6700 005E               5832                                              BEQ        MOVE_An_indir_postinc_reg3_out               ;if equal go to output MOVEroutine
00004CC6                          5833   
00004CC6  B4BC 0000001C           5834  MOVE_An_indir_postinc_reg4                 CMP.L      #match_MOVE_src_An_indir_pinc_r4,D2        ;check reg is equal to 4
00004CCC  6600 0006               5835                                              BNE        MOVE_An_indir_postinc_reg5                      ;if not try reg 5
00004CD0  6700 005C               5836                                              BEQ        MOVE_An_indir_postinc_reg4_out               ;if equal go to output MOVEroutine
00004CD4                          5837  
00004CD4  B4BC 0000001D           5838  MOVE_An_indir_postinc_reg5                 CMP.L      #match_MOVE_src_An_indir_pinc_r5,D2        ;check reg is equal to 5
00004CDA  6600 0006               5839                                              BNE        MOVE_An_indir_postinc_reg6                      ;if not try reg 6
00004CDE  6700 005A               5840                                              BEQ        MOVE_An_indir_postinc_reg5_out               ;if equal go to output MOVEroutine
00004CE2                          5841  
00004CE2  B4BC 0000001E           5842  MOVE_An_indir_postinc_reg6                 CMP.L      #match_MOVE_src_An_indir_pinc_r6,D2         ;check reg is equal to 6
00004CE8  6600 0006               5843                                              BNE        MOVE_An_indir_postinc_reg7                        ;if not try reg 7
00004CEC  6700 0058               5844                                              BEQ        MOVE_An_indir_postinc_reg6_out                    ;if equal go to output MOVEroutine
00004CF0                          5845  
00004CF0  B4BC 0000001F           5846  MOVE_An_indir_postinc_reg7                 CMP.L      #match_MOVE_src_An_indir_pinc_r7,D2         ;check reg is equal to 7
00004CF6  6700 005A               5847                                              BEQ        MOVE_An_indir_postinc_reg7_out                    ;if equal go to output MOVEroutine
00004CFA  6600 0630               5848                                              BNE        MOVE_ERROR                                        :if not equal to an addresssing mode, pritn error
00004CFE                          5849  
00004CFE                          5850  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00004CFE  227C 000089CD           5851  MOVE_An_indir_postinc_reg0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00004D04  4EB9 00004E4C           5852                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D0A                          5853  
00004D0A  227C 000089D3           5854  MOVE_An_indir_postinc_reg1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00004D10  4EB9 00004E4C           5855                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D16                          5856  
00004D16  227C 000089D9           5857  MOVE_An_indir_postinc_reg2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00004D1C  4EB9 00004E4C           5858                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D22                          5859  
00004D22  227C 000089DF           5860  MOVE_An_indir_postinc_reg3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00004D28  4EB9 00004E4C           5861                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D2E                          5862  
00004D2E  227C 000089E5           5863  MOVE_An_indir_postinc_reg4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00004D34  4EB9 00004E4C           5864                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D3A                          5865  
00004D3A  227C 000089EB           5866  MOVE_An_indir_postinc_reg5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00004D40  4EB9 00004E4C           5867                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D46                          5868  
00004D46  227C 000089F1           5869  MOVE_An_indir_postinc_reg6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00004D4C  4EB9 00004E4C           5870                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D52                          5871  
00004D52  227C 000089F7           5872  MOVE_An_indir_postinc_reg7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00004D58  4EB9 00004E4C           5873                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D5E                          5874  
00004D5E                          5875  ;------------------Address Register Indirect with Pre Decrement-----------------------
00004D5E  B4BC 00000020           5876  MOVE_An_indir_predec                       CMP.L      #match_MOVE_src_An_indir_prede_r0,D2       ;check reg is equal to 0
00004D64  6600 0006               5877                                              BNE        MOVE_An_indir_predec_reg1                      ;if not try reg 1
00004D68  6700 0064               5878                                              BEQ        MOVE_An_indir_predec_reg0_out               ;if equal go to output MOVEroutine
00004D6C                          5879  
00004D6C  B4BC 00000021           5880  MOVE_An_indir_predec_reg1                  CMP.L      #match_MOVE_src_An_indir_prede_r1,D2       ;check reg is equal to 1
00004D72  6600 0006               5881                                              BNE        MOVE_An_indir_predec_reg2                      ;if not try reg 2
00004D76  6700 0062               5882                                              BEQ        MOVE_An_indir_predec_reg1_out               ;if equal go to output MOVEroutine
00004D7A                          5883  
00004D7A  B4BC 00000022           5884  MOVE_An_indir_predec_reg2                  CMP.L      #match_MOVE_src_An_indir_prede_r2,D2       ;check reg is equal to 2
00004D80  6600 0006               5885                                              BNE        MOVE_An_indir_predec_reg3                      ;if not try reg 3
00004D84  6700 0060               5886                                              BEQ        MOVE_An_indir_predec_reg2_out               ;if equal go to output MOVEroutine
00004D88                          5887  
00004D88  B4BC 00000023           5888  MOVE_An_indir_predec_reg3                  CMP.L      #match_MOVE_src_An_indir_prede_r3,D2       ;check reg is equal to 3
00004D8E  6600 0006               5889                                              BNE        MOVE_An_indir_predec_reg4                      ;if not try reg 4
00004D92  6700 005E               5890                                              BEQ        MOVE_An_indir_predec_reg3_out               ;if equal go to output MOVEroutine
00004D96                          5891  
00004D96  B4BC 00000024           5892  MOVE_An_indir_predec_reg4                  CMP.L      #match_MOVE_src_An_indir_prede_r4,D2       ;check reg is equal to 4
00004D9C  6600 0006               5893                                              BNE        MOVE_An_indir_predec_reg5                      ;if not try reg 5
00004DA0  6700 005C               5894                                              BEQ        MOVE_An_indir_predec_reg4_out               ;if equal go to output MOVEroutine
00004DA4                          5895  
00004DA4  B4BC 00000025           5896  MOVE_An_indir_predec_reg5                  CMP.L      #match_MOVE_src_An_indir_prede_r5,D2       ;check reg is equal to 5
00004DAA  6600 0006               5897                                              BNE        MOVE_An_indir_predec_reg6                     ;if not try reg 6
00004DAE  6700 005A               5898                                              BEQ        MOVE_An_indir_predec_reg5_out               ;if equal go to output MOVEroutine
00004DB2                          5899  
00004DB2  B4BC 00000026           5900  MOVE_An_indir_predec_reg6                  CMP.L      #match_MOVE_src_An_indir_prede_r6,D2       ;check reg is equal to 6
00004DB8  6600 0006               5901                                              BNE        MOVE_An_indir_predec_reg7                     ;if not try reg 7
00004DBC  6700 0058               5902                                              BEQ        MOVE_An_indir_predec_reg6_out               ;if equal go to output MOVEroutine
00004DC0                          5903  
00004DC0  B4BC 00000027           5904  MOVE_An_indir_predec_reg7                  CMP.L      #match_MOVE_src_An_indir_prede_r7,D2       ;check reg is equal to 7
00004DC6  6700 005A               5905                                              BEQ        MOVE_An_indir_predec_reg7_out               ;if equal go to output MOVEroutine
00004DCA  6600 0560               5906                                              BNE        MOVE_ERROR                                    :if not equal to an addresssing mode, pritn error
00004DCE                          5907  
00004DCE                          5908  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00004DCE  227C 000089FD           5909  MOVE_An_indir_predec_reg0_out              MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00004DD4  4EB9 00004E4C           5910                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004DDA                          5911                                              
00004DDA  227C 00008A03           5912  MOVE_An_indir_predec_reg1_out              MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00004DE0  4EB9 00004E4C           5913                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004DE6                          5914  
00004DE6  227C 00008A09           5915  MOVE_An_indir_predec_reg2_out              MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00004DEC  4EB9 00004E4C           5916                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004DF2                          5917  
00004DF2  227C 00008A0F           5918  MOVE_An_indir_predec_reg3_out              MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00004DF8  4EB9 00004E4C           5919                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004DFE                          5920  
00004DFE  227C 00008A15           5921  MOVE_An_indir_predec_reg4_out              MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00004E04  4EB9 00004E4C           5922                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004E0A                          5923  
00004E0A  227C 00008A1B           5924  MOVE_An_indir_predec_reg5_out              MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00004E10  4EB9 00004E4C           5925                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004E16                          5926  
00004E16  227C 00008A21           5927  MOVE_An_indir_predec_reg6_out              MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00004E1C  4EB9 00004E4C           5928                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004E22                          5929  
00004E22  227C 00008A27           5930  MOVE_An_indir_predec_reg7_out              MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00004E28  4EB9 00004E4C           5931                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004E2E                          5932          
00004E2E                          5933  ;------------------Absolute Addressing Output-----------------------
00004E2E  22FC 00008A37           5934  MOVE_abs_add_word_out                MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004E34  22C5                    5935                                        MOVE.L      D5,(A1)+                           ;load address                  
00004E36  4CDF 7CBE               5936                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004E3A  4E75                    5937                                       RTS                                            :return to MOVEroutine
00004E3C                          5938                                             
00004E3C                          5939  
00004E3C  2A18                    5940  MOVE_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00004E3E  22FC 00008A37           5941                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004E44  22C5                    5942                                        MOVE.L      D5,(A1)+                           ;load address                  
00004E46  4CDF 7CBE               5943                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004E4A  4E75                    5944                                        RTS                                            :return to MOVEroutine                                            
00004E4C                          5945  
00004E4C  4241                    5946  MOVE_determine_second_op                CLR         D1
00004E4E                          5947  
00004E4E  C2BC 000001C0           5948                                   AND.L             #mask_MOVE_dest_ea_mode,D1                                   ;move the mask to D1
00004E54                          5949  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004E54  B2BC 00000000           5950  MOVE_dest_data_reg_dir           CMP.L             #match_MOVE_dest_Dn,D1                             ;check to see if mode is data reg direct
00004E5A  6600 0006               5951                                   BNE               MOVE_dest_add_reg_dir                                   ;if not, go check add reg dir
00004E5E  6700 006E               5952                                   BEQ               MOVE_dest_Dn_reg                                        ;if equal go figure out the register
00004E62                          5953  
00004E62  B2BC 00000040           5954  MOVE_dest_add_reg_dir            CMP.L             #match_MOVE_dest_An,D1                             ;check if mode is add reg direct
00004E68  6600 0006               5955                                   BNE               MOVE_dest_add_reg_indir                                 ;if not, go check add reg indir
00004E6C  6700 0130               5956                                   BEQ               MOVE_dest_An_reg                                        ;if equal go figure out the reg
00004E70                          5957   
00004E70  B2BC 00000080           5958  MOVE_dest_add_reg_indir          CMP.L             #match_MOVE_dest_An_indir,D1                       ;check to see if mode is add reg indir
00004E76  6600 0006               5959                                   BNE               MOVE_dest_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00004E7A  6700 01F2               5960                                   BEQ               MOVE_dest_An_indir_reg                                  ;if equal go figure out the register           
00004E7E                          5961             
00004E7E  B2BC 00000100           5962  MOVE_dest_add_reg_indir_predec   CMP.L             #match_MOVE_dest_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00004E84  6600 0006               5963                                   BNE               MOVE_dest_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00004E88  6700 0384               5964                                   BEQ               MOVE_dest_An_indir_predec                               ;if equal go figure out the register
00004E8C                          5965                        
00004E8C  B2BC 000000C0           5966  MOVE_dest_add_reg_indir_postinc  CMP.L             #match_MOVE_dest_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00004E92  6600 0006               5967                                   BNE               MOVE_dest_abs_add_word                                  ;if not go check abs add word
00004E96  6700 02A6               5968                                   BEQ               MOVE_dest_An_indir_pinc_r                          ;if equal go figure out the register
00004E9A                          5969  
00004E9A  C4BC 000001C0           5970  MOVE_dest_abs_add_word           AND.L             #mask_MOVE_dest_abs_add,D2                         ;load mask to determine if abs add word or long
00004EA0                          5971                                   
00004EA0  B4BC 000001C0           5972                                   CMP.L             #match_MOVE_dest_abs_add_word,D2                   ;check if abs add word
00004EA6  2A18                    5973                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00004EA8  6600 0006               5974                                   BNE               MOVE_dest_abs_add_long                                  ;if not go check abs add long
00004EAC  6700 0430               5975                                   BEQ               MOVE_dest_abs_add_word_out                              ;if equal go to output
00004EB0                          5976    
00004EB0  B4BC 000009C0           5977  MOVE_dest_abs_add_long           CMP.L             #match_MOVE_dest_abs_add_long,D2                    ;check to see if abs add long
00004EB6  6700 0434               5978                                   BEQ               MOVE_dest_abs_add_long_out                               ;if equal go to output
00004EBA                          5979                                   
00004EBA  B2BC 000001C0           5980  MOVE_dest_immediate_add          CMP.L             #match_MOVE_dest_imm_add,D1                                ;check if immediate address
00004EC0  6700 043A               5981                                   BEQ               MOVE_dest_immediate_add_out                                    ;if equal go to immediate add MOVE routine
00004EC4  6600 0466               5982                                   BNE               MOVE_ERROR                                            ;if not equal go to error mesage MOVE routine
00004EC8                          5983  
00004EC8                          5984  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004EC8                          5985                                   
00004EC8  C4BC 00000FC0           5986                                   AND.L              #mask_MOVE_dest_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00004ECE                          5987  ;-----------------------------------Data Register Direct--------------------------------
00004ECE  B4BC 00000000           5988  MOVE_dest_Dn_reg                 CMP.L              #match_MOVE_dest_D0,D2                       ;check to see in the register is 0
00004ED4  6600 0006               5989                                   BNE                MOVE_dest_rD1                                     ;if not go check register 1
00004ED8  6700 0064               5990                                   BEQ                MOVE_dest_D0_out                              ;if equal go to output MOVEroutine
00004EDC                          5991  
00004EDC  B4BC 00000200           5992  MOVE_dest_rD1                    CMP.L              #match_MOVE_dest_D1,D2                       ;check to see in the register is 1
00004EE2  6600 0006               5993                                   BNE                MOVE_dest_rD2                                     ;if not go check register 2
00004EE6  6700 0062               5994                                   BEQ                MOVE_dest_D1_out                              ;if equal go to output MOVEroutine
00004EEA                          5995  
00004EEA  B4BC 00000400           5996  MOVE_dest_rD2                    CMP.L              #match_MOVE_dest_D2,D2                       ;check to see in the register is 2
00004EF0  6600 0006               5997                                   BNE                MOVE_dest_rD3                                     ;if not go check register 3
00004EF4  6700 0060               5998                                   BEQ                MOVE_dest_D2_out                              ;if equal go to output MOVEroutine
00004EF8                          5999  
00004EF8  B4BC 00000600           6000  MOVE_dest_rD3                    CMP.L              #match_MOVE_dest_D3,D2                       ;check to see in the register is 3
00004EFE  6600 0006               6001                                   BNE                MOVE_dest_rD4                                     ;if not go check register 4
00004F02  6700 005E               6002                                   BEQ                MOVE_dest_D3_out                              ;if equal go to output MOVEroutine
00004F06                          6003  
00004F06  B4BC 00000800           6004  MOVE_dest_rD4                    CMP.L              #match_MOVE_dest_D4,D2                       ;check to see in the register is 4
00004F0C  6600 0006               6005                                   BNE                MOVE_dest_rD5                                     ;if not go check register 5
00004F10  6700 005C               6006                                   BEQ                MOVE_dest_D4_out                              ;if equal go to output MOVEroutine
00004F14                          6007  
00004F14  B4BC 00000A00           6008  MOVE_dest_rD5                    CMP.L              #match_MOVE_dest_D5,D2                       ;check to see in the register is 5
00004F1A  6600 0006               6009                                   BNE                MOVE_dest_rD6                                     ;if not go check register 6
00004F1E  6700 005A               6010                                   BEQ                MOVE_dest_D5_out                              ;if equal go to output MOVEroutine
00004F22                          6011  
00004F22  B4BC 00000C00           6012  MOVE_dest_rD6                    CMP.L              #match_MOVE_dest_D6,D2                       ;check to see in the register is 6
00004F28  6600 0006               6013                                   BNE                MOVE_dest_rD7                                     ;if not go check register 7
00004F2C  6700 0058               6014                                   BEQ                MOVE_dest_D6_out                              ;if equal go to output MOVEroutine
00004F30                          6015  
00004F30  B4BC 00000E00           6016  MOVE_dest_rD7                    CMP.L              #match_MOVE_dest_D7,D2                       ;check to see in the register is 7
00004F36  6700 005A               6017                                   BEQ                MOVE_dest_D7_out                              ;if equal go to output MOVEroutine
00004F3A  6600 03F0               6018                                   BNE                MOVE_ERROR                               ;if not equal, got to error message
00004F3E                          6019  ;--------------------Data Register Direct Output-----------------------
00004F3E  227C 00008965           6020  MOVE_dest_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
00004F44  4CDF 7CBE               6021                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F48  4E75                    6022                                  RTS
00004F4A                          6023  
00004F4A  227C 00008968           6024  MOVE_dest_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
00004F50  4CDF 7CBE               6025                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F54  4E75                    6026                                  RTS
00004F56                          6027  
00004F56  227C 0000896B           6028  MOVE_dest_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
00004F5C  4CDF 7CBE               6029                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F60  4E75                    6030                                  RTS
00004F62                          6031  
00004F62  227C 0000896E           6032  MOVE_dest_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
00004F68  4CDF 7CBE               6033                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F6C  4E75                    6034                                  RTS
00004F6E                          6035  
00004F6E  227C 00008971           6036  MOVE_dest_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
00004F74  4CDF 7CBE               6037                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F78  4E75                    6038                                  RTS
00004F7A                          6039  
00004F7A  227C 00008974           6040  MOVE_dest_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00004F80  4CDF 7CBE               6041                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F84  4E75                    6042                                  RTS
00004F86                          6043  
00004F86  227C 00008977           6044  MOVE_dest_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00004F8C  4CDF 7CBE               6045                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F90  4E75                    6046                                  RTS
00004F92                          6047  
00004F92  227C 0000897A           6048  MOVE_dest_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00004F98  4CDF 7CBE               6049                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F9C  4E75                    6050                                  RTS
00004F9E                          6051  
00004F9E                          6052  ;------------------Address Register Direct-----------------------
00004F9E  B4BC 00000040           6053  MOVE_dest_An_reg                  CMP.L           #match_MOVE_dest_A0,D2                      ;check reg is equal to 0
00004FA4  6600 0006               6054                                   BNE             MOVE_dest_rA1                                  ;if not try reg 1
00004FA8  6700 0134               6055                                   BEQ             MOVE_dest_An_indir_reg0_out                     ;if equal go to output MOVEroutine
00004FAC                          6056  
00004FAC  B4BC 00000240           6057  MOVE_dest_rA1                     CMP.L           #match_MOVE_dest_A1,D2                      ;check reg is equal to 1
00004FB2  6600 0006               6058                                   BNE             MOVE_dest_rA2                                  ;if not try reg 2
00004FB6  6700 0132               6059                                   BEQ             MOVE_dest_An_indir_reg1_out                     ;if equal go to output MOVEroutine
00004FBA                          6060  
00004FBA  B4BC 00000440           6061  MOVE_dest_rA2                     CMP.L           #match_MOVE_dest_A2,D2                     ;check reg is equal to 2
00004FC0  6600 0006               6062                                   BNE             MOVE_dest_rA3                                  ;if not try reg 3
00004FC4  6700 0130               6063                                   BEQ             MOVE_dest_An_indir_reg2_out                     ;if equal go to output MOVEroutine
00004FC8                          6064  
00004FC8  B4BC 00000640           6065  MOVE_dest_rA3                     CMP.L           #match_MOVE_dest_A3,D2                       ;check reg is equal to 3
00004FCE  6600 0006               6066                                   BNE             MOVE_dest_rA4                                    ;if not try reg 4
00004FD2  6700 012E               6067                                   BEQ             MOVE_dest_An_indir_reg3_out                     ;if equal go to output MOVEroutine
00004FD6                          6068  
00004FD6  B4BC 00000840           6069  MOVE_dest_rA4                     CMP.L           #match_MOVE_dest_A4,D2                       ;check reg is equal to 4
00004FDC  6600 0006               6070                                   BNE             MOVE_dest_rA5                                    ;if not try reg 5
00004FE0  6700 012C               6071                                   BEQ             MOVE_dest_An_indir_reg4_out                     ;if equal go to output MOVEroutine
00004FE4                          6072              
00004FE4  B4BC 00000A40           6073  MOVE_dest_rA5                     CMP.L           #match_MOVE_dest_A5,D2                      ;check reg is equal to 5
00004FEA  6600 0006               6074                                   BNE             MOVE_dest_rA6                                  ;if not try reg 6
00004FEE  6700 012A               6075                                   BEQ             MOVE_dest_An_indir_reg5_out                     ;if equal go to output MOVEroutine
00004FF2                          6076  
00004FF2  B4BC 00000C40           6077  MOVE_dest_rA6                     CMP.L           #match_MOVE_dest_A6,D2                                     ;check reg is equal to 6
00004FF8  6600 0006               6078                                   BNE             MOVE_dest_rA7                                  ;if not try reg 7
00004FFC  6700 0128               6079                                   BEQ             MOVE_dest_An_indir_reg6_out                     ;if equal go to output MOVEroutine
00005000                          6080  
00005000  B4BC 00000E40           6081  MOVE_dest_rA7                     CMP.L           #match_MOVE_dest_A7,D2                      ;check reg is equal to 7
00005006  6700 012A               6082                                   BEQ             MOVE_dest_An_indir_reg7_out                      ;if equal go to output MOVEroutine
0000500A  6600 0320               6083                                   BNE             MOVE_ERROR                                  :if not equal to an addresssing mode, pritn error
0000500E                          6084  
0000500E                          6085  ;--------------------Address Register Direct Output-----------------------
0000500E  227C 0000897D           6086  MOVE_dest_A0_out                 MOVE.L         #ea_A0,A1                           ;load string constant into A1
00005014  4CDF 7CBE               6087                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005018  4E75                    6088                                  RTS
0000501A                          6089                                  
0000501A  227C 00008980           6090  MOVE_dest_A1_out                 MOVE.L         #ea_A1,A1                           ;load string constant into A1
00005020  4CDF 7CBE               6091                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005024  4E75                    6092                                  RTS
00005026                          6093                                  
00005026  227C 00008983           6094  MOVE_dest_A2_out                 MOVE.L         #ea_A2,A1                           ;load string constant into A1
0000502C  4CDF 7CBE               6095                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005030  4E75                    6096                                  RTS
00005032                          6097                                  
00005032  227C 00008986           6098  MOVE_dest_A3_out                 MOVE.L         #ea_A3,A1                           ;load string constant into A1
00005038  4CDF 7CBE               6099                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000503C  4E75                    6100                                  RTS
0000503E                          6101  
0000503E  227C 00008989           6102  MOVE_dest_A4_out                 MOVE.L         #ea_A4,A1                           ;load string constant into A1
00005044  4CDF 7CBE               6103                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005048  4E75                    6104                                  RTS
0000504A                          6105  
0000504A  227C 0000898C           6106  MOVE_dest_A5_out                 MOVE.L         #ea_A5,A1                           ;load string constant into A1
00005050  4CDF 7CBE               6107                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005054  4E75                    6108                                  RTS
00005056                          6109  
00005056  227C 0000898F           6110  MOVE_dest_A6_out                 MOVE.L         #ea_A6,A1                           ;load string constant into A1
0000505C  4CDF 7CBE               6111                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005060  4E75                    6112                                  RTS
00005062                          6113  
00005062  227C 00008992           6114  MOVE_dest_A7_out                 MOVE.L         #ea_A7,A1                           ;load string constant into A1
00005068  4CDF 7CBE               6115                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000506C  4E75                    6116                                  RTS
0000506E                          6117  
0000506E                          6118  ;------------------Address Register Indirect-----------------------
0000506E  B4BC 00000080           6119  MOVE_dest_An_indir_reg            CMP.L          #match_MOVE_dest_An_indir_r0,D2              ;check reg is equal to 0
00005074  6600 0006               6120                                   BNE             MOVE_dest_An_indir_reg1                           ;if not try reg 1
00005078  6700 0064               6121                                   BEQ             MOVE_dest_An_indir_reg0_out                       ;if equal go to output MOVEroutine
0000507C                          6122  
0000507C  B4BC 00000280           6123  MOVE_dest_An_indir_reg1           CMP.L           #match_MOVE_dest_An_indir_r1,D2              ;check reg is equal to 1
00005082  6600 0006               6124                                   BNE             MOVE_dest_An_indir_reg2                           ;if not try reg 2
00005086  6700 0062               6125                                   BEQ             MOVE_dest_An_indir_reg1_out                       ;if equal go to output MOVEroutine
0000508A                          6126  
0000508A  B4BC 00000480           6127  MOVE_dest_An_indir_reg2           CMP.L           #match_MOVE_dest_An_indir_r2,D2              ;check reg is equal to 2
00005090  6600 0006               6128                                   BNE             MOVE_dest_An_indir_reg3                           ;if not try reg 3
00005094  6700 0060               6129                                   BEQ             MOVE_dest_An_indir_reg2_out                       ;if equal go to output MOVEroutine
00005098                          6130  
00005098  B4BC 00000680           6131  MOVE_dest_An_indir_reg3           CMP.L           #match_MOVE_dest_An_indir_r3,D2              ;check reg is equal to 3
0000509E  6600 0006               6132                                   BNE             MOVE_dest_An_indir_reg4                           ;if not try reg 4
000050A2  6700 005E               6133                                   BEQ             MOVE_dest_An_indir_reg3_out                       ;if equal go to output MOVEroutine
000050A6                          6134      
000050A6  B4BC 00000880           6135  MOVE_dest_An_indir_reg4           CMP.L           #match_MOVE_dest_An_indir_r4,D2              ;check reg is equal to 4
000050AC  6600 0006               6136                                   BNE             MOVE_dest_An_indir_reg5                           ;if not try reg 5
000050B0  6700 005C               6137                                   BEQ             MOVE_dest_An_indir_reg4_out                       ;if equal go to output MOVEroutine
000050B4                          6138          
000050B4  B4BC 00000A80           6139  MOVE_dest_An_indir_reg5           CMP.L           #match_MOVE_dest_An_indir_r5,D2              ;check reg is equal to 5
000050BA  6600 0006               6140                                   BNE             MOVE_dest_An_indir_reg6                           ;if not try reg 6
000050BE  6700 005A               6141                                   BEQ             MOVE_dest_An_indir_reg5_out                       ;if equal go to output MOVEroutine
000050C2                          6142  
000050C2  B4BC 00000C80           6143  MOVE_dest_An_indir_reg6           CMP.L           #match_MOVE_dest_An_indir_r6,D2              ;check reg is equal to 6
000050C8  6600 0006               6144                                   BNE             MOVE_dest_An_indir_reg7                           ;if not try reg 7
000050CC  6700 0058               6145                                   BEQ             MOVE_dest_An_indir_reg6_out                       ;if equal go to output MOVEroutine
000050D0                          6146  
000050D0  B4BC 00000E80           6147  MOVE_dest_An_indir_reg7           CMP.L           #match_MOVE_dest_An_indir_r7,D2              ;check reg is equal to 7
000050D6  6700 005A               6148                                   BEQ             MOVE_dest_An_indir_reg7_out                       ;if equal go to output MOVEroutine
000050DA  6600 0250               6149                                   BNE             MOVE_ERROR                                   :if not equal to an addresssing mode, pritn error
000050DE                          6150  
000050DE                          6151  ;--------------------Address Register Indirect Output-----------------------
000050DE  227C 000089A5           6152  MOVE_dest_An_indir_reg0_out                     MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
000050E4  4CDF 7CBE               6153                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000050E8  4E75                    6154                                                  RTS
000050EA                          6155  
000050EA  227C 000089AA           6156  MOVE_dest_An_indir_reg1_out                     MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
000050F0  4CDF 7CBE               6157                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000050F4  4E75                    6158                                                  RTS
000050F6                          6159  
000050F6  227C 000089AF           6160  MOVE_dest_An_indir_reg2_out                     MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
000050FC  4CDF 7CBE               6161                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005100  4E75                    6162                                                  RTS
00005102                          6163  
00005102  227C 000089B4           6164  MOVE_dest_An_indir_reg3_out                     MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00005108  4CDF 7CBE               6165                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000510C  4E75                    6166                                                  RTS
0000510E                          6167  
0000510E  227C 000089B9           6168  MOVE_dest_An_indir_reg4_out                     MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00005114  4CDF 7CBE               6169                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005118  4E75                    6170                                                  RTS
0000511A                          6171  
0000511A  227C 000089BE           6172  MOVE_dest_An_indir_reg5_out                     MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00005120  4CDF 7CBE               6173                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005124  4E75                    6174                                                  RTS
00005126                          6175  
00005126  227C 000089C3           6176  MOVE_dest_An_indir_reg6_out                     MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
0000512C  4CDF 7CBE               6177                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005130  4E75                    6178                                                  RTS
00005132                          6179                                          
00005132  227C 000089C8           6180  MOVE_dest_An_indir_reg7_out                     MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00005138  4CDF 7CBE               6181                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000513C  4E75                    6182                                                  RTS
0000513E                          6183  
0000513E                          6184  ;------------------Address Register Indirect with Post Increment-----------------------
0000513E  B4BC 000000C0           6185  MOVE_dest_An_indir_pinc_r                    CMP.L      #match_MOVE_dest_An_indir_pinc_r0,D2        ;check reg is equal to 0
00005144  6600 0006               6186                                              BNE        MOVE_dest_An_indir_pinc_r1                      ;if not try reg 1
00005148  6700 0064               6187                                              BEQ        MOVE_dest_An_indir_pinc_r0_out               ;if equal go to output MOVEroutine
0000514C                          6188  
0000514C  B4BC 000002C0           6189  MOVE_dest_An_indir_pinc_r1                   CMP.L      #match_MOVE_dest_An_indir_pinc_r1,D2        ;check reg is equal to 1
00005152  6600 0006               6190                                              BNE        MOVE_dest_An_indir_pinc_r2                      ;if not try reg 2
00005156  6700 0062               6191                                              BEQ        MOVE_dest_An_indir_pinc_r1_out               ;if equal go to output MOVEroutine
0000515A                          6192  
0000515A  B4BC 000004C0           6193  MOVE_dest_An_indir_pinc_r2                   CMP.L      #match_MOVE_dest_An_indir_pinc_r2,D2        ;check reg is equal to 2
00005160  6600 0006               6194                                              BNE        MOVE_dest_An_indir_pinc_r3                      ;if not try reg 3
00005164  6700 0060               6195                                              BEQ        MOVE_dest_An_indir_pinc_r2_out               ;if equal go to output MOVEroutine
00005168                          6196  
00005168  B4BC 000006C0           6197  MOVE_dest_An_indir_pinc_r3                   CMP.L      #match_MOVE_dest_An_indir_pinc_r3,D2        ;check reg is equal to 3
0000516E  6600 0006               6198                                              BNE        MOVE_dest_An_indir_pinc_r4                      ;if not try reg 4
00005172  6700 005E               6199                                              BEQ        MOVE_dest_An_indir_pinc_r3_out               ;if equal go to output MOVEroutine
00005176                          6200   
00005176  B4BC 000008C0           6201  MOVE_dest_An_indir_pinc_r4                   CMP.L      #match_MOVE_dest_An_indir_pinc_r4,D2        ;check reg is equal to 4
0000517C  6600 0006               6202                                              BNE        MOVE_dest_An_indir_pinc_r5                      ;if not try reg 5
00005180  6700 005C               6203                                              BEQ        MOVE_dest_An_indir_pinc_r4_out               ;if equal go to output MOVEroutine
00005184                          6204  
00005184  B4BC 00000AC0           6205  MOVE_dest_An_indir_pinc_r5                   CMP.L      #match_MOVE_dest_An_indir_pinc_r5,D2        ;check reg is equal to 5
0000518A  6600 0006               6206                                              BNE        MOVE_dest_An_indir_pinc_r6                      ;if not try reg 6
0000518E  6700 005A               6207                                              BEQ        MOVE_dest_An_indir_pinc_r5_out               ;if equal go to output MOVEroutine
00005192                          6208      
00005192  B4BC 00000CC0           6209  MOVE_dest_An_indir_pinc_r6                   CMP.L      #match_MOVE_dest_An_indir_pinc_r6,D2         ;check reg is equal to 6
00005198  6600 0006               6210                                              BNE        MOVE_dest_An_indir_pinc_r7                        ;if not try reg 7
0000519C  6700 0058               6211                                              BEQ        MOVE_dest_An_indir_pinc_r6_out                    ;if equal go to output MOVEroutine
000051A0                          6212  
000051A0  B4BC 00000EC0           6213  MOVE_dest_An_indir_pinc_r7                   CMP.L      #match_MOVE_dest_An_indir_pinc_r7,D2         ;check reg is equal to 7
000051A6  6700 005A               6214                                              BEQ        MOVE_dest_An_indir_pinc_r7_out                    ;if equal go to output MOVEroutine
000051AA  6600 0180               6215                                              BNE        MOVE_ERROR                                        :if not equal to an addresssing mode, pritn error
000051AE                          6216  
000051AE                          6217  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000051AE  227C 000089CD           6218  MOVE_dest_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
000051B4  4CDF 7CBE               6219                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051B8  4E75                    6220                                              RTS
000051BA                          6221  
000051BA  227C 000089D3           6222  MOVE_dest_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
000051C0  4CDF 7CBE               6223                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051C4  4E75                    6224                                              RTS
000051C6                          6225  
000051C6  227C 000089D9           6226  MOVE_dest_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
000051CC  4CDF 7CBE               6227                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051D0  4E75                    6228                                              RTS
000051D2                          6229  
000051D2  227C 000089DF           6230  MOVE_dest_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
000051D8  4CDF 7CBE               6231                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051DC  4E75                    6232                                              RTS
000051DE                          6233  
000051DE  227C 000089E5           6234  MOVE_dest_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
000051E4  4CDF 7CBE               6235                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051E8  4E75                    6236                                              RTS
000051EA                          6237  
000051EA  227C 000089EB           6238  MOVE_dest_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
000051F0  4CDF 7CBE               6239                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051F4  4E75                    6240                                              RTS
000051F6                          6241  
000051F6  227C 000089F1           6242  MOVE_dest_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
000051FC  4CDF 7CBE               6243                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005200  4E75                    6244                                              RTS
00005202                          6245  
00005202  227C 000089F7           6246  MOVE_dest_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00005208  4CDF 7CBE               6247                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000520C  4E75                    6248                                              RTS
0000520E                          6249  
0000520E                          6250  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000520E  B4BC 00000100           6251  MOVE_dest_An_indir_predec                    CMP.L      #match_MOVE_dest_An_indir_pdec_r0,D2       ;check reg is equal to 0
00005214  6600 0006               6252                                              BNE        MOVE_dest_An_indir_pdec_r1                      ;if not try reg 1
00005218  6700 0064               6253                                              BEQ        MOVE_dest_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
0000521C                          6254  
0000521C  B4BC 00000300           6255  MOVE_dest_An_indir_pdec_r1                   CMP.L      #match_MOVE_dest_An_indir_pdec_r1,D2       ;check reg is equal to 1
00005222  6600 0006               6256                                              BNE        MOVE_dest_An_indir_pdec_r2                      ;if not try reg 2
00005226  6700 0062               6257                                              BEQ        MOVE_dest_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
0000522A                          6258  
0000522A  B4BC 00000500           6259  MOVE_dest_An_indir_pdec_r2                   CMP.L      #match_MOVE_dest_An_indir_pdec_r2,D2       ;check reg is equal to 2
00005230  6600 0006               6260                                              BNE        MOVE_dest_An_indir_pdec_r3                      ;if not try reg 3
00005234  6700 0060               6261                                              BEQ        MOVE_dest_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
00005238                          6262  
00005238  B4BC 00000700           6263  MOVE_dest_An_indir_pdec_r3                   CMP.L      #match_MOVE_dest_An_indir_pdec_r3,D2       ;check reg is equal to 3
0000523E  6600 0006               6264                                              BNE        MOVE_dest_An_indir_pdec_r4                      ;if not try reg 4
00005242  6700 005E               6265                                              BEQ        MOVE_dest_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
00005246                          6266  
00005246  B4BC 00000900           6267  MOVE_dest_An_indir_pdec_r4                   CMP.L      #match_MOVE_dest_An_indir_pdec_r4,D2       ;check reg is equal to 4
0000524C  6600 0006               6268                                              BNE        MOVE_dest_An_indir_pdec_r5                      ;if not try reg 5
00005250  6700 005C               6269                                              BEQ        MOVE_dest_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
00005254                          6270  
00005254  B4BC 00000B00           6271  MOVE_dest_An_indir_pdec_r5                   CMP.L      #match_MOVE_dest_An_indir_pdec_r5,D2       ;check reg is equal to 5
0000525A  6600 0006               6272                                              BNE        MOVE_dest_An_indir_pdec_r6                     ;if not try reg 6
0000525E  6700 005A               6273                                              BEQ        MOVE_dest_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
00005262                          6274  
00005262  B4BC 00000D00           6275  MOVE_dest_An_indir_pdec_r6                   CMP.L      #match_MOVE_dest_An_indir_pdec_r6,D2       ;check reg is equal to 6
00005268  6600 0006               6276                                              BNE        MOVE_dest_An_indir_pdec_r7                     ;if not try reg 7
0000526C  6700 0058               6277                                              BEQ        MOVE_dest_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
00005270                          6278  
00005270  B4BC 00000F00           6279  MOVE_dest_An_indir_pdec_r7                   CMP.L      #match_MOVE_dest_An_indir_pdec_r7,D2       ;check reg is equal to 7
00005276  6700 005A               6280                                              BEQ        MOVE_dest_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
0000527A  6600 00B0               6281                                              BNE        MOVE_ERROR                                    :if not equal to an addresssing mode, pritn error
0000527E                          6282  
0000527E                          6283  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000527E  227C 000089FD           6284  MOVE_dest_An_indir_pdec_r0_out              MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
00005284  4CDF 7CBE               6285                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005288  4E75                    6286                                              RTS
0000528A                          6287                                              
0000528A  227C 00008A03           6288  MOVE_dest_An_indir_pdec_r1_out              MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
00005290  4CDF 7CBE               6289                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005294  4E75                    6290                                              RTS
00005296                          6291  
00005296  227C 00008A09           6292  MOVE_dest_An_indir_pdec_r2_out              MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
0000529C  4CDF 7CBE               6293                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000052A0  4E75                    6294                                              RTS
000052A2                          6295  
000052A2  227C 00008A0F           6296  MOVE_dest_An_indir_pdec_r3_out              MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
000052A8  4CDF 7CBE               6297                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000052AC  4E75                    6298                                              RTS
000052AE                          6299  
000052AE  227C 00008A15           6300  MOVE_dest_An_indir_pdec_r4_out              MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
000052B4  4CDF 7CBE               6301                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000052B8  4E75                    6302                                              RTS
000052BA                          6303  
000052BA  227C 00008A1B           6304  MOVE_dest_An_indir_pdec_r5_out              MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
000052C0  4CDF 7CBE               6305                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000052C4  4E75                    6306                                              RTS
000052C6                          6307  
000052C6  227C 00008A21           6308  MOVE_dest_An_indir_pdec_r6_out              MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
000052CC  4CDF 7CBE               6309                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000052D0  4E75                    6310                                              RTS
000052D2                          6311  
000052D2  227C 00008A27           6312  MOVE_dest_An_indir_pdec_r7_out              MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
000052D8  4CDF 7CBE               6313                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000052DC  4E75                    6314                                              RTS
000052DE                          6315  ;------------------Absolute Addressing Output-----------------------
000052DE  22FC 00008A37           6316  MOVE_dest_abs_add_word_out               MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000052E4  22C5                    6317                                           MOVE.L      D5,(A1)+                           ;load address                  
000052E6  4CDF 7CBE               6318                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000052EA  4E75                    6319                                           RTS                                            :return to MOVEroutine
000052EC                          6320                                             
000052EC                          6321  
000052EC  2A18                    6322  MOVE_dest_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000052EE  22FC 00008A37           6323                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000052F4  22C5                    6324                                           MOVE.L      D5,(A1)+                           ;load address                  
000052F6  4CDF 7CBE               6325                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000052FA  4E75                    6326                                           RTS                                            :return to MOVEroutine                                            
000052FC                          6327  ;---------------Immediate Addresing---------------------------
000052FC  2A18                    6328  MOVE_dest_immediate_add_out               MOVE.L        (A0)+,D5                             ;capture the immediate address
000052FE  BCBC 000001C0           6329                                           CMP.L       #match_MOVE_dest_imm_add_word,D6               ;check to see if need to pull word
00005304  2A18                    6330                                           MOVE.L      (A0)+,D5                            ;pull the word
00005306  6700 0006               6331                                           BEQ         MOVE_dest_imm_add_w                           ;if equal go pull word    
0000530A  6600 0010               6332                                           BNE         MOVE_dest_imm_add_l                           ;if not equal, go check long
0000530E                          6333                                           
0000530E  22FC 00008A37           6334  MOVE_dest_imm_add_w                       MOVE.L     #ea_$,(A1)+                          ;load the $
00005314  32C5                    6335                                           MOVE.W     D5,(A1)+                             ;load the word address                           
00005316  4CDF 7CBE               6336                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000531A  4E75                    6337                                           RTS
0000531C                          6338                                           
0000531C  2A18                    6339  MOVE_dest_imm_add_l                       MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
0000531E  22FC 00008A37           6340                                           MOVE.L     #ea_$,(A1)+                          ;load the $
00005324  2245                    6341                                           MOVE.L      D5,A1                               ;move to A1
00005326  4CDF 7CBE               6342                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000532A  4E75                    6343                                           RTS
0000532C                          6344  
0000532C                          6345  
0000532C                          6346  ;----------------------Error Handling----------------------------------------
0000532C  43F9 00008951           6347  MOVE_ERROR                                      LEA     ERROR_MESSAGE,A1                                          ;load error messge into A3
00005332  4CDF 7CBE               6348                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005336  4E75                    6349                                                  RTS
00005338  =00000038               6350  mask_MOVE_src_ea_mode           EQU         $0038
00005338  =0000003F               6351  mask_MOVE_src_abs_add           EQU         $003F
00005338  =0000003F               6352  mask_MOVE_src_ea_reg_and_mode   EQU         $003F
00005338                          6353  
00005338                          6354  
00005338  =00000000               6355  match_MOVE_src_Dn               EQU         $0000
00005338  =00000008               6356  match_MOVE_src_An               EQU         $0008
00005338  =00000010               6357  match_MOVE_src_An_indir         EQU         $0010
00005338  =00000020               6358  match_MOVE_src_An_indir_predec  EQU         $0020
00005338  =00000018               6359  match_MOVE_src_An_indir_postinc EQU         $0018
00005338  =00000038               6360  match_MOVE_src_abs_add_word     EQU         $0038
00005338  =00000039               6361  match_MOVE_src_abs_add_long     EQU         $0039
00005338                          6362  
00005338  =00000000               6363  match_MOVE_src_D0               EQU         $0000
00005338  =00000001               6364  match_MOVE_src_D1               EQU         $0001
00005338  =00000002               6365  match_MOVE_src_D2               EQU         $0002
00005338  =00000003               6366  match_MOVE_src_D3               EQU         $0003
00005338  =00000004               6367  match_MOVE_src_D4               EQU         $0004
00005338  =00000005               6368  match_MOVE_src_D5               EQU         $0005
00005338  =00000006               6369  match_MOVE_src_D6               EQU         $0006
00005338  =00000007               6370  match_MOVE_src_D7               EQU         $0007
00005338                          6371  
00005338  =00000008               6372  match_MOVE_src_A0               EQU         $0008
00005338  =00000009               6373  match_MOVE_src_A1               EQU         $0009
00005338  =0000000A               6374  match_MOVE_src_A2               EQU         $000A
00005338  =0000000B               6375  match_MOVE_src_A3               EQU         $000B
00005338  =0000000C               6376  match_MOVE_src_A4               EQU         $000C
00005338  =0000000D               6377  match_MOVE_src_A5               EQU         $000D
00005338  =0000000E               6378  match_MOVE_src_A6               EQU         $000E
00005338  =0000000F               6379  match_MOVE_src_A7               EQU         $000F
00005338                          6380  
00005338  =00000010               6381  match_MOVE_src_An_indir_r0      EQU         $0010
00005338  =00000011               6382  match_MOVE_src_An_indir_r1      EQU         $0011
00005338  =00000012               6383  match_MOVE_src_An_indir_r2      EQU         $0012
00005338  =00000013               6384  match_MOVE_src_An_indir_r3      EQU         $0013
00005338  =00000014               6385  match_MOVE_src_An_indir_r4      EQU         $0014
00005338  =00000015               6386  match_MOVE_src_An_indir_r5      EQU         $0015
00005338  =00000016               6387  match_MOVE_src_An_indir_r6      EQU         $0016
00005338  =00000017               6388  match_MOVE_src_An_indir_r7      EQU         $0017
00005338                          6389  
00005338  =00000018               6390  match_MOVE_src_An_indir_pinc_r0     EQU         $0018
00005338  =00000019               6391  match_MOVE_src_An_indir_pinc_r1     EQU         $0019
00005338  =0000001A               6392  match_MOVE_src_An_indir_pinc_r2     EQU         $001A
00005338  =0000001B               6393  match_MOVE_src_An_indir_pinc_r3     EQU         $001B
00005338  =0000001C               6394  match_MOVE_src_An_indir_pinc_r4     EQU         $001C
00005338  =0000001D               6395  match_MOVE_src_An_indir_pinc_r5     EQU         $001D
00005338  =0000001E               6396  match_MOVE_src_An_indir_pinc_r6     EQU         $001E
00005338  =0000001F               6397  match_MOVE_src_An_indir_pinc_r7     EQU         $001F
00005338                          6398  
00005338  =00000020               6399  match_MOVE_src_An_indir_prede_r0            EQU         $0020
00005338  =00000021               6400  match_MOVE_src_An_indir_prede_r1            EQU         $0021
00005338  =00000022               6401  match_MOVE_src_An_indir_prede_r2            EQU         $0022
00005338  =00000023               6402  match_MOVE_src_An_indir_prede_r3            EQU         $0023
00005338  =00000024               6403  match_MOVE_src_An_indir_prede_r4            EQU         $0024
00005338  =00000025               6404  match_MOVE_src_An_indir_prede_r5            EQU         $0025
00005338  =00000026               6405  match_MOVE_src_An_indir_prede_r6            EQU         $0026
00005338  =00000027               6406  match_MOVE_src_An_indir_prede_r7            EQU         $0027
00005338                          6407  
00005338  =0000003C               6408  match_MOVE_src_imm_add                           EQU         $003C
00005338  =000000FC               6409  match_MOVE_src_imm_add_word                      EQU         $00FC
00005338  =000001FC               6410  match_MOVE_src_imm_add_long                      EQU         $01FC
00005338                          6411  
00005338                          6412  
00005338                          6413  
00005338                          6414  
00005338                          6415  
00005338  =000001C0               6416  mask_MOVE_dest_ea_mode          EQU         $01C0
00005338  =000001C0               6417  mask_MOVE_dest_abs_add          EQU         $01C0
00005338  =00000FC0               6418  mask_MOVE_dest_ea_reg_and_mode  EQU         $0FC0
00005338                          6419  
00005338                          6420  
00005338  =00000000               6421  match_MOVE_dest_Dn              EQU         $0000
00005338  =00000040               6422  match_MOVE_dest_An              EQU         $0040
00005338  =00000080               6423  match_MOVE_dest_An_indir            EQU         $0080
00005338  =00000100               6424  match_MOVE_dest_An_indir_predec EQU         $0100
00005338  =000000C0               6425  match_MOVE_dest_An_indir_postinc    EQU         $00C0
00005338  =000001C0               6426  match_MOVE_dest_abs_add_word        EQU         $01C0
00005338  =000009C0               6427  match_MOVE_dest_abs_add_long        EQU         $09C0
00005338                          6428  
00005338  =00000000               6429  match_MOVE_dest_D0              EQU         $0000
00005338  =00000200               6430  match_MOVE_dest_D1              EQU         $0200
00005338  =00000400               6431  match_MOVE_dest_D2              EQU         $0400
00005338  =00000600               6432  match_MOVE_dest_D3              EQU         $0600
00005338  =00000800               6433  match_MOVE_dest_D4              EQU         $0800
00005338  =00000A00               6434  match_MOVE_dest_D5              EQU         $0A00
00005338  =00000C00               6435  match_MOVE_dest_D6              EQU         $0C00
00005338  =00000E00               6436  match_MOVE_dest_D7              EQU         $0E00
00005338                          6437  
00005338  =00000040               6438  match_MOVE_dest_A0              EQU         $0040
00005338  =00000240               6439  match_MOVE_dest_A1              EQU         $0240
00005338  =00000440               6440  match_MOVE_dest_A2              EQU         $0440
00005338  =00000640               6441  match_MOVE_dest_A3              EQU         $0640
00005338  =00000840               6442  match_MOVE_dest_A4              EQU         $0840
00005338  =00000A40               6443  match_MOVE_dest_A5              EQU         $0A40
00005338  =00000C40               6444  match_MOVE_dest_A6              EQU         $0C40
00005338  =00000E40               6445  match_MOVE_dest_A7              EQU         $0E40
00005338                          6446  
00005338  =00000080               6447  match_MOVE_dest_An_indir_r0     EQU         $0080
00005338  =00000280               6448  match_MOVE_dest_An_indir_r1     EQU         $0280
00005338  =00000480               6449  match_MOVE_dest_An_indir_r2     EQU         $0480
00005338  =00000680               6450  match_MOVE_dest_An_indir_r3     EQU         $0680
00005338  =00000880               6451  match_MOVE_dest_An_indir_r4     EQU         $0880
00005338  =00000A80               6452  match_MOVE_dest_An_indir_r5     EQU         $0A80
00005338  =00000C80               6453  match_MOVE_dest_An_indir_r6     EQU         $0C80
00005338  =00000E80               6454  match_MOVE_dest_An_indir_r7     EQU         $0E80
00005338                          6455  
00005338  =000000C0               6456  match_MOVE_dest_An_indir_pinc_r0        EQU         $00C0
00005338  =000002C0               6457  match_MOVE_dest_An_indir_pinc_r1        EQU         $02C0
00005338  =000004C0               6458  match_MOVE_dest_An_indir_pinc_r2        EQU         $04C0
00005338  =000006C0               6459  match_MOVE_dest_An_indir_pinc_r3        EQU         $06C0
00005338  =000008C0               6460  match_MOVE_dest_An_indir_pinc_r4        EQU         $08C0
00005338  =00000AC0               6461  match_MOVE_dest_An_indir_pinc_r5        EQU         $0AC0
00005338  =00000CC0               6462  match_MOVE_dest_An_indir_pinc_r6        EQU         $0CC0
00005338  =00000EC0               6463  match_MOVE_dest_An_indir_pinc_r7        EQU         $0EC0
00005338                          6464  
00005338  =00000100               6465  match_MOVE_dest_An_indir_pdec_r0            EQU         $0100
00005338  =00000300               6466  match_MOVE_dest_An_indir_pdec_r1            EQU         $0300
00005338  =00000500               6467  match_MOVE_dest_An_indir_pdec_r2            EQU         $0500
00005338  =00000700               6468  match_MOVE_dest_An_indir_pdec_r3            EQU         $0700
00005338  =00000900               6469  match_MOVE_dest_An_indir_pdec_r4            EQU         $0900
00005338  =00000B00               6470  match_MOVE_dest_An_indir_pdec_r5            EQU         $0B00
00005338  =00000D00               6471  match_MOVE_dest_An_indir_pdec_r6            EQU         $0D00
00005338  =00000F00               6472  match_MOVE_dest_An_indir_pdec_r7            EQU         $0F00
00005338                          6473  
00005338  =000001C0               6474  match_MOVE_dest_imm_add                           EQU         $01C0
00005338  =000001C0               6475  match_MOVE_dest_imm_add_word                      EQU         $01C0
00005338  =000009C0               6476  match_MOVE_dest_imm_add_long                      EQU         $09C0
00005338                          6477  
00005338                          6478  
00005338                          6479  
00005338                          6480  
00005338                          6481  
00005338                          6482  -------------------- end include --------------------
00005338                          6483              INCLUDE 'MOVEM Subroutine.x68'
00005338                          6484  
00005338  48E7 7D3E               6485  MOVEM_sub                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)                           ;preserve the registers, 
0000533C  C2BC 00000400           6486                                           AND.L             #mask_MOVEM_dir,D1                          ;load the mask to determine the direction
00005342                          6487                                           
00005342  B2BC 00000400           6488                                           CMP.L             #match_MOVEM_reg_mem,D1                     ;check to see if it's reg to mem
00005348  6700 0014               6489                                           BEQ               MOVEM_reg_mem                               ;if equal go figure out list
0000534C  6600 0002               6490                                           BNE               MOVEM_mem_reg_match                         ;if not go check mem to reg
00005350                          6491                                           
00005350                          6492                                           
00005350  B2BC 00000400           6493  MOVEM_mem_reg_match                     CMP.L              #match_MOVEM_mem_reg,D1                     ;check if mem to reg 
00005356  6700 0434               6494                                          BEQ                MOVEM_determine_second_op                   ;if equal go figure out the register
0000535A  6600 08FE               6495                                          BNE                MOVEM_ERROR                                       ;if not equal go to error message
0000535E  2A18                    6496  MOVEM_reg_mem                            MOVE.L         (A0)+,D5                                ;pull the register list
00005360  4241                    6497                                           CLR            D1
00005362  223C 00008000           6498                                           MOVE.L         #mask_MOVEM_reg_mem_D0,D1                     ;load mask into register
00005368  B2BC 00008000           6499                                           CMP.L          #match_MOVEM_reg_mem_D0,D1                    ;check to see if the D0 is on the list
0000536E  6700 016E               6500                                           BEQ            MOVEM_D0_reg_list_out
00005372  6600 0002               6501                                           BNE            MOVEM_reg_mem_D1
00005376                          6502  
00005376  2A18                    6503  MOVEM_reg_mem_D1                         MOVE.L         (A0)+,D5                                ;pull the register list
00005378  4241                    6504                                           CLR            D1
0000537A  223C 00004000           6505                                           MOVE.L         #mask_MOVEM_reg_mem_D1,D1                     ;load mask into register
00005380  B2BC 00004000           6506                                           CMP.L          #match_MOVEM_reg_mem_D1,D1                    ;check to see if the D0 is on the list
00005386  6700 0160               6507                                           BEQ            MOVEM_D1_reg_list_out
0000538A  6600 0002               6508                                           BNE            MOVEM_reg_mem_D2
0000538E                          6509  
0000538E  2A18                    6510  MOVEM_reg_mem_D2                         MOVE.L         (A0)+,D5                                ;pull the register list
00005390  4241                    6511                                           CLR            D1
00005392  223C 00002000           6512                                           MOVE.L         #mask_MOVEM_reg_mem_D2,D1                     ;load mask into register
00005398  B2BC 00002000           6513                                           CMP.L          #match_MOVEM_reg_mem_D2,D1                    ;check to see if the D0 is on the list
0000539E  6700 0152               6514                                           BEQ            MOVEM_D2_reg_list_out
000053A2  6600 0002               6515                                           BNE            MOVEM_reg_mem_D3
000053A6                          6516  
000053A6  2A18                    6517  MOVEM_reg_mem_D3                         MOVE.L         (A0)+,D5                                ;pull the register list
000053A8  4241                    6518                                           CLR            D1
000053AA  223C 00001000           6519                                           MOVE.L         #mask_MOVEM_reg_mem_D3,D1                     ;load mask into register
000053B0  B2BC 00001000           6520                                           CMP.L          #match_MOVEM_reg_mem_D3,D1                    ;check to see if the D0 is on the list
000053B6  6700 0144               6521                                           BEQ            MOVEM_D3_reg_list_out
000053BA  6600 0002               6522                                           BNE            MOVEM_reg_mem_D4
000053BE                          6523  
000053BE  2A18                    6524  MOVEM_reg_mem_D4                         MOVE.L         (A0)+,D5                                ;pull the register list
000053C0  4241                    6525                                           CLR            D1
000053C2  223C 00000800           6526                                           MOVE.L         #mask_MOVEM_reg_mem_D4,D1                     ;load mask into register
000053C8  B2BC 00000800           6527                                           CMP.L          #match_MOVEM_reg_mem_D4,D1                    ;check to see if the D0 is on the list
000053CE  6700 0136               6528                                           BEQ            MOVEM_D4_reg_list_out
000053D2  6600 0002               6529                                           BNE            MOVEM_reg_mem_D5
000053D6                          6530  
000053D6  2A18                    6531  MOVEM_reg_mem_D5                         MOVE.L         (A0)+,D5                                ;pull the register list
000053D8  4241                    6532                                           CLR            D1
000053DA  223C 00000400           6533                                           MOVE.L         #mask_MOVEM_reg_mem_D5,D1                     ;load mask into register
000053E0  B2BC 00000400           6534                                           CMP.L          #match_MOVEM_reg_mem_D5,D1                    ;check to see if the D0 is on the list
000053E6  6700 0128               6535                                           BEQ            MOVEM_D5_reg_list_out
000053EA  6600 0002               6536                                           BNE            MOVEM_reg_mem_D6
000053EE                          6537  
000053EE  2A18                    6538  MOVEM_reg_mem_D6                         MOVE.L         (A0)+,D5                                ;pull the register list
000053F0  4241                    6539                                           CLR            D1
000053F2  223C 00000200           6540                                           MOVE.L         #mask_MOVEM_reg_mem_D6,D1                     ;load mask into register
000053F8  B2BC 00000200           6541                                           CMP.L          #match_MOVEM_reg_mem_D6,D1                    ;check to see if the D0 is on the list
000053FE  6700 011A               6542                                           BEQ            MOVEM_D6_reg_list_out
00005402  6600 0002               6543                                           BNE            MOVEM_reg_mem_D7
00005406                          6544  
00005406  2A18                    6545  MOVEM_reg_mem_D7                         MOVE.L         (A0)+,D5                                ;pull the register list
00005408  4241                    6546                                           CLR            D1
0000540A  223C 00000100           6547                                           MOVE.L         #mask_MOVEM_reg_mem_D7,D1                     ;load mask into register
00005410  B2BC 00000100           6548                                           CMP.L          #match_MOVEM_reg_mem_D7,D1                    ;check to see if the D0 is on the list
00005416  6700 010C               6549                                           BEQ            MOVEM_D7_reg_list_out
0000541A  6600 0002               6550                                           BNE            MOVEM_reg_mem_A0
0000541E                          6551  
0000541E                          6552  
0000541E  2A18                    6553  MOVEM_reg_mem_A0                         MOVE.L         (A0)+,D5                                ;pull the register list
00005420  4241                    6554                                           CLR            D1
00005422  227C 00000080           6555                                           MOVE.L         #mask_MOVEM_reg_mem_A0,A1                     ;load mask into register
00005428  B3FC 00000080           6556                                           CMP.L          #match_MOVEM_reg_mem_A0,A1                    ;check to see if the A0 is on the list
0000542E  6700 00FE               6557                                           BEQ            MOVEM_A0_reg_list_out
00005432  6600 0002               6558                                           BNE            MOVEM_reg_mem_A1
00005436                          6559  
00005436  2A18                    6560  MOVEM_reg_mem_A1                         MOVE.L         (A0)+,D5                                ;pull the register list
00005438  4241                    6561                                           CLR            D1
0000543A  227C 00000040           6562                                           MOVE.L         #mask_MOVEM_reg_mem_A1,A1                     ;load mask into register
00005440  B3FC 00000040           6563                                           CMP.L          #match_MOVEM_reg_mem_A1,A1                    ;check to see if the A0 is on the list
00005446  6700 00F0               6564                                           BEQ            MOVEM_A1_reg_list_out
0000544A  6600 0002               6565                                           BNE            MOVEM_reg_mem_A2
0000544E                          6566  
0000544E  2A18                    6567  MOVEM_reg_mem_A2                         MOVE.L         (A0)+,D5                                ;pull the register list
00005450  4241                    6568                                           CLR            D1
00005452  227C 00000020           6569                                           MOVE.L         #mask_MOVEM_reg_mem_A2,A1                     ;load mask into register
00005458  B3FC 00000020           6570                                           CMP.L          #match_MOVEM_reg_mem_A2,A1                    ;check to see if the A0 is on the list
0000545E  6700 00E2               6571                                           BEQ            MOVEM_A2_reg_list_out
00005462  6600 0002               6572                                           BNE            MOVEM_reg_mem_A3
00005466                          6573  
00005466  2A18                    6574  MOVEM_reg_mem_A3                         MOVE.L         (A0)+,D5                                ;pull the register list
00005468  4241                    6575                                           CLR            D1
0000546A  227C 00000010           6576                                           MOVE.L         #mask_MOVEM_reg_mem_A3,A1                     ;load mask into register
00005470  B3FC 00000010           6577                                           CMP.L          #match_MOVEM_reg_mem_A3,A1                    ;check to see if the A0 is on the list
00005476  6700 00D4               6578                                           BEQ            MOVEM_A3_reg_list_out
0000547A  6600 0002               6579                                           BNE            MOVEM_reg_mem_A4
0000547E                          6580  
0000547E  2A18                    6581  MOVEM_reg_mem_A4                         MOVE.L         (A0)+,D5                                ;pull the register list
00005480  4241                    6582                                           CLR            D1
00005482  227C 00000008           6583                                           MOVE.L         #mask_MOVEM_reg_mem_A4,A1                     ;load mask into register
00005488  B3FC 00000008           6584                                           CMP.L          #match_MOVEM_reg_mem_A4,A1                    ;check to see if the A0 is on the list
0000548E  6700 00C6               6585                                           BEQ            MOVEM_A4_reg_list_out
00005492  6600 0002               6586                                           BNE            MOVEM_reg_mem_A5
00005496                          6587  
00005496  2A18                    6588  MOVEM_reg_mem_A5                         MOVE.L         (A0)+,D5                                ;pull the register list
00005498  4241                    6589                                           CLR            D1
0000549A  227C 00000004           6590                                           MOVE.L         #mask_MOVEM_reg_mem_A5,A1                     ;load mask into register
000054A0  B3FC 00000004           6591                                           CMP.L          #match_MOVEM_reg_mem_A5,A1                    ;check to see if the A0 is on the list
000054A6  6700 00B8               6592                                           BEQ            MOVEM_A5_reg_list_out
000054AA  6600 0002               6593                                           BNE            MOVEM_reg_mem_A6
000054AE                          6594  
000054AE  2A18                    6595  MOVEM_reg_mem_A6                         MOVE.L         (A0)+,D5                                ;pull the register list
000054B0  4241                    6596                                           CLR            D1
000054B2  227C 00000002           6597                                           MOVE.L         #mask_MOVEM_reg_mem_A6,A1                     ;load mask into register
000054B8  B3FC 00000002           6598                                           CMP.L          #match_MOVEM_reg_mem_A6,A1                    ;check to see if the A0 is on the list
000054BE  6700 00AA               6599                                           BEQ            MOVEM_A6_reg_list_out
000054C2  6600 0002               6600                                           BNE            MOVEM_reg_mem_A7
000054C6                          6601  
000054C6  2A18                    6602  MOVEM_reg_mem_A7                         MOVE.L         (A0)+,D5                                ;pull the register list
000054C8  4241                    6603                                           CLR            D1
000054CA  227C 00000001           6604                                           MOVE.L         #mask_MOVEM_reg_mem_A7,A1                     ;load mask into register
000054D0  B3FC 00000001           6605                                           CMP.L          #match_MOVEM_reg_mem_A7,A1                    ;check to see if the A0 is on the list
000054D6  6700 009C               6606                                           BEQ            MOVEM_A7_reg_list_out
000054DA  6600 00A4               6607                                           BNE            MOVEM_determine_second_operand
000054DE                          6608  
000054DE                          6609  ;------------------------------------------------------Register List Output----------------------------------------
000054DE  22FC 00008965           6610  MOVEM_D0_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
000054E4  4EB8 5376               6611                                          JSR             MOVEM_reg_mem_D1            ;go check D1
000054E8                          6612                                          
000054E8  22FC 00008965           6613  MOVEM_D1_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
000054EE  4EB8 538E               6614                                          JSR             MOVEM_reg_mem_D2            ;go check D2
000054F2                          6615  
000054F2  22FC 00008965           6616  MOVEM_D2_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
000054F8  4EB8 53A6               6617                                          JSR             MOVEM_reg_mem_D3            ;go check D3
000054FC                          6618  
000054FC  22FC 00008965           6619  MOVEM_D3_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005502  4EB8 53BE               6620                                          JSR             MOVEM_reg_mem_D4            ;go check D4
00005506                          6621  
00005506  22FC 00008965           6622  MOVEM_D4_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000550C  4EB8 53D6               6623                                          JSR             MOVEM_reg_mem_D5            ;go check D5
00005510                          6624  
00005510  22FC 00008965           6625  MOVEM_D5_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005516  4EB8 53EE               6626                                          JSR             MOVEM_reg_mem_D6            ;go check D6
0000551A                          6627  
0000551A  22FC 00008965           6628  MOVEM_D6_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005520  4EB8 5406               6629                                          JSR             MOVEM_reg_mem_D7            ;go check D7
00005524                          6630  
00005524  22FC 00008965           6631  MOVEM_D7_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000552A  4EB8 541E               6632                                          JSR             MOVEM_reg_mem_A0            ;go check A0
0000552E                          6633  
0000552E  22FC 0000897D           6634  MOVEM_A0_reg_list_out                   MOVE.L          #ea_A0,(A1)+                ;load the register into A1
00005534  4EB8 5436               6635                                          JSR             MOVEM_reg_mem_A1            ;go check D1
00005538                          6636                                          
00005538  22FC 00008980           6637  MOVEM_A1_reg_list_out                   MOVE.L          #ea_A1,(A1)+                ;load the register into A1
0000553E  4EB8 544E               6638                                          JSR             MOVEM_reg_mem_A2            ;go check D2
00005542                          6639  
00005542  22FC 00008983           6640  MOVEM_A2_reg_list_out                   MOVE.L          #ea_A2,(A1)+                ;load the register into A1
00005548  4EB8 5466               6641                                          JSR             MOVEM_reg_mem_A3            ;go check D3
0000554C                          6642  
0000554C  22FC 00008986           6643  MOVEM_A3_reg_list_out                   MOVE.L          #ea_A3,(A1)+                ;load the register into A1
00005552  4EB8 547E               6644                                          JSR             MOVEM_reg_mem_A4            ;go check D4
00005556                          6645  
00005556  22FC 00008989           6646  MOVEM_A4_reg_list_out                   MOVE.L          #ea_A4,(A1)+                ;load the register into A1
0000555C  4EB8 5496               6647                                          JSR             MOVEM_reg_mem_A5            ;go check D5
00005560                          6648  
00005560  22FC 0000898C           6649  MOVEM_A5_reg_list_out                   MOVE.L          #ea_A5,(A1)+                ;load the register into A1
00005566  4EB8 54AE               6650                                          JSR             MOVEM_reg_mem_A6            ;go check D6
0000556A                          6651  
0000556A  22FC 0000898F           6652  MOVEM_A6_reg_list_out                   MOVE.L          #ea_A6,(A1)+                ;load the register into A1
00005570  4EB8 54C6               6653                                          JSR             MOVEM_reg_mem_A7            ;go check D7
00005574                          6654  
00005574  22FC 00008992           6655  MOVEM_A7_reg_list_out                   MOVE.L          #ea_A7,(A1)+                ;load the register into A1
0000557A  4EB9 0000578C           6656                                          JSR             MOVEM_determine_second_op   ;go figure out the second operand
00005580                          6657  
00005580                          6658  
00005580  4241                    6659  MOVEM_determine_second_operand          CLR             D1
00005582  C2BC 0000003C           6660                                          AND.L           #mask_MOVEM_ea_mode,D1                          ;move the mask to D1
00005588                          6661  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00005588  B2BC 00000010           6662  MOVEM_add_reg_indir              CMP.L             #match_MOVEM_An_indir,D1                        ;check to see if mode is add reg indir
0000558E  6600 0006               6663                                   BNE               MOVEM_add_reg_indir_predec                    ;if not, go check add reg indir predec 
00005592  6700 003A               6664                                   BEQ               MOVEM_An_indir_reg                            ;if equal go figure out the register           
00005596                          6665             
00005596  B2BC 00000020           6666  MOVEM_add_reg_indir_predec       CMP.L             #match_MOVEM_An_indir_pdec,D1                  ;check to see if mode is add reg indor w/ postinc
0000559C  6600 0006               6667                                   BNE               MOVEM_abs_add_word                          ;if not go check add reg indir/predec
000055A0  6700 00FC               6668                                   BEQ               MOVEM_An_indir_predec                          ;if equal go figure out the register
000055A4                          6669                        
000055A4                          6670  
000055A4  C4BC 00000038           6671  MOVEM_abs_add_word               AND.L             #mask_MOVEM_abs_add,D2                        ;load mask to determine if abs add word or long
000055AA                          6672                                   
000055AA  B4BC 00000038           6673                                   CMP.L             #match_MOVEM_abs_add_word,D2                  ;check if abs add word
000055B0  2A18                    6674                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000055B2  6600 0006               6675                                   BNE               MOVEM_abs_add_long                                  ;if not go check abs add long
000055B6  6700 01B6               6676                                   BEQ               MOVEM_abs_add_word_out                              ;if equal go to output
000055BA                          6677    
000055BA  B4BC 00000039           6678  MOVEM_abs_add_long               CMP.L             #match_MOVEM_abs_add_long,D2                  ;check to see if abs add long
000055C0  6700 01BA               6679                                   BEQ               MOVEM_abs_add_long_out                              ;if equal go to output
000055C4  6600 0694               6680                                   BNE               MOVEM_ERROR                                         ;if not equal go to error mesage MOVE routine
000055C8                          6681  
000055C8                          6682  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000055C8                          6683                                   
000055C8  C4BC 0000003F           6684                                   AND.L           #mask_MOVEM_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
000055CE                          6685  ;------------------Address Register Indirect-----------------------
000055CE  B4BC 00000010           6686  MOVEM_An_indir_reg                CMP.L          #match_MOVEM_An_indir_r0,D2              ;check reg is equal to 0
000055D4  6600 0006               6687                                   BNE             MOVEM_An_indir_r1                           ;if not try reg 1
000055D8  6700 0064               6688                                   BEQ             MOVEM_An_indir_r0_out                       ;if equal go to output MOVEroutine
000055DC                          6689  
000055DC  B4BC 00000011           6690  MOVEM_An_indir_r1                 CMP.L           #match_MOVEM_An_indir_r1,D2              ;check reg is equal to 1
000055E2  6600 0006               6691                                   BNE             MOVEM_An_indir_r2                           ;if not try reg 2
000055E6  6700 0062               6692                                   BEQ             MOVEM_An_indir_r1_out                       ;if equal go to output MOVEroutine
000055EA                          6693  
000055EA  B4BC 00000012           6694  MOVEM_An_indir_r2                 CMP.L           #match_MOVEM_An_indir_r2,D2              ;check reg is equal to 2
000055F0  6600 0006               6695                                   BNE             MOVEM_An_indir_r3                           ;if not try reg 3
000055F4  6700 0060               6696                                   BEQ             MOVEM_An_indir_r2_out                       ;if equal go to output MOVEroutine
000055F8                          6697  
000055F8  B4BC 00000013           6698  MOVEM_An_indir_r3                 CMP.L           #match_MOVEM_An_indir_r3,D2              ;check reg is equal to 3
000055FE  6600 0006               6699                                   BNE             MOVEM_An_indir_r4                           ;if not try reg 4
00005602  6700 005E               6700                                   BEQ             MOVEM_An_indir_r3_out                       ;if equal go to output MOVEroutine
00005606                          6701      
00005606  B4BC 00000014           6702  MOVEM_An_indir_r4                 CMP.L           #match_MOVEM_An_indir_r4,D2              ;check reg is equal to 4
0000560C  6600 0006               6703                                   BNE             MOVEM_An_indir_r5                           ;if not try reg 5
00005610  6700 005C               6704                                   BEQ             MOVEM_An_indir_r4_out                       ;if equal go to output MOVEroutine
00005614                          6705          
00005614  B4BC 00000015           6706  MOVEM_An_indir_r5                 CMP.L           #match_MOVEM_An_indir_r5,D2              ;check reg is equal to 5
0000561A  6600 0006               6707                                   BNE             MOVEM_An_indir_r6                           ;if not try reg 6
0000561E  6700 005A               6708                                   BEQ             MOVEM_An_indir_r5_out                       ;if equal go to output MOVEroutine
00005622                          6709  
00005622  B4BC 00000016           6710  MOVEM_An_indir_r6                 CMP.L           #match_MOVEM_An_indir_r6,D2              ;check reg is equal to 6
00005628  6600 0006               6711                                   BNE             MOVEM_An_indir_r7                           ;if not try reg 7
0000562C  6700 0058               6712                                   BEQ             MOVEM_An_indir_r6_out                       ;if equal go to output MOVEroutine
00005630                          6713  
00005630  B4BC 00000017           6714  MOVEM_An_indir_r7                 CMP.L           #match_MOVEM_An_indir_r7,D2              ;check reg is equal to 7
00005636  6700 005A               6715                                   BEQ             MOVEM_An_indir_r7_out                       ;if equal go to output MOVEroutine
0000563A  6600 061E               6716                                   BNE             MOVEM_ERROR                                   :if not equal to an addresssing mode, pritn error
0000563E                          6717  
0000563E                          6718  ;--------------------Address Register Indirect Output-----------------------
0000563E  227C 000089A5           6719  MOVEM_An_indir_r0_out                  MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
00005644  4EB9 0000578C           6720                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000564A                          6721  
0000564A  227C 000089AA           6722  MOVEM_An_indir_r1_out                  MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
00005650  4EB9 0000578C           6723                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005656                          6724  
00005656  227C 000089AF           6725  MOVEM_An_indir_r2_out                  MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
0000565C  4EB9 0000578C           6726                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005662                          6727  
00005662  227C 000089B4           6728  MOVEM_An_indir_r3_out                  MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
00005668  4EB9 0000578C           6729                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000566E                          6730  
0000566E  227C 000089B9           6731  MOVEM_An_indir_r4_out                  MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
00005674  4EB9 0000578C           6732                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000567A                          6733  
0000567A  227C 000089BE           6734  MOVEM_An_indir_r5_out                  MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
00005680  4EB9 0000578C           6735                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005686                          6736  
00005686  227C 000089C3           6737  MOVEM_An_indir_r6_out                  MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
0000568C  4EB9 0000578C           6738                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005692                          6739                                          
00005692  227C 000089C8           6740  MOVEM_An_indir_r7_out                  MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
00005698  4EB9 0000578C           6741                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000569E                          6742  
0000569E                          6743  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000569E  B4BC 00000020           6744  MOVEM_An_indir_predec                       CMP.L      #match_MOVEM_An_indir_pdec_r0,D2       ;check reg is equal to 0
000056A4  6600 0006               6745                                              BNE        MOVEM_An_indir_pdec_r1                      ;if not try reg 1
000056A8  6700 0064               6746                                              BEQ        MOVEM_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
000056AC                          6747  
000056AC  B4BC 00000021           6748  MOVEM_An_indir_pdec_r1                      CMP.L      #match_MOVEM_An_indir_pdec_r1,D2       ;check reg is equal to 1
000056B2  6600 0006               6749                                              BNE        MOVEM_An_indir_pdec_r2                      ;if not try reg 2
000056B6  6700 0062               6750                                              BEQ        MOVEM_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
000056BA                          6751  
000056BA  B4BC 00000022           6752  MOVEM_An_indir_pdec_r2                      CMP.L      #match_MOVEM_An_indir_pdec_r2,D2       ;check reg is equal to 2
000056C0  6600 0006               6753                                              BNE        MOVEM_An_indir_pdec_r3                      ;if not try reg 3
000056C4  6700 0060               6754                                              BEQ        MOVEM_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
000056C8                          6755  
000056C8  B4BC 00000023           6756  MOVEM_An_indir_pdec_r3                      CMP.L      #match_MOVEM_An_indir_pdec_r3,D2       ;check reg is equal to 3
000056CE  6600 0006               6757                                              BNE        MOVEM_An_indir_pdec_r4                      ;if not try reg 4
000056D2  6700 005E               6758                                              BEQ        MOVEM_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
000056D6                          6759  
000056D6  B4BC 00000024           6760  MOVEM_An_indir_pdec_r4                      CMP.L      #match_MOVEM_An_indir_pdec_r4,D2       ;check reg is equal to 4
000056DC  6600 0006               6761                                              BNE        MOVEM_An_indir_pdec_r5                      ;if not try reg 5
000056E0  6700 005C               6762                                              BEQ        MOVEM_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
000056E4                          6763  
000056E4  B4BC 00000025           6764  MOVEM_An_indir_pdec_r5                      CMP.L      #match_MOVEM_An_indir_pdec_r5,D2       ;check reg is equal to 5
000056EA  6600 0006               6765                                              BNE        MOVEM_An_indir_pdec_r6                     ;if not try reg 6
000056EE  6700 005A               6766                                              BEQ        MOVEM_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
000056F2                          6767  
000056F2  B4BC 00000026           6768  MOVEM_An_indir_pdec_r6                      CMP.L      #match_MOVEM_An_indir_pdec_r6,D2       ;check reg is equal to 6
000056F8  6600 0006               6769                                              BNE        MOVEM_An_indir_pdec_r7                     ;if not try reg 7
000056FC  6700 0058               6770                                              BEQ        MOVEM_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
00005700                          6771  
00005700  B4BC 00000027           6772  MOVEM_An_indir_pdec_r7                      CMP.L      #match_MOVEM_An_indir_pdec_r7,D2       ;check reg is equal to 7
00005706  6700 005A               6773                                              BEQ        MOVEM_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
0000570A  6600 054E               6774                                              BNE        MOVEM_ERROR                                    :if not equal to an addresssing mode, pritn error
0000570E                          6775  
0000570E                          6776  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000570E  227C 000089FD           6777  MOVEM_An_indir_pdec_r0_out                 MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00005714  4EB9 0000578C           6778                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000571A                          6779                                              
0000571A  227C 00008A03           6780  MOVEM_An_indir_pdec_r1_out                 MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00005720  4EB9 0000578C           6781                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005726                          6782  
00005726  227C 00008A09           6783  MOVEM_An_indir_pdec_r2_out                 MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
0000572C  4EB9 0000578C           6784                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005732                          6785  
00005732  227C 00008A0F           6786  MOVEM_An_indir_pdec_r3_out                 MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00005738  4EB9 0000578C           6787                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000573E                          6788  
0000573E  227C 00008A15           6789  MOVEM_An_indir_pdec_r4_out                 MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00005744  4EB9 0000578C           6790                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000574A                          6791  
0000574A  227C 00008A1B           6792  MOVEM_An_indir_pdec_r5_out                 MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00005750  4EB9 0000578C           6793                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005756                          6794  
00005756  227C 00008A21           6795  MOVEM_An_indir_pdec_r6_out                 MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
0000575C  4EB9 0000578C           6796                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005762                          6797  
00005762  227C 00008A27           6798  MOVEM_An_indir_pdec_r7_out                 MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00005768  4EB9 0000578C           6799                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000576E                          6800          
0000576E                          6801  ;------------------Absolute Addressing Output-----------------------
0000576E  22FC 00008A37           6802  MOVEM_abs_add_word_out                MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00005774  22C5                    6803                                        MOVE.L      D5,(A1)+                           ;load address                  
00005776  4CDF 7CBE               6804                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
0000577A  4E75                    6805                                        RTS                                            :return to MOVEroutine
0000577C                          6806                                             
0000577C                          6807  
0000577C  2A18                    6808  MOVEM_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000577E  22FC 00008A37           6809                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00005784  22C5                    6810                                        MOVE.L      D5,(A1)+                           ;load address                  
00005786  4CDF 7CBE               6811                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
0000578A  4E75                    6812                                        RTS                                            :return to MOVEroutine
0000578C                          6813                                              ;return to MOVEroutine                                            
0000578C                          6814  
0000578C  4241                    6815  MOVEM_determine_second_op         CLR             D1
0000578E                          6816  
0000578E  C2BC 0000003C           6817                                   AND.L             #mask_MOVEM_ea_mode,D1                          ;move the mask to D1
00005794                          6818  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00005794  B2BC 00000010           6819  MOVEM_m2r_An_indir               CMP.L             #match_MOVEM_An_indir,D1                        ;check to see if mode is add reg indir
0000579A  6600 0006               6820                                   BNE               MOVEM_m2r_An_indir_postinc                    ;if not, go check add reg indir predec 
0000579E  6700 003A               6821                                   BEQ               MOVEM_m2r_An_indir_reg                            ;if equal go figure out the register           
000057A2                          6822                                   
000057A2  B2BC 00000010           6823  MOVEM_m2r_An_indir_postinc       CMP.L             #match_MOVEM_An_indir_pinc,D1              ;check to see if mode is add reg indir w/predec
000057A8  6600 0006               6824                                   BNE               MOVEM_m2r_abs_add_word                                  ;if not go check abs add word
000057AC  6700 00EC               6825                                   BEQ               MOVEM_m2r_An_indir_pinc_reg                          ;if equal go figure out the register
000057B0                          6826  
000057B0  C4BC 00000038           6827  MOVEM_m2r_abs_add_word           AND.L             #mask_MOVEM_abs_add,D2                        ;load mask to determine if abs add word or long
000057B6                          6828                                   
000057B6  B4BC 00000038           6829                                   CMP.L             #match_MOVEM_abs_add_word,D2                  ;check if abs add word
000057BC  2A18                    6830                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000057BE  6600 0006               6831                                   BNE               MOVEM_m2r_abs_add_long                                  ;if not go check abs add long
000057C2  6700 0256               6832                                   BEQ               MOVEM_m2r_abs_add_word_out                              ;if equal go to output
000057C6                          6833    
000057C6  B4BC 00000039           6834  MOVEM_m2r_abs_add_long           CMP.L             #match_MOVEM_abs_add_long,D2                  ;check to see if abs add long
000057CC  6700 025A               6835                                   BEQ               MOVEM_m2r_abs_add_long_out                              ;if equal go to output
000057D0  6600 0488               6836                                   BNE               MOVEM_ERROR                                         ;if not equal go to error mesage MOVE routine
000057D4                          6837  
000057D4                          6838  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000057D4                          6839                                   
000057D4  C4BC 0000003F           6840                                   AND.L              #mask_MOVEM_ea_reg_and_mode,D2             ;load the mask into D2 for the mode and the register
000057DA                          6841  ;------------------Address Register Indirect-----------------------
000057DA  B4BC 00000010           6842  MOVEM_m2r_An_indir_reg          CMP.L          #match_MOVEM_An_indir_r0,D2              ;check reg is equal to 0
000057E0  6600 0006               6843                                   BNE             MOVEM_m2r_An_indir_r1                           ;if not try reg 1
000057E4  6700 0064               6844                                   BEQ             MOVEM_m2r_An_indir_r0_out                       ;if equal go to output MOVEroutine
000057E8                          6845  
000057E8  B4BC 00000011           6846  MOVEM_m2r_An_indir_r1           CMP.L           #match_MOVEM_An_indir_r1,D2              ;check reg is equal to 1
000057EE  6600 0006               6847                                   BNE             MOVEM_m2r_An_indir_r2                           ;if not try reg 2
000057F2  6700 0060               6848                                   BEQ             MOVEM_m2r_An_indir_r1_out                       ;if equal go to output MOVEroutine
000057F6                          6849  
000057F6  B4BC 00000012           6850  MOVEM_m2r_An_indir_r2           CMP.L           #match_MOVEM_An_indir_r2,D2              ;check reg is equal to 2
000057FC  6600 0006               6851                                   BNE             MOVEM_m2r_An_indir_r3                           ;if not try reg 3
00005800  6700 005C               6852                                   BEQ             MOVEM_m2r_An_indir_r2_out                       ;if equal go to output MOVEroutine
00005804                          6853  
00005804  B4BC 00000013           6854  MOVEM_m2r_An_indir_r3           CMP.L           #match_MOVEM_An_indir_r3,D2              ;check reg is equal to 3
0000580A  6600 0006               6855                                   BNE             MOVEM_m2r_An_indir_r4                           ;if not try reg 4
0000580E  6700 0058               6856                                   BEQ             MOVEM_m2r_An_indir_r3_out                       ;if equal go to output MOVEroutine
00005812                          6857      
00005812  B4BC 00000014           6858  MOVEM_m2r_An_indir_r4           CMP.L           #match_MOVEM_An_indir_r4,D2              ;check reg is equal to 4
00005818  6600 0006               6859                                   BNE             MOVEM_m2r_An_indir_r5                           ;if not try reg 5
0000581C  6700 0054               6860                                   BEQ             MOVEM_m2r_An_indir_r4_out                       ;if equal go to output MOVEroutine
00005820                          6861          
00005820  B4BC 00000015           6862  MOVEM_m2r_An_indir_r5           CMP.L           #match_MOVEM_An_indir_r5,D2              ;check reg is equal to 5
00005826  6600 0006               6863                                   BNE             MOVEM_m2r_An_indir_r6                           ;if not try reg 6
0000582A  6700 0050               6864                                   BEQ             MOVEM_m2r_An_indir_r5_out                       ;if equal go to output MOVEroutine
0000582E                          6865  
0000582E  B4BC 00000016           6866  MOVEM_m2r_An_indir_r6           CMP.L           #match_MOVEM_An_indir_r6,D2              ;check reg is equal to 6
00005834  6600 0006               6867                                   BNE             MOVEM_m2r_An_indir_r7                           ;if not try reg 7
00005838  6700 004C               6868                                   BEQ             MOVEM_m2r_An_indir_r6_out                       ;if equal go to output MOVEroutine
0000583C                          6869  
0000583C  B4BC 00000017           6870  MOVEM_m2r_An_indir_r7           CMP.L           #match_MOVEM_An_indir_r7,D2              ;check reg is equal to 7
00005842  6700 004C               6871                                   BEQ             MOVEM_m2r_An_indir_r7_out                       ;if equal go to output MOVEroutine
00005846  6600 0412               6872                                   BNE             MOVEM_ERROR                                   :if not equal to an addresssing mode, pritn error
0000584A                          6873  
0000584A                          6874  ;--------------------Address Register Indirect Output-----------------------
0000584A  227C 000089A5           6875  MOVEM_m2r_An_indir_r0_out                  MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
00005850  4EB8 578C               6876                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005854                          6877  
00005854  227C 000089AA           6878  MOVEM_m2r_An_indir_r1_out                  MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
0000585A  4EB8 578C               6879                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000585E                          6880  
0000585E  227C 000089AF           6881  MOVEM_m2r_An_indir_r2_out                  MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
00005864  4EB8 578C               6882                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005868                          6883  
00005868  227C 000089B4           6884  MOVEM_m2r_An_indir_r3_out                  MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
0000586E  4EB8 578C               6885                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005872                          6886  
00005872  227C 000089B9           6887  MOVEM_m2r_An_indir_r4_out                  MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
00005878  4EB8 578C               6888                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000587C                          6889  
0000587C  227C 000089BE           6890  MOVEM_m2r_An_indir_r5_out                  MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
00005882  4EB8 578C               6891                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005886                          6892  
00005886  227C 000089C3           6893  MOVEM_m2r_An_indir_r6_out                  MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
0000588C  4EB8 578C               6894                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005890                          6895                                          
00005890  227C 000089C8           6896  MOVEM_m2r_An_indir_r7_out                  MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
00005896  4EB8 578C               6897                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000589A                          6898  
0000589A                          6899  ;------------------Address Register Indirect with Post Increment-----------------------
0000589A  B4BC 00000018           6900  MOVEM_m2r_An_indir_pinc_reg                 CMP.L      #match_MOVEM_An_indir_pinc_r0,D2        ;check reg is equal to 0
000058A0  6600 0006               6901                                              BNE        MOVEM_m2r_An_indir_pinc_r1                      ;if not try reg 1
000058A4  6700 0064               6902                                              BEQ        MOVEM_m2r_An_indir_pinc_r0_out               ;if equal go to output MOVEroutine
000058A8                          6903  
000058A8  B4BC 00000019           6904  MOVEM_m2r_An_indir_pinc_r1                  CMP.L      #match_MOVEM_An_indir_pinc_r1,D2        ;check reg is equal to 1
000058AE  6600 0006               6905                                              BNE        MOVEM_m2r_An_indir_pinc_r2                      ;if not try reg 2
000058B2  6700 0060               6906                                              BEQ        MOVEM_m2r_An_indir_pinc_r1_out               ;if equal go to output MOVEroutine
000058B6                          6907  
000058B6  B4BC 0000001A           6908  MOVEM_m2r_An_indir_pinc_r2                  CMP.L      #match_MOVEM_An_indir_pinc_r2,D2        ;check reg is equal to 2
000058BC  6600 0006               6909                                              BNE        MOVEM_m2r_An_indir_pinc_r3                      ;if not try reg 3
000058C0  6700 005C               6910                                              BEQ        MOVEM_m2r_An_indir_pinc_r2_out               ;if equal go to output MOVEroutine
000058C4                          6911  
000058C4  B4BC 0000001B           6912  MOVEM_m2r_An_indir_pinc_r3                  CMP.L      #match_MOVEM_An_indir_pinc_r3,D2        ;check reg is equal to 3
000058CA  6600 0006               6913                                              BNE        MOVEM_m2r_An_indir_pinc_r4                      ;if not try reg 4
000058CE  6700 0058               6914                                              BEQ        MOVEM_m2r_An_indir_pinc_r3_out               ;if equal go to output MOVEroutine
000058D2                          6915   
000058D2  B4BC 0000001C           6916  MOVEM_m2r_An_indir_pinc_r4                  CMP.L      #match_MOVEM_An_indir_pinc_r4,D2        ;check reg is equal to 4
000058D8  6600 0006               6917                                              BNE        MOVEM_m2r_An_indir_pinc_r5                      ;if not try reg 5
000058DC  6700 0054               6918                                              BEQ        MOVEM_m2r_An_indir_pinc_r4_out               ;if equal go to output MOVEroutine
000058E0                          6919  
000058E0  B4BC 0000001D           6920  MOVEM_m2r_An_indir_pinc_r5                  CMP.L      #match_MOVEM_An_indir_pinc_r5,D2        ;check reg is equal to 5
000058E6  6600 0006               6921                                              BNE        MOVEM_m2r_An_indir_pinc_r6                      ;if not try reg 6
000058EA  6700 0050               6922                                              BEQ        MOVEM_m2r_An_indir_pinc_r5_out               ;if equal go to output MOVEroutine
000058EE                          6923  
000058EE  B4BC 0000001E           6924  MOVEM_m2r_An_indir_pinc_r6                  CMP.L      #match_MOVEM_An_indir_pinc_r6,D2         ;check reg is equal to 6
000058F4  6600 0006               6925                                              BNE        MOVEM_m2r_An_indir_pinc_r7                        ;if not try reg 7
000058F8  6700 004C               6926                                              BEQ        MOVEM_m2r_An_indir_pinc_r6_out                    ;if equal go to output MOVEroutine
000058FC                          6927  
000058FC  B4BC 0000001F           6928  MOVEM_m2r_An_indir_pinc_r7                  CMP.L      #match_MOVEM_An_indir_pinc_r7,D2         ;check reg is equal to 7
00005902  6700 004C               6929                                              BEQ        MOVEM_m2r_An_indir_pinc_r7_out                    ;if equal go to output MOVEroutine
00005906  6600 0352               6930                                              BNE        MOVEM_ERROR                                        :if not equal to an addresssing mode, pritn error
0000590A                          6931  
0000590A                          6932  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000590A  227C 000089CD           6933  MOVEM_m2r_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00005910  4EB8 578C               6934                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005914                          6935  
00005914  227C 000089D3           6936  MOVEM_m2r_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
0000591A  4EB8 578C               6937                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000591E                          6938  
0000591E  227C 000089D9           6939  MOVEM_m2r_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00005924  4EB8 578C               6940                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005928                          6941  
00005928  227C 000089DF           6942  MOVEM_m2r_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
0000592E  4EB8 578C               6943                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005932                          6944  
00005932  227C 000089E5           6945  MOVEM_m2r_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00005938  4EB8 578C               6946                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000593C                          6947  
0000593C  227C 000089EB           6948  MOVEM_m2r_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00005942  4EB8 578C               6949                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005946                          6950  
00005946  227C 000089F1           6951  MOVEM_m2r_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
0000594C  4EB8 578C               6952                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005950                          6953  
00005950  227C 000089F7           6954  MOVEM_m2r_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00005956  4EB8 578C               6955                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000595A                          6956  
0000595A                          6957  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000595A  B4BC 00000020           6958  MOVE_m2r_An_indir_predec                    CMP.L      #match_MOVEM_An_indir_pdec_r0,D2       ;check reg is equal to 0
00005960  6600 0006               6959                                              BNE        MOVEM_m2r_An_indir_pdec_r1                      ;if not try reg 1
00005964  6700 0064               6960                                              BEQ        MOVEM_m2r_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
00005968                          6961  
00005968  B4BC 00000021           6962  MOVEM_m2r_An_indir_pdec_r1                  CMP.L      #match_MOVEM_An_indir_pdec_r1,D2       ;check reg is equal to 1
0000596E  6600 0006               6963                                              BNE        MOVEM_m2r_An_indir_pdec_r2                      ;if not try reg 2
00005972  6700 0060               6964                                              BEQ        MOVEM_m2r_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
00005976                          6965  
00005976  B4BC 00000022           6966  MOVEM_m2r_An_indir_pdec_r2                  CMP.L      #match_MOVEM_An_indir_pdec_r2,D2       ;check reg is equal to 2
0000597C  6600 0006               6967                                              BNE        MOVEM_m2r_An_indir_pdec_r3                      ;if not try reg 3
00005980  6700 005C               6968                                              BEQ        MOVEM_m2r_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
00005984                          6969  
00005984  B4BC 00000023           6970  MOVEM_m2r_An_indir_pdec_r3                  CMP.L      #match_MOVEM_An_indir_pdec_r3,D2       ;check reg is equal to 3
0000598A  6600 0006               6971                                              BNE        MOVEM_m2r_An_indir_pdec_r4                      ;if not try reg 4
0000598E  6700 0058               6972                                              BEQ        MOVEM_m2r_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
00005992                          6973  
00005992  B4BC 00000024           6974  MOVEM_m2r_An_indir_pdec_r4                  CMP.L      #match_MOVEM_An_indir_pdec_r4,D2       ;check reg is equal to 4
00005998  6600 0006               6975                                              BNE        MOVEM_m2r_An_indir_pdec_r5                      ;if not try reg 5
0000599C  6700 0054               6976                                              BEQ        MOVEM_m2r_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
000059A0                          6977  
000059A0  B4BC 00000025           6978  MOVEM_m2r_An_indir_pdec_r5                  CMP.L      #match_MOVEM_An_indir_pdec_r5,D2       ;check reg is equal to 5
000059A6  6600 0006               6979                                              BNE        MOVEM_m2r_An_indir_pdec_r6                     ;if not try reg 6
000059AA  6700 0050               6980                                              BEQ        MOVEM_m2r_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
000059AE                          6981  
000059AE  B4BC 00000026           6982  MOVEM_m2r_An_indir_pdec_r6                  CMP.L      #match_MOVEM_An_indir_pdec_r6,D2       ;check reg is equal to 6
000059B4  6600 0006               6983                                              BNE        MOVEM_m2r_An_indir_pdec_r7                     ;if not try reg 7
000059B8  6700 004C               6984                                              BEQ        MOVEM_m2r_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
000059BC                          6985  
000059BC  B4BC 00000027           6986  MOVEM_m2r_An_indir_pdec_r7                  CMP.L      #match_MOVEM_An_indir_pdec_r7,D2       ;check reg is equal to 7
000059C2  6700 004C               6987                                              BEQ        MOVEM_m2r_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
000059C6  6600 0292               6988                                              BNE        MOVEM_ERROR                                    :if not equal to an addresssing mode, pritn error
000059CA                          6989  
000059CA                          6990  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000059CA  227C 000089FD           6991  MOVEM_m2r_An_indir_pdec_r0_out                  MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
000059D0  4EB8 578C               6992                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000059D4                          6993                                              
000059D4  227C 00008A03           6994  MOVEM_m2r_An_indir_pdec_r1_out                  MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
000059DA  4EB8 578C               6995                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000059DE                          6996  
000059DE  227C 00008A09           6997  MOVEM_m2r_An_indir_pdec_r2_out                  MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
000059E4  4EB8 578C               6998                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000059E8                          6999  
000059E8  227C 00008A0F           7000  MOVEM_m2r_An_indir_pdec_r3_out                  MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
000059EE  4EB8 578C               7001                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000059F2                          7002  
000059F2  227C 00008A15           7003  MOVEM_m2r_An_indir_pdec_r4_out                  MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
000059F8  4EB8 578C               7004                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000059FC                          7005  
000059FC  227C 00008A1B           7006  MOVEM_m2r_An_indir_pdec_r5_out                  MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
00005A02  4EB8 578C               7007                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005A06                          7008  
00005A06  227C 00008A21           7009  MOVEM_m2r_An_indir_pdec_r6_out                  MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
00005A0C  4EB8 578C               7010                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005A10                          7011  
00005A10  227C 00008A27           7012  MOVEM_m2r_An_indir_pdec_r7_out                  MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00005A16  4EB8 578C               7013                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005A1A                          7014          
00005A1A                          7015  ;------------------Absolute Addressing Output-----------------------
00005A1A  22FC 00008A37           7016  MOVEM_m2r_abs_add_word_out            MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00005A20  22C5                    7017                                        MOVE.L      D5,(A1)+                           ;load address                  
00005A22  4CDF 7CBE               7018                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005A26  4E75                    7019                                        RTS                                            :return to MOVEroutine
00005A28                          7020                                              ;return to MOVEroutine
00005A28                          7021                                             
00005A28                          7022  
00005A28  2A18                    7023  MOVEM_m2r_abs_add_long_out            MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00005A2A  22FC 00008A37           7024                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00005A30  22C5                    7025                                        MOVE.L      D5,(A1)+                           ;load address                  
00005A32  4CDF 7CBE               7026                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005A36  4E75                    7027                                        RTS                                            :return to MOVEroutine
00005A38                          7028                                              ;return to MOVEroutine                                            
00005A38                          7029  
00005A38  4241                    7030  MOVEM_second_operand                     CLR            D1   
00005A3A                          7031  
00005A3A  2A18                    7032  MOVEM_m2r                                MOVE.L         (A0)+,D5                                ;pull the register list
00005A3C                          7033                                           
00005A3C  223C 00008000           7034                                           MOVE.L         #mask_MOVEM_reg_mem_D0,D1                     ;load mask into register
00005A42  B2BC 00008000           7035                                           CMP.L          #match_MOVEM_reg_mem_D0,D1                    ;check to see if the D0 is on the list
00005A48  6700 016E               7036                                           BEQ            MOVEM_m2r_D0_reg_list_out
00005A4C  6600 0002               7037                                           BNE            MOVEM_m2r_D1
00005A50                          7038  
00005A50  2A18                    7039  MOVEM_m2r_D1                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A52  4241                    7040                                           CLR            D1
00005A54  223C 00004000           7041                                           MOVE.L         #mask_MOVEM_reg_mem_D1,D1                     ;load mask into register
00005A5A  B2BC 00004000           7042                                           CMP.L          #match_MOVEM_reg_mem_D1,D1                    ;check to see if the D0 is on the list
00005A60  6700 0160               7043                                           BEQ            MOVEM_m2r_D1_reg_list_out
00005A64  6600 0002               7044                                           BNE            MOVEM_m2r_D2
00005A68                          7045  
00005A68  2A18                    7046  MOVEM_m2r_D2                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A6A  4241                    7047                                           CLR            D1
00005A6C  223C 00002000           7048                                           MOVE.L         #mask_MOVEM_reg_mem_D2,D1                     ;load mask into register
00005A72  B2BC 00002000           7049                                           CMP.L          #match_MOVEM_reg_mem_D2,D1                    ;check to see if the D0 is on the list
00005A78  6700 0152               7050                                           BEQ            MOVEM_m2r_D2_reg_list_out
00005A7C  6600 0002               7051                                           BNE            MOVEM_m2r_D3
00005A80                          7052  
00005A80  2A18                    7053  MOVEM_m2r_D3                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A82  4241                    7054                                           CLR            D1
00005A84  223C 00001000           7055                                           MOVE.L         #mask_MOVEM_reg_mem_D3,D1                     ;load mask into register
00005A8A  B2BC 00001000           7056                                           CMP.L          #match_MOVEM_reg_mem_D3,D1                    ;check to see if the D0 is on the list
00005A90  6700 0144               7057                                           BEQ            MOVEM_m2r_D3_reg_list_out
00005A94  6600 0002               7058                                           BNE            MOVEM_m2r_D4
00005A98                          7059  
00005A98  2A18                    7060  MOVEM_m2r_D4                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A9A  4241                    7061                                           CLR            D1
00005A9C  223C 00000800           7062                                           MOVE.L         #mask_MOVEM_reg_mem_D4,D1                     ;load mask into register
00005AA2  B2BC 00000800           7063                                           CMP.L          #match_MOVEM_reg_mem_D4,D1                    ;check to see if the D0 is on the list
00005AA8  6700 0136               7064                                           BEQ            MOVEM_m2r_D4_reg_list_out
00005AAC  6600 0002               7065                                           BNE            MOVEM_m2r_D5
00005AB0                          7066  
00005AB0  2A18                    7067  MOVEM_m2r_D5                             MOVE.L         (A0)+,D5                                ;pull the register list
00005AB2  4241                    7068                                           CLR            D1
00005AB4  223C 00000400           7069                                           MOVE.L         #mask_MOVEM_reg_mem_D5,D1                     ;load mask into register
00005ABA  B2BC 00000400           7070                                           CMP.L          #match_MOVEM_reg_mem_D5,D1                    ;check to see if the D0 is on the list
00005AC0  6700 0128               7071                                           BEQ            MOVEM_m2r_D5_reg_list_out
00005AC4  6600 0002               7072                                           BNE            MOVEM_m2r_D6
00005AC8                          7073  
00005AC8  2A18                    7074  MOVEM_m2r_D6                             MOVE.L         (A0)+,D5                                ;pull the register list
00005ACA  4241                    7075                                           CLR            D1
00005ACC  223C 00000200           7076                                           MOVE.L         #mask_MOVEM_reg_mem_D6,D1                     ;load mask into register
00005AD2  B2BC 00000200           7077                                           CMP.L          #match_MOVEM_reg_mem_D6,D1                    ;check to see if the D0 is on the list
00005AD8  6700 011A               7078                                           BEQ            MOVEM_m2r_D6_reg_list_out
00005ADC  6600 0002               7079                                           BNE            MOVEM_m2r_D7
00005AE0                          7080  
00005AE0  2A18                    7081  MOVEM_m2r_D7                             MOVE.L         (A0)+,D5                                ;pull the register list
00005AE2  4241                    7082                                           CLR            D1
00005AE4  223C 00000100           7083                                           MOVE.L         #mask_MOVEM_reg_mem_D7,D1                     ;load mask into register
00005AEA  B2BC 00000100           7084                                           CMP.L          #match_MOVEM_reg_mem_D7,D1                    ;check to see if the D0 is on the list
00005AF0  6700 010C               7085                                           BEQ            MOVEM_m2r_D7_reg_list_out
00005AF4  6600 0002               7086                                           BNE            MOVEM_m2r_A0
00005AF8                          7087  
00005AF8                          7088  
00005AF8  2A18                    7089  MOVEM_m2r_A0                             MOVE.L         (A0)+,D5                                ;pull the register list
00005AFA  4241                    7090                                           CLR            D1
00005AFC  227C 00000080           7091                                           MOVE.L         #mask_MOVEM_reg_mem_A0,A1                     ;load mask into register
00005B02  B3FC 00000080           7092                                           CMP.L          #match_MOVEM_reg_mem_A0,A1                    ;check to see if the A0 is on the list
00005B08  6700 00FE               7093                                           BEQ            MOVEM_m2r_A0_reg_list_out
00005B0C  6600 0002               7094                                           BNE            MOVEM_m2r_A1
00005B10                          7095  
00005B10  2A18                    7096  MOVEM_m2r_A1                             MOVE.L         (A0)+,D5                                ;pull the register list
00005B12  4241                    7097                                           CLR            D1
00005B14  227C 00000040           7098                                           MOVE.L         #mask_MOVEM_reg_mem_A1,A1                     ;load mask into register
00005B1A  B3FC 00000040           7099                                           CMP.L          #match_MOVEM_reg_mem_A1,A1                    ;check to see if the A0 is on the list
00005B20  6700 00F0               7100                                           BEQ            MOVEM_m2r_A1_reg_list_out
00005B24  6600 0002               7101                                           BNE            MOVEM_m2r_A2
00005B28                          7102  
00005B28  2A18                    7103  MOVEM_m2r_A2                             MOVE.L         (A0)+,D5                                ;pull the register list
00005B2A  4241                    7104                                           CLR            D1
00005B2C  227C 00000020           7105                                           MOVE.L         #mask_MOVEM_reg_mem_A2,A1                     ;load mask into register
00005B32  B3FC 00000020           7106                                           CMP.L          #match_MOVEM_reg_mem_A2,A1                    ;check to see if the A0 is on the list
00005B38  6700 00E2               7107                                           BEQ            MOVEM_m2r_A2_reg_list_out
00005B3C  6600 0002               7108                                           BNE            MOVEM_m2r_A3
00005B40                          7109  
00005B40  2A18                    7110  MOVEM_m2r_A3                             MOVE.L         (A0)+,D5                                ;pull the register list
00005B42  4241                    7111                                           CLR            D1
00005B44  227C 00000010           7112                                           MOVE.L         #mask_MOVEM_reg_mem_A3,A1                     ;load mask into register
00005B4A  B3FC 00000010           7113                                           CMP.L          #match_MOVEM_reg_mem_A3,A1                    ;check to see if the A0 is on the list
00005B50  6700 00D4               7114                                           BEQ            MOVEM_m2r_A3_reg_list_out
00005B54  6600 0002               7115                                           BNE            MOVEM_m2r_A4
00005B58                          7116  
00005B58  2A18                    7117  MOVEM_m2r_A4                             MOVE.L         (A0)+,D5                                ;pull the register list
00005B5A  4241                    7118                                           CLR            D1
00005B5C  227C 00000008           7119                                           MOVE.L         #mask_MOVEM_reg_mem_A4,A1                     ;load mask into register
00005B62  B3FC 00000008           7120                                           CMP.L          #match_MOVEM_reg_mem_A4,A1                    ;check to see if the A0 is on the list
00005B68  6700 00C6               7121                                           BEQ            MOVEM_m2r_A4_reg_list_out
00005B6C  6600 0002               7122                                           BNE            MOVEM_m2r_A5
00005B70                          7123  
00005B70  2A18                    7124  MOVEM_m2r_A5                             MOVE.L         (A0)+,D5                                ;pull the register list
00005B72  4241                    7125                                           CLR            D1
00005B74  227C 00000004           7126                                           MOVE.L         #mask_MOVEM_reg_mem_A5,A1                     ;load mask into register
00005B7A  B3FC 00000004           7127                                           CMP.L          #match_MOVEM_reg_mem_A5,A1                    ;check to see if the A0 is on the list
00005B80  6700 00B8               7128                                           BEQ            MOVEM_m2r_A5_reg_list_out
00005B84  6600 0002               7129                                           BNE            MOVEM_m2r_A6
00005B88                          7130  
00005B88  2A18                    7131  MOVEM_m2r_A6                             MOVE.L         (A0)+,D5                                ;pull the register list
00005B8A  4241                    7132                                           CLR            D1
00005B8C  227C 00000002           7133                                           MOVE.L         #mask_MOVEM_reg_mem_A6,A1                     ;load mask into register
00005B92  B3FC 00000002           7134                                           CMP.L          #match_MOVEM_reg_mem_A6,A1                    ;check to see if the A0 is on the list
00005B98  6700 00AA               7135                                           BEQ            MOVEM_m2r_A6_reg_list_out
00005B9C  6600 0002               7136                                           BNE            MOVEM_m2r_A7
00005BA0                          7137  
00005BA0  2A18                    7138  MOVEM_m2r_A7                             MOVE.L         (A0)+,D5                                ;pull the register list
00005BA2  4241                    7139                                           CLR            D1
00005BA4  227C 00000001           7140                                           MOVE.L         #mask_MOVEM_reg_mem_A7,A1                     ;load mask into register
00005BAA  B3FC 00000001           7141                                           CMP.L          #match_MOVEM_reg_mem_A7,A1                    ;check to see if the A0 is on the list
00005BB0  6700 009C               7142                                           BEQ            MOVEM_m2r_A7_reg_list_out
00005BB4  6600 F9CA               7143                                           BNE            MOVEM_determine_second_operand
00005BB8                          7144  
00005BB8                          7145  ;------------------------------------------------------Register List Output----------------------------------------
00005BB8  22FC 00008965           7146  MOVEM_m2r_D0_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005BBE  4EB8 5376               7147                                          JSR             MOVEM_reg_mem_D1            ;go check D1
00005BC2                          7148                                          
00005BC2  22FC 00008965           7149  MOVEM_m2r_D1_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005BC8  4EB8 538E               7150                                          JSR             MOVEM_reg_mem_D2            ;go check D2
00005BCC                          7151  
00005BCC  22FC 00008965           7152  MOVEM_m2r_D2_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005BD2  4EB8 53A6               7153                                          JSR             MOVEM_reg_mem_D3            ;go check D3
00005BD6                          7154  
00005BD6  22FC 00008965           7155  MOVEM_m2r_D3_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005BDC  4EB8 53BE               7156                                          JSR             MOVEM_reg_mem_D4            ;go check D4
00005BE0                          7157  
00005BE0  22FC 00008965           7158  MOVEM_m2r_D4_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005BE6  4EB8 53D6               7159                                          JSR             MOVEM_reg_mem_D5            ;go check D5
00005BEA                          7160  
00005BEA  22FC 00008965           7161  MOVEM_m2r_D5_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005BF0  4EB8 53EE               7162                                          JSR             MOVEM_reg_mem_D6            ;go check D6
00005BF4                          7163  
00005BF4  22FC 00008965           7164  MOVEM_m2r_D6_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005BFA  4EB8 5406               7165                                          JSR             MOVEM_reg_mem_D7            ;go check D7
00005BFE                          7166  
00005BFE  22FC 00008965           7167  MOVEM_m2r_D7_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005C04  4EB8 541E               7168                                          JSR             MOVEM_reg_mem_A0            ;go check A0
00005C08                          7169  
00005C08  22FC 0000897D           7170  MOVEM_m2r_A0_reg_list_out               MOVE.L          #ea_A0,(A1)+                ;load the register into A1
00005C0E  4EB8 5436               7171                                          JSR             MOVEM_reg_mem_A1            ;go check D1
00005C12                          7172                                          
00005C12  22FC 00008980           7173  MOVEM_m2r_A1_reg_list_out               MOVE.L          #ea_A1,(A1)+                ;load the register into A1
00005C18  4EB8 544E               7174                                          JSR             MOVEM_reg_mem_A2            ;go check D2
00005C1C                          7175  
00005C1C  22FC 00008983           7176  MOVEM_m2r_A2_reg_list_out               MOVE.L          #ea_A2,(A1)+                ;load the register into A1
00005C22  4EB8 5466               7177                                          JSR             MOVEM_reg_mem_A3            ;go check D3
00005C26                          7178  
00005C26  22FC 00008986           7179  MOVEM_m2r_A3_reg_list_out               MOVE.L          #ea_A3,(A1)+                ;load the register into A1
00005C2C  4EB8 547E               7180                                          JSR             MOVEM_reg_mem_A4            ;go check D4
00005C30                          7181  
00005C30  22FC 00008989           7182  MOVEM_m2r_A4_reg_list_out               MOVE.L          #ea_A4,(A1)+                ;load the register into A1
00005C36  4EB8 5496               7183                                          JSR             MOVEM_reg_mem_A5            ;go check D5
00005C3A                          7184  
00005C3A  22FC 0000898C           7185  MOVEM_m2r_A5_reg_list_out               MOVE.L          #ea_A5,(A1)+                ;load the register into A1
00005C40  4EB8 54AE               7186                                          JSR             MOVEM_reg_mem_A6            ;go check D6
00005C44                          7187  
00005C44  22FC 0000898F           7188  MOVEM_m2r_A6_reg_list_out               MOVE.L          #ea_A6,(A1)+                ;load the register into A1
00005C4A  4EB8 54C6               7189                                          JSR             MOVEM_reg_mem_A7            ;go check D7
00005C4E                          7190  
00005C4E  22FC 00008992           7191  MOVEM_m2r_A7_reg_list_out               MOVE.L          #ea_A7,(A1)+                ;load the register into A1
00005C54  4CDF 7CBE               7192                                          MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005C58  4E75                    7193                                        RTS                                            :return to MOVEroutine
00005C5A                          7194  
00005C5A                          7195  
00005C5A                          7196  
00005C5A                          7197  ;----------------------Error Handling----------------------------------------
00005C5A  43F9 00008951           7198  MOVEM_ERROR                                     LEA     ERROR_MESSAGE,A1                                          ;load error messge into A3
00005C60  4CDF 7CBE               7199                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005C64  4E75                    7200                                                  RTS                                            :return to MOVEroutine
00005C66                          7201  
00005C66                          7202                                                  
00005C66                          7203                                                 
00005C66                          7204  
00005C66  =00000400               7205  mask_MOVEM_dir         EQU         $0400
00005C66                          7206  
00005C66                          7207  
00005C66  =00008000               7208  mask_MOVEM_reg_mem_D0        EQU         $8000
00005C66  =00004000               7209  mask_MOVEM_reg_mem_D1        EQU         $4000
00005C66  =00002000               7210  mask_MOVEM_reg_mem_D2        EQU         $2000
00005C66  =00001000               7211  mask_MOVEM_reg_mem_D3        EQU         $1000
00005C66  =00000800               7212  mask_MOVEM_reg_mem_D4        EQU         $0800
00005C66  =00000400               7213  mask_MOVEM_reg_mem_D5        EQU         $0400
00005C66  =00000200               7214  mask_MOVEM_reg_mem_D6        EQU         $0200
00005C66  =00000100               7215  mask_MOVEM_reg_mem_D7        EQU         $0100
00005C66                          7216  
00005C66  =00000080               7217  mask_MOVEM_reg_mem_A0        EQU         $0080
00005C66  =00000040               7218  mask_MOVEM_reg_mem_A1        EQU         $0040
00005C66  =00000020               7219  mask_MOVEM_reg_mem_A2        EQU         $0020
00005C66  =00000010               7220  mask_MOVEM_reg_mem_A3        EQU         $0010
00005C66  =00000008               7221  mask_MOVEM_reg_mem_A4        EQU         $0008
00005C66  =00000004               7222  mask_MOVEM_reg_mem_A5        EQU         $0004
00005C66  =00000002               7223  mask_MOVEM_reg_mem_A6        EQU         $0002
00005C66  =00000001               7224  mask_MOVEM_reg_mem_A7        EQU         $0001
00005C66                          7225  
00005C66                          7226  
00005C66  =00008000               7227  mask_MOVEM_mem_reg_A7        EQU         $8000
00005C66  =00004000               7228  mask_MOVEM_mem_reg_A6        EQU         $4000
00005C66  =00002000               7229  mask_MOVEM_mem_reg_A5        EQU         $2000
00005C66  =00001000               7230  mask_MOVEM_mem_reg_A4        EQU         $1000
00005C66  =00000800               7231  mask_MOVEM_mem_reg_A3        EQU         $0800
00005C66  =00000400               7232  mask_MOVEM_mem_reg_A2        EQU         $0400
00005C66  =00000200               7233  mask_MOVEM_mem_reg_A1        EQU         $0200
00005C66  =00000100               7234  mask_MOVEM_mem_reg_A0        EQU         $0100
00005C66                          7235  
00005C66  =00008000               7236  mask_MOVEM_mem_reg_D7        EQU         $8000
00005C66  =00004000               7237  mask_MOVEM_mem_reg_D6        EQU         $4000
00005C66  =00002000               7238  mask_MOVEM_mem_reg_D5        EQU         $2000
00005C66  =00001000               7239  mask_MOVEM_mem_reg_D4        EQU         $1000
00005C66  =00000800               7240  mask_MOVEM_mem_reg_D3        EQU         $0800
00005C66  =00000400               7241  mask_MOVEM_mem_reg_D2        EQU         $0400
00005C66  =00000200               7242  mask_MOVEM_mem_reg_D1        EQU         $0200
00005C66  =00000100               7243  mask_MOVEM_mem_reg_D0        EQU         $0100
00005C66                          7244  
00005C66                          7245  
00005C66  =0000003F               7246  mask_MOVEM_ea_reg_and_mode      EQU         $003F
00005C66  =0000003C               7247  mask_MOVEM_ea_mode              EQU         $003C
00005C66  =00000038               7248  mask_MOVEM_abs_add              EQU         $0038
00005C66                          7249   
00005C66  =00000400               7250  match_MOVEM_reg_mem             EQU         $0400
00005C66  =00000010               7251  match_MOVEM_An_indir            EQU         $0010
00005C66                          7252  
00005C66  =00000038               7253  match_MOVEM_abs_add_word        EQU         $0038
00005C66  =00000039               7254  match_MOVEM_abs_add_long        EQU         $0039
00005C66                          7255  
00005C66  =00000010               7256  match_MOVEM_An_indir_r0     EQU         $0010
00005C66  =00000011               7257  match_MOVEM_An_indir_r1     EQU         $0011
00005C66  =00000012               7258  match_MOVEM_An_indir_r2     EQU         $0012
00005C66  =00000013               7259  match_MOVEM_An_indir_r3     EQU         $0013
00005C66  =00000014               7260  match_MOVEM_An_indir_r4     EQU         $0014
00005C66  =00000015               7261  match_MOVEM_An_indir_r5     EQU         $0015
00005C66  =00000016               7262  match_MOVEM_An_indir_r6     EQU         $0016
00005C66  =00000017               7263  match_MOVEM_An_indir_r7     EQU         $0017
00005C66                          7264  
00005C66  =00000020               7265  match_MOVEM_An_indir_pdec_r0            EQU         $0020
00005C66  =00000021               7266  match_MOVEM_An_indir_pdec_r1            EQU         $0021
00005C66  =00000022               7267  match_MOVEM_An_indir_pdec_r2            EQU         $0022
00005C66  =00000023               7268  match_MOVEM_An_indir_pdec_r3            EQU         $0023
00005C66  =00000024               7269  match_MOVEM_An_indir_pdec_r4            EQU         $0024
00005C66  =00000025               7270  match_MOVEM_An_indir_pdec_r5            EQU         $0025
00005C66  =00000026               7271  match_MOVEM_An_indir_pdec_r6            EQU         $0026
00005C66  =00000027               7272  match_MOVEM_An_indir_pdec_r7            EQU         $0027
00005C66                          7273  
00005C66                          7274  
00005C66  =00000400               7275  match_MOVEM_mem_reg             EQU         $0400
00005C66                          7276  
00005C66                          7277  
00005C66  =00000020               7278  match_MOVEM_An_indir_pdec       EQU         $0020
00005C66  =00000010               7279  match_MOVEM_An_indir_pinc       EQU         $0010
00005C66  =00000038               7280  match_MOVEM_abs_add_word        EQU         $0038
00005C66  =00000039               7281  match_MOVEM_abs_add_long        EQU         $0039
00005C66                          7282  
00005C66  =00000010               7283  match_MOVEM_An_indir_r0         EQU         $0010
00005C66  =00000011               7284  match_MOVEM_An_indir_r1         EQU         $0011
00005C66  =00000012               7285  match_MOVEM_An_indir_r2         EQU         $0012
00005C66  =00000013               7286  match_MOVEM_An_indir_r3         EQU         $0013
00005C66  =00000014               7287  match_MOVEM_An_indir_r4         EQU         $0014
00005C66  =00000015               7288  match_MOVEM_An_indir_r5         EQU         $0015
00005C66  =00000016               7289  match_MOVEM_An_indir_r6         EQU         $0016
00005C66  =00000017               7290  match_MOVEM_An_indir_r7         EQU         $0017
00005C66                          7291  
00005C66                          7292  
00005C66  =00000018               7293  match_MOVEM_An_indir_pinc_r0        EQU         $0018
00005C66  =00000019               7294  match_MOVEM_An_indir_pinc_r1        EQU         $0019
00005C66  =0000001A               7295  match_MOVEM_An_indir_pinc_r2        EQU         $001A
00005C66  =0000001B               7296  match_MOVEM_An_indir_pinc_r3        EQU         $001B
00005C66  =0000001C               7297  match_MOVEM_An_indir_pinc_r4        EQU         $001C
00005C66  =0000001D               7298  match_MOVEM_An_indir_pinc_r5        EQU         $001D
00005C66  =0000001E               7299  match_MOVEM_An_indir_pinc_r6        EQU         $001E
00005C66  =0000001F               7300  match_MOVEM_An_indir_pinc_r7        EQU         $001F
00005C66                          7301  
00005C66  =00000038               7302  match_MOVEM_imm_add                 EQU         $0038
00005C66  =00000038               7303  match_MOVEM_imm_add_word            EQU         $0038
00005C66  =00000039               7304  match_MOVEM_imm_add_long            EQU         $0039
00005C66  =00008000               7305  match_MOVEM_reg_mem_D0        EQU         $8000
00005C66  =00004000               7306  match_MOVEM_reg_mem_D1        EQU         $4000
00005C66  =00002000               7307  match_MOVEM_reg_mem_D2        EQU         $2000
00005C66  =00001000               7308  match_MOVEM_reg_mem_D3        EQU         $1000
00005C66  =00000800               7309  match_MOVEM_reg_mem_D4        EQU         $0800
00005C66  =00000400               7310  match_MOVEM_reg_mem_D5        EQU         $0400
00005C66  =00000200               7311  match_MOVEM_reg_mem_D6        EQU         $0200
00005C66  =00000100               7312  match_MOVEM_reg_mem_D7        EQU         $0100
00005C66                          7313  
00005C66  =00000080               7314  match_MOVEM_reg_mem_A0        EQU         $0080
00005C66  =00000040               7315  match_MOVEM_reg_mem_A1        EQU         $0040
00005C66  =00000020               7316  match_MOVEM_reg_mem_A2        EQU         $0020
00005C66  =00000010               7317  match_MOVEM_reg_mem_A3        EQU         $0010
00005C66  =00000008               7318  match_MOVEM_reg_mem_A4        EQU         $0008
00005C66  =00000004               7319  match_MOVEM_reg_mem_A5        EQU         $0004
00005C66  =00000002               7320  match_MOVEM_reg_mem_A6        EQU         $0002
00005C66  =00000001               7321  match_MOVEM_reg_mem_A7        EQU         $0001
00005C66                          7322  
00005C66                          7323  
00005C66  =00008000               7324  match_MOVEM_mem_reg_A7        EQU         $8000
00005C66  =00004000               7325  match_MOVEM_mem_reg_A6        EQU         $4000
00005C66  =00002000               7326  match_MOVEM_mem_reg_A5        EQU         $2000
00005C66  =00001000               7327  match_MOVEM_mem_reg_A4        EQU         $1000
00005C66  =00000800               7328  match_MOVEM_mem_reg_A3        EQU         $0800
00005C66  =00000400               7329  match_MOVEM_mem_reg_A2        EQU         $0400
00005C66  =00000200               7330  match_MOVEM_mem_reg_A1        EQU         $0200
00005C66  =00000100               7331  match_MOVEM_mem_reg_A0        EQU         $0100
00005C66                          7332  
00005C66  =00008000               7333  match_MOVEM_mem_reg_D7        EQU         $8000
00005C66  =00004000               7334  match_MOVEM_mem_reg_D6        EQU         $4000
00005C66  =00002000               7335  match_MOVEM_mem_reg_D5        EQU         $2000
00005C66  =00001000               7336  match_MOVEM_mem_reg_D4        EQU         $1000
00005C66  =00000800               7337  match_MOVEM_mem_reg_D3        EQU         $0800
00005C66  =00000400               7338  match_MOVEM_mem_reg_D2        EQU         $0400
00005C66  =00000200               7339  match_MOVEM_mem_reg_D1        EQU         $0200
00005C66  =00000100               7340  match_MOVEM_mem_reg_D0        EQU         $0100
00005C66                          7341  
00005C66                          7342  
00005C66                          7343  
00005C66                          7344  
00005C66                          7345  -------------------- end include --------------------
00005C66                          7346              INCLUDE 'SUB Subroutine.x68'
00005C66                          7347  
00005C66  48E7 7D3E               7348  SUB_sub                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)                        ;preserve the registers, 
00005C6A                          7349  ;-----------------------------ea,Dn-----------------------------------------------------------------------------------------------------
00005C6A  C2BC 000001C0           7350                                  AND.L              #mask_opmode,D1                       ;load mask to determine the operand order
00005C70                          7351                                  
00005C70  B2BC 00000000           7352  SUB_ea_Dn_match                 CMP.L              #match_SUB_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00005C76  6700 004A               7353                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
00005C7A  6600 0002               7354                                  BNE                SUB_ea_Dn_match_w                     ;if not check word size for same order
00005C7E                          7355  
00005C7E  B2BC 00000040           7356  SUB_ea_Dn_match_w               CMP.L              #match_SUB_w_Dn_ea,D1                 ;check to see if it's Dn,ea
00005C84  6700 003C               7357                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
00005C88  6600 0002               7358                                  BNE                SUB_ea_Dn_match_l                     ;if not check long size for same order
00005C8C                          7359  
00005C8C  B2BC 00000080           7360  SUB_ea_Dn_match_l               CMP.L              #match_SUB_l_Dn_ea,D1                 ;check to see if it's Dn,ea
00005C92  6700 002E               7361                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
00005C96  66D8                    7362                                  BNE                SUB_ea_Dn_match                       ;if not check other order
00005C98                          7363  
00005C98  B2BC 00000100           7364  SUB_Dn_ea_match                 CMP.L              #match_SUB_b_ea_Dn,D1                 ;check to see if it's ea,Dn
00005C9E  6700 0500               7365                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
00005CA2  6600 0002               7366                                  BNE                SUB_Dn_ea_match_w                     ;if not go check word size for same order
00005CA6                          7367  
00005CA6  B2BC 00000140           7368  SUB_Dn_ea_match_w               CMP.L              #match_SUB_w_ea_Dn,D1                 ;check to see if it's ea,Dn
00005CAC  6700 04F2               7369                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
00005CB0  6600 0002               7370                                  BNE                SUB_Dn_ea_match_l                     ;if not go check word size for same order
00005CB4                          7371  
00005CB4  B2BC 00000180           7372  SUB_Dn_ea_match_l               CMP.L              #match_SUB_l_ea_Dn,D1                 ;check to see if it's ea,Dn
00005CBA  6700 04E4               7373                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
00005CBE  6600 D9A2               7374                                  BNE                ERROR                                 ;if not go to error message
00005CC2                          7375  
00005CC2                          7376  
00005CC2                          7377  ;--------------------------------------------------------------------------------------------------------------------------
00005CC2                          7378  ;-------------------------------------------------------------------------------------------------------------------------
00005CC2  4241                    7379  SUB_ea_Dn                        CLR               D1                                     ;clear D1 to load new mask                                
00005CC4  C2BC 00000038           7380                                   AND.L             #mask_SUB_ea_mode,D1                   ;move the mask to D1
00005CCA                          7381  
00005CCA                          7382  
00005CCA                          7383  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00005CCA  B2BC 00000000           7384  SUB_ea_Dn_data_reg_dir             CMP.L           #match_SUB_Dn,D1                       ;check to see if mode is data reg direct
00005CD0  6600 0006               7385                                     BNE             SUB_ea_Dn_add_reg_indir                ;if not, go check add reg dir
00005CD4  6700 0064               7386                                     BEQ             SUB_ea_Dn_Dn_reg                       ;if equal go figure out the register
00005CD8                          7387  
00005CD8  B2BC 00000010           7388  SUB_ea_Dn_add_reg_indir            CMP.L           #match_SUB_An_indir,D1                 ;check to see if mode is add reg indir
00005CDE  6600 0006               7389                                     BNE             SUB_ea_Dn_add_reg_indir_predec         ;if not, go check add reg indir predec 
00005CE2  6700 0126               7390                                     BEQ             SUB_ea_Dn_An_indir_reg                 ;if equal go figure out the register           
00005CE6                          7391             
00005CE6  B2BC 00000020           7392  SUB_ea_Dn_add_reg_indir_predec     CMP.L           #match_SUB_An_indir_predec,D1          ;check to see if mode is add reg indor w/ postinc
00005CEC  6600 0006               7393                                     BNE             SUB_ea_Dn_add_reg_indir_postinc        ;if not go check add reg indir/predec
00005CF0  6700 02B8               7394                                     BEQ             SUB_ea_Dn_An_indir_predec              ;if equal go figure out the register
00005CF4                          7395                        
00005CF4  B2BC 00000018           7396  SUB_ea_Dn_add_reg_indir_postinc    CMP.L           #match_SUB_An_indir_postinc,D1         ;check to see if mode is add reg indir w/predec
00005CFA  6600 0006               7397                                     BNE             SUB_ea_Dn_abs_add_word                 ;if not go check abs add word
00005CFE  6700 01DA               7398                                     BEQ             SUB_ea_Dn_An_indir_postinc_reg         ;if equal go figure out the register
00005D02                          7399  
00005D02  C4BC 0000003F           7400  SUB_ea_Dn_abs_add_word             AND.L           #mask_SUB_abs_add,D2                   ;load mask to determine if abs add word or long
00005D08                          7401                                   
00005D08  B4BC 00000038           7402                                     CMP.L           #match_SUB_abs_add_word,D2             ;check if abs add word
00005D0E  2A18                    7403                                     MOVE.L          (A0)+,D5                               ;pull the next word instruction that holds the address
00005D10  6600 0006               7404                                     BNE             SUB_ea_Dn_abs_add_long                 ;if not go check abs add long
00005D14  6700 0364               7405                                     BEQ             SUB_ea_Dn_abs_add_word_out             ;if equal go to output
00005D18                          7406    
00005D18  B4BC 00000039           7407  SUB_ea_Dn_abs_add_long             CMP.L           #match_SUB_abs_add_long,D2             ;check to see if abs add long
00005D1E  6700 0368               7408                                     BEQ             SUB_ea_Dn_abs_add_long_out             ;if equal go to output
00005D22  6600 0002               7409                     BNE             SUB_ea_Dn_immediate_add
00005D26                          7410                                   
00005D26  B2BC 0000003C           7411  SUB_ea_Dn_immediate_add            CMP.L           #match_SUB_imm_add,D1                  ;check if immediate address
00005D2C  6700 036A               7412                                     BEQ             SUB_ea_Dn_immediate_add_out            ;if equal go to immediate add sub routine
00005D30  6600 D930               7413                     BNE             ERROR                                  ;if not equal go to error mesage sub routine
00005D34                          7414  
00005D34                          7415  
00005D34                          7416  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00005D34                          7417                                   
00005D34  C4BC 0000003F           7418                                   AND.L           #mask_SUB_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
00005D3A                          7419  ;-----------------------------------Data Register Direct--------------------------------
00005D3A  B4BC 00000000           7420  SUB_ea_Dn_Dn_reg             CMP.L              #match_SUB_D0,D2               ;check to see in the register is 0
00005D40  6600 0006               7421                               BNE                SUB_ea_Dn_rD1                  ;if not go check register 1
00005D44  6700 0064               7422                               BEQ                SUB_ea_Dn_D0_out               ;if equal go to output subroutine
00005D48                          7423  
00005D48  B4BC 00000001           7424  SUB_ea_Dn_rD1                CMP.L              #match_SUB_D1,D2               ;check to see in the register is 1
00005D4E  6600 0006               7425                               BNE                SUB_ea_Dn_rD2                  ;if not go check register 2
00005D52  6700 0062               7426                               BEQ                SUB_ea_Dn_D1_out               ;if equal go to output subroutine
00005D56                          7427  
00005D56  B4BC 00000002           7428  SUB_ea_Dn_rD2                CMP.L              #match_SUB_D2,D2               ;check to see in the register is 2
00005D5C  6600 0006               7429                               BNE                SUB_ea_Dn_rD3                  ;if not go check register 3
00005D60  6700 0060               7430                               BEQ                SUB_ea_Dn_D2_out               ;if equal go to output subroutine
00005D64                          7431  
00005D64  B4BC 00000003           7432  SUB_ea_Dn_rD3                CMP.L              #match_SUB_D3,D2               ;check to see in the register is 3
00005D6A  6600 0006               7433                               BNE                SUB_ea_Dn_rD4                  ;if not go check register 4
00005D6E  6700 005E               7434                               BEQ                SUB_ea_Dn_D3_out               ;if equal go to output subroutine
00005D72                          7435  
00005D72  B4BC 00000004           7436  SUB_ea_Dn_rD4                CMP.L              #match_SUB_D4,D2               ;check to see in the register is 4
00005D78  6600 0006               7437                               BNE                SUB_ea_Dn_rD5                  ;if not go check register 5
00005D7C  6700 005C               7438                               BEQ                SUB_ea_Dn_D4_out               ;if equal go to output subroutine
00005D80                          7439  
00005D80  B4BC 00000005           7440  SUB_ea_Dn_rD5                CMP.L              #match_SUB_D5,D2               ;check to see in the register is 5
00005D86  6600 0006               7441                               BNE                SUB_ea_Dn_rD6                  ;if not go check register 6
00005D8A  6700 005A               7442                               BEQ                SUB_ea_Dn_D5_out               ;if equal go to output subroutine
00005D8E                          7443  
00005D8E  B4BC 00000006           7444  SUB_ea_Dn_rD6                CMP.L              #match_SUB_D6,D2               ;check to see in the register is 6
00005D94  6600 0006               7445                               BNE                SUB_ea_Dn_rD7                  ;if not go check register 7
00005D98  6700 0058               7446                               BEQ                SUB_ea_Dn_D6_out               ;if equal go to output subroutine
00005D9C                          7447  
00005D9C  B4BC 00000007           7448  SUB_ea_Dn_rD7                CMP.L              #match_SUB_D7,D2               ;check to see in the register is 7
00005DA2  6700 005A               7449                               BEQ                SUB_ea_Dn_D7_out               ;if equal go to output subroutine
00005DA6  6600 D8BA               7450                               BNE                ERROR                          ;if not equal, got to error message
00005DAA                          7451  
00005DAA                          7452  
00005DAA                          7453  ;--------------------Data Register Direct Output-----------------------
00005DAA  227C 00008965           7454  SUB_ea_Dn_D0_out             MOVE.L          #ea_D0,A1              ;load string constant into A1
00005DB0  4EB9 000060C8           7455                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DB6                          7456  
00005DB6  227C 00008968           7457  SUB_ea_Dn_D1_out             MOVE.L          #ea_D1,A1              ;load string constant into A1
00005DBC  4EB9 000060C8           7458                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DC2                          7459  
00005DC2  227C 0000896B           7460  SUB_ea_Dn_D2_out             MOVE.L          #ea_D2,A1              ;load string constant into A1
00005DC8  4EB9 000060C8           7461                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DCE                          7462  
00005DCE  227C 0000896E           7463  SUB_ea_Dn_D3_out             MOVE.L      #ea_D3,A1              ;load string constant into A1
00005DD4  4EB9 000060C8           7464                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DDA                          7465  
00005DDA                          7466  
00005DDA  227C 00008971           7467  SUB_ea_Dn_D4_out             MOVE.L      #ea_D4,A1              ;load string constant into A1
00005DE0  4EB9 000060C8           7468                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DE6                          7469  
00005DE6                          7470  
00005DE6  227C 00008974           7471  SUB_ea_Dn_D5_out             MOVE.L      #ea_D5,A1              ;load string constant into A1
00005DEC  4EB9 000060C8           7472                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DF2                          7473  
00005DF2                          7474  
00005DF2  227C 00008977           7475  SUB_ea_Dn_D6_out             MOVE.L      #ea_D6,A1              ;load string constant into A1
00005DF8  4EB9 000060C8           7476                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DFE                          7477  
00005DFE                          7478  
00005DFE  227C 0000897A           7479  SUB_ea_Dn_D7_out             MOVE.L          #ea_D7,A1              ;load string constant into A1
00005E04  4EB9 000060C8           7480                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005E0A                          7481  
00005E0A                          7482  
00005E0A                          7483  ;------------------Address Register Indirect-----------------------
00005E0A  B4BC 00000010           7484  SUB_ea_Dn_An_indir_reg           CMP.L           #match_SUB_An_indir_r0,D2           ;check reg is equal to 0
00005E10  6600 0006               7485                                   BNE             SUB_ea_Dn_An_indir_reg1             ;if not try reg 1
00005E14  6700 0064               7486                                   BEQ             SUB_ea_Dn_An_indir_reg0_out         ;if equal go to output subroutine
00005E18                          7487  
00005E18  B4BC 00000011           7488  SUB_ea_Dn_An_indir_reg1          CMP.L           #match_SUB_An_indir_r1,D2           ;check reg is equal to 1
00005E1E  6600 0006               7489                                   BNE             SUB_ea_Dn_An_indir_reg2             ;if not try reg 2
00005E22  6700 0062               7490                                   BEQ             SUB_ea_Dn_An_indir_reg1_out         ;if equal go to output subroutine
00005E26                          7491  
00005E26  B4BC 00000012           7492  SUB_ea_Dn_An_indir_reg2          CMP.L           #match_SUB_An_indir_r2,D2           ;check reg is equal to 2
00005E2C  6600 0006               7493                                   BNE             SUB_ea_Dn_An_indir_reg3             ;if not try reg 3
00005E30  6700 0060               7494                                   BEQ             SUB_ea_Dn_An_indir_reg2_out         ;if equal go to output subroutine
00005E34                          7495  
00005E34  B4BC 00000013           7496  SUB_ea_Dn_An_indir_reg3          CMP.L           #match_SUB_An_indir_r3,D2           ;check reg is equal to 3
00005E3A  6600 0006               7497                                   BNE             SUB_ea_Dn_An_indir_reg4             ;if not try reg 4
00005E3E  6700 005E               7498                                   BEQ             SUB_ea_Dn_An_indir_reg3_out         ;if equal go to output subroutine
00005E42                          7499      
00005E42  B4BC 00000014           7500  SUB_ea_Dn_An_indir_reg4          CMP.L           #match_SUB_An_indir_r4,D2           ;check reg is equal to 4
00005E48  6600 0006               7501                                   BNE             SUB_ea_Dn_An_indir_reg5             ;if not try reg 5
00005E4C  6700 005C               7502                                   BEQ             SUB_ea_Dn_An_indir_reg4_out         ;if equal go to output subroutine
00005E50                          7503          
00005E50  B4BC 00000015           7504  SUB_ea_Dn_An_indir_reg5          CMP.L           #match_SUB_An_indir_r5,D2           ;check reg is equal to 5
00005E56  6600 0006               7505                                   BNE             SUB_ea_Dn_An_indir_reg6             ;if not try reg 6
00005E5A  6700 005A               7506                                   BEQ             SUB_ea_Dn_An_indir_reg5_out         ;if equal go to output subroutine
00005E5E                          7507  
00005E5E  B4BC 00000016           7508  SUB_ea_Dn_An_indir_reg6          CMP.L           #match_SUB_An_indir_r6,D2           ;check reg is equal to 6
00005E64  6600 0006               7509                                   BNE             SUB_ea_Dn_An_indir_reg7             ;if not try reg 7
00005E68  6700 0058               7510                                   BEQ             SUB_ea_Dn_An_indir_reg6_out         ;if equal go to output subroutine
00005E6C                          7511  
00005E6C  B4BC 00000017           7512  SUB_ea_Dn_An_indir_reg7          CMP.L           #match_SUB_An_indir_r7,D2           ;check reg is equal to 7
00005E72  6700 005A               7513                                   BEQ             SUB_ea_Dn_An_indir_reg7_out         ;if equal go to output subroutine
00005E76  6600 D7EA               7514                                   BNE             ERROR                               ;if not equal to an addresssing mode, pritn error
00005E7A                          7515  
00005E7A                          7516  
00005E7A                          7517  ;--------------------Address Register Indirect Output-----------------------
00005E7A  227C 000089A5           7518  SUB_ea_Dn_An_indir_reg0_out       MOVE.L         #ea_indir_A0,A1            ;load string constant into A1
00005E80  4EB9 000060C8           7519                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005E86                          7520  
00005E86  227C 000089AA           7521  SUB_ea_Dn_An_indir_reg1_out       MOVE.L         #ea_indir_A1,A1            ;load string constant into A1
00005E8C  4EB9 000060C8           7522                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005E92                          7523  
00005E92  227C 000089AF           7524  SUB_ea_Dn_An_indir_reg2_out       MOVE.L         #ea_indir_A2,A1            ;load string constant into A1
00005E98  4EB9 000060C8           7525                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005E9E                          7526  
00005E9E  227C 000089B4           7527  SUB_ea_Dn_An_indir_reg3_out       MOVE.L         #ea_indir_A3,A1            ;load string constant into A1
00005EA4  4EB9 000060C8           7528                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005EAA                          7529  
00005EAA  227C 000089B9           7530  SUB_ea_Dn_An_indir_reg4_out       MOVE.L         #ea_indir_A4,A1            ;load string constant into A1
00005EB0  4EB9 000060C8           7531                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005EB6                          7532  
00005EB6  227C 000089BE           7533  SUB_ea_Dn_An_indir_reg5_out       MOVE.L         #ea_indir_A5,A1            ;load string constant into A1
00005EBC  4EB9 000060C8           7534                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005EC2                          7535  
00005EC2  227C 000089C3           7536  SUB_ea_Dn_An_indir_reg6_out       MOVE.L         #ea_indir_A6,A1            ;load string constant into A1
00005EC8  4EB9 000060C8           7537                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005ECE                          7538                                          
00005ECE  227C 000089C8           7539  SUB_ea_Dn_An_indir_reg7_out       MOVE.L         #ea_indir_A7,A1            ;load string constant into A1
00005ED4  4EB9 000060C8           7540                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005EDA                          7541  
00005EDA                          7542  
00005EDA                          7543  ;------------------Address Register Indirect with Post Increment-----------------------
00005EDA  B4BC 00000018           7544  SUB_ea_Dn_An_indir_postinc_reg         CMP.L      #match_SUB_An_indir_postinc_r0,D2           ;check reg is equal to 0
00005EE0  6600 0006               7545                                         BNE        SUB_ea_Dn_An_indir_pinc_r1             ;if not try reg 1
00005EE4  6700 0064               7546                                         BEQ        SUB_ea_Dn_An_indir_pinc_r0_out         ;if equal go to output subroutine
00005EE8                          7547  
00005EE8  B4BC 00000019           7548  SUB_ea_Dn_An_indir_pinc_r1             CMP.L      #match_SUB_An_indir_postinc_r1,D2           ;check reg is equal to 1
00005EEE  6600 0006               7549                                         BNE        SUB_ea_Dn_An_indir_pinc_r2             ;if not try reg 2
00005EF2  6700 0062               7550                                         BEQ        SUB_ea_Dn_An_indir_pinc_r1_out         ;if equal go to output subroutine
00005EF6                          7551  
00005EF6  B4BC 0000001A           7552  SUB_ea_Dn_An_indir_pinc_r2             CMP.L      #match_SUB_An_indir_postinc_r2,D2           ;check reg is equal to 2
00005EFC  6600 0006               7553                                         BNE        SUB_ea_Dn_An_indir_pinc_r3             ;if not try reg 3
00005F00  6700 0060               7554                                         BEQ        SUB_ea_Dn_An_indir_pinc_r2_out         ;if equal go to output subroutine
00005F04                          7555  
00005F04  B4BC 0000001B           7556  SUB_ea_Dn_An_indir_pinc_r3             CMP.L      #match_SUB_An_indir_postinc_r3,D2           ;check reg is equal to 3
00005F0A  6600 0006               7557                                         BNE        SUB_ea_Dn_An_indir_pinc_r4             ;if not try reg 4
00005F0E  6700 005E               7558                                         BEQ        SUB_ea_Dn_An_indir_pinc_r3_out         ;if equal go to output subroutine
00005F12                          7559   
00005F12  B4BC 0000001C           7560  SUB_ea_Dn_An_indir_pinc_r4             CMP.L      #match_SUB_An_indir_postinc_r4,D2           ;check reg is equal to 4
00005F18  6600 0006               7561                                         BNE        SUB_ea_Dn_An_indir_pinc_r5             ;if not try reg 5
00005F1C  6700 005C               7562                                         BEQ        SUB_ea_Dn_An_indir_pinc_r4_out         ;if equal go to output subroutine
00005F20                          7563  
00005F20  B4BC 0000001D           7564  SUB_ea_Dn_An_indir_pinc_r5             CMP.L      #match_SUB_An_indir_postinc_r5,D2           ;check reg is equal to 5
00005F26  6600 0006               7565                                         BNE        SUB_ea_Dn_An_indir_pinc_r6             ;if not try reg 6
00005F2A  6700 005A               7566                                         BEQ        SUB_ea_Dn_An_indir_pinc_r5_out         ;if equal go to output subroutine
00005F2E                          7567  
00005F2E  B4BC 0000001E           7568  SUB_ea_Dn_An_indir_pinc_r6             CMP.L      #match_SUB_An_indir_postinc_r6,D2           ;check reg is equal to 6
00005F34  6600 0006               7569                                         BNE        SUB_ea_Dn_An_indir_pinc_r7             ;if not try reg 7
00005F38  6700 0058               7570                                         BEQ        SUB_ea_Dn_An_indir_pinc_r6_out         ;if equal go to output subroutine
00005F3C                          7571  
00005F3C  B4BC 0000001F           7572  SUB_ea_Dn_An_indir_pinc_r7             CMP.L      #match_SUB_An_indir_postinc_r7,D2           ;check reg is equal to 7
00005F42  6700 005A               7573                                         BEQ        SUB_ea_Dn_An_indir_pinc_r7_out         ;if equal go to output subroutine
00005F46  6600 D71A               7574                                         BNE        ERROR                                       ;if not equal to an addresssing mode, pritn error
00005F4A                          7575  
00005F4A                          7576  
00005F4A                          7577  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00005F4A  227C 000089CD           7578  SUB_ea_Dn_An_indir_pinc_r0_out      MOVE.L          #ea_indir_postinc_A0,A1          ;load string constant into A1
00005F50  4EB9 000060C8           7579                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005F56                          7580  
00005F56  227C 000089D3           7581  SUB_ea_Dn_An_indir_pinc_r1_out      MOVE.L          #ea_indir_postinc_A1,A1          ;load string constant into A1
00005F5C  4EB9 000060C8           7582                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005F62                          7583  
00005F62  227C 000089D9           7584  SUB_ea_Dn_An_indir_pinc_r2_out      MOVE.L          #ea_indir_postinc_A2,A1          ;load string constant into A1
00005F68  4EB9 000060C8           7585                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005F6E                          7586  
00005F6E  227C 000089DF           7587  SUB_ea_Dn_An_indir_pinc_r3_out      MOVE.L          #ea_indir_postinc_A3,A1          ;load string constant into A1
00005F74  4EB9 000060C8           7588                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005F7A                          7589  
00005F7A  227C 000089E5           7590  SUB_ea_Dn_An_indir_pinc_r4_out      MOVE.L          #ea_indir_postinc_A4,A1          ;load string constant into A1
00005F80  4EB9 000060C8           7591                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005F86                          7592  
00005F86  227C 000089EB           7593  SUB_ea_Dn_An_indir_pinc_r5_out      MOVE.L          #ea_indir_postinc_A5,A1          ;load string constant into A1
00005F8C  4EB9 000060C8           7594                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005F92                          7595  
00005F92  227C 000089F1           7596  SUB_ea_Dn_An_indir_pinc_r6_out      MOVE.L          #ea_indir_postinc_A6,A1          ;load string constant into A1
00005F98  4EB9 000060C8           7597                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005F9E                          7598  
00005F9E  227C 000089F7           7599  SUB_ea_Dn_An_indir_pinc_r7_out      MOVE.L          #ea_indir_postinc_A7,A1          ;load string constant into A1
00005FA4  4EB9 000060C8           7600                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005FAA                          7601  
00005FAA                          7602  
00005FAA                          7603  ;------------------Address Register Indirect with Pre Decrement-----------------------
00005FAA  B4BC 00000020           7604  SUB_ea_Dn_An_indir_predec                CMP.L      #match_SUB_An_indir_predec_reg0,D2       ;check reg is equal to 0
00005FB0  6600 0006               7605                                           BNE        SUB_ea_Dn_An_indir_pdec_r1           ;if not try reg 1
00005FB4  6700 0064               7606                                           BEQ        SUB_ea_Dn_An_indir_pdec_r0_out       ;if equal go to output subroutine
00005FB8                          7607  
00005FB8  B4BC 00000021           7608  SUB_ea_Dn_An_indir_pdec_r1               CMP.L      #match_SUB_An_indir_predec_reg1,D2       ;check reg is equal to 1
00005FBE  6600 0006               7609                                           BNE        SUB_ea_Dn_An_indir_pdec_r2           ;if not try reg 2
00005FC2  6700 0062               7610                                           BEQ        SUB_ea_Dn_An_indir_pdec_r1_out       ;if equal go to output subroutine
00005FC6                          7611  
00005FC6  B4BC 00000022           7612  SUB_ea_Dn_An_indir_pdec_r2               CMP.L      #match_SUB_An_indir_predec_reg2,D2       ;check reg is equal to 2
00005FCC  6600 0006               7613                                           BNE        SUB_ea_Dn_An_indir_pdec_r3           ;if not try reg 3
00005FD0  6700 0060               7614                                           BEQ        SUB_ea_Dn_An_indir_pdec_r2_out       ;if equal go to output subroutine
00005FD4                          7615  
00005FD4  B4BC 00000023           7616  SUB_ea_Dn_An_indir_pdec_r3               CMP.L      #match_SUB_An_indir_predec_reg3,D2       ;check reg is equal to 3
00005FDA  6600 0006               7617                                           BNE        SUB_ea_Dn_An_indir_pdec_r4           ;if not try reg 4
00005FDE  6700 005E               7618                                           BEQ        SUB_ea_Dn_An_indir_pdec_r3_out       ;if equal go to output subroutine
00005FE2                          7619  
00005FE2  B4BC 00000024           7620  SUB_ea_Dn_An_indir_pdec_r4               CMP.L      #match_SUB_An_indir_predec_reg4,D2       ;check reg is equal to 4
00005FE8  6600 0006               7621                                           BNE        SUB_ea_Dn_An_indir_pdec_r5           ;if not try reg 5
00005FEC  6700 005C               7622                                           BEQ        SUB_ea_Dn_An_indir_pdec_r4_out       ;if equal go to output subroutine
00005FF0                          7623  
00005FF0  B4BC 00000025           7624  SUB_ea_Dn_An_indir_pdec_r5               CMP.L      #match_SUB_An_indir_predec_reg5,D2       ;check reg is equal to 5
00005FF6  6600 0006               7625                                           BNE        SUB_ea_Dn_An_indir_pdec_r6           ;if not try reg 6
00005FFA  6700 005A               7626                                           BEQ        SUB_ea_Dn_An_indir_pdec_r5_out       ;if equal go to output subroutine
00005FFE                          7627  
00005FFE  B4BC 00000026           7628  SUB_ea_Dn_An_indir_pdec_r6               CMP.L      #match_SUB_An_indir_predec_reg6,D2       ;check reg is equal to 6
00006004  6600 0006               7629                                           BNE        SUB_ea_Dn_An_indir_pdec_r7           ;if not try reg 7
00006008  6700 0058               7630                                           BEQ        SUB_ea_Dn_An_indir_pdec_r6_out       ;if equal go to output subroutine
0000600C                          7631  
0000600C  B4BC 00000027           7632  SUB_ea_Dn_An_indir_pdec_r7               CMP.L      #match_SUB_An_indir_predec_reg7,D2       ;check reg is equal to 7
00006012  6700 005A               7633                                           BEQ        SUB_ea_Dn_An_indir_pdec_r7_out       ;if equal go to output subroutine
00006016  6600 D64A               7634                                           BNE        ERROR                                    ;if not equal to an addresssing mode, pritn error
0000601A                          7635  
0000601A                          7636  
0000601A                          7637  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000601A  227C 000089FD           7638  SUB_ea_Dn_An_indir_pdec_r0_out            MOVE.L        #ea_indir_predec_A0,A1          ;load string constant into A1
00006020  4EB9 000060C8           7639                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00006026                          7640                                              
00006026  227C 00008A03           7641  SUB_ea_Dn_An_indir_pdec_r1_out            MOVE.L        #ea_indir_predec_A1,A1          ;load string constant into A1
0000602C  4EB9 000060C8           7642                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00006032                          7643  
00006032  227C 00008A09           7644  SUB_ea_Dn_An_indir_pdec_r2_out            MOVE.L        #ea_indir_predec_A2,A1          ;load string constant into A1
00006038  4EB9 000060C8           7645                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
0000603E                          7646  
0000603E  227C 00008A0F           7647  SUB_ea_Dn_An_indir_pdec_r3_out            MOVE.L        #ea_indir_predec_A3,A1          ;load string constant into A1
00006044  4EB9 000060C8           7648                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
0000604A                          7649  
0000604A  227C 00008A15           7650  SUB_ea_Dn_An_indir_pdec_r4_out            MOVE.L        #ea_indir_predec_A4,A1          ;load string constant into A1
00006050  4EB9 000060C8           7651                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00006056                          7652  
00006056  227C 00008A1B           7653  SUB_ea_Dn_An_indir_pdec_r5_out            MOVE.L        #ea_indir_predec_A5,A1          ;load string constant into A1
0000605C  4EB9 000060C8           7654                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00006062                          7655  
00006062  227C 00008A21           7656  SUB_ea_Dn_An_indir_pdec_r6_out            MOVE.L        #ea_indir_predec_A6,A1          ;load string constant into A1
00006068  4EB9 000060C8           7657                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
0000606E                          7658  
0000606E  227C 00008A27           7659  SUB_ea_Dn_An_indir_pdec_r7_out            MOVE.L        #ea_indir_predec_A7,A1          ;load string constant into A1
00006074  4EB9 000060C8           7660                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
0000607A                          7661          
0000607A                          7662  
0000607A                          7663  ;------------------Absolute Addressing Output-----------------------
0000607A  22FC 00008A37           7664  SUB_ea_Dn_abs_add_word_out        MOVE.L      #ea_$,(A1)+             ;load $ for hex and increment A1
00006080  22C5                    7665                                        MOVE.L      D5,(A1)+                ;load address                  
00006082  4CDF 7CBE               7666                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006086  4E75                    7667                                        RTS                                 ;return to subroutine
00006088                          7668                                             
00006088                          7669  
00006088  2A18                    7670  SUB_ea_Dn_abs_add_long_out            MOVE.L      (A0)+,D5                ;pull the next long instruction that holds the address
0000608A  22FC 00008A37           7671                                        MOVE.L      #ea_$,(A1)+             ;load $ for hex and increment A1
00006090  22C5                    7672                                        MOVE.L      D5,(A1)+                ;load address                  
00006092  4CDF 7CBE               7673                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006096  4E75                    7674                                        RTS                                 ;return to subroutine
00006098                          7675  
00006098                          7676  
00006098                          7677                                              
00006098                          7678  ;---------------Immediate Addresing---------------------------
00006098  2A18                    7679  SUB_ea_Dn_immediate_add_out           MOVE.L      (A0)+,D5                            ;capture the immediate address
0000609A  BCBC 000000FC           7680                        CMP.L       #match_SUB_imm_add_word,D6          ;check to see if need to pull word
000060A0  2A18                    7681                        MOVE.L      (A0)+,D5                            ;pull the word
000060A2  6700 0006               7682                                        BEQ         SUB_ea_Dn_imm_add_w                 ;if equal go pull word    
000060A6  6600 0010               7683                        BNE         SUB_ea_Dn_imm_add_l                 ;if not equal, go check long
000060AA                          7684                                           
000060AA  22FC 00008A37           7685  SUB_ea_Dn_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
000060B0  32C5                    7686                                        MOVE.W     D5,(A1)+                             ;load the word address                           
000060B2  4EB9 000060C8           7687                                        JSR        SUB_determine_second_op              ;jump to subroutine to determine second operand
000060B8                          7688                                           
000060B8  2A18                    7689  SUB_ea_Dn_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
000060BA  22FC 00008A37           7690                                        MOVE.L     #ea_$,(A1)+                          ;load the $
000060C0  2245                    7691                                        MOVE.L     D5,A1                                ;move to A1
000060C2  4EB9 000060C8           7692                                        JSR        SUB_determine_second_op              ;jump to subroutine to determine second operand
000060C8                          7693  
000060C8                          7694  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000060C8  4282                    7695  SUB_determine_second_op         CLR.L       D2              ;clear D2 
000060CA  C4BC 00000E00           7696                  AND.L       #mask_SUB_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
000060D0                          7697                                                  
000060D0  B4BC 00000000           7698  ea_Dn_SUB_reg0          CMP.L       #match_SUB_reg0,D2      ;check to see if reg equal 0
000060D6  6600 0006               7699                  BNE     ea_Dn_SUB_reg1          ;if not equal got check reg 1
000060DA  6700 0064               7700                  BEQ     ea_Dn_SUB_reg0_out      ;if equal go to output
000060DE                          7701                                                  
000060DE  B4BC 00000200           7702  ea_Dn_SUB_reg1          CMP.L       #match_SUB_reg1,D2      ;check to see if reg equal 1
000060E4  6600 0006               7703                  BNE     ea_Dn_SUB_reg2          ;if not equal got check reg 2
000060E8  6700 0062               7704                  BEQ     ea_Dn_SUB_reg1_out      ;if equal go to output
000060EC                          7705  
000060EC  B4BC 00000400           7706  ea_Dn_SUB_reg2          CMP.L       #match_SUB_reg2,D2      ;check to see if reg equal 2
000060F2  6600 0006               7707                  BNE     ea_Dn_SUB_reg3          ;if not equal got check reg 3
000060F6  6700 0060               7708                  BEQ     ea_Dn_SUB_reg2_out      ;if equal go to output
000060FA                          7709  
000060FA  B4BC 00000600           7710  ea_Dn_SUB_reg3          CMP.L       #match_SUB_reg3,D2      ;check to see if reg equal 3
00006100  6600 0006               7711                  BNE     ea_Dn_SUB_reg4          ;if not equal got check reg 4
00006104  6700 005E               7712                  BEQ     ea_Dn_SUB_reg3_out      ;if equal go to output
00006108                          7713                                                  
00006108  B4BC 00000800           7714  ea_Dn_SUB_reg4          CMP.L       #match_SUB_reg4,D2      ;check to see if reg equal 4
0000610E  6600 0006               7715                  BNE     ea_Dn_SUB_reg5          ;if not equal got check reg 5
00006112  6700 005C               7716                  BEQ     ea_Dn_SUB_reg4_out      ;if equal go to output
00006116                          7717  
00006116  B4BC 00000A00           7718  ea_Dn_SUB_reg5          CMP.L       #match_SUB_reg5,D2      ;check to see if reg equal 5
0000611C  6600 0006               7719                  BNE     ea_Dn_SUB_reg6          ;if not equal got check reg 6
00006120  6700 005A               7720                  BEQ     ea_Dn_SUB_reg5_out      ;if equal go to output
00006124                          7721  
00006124  B4BC 00000C00           7722  ea_Dn_SUB_reg6          CMP.L       #match_SUB_reg6,D2      ;check to see if reg equal 6
0000612A  6600 0006               7723                  BNE     ea_Dn_SUB_reg7          ;if not equal got check reg 7
0000612E  6700 0058               7724                  BEQ     ea_Dn_SUB_reg6_out      ;if equal go to output          
00006132                          7725  
00006132  B4BC 00000E00           7726  ea_Dn_SUB_reg7              CMP.L       #match_SUB_reg7,D2      ;check to see if reg equal 7
00006138  6700 005A               7727                  BEQ     ea_Dn_SUB_reg7_out      ;if equal go to output
0000613C  6600 D524               7728                  BNE             ERROR                           ;if not equal to an addresssing mode, pritn error
00006140                          7729                                  
00006140                          7730  
00006140                          7731  ;--------------------Data Output-----------------------
00006140  227C 00008965           7732  ea_Dn_SUB_reg0_out      MOVE.L      #ea_D0,A1           ;load string constant into A1
00006146  4CDF 7CBE               7733                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000614A  4E75                    7734                                  RTS
0000614C                          7735                                              
0000614C  227C 00008968           7736  ea_Dn_SUB_reg1_out      MOVE.L      #ea_D1,A1           ;load string constant into A1
00006152  4CDF 7CBE               7737                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006156  4E75                    7738                                  RTS
00006158                          7739                                              
00006158  227C 0000896B           7740  ea_Dn_SUB_reg2_out      MOVE.L      #ea_D2,A1       ;load string constant into A1
0000615E  4CDF 7CBE               7741                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006162  4E75                    7742                                  RTS
00006164                          7743                                              
00006164  227C 0000896E           7744  ea_Dn_SUB_reg3_out      MOVE.L      #ea_D3,A1           ;load string constant into A1
0000616A  4CDF 7CBE               7745                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000616E  4E75                    7746                                  RTS
00006170                          7747                                              
00006170  227C 00008971           7748  ea_Dn_SUB_reg4_out      MOVE.L      #ea_D4,A1       ;load string constant into A1
00006176  4CDF 7CBE               7749                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000617A  4E75                    7750                                  RTS
0000617C                          7751                                              
0000617C  227C 00008974           7752  ea_Dn_SUB_reg5_out      MOVE.L      #ea_D5,A1           ;load string constant into A1
00006182  4CDF 7CBE               7753                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006186  4E75                    7754                                  RTS
00006188                          7755                                              
00006188  227C 00008977           7756  ea_Dn_SUB_reg6_out      MOVE.L      #ea_D6,A1           ;load string constant into A1
0000618E  4CDF 7CBE               7757                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006192  4E75                    7758                                  RTS
00006194                          7759                                              
00006194  227C 0000897A           7760  ea_Dn_SUB_reg7_out      MOVE.L      #ea_D7,A1           ;load string constant into A1
0000619A  4CDF 7CBE               7761                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000619E  4E75                    7762                                  RTS             
000061A0                          7763                                                                
000061A0                          7764                        
000061A0                          7765  ;------------------------------------------------------------------------------------------------------------------------------------------
000061A0                          7766  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
000061A0                          7767  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000061A0  4282                    7768  SUB_Dn_ea                   CLR.L       D2              ;clear D2 
000061A2  C4BC 00000E00           7769                  AND.L       #mask_SUB_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
000061A8                          7770                                                  
000061A8  B4BC 00000000           7771  Dn_ea_SUB_reg0          CMP.L       #match_SUB_reg0,D2      ;check to see if reg equal 0
000061AE  6600 0006               7772                  BNE     Dn_ea_SUB_reg1          ;if not equal got check reg 1
000061B2  6700 0064               7773                  BEQ     Dn_ea_SUB_reg0_out      ;if equal go to output
000061B6                          7774                                                  
000061B6  B4BC 00000200           7775  Dn_ea_SUB_reg1          CMP.L       #match_SUB_reg1,D2      ;check to see if reg equal 1
000061BC  6600 0006               7776                  BNE     Dn_ea_SUB_reg2          ;if not equal got check reg 2
000061C0  6700 0062               7777                  BEQ     Dn_ea_SUB_reg1_out      ;if equal go to output
000061C4                          7778  
000061C4  B4BC 00000400           7779  Dn_ea_SUB_reg2          CMP.L       #match_SUB_reg2,D2      ;check to see if reg equal 2
000061CA  6600 0006               7780                  BNE     Dn_ea_SUB_reg3          ;if not equal got check reg 3
000061CE  6700 0060               7781                  BEQ     Dn_ea_SUB_reg2_out      ;if equal go to output
000061D2                          7782  
000061D2  B4BC 00000600           7783  Dn_ea_SUB_reg3          CMP.L       #match_SUB_reg3,D2      ;check to see if reg equal 3
000061D8  6600 0006               7784                  BNE     Dn_ea_SUB_reg4          ;if not equal got check reg 4
000061DC  6700 005E               7785                  BEQ     Dn_ea_SUB_reg3_out      ;if equal go to output
000061E0                          7786                                                  
000061E0  B4BC 00000800           7787  Dn_ea_SUB_reg4          CMP.L       #match_SUB_reg4,D2      ;check to see if reg equal 4
000061E6  6600 0006               7788                  BNE     Dn_ea_SUB_reg5          ;if not equal got check reg 5
000061EA  6700 005C               7789                  BEQ     Dn_ea_SUB_reg4_out      ;if equal go to output
000061EE                          7790  
000061EE  B4BC 00000A00           7791  Dn_ea_SUB_reg5          CMP.L       #match_SUB_reg5,D2      ;check to see if reg equal 5
000061F4  6600 0006               7792                  BNE     Dn_ea_SUB_reg6          ;if not equal got check reg 6
000061F8  6700 005A               7793                  BEQ     Dn_ea_SUB_reg5_out      ;if equal go to output
000061FC                          7794  
000061FC  B4BC 00000C00           7795  Dn_ea_SUB_reg6          CMP.L       #match_SUB_reg6,D2      ;check to see if reg equal 6
00006202  6600 0006               7796                  BNE     Dn_ea_SUB_reg7          ;if not equal got check reg 7
00006206  6700 0058               7797                  BEQ     Dn_ea_SUB_reg6_out      ;if equal go to output          
0000620A                          7798  
0000620A  B4BC 00000E00           7799  Dn_ea_SUB_reg7          CMP.L       #match_SUB_reg7,D2      ;check to see if reg equal 7
00006210  6700 005A               7800                  BEQ     Dn_ea_SUB_reg7_out      ;if equal go to output
00006214  6600 D44C               7801                  BNE             ERROR                           ;if not equal to an addresssing mode, pritn error
00006218                          7802                                  
00006218                          7803  
00006218                          7804  ;--------------------Data Output-----------------------
00006218  227C 00008965           7805  Dn_ea_SUB_reg0_out        MOVE.L        #ea_D0,A1               ;load string constant into A1
0000621E  4EB9 00006278           7806                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006224                          7807                                              
00006224  227C 00008968           7808  Dn_ea_SUB_reg1_out        MOVE.L        #ea_D1,A1               ;load string constant into A1
0000622A  4EB9 00006278           7809                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006230                          7810                                              
00006230  227C 0000896B           7811  Dn_ea_SUB_reg2_out        MOVE.L        #ea_D2,A1               ;load string constant into A1
00006236  4EB9 00006278           7812                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
0000623C                          7813                                              
0000623C  227C 0000896E           7814  Dn_ea_SUB_reg3_out        MOVE.L        #ea_D3,A1               ;load string constant into A1
00006242  4EB9 00006278           7815                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006248                          7816                                              
00006248  227C 00008971           7817  Dn_ea_SUB_reg4_out        MOVE.L        #ea_D4,A1               ;load string constant into A1
0000624E  4EB9 00006278           7818                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006254                          7819                                              
00006254  227C 00008974           7820  Dn_ea_SUB_reg5_out        MOVE.L        #ea_D5,A1               ;load string constant into A1
0000625A  4EB9 00006278           7821                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006260                          7822                                              
00006260  227C 00008977           7823  Dn_ea_SUB_reg6_out        MOVE.L        #ea_D6,A1               ;load string constant into A1
00006266  4EB9 00006278           7824                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
0000626C                          7825                                              
0000626C  227C 0000897A           7826  Dn_ea_SUB_reg7_out            MOVE.L        #ea_D7,A1               ;load string constant into A1
00006272  4EB9 00006278           7827                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006278                          7828                                              
00006278                          7829  
00006278                          7830  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00006278  4241                    7831  SUB_determine_second_operand         CLR               D1                             ;clear D1 to load new mask                                
0000627A  C2BC 00000038           7832                                       AND.L             #mask_SUB_ea_mode,D1           ;move the mask to D1
00006280                          7833  
00006280                          7834  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00006280  B2BC 00000010           7835  SUB_Dn_ea_add_reg_indir              CMP.L           #match_SUB_An_indir,D1                ;check to see if mode is add reg indir
00006286  6600 0006               7836                                       BNE             SUB_Dn_ea_add_reg_indir_predec        ;if not, go check add reg indir predec 
0000628A  6700 0048               7837                                       BEQ             SUB_Dn_ea_An_indir_reg                ;if equal go figure out the register           
0000628E                          7838             
0000628E  B2BC 00000020           7839  SUB_Dn_ea_add_reg_indir_predec       CMP.L           #match_SUB_An_indir_predec,D1         ;check to see if mode is add reg indor w/ postinc
00006294  6600 0006               7840                                       BNE             SUB_Dn_ea_add_reg_indir_postinc       ;if not go check add reg indir/predec
00006298  6700 01DA               7841                                       BEQ             SUB_Dn_ea_An_indir_predec             ;if equal go figure out the register
0000629C                          7842                        
0000629C  B2BC 00000018           7843  SUB_Dn_ea_add_reg_indir_postinc      CMP.L           #match_SUB_An_indir_postinc,D1        ;check to see if mode is add reg indir w/predec
000062A2  6600 0006               7844                                       BNE             SUB_Dn_ea_abs_add_word                ;if not go check abs add word
000062A6  6700 00FC               7845                                       BEQ             SUB_Dn_ea_An_indir_postinc_reg        ;if equal go figure out the register
000062AA                          7846  
000062AA  C4BC 0000003F           7847  SUB_Dn_ea_abs_add_word               AND.L           #mask_SUB_abs_add,D2                  ;load mask to determine if abs add word or long
000062B0                          7848                                   
000062B0  B4BC 00000038           7849                                       CMP.L           #match_SUB_abs_add_word,D2            ;check if abs add word
000062B6  2A18                    7850                                       MOVE.L          (A0)+,D5                              ;pull the next word instruction that holds the address
000062B8  6600 0006               7851                                       BNE             SUB_Dn_ea_abs_add_long                ;if not go check abs add long
000062BC  6700 0286               7852                                       BEQ             SUB_Dn_ea_abs_add_word_out            ;if equal go to output
000062C0                          7853    
000062C0  B4BC 00000039           7854  SUB_Dn_ea_abs_add_long               CMP.L           #match_SUB_abs_add_long,D2            ;check to see if abs add long
000062C6  6700 028A               7855                                       BEQ             SUB_Dn_ea_abs_add_long_out            ;if equal go to output
000062CA  6600 D396               7856                                       BNE             ERROR                                 ;if not equal go to error mesage sub routine
000062CE                          7857  
000062CE                          7858  
000062CE                          7859  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000062CE                          7860                                   
000062CE  C4BC 0000003F           7861                                   AND.L            #mask_SUB_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
000062D4                          7862  ;------------------Address Register Indirect-----------------------
000062D4  B4BC 00000010           7863  SUB_Dn_ea_An_indir_reg           CMP.L           #match_SUB_An_indir_r0,D2              ;check reg is equal to 0
000062DA  6600 0006               7864                                   BNE             SUB_Dn_ea_An_indir_reg1                ;if not try reg 1
000062DE  6700 0064               7865                                   BEQ             SUB_Dn_ea_An_indir_reg0_out            ;if equal go to output subroutine
000062E2                          7866  
000062E2  B4BC 00000011           7867  SUB_Dn_ea_An_indir_reg1          CMP.L           #match_SUB_An_indir_r1,D2              ;check reg is equal to 1
000062E8  6600 0006               7868                                   BNE             SUB_Dn_ea_An_indir_reg2                ;if not try reg 2
000062EC  6700 0062               7869                                   BEQ             SUB_Dn_ea_An_indir_reg1_out            ;if equal go to output subroutine
000062F0                          7870  
000062F0  B4BC 00000012           7871  SUB_Dn_ea_An_indir_reg2          CMP.L           #match_SUB_An_indir_r2,D2              ;check reg is equal to 2
000062F6  6600 0006               7872                                   BNE             SUB_Dn_ea_An_indir_reg3                ;if not try reg 3
000062FA  6700 0060               7873                                   BEQ             SUB_Dn_ea_An_indir_reg2_out            ;if equal go to output subroutine
000062FE                          7874  
000062FE  B4BC 00000013           7875  SUB_Dn_ea_An_indir_reg3          CMP.L           #match_SUB_An_indir_r3,D2              ;check reg is equal to 3
00006304  6600 0006               7876                                   BNE             SUB_Dn_ea_An_indir_reg4                ;if not try reg 4
00006308  6700 005E               7877                                   BEQ             SUB_Dn_ea_An_indir_reg3_out            ;if equal go to output subroutine
0000630C                          7878      
0000630C  B4BC 00000014           7879  SUB_Dn_ea_An_indir_reg4          CMP.L           #match_SUB_An_indir_r4,D2              ;check reg is equal to 4
00006312  6600 0006               7880                                   BNE             SUB_Dn_ea_An_indir_reg5                ;if not try reg 5
00006316  6700 005C               7881                                   BEQ             SUB_Dn_ea_An_indir_reg4_out            ;if equal go to output subroutine
0000631A                          7882          
0000631A  B4BC 00000015           7883  SUB_Dn_ea_An_indir_reg5          CMP.L           #match_SUB_An_indir_r5,D2              ;check reg is equal to 5
00006320  6600 0006               7884                                   BNE             SUB_Dn_ea_An_indir_reg6                ;if not try reg 6
00006324  6700 005A               7885                                   BEQ             SUB_Dn_ea_An_indir_reg5_out            ;if equal go to output subroutine
00006328                          7886  
00006328  B4BC 00000016           7887  SUB_Dn_ea_An_indir_reg6          CMP.L           #match_SUB_An_indir_r6,D2              ;check reg is equal to 6
0000632E  6600 0006               7888                                   BNE             SUB_Dn_ea_An_indir_reg7                ;if not try reg 7
00006332  6700 0058               7889                                   BEQ             SUB_Dn_ea_An_indir_reg6_out            ;if equal go to output subroutine
00006336                          7890  
00006336  B4BC 00000017           7891  SUB_Dn_ea_An_indir_reg7          CMP.L           #match_SUB_An_indir_r7,D2              ;check reg is equal to 7
0000633C  6700 005A               7892                                   BEQ             SUB_Dn_ea_An_indir_reg7_out            ;if equal go to output subroutine
00006340  6600 D320               7893                                   BNE             ERROR                                  ;if not equal to an addresssing mode, pritn error
00006344                          7894  
00006344                          7895  ;--------------------Address Register Indirect Output-----------------------
00006344  227C 000089A5           7896  SUB_Dn_ea_An_indir_reg0_out     MOVE.L      #ea_indir_A0,A1             ;load string constant into A1
0000634A  4CDF 7CBE               7897                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000634E  4E75                    7898                                      RTS
00006350                          7899  
00006350  227C 000089AA           7900  SUB_Dn_ea_An_indir_reg1_out     MOVE.L      #ea_indir_A1,A1             ;load string constant into A1
00006356  4CDF 7CBE               7901                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000635A  4E75                    7902                                      RTS
0000635C                          7903  
0000635C  227C 000089AF           7904  SUB_Dn_ea_An_indir_reg2_out     MOVE.L      #ea_indir_A2,A1             ;load string constant into A1
00006362  4CDF 7CBE               7905                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006366  4E75                    7906                                      RTS
00006368                          7907  
00006368  227C 000089B4           7908  SUB_Dn_ea_An_indir_reg3_out     MOVE.L      #ea_indir_A3,A1             ;load string constant into A1
0000636E  4CDF 7CBE               7909                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006372  4E75                    7910                                      RTS
00006374                          7911  
00006374  227C 000089B9           7912  SUB_Dn_ea_An_indir_reg4_out     MOVE.L      #ea_indir_A4,A1             ;load string constant into A1
0000637A  4CDF 7CBE               7913                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000637E  4E75                    7914                                          RTS
00006380                          7915  
00006380  227C 000089BE           7916  SUB_Dn_ea_An_indir_reg5_out     MOVE.L      #ea_indir_A5,A1             ;load string constant into A1
00006386  4CDF 7CBE               7917                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000638A  4E75                    7918                                      RTS
0000638C                          7919  
0000638C  227C 000089C3           7920  SUB_Dn_ea_An_indir_reg6_out     MOVE.L      #ea_indir_A6,A1             ;load string constant into A1
00006392  4CDF 7CBE               7921                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006396  4E75                    7922                                      RTS
00006398                          7923                                          
00006398  227C 000089C8           7924  SUB_Dn_ea_An_indir_reg7_out     MOVE.L      #ea_indir_A7,A1             ;load string constant into A1
0000639E  4CDF 7CBE               7925                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000063A2  4E75                    7926                                      RTS
000063A4                          7927  
000063A4                          7928  
000063A4                          7929  ;------------------Address Register Indirect with Post Increment-----------------------
000063A4  B4BC 00000018           7930  SUB_Dn_ea_An_indir_postinc_reg          CMP.L      #match_SUB_An_indir_postinc_r0,D2        ;check reg is equal to 0
000063AA  6600 0006               7931                                          BNE        SUB_Dn_ea_An_indir_pinc_r1          ;if not try reg 1
000063AE  6700 0064               7932                                          BEQ        SUB_Dn_ea_An_indir_pinc_r0_out      ;if equal go to output subroutine
000063B2                          7933  
000063B2  B4BC 00000019           7934  SUB_Dn_ea_An_indir_pinc_r1              CMP.L      #match_SUB_An_indir_postinc_r1,D2        ;check reg is equal to 1
000063B8  6600 0006               7935                                          BNE        SUB_Dn_ea_An_indir_pinc_r2          ;if not try reg 2
000063BC  6700 0062               7936                                          BEQ        SUB_Dn_ea_An_indir_pinc_r1_out      ;if equal go to output subroutine
000063C0                          7937  
000063C0  B4BC 0000001A           7938  SUB_Dn_ea_An_indir_pinc_r2              CMP.L      #match_SUB_An_indir_postinc_r2,D2        ;check reg is equal to 2
000063C6  6600 0006               7939                                          BNE        SUB_Dn_ea_An_indir_pinc_r3          ;if not try reg 3
000063CA  6700 0060               7940                                          BEQ        SUB_Dn_ea_An_indir_pinc_r2_out      ;if equal go to output subroutine
000063CE                          7941  
000063CE  B4BC 0000001B           7942  SUB_Dn_ea_An_indir_pinc_r3              CMP.L      #match_SUB_An_indir_postinc_r3,D2        ;check reg is equal to 3
000063D4  6600 0006               7943                                          BNE        SUB_Dn_ea_An_indir_pinc_r4          ;if not try reg 4
000063D8  6700 005E               7944                                          BEQ        SUB_Dn_ea_An_indir_pinc_r3_out      ;if equal go to output subroutine
000063DC                          7945   
000063DC  B4BC 0000001C           7946  SUB_Dn_ea_An_indir_pinc_r4              CMP.L      #match_SUB_An_indir_postinc_r4,D2        ;check reg is equal to 4
000063E2  6600 0006               7947                                          BNE        SUB_Dn_ea_An_indir_pinc_r5          ;if not try reg 5
000063E6  6700 005C               7948                                          BEQ        SUB_Dn_ea_An_indir_pinc_r4_out      ;if equal go to output subroutine
000063EA                          7949  
000063EA  B4BC 0000001D           7950  SUB_Dn_ea_An_indir_pinc_r5              CMP.L      #match_SUB_An_indir_postinc_r5,D2        ;check reg is equal to 5
000063F0  6600 0006               7951                                          BNE        SUB_Dn_ea_An_indir_pinc_r6          ;if not try reg 6
000063F4  6700 005A               7952                                          BEQ        SUB_Dn_ea_An_indir_pinc_r5_out      ;if equal go to output subroutine
000063F8                          7953  
000063F8  B4BC 0000001E           7954  SUB_Dn_ea_An_indir_pinc_r6              CMP.L      #match_SUB_An_indir_postinc_r6,D2         ;check reg is equal to 6
000063FE  6600 0006               7955                                          BNE        SUB_Dn_ea_An_indir_pinc_r7           ;if not try reg 7
00006402  6700 0058               7956                                          BEQ        SUB_Dn_ea_An_indir_pinc_r6_out       ;if equal go to output subroutine
00006406                          7957  
00006406  B4BC 0000001F           7958  SUB_Dn_ea_An_indir_pinc_r7              CMP.L      #match_SUB_An_indir_postinc_r7,D2         ;check reg is equal to 7
0000640C  6700 005A               7959                                          BEQ        SUB_Dn_ea_An_indir_pinc_r7_out       ;if equal go to output subroutine
00006410  6600 D250               7960                                          BNE        ERROR                                     ;if not equal to an addresssing mode, pritn error
00006414                          7961  
00006414                          7962  
00006414                          7963  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00006414  227C 000089CD           7964  SUB_Dn_ea_An_indir_pinc_r0_out              MOVE.L     #ea_indir_postinc_A0,A1       ;load string constant into A1
0000641A  4CDF 7CBE               7965                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000641E  4E75                    7966                                              RTS
00006420                          7967  
00006420  227C 000089D3           7968  SUB_Dn_ea_An_indir_pinc_r1_out              MOVE.L     #ea_indir_postinc_A1,A1       ;load string constant into A1
00006426  4CDF 7CBE               7969                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000642A  4E75                    7970                                              RTS
0000642C                          7971  
0000642C  227C 000089D9           7972  SUB_Dn_ea_An_indir_pinc_r2_out              MOVE.L     #ea_indir_postinc_A2,A1       ;load string constant into A1
00006432  4CDF 7CBE               7973                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006436  4E75                    7974                                              RTS
00006438                          7975  
00006438  227C 000089DF           7976  SUB_Dn_ea_An_indir_pinc_r3_out              MOVE.L     #ea_indir_postinc_A3,A1       ;load string constant into A1
0000643E  4CDF 7CBE               7977                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006442  4E75                    7978                                              RTS
00006444                          7979  
00006444  227C 000089E5           7980  SUB_Dn_ea_An_indir_pinc_r4_out              MOVE.L     #ea_indir_postinc_A4,A1       ;load string constant into A1
0000644A  4CDF 7CBE               7981                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000644E  4E75                    7982                                              RTS
00006450                          7983  
00006450  227C 000089EB           7984  SUB_Dn_ea_An_indir_pinc_r5_out              MOVE.L     #ea_indir_postinc_A5,A1       ;load string constant into A1
00006456  4CDF 7CBE               7985                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000645A  4E75                    7986                                              RTS
0000645C                          7987  
0000645C  227C 000089F1           7988  SUB_Dn_ea_An_indir_pinc_r6_out              MOVE.L     #ea_indir_postinc_A6,A1       ;load string constant into A1
00006462  4CDF 7CBE               7989                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006466  4E75                    7990                                              RTS
00006468                          7991  
00006468  227C 000089F7           7992  SUB_Dn_ea_An_indir_pinc_r7_out              MOVE.L     #ea_indir_postinc_A7,A1       ;load string constant into A1
0000646E  4CDF 7CBE               7993                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006472  4E75                    7994                                              RTS
00006474                          7995  
00006474                          7996  
00006474                          7997  ;------------------Address Register Indirect with Pre Decrement-----------------------
00006474  B4BC 00000020           7998  SUB_Dn_ea_An_indir_predec                   CMP.L      #match_SUB_An_indir_predec_reg0,D2       ;check reg is equal to 0
0000647A  6600 0006               7999                                              BNE        SUB_Dn_ea_An_indir_pdec_r1           ;if not try reg 1
0000647E  6700 0064               8000                                              BEQ        SUB_Dn_ea_An_indir_pdec_r0_out       ;if equal go to output subroutine
00006482                          8001  
00006482  B4BC 00000021           8002  SUB_Dn_ea_An_indir_pdec_r1                  CMP.L      #match_SUB_An_indir_predec_reg1,D2       ;check reg is equal to 1
00006488  6600 0006               8003                                              BNE        SUB_Dn_ea_An_indir_pdec_r2           ;if not try reg 2
0000648C  6700 0062               8004                                              BEQ        SUB_Dn_ea_An_indir_pdec_r1_out       ;if equal go to output subroutine
00006490                          8005  
00006490  B4BC 00000022           8006  SUB_Dn_ea_An_indir_pdec_r2                  CMP.L      #match_SUB_An_indir_predec_reg2,D2       ;check reg is equal to 2
00006496  6600 0006               8007                                              BNE        SUB_Dn_ea_An_indir_pdec_r3           ;if not try reg 3
0000649A  6700 0060               8008                                              BEQ        SUB_Dn_ea_An_indir_pdec_r2_out       ;if equal go to output subroutine
0000649E                          8009  
0000649E  B4BC 00000023           8010  SUB_Dn_ea_An_indir_pdec_r3                  CMP.L      #match_SUB_An_indir_predec_reg3,D2       ;check reg is equal to 3
000064A4  6600 0006               8011                                              BNE        SUB_Dn_ea_An_indir_pdec_r4           ;if not try reg 4
000064A8  6700 005E               8012                                              BEQ        SUB_Dn_ea_An_indir_pdec_r3_out       ;if equal go to output subroutine
000064AC                          8013  
000064AC  B4BC 00000024           8014  SUB_Dn_ea_An_indir_pdec_r4                  CMP.L      #match_SUB_An_indir_predec_reg4,D2       ;check reg is equal to 4
000064B2  6600 0006               8015                                              BNE        SUB_Dn_ea_An_indir_pdec_r5           ;if not try reg 5
000064B6  6700 005C               8016                                              BEQ        SUB_Dn_ea_An_indir_pdec_r4_out       ;if equal go to output subroutine
000064BA                          8017  
000064BA  B4BC 00000025           8018  SUB_Dn_ea_An_indir_pdec_r5                  CMP.L      #match_SUB_An_indir_predec_reg5,D2       ;check reg is equal to 5
000064C0  6600 0006               8019                                              BNE        SUB_Dn_ea_An_indir_pdec_r6           ;if not try reg 6
000064C4  6700 005A               8020                                              BEQ        SUB_Dn_ea_An_indir_pdec_r5_out       ;if equal go to output subroutine
000064C8                          8021  
000064C8  B4BC 00000026           8022  SUB_Dn_ea_An_indir_pdec_r6                  CMP.L      #match_SUB_An_indir_predec_reg6,D2       ;check reg is equal to 6
000064CE  6600 0006               8023                                              BNE        SUB_Dn_ea_An_indir_pdec_r7           ;if not try reg 7
000064D2  6700 0058               8024                                              BEQ        SUB_Dn_ea_An_indir_pdec_r6_out       ;if equal go to output subroutine
000064D6                          8025  
000064D6  B4BC 00000027           8026  SUB_Dn_ea_An_indir_pdec_r7                  CMP.L      #match_SUB_An_indir_predec_reg7,D2       ;check reg is equal to 7
000064DC  6700 005A               8027                                              BEQ        SUB_Dn_ea_An_indir_pdec_r7_out       ;if equal go to output subroutine
000064E0  6600 D180               8028                                              BNE        ERROR                                    ;if not equal to an addresssing mode, pritn error
000064E4                          8029  
000064E4                          8030  
000064E4                          8031  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000064E4  227C 000089FD           8032  SUB_Dn_ea_An_indir_pdec_r0_out              MOVE.L  #ea_indir_predec_A0,A1         ;load string constant into A1
000064EA  4CDF 7CBE               8033                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000064EE  4E75                    8034                                              RTS
000064F0                          8035                                              
000064F0  227C 00008A03           8036  SUB_Dn_ea_An_indir_pdec_r1_out              MOVE.L  #ea_indir_predec_A1,A1         ;load string constant into A1
000064F6  4CDF 7CBE               8037                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000064FA  4E75                    8038                                              RTS
000064FC                          8039  
000064FC  227C 00008A09           8040  SUB_Dn_ea_An_indir_pdec_r2_out              MOVE.L  #ea_indir_predec_A2,A1         ;load string constant into A1
00006502  4CDF 7CBE               8041                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006506  4E75                    8042                                              RTS
00006508                          8043  
00006508  227C 00008A0F           8044  SUB_Dn_ea_An_indir_pdec_r3_out              MOVE.L  #ea_indir_predec_A3,A1         ;load string constant into A1
0000650E  4CDF 7CBE               8045                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006512  4E75                    8046                                              RTS
00006514                          8047  
00006514  227C 00008A15           8048  SUB_Dn_ea_An_indir_pdec_r4_out              MOVE.L  #ea_indir_predec_A4,A1         ;load string constant into A1
0000651A  4CDF 7CBE               8049                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000651E  4E75                    8050                                              RTS
00006520                          8051  
00006520  227C 00008A1B           8052  SUB_Dn_ea_An_indir_pdec_r5_out              MOVE.L  #ea_indir_predec_A5,A1         ;load string constant into A1
00006526  4CDF 7CBE               8053                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000652A  4E75                    8054                                              RTS
0000652C                          8055  
0000652C  227C 00008A21           8056  SUB_Dn_ea_An_indir_pdec_r6_out              MOVE.L  #ea_indir_predec_A6,A1         ;load string constant into A1
00006532  4CDF 7CBE               8057                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006536  4E75                    8058                                              RTS
00006538                          8059  
00006538  227C 00008A27           8060  SUB_Dn_ea_An_indir_pdec_r7_out              MOVE.L  #ea_indir_predec_A7,A1         ;load string constant into A1
0000653E  4CDF 7CBE               8061                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006542  4E75                    8062                                              RTS
00006544                          8063                      
00006544                          8064                          
00006544                          8065  ;------------------Absolute Addressing Output-----------------------
00006544  22FC 00008A37           8066  SUB_Dn_ea_abs_add_word_out        MOVE.L        #ea_$,(A1)+               ;load $ for hex and increment A1
0000654A  22C5                    8067                                        MOVE.L        D5,(A1)+                  ;load address                  
0000654C  4CDF 7CBE               8068                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006550  4E75                    8069                                        RTS                                     ;return to subroutine
00006552                          8070                                             
00006552                          8071  
00006552  2A18                    8072  SUB_Dn_ea_abs_add_long_out            MOVE.L        (A0)+,D5                   ;pull the next long instruction that holds the address
00006554  22FC 00008A37           8073                                        MOVE.L        #ea_$,(A1)+                ;load $ for hex and increment A1
0000655A  22C5                    8074                                        MOVE.L        D5,(A1)+                   ;load address                  
0000655C  4CDF 7CBE               8075                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006560  4E75                    8076                                        RTS                                      ;return to subroutine  
00006562                          8077  
00006562                          8078                                            
00006562                          8079  ;---------------Immediate Addresing--------------------------
00006562  2A18                    8080  SUB_Dn_ea_immediate_add_out           MOVE.L        (A0)+,D5                       ;capture the immediate address
00006564  BCBC 000000FC           8081                        CMP.L         #match_SUB_imm_add_word,D6     ;check to see if need to pull word
0000656A  2A18                    8082                        MOVE.L        (A0)+,D5                       ;pull the word
0000656C  6700 0006               8083                                        BEQ           SUB_Dn_ea_imm_add_w            ;if equal go pull word    
00006570  6600 0010               8084                        BNE           SUB_Dn_ea_imm_add_l            ;if not equal, go check long
00006574                          8085                                           
00006574  22FC 00008A37           8086  SUB_Dn_ea_imm_add_w                   MOVE.L        #ea_$,(A1)+                    ;load the $
0000657A  32C5                    8087                                        MOVE.W        D5,(A1)+                       ;load the word address                           
0000657C  4CDF 7CBE               8088                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006580  4E75                    8089                                        RTS
00006582                          8090                                           
00006582  2A18                    8091  SUB_Dn_ea_imm_add_l                   MOVE.L        (A0)+,D5                       ;pull the long and increase the pointer
00006584  22FC 00008A37           8092                                        MOVE.L        #ea_$,(A1)+                    ;load the $
0000658A  2245                    8093                                        MOVE.L        D5,A1                          ;move to A1
0000658C  4CDF 7CBE               8094                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006590  4E75                    8095                                        RTS
00006592                          8096  
00006592  =000001C0               8097  mask_opmode                     EQU             $01C0            ;mask for the opmode to determine operand order
00006592                          8098  
00006592  =00000038               8099  mask_SUB_ea_mode        EQU     $0038
00006592  =0000003F               8100  mask_SUB_abs_add        EQU     $003F
00006592  =0000003F               8101  mask_SUB_ea_reg_and_mode    EQU     $003F
00006592  =00000E00               8102  mask_SUB_An_reg         EQU     $0E00
00006592                          8103  
00006592                          8104  
00006592  =00000100               8105  match_SUB_b_ea_Dn               EQU             $0100            ;match for ea,Dn byte size
00006592  =00000140               8106  match_SUB_w_ea_Dn               EQU             $0140            ;match for ea,Dn word size
00006592  =00000180               8107  match_SUB_l_ea_Dn               EQU             $0180            ;match for ea,Dn long size
00006592                          8108  
00006592  =00000000               8109  match_SUB_b_Dn_ea               EQU             $0000            ;match for Dn,ea byte size
00006592  =00000040               8110  match_SUB_w_Dn_ea               EQU             $0040            ;match for Dn,ea word size
00006592  =00000080               8111  match_SUB_l_Dn_ea               EQU             $0080            ;match for Dn,ea long size
00006592                          8112  
00006592                          8113  
00006592                          8114  
00006592  =00000000               8115  match_SUB_Dn            EQU     $0000
00006592  =00000008               8116  match_SUB_An            EQU     $0008
00006592  =00000010               8117  match_SUB_An_indir      EQU     $0010
00006592  =00000020               8118  match_SUB_An_indir_predec   EQU     $0020
00006592  =00000018               8119  match_SUB_An_indir_postinc  EQU     $0018
00006592  =00000038               8120  match_SUB_abs_add_word      EQU     $0038
00006592  =00000039               8121  match_SUB_abs_add_long      EQU     $0039
00006592                          8122  
00006592  =00000000               8123  match_SUB_D0            EQU     $0000
00006592  =00000001               8124  match_SUB_D1            EQU     $0001
00006592  =00000002               8125  match_SUB_D2            EQU     $0002
00006592  =00000003               8126  match_SUB_D3            EQU     $0003
00006592  =00000004               8127  match_SUB_D4            EQU     $0004
00006592  =00000005               8128  match_SUB_D5            EQU     $0005
00006592  =00000006               8129  match_SUB_D6            EQU     $0006
00006592  =00000007               8130  match_SUB_D7            EQU     $0007
00006592                          8131  
00006592  =00000008               8132  match_SUB_A0            EQU     $0008
00006592  =00000009               8133  match_SUB_A1            EQU     $0009
00006592  =0000000A               8134  match_SUB_A2            EQU     $000A
00006592  =0000000B               8135  match_SUB_A3            EQU     $000B
00006592  =0000000C               8136  match_SUB_A4            EQU     $000C
00006592  =0000000D               8137  match_SUB_A5            EQU     $000D
00006592  =0000000E               8138  match_SUB_A6            EQU     $000E
00006592  =0000000F               8139  match_SUB_A7            EQU     $000F
00006592                          8140  
00006592  =00000010               8141  match_SUB_An_indir_r0       EQU     $0010
00006592  =00000011               8142  match_SUB_An_indir_r1       EQU     $0011
00006592  =00000012               8143  match_SUB_An_indir_r2       EQU     $0012
00006592  =00000013               8144  match_SUB_An_indir_r3       EQU     $0013
00006592  =00000014               8145  match_SUB_An_indir_r4       EQU     $0014
00006592  =00000015               8146  match_SUB_An_indir_r5       EQU     $0015
00006592  =00000016               8147  match_SUB_An_indir_r6       EQU     $0016
00006592  =00000017               8148  match_SUB_An_indir_r7       EQU     $0017
00006592                          8149  
00006592  =00000018               8150  match_SUB_An_indir_postinc_r0   EQU     $0018
00006592  =00000019               8151  match_SUB_An_indir_postinc_r1   EQU     $0019
00006592  =0000001A               8152  match_SUB_An_indir_postinc_r2   EQU     $001A
00006592  =0000001B               8153  match_SUB_An_indir_postinc_r3   EQU     $001B
00006592  =0000001C               8154  match_SUB_An_indir_postinc_r4   EQU     $001C
00006592  =0000001D               8155  match_SUB_An_indir_postinc_r5   EQU     $001D
00006592  =0000001E               8156  match_SUB_An_indir_postinc_r6   EQU     $001E
00006592  =0000001F               8157  match_SUB_An_indir_postinc_r7   EQU     $001F
00006592                          8158  
00006592  =00000020               8159  match_SUB_An_indir_predec_reg0  EQU     $0020
00006592  =00000021               8160  match_SUB_An_indir_predec_reg1  EQU     $0021
00006592  =00000022               8161  match_SUB_An_indir_predec_reg2  EQU     $0022
00006592  =00000023               8162  match_SUB_An_indir_predec_reg3  EQU     $0023
00006592  =00000024               8163  match_SUB_An_indir_predec_reg4  EQU     $0024
00006592  =00000025               8164  match_SUB_An_indir_predec_reg5  EQU     $0025
00006592  =00000026               8165  match_SUB_An_indir_predec_reg6  EQU     $0026
00006592  =00000027               8166  match_SUB_An_indir_predec_reg7  EQU     $0027
00006592                          8167  
00006592  =0000003C               8168  match_SUB_imm_add               EQU             $003C
00006592  =000000FC               8169  match_SUB_imm_add_word          EQU             $00FC
00006592  =000001FC               8170  match_SUB_imm_add_long          EQU             $01FC
00006592                          8171  
00006592  =00000000               8172  match_SUB_reg0          EQU     $0000
00006592  =00000200               8173  match_SUB_reg1          EQU     $0200
00006592  =00000400               8174  match_SUB_reg2          EQU     $0400
00006592  =00000600               8175  match_SUB_reg3          EQU     $0600
00006592  =00000800               8176  match_SUB_reg4          EQU     $0800
00006592  =00000A00               8177  match_SUB_reg5          EQU     $0A00
00006592  =00000C00               8178  match_SUB_reg6          EQU     $0C00
00006592  =00000E00               8179  match_SUB_reg7          EQU     $0E00
00006592                          8180  
00006592                          8181  
00006592                          8182  
00006592                          8183  
00006592                          8184  -------------------- end include --------------------
00006592                          8185              INCLUDE 'LSD Subroutine.x68'
00006592                          8186  
00006592  48E7 7D3E               8187  LSD_sub                          MOVEM.L           D1-D5/D7/A2-A6, -(SP)                   ;preserve the registers,\ 
00006596                          8188                                   
00006596                          8189  ;------------------------Determine Shift Type-----------------------------------------------------------------
00006596  C2BC 000000C0           8190  LSD_shift_type                   AND.L              #mask_LSD_shift_type,D1                 ;load mask into D1
0000659C  B2BC 000000C0           8191                                   CMP.L              #match_LSD_mem_shift,D1                 ;check to see if memory shift
000065A2  6700 0006               8192                                   BEQ                LSD_mem_shift                               ;if equal go to mem shift subroutine
000065A6  6600 02EA               8193                                   BNE                LSD_reg_shift                               ;if LSD mem shift, go to reg shift
000065AA                          8194  
000065AA                          8195  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
000065AA  4241                    8196  LSD_mem_shift                    CLR               D1                                        ;clear shift mask
000065AC  C2BC 00000038           8197                                   AND.L             #mask_LSD_ea_mode,D1                      ;move the mask to D1
000065B2                          8198  
000065B2  B2BC 00000010           8199  LSD_An_indir                     CMP.L             #match_LSD_An_indir,D1                    ;check to see if mode is add reg indir
000065B8  6600 0014               8200                                   BNE               LSD_An_indir_predec                           ;if LSD, go check add reg indir predec 
000065BC  6700 0042               8201                                   BEQ               LSD_An_indir_reg                              ;if equal go figure out the register           
000065C0                          8202            
000065C0  B2BC 00000020           8203  LSD_An_indir_postinc             CMP.L             #match_LSD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
000065C6  6600 0006               8204                                   BNE               LSD_An_indir_predec                           ;if LSD go check add reg indir/predec
000065CA  6700 010C               8205                                   BEQ               LSD_An_indir_postinc_reg                      ;if equal go figure out the register
000065CE                          8206                        
000065CE  B2BC 00000018           8207  LSD_An_indir_predec              CMP.L             #match_LSD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
000065D4  6600 0006               8208                                   BNE               LSD_abs_add_word                              ;if LSD go check abs add word
000065D8  6700 01CA               8209                                   BEQ               LSD_An_indir_predec_reg                       ;if equal go figure out the register
000065DC                          8210  
000065DC  C4BC 0000003F           8211  LSD_abs_add_word                 AND.L             #mask_LSD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
000065E2                          8212                                   
000065E2  B4BC 00000039           8213                                   CMP.L             #match_LSD_abs_add_word,D2                ;check if abs add word
000065E8  2A18                    8214                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
000065EA  6600 0006               8215                                   BNE               LSD_abs_add_long                              ;if LSD go check abs add long
000065EE  6700 0284               8216                                   BEQ               LSD_abs_add_word_out                          ;if equal go to output
000065F2                          8217    
000065F2  B4BC 0000003C           8218  LSD_abs_add_long                 CMP.L             #match_LSD_abs_add_long,D2                ;check to see if abs add long
000065F8  6700 0288               8219                                   BEQ               LSD_abs_add_long_out                          ;if equal go to output
000065FC  6600 D064               8220                                   BNE               ERROR                                     ;if LSD equal to an addresssing mode, pritn error
00006600                          8221                               
00006600                          8222  
00006600                          8223  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00006600                          8224                                              
00006600                          8225  ;------------------Address Register Indirect-----------------------
00006600  4242                    8226  LSD_An_indir_reg                            CLR                D2                                      ;make sure D2 is empty
00006602  C4BC 0000003F           8227                                              AND.L              #mask_LSD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00006608                          8228  
00006608  B4BC 00000010           8229                                              CMP.L           #match_LSD_An_indir_r0,D2              ;check reg is equal to 0
0000660E  6600 0006               8230                                              BNE             LSD_An_indir_reg1                            ;if LSD try reg 1
00006612  6700 0064               8231                                              BEQ             LSD_An_indir_reg0_out                     ;if equal go to output subroutine
00006616                          8232  
00006616  B4BC 00000011           8233  LSD_An_indir_reg1                           CMP.L           #match_LSD_An_indir_r1,D2              ;check reg is equal to 1
0000661C  6600 0006               8234                                              BNE             LSD_An_indir_reg2                            ;if LSD try reg 2
00006620  6700 0062               8235                                              BEQ             LSD_An_indir_reg1_out                     ;if equal go to output subroutine
00006624                          8236  
00006624  B4BC 00000012           8237  LSD_An_indir_reg2                           CMP.L           #match_LSD_An_indir_r2,D2              ;check reg is equal to 2
0000662A  6600 0006               8238                                              BNE             LSD_An_indir_reg3                            ;if LSD try reg 3
0000662E  6700 0060               8239                                              BEQ             LSD_An_indir_reg2_out                     ;if equal go to output subroutine
00006632                          8240  
00006632  B4BC 00000013           8241  LSD_An_indir_reg3                           CMP.L           #match_LSD_An_indir_r3,D2              ;check reg is equal to 3
00006638  6600 0006               8242                                              BNE             LSD_An_indir_reg4                            ;if LSD try reg 4
0000663C  6700 005E               8243                                              BEQ             LSD_An_indir_reg3_out                     ;if equal go to output subroutine
00006640                          8244  
00006640  B4BC 00000014           8245  LSD_An_indir_reg4                           CMP.L           #match_LSD_An_indir_r4,D2              ;check reg is equal to 4
00006646  6600 0006               8246                                              BNE             LSD_An_indir_reg5                            ;if LSD try reg 5
0000664A  6700 005C               8247                                              BEQ             LSD_An_indir_reg4_out                    ;if equal go to output subroutine
0000664E                          8248  
0000664E  B4BC 00000015           8249  LSD_An_indir_reg5                           CMP.L           #match_LSD_An_indir_r5,D2              ;check reg is equal to 5
00006654  6600 0006               8250                                              BNE             LSD_An_indir_reg6                            ;if LSD try reg 6
00006658  6700 005A               8251                                              BEQ             LSD_An_indir_reg5_out                     ;if equal go to output subroutine
0000665C                          8252  
0000665C  B4BC 00000016           8253  LSD_An_indir_reg6                           CMP.L           #match_LSD_An_indir_r6,D2              ;check reg is equal to 6
00006662  6700 005C               8254                                              BEQ             LSD_An_indir_reg6_out                     ;if equal go to output subroutine
00006666  6600 0002               8255                                              BNE             LSD_An_indir_reg7
0000666A                          8256  
0000666A  B4BC 00000017           8257  LSD_An_indir_reg7                           CMP.L           #match_LSD_An_indir_r7,D2              ;check reg is equal to 6
00006670  6700 005A               8258                                              BEQ             LSD_An_indir_reg7_out                     ;if equal go to output subroutine
00006674  6600 CFEC               8259                                              BNE             ERROR                                        :if LSD equal to an addresssing mode, pritn error
00006678                          8260  
00006678                          8261  ;--------------------Address Register Indirect Output-----------------------
00006678  227C 000089A5           8262  LSD_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
0000667E  4CDF 7CBE               8263                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006682  4E75                    8264                                          RTS                                                         ;return to subroutine
00006684                          8265                                      
00006684  227C 000089AA           8266  LSD_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
0000668A  4CDF 7CBE               8267                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000668E  4E75                    8268                                          RTS                                                         ;return to subroutine
00006690                          8269                                              
00006690  227C 000089AF           8270  LSD_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
00006696  4CDF 7CBE               8271                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000669A  4E75                    8272                                          RTS                                                     ;return to subroutine
0000669C                          8273  
0000669C  227C 000089B4           8274  LSD_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
000066A2  4CDF 7CBE               8275                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000066A6  4E75                    8276                                          RTS                                                     ;return to subroutine
000066A8                          8277                                              
000066A8  227C 000089B9           8278  LSD_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
000066AE  4CDF 7CBE               8279                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000066B2  4E75                    8280                                          RTS                                                         ;return to subroutine
000066B4                          8281                                          
000066B4  227C 000089BE           8282  LSD_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
000066BA  4CDF 7CBE               8283                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000066BE  4E75                    8284                                          RTS                                                     ;return to subroutine
000066C0                          8285  
000066C0  227C 000089C3           8286  LSD_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
000066C6  4CDF 7CBE               8287                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000066CA  4E75                    8288                                          RTS                                                         ;return to subroutine
000066CC                          8289  
000066CC  227C 000089C8           8290  LSD_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
000066D2  4CDF 7CBE               8291                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000066D6  4E75                    8292                                          RTS                                                         ;return to subroutine
000066D8                          8293  
000066D8                          8294  ;------------------Address Register Indirect with Post Increment-----------------------
000066D8  B4BC 00000020           8295  LSD_An_indir_postinc_reg                    CMP.L      #match_LSD_An_indir_postinc_r0,D2        ;check reg is equal to 0
000066DE                          8296  
000066DE  6600 0006               8297                                              BNE        LSD_An_indir_pinc_r1                      ;if LSD try reg 1
000066E2  6700 0060               8298                                              BEQ        LSD_An_indir_pinc_r0_out               ;if equal go to output subroutine
000066E6                          8299  
000066E6  B4BC 00000021           8300  LSD_An_indir_pinc_r1                        CMP.L      #match_LSD_An_indir_postinc_r1,D2        ;check reg is equal to 1
000066EC  6600 0006               8301                                              BNE        LSD_An_indir_pinc_r2                      ;if LSD try reg 2
000066F0  6700 005E               8302                                              BEQ        LSD_An_indir_pinc_r1_out               ;if equal go to output subroutine
000066F4                          8303  
000066F4  B4BC 00000022           8304  LSD_An_indir_pinc_r2                        CMP.L      #match_LSD_An_indir_postinc_r2,D2        ;check reg is equal to 2
000066FA  6600 0006               8305                                              BNE        LSD_An_indir_pinc_r3                      ;if LSD try reg 3
000066FE  6700 005C               8306                                              BEQ        LSD_An_indir_pinc_r2_out               ;if equal go to output subroutine
00006702                          8307      
00006702  B4BC 00000023           8308  LSD_An_indir_pinc_r3                        CMP.L      #match_LSD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00006708  6600 0006               8309                                              BNE        LSD_An_indir_pinc_r4                      ;if LSD try reg 4
0000670C  6700 005A               8310                                              BEQ        LSD_An_indir_pinc_r3_out               ;if equal go to output subroutine
00006710                          8311   
00006710  B4BC 00000024           8312  LSD_An_indir_pinc_r4                        CMP.L      #match_LSD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00006716  6600 0006               8313                                              BNE        LSD_An_indir_pinc_r5                      ;if LSD try reg 5
0000671A  6700 0058               8314                                              BEQ        LSD_An_indir_pinc_r4_out               ;if equal go to output subroutine
0000671E                          8315  
0000671E  B4BC 00000025           8316  LSD_An_indir_pinc_r5                        CMP.L      #match_LSD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00006724  6600 0006               8317                                              BNE        LSD_An_indir_pinc_r6                      ;if LSD try reg 6
00006728  6700 0056               8318                                              BEQ        LSD_An_indir_pinc_r5_out               ;if equal go to output subroutine
0000672C                          8319  
0000672C  B4BC 00000026           8320  LSD_An_indir_pinc_r6                        CMP.L      #match_LSD_An_indir_postinc_r6,D2        ;check reg is equal to 6
00006732  6700 0058               8321                                              BEQ        LSD_An_indir_pinc_r6_out              ;if equal go to output subroutine
00006736                          8322  
00006736  B4BC 00000027           8323  LSD_An_indir_pinc_r7                        CMP.L      #match_LSD_An_indir_postinc_r7,D2        ;check reg is equal to 6
0000673C  6700 005A               8324                                              BEQ        LSD_An_indir_pinc_r7_out              ;if equal go to output subroutine
00006740  6600 CF20               8325                                              BNE        ERROR                                        :if LSD equal to an addresssing mode, pritn error
00006744                          8326  
00006744                          8327  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00006744  227C 000089D3           8328  LSD_An_indir_pinc_r0_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
0000674A  4CDF 7CBE               8329                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000674E  4E75                    8330                                              RTS                                             ;return to subroutine
00006750                          8331  
00006750  227C 000089D3           8332  LSD_An_indir_pinc_r1_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
00006756  4CDF 7CBE               8333                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000675A  4E75                    8334                                              RTS                                             ;return to subroutine
0000675C                          8335  
0000675C  227C 000089D9           8336  LSD_An_indir_pinc_r2_out                    MOVE.L          #ea_indir_postinc_A2,A1                         ;load string constant into A1
00006762  4CDF 7CBE               8337                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006766  4E75                    8338                                              RTS                                             ;return to subroutine
00006768                          8339  
00006768  227C 000089DF           8340  LSD_An_indir_pinc_r3_out                    MOVE.L          #ea_indir_postinc_A3,A1                         ;load string constant into A1
0000676E  4CDF 7CBE               8341                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006772  4E75                    8342                                              RTS                                             ;return to subroutine
00006774                          8343  
00006774  227C 000089E5           8344  LSD_An_indir_pinc_r4_out                    MOVE.L          #ea_indir_postinc_A4,A1                         ;load string constant into A1
0000677A  4CDF 7CBE               8345                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000677E  4E75                    8346                                              RTS                                             ;return to subroutine
00006780                          8347  
00006780  227C 000089EB           8348  LSD_An_indir_pinc_r5_out                    MOVE.L          #ea_indir_postinc_A5,A1                         ;load string constant into A1
00006786  4CDF 7CBE               8349                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000678A  4E75                    8350                                              RTS                                             ;return to subroutine
0000678C                          8351   
0000678C  227C 000089F1           8352  LSD_An_indir_pinc_r6_out                    MOVE.L          #ea_indir_postinc_A6,A1                         ;load string constant into A1
00006792  4CDF 7CBE               8353                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006796  4E75                    8354                                              RTS                                             ;return to subroutine
00006798                          8355  
00006798  227C 000089F7           8356  LSD_An_indir_pinc_r7_out                    MOVE.L          #ea_indir_postinc_A7,A1                         ;load string constant into A1
0000679E  4CDF 7CBE               8357                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000067A2  4E75                    8358                                              RTS                                             ;return to subroutine
000067A4                          8359  
000067A4                          8360                                                      
000067A4                          8361  ;------------------Address Register Indirect with Pre Decrement-----------------------
000067A4  B4BC 00000018           8362  LSD_An_indir_predec_reg                     CMP.L      #match_LSD_An_indir_predec_r0,D2         ;check reg is equal to 0
000067AA  6600 0006               8363                                              BNE        LSD_An_indir_pdec_r1                      ;if LSD try reg 1
000067AE  6700 0064               8364                                              BEQ        LSD_An_indir_pdec_r0_out               ;if equal go to output subroutine
000067B2                          8365  
000067B2  B4BC 00000019           8366  LSD_An_indir_pdec_r1                        CMP.L      #match_LSD_An_indir_predec_r1,D2         ;check reg is equal to 1
000067B8  6600 0006               8367                                              BNE        LSD_An_indir_pdec_r2                      ;if LSD try reg 2
000067BC  6700 0062               8368                                              BEQ        LSD_An_indir_pdec_r1_out               ;if equal go to output subroutine
000067C0                          8369  
000067C0  B4BC 0000001A           8370  LSD_An_indir_pdec_r2                        CMP.L      #match_LSD_An_indir_predec_r2,D2         ;check reg is equal to 2
000067C6  6600 0006               8371                                              BNE        LSD_An_indir_pdec_r3                      ;if LSD try reg 3
000067CA  6700 0060               8372                                              BEQ        LSD_An_indir_pdec_r2_out               ;if equal go to output subroutine
000067CE                          8373  
000067CE  B4BC 0000001B           8374  LSD_An_indir_pdec_r3                        CMP.L      #match_LSD_An_indir_predec_r3,D2         ;check reg is equal to 3
000067D4  6600 0006               8375                                              BNE        LSD_An_indir_pdec_r4                      ;if LSD try reg 4
000067D8  6700 005E               8376                                              BEQ        LSD_An_indir_pdec_r3_out               ;if equal go to output subroutine
000067DC                          8377  
000067DC  B4BC 0000001C           8378  LSD_An_indir_pdec_r4                        CMP.L      #match_LSD_An_indir_predec_r4,D2         ;check reg is equal to 4
000067E2  6600 0006               8379                                              BNE        LSD_An_indir_pdec_r5                      ;if LSD try reg 5
000067E6  6700 005C               8380                                              BEQ        LSD_An_indir_pdec_r4_out               ;if equal go to output subroutine
000067EA                          8381  
000067EA  B4BC 0000001D           8382  LSD_An_indir_pdec_r5                        CMP.L      #match_LSD_An_indir_predec_r5,D2         ;check reg is equal to 5
000067F0  6600 0006               8383                                              BNE        LSD_An_indir_pdec_r6                      ;if LSD try reg 6
000067F4  6700 005A               8384                                              BEQ        LSD_An_indir_pdec_r5_out               ;if equal go to output subroutine
000067F8                          8385  
000067F8  B4BC 0000001E           8386  LSD_An_indir_pdec_r6                        CMP.L      #match_LSD_An_indir_predec_r6,D2         ;check reg is equal to 6
000067FE  6700 005C               8387                                              BEQ        LSD_An_indir_pdec_r6_out               ;if equal go to output subroutine
00006802  6600 0002               8388                                              BNE        LSD_An_indir_pdec_r7
00006806                          8389                                              
00006806  B4BC 00000001           8390  LSD_An_indir_pdec_r7                        CMP.L      #match_LSD_An_indir_predec_r7,D2         ;check reg is equal to 6
0000680C  6700 005A               8391                                              BEQ        LSD_An_indir_pdec_r7_out               ;if equal go to output subroutine
00006810  6600 CE50               8392                                              BNE        ERROR                                        :if LSD equal to an addresssing mode, pritn error
00006814                          8393  
00006814                          8394  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00006814  227C 000089FD           8395  LSD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
0000681A  4CDF 7CBE               8396                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000681E  4E75                    8397                                              RTS                                                     ;return to subroutine
00006820                          8398  
00006820  227C 00008A03           8399  LSD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
00006826  4CDF 7CBE               8400                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000682A  4E75                    8401                                              RTS                                                     ;return to subroutine
0000682C                          8402                                                      
0000682C  227C 00008A09           8403  LSD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
00006832  4CDF 7CBE               8404                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006836  4E75                    8405                                              RTS                                                     ;return to subroutine
00006838                          8406  
00006838  227C 00008A0F           8407  LSD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
0000683E  4CDF 7CBE               8408                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006842  4E75                    8409                                              RTS                                                     ;return to subroutine
00006844                          8410  
00006844  227C 00008A15           8411  LSD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
0000684A  4CDF 7CBE               8412                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000684E  4E75                    8413                                              RTS                                                     ;return to subroutine
00006850                          8414      
00006850  227C 00008A1B           8415  LSD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00006856  4CDF 7CBE               8416                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000685A  4E75                    8417                                              RTS                                                     ;return to subroutine
0000685C                          8418      
0000685C  227C 00008A21           8419  LSD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
00006862  4CDF 7CBE               8420                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006866  4E75                    8421                                              RTS                                                     ;return to subroutine
00006868                          8422  
00006868  227C 00008A27           8423  LSD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
0000686E  4CDF 7CBE               8424                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006872  4E75                    8425                                              RTS                                                     ;return to subroutine
00006874                          8426                                                      
00006874                          8427  ;------------------Absolute Addressing Output-----------------------
00006874  22FC 00008A37           8428  LSD_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000687A  22C5                    8429                                           MOVE.L      D5,(A1)+                           ;load address                  
0000687C  4CDF 7CBE               8430                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006880  4E75                    8431                                           RTS                                            :return to subroutine
00006882                          8432                                             
00006882                          8433  
00006882  2A18                    8434  LSD_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00006884  22FC 00008A37           8435                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000688A  22C5                    8436                                           MOVE.L      D5,(A1)+                           ;load address                  
0000688C  4CDF 7CBE               8437                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006890  4E75                    8438                                           RTS                                            :return to subroutine                                            
00006892                          8439  
00006892                          8440                                                  
00006892                          8441  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
00006892                          8442  ; determine if the shift is a data register or a immediate value
00006892  4241                    8443  LSD_reg_shift                       CLR         D1                              ;clear D1
00006894  C2BC 00000020           8444                                      AND.L       #mask_LSD_reg_shift_ir,D1           ;load the mask into D1
0000689A  B2BC 00000020           8445                                      CMP.L       #match_LSD_shift_reg,D1             ;check to see if the shift is a data register
000068A0  6700 0006               8446                                      BEQ         LSD_shift_reg                       ;if the shift is a register, go to subroutine
000068A4  6600 007A               8447                                      BNE         LSD_count_val                       ;if LSD go to immediate value subroutine
000068A8                          8448  
000068A8                          8449  ;i/r = 1, the shift is a Data register                                    
000068A8                          8450  ; this the subroutine for the data register shift
000068A8  4241                    8451  LSD_shift_reg                       CLR         D1                              ;clear D1
000068AA  C2BC 00000020           8452                                      AND.L       #mask_LSD_reg_shift,D1              ;load mask into D1 for bits 11-9
000068B0                          8453  
000068B0  B2BC 00000000           8454  LSD_count_reg0                      CMP.L       #match_LSD_count_reg0,D1            ;check to see if count/shift = 0
000068B6  6600 0006               8455                                      BNE         LSD_count_reg1                    ;if LSD go check 1
000068BA  6700 0134               8456                                      BEQ         LSD_count_reg0_out                ;got to output
000068BE                          8457                                      
000068BE  B2BC 00000200           8458  LSD_count_reg1                      CMP.L       #match_LSD_count_reg1,D1            ;check to see if count/shift = 1
000068C4  6600 0006               8459                                      BNE         LSD_count_reg2                    ;if LSD go check 2
000068C8  6700 0132               8460                                      BEQ         LSD_count_reg1_out                ;got to output
000068CC                          8461  
000068CC  B2BC 00000400           8462  LSD_count_reg2                      CMP.L       #match_LSD_count_reg2,D1            ;check to see if count/shift = 2
000068D2  6600 0006               8463                                      BNE         LSD_count_reg3                    ;if LSD go check 3
000068D6  6700 0130               8464                                      BEQ         LSD_count_reg2_out                ;got to output
000068DA                          8465  
000068DA  B2BC 00000600           8466  LSD_count_reg3                      CMP.L       #match_LSD_count_reg3,D1            ;check to see if count/shift = 3
000068E0  6600 0006               8467                                      BNE         LSD_count_reg4                    ;if LSD go check 4
000068E4  6700 012E               8468                                      BEQ         LSD_count_reg3_out                ;got to output
000068E8                          8469  
000068E8  B2BC 00000800           8470  LSD_count_reg4                      CMP.L       #match_LSD_count_reg4,D1            ;check to see if count/shift = 4
000068EE  6600 0006               8471                                      BNE         LSD_count_reg5                    ;if LSD go check 5
000068F2  6700 012C               8472                                      BEQ         LSD_count_reg4_out                ;got to output
000068F6                          8473  
000068F6  B2BC 00000A00           8474  LSD_count_reg5                      CMP.L       #match_LSD_count_reg5,D1            ;check to see if count/shift = 5
000068FC  6600 0006               8475                                      BNE         LSD_count_reg6                      ;if LSD go check 6
00006900  6700 012A               8476                                      BEQ         LSD_count_reg5_out                  ;got to output
00006904                          8477  
00006904  B2BC 00000C00           8478  LSD_count_reg6                      CMP.L       #match_LSD_count_reg6,D1            ;check to see if count/shift = 6
0000690A  6600 0006               8479                                      BNE         LSD_count_reg7                      ;if LSD go check 7
0000690E  6700 0128               8480                                      BEQ         LSD_count_reg6_out                  ;got to output
00006912                          8481  
00006912  B2BC 00000E00           8482  LSD_count_reg7                      CMP.L       #match_LSD_count_reg7,D1            ;check to see if count/shift = 7
00006918  6600 CD48               8483                                      BNE         ERROR                           ; if none of the registers, then print error message
0000691C  6700 0126               8484                                      BEQ         LSD_count_reg7_out                  ;got to output
00006920                          8485  
00006920                          8486  
00006920                          8487  
00006920                          8488  ;i/r = 0, the shift is an immediate value
00006920                          8489  ;1-7 = 1-7
00006920                          8490  ;0 = 8
00006920                          8491  ; this is the subroutine for the immedite value shift
00006920  B2BC 00000000           8492  LSD_count_val                       CMP.L       #match_LSD_count_val0,D1          ;check to see if shift count is 0
00006926  6600 0006               8493                                      BNE         LSD_count_val1                    ;if LSD 0 check 1
0000692A  6700 0064               8494                                      BEQ         LSD_count_val0_out                ;if 0 got to output
0000692E                          8495  
0000692E  B2BC 00000200           8496  LSD_count_val1                      CMP.L       #match_LSD_count_val1,D1          ;check to see if shift count is 0
00006934  6600 0006               8497                                      BNE         LSD_count_val2                    ;if LSD 0 check 1
00006938  6700 0062               8498                                      BEQ         LSD_count_val1_out                ;if 0 got to output
0000693C                          8499  
0000693C  B2BC 00000400           8500  LSD_count_val2                      CMP.L       #match_LSD_count_val2,D1          ;check to see if shift count is 0
00006942  6600 0006               8501                                      BNE         LSD_count_val3                    ;if LSD 0 check 1
00006946  6700 0060               8502                                      BEQ         LSD_count_val2_out                ;if 0 got to output
0000694A                          8503  
0000694A  B2BC 00000600           8504  LSD_count_val3                      CMP.L       #match_LSD_count_val3,D1          ;check to see if shift count is 0
00006950  6600 0006               8505                                      BNE         LSD_count_val4                    ;if LSD 0 check 1
00006954  6700 005E               8506                                      BEQ         LSD_count_val3_out                ;if 0 got to output
00006958                          8507  
00006958  B2BC 00000800           8508  LSD_count_val4                      CMP.L       #match_LSD_count_val4,D1          ;check to see if shift count is 0
0000695E  6600 0006               8509                                      BNE         LSD_count_val5                    ;if LSD 0 check 1
00006962  6700 005C               8510                                      BEQ         LSD_count_val4_out                ;if 0 got to output
00006966                          8511  
00006966  B2BC 00000A00           8512  LSD_count_val5                      CMP.L       #match_LSD_count_val5,D1          ;check to see if shift count is 0
0000696C  6600 0006               8513                                      BNE         LSD_count_val6                    ;if LSD 0 check 1
00006970  6700 005A               8514                                      BEQ         LSD_count_val5_out                ;if 0 got to output
00006974                          8515  
00006974  B2BC 00000C00           8516  LSD_count_val6                      CMP.L       #match_LSD_count_val6,D1          ;check to see if shift count is 0
0000697A  6600 0006               8517                                      BNE         LSD_count_val7                    ;if LSD 0 check 1
0000697E  6700 0058               8518                                      BEQ         LSD_count_val6_out                ;if 0 got to output
00006982                          8519  
00006982  B2BC 00000E00           8520  LSD_count_val7                      CMP.L       #match_LSD_count_val7,D1          ;check to see if shift count is 0
00006988  6600 CCD8               8521                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
0000698C  6700 0056               8522                                      BEQ         LSD_count_val7_out                ;if 0 got to output
00006990                          8523  
00006990                          8524  ;-----------------------------------Count Shift Immedite Value Output---------------------------
00006990  227C 00008995           8525  LSD_count_val0_out            MOVE.L            #ea_val0,A1         ;load string constant into A1
00006996  4EB9 00006A50           8526                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
0000699C                          8527                                
0000699C  227C 00008997           8528  LSD_count_val1_out            MOVE.L            #ea_val1,A1         ;load string constant into A1
000069A2  4EB9 00006A50           8529                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000069A8                          8530  
000069A8  227C 00008999           8531  LSD_count_val2_out            MOVE.L            #ea_val2,A1         ;load string constant into A1
000069AE  4EB9 00006A50           8532                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000069B4                          8533  
000069B4  227C 0000899B           8534  LSD_count_val3_out            MOVE.L            #ea_val3,A1         ;load string constant into A1
000069BA  4EB9 00006A50           8535                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000069C0                          8536  
000069C0  227C 0000899D           8537  LSD_count_val4_out            MOVE.L            #ea_val4,A1         ;load string constant into A1
000069C6  4EB9 00006A50           8538                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000069CC                          8539  
000069CC  227C 0000899F           8540  LSD_count_val5_out            MOVE.L            #ea_val5,A1         ;load string constant into A1
000069D2  4EB9 00006A50           8541                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000069D8                          8542  
000069D8  227C 000089A1           8543  LSD_count_val6_out            MOVE.L            #ea_val6,A1         ;load string constant into A1
000069DE  4EB9 00006A50           8544                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000069E4                          8545  
000069E4  227C 000089A3           8546  LSD_count_val7_out            MOVE.L            #ea_val7,A1         ;load string constant into A1
000069EA  4EB9 00006A50           8547                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000069F0                          8548  
000069F0                          8549  ;-------------------------Count Shift Output (Dn)-----------------------------------------
000069F0  227C 00008965           8550  LSD_count_reg0_out            MOVE.L            #ea_D0,A1           ;load string constant into A1
000069F6  4EB9 00006A50           8551                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000069FC                          8552                                
000069FC  227C 00008968           8553  LSD_count_reg1_out            MOVE.L            #ea_D1,A1           ;load string constant into A1
00006A02  4EB9 00006A50           8554                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006A08                          8555                                
00006A08  227C 0000896B           8556  LSD_count_reg2_out            MOVE.L            #ea_D2,A1           ;load string constant into A1
00006A0E  4EB9 00006A50           8557                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006A14                          8558                                
00006A14  227C 0000896E           8559  LSD_count_reg3_out            MOVE.L            #ea_D3,A1           ;load string constant into A1
00006A1A  4EB9 00006A50           8560                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006A20                          8561                                
00006A20  227C 00008971           8562  LSD_count_reg4_out            MOVE.L            #ea_D4,A1           ;load string constant into A1
00006A26  4EB9 00006A50           8563                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006A2C                          8564                                
00006A2C  227C 00008974           8565  LSD_count_reg5_out            MOVE.L            #ea_D5,A1           ;load string constant into A1
00006A32  4EB9 00006A50           8566                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006A38                          8567                                
00006A38  227C 00008977           8568  LSD_count_reg6_out            MOVE.L            #ea_D6,A1           ;load string constant into A1
00006A3E  4EB9 00006A50           8569                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006A44                          8570                                
00006A44  227C 0000897A           8571  LSD_count_reg7_out            MOVE.L            #ea_D7,A1           ;load string constant into A1
00006A4A  4EB9 00006A50           8572                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand                                    
00006A50                          8573                                      
00006A50                          8574                                      
00006A50                          8575  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
00006A50  4241                    8576  LSD_Dn0                         CLR             D1                  ;clear D1
00006A52  C2BC 00000007           8577                                  AND.L           #mask_LSD_data_reg,D1   ;load data register mask for second operand
00006A58                          8578                                  
00006A58  B2BC 00000000           8579                                  CMP.L           #match_LSD_D_reg0,D1          ;check if data register is D0
00006A5E  6700 0068               8580                                  BEQ             LSD_D0_out              ;if equal got to output subroutine
00006A62  6600 0002               8581                                  BNE             LSD_Dn1                 ;if LSD check D1
00006A66                          8582                                  
00006A66  B2BC 00000001           8583  LSD_Dn1                         CMP.L           #match_LSD_D_reg1,D1          ;check if data register is D0
00006A6C  6700 0066               8584                                  BEQ             LSD_D1_out              ;if equal got to output subroutine
00006A70  6600 0002               8585                                  BNE             LSD_Dn2                 ;if LSD check D2
00006A74                          8586  
00006A74  B2BC 00000002           8587  LSD_Dn2                         CMP.L           #match_LSD_D_reg2,D1          ;check if data register is D0
00006A7A  6700 0064               8588                                  BEQ             LSD_D2_out              ;if equal got to output subroutine
00006A7E  6600 0002               8589                                  BNE             LSD_Dn3                 ;if LSD check D3
00006A82                          8590  
00006A82  B2BC 00000003           8591  LSD_Dn3                         CMP.L           #match_LSD_D_reg3,D1          ;check if data register is D0
00006A88  6700 0062               8592                                  BEQ             LSD_D3_out              ;if equal got to output subroutine
00006A8C  6600 0002               8593                                  BNE             LSD_Dn4                 ;if LSD check D4
00006A90                          8594  
00006A90  B2BC 00000004           8595  LSD_Dn4                         CMP.L           #match_LSD_D_reg4,D1          ;check if data register is D0
00006A96  6700 0060               8596                                  BEQ             LSD_D4_out              ;if equal got to output subroutine
00006A9A  6600 0002               8597                                  BNE             LSD_Dn5                 ;if LSD check D5
00006A9E                          8598  
00006A9E  B2BC 00000005           8599  LSD_Dn5                         CMP.L           #match_LSD_D_reg5,D1          ;check if data register is D0
00006AA4  6700 005E               8600                                  BEQ             LSD_D5_out              ;if equal got to output subroutine
00006AA8  6600 0002               8601                                  BNE             LSD_Dn6                 ;if LSD check D6
00006AAC                          8602  
00006AAC  B2BC 00000006           8603  LSD_Dn6                         CMP.L           #match_LSD_D_reg6,D1          ;check if data register is D0
00006AB2  6700 005C               8604                                  BEQ             LSD_D6_out              ;if equal got to output subroutine
00006AB6  6600 0002               8605                                  BNE             LSD_Dn7                 ;if LSD check D7
00006ABA                          8606  
00006ABA  B2BC 00000007           8607  LSD_Dn7                         CMP.L           #match_LSD_D_reg7,D1          ;check if data register is D0
00006AC0  6700 005A               8608                                  BEQ             LSD_D7_out              ;if equal got to output subroutine
00006AC4  6600 CB9C               8609                                  BNE             ERROR               :if none of the registers go to error sub routine
00006AC8                          8610                                  
00006AC8                          8611                                  
00006AC8                          8612  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
00006AC8  227C 00008965           8613  LSD_D0_out                    MOVE.L            #ea_D0,A1           ;load string constant into A1
00006ACE  4CDF 7CBE               8614                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006AD2  4E75                    8615                                RTS                                   ;return to subroutine
00006AD4                          8616  
00006AD4  227C 00008968           8617  LSD_D1_out                    MOVE.L            #ea_D1,A1           ;load string constant into A1
00006ADA  4CDF 7CBE               8618                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006ADE  4E75                    8619                                RTS                                   ;return to subroutine
00006AE0                          8620  
00006AE0  227C 0000896B           8621  LSD_D2_out                    MOVE.L            #ea_D2,A1           ;load string constant into A1
00006AE6  4CDF 7CBE               8622                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006AEA  4E75                    8623                                RTS                                   ;return to subroutine
00006AEC                          8624              
00006AEC  227C 0000896E           8625  LSD_D3_out                    MOVE.L            #ea_D3,A1           ;load string constant into A1
00006AF2  4CDF 7CBE               8626                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006AF6  4E75                    8627                                RTS                                   ;return to subroutine
00006AF8                          8628  
00006AF8  227C 00008971           8629  LSD_D4_out                    MOVE.L            #ea_D4,A1           ;load string constant into A1
00006AFE  4CDF 7CBE               8630                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006B02  4E75                    8631                                RTS                                   ;return to subroutine
00006B04                          8632  
00006B04  227C 00008974           8633  LSD_D5_out                    MOVE.L            #ea_D5,A1           ;load string constant into A1
00006B0A  4CDF 7CBE               8634                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006B0E  4E75                    8635                                RTS                                   ;return to subroutine
00006B10                          8636  
00006B10  227C 00008977           8637  LSD_D6_out                    MOVE.L            #ea_D6,A1           ;load string constant into A1
00006B16  4CDF 7CBE               8638                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006B1A  4E75                    8639                                RTS                                   ;return to subroutine
00006B1C                          8640  
00006B1C  227C 0000897A           8641  LSD_D7_out                    MOVE.L            #ea_D7,A1           ;load string constant into A1
00006B22  4CDF 7CBE               8642                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006B26  4E75                    8643                                RTS                                   ;return to subroutine
00006B28                          8644  
00006B28                          8645                                      
00006B28                          8646  
00006B28  =000000C0               8647  mask_LSD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
00006B28  =00000038               8648  mask_LSD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
00006B28  =0000003F               8649  mask_LSD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
00006B28  =0000003F               8650  mask_LSD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
00006B28  =00000020               8651  mask_LSD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
00006B28  =00000E00               8652  mask_LSD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
00006B28  =00000020               8653  mask_LSD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
00006B28  =00000007               8654  mask_LSD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
00006B28                          8655  
00006B28  =00000000               8656  match_LSD_D_reg0                                EQU             $0000               ;match for second operand data register 0
00006B28  =00000001               8657  match_LSD_D_reg1                                EQU             $0001               ;match for second operand data register 1
00006B28  =00000002               8658  match_LSD_D_reg2                                EQU             $0002               ;match for second operand data register 2
00006B28  =00000003               8659  match_LSD_D_reg3                                EQU             $0003               ;match for second operand data register 3
00006B28  =00000004               8660  match_LSD_D_reg4                                EQU             $0004               ;match for second operand data register 4
00006B28  =00000005               8661  match_LSD_D_reg5                                EQU             $0005               ;match for second operand data register 5
00006B28  =00000006               8662  match_LSD_D_reg6                                EQU             $0006               ;match for second operand data register 6
00006B28  =00000007               8663  match_LSD_D_reg7                                EQU             $0007               ;match for second operand data register 7
00006B28                          8664  
00006B28  =00000000               8665  match_LSD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
00006B28  =00000200               8666  match_LSD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
00006B28  =00000400               8667  match_LSD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
00006B28  =00000600               8668  match_LSD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
00006B28  =00000800               8669  match_LSD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
00006B28  =00000A00               8670  match_LSD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
00006B28  =00000C00               8671  match_LSD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
00006B28  =00000E00               8672  match_LSD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
00006B28                          8673  
00006B28  =00000020               8674  match_LSD_shift_reg                             EQU             $0020               ;match to for a register shift
00006B28  =00000000               8675  match_LSD_count_val0                            EQU             $0000               ;match for shift reg 0
00006B28  =00000200               8676  match_LSD_count_val1                           EQU             $0200               ;match for shift reg 1
00006B28  =00000400               8677  match_LSD_count_val2                            EQU             $0400               ;match for shift reg 2
00006B28  =00000600               8678  match_LSD_count_val3                            EQU             $0600               ;match for shift reg 3
00006B28  =00000800               8679  match_LSD_count_val4                            EQU             $0800               ;match for shift reg 4
00006B28  =00000A00               8680  match_LSD_count_val5                            EQU             $0A00               ;match for shift reg 5
00006B28  =00000C00               8681  match_LSD_count_val6                            EQU             $0C00               ;match for shift reg 6
00006B28  =00000E00               8682  match_LSD_count_val7                            EQU             $0E00               ;match for shift reg 7
00006B28                          8683  
00006B28  =00000020               8684  match_LSD_shift_count                           EQU             $0020
00006B28  =000000C0               8685  match_LSD_mem_shift                         EQU             $00C0              ;match for memory shift
00006B28  =00000010               8686  match_LSD_An_indir                          EQU             $0010              ;match for add reg indir
00006B28  =00000020               8687  match_LSD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
00006B28  =00000018               8688  match_LSD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
00006B28  =00000039               8689  match_LSD_abs_add_word                      EQU             $0039              ;match for word abs add 
00006B28  =0000003C               8690  match_LSD_abs_add_long                      EQU             $003C              ;match for long abs add
00006B28                          8691  
00006B28                          8692  
00006B28  =00000010               8693  match_LSD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
00006B28  =00000011               8694  match_LSD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
00006B28  =00000012               8695  match_LSD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
00006B28  =00000013               8696  match_LSD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
00006B28  =00000014               8697  match_LSD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
00006B28  =00000015               8698  match_LSD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
00006B28  =00000016               8699  match_LSD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
00006B28  =00000017               8700  match_LSD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
00006B28                          8701  
00006B28  =00000020               8702  match_LSD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
00006B28  =00000021               8703  match_LSD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
00006B28  =00000022               8704  match_LSD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
00006B28  =00000023               8705  match_LSD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
00006B28  =00000024               8706  match_LSD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
00006B28  =00000025               8707  match_LSD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
00006B28  =00000026               8708  match_LSD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
00006B28  =00000027               8709  match_LSD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
00006B28                          8710  
00006B28                          8711  
00006B28  =00000018               8712  match_LSD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
00006B28  =00000019               8713  match_LSD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
00006B28  =0000001A               8714  match_LSD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
00006B28  =0000001B               8715  match_LSD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
00006B28  =0000001C               8716  match_LSD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
00006B28  =0000001D               8717  match_LSD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
00006B28  =0000001E               8718  match_LSD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
00006B28  =00000001               8719  match_LSD_An_indir_predec_r7                EQU             $001              ;match for add reg indir with predec with add reg 7
00006B28                          8720  
00006B28                          8721  
00006B28                          8722  
00006B28                          8723  
00006B28                          8724  
00006B28                          8725  -------------------- end include --------------------
00006B28                          8726              INCLUDE 'MOVEA Subroutine.x68'
00006B28                          8727  
00006B28                          8728     
00006B28  48E7 7D3E               8729  MOVEA_sub                        MOVEM.L           D1-D5/D7/A2-A6, -(SP)                 ;preserve the registers, 
00006B2C  C2BC 00000038           8730                                   AND.L             #mask_MOVEA_ea_mode,D1                  ;move the mask to D1
00006B32                          8731  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00006B32  B2BC 00000000           8732  MOVEA_data_reg_dir               CMP.L             #match_MOVEA_Dn,D1                      ;check to see if mode is data reg direct
00006B38  6600 0006               8733                                   BNE               MOVEA_add_reg_dir                       ;if not, go check add reg dir
00006B3C  6700 0068               8734                                   BEQ               MOVEA_Dn_reg                            ;if equal go figure out the register
00006B40                          8735  
00006B40  B2BC 00000008           8736  MOVEA_add_reg_dir                CMP.L             #match_MOVEA_An,D1                      ;check if mode is add reg direct
00006B46  6600 0006               8737                                   BNE               MOVEA_add_reg_indir                     ;if not, go check add reg indir
00006B4A  6700 0130               8738                                   BEQ               MOVEA_An_reg                            ;if equal go figure out the reg
00006B4E                          8739   
00006B4E  B2BC 00000010           8740  MOVEA_add_reg_indir              CMP.L             #match_MOVEA_An_indir,D1                ;check to see if mode is add reg indir
00006B54  6600 0006               8741                                   BNE               MOVEA_add_reg_indir_predec              ;if not, go check add reg indir predec 
00006B58  6700 01F2               8742                                   BEQ               MOVEA_An_indir_reg                      ;if equal go figure out the register           
00006B5C                          8743             
00006B5C  B2BC 00000020           8744  MOVEA_add_reg_indir_predec       CMP.L             #match_MOVEA_An_indir_predec,D1         ;check to see if mode is add reg indor w/ postinc
00006B62  6600 0006               8745                                   BNE               MOVEA_add_reg_indir_postinc             ;if not go check add reg indir/predec
00006B66  6700 0384               8746                                   BEQ               MOVEA_An_indir_predec                   ;if equal go figure out the register
00006B6A                          8747                        
00006B6A  B2BC 00000018           8748  MOVEA_add_reg_indir_postinc      CMP.L             #match_MOVEA_An_indir_postinc,D1        ;check to see if mode is add reg indir w/predec
00006B70  6600 0006               8749                                   BNE               MOVEA_abs_add_word                      ;if not go check abs add word
00006B74  6700 02A6               8750                                   BEQ               MOVEA_An_indir_postinc_reg              ;if equal go figure out the register
00006B78                          8751  
00006B78  C4BC 0000003F           8752  MOVEA_abs_add_word               AND.L             #mask_MOVEA_abs_add,D2                  ;load mask to determine if abs add word or long
00006B7E                          8753                                   
00006B7E  B4BC 00000038           8754                                   CMP.L             #match_MOVEA_abs_add_word,D2            ;check if abs add word
00006B84  2A18                    8755                                   MOVE.L            (A0)+,D5                                ;pull the next word instruction that holds the address
00006B86  6600 0006               8756                                   BNE               MOVEA_abs_add_long                      ;if not go check abs add long
00006B8A  6700 0430               8757                                   BEQ               MOVEA_abs_add_word_out                  ;if equal go to output
00006B8E                          8758    
00006B8E  B4BC 00000039           8759  MOVEA_abs_add_long               CMP.L             #match_MOVEA_abs_add_long,D2            ;check to see if abs add long
00006B94  6700 0434               8760                                   BEQ               MOVEA_abs_add_long_out                  ;if equal go to output
00006B98                          8761                                   
00006B98  B2BC 0000003C           8762  MOVEA_immediate_add              CMP.L             #match_MOVEA_imm_add,D1                       ;check if immediate address
00006B9E  6700 043A               8763                                   BEQ               MOVEA_immediate_add_out                 ;if equal go to immediate add sub routine
00006BA2  6600 CABE               8764                                   BNE               ERROR                                   ;if not equal go to error mesage sub routine
00006BA6                          8765  
00006BA6                          8766  
00006BA6                          8767  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00006BA6                          8768                                   
00006BA6                          8769                              
00006BA6                          8770  ;-----------------------------------Data Register Direct--------------------------------
00006BA6  C4BC 0000003F           8771  MOVEA_Dn_reg                AND.L              #mask_MOVEA_ea_reg_and_mode,D2     ;load the mask into D2 for the mode and the register
00006BAC  B4BC 00000000           8772                              CMP.L              #match_MOVEA_D0,D2              ;check to see in the register is 0
00006BB2  6600 0006               8773                              BNE                MOVEA_rD1                       ;if not go check register 1
00006BB6  6700 0064               8774                              BEQ                MOVEA_D0_out                    ;if equal go to output subroutine
00006BBA                          8775  
00006BBA  B4BC 00000001           8776  MOVEA_rD1                   CMP.L              #match_MOVEA_D1,D2              ;check to see in the register is 1
00006BC0  6600 0006               8777                              BNE                MOVEA_rD2                       ;if not go check register 2
00006BC4  6700 0062               8778                              BEQ                MOVEA_D1_out                    ;if equal go to output subroutine
00006BC8                          8779  
00006BC8  B4BC 00000002           8780  MOVEA_rD2                   CMP.L              #match_MOVEA_D2,D2              ;check to see in the register is 2
00006BCE  6600 0006               8781                              BNE                MOVEA_rD3                       ;if not go check register 3
00006BD2  6700 0060               8782                              BEQ                MOVEA_D2_out                    ;if equal go to output subroutine
00006BD6                          8783  
00006BD6  B4BC 00000003           8784  MOVEA_rD3                   CMP.L              #match_MOVEA_D3,D2              ;check to see in the register is 3
00006BDC  6600 0006               8785                              BNE                MOVEA_rD4                       ;if not go check register 4
00006BE0  6700 005E               8786                              BEQ                MOVEA_D3_out                    ;if equal go to output subroutine
00006BE4                          8787  
00006BE4  B4BC 00000004           8788  MOVEA_rD4                   CMP.L              #match_MOVEA_D4,D2              ;check to see in the register is 4
00006BEA  6600 0006               8789                              BNE                MOVEA_rD5                       ;if not go check register 5
00006BEE  6700 005C               8790                              BEQ                MOVEA_D4_out                    ;if equal go to output subroutine
00006BF2                          8791  
00006BF2  B4BC 00000005           8792  MOVEA_rD5                   CMP.L              #match_MOVEA_D5,D2              ;check to see in the register is 5
00006BF8  6600 0006               8793                              BNE                MOVEA_rD6                       ;if not go check register 6
00006BFC  6700 005A               8794                              BEQ                MOVEA_D5_out                    ;if equal go to output subroutine
00006C00                          8795  
00006C00  B4BC 00000006           8796  MOVEA_rD6                   CMP.L              #match_MOVEA_D6,D2              ;check to see in the register is 6
00006C06  6600 0006               8797                              BNE                MOVEA_rD7                       ;if not go check register 7
00006C0A  6700 0058               8798                              BEQ                MOVEA_D6_out                    ;if equal go to output subroutine
00006C0E                          8799  
00006C0E  B4BC 00000007           8800  MOVEA_rD7                   CMP.L              #match_MOVEA_D7,D2              ;check to see in the register is 7
00006C14  6700 005A               8801                              BEQ                MOVEA_D7_out                    ;if equal go to output subroutine
00006C18  6600 CA48               8802                              BNE                ERROR                           ;if not equal, got to error message
00006C1C                          8803  
00006C1C                          8804  
00006C1C                          8805  ;--------------------Data Register Direct Output-----------------------
00006C1C  227C 00008965           8806  MOVEA_D0_out                MOVE.L          #ea_D0,A1                 ;load string constant into A1
00006C22  4EB9 0000700A           8807                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006C28                          8808  
00006C28  227C 00008968           8809  MOVEA_D1_out                MOVE.L          #ea_D1,A1                 ;load string constant into A1
00006C2E  4EB9 0000700A           8810                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006C34                          8811  
00006C34                          8812  
00006C34  227C 0000896B           8813  MOVEA_D2_out                MOVE.L          #ea_D2,A1                 ;load string constant into A1
00006C3A  4EB9 0000700A           8814                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006C40                          8815  
00006C40  227C 0000896E           8816  MOVEA_D3_out                MOVE.L          #ea_D3,A1                 ;load string constant into A1
00006C46  4EB9 0000700A           8817                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006C4C                          8818  
00006C4C                          8819  
00006C4C  227C 00008971           8820  MOVEA_D4_out                MOVE.L          #ea_D4,A1                 ;load string constant into A1
00006C52  4EB9 0000700A           8821                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006C58                          8822  
00006C58                          8823  
00006C58  227C 00008974           8824  MOVEA_D5_out                MOVE.L          #ea_D5,A1                 ;load string constant into A1
00006C5E  4EB9 0000700A           8825                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006C64                          8826  
00006C64                          8827  
00006C64  227C 00008977           8828  MOVEA_D6_out                MOVE.L          #ea_D6,A1                 ;load string constant into A1
00006C6A  4EB9 0000700A           8829                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006C70                          8830  
00006C70                          8831  
00006C70  227C 0000897A           8832  MOVEA_D7_out                MOVE.L          #ea_D7,A1                 ;load string constant into A1
00006C76  4EB9 0000700A           8833                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006C7C                          8834  
00006C7C                          8835  
00006C7C                          8836  ;------------------Address Register Direct-----------------------
00006C7C  B4BC 00000008           8837  MOVEA_An_reg                CMP.L           #match_MOVEA_A0,D2                ;check reg is equal to 0
00006C82  6600 0006               8838                              BNE             MOVEA_rA1                         ;if not try reg 1
00006C86  6700 0134               8839                              BEQ             MOVEA_An_indir_reg0_out           ;if equal go to output subroutine
00006C8A                          8840  
00006C8A  B4BC 00000009           8841  MOVEA_rA1                   CMP.L           #match_MOVEA_A1,D2                ;check reg is equal to 1
00006C90  6600 0006               8842                              BNE             MOVEA_rA2                         ;if not try reg 2
00006C94  6700 0132               8843                              BEQ             MOVEA_An_indir_reg1_out           ;if equal go to output subroutine
00006C98                          8844  
00006C98  B4BC 0000000A           8845  MOVEA_rA2                   CMP.L           #match_MOVEA_A2,D2                ;check reg is equal to 2
00006C9E  6600 0006               8846                              BNE             MOVEA_rA3                         ;if not try reg 3
00006CA2  6700 0130               8847                              BEQ             MOVEA_An_indir_reg2_out           ;if equal go to output subroutine
00006CA6                          8848  
00006CA6  B4BC 0000000B           8849  MOVEA_rA3                   CMP.L           #match_MOVEA_A3,D2                ;check reg is equal to 3
00006CAC  6600 0006               8850                              BNE             MOVEA_rA4                         ;if not try reg 4
00006CB0  6700 012E               8851                              BEQ             MOVEA_An_indir_reg3_out           ;if equal go to output subroutine
00006CB4                          8852  
00006CB4  B4BC 0000000C           8853  MOVEA_rA4                   CMP.L           #match_MOVEA_A4,D2                ;check reg is equal to 4
00006CBA  6600 0006               8854                              BNE             MOVEA_rA5                         ;if not try reg 5
00006CBE  6700 012C               8855                              BEQ             MOVEA_An_indir_reg4_out           ;if equal go to output subroutine
00006CC2                          8856              
00006CC2  B4BC 0000000D           8857  MOVEA_rA5                   CMP.L           #match_MOVEA_A5,D2                ;check reg is equal to 5
00006CC8  6600 0006               8858                              BNE             MOVEA_rA6                         ;if not try reg 6
00006CCC  6700 012A               8859                              BEQ             MOVEA_An_indir_reg5_out           ;if equal go to output subroutine
00006CD0                          8860  
00006CD0  B4BC 0000000E           8861  MOVEA_rA6                   CMP.L           #match_MOVEA_A6,D2                ;check reg is equal to 6
00006CD6  6600 0006               8862                              BNE             MOVEA_rA7                         ;if not try reg 7
00006CDA  6700 0128               8863                              BEQ             MOVEA_An_indir_reg6_out           ;if equal go to output subroutine
00006CDE                          8864  
00006CDE  B4BC 0000000F           8865  MOVEA_rA7                   CMP.L           #match_MOVEA_A7,D2                ;check reg is equal to 7
00006CE4  6700 012A               8866                              BEQ             MOVEA_An_indir_reg7_out           ;if equal go to output subroutine
00006CE8  6600 C978               8867                              BNE             ERROR                             ;if not equal to an addresssing mode, pritn error
00006CEC                          8868  
00006CEC                          8869  
00006CEC                          8870  ;--------------------Address Register Direct Output-----------------------
00006CEC  227C 0000897D           8871  MOVEA_A0_out          MOVE.L          #ea_A0,A1             ;load string constant into A1
00006CF2  4EB9 0000700A           8872                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006CF8                          8873                                  
00006CF8  227C 00008980           8874  MOVEA_A1_out          MOVE.L          #ea_A1,A1             ;load string constant into A1
00006CFE  4EB9 0000700A           8875                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006D04                          8876                                  
00006D04  227C 00008983           8877  MOVEA_A2_out          MOVE.L          #ea_A2,A1             ;load string constant into A1
00006D0A  4EB9 0000700A           8878                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006D10                          8879                                  
00006D10  227C 00008986           8880  MOVEA_A3_out          MOVE.L          #ea_A3,A1             ;load string constant into A1
00006D16  4EB9 0000700A           8881                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006D1C                          8882  
00006D1C  227C 00008989           8883  MOVEA_A4_out          MOVE.L          #ea_A4,A1             ;load string constant into A1
00006D22  4EB9 0000700A           8884                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006D28                          8885  
00006D28  227C 0000898C           8886  MOVEA_A5_out          MOVE.L          #ea_A5,A1             ;load string constant into A1
00006D2E  4EB9 0000700A           8887                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006D34                          8888  
00006D34  227C 0000898F           8889  MOVEA_A6_out          MOVE.L          #ea_A6,A1             ;load string constant into A1
00006D3A  4EB9 0000700A           8890                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006D40                          8891  
00006D40  227C 00008992           8892  MOVEA_A7_out          MOVE.L          #ea_A7,A1             ;load string constant into A1
00006D46  4EB9 0000700A           8893                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006D4C                          8894  
00006D4C                          8895  
00006D4C                          8896  ;------------------Address Register Indirect-----------------------
00006D4C  B4BC 00000010           8897  MOVEA_An_indir_reg       CMP.L           #match_MOVEA_An_indir_r0,D2           ;check reg is equal to 0
00006D52  6600 0006               8898                           BNE             MOVEA_An_indir_reg1                   ;if not try reg 1
00006D56  6700 0064               8899                           BEQ             MOVEA_An_indir_reg0_out               ;if equal go to output subroutine
00006D5A                          8900  
00006D5A  B4BC 00000011           8901  MOVEA_An_indir_reg1      CMP.L           #match_MOVEA_An_indir_r1,D2           ;check reg is equal to 1
00006D60  6600 0006               8902                           BNE             MOVEA_An_indir_reg2                   ;if not try reg 2
00006D64  6700 0062               8903                           BEQ             MOVEA_An_indir_reg1_out               ;if equal go to output subroutine
00006D68                          8904  
00006D68  B4BC 00000012           8905  MOVEA_An_indir_reg2      CMP.L           #match_MOVEA_An_indir_r2,D2           ;check reg is equal to 2
00006D6E  6600 0006               8906                           BNE             MOVEA_An_indir_reg3                   ;if not try reg 3
00006D72  6700 0060               8907                           BEQ             MOVEA_An_indir_reg2_out               ;if equal go to output subroutine
00006D76                          8908  
00006D76  B4BC 00000013           8909  MOVEA_An_indir_reg3      CMP.L           #match_MOVEA_An_indir_r3,D2           ;check reg is equal to 3
00006D7C  6600 0006               8910                           BNE             MOVEA_An_indir_reg4                   ;if not try reg 4
00006D80  6700 005E               8911                           BEQ             MOVEA_An_indir_reg3_out               ;if equal go to output subroutine
00006D84                          8912      
00006D84  B4BC 00000014           8913  MOVEA_An_indir_reg4      CMP.L           #match_MOVEA_An_indir_r4,D2           ;check reg is equal to 4
00006D8A  6600 0006               8914                           BNE             MOVEA_An_indir_reg5                   ;if not try reg 5
00006D8E  6700 005C               8915                           BEQ             MOVEA_An_indir_reg4_out               ;if equal go to output subroutine
00006D92                          8916          
00006D92  B4BC 00000015           8917  MOVEA_An_indir_reg5      CMP.L           #match_MOVEA_An_indir_r5,D2           ;check reg is equal to 5
00006D98  6600 0006               8918                           BNE             MOVEA_An_indir_reg6                   ;if not try reg 6
00006D9C  6700 005A               8919                           BEQ             MOVEA_An_indir_reg5_out               ;if equal go to output subroutine
00006DA0                          8920  
00006DA0  B4BC 00000016           8921  MOVEA_An_indir_reg6      CMP.L           #match_MOVEA_An_indir_r6,D2           ;check reg is equal to 6
00006DA6  6600 0006               8922                           BNE             MOVEA_An_indir_reg7                   ;if not try reg 7
00006DAA  6700 0058               8923                           BEQ             MOVEA_An_indir_reg6_out               ;if equal go to output subroutine
00006DAE                          8924  
00006DAE  B4BC 00000017           8925  MOVEA_An_indir_reg7      CMP.L           #match_MOVEA_An_indir_r7,D2           ;check reg is equal to 7
00006DB4  6700 005A               8926                           BEQ             MOVEA_An_indir_reg7_out               ;if equal go to output subroutine
00006DB8  6600 C8A8               8927                           BNE             ERROR                                 ;if not equal to an addresssing mode, pritn error
00006DBC                          8928  
00006DBC                          8929  
00006DBC                          8930  ;--------------------Address Register Indirect Output-----------------------
00006DBC  227C 000089A5           8931  MOVEA_An_indir_reg0_out         MOVE.L      #ea_indir_A0,A1               ;load string constant into A1
00006DC2  4EB9 0000700A           8932                                  JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006DC8                          8933  
00006DC8  227C 000089AA           8934  MOVEA_An_indir_reg1_out         MOVE.L      #ea_indir_A1,A1               ;load string constant into A1
00006DCE  4EB9 0000700A           8935                                  JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006DD4                          8936  
00006DD4  227C 000089AF           8937  MOVEA_An_indir_reg2_out         MOVE.L      #ea_indir_A2,A1               ;load string constant into A1
00006DDA  4EB9 0000700A           8938                                  JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006DE0                          8939  
00006DE0  227C 000089B4           8940  MOVEA_An_indir_reg3_out         MOVE.L      #ea_indir_A3,A1               ;load string constant into A1
00006DE6  4EB9 0000700A           8941                                  JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006DEC                          8942  
00006DEC  227C 000089B9           8943  MOVEA_An_indir_reg4_out         MOVE.L      #ea_indir_A4,A1               ;load string constant into A1
00006DF2  4EB9 0000700A           8944                                  JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006DF8                          8945  
00006DF8  227C 000089BE           8946  MOVEA_An_indir_reg5_out         MOVE.L      #ea_indir_A5,A1               ;load string constant into A1
00006DFE  4EB9 0000700A           8947                                  JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006E04                          8948  
00006E04  227C 000089C3           8949  MOVEA_An_indir_reg6_out         MOVE.L      #ea_indir_A6,A1               ;load string constant into A1
00006E0A  4EB9 0000700A           8950                                  JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006E10                          8951                                          
00006E10  227C 000089C8           8952  MOVEA_An_indir_reg7_out         MOVE.L      #ea_indir_A7,A1               ;load string constant into A1
00006E16  4EB9 0000700A           8953                                  JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006E1C                          8954  
00006E1C                          8955  
00006E1C                          8956  ;------------------Address Register Indirect with Post Increment-----------------------
00006E1C  B4BC 00000018           8957  MOVEA_An_indir_postinc_reg        CMP.L      #match_MOVEA_An_indir_postinc_r0,D2        ;check reg is equal to 0
00006E22  6600 0006               8958                                    BNE        MOVEA_An_indir_postinc_reg1                ;if not try reg 1
00006E26  6700 0064               8959                                    BEQ        MOVEA_An_indir_postinc_reg0_out            ;if equal go to output subroutine
00006E2A                          8960  
00006E2A  B4BC 00000019           8961  MOVEA_An_indir_postinc_reg1       CMP.L      #match_MOVEA_An_indir_postinc_r1,D2        ;check reg is equal to 1
00006E30  6600 0006               8962                                    BNE        MOVEA_An_indir_postinc_reg2                ;if not try reg 2
00006E34  6700 0062               8963                                    BEQ        MOVEA_An_indir_postinc_reg1_out            ;if equal go to output subroutine
00006E38                          8964  
00006E38  B4BC 0000001A           8965  MOVEA_An_indir_postinc_reg2       CMP.L      #match_MOVEA_An_indir_postinc_r2,D2        ;check reg is equal to 2
00006E3E  6600 0006               8966                                    BNE        MOVEA_An_indir_postinc_reg3                ;if not try reg 3
00006E42  6700 0060               8967                                    BEQ        MOVEA_An_indir_postinc_reg2_out            ;if equal go to output subroutine
00006E46                          8968  
00006E46  B4BC 0000001B           8969  MOVEA_An_indir_postinc_reg3       CMP.L      #match_MOVEA_An_indir_postinc_r3,D2        ;check reg is equal to 3
00006E4C  6600 0006               8970                                    BNE        MOVEA_An_indir_postinc_reg4                ;if not try reg 4
00006E50  6700 005E               8971                                    BEQ        MOVEA_An_indir_postinc_reg3_out            ;if equal go to output subroutine
00006E54                          8972   
00006E54  B4BC 0000001C           8973  MOVEA_An_indir_postinc_reg4       CMP.L      #match_MOVEA_An_indir_postinc_r4,D2        ;check reg is equal to 4
00006E5A  6600 0006               8974                                    BNE        MOVEA_An_indir_postinc_reg5                ;if not try reg 5
00006E5E  6700 005C               8975                                    BEQ        MOVEA_An_indir_postinc_reg4_out            ;if equal go to output subroutine
00006E62                          8976  
00006E62  B4BC 0000001D           8977  MOVEA_An_indir_postinc_reg5       CMP.L      #match_MOVEA_An_indir_postinc_r5,D2        ;check reg is equal to 5
00006E68  6600 0006               8978                                    BNE        MOVEA_An_indir_postinc_reg6                ;if not try reg 6
00006E6C  6700 005A               8979                                    BEQ        MOVEA_An_indir_postinc_reg5_out            ;if equal go to output subroutine
00006E70                          8980  
00006E70  B4BC 0000001E           8981  MOVEA_An_indir_postinc_reg6       CMP.L      #match_MOVEA_An_indir_postinc_r6,D2        ;check reg is equal to 6
00006E76  6600 0006               8982                                    BNE        MOVEA_An_indir_postinc_reg7                ;if not try reg 7
00006E7A  6700 0058               8983                                    BEQ        MOVEA_An_indir_postinc_reg6_out            ;if equal go to output subroutine
00006E7E                          8984  
00006E7E  B4BC 0000001F           8985  MOVEA_An_indir_postinc_reg7       CMP.L      #match_MOVEA_An_indir_postinc_r7,D2        ;check reg is equal to 7
00006E84  6700 005A               8986                                    BEQ        MOVEA_An_indir_postinc_reg7_out            ;if equal go to output subroutine
00006E88  6600 C7D8               8987                                    BNE        ERROR                                      ;if not equal to an addresssing mode, pritn error
00006E8C                          8988  
00006E8C                          8989  
00006E8C                          8990  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00006E8C  227C 000089CD           8991  MOVEA_An_indir_postinc_reg0_out       MOVE.L        #ea_indir_postinc_A0,A1     ;load string constant into A1
00006E92  4EB9 0000700A           8992                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006E98                          8993  
00006E98                          8994  
00006E98  227C 000089D3           8995  MOVEA_An_indir_postinc_reg1_out       MOVE.L        #ea_indir_postinc_A1,A1     ;load string constant into A1
00006E9E  4EB9 0000700A           8996                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006EA4                          8997  
00006EA4  227C 000089D9           8998  MOVEA_An_indir_postinc_reg2_out       MOVE.L        #ea_indir_postinc_A2,A1     ;load string constant into A1
00006EAA  4EB9 0000700A           8999                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006EB0                          9000  
00006EB0  227C 000089DF           9001  MOVEA_An_indir_postinc_reg3_out       MOVE.L        #ea_indir_postinc_A3,A1     ;load string constant into A1
00006EB6  4EB9 0000700A           9002                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006EBC                          9003  
00006EBC  227C 000089E5           9004  MOVEA_An_indir_postinc_reg4_out       MOVE.L        #ea_indir_postinc_A4,A1     ;load string constant into A1
00006EC2  4EB9 0000700A           9005                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006EC8                          9006  
00006EC8  227C 000089EB           9007  MOVEA_An_indir_postinc_reg5_out       MOVE.L        #ea_indir_postinc_A5,A1     ;load string constant into A1
00006ECE  4EB9 0000700A           9008                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006ED4                          9009  
00006ED4  227C 000089F1           9010  MOVEA_An_indir_postinc_reg6_out       MOVE.L        #ea_indir_postinc_A6,A1     ;load string constant into A1
00006EDA  4EB9 0000700A           9011                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006EE0                          9012  
00006EE0  227C 000089F7           9013  MOVEA_An_indir_postinc_reg7_out       MOVE.L        #ea_indir_postinc_A7,A1     ;load string constant into A1
00006EE6  4EB9 0000700A           9014                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006EEC                          9015  
00006EEC                          9016  
00006EEC                          9017  ;------------------Address Register Indirect with Pre Decrement-----------------------
00006EEC  B4BC 00000020           9018  MOVEA_An_indir_predec              CMP.L      #match_MOVEA_An_indir_predec_reg0,D2       ;check reg is equal to 0
00006EF2  6600 0006               9019                                     BNE        MOVEA_An_indir_predec_reg1                 ;if not try reg 1
00006EF6  6700 0064               9020                                     BEQ        MOVEA_An_indir_predec_reg0_out             ;if equal go to output subroutine
00006EFA                          9021  
00006EFA  B4BC 00000021           9022  MOVEA_An_indir_predec_reg1         CMP.L      #match_MOVEA_An_indir_predec_reg1,D2       ;check reg is equal to 1
00006F00  6600 0006               9023                                     BNE        MOVEA_An_indir_predec_reg2                 ;if not try reg 2
00006F04  6700 0062               9024                                     BEQ        MOVEA_An_indir_predec_reg1_out             ;if equal go to output subroutine
00006F08                          9025  
00006F08  B4BC 00000022           9026  MOVEA_An_indir_predec_reg2         CMP.L      #match_MOVEA_An_indir_predec_reg2,D2       ;check reg is equal to 2
00006F0E  6600 0006               9027                                     BNE        MOVEA_An_indir_predec_reg3                 ;if not try reg 3
00006F12  6700 0060               9028                                     BEQ        MOVEA_An_indir_predec_reg2_out             ;if equal go to output subroutine
00006F16                          9029  
00006F16  B4BC 00000023           9030  MOVEA_An_indir_predec_reg3         CMP.L      #match_MOVEA_An_indir_predec_reg3,D2       ;check reg is equal to 3
00006F1C  6600 0006               9031                                     BNE        MOVEA_An_indir_predec_reg4                 ;if not try reg 4
00006F20  6700 005E               9032                                     BEQ        MOVEA_An_indir_predec_reg3_out             ;if equal go to output subroutine
00006F24                          9033  
00006F24  B4BC 00000024           9034  MOVEA_An_indir_predec_reg4         CMP.L      #match_MOVEA_An_indir_predec_reg4,D2       ;check reg is equal to 4
00006F2A  6600 0006               9035                                     BNE        MOVEA_An_indir_predec_reg5                 ;if not try reg 5
00006F2E  6700 005C               9036                                     BEQ        MOVEA_An_indir_predec_reg4_out             ;if equal go to output subroutine
00006F32                          9037  
00006F32  B4BC 00000025           9038  MOVEA_An_indir_predec_reg5         CMP.L      #match_MOVEA_An_indir_predec_reg5,D2       ;check reg is equal to 5
00006F38  6600 0006               9039                                     BNE        MOVEA_An_indir_predec_reg6                 ;if not try reg 6
00006F3C  6700 005A               9040                                     BEQ        MOVEA_An_indir_predec_reg5_out             ;if equal go to output subroutine
00006F40                          9041  
00006F40  B4BC 00000026           9042  MOVEA_An_indir_predec_reg6         CMP.L      #match_MOVEA_An_indir_predec_reg6,D2       ;check reg is equal to 6
00006F46  6600 0006               9043                                     BNE        MOVEA_An_indir_predec_reg7                 ;if not try reg 7
00006F4A  6700 0058               9044                                     BEQ        MOVEA_An_indir_predec_reg6_out             ;if equal go to output subroutine
00006F4E                          9045  
00006F4E  B4BC 00000027           9046  MOVEA_An_indir_predec_reg7         CMP.L      #match_MOVEA_An_indir_predec_reg7,D2       ;check reg is equal to 7
00006F54  6700 005A               9047                                     BEQ        MOVEA_An_indir_predec_reg7_out             ;if equal go to output subroutine
00006F58  6600 C708               9048                                     BNE        ERROR                                      ;if not equal to an addresssing mode, pritn error
00006F5C                          9049  
00006F5C                          9050  
00006F5C                          9051  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00006F5C  227C 000089FD           9052  MOVEA_An_indir_predec_reg0_out      MOVE.L      #ea_indir_predec_A0,A1       ;load string constant into A1
00006F62  4EB9 0000700A           9053                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006F68                          9054                                              
00006F68  227C 00008A03           9055  MOVEA_An_indir_predec_reg1_out      MOVE.L      #ea_indir_predec_A1,A1       ;load string constant into A1
00006F6E  4EB9 0000700A           9056                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006F74                          9057  
00006F74  227C 00008A09           9058  MOVEA_An_indir_predec_reg2_out      MOVE.L      #ea_indir_predec_A2,A1       ;load string constant into A1
00006F7A  4EB9 0000700A           9059                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006F80                          9060  
00006F80  227C 00008A0F           9061  MOVEA_An_indir_predec_reg3_out      MOVE.L      #ea_indir_predec_A3,A1       ;load string constant into A1
00006F86  4EB9 0000700A           9062                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006F8C                          9063  
00006F8C  227C 00008A15           9064  MOVEA_An_indir_predec_reg4_out      MOVE.L      #ea_indir_predec_A4,A1       ;load string constant into A1
00006F92  4EB9 0000700A           9065                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006F98                          9066  
00006F98  227C 00008A1B           9067  MOVEA_An_indir_predec_reg5_out      MOVE.L      #ea_indir_predec_A5,A1       ;load string constant into A1
00006F9E  4EB9 0000700A           9068                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006FA4                          9069  
00006FA4  227C 00008A21           9070  MOVEA_An_indir_predec_reg6_out      MOVE.L      #ea_indir_predec_A6,A1       ;load string constant into A1
00006FAA  4EB9 0000700A           9071                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006FB0                          9072  
00006FB0  227C 00008A27           9073  MOVEA_An_indir_predec_reg7_out      MOVE.L      #ea_indir_predec_A7,A1       ;load string constant into A1
00006FB6  4EB9 0000700A           9074                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006FBC                          9075          
00006FBC                          9076  ;------------------Absolute Addressing Output-----------------------
00006FBC  22FC 00008A37           9077  MOVEA_abs_add_word_out          MOVE.L          #ea_$,(A1)+            ;load $ for hex and increment A1
00006FC2  22C5                    9078                                  MOVE.L          D5,(A1)+               ;load address                  
00006FC4  4CDF 7CBE               9079                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006FC8  4E75                    9080                                  RTS                                    ;return to subroutine
00006FCA                          9081                                             
00006FCA                          9082  
00006FCA  2A18                    9083  MOVEA_abs_add_long_out          MOVE.L          (A0)+,D5               ;pull the next long instruction that holds the address
00006FCC  22FC 00008A37           9084                                  MOVE.L          #ea_$,(A1)+            ;load $ for hex and increment A1
00006FD2  22C5                    9085                                  MOVE.L          D5,(A1)+               ;load address                  
00006FD4  4CDF 7CBE               9086                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006FD8  4E75                    9087                                  RTS                                    ;return to subroutine    
00006FDA                          9088  
00006FDA                          9089                                          
00006FDA                          9090  ;---------------Immediate Addresing---------------------------
00006FDA  2A18                    9091  MOVEA_immediate_add_out         MOVE.L      (A0)+,D5                        ;capture the immediate address
00006FDC  BCBC 000000FC           9092                                  CMP.L           #match_MOVEA_imm_add_word,D6          ;check to see if need to pull word
00006FE2  2A18                    9093                                  MOVE.L          (A0)+,D5                        ;pull the word
00006FE4  6700 0006               9094                                  BEQ             MOVEA_imm_add_w                 ;if equal go pull word    
00006FE8  6600 0010               9095                                  BNE             MOVEA_imm_add_l                 ;if not equal, go check long
00006FEC                          9096                                           
00006FEC  22FC 00008A37           9097  MOVEA_imm_add_w                 MOVE.L      #ea_$,(A1)+                     ;load the $
00006FF2  32C5                    9098                                  MOVE.W      D5,(A1)+                        ;load the word address                           
00006FF4  4EB9 0000700A           9099                                  JSR             MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006FFA                          9100                                           
00006FFA  2A18                    9101  MOVEA_imm_add_l                 MOVE.L      (A0)+,D5                        ;pull the long and increase the pointer
00006FFC  22FC 00008A37           9102                                  MOVE.L      #ea_$,(A1)+                     ;load the $
00007002  2245                    9103                                  MOVE.L      D5,A1                           ;move to A1
00007004  4EB9 0000700A           9104                                  JSR         MOVEA_determine_second_op       ;jump to subroutine to determine second operand
0000700A                          9105                                                
0000700A                          9106  
0000700A                          9107  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
0000700A  4282                    9108  MOVEA_determine_second_op       CLR.L       D2              ;clear D2 
0000700C  C4BC 00000E00           9109                                  AND.L       #mask_MOVEA_An_reg,D2       ;load the mask for the register into D2, masks bit 11-9
00007012                          9110                                                  
00007012  B4BC 00000000           9111  MOVEA_reg0                      CMP.L       #match_MOVEA_reg0,D2        ;check to see if reg equal 0
00007018  6600 0006               9112                                  BNE     MOVEA_reg1          ;if not equal got check reg 1
0000701C  6700 0064               9113                                  BEQ     MOVEA_reg0_out          ;if equal go to output
00007020                          9114                                                  
00007020  B4BC 00000200           9115  MOVEA_reg1                      CMP.L       #match_MOVEA_reg1,D2        ;check to see if reg equal 1
00007026  6600 0006               9116                                  BNE     MOVEA_reg2          ;if not equal got check reg 2
0000702A  6700 0062               9117                                  BEQ     MOVEA_reg1_out          ;if equal go to output
0000702E                          9118  
0000702E  B4BC 00000400           9119  MOVEA_reg2                      CMP.L       #match_MOVEA_reg2,D2        ;check to see if reg equal 2
00007034  6600 0006               9120                                  BNE     MOVEA_reg3          ;if not equal got check reg 3
00007038  6700 0060               9121                                  BEQ     MOVEA_reg2_out          ;if equal go to output
0000703C                          9122  
0000703C  B4BC 00000600           9123  MOVEA_reg3                      CMP.L       #match_MOVEA_reg3,D2        ;check to see if reg equal 3
00007042  6600 0006               9124                                  BNE     MOVEA_reg4          ;if not equal got check reg 4
00007046  6700 005E               9125                                  BEQ     MOVEA_reg3_out          ;if equal go to output
0000704A                          9126                                                  
0000704A  B4BC 00000800           9127  MOVEA_reg4                      CMP.L       #match_MOVEA_reg4,D2        ;check to see if reg equal 4
00007050  6600 0006               9128                                  BNE     MOVEA_reg5          ;if not equal got check reg 5
00007054  6700 005C               9129                                  BEQ     MOVEA_reg4_out          ;if equal go to output
00007058                          9130  
00007058  B4BC 00000A00           9131  MOVEA_reg5                      CMP.L       #match_MOVEA_reg5,D2        ;check to see if reg equal 5
0000705E  6600 0006               9132                                  BNE     MOVEA_reg6          ;if not equal got check reg 6
00007062  6700 005A               9133                                  BEQ     MOVEA_reg5_out          ;if equal go to output
00007066                          9134  
00007066  B4BC 00000C00           9135  MOVEA_reg6                      CMP.L       #match_MOVEA_reg6,D2        ;check to see if reg equal 6
0000706C  6600 0006               9136                                  BNE     MOVEA_reg7          ;if not equal got check reg 7
00007070  6700 0058               9137                                  BEQ     MOVEA_reg6_out          ;if equal go to output          
00007074                          9138  
00007074  B4BC 00000E00           9139  MOVEA_reg7                      CMP.L       #match_MOVEA_reg7,D2        ;check to see if reg equal 7
0000707A  6700 005A               9140                                  BEQ     MOVEA_reg7_out          ;if equal go to output
0000707E  6600 C5E2               9141                                  BNE             ERROR                           ;if not equal to an addresssing mode, pritn error
00007082                          9142                                  
00007082                          9143  
00007082                          9144  ;--------------------Data Output-----------------------
00007082  227C 0000897D           9145  MOVEA_reg0_out                  MOVE.L      #ea_A0,A1       ;load string constant into A1
00007088  4CDF 7CBE               9146                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000708C  4E75                    9147                                  RTS
0000708E                          9148                                              
0000708E  227C 00008980           9149  MOVEA_reg1_out                  MOVE.L      #ea_A1,A1       ;load string constant into A1
00007094  4CDF 7CBE               9150                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007098  4E75                    9151                                  RTS
0000709A                          9152                                              
0000709A  227C 00008983           9153  MOVEA_reg2_out                  MOVE.L      #ea_A2,A1       ;load string constant into A1
000070A0  4CDF 7CBE               9154                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000070A4  4E75                    9155                                  RTS
000070A6                          9156                                              
000070A6  227C 00008986           9157  MOVEA_reg3_out                  MOVE.L      #ea_A3,A1       ;load string constant into A1
000070AC  4CDF 7CBE               9158                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000070B0  4E75                    9159                                  RTS
000070B2                          9160                                              
000070B2  227C 00008989           9161  MOVEA_reg4_out                  MOVE.L      #ea_A4,A1       ;load string constant into A1
000070B8  4CDF 7CBE               9162                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000070BC  4E75                    9163                                  RTS
000070BE                          9164                                              
000070BE  227C 0000898C           9165  MOVEA_reg5_out                  MOVE.L      #ea_A5,A1       ;load string constant into A1
000070C4  4CDF 7CBE               9166                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000070C8  4E75                    9167                                  RTS
000070CA                          9168                                              
000070CA  227C 0000898F           9169  MOVEA_reg6_out                  MOVE.L      #ea_A6,A1       ;load string constant into A1
000070D0  4CDF 7CBE               9170                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000070D4  4E75                    9171                                  RTS
000070D6                          9172                                              
000070D6  227C 00008992           9173  MOVEA_reg7_out                  MOVE.L      #ea_A7,A1       ;load string constant into A1
000070DC  4CDF 7CBE               9174                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000070E0                          9175  
000070E0  =00000038               9176  mask_MOVEA_ea_mode          EQU     $0038
000070E0  =0000003F               9177  mask_MOVEA_abs_add          EQU     $003F
000070E0  =0000003F               9178  mask_MOVEA_ea_reg_and_mode      EQU     $003F
000070E0  =00000E00               9179  mask_MOVEA_An_reg           EQU     $0E00
000070E0                          9180  
000070E0  =00000000               9181  match_MOVEA_Dn              EQU     $0000
000070E0  =00000008               9182  match_MOVEA_An              EQU     $0008
000070E0  =00000010               9183  match_MOVEA_An_indir            EQU     $0010
000070E0  =00000020               9184  match_MOVEA_An_indir_predec     EQU     $0020
000070E0  =00000018               9185  match_MOVEA_An_indir_postinc        EQU     $0018
000070E0  =00000038               9186  match_MOVEA_abs_add_word        EQU     $0038
000070E0  =00000039               9187  match_MOVEA_abs_add_long        EQU     $0039
000070E0                          9188  
000070E0  =00000000               9189  match_MOVEA_D0              EQU     $0000
000070E0  =00000001               9190  match_MOVEA_D1              EQU     $0001
000070E0  =00000002               9191  match_MOVEA_D2              EQU     $0002
000070E0  =00000003               9192  match_MOVEA_D3              EQU     $0003
000070E0  =00000004               9193  match_MOVEA_D4              EQU     $0004
000070E0  =00000005               9194  match_MOVEA_D5              EQU     $0005
000070E0  =00000006               9195  match_MOVEA_D6              EQU     $0006
000070E0  =00000007               9196  match_MOVEA_D7              EQU     $0007
000070E0                          9197  
000070E0  =00000008               9198  match_MOVEA_A0              EQU     $0008
000070E0  =00000009               9199  match_MOVEA_A1              EQU     $0009
000070E0  =0000000A               9200  match_MOVEA_A2              EQU     $000A
000070E0  =0000000B               9201  match_MOVEA_A3              EQU     $000B
000070E0  =0000000C               9202  match_MOVEA_A4              EQU     $000C
000070E0  =0000000D               9203  match_MOVEA_A5              EQU     $000D
000070E0  =0000000E               9204  match_MOVEA_A6              EQU     $000E
000070E0  =0000000F               9205  match_MOVEA_A7              EQU     $000F
000070E0                          9206  
000070E0  =00000010               9207  match_MOVEA_An_indir_r0         EQU     $0010
000070E0  =00000011               9208  match_MOVEA_An_indir_r1         EQU     $0011
000070E0  =00000012               9209  match_MOVEA_An_indir_r2         EQU     $0012
000070E0  =00000013               9210  match_MOVEA_An_indir_r3         EQU     $0013
000070E0  =00000014               9211  match_MOVEA_An_indir_r4         EQU     $0014
000070E0  =00000015               9212  match_MOVEA_An_indir_r5         EQU     $0015
000070E0  =00000016               9213  match_MOVEA_An_indir_r6         EQU     $0016
000070E0  =00000017               9214  match_MOVEA_An_indir_r7         EQU     $0017
000070E0                          9215  
000070E0  =00000018               9216  match_MOVEA_An_indir_postinc_r0     EQU     $0018
000070E0  =00000019               9217  match_MOVEA_An_indir_postinc_r1     EQU     $0019
000070E0  =0000001A               9218  match_MOVEA_An_indir_postinc_r2     EQU     $001A
000070E0  =0000001B               9219  match_MOVEA_An_indir_postinc_r3     EQU     $001B
000070E0  =0000001C               9220  match_MOVEA_An_indir_postinc_r4     EQU     $001C
000070E0  =0000001D               9221  match_MOVEA_An_indir_postinc_r5     EQU     $001D
000070E0  =0000001E               9222  match_MOVEA_An_indir_postinc_r6     EQU     $001E
000070E0  =0000001F               9223  match_MOVEA_An_indir_postinc_r7     EQU     $001F
000070E0                          9224  
000070E0  =00000020               9225  match_MOVEA_An_indir_predec_reg0    EQU     $0020
000070E0  =00000021               9226  match_MOVEA_An_indir_predec_reg1    EQU     $0021
000070E0  =00000022               9227  match_MOVEA_An_indir_predec_reg2    EQU     $0022
000070E0  =00000023               9228  match_MOVEA_An_indir_predec_reg3    EQU     $0023
000070E0  =00000024               9229  match_MOVEA_An_indir_predec_reg4    EQU     $0024
000070E0  =00000025               9230  match_MOVEA_An_indir_predec_reg5    EQU     $0025
000070E0  =00000026               9231  match_MOVEA_An_indir_predec_reg6    EQU     $0026
000070E0  =00000027               9232  match_MOVEA_An_indir_predec_reg7    EQU     $0027
000070E0                          9233  
000070E0  =0000003C               9234  match_MOVEA_imm_add                           EQU           $003C
000070E0  =000000FC               9235  match_MOVEA_imm_add_word                      EQU           $00FC
000070E0  =000001FC               9236  match_MOVEA_imm_add_long                      EQU           $01FC
000070E0                          9237  
000070E0  =00000000               9238  match_MOVEA_reg0            EQU     $0000
000070E0  =00000200               9239  match_MOVEA_reg1            EQU     $0200
000070E0  =00000400               9240  match_MOVEA_reg2            EQU     $0400
000070E0  =00000600               9241  match_MOVEA_reg3            EQU     $0600
000070E0  =00000800               9242  match_MOVEA_reg4            EQU     $0800
000070E0  =00000A00               9243  match_MOVEA_reg5            EQU     $0A00
000070E0  =00000C00               9244  match_MOVEA_reg6            EQU     $0C00
000070E0  =00000E00               9245  match_MOVEA_reg7            EQU     $0E00
000070E0                          9246  
000070E0                          9247  
000070E0                          9248  
000070E0                          9249  
000070E0                          9250  -------------------- end include --------------------
000070E0                          9251              INCLUDE 'MOVEQ Subroutine.x68'
000070E0                          9252  
000070E0  48E7 7D3E               9253  MOVEQ_sub                        MOVEM.L           D1-D5/D7/A2-A6, -(SP)                    ;preserve the registers 
000070E4                          9254                                   
000070E4                          9255  ;------------------Determine First Operand Data--------------------------------------------------------------------
000070E4  C2BC 000000FF           9256  MOVEQ_first_operand             AND.L             #mask_MOVEQ_first_operand,D1                    ;load mask for first operand
000070EA  2608                    9257                                  MOVE.L            A0,D3                                     ;pull the data
000070EC  227C 00008A39           9258                                  MOVE.L            #ea_lb,A1                                 ;load the # sign into string register
000070F2  2243                    9259                                  MOVE.L            D3,A1                                     ;move the data into A1
000070F4  4EB9 000070FA           9260                                  JSR               MOVEQ_second_operand
000070FA                          9261  
000070FA  C2BC 00000E00           9262  MOVEQ_second_operand            AND.L             #mask_MOVEQ_second_op_Dn,D1                     ;move the mask to D1
00007100                          9263                                   
00007100                          9264  ;-----------------------------------Determine Second Operand Data register--------------------------------
00007100  B4BC 00000000           9265  MOVEQ_Dn_reg                    CMP.L              #match_MOVEQ_D0,D2                         ;check to see in the register is 0
00007106  6600 0006               9266                                  BNE                MOVEQ_rD1                                      ;if MOVEQ go check register 1
0000710A  6700 0064               9267                                  BEQ                MOVEQ_D0_output                                ;if equal go to output subroutine
0000710E                          9268  
0000710E  B4BC 00000200           9269  MOVEQ_rD1                       CMP.L              #match_MOVEQ_D1,D2                        ;check to see in the register is 1
00007114  6600 0006               9270                                  BNE                MOVEQ_rD2                                     ;if MOVEQ go check register 2
00007118  6700 0062               9271                                  BEQ                MOVEQ_D1_output                               ;if equal go to output subroutine
0000711C                          9272  
0000711C  B4BC 00000400           9273  MOVEQ_rD2                       CMP.L              #match_MOVEQ_D2,D2                        ;check to see in the register is 2
00007122  6600 0006               9274                                  BNE                MOVEQ_rD3                                     ;if MOVEQ go check register 3
00007126  6700 0060               9275                                  BEQ                MOVEQ_D2_output                               ;if equal go to output subroutine
0000712A                          9276  
0000712A  B4BC 00000600           9277  MOVEQ_rD3                       CMP.L              #match_MOVEQ_D3,D2                       ;check to see in the register is 3
00007130  6600 0006               9278                                  BNE                MOVEQ_rD4                                     ;if MOVEQ go check register 4
00007134  6700 005E               9279                                  BEQ                MOVEQ_D3_output                              ;if equal go to output subroutine
00007138                          9280  
00007138  B4BC 00000800           9281  MOVEQ_rD4                       CMP.L              #match_MOVEQ_D4,D2                       ;check to see in the register is 4
0000713E  6600 0006               9282                                  BNE                MOVEQ_rD5                                     ;if MOVEQ go check register 5
00007142  6700 005C               9283                                  BEQ                MOVEQ_D4_output                              ;if equal go to output subroutine
00007146                          9284  
00007146  B4BC 00000A00           9285  MOVEQ_rD5                       CMP.L              #match_MOVEQ_D5,D2                       ;check to see in the register is 5
0000714C  6600 0006               9286                                  BNE                MOVEQ_rD6                                     ;if MOVEQ go check register 6
00007150  6700 005A               9287                                  BEQ                MOVEQ_D5_output                              ;if equal go to output subroutine
00007154                          9288  
00007154  B4BC 00000C00           9289  MOVEQ_rD6                       CMP.L              #match_MOVEQ_D6,D2                       ;check to see in the register is 6
0000715A  6600 0006               9290                                  BNE                MOVEQ_rD7                                     ;if MOVEQ go check register 7
0000715E  6700 0058               9291                                  BEQ                MOVEQ_D6_output                              ;if equal go to output subroutine
00007162                          9292  
00007162  B4BC 00000E00           9293  MOVEQ_rD7                       CMP.L              #match_MOVEQ_D7,D2                       ;check to see in the register is 7
00007168  6700 005A               9294                                  BEQ                MOVEQ_D7_output                              ;if equal go to output subroutine
0000716C  6600 C4F4               9295                                  BNE                ERROR                                 ;if MOVEQ equal to an addresssing mode, pritn error
00007170                          9296                                  
00007170                          9297  ;--------------------Second Operand Data Register Output-----------------------
00007170  227C 00008965           9298  MOVEQ_D0_output             MOVE.L          #ea_D0,A1                       ;load string constant into A1
00007176  4CDF 7CBE               9299                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000717A  4E75                    9300                              RTS                                             ;return to subroutine
0000717C                          9301                                      
0000717C  227C 00008968           9302  MOVEQ_D1_output             MOVE.L          #ea_D1,A1                       ;load string constant into A1
00007182  4CDF 7CBE               9303                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007186  4E75                    9304                              RTS                                             ;return to subroutine
00007188                          9305                                      
00007188  227C 0000896B           9306  MOVEQ_D2_output             MOVE.L          #ea_D2,A1                       ;load string constant into A1
0000718E  4CDF 7CBE               9307                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007192  4E75                    9308                              RTS                                             ;return to subroutine
00007194                          9309                                      
00007194  227C 0000896E           9310  MOVEQ_D3_output             MOVE.L          #ea_D3,A1                       ;load string constant into A1
0000719A  4CDF 7CBE               9311                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000719E  4E75                    9312                              RTS                                             ;return to subroutine
000071A0                          9313                                      
000071A0  227C 00008971           9314  MOVEQ_D4_output             MOVE.L          #ea_D4,A1                       ;load string constant into A1
000071A6  4CDF 7CBE               9315                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000071AA  4E75                    9316                              RTS                                             ;return to subroutine
000071AC                          9317                                      
000071AC  227C 00008974           9318  MOVEQ_D5_output             MOVE.L          #ea_D5,A1                       ;load string constant into A1
000071B2  4CDF 7CBE               9319                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000071B6  4E75                    9320                              RTS                                             ;return to subroutine
000071B8                          9321                                      
000071B8  227C 00008977           9322  MOVEQ_D6_output             MOVE.L          #ea_D6,A1                       ;load string constant into A1
000071BE  4CDF 7CBE               9323                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000071C2  4E75                    9324                              RTS                                             ;return to subroutine
000071C4                          9325                                      
000071C4  227C 0000897A           9326  MOVEQ_D7_output             MOVE.L          #ea_D7,A1                       ;load string constant into A1
000071CA  4CDF 7CBE               9327                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000071CE  4E75                    9328                              RTS                                             ;return to subroutine
000071D0                          9329                                      
000071D0  =00000E00               9330  mask_MOVEQ_second_op_Dn           EQU             $0E00              ;mask to determine the data register for second operand
000071D0  =000000FF               9331  mask_MOVEQ_first_operand          EQU             $00FF              ;mask to determine the data to be moved to the data register
000071D0                          9332  
000071D0  =00000000               9333  match_MOVEQ_D0              EQU             $0000              ;match for data reg dir with data reg 0
000071D0  =00000200               9334  match_MOVEQ_D1              EQU             $0200              ;match for data reg dir with data reg 1
000071D0  =00000400               9335  match_MOVEQ_D2              EQU             $0400              ;match for data reg dir with data reg 2
000071D0  =00000600               9336  match_MOVEQ_D3              EQU             $0600              ;match for data reg dir with data reg 3
000071D0  =00000800               9337  match_MOVEQ_D4              EQU             $0800              ;match for data reg dir with data reg 4
000071D0  =00000A00               9338  match_MOVEQ_D5              EQU             $0A00              ;match for data reg dir with data reg 5
000071D0  =00000C00               9339  match_MOVEQ_D6              EQU             $0C00              ;match for data reg dir with data reg 6
000071D0  =00000E00               9340  match_MOVEQ_D7              EQU             $0E00              ;match for data reg dir with data reg 7
000071D0                          9341  
000071D0                          9342  
000071D0                          9343  
000071D0                          9344  
000071D0                          9345  
000071D0                          9346  
000071D0                          9347  
000071D0                          9348  -------------------- end include --------------------
000071D0                          9349              INCLUDE 'NOT Subroutine.x68'
000071D0                          9350  
000071D0                          9351  
000071D0  48E7 7D3E               9352  NOT_sub                          MOVEM.L           D1-D5/D7/A2-A6, -(SP)                     ;preserve the registers,\ 
000071D4  C2BC 00000038           9353                                   AND.L             #mask_NOT_ea_mode,D1                      ;move the mask to D1
000071DA                          9354  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
000071DA  B2BC 00000000           9355  NOT_data_reg_dir                 CMP.L             #match_NOT_Dn,D1                          ;check to see if mode is data reg direct
000071E0  6600 0006               9356                                   BNE               NOT_An_indir                                  ;if not, go check add reg dir
000071E4  6700 0050               9357                                   BEQ               NOT_Dn_reg                                    ;if equal go figure out the register
000071E8                          9358  
000071E8  B2BC 00000010           9359  NOT_An_indir                     CMP.L             #match_NOT_An_indir,D1                    ;check to see if mode is add reg indir
000071EE  6600 0014               9360                                   BNE               NOT_An_indir_predec                           ;if not, go check add reg indir predec 
000071F2  6700 011A               9361                                   BEQ               NOT_An_indir_reg                              ;if equal go figure out the register           
000071F6                          9362            
000071F6  B2BC 00000020           9363  NOT_An_indir_postinc             CMP.L             #match_NOT_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
000071FC  6600 0006               9364                                   BNE               NOT_An_indir_predec                           ;if not go check add reg indir/predec
00007200  6700 01DC               9365                                   BEQ               NOT_An_indir_postinc_reg                      ;if equal go figure out the register
00007204                          9366                        
00007204  B2BC 00000018           9367  NOT_An_indir_predec              CMP.L             #match_NOT_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
0000720A  6600 0006               9368                                   BNE               NOT_abs_add_word                              ;if not go check abs add word
0000720E  6700 029C               9369                                   BEQ               NOT_An_indir_predec_reg                       ;if equal go figure out the register
00007212                          9370  
00007212  C4BC 0000003F           9371  NOT_abs_add_word                 AND.L             #mask_NOT_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
00007218                          9372                                   
00007218  B4BC 00000039           9373                                   CMP.L             #match_NOT_abs_add_word,D2                ;check if abs add word
0000721E  2A18                    9374                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00007220  6600 0006               9375                                   BNE               NOT_abs_add_long                              ;if not go check abs add long
00007224  6700 0356               9376                                   BEQ               NOT_abs_add_word_out                          ;if equal go to output
00007228                          9377    
00007228  B4BC 0000003C           9378  NOT_abs_add_long                 CMP.L             #match_NOT_abs_add_long,D2                ;check to see if abs add long
0000722E  6700 035A               9379                                   BEQ               NOT_abs_add_long_out                          ;if equal go to output
00007232  6600 C42E               9380                                   BNE               ERROR                                     ;if not equal to an addresssing mode, pritn error
00007236                          9381                               
00007236                          9382  
00007236                          9383  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00007236                          9384  ;-----------------------------------Data Register Direct--------------------------------
00007236  4242                    9385  NOT_Dn_reg                      CLR                D2                                      ;make sure D2 is empty
00007238  C4BC 0000003F           9386                                  AND.L              #mask_NOT_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
0000723E  B4BC 00000000           9387                                  CMP.L              #match_NOT_D0,D2                         ;check to see in the register is 0
00007244  6600 0006               9388                                  BNE                NOT_rD1                                      ;if not go check register 1
00007248  6700 0064               9389                                  BEQ                NOT_D0_output                                ;if equal go to output subroutine
0000724C                          9390  
0000724C  B4BC 00000001           9391  NOT_rD1                         CMP.L              #match_NOT_D1,D2                        ;check to see in the register is 1
00007252  6600 0006               9392                                  BNE                NOT_rD2                                     ;if not go check register 2
00007256  6700 0062               9393                                  BEQ                NOT_D1_output                               ;if equal go to output subroutine
0000725A                          9394  
0000725A  B4BC 00000002           9395  NOT_rD2                         CMP.L              #match_NOT_D2,D2                        ;check to see in the register is 2
00007260  6600 0006               9396                                  BNE                NOT_rD3                                     ;if not go check register 3
00007264  6700 0060               9397                                  BEQ                NOT_D2_output                               ;if equal go to output subroutine
00007268                          9398  
00007268  B4BC 00000003           9399  NOT_rD3                         CMP.L              #match_NOT_D3,D2                       ;check to see in the register is 3
0000726E  6600 0006               9400                                  BNE                NOT_rD4                                     ;if not go check register 4
00007272  6700 005E               9401                                  BEQ                NOT_D3_output                              ;if equal go to output subroutine
00007276                          9402  
00007276  B4BC 00000004           9403  NOT_rD4                         CMP.L              #match_NOT_D4,D2                       ;check to see in the register is 4
0000727C  6600 0006               9404                                  BNE                NOT_rD5                                     ;if not go check register 5
00007280  6700 005C               9405                                  BEQ                NOT_D4_output                              ;if equal go to output subroutine
00007284                          9406  
00007284  B4BC 00000005           9407  NOT_rD5                         CMP.L              #match_NOT_D5,D2                       ;check to see in the register is 5
0000728A  6600 0006               9408                                  BNE                NOT_rD6                                     ;if not go check register 6
0000728E  6700 005A               9409                                  BEQ                NOT_D5_output                              ;if equal go to output subroutine
00007292                          9410  
00007292  B4BC 00000006           9411  NOT_rD6                         CMP.L              #match_NOT_D6,D2                       ;check to see in the register is 6
00007298  6600 0006               9412                                  BNE                NOT_rD7                                     ;if not go check register 7
0000729C  6700 0058               9413                                  BEQ                NOT_D6_output                              ;if equal go to output subroutine
000072A0                          9414  
000072A0  B4BC 00000007           9415  NOT_rD7                         CMP.L              #match_NOT_D7,D2                       ;check to see in the register is 7
000072A6  6700 005A               9416                                  BEQ                NOT_D7_output                              ;if equal go to output subroutine
000072AA  6600 C3B6               9417                                  BNE                ERROR                                        :if not equal to an addresssing mode, pritn error
000072AE                          9418                                  
000072AE                          9419  ;--------------------Data Register Direct Output-----------------------
000072AE  227C 00008965           9420  NOT_D0_output               MOVE.L          #ea_D0,A1                           ;load string constant into A1
000072B4  4CDF 7CBE               9421                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000072B8  4E75                    9422                              RTS                                             ;return to subroutine
000072BA                          9423                                      
000072BA  227C 00008968           9424  NOT_D1_output               MOVE.L          #ea_D1,A1                           ;load string constant into A1
000072C0  4CDF 7CBE               9425                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000072C4  4E75                    9426                              RTS                                             ;return to subroutine
000072C6                          9427                                      
000072C6  227C 0000896B           9428  NOT_D2_output               MOVE.L          #ea_D2,A1                           ;load string constant into A1
000072CC  4CDF 7CBE               9429                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000072D0  4E75                    9430                              RTS                                             ;return to subroutine
000072D2                          9431                                      
000072D2  227C 0000896E           9432  NOT_D3_output               MOVE.L          #ea_D3,A1                           ;load string constant into A1
000072D8  4CDF 7CBE               9433                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000072DC  4E75                    9434                              RTS                                             ;return to subroutine
000072DE                          9435                                      
000072DE  227C 00008971           9436  NOT_D4_output               MOVE.L          #ea_D4,A1                           ;load string constant into A1
000072E4  4CDF 7CBE               9437                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000072E8  4E75                    9438                              RTS                                             ;return to subroutine
000072EA                          9439                                      
000072EA  227C 00008974           9440  NOT_D5_output               MOVE.L          #ea_D5,A1                           ;load string constant into A1
000072F0  4CDF 7CBE               9441                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000072F4  4E75                    9442                              RTS                                             ;return to subroutine
000072F6                          9443                                      
000072F6  227C 00008977           9444  NOT_D6_output               MOVE.L          #ea_D6,A1                           ;load string constant into A1
000072FC  4CDF 7CBE               9445                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007300  4E75                    9446                              RTS                                             ;return to subroutine
00007302                          9447                                      
00007302  227C 0000897A           9448  NOT_D7_output               MOVE.L          #ea_D7,A1                           ;load string constant into A1
00007308  4CDF 7CBE               9449                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000730C  4E75                    9450                              RTS                                             ;return to subroutine
0000730E                          9451                                      
0000730E                          9452  ;------------------Address Register Indirect-----------------------
0000730E  B4BC 00000010           9453  NOT_An_indir_reg                            CMP.L           #match_NOT_An_indir_r0,D2              ;check reg is equal to 0
00007314  6600 0006               9454                                              BNE             NOT_An_indir_reg1                            ;if not try reg 1
00007318  6700 0064               9455                                              BEQ             NOT_An_indir_reg0_out                     ;if equal go to output subroutine
0000731C                          9456  
0000731C  B4BC 00000011           9457  NOT_An_indir_reg1                           CMP.L           #match_NOT_An_indir_r1,D2              ;check reg is equal to 1
00007322  6600 0006               9458                                              BNE             NOT_An_indir_reg2                            ;if not try reg 2
00007326  6700 0062               9459                                              BEQ             NOT_An_indir_reg1_out                     ;if equal go to output subroutine
0000732A                          9460  
0000732A  B4BC 00000012           9461  NOT_An_indir_reg2                           CMP.L           #match_NOT_An_indir_r2,D2              ;check reg is equal to 2
00007330  6600 0006               9462                                              BNE             NOT_An_indir_reg3                            ;if not try reg 3
00007334  6700 0060               9463                                              BEQ             NOT_An_indir_reg2_out                     ;if equal go to output subroutine
00007338                          9464  
00007338  B4BC 00000013           9465  NOT_An_indir_reg3                           CMP.L           #match_NOT_An_indir_r3,D2              ;check reg is equal to 3
0000733E  6600 0006               9466                                              BNE             NOT_An_indir_reg4                            ;if not try reg 4
00007342  6700 005E               9467                                              BEQ             NOT_An_indir_reg3_out                     ;if equal go to output subroutine
00007346                          9468  
00007346  B4BC 00000014           9469  NOT_An_indir_reg4                           CMP.L           #match_NOT_An_indir_r4,D2              ;check reg is equal to 4
0000734C  6600 0006               9470                                              BNE             NOT_An_indir_reg5                            ;if not try reg 5
00007350  6700 005C               9471                                              BEQ             NOT_An_indir_reg4_out                    ;if equal go to output subroutine
00007354                          9472  
00007354  B4BC 00000015           9473  NOT_An_indir_reg5                           CMP.L           #match_NOT_An_indir_r5,D2              ;check reg is equal to 5
0000735A  6600 0006               9474                                              BNE             NOT_An_indir_reg6                            ;if not try reg 6
0000735E  6700 005A               9475                                              BEQ             NOT_An_indir_reg5_out                     ;if equal go to output subroutine
00007362                          9476  
00007362  B4BC 00000016           9477  NOT_An_indir_reg6                           CMP.L           #match_NOT_An_indir_r6,D2              ;check reg is equal to 6
00007368  6700 005C               9478                                              BEQ             NOT_An_indir_reg6_out                     ;if equal go to output subroutine
0000736C  6600 0002               9479                                              BNE             NOT_An_indir_reg7
00007370                          9480  
00007370  B4BC 00000017           9481  NOT_An_indir_reg7                           CMP.L           #match_NOT_An_indir_r7,D2              ;check reg is equal to 6
00007376  6700 005A               9482                                              BEQ             NOT_An_indir_reg7_out                     ;if equal go to output subroutine
0000737A  6600 C2E6               9483                                              BNE              ERROR                                        :if not equal to an addresssing mode, pritn error
0000737E                          9484  
0000737E                          9485  ;--------------------Address Register Indirect Output-----------------------
0000737E  227C 000089A5           9486  NOT_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
00007384  4CDF 7CBE               9487                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007388  4E75                    9488                                          RTS                                                         ;return to subroutine
0000738A                          9489                                      
0000738A  227C 000089AA           9490  NOT_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
00007390  4CDF 7CBE               9491                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007394  4E75                    9492                                          RTS                                                         ;return to subroutine
00007396                          9493                                              
00007396  227C 000089AF           9494  NOT_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
0000739C  4CDF 7CBE               9495                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000073A0  4E75                    9496                                          RTS                                                     ;return to subroutine
000073A2                          9497  
000073A2  227C 000089B4           9498  NOT_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
000073A8  4CDF 7CBE               9499                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000073AC  4E75                    9500                                          RTS                                                     ;return to subroutine
000073AE                          9501                                              
000073AE  227C 000089B9           9502  NOT_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
000073B4  4CDF 7CBE               9503                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000073B8  4E75                    9504                                          RTS                                                         ;return to subroutine
000073BA                          9505                                          
000073BA  227C 000089BE           9506  NOT_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
000073C0  4CDF 7CBE               9507                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000073C4  4E75                    9508                                          RTS                                                     ;return to subroutine
000073C6                          9509  
000073C6  227C 000089C3           9510  NOT_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
000073CC  4CDF 7CBE               9511                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000073D0  4E75                    9512                                          RTS                                                         ;return to subroutine
000073D2                          9513  
000073D2  227C 000089C8           9514  NOT_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
000073D8  4CDF 7CBE               9515                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000073DC  4E75                    9516                                          RTS                                                         ;return to subroutine
000073DE                          9517  
000073DE                          9518  
000073DE                          9519  ;------------------Address Register Indirect with Post Increment-----------------------
000073DE  B4BC 00000020           9520  NOT_An_indir_postinc_reg                    CMP.L      #match_NOT_An_indir_postinc_r0,D2        ;check reg is equal to 0
000073E4  6600 0006               9521                                              BNE        NOT_An_indir_pinc_r1                      ;if not try reg 1
000073E8  6700 0062               9522                                              BEQ        NOT_An_indir_pinc_r0_out               ;if equal go to output subroutine
000073EC                          9523  
000073EC  B4BC 00000021           9524  NOT_An_indir_pinc_r1                        CMP.L      #match_NOT_An_indir_postinc_r1,D2        ;check reg is equal to 1
000073F2  6600 0006               9525                                              BNE        NOT_An_indir_pinc_r2                      ;if not try reg 2
000073F6  6700 0060               9526                                              BEQ        NOT_An_indir_pinc_r1_out               ;if equal go to output subroutine
000073FA                          9527  
000073FA  B4BC 00000022           9528  NOT_An_indir_pinc_r2                        CMP.L      #match_NOT_An_indir_postinc_r2,D2        ;check reg is equal to 2
00007400  6600 0006               9529                                              BNE        NOT_An_indir_pinc_r3                      ;if not try reg 3
00007404  6700 005E               9530                                              BEQ        NOT_An_indir_pinc_r2_out               ;if equal go to output subroutine
00007408                          9531       
00007408  B4BC 00000023           9532  NOT_An_indir_pinc_r3                        CMP.L      #match_NOT_An_indir_postinc_r3,D2        ;check reg is equal to 3
0000740E  6600 0006               9533                                              BNE        NOT_An_indir_pinc_r4                      ;if not try reg 4
00007412  6700 005C               9534                                              BEQ        NOT_An_indir_pinc_r3_out               ;if equal go to output subroutine
00007416                          9535   
00007416  B4BC 00000024           9536  NOT_An_indir_pinc_r4                        CMP.L      #match_NOT_An_indir_postinc_r4,D2        ;check reg is equal to 4
0000741C  6600 0006               9537                                              BNE        NOT_An_indir_pinc_r5                      ;if not try reg 5
00007420  6700 005A               9538                                              BEQ        NOT_An_indir_pinc_r4_out               ;if equal go to output subroutine
00007424                          9539  
00007424  B4BC 00000025           9540  NOT_An_indir_pinc_r5                        CMP.L      #match_NOT_An_indir_postinc_r5,D2        ;check reg is equal to 5
0000742A  6600 0006               9541                                              BNE        NOT_An_indir_pinc_r6                      ;if not try reg 6
0000742E  6700 0058               9542                                              BEQ        NOT_An_indir_pinc_r5_out               ;if equal go to output subroutine
00007432                          9543  
00007432  B4BC 00000026           9544  NOT_An_indir_pinc_r6                        CMP.L      #match_NOT_An_indir_postinc_r6,D2        ;check reg is equal to 6
00007438  6700 005A               9545                                              BEQ        NOT_An_indir_pinc_r6_out              ;if equal go to output subroutine
0000743C  66F4                    9546                                              BNE        NOT_An_indir_pinc_r6
0000743E                          9547                                              
0000743E  B4BC 00000027           9548  NOT_An_indir_pinc_r7                        CMP.L      #match_NOT_An_indir_postinc_r7,D2        ;check reg is equal to 7
00007444  6700 005A               9549                                              BEQ        NOT_An_indir_pinc_r7_out              ;if equal go to output subroutine
00007448  6600 C218               9550                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
0000744C                          9551  
0000744C                          9552  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000744C  227C 000089D3           9553  NOT_An_indir_pinc_r0_out                    MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
00007452  4CDF 7CBE               9554                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007456  4E75                    9555                                              RTS                                             ;return to subroutine
00007458                          9556  
00007458  227C 000089D3           9557  NOT_An_indir_pinc_r1_out                    MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
0000745E  4CDF 7CBE               9558                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007462  4E75                    9559                                              RTS                                             ;return to subroutine
00007464                          9560  
00007464  227C 000089D9           9561  NOT_An_indir_pinc_r2_out                    MOVE.L          #ea_indir_postinc_A2,A1         ;load string constant into A1
0000746A  4CDF 7CBE               9562                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000746E  4E75                    9563                                              RTS                                             ;return to subroutine
00007470                          9564  
00007470  227C 000089DF           9565  NOT_An_indir_pinc_r3_out                    MOVE.L          #ea_indir_postinc_A3,A1         ;load string constant into A1
00007476  4CDF 7CBE               9566                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000747A  4E75                    9567                                              RTS                                             ;return to subroutine
0000747C                          9568  
0000747C  227C 000089E5           9569  NOT_An_indir_pinc_r4_out                    MOVE.L          #ea_indir_postinc_A4,A1         ;load string constant into A1
00007482  4CDF 7CBE               9570                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007486  4E75                    9571                                              RTS                                             ;return to subroutine
00007488                          9572  
00007488  227C 000089EB           9573  NOT_An_indir_pinc_r5_out                    MOVE.L          #ea_indir_postinc_A5,A1         ;load string constant into A1
0000748E  4CDF 7CBE               9574                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007492  4E75                    9575                                              RTS                                             ;return to subroutine
00007494                          9576   
00007494  227C 000089F1           9577  NOT_An_indir_pinc_r6_out                    MOVE.L          #ea_indir_postinc_A6,A1         ;load string constant into A1
0000749A  4CDF 7CBE               9578                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000749E  4E75                    9579                                              RTS                                             ;return to subroutine
000074A0                          9580  
000074A0  227C 000089F7           9581  NOT_An_indir_pinc_r7_out                    MOVE.L          #ea_indir_postinc_A7,A1         ;load string constant into A1
000074A6  4CDF 7CBE               9582                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000074AA  4E75                    9583                                              RTS                                             ;return to subroutine
000074AC                          9584                                                      
000074AC                          9585  ;------------------Address Register Indirect with Pre Decrement-----------------------
000074AC  B4BC 00000018           9586  NOT_An_indir_predec_reg                     CMP.L      #match_NOT_An_indir_predec_r0,D2         ;check reg is equal to 0
000074B2  6600 0006               9587                                              BNE        NOT_An_indir_pdec_r1                      ;if not try reg 1
000074B6  6700 0064               9588                                              BEQ        NOT_An_indir_pdec_r0_out               ;if equal go to output subroutine
000074BA                          9589  
000074BA  B4BC 00000019           9590  NOT_An_indir_pdec_r1                        CMP.L      #match_NOT_An_indir_predec_r1,D2         ;check reg is equal to 1
000074C0  6600 0006               9591                                              BNE        NOT_An_indir_pdec_r2                      ;if not try reg 2
000074C4  6700 0062               9592                                              BEQ        NOT_An_indir_pdec_r1_out               ;if equal go to output subroutine
000074C8                          9593  
000074C8  B4BC 0000001A           9594  NOT_An_indir_pdec_r2                        CMP.L      #match_NOT_An_indir_predec_r2,D2         ;check reg is equal to 2
000074CE  6600 0006               9595                                              BNE        NOT_An_indir_pdec_r3                      ;if not try reg 3
000074D2  6700 0060               9596                                              BEQ        NOT_An_indir_pdec_r2_out               ;if equal go to output subroutine
000074D6                          9597  
000074D6  B4BC 0000001B           9598  NOT_An_indir_pdec_r3                        CMP.L      #match_NOT_An_indir_predec_r3,D2         ;check reg is equal to 3
000074DC  6600 0006               9599                                              BNE        NOT_An_indir_pdec_r4                      ;if not try reg 4
000074E0  6700 005E               9600                                              BEQ        NOT_An_indir_pdec_r3_out               ;if equal go to output subroutine
000074E4                          9601  
000074E4  B4BC 0000001C           9602  NOT_An_indir_pdec_r4                        CMP.L      #match_NOT_An_indir_predec_r4,D2         ;check reg is equal to 4
000074EA  6600 0006               9603                                              BNE        NOT_An_indir_pdec_r5                      ;if not try reg 5
000074EE  6700 005C               9604                                              BEQ        NOT_An_indir_pdec_r4_out               ;if equal go to output subroutine
000074F2                          9605  
000074F2  B4BC 0000001D           9606  NOT_An_indir_pdec_r5                        CMP.L      #match_NOT_An_indir_predec_r5,D2         ;check reg is equal to 5
000074F8  6600 0006               9607                                              BNE        NOT_An_indir_pdec_r6                      ;if not try reg 6
000074FC  6700 005A               9608                                              BEQ        NOT_An_indir_pdec_r5_out               ;if equal go to output subroutine
00007500                          9609  
00007500  B4BC 0000001E           9610  NOT_An_indir_pdec_r6                        CMP.L      #match_NOT_An_indir_predec_r6,D2         ;check reg is equal to 6
00007506  6700 005C               9611                                              BEQ        NOT_An_indir_pdec_r6_out               ;if equal go to output subroutine
0000750A  6600 0002               9612                                              BNE        NOT_An_indir_pdec_r7
0000750E                          9613  
0000750E  B4BC 0000001E           9614  NOT_An_indir_pdec_r7                        CMP.L      #match_NOT_An_indir_predec_r6,D2         ;check reg is equal to 6
00007514  6700 005A               9615                                              BEQ        NOT_An_indir_pdec_r7_out               ;if equal go to output subroutine
00007518  6600 C148               9616                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
0000751C                          9617  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000751C  227C 000089FD           9618  NOT_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
00007522  4CDF 7CBE               9619                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007526  4E75                    9620                                              RTS                                                     ;return to subroutine
00007528                          9621  
00007528  227C 00008A03           9622  NOT_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
0000752E  4CDF 7CBE               9623                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007532  4E75                    9624                                              RTS                                                     ;return to subroutine
00007534                          9625                                                      
00007534  227C 00008A09           9626  NOT_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
0000753A  4CDF 7CBE               9627                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000753E  4E75                    9628                                              RTS                                                     ;return to subroutine
00007540                          9629  
00007540  227C 00008A0F           9630  NOT_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
00007546  4CDF 7CBE               9631                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000754A  4E75                    9632                                              RTS                                                     ;return to subroutine
0000754C                          9633  
0000754C  227C 00008A15           9634  NOT_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
00007552  4CDF 7CBE               9635                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007556  4E75                    9636                                              RTS                                                     ;return to subroutine
00007558                          9637      
00007558  227C 00008A1B           9638  NOT_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
0000755E  4CDF 7CBE               9639                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007562  4E75                    9640                                              RTS                                                     ;return to subroutine
00007564                          9641      
00007564  227C 00008A21           9642  NOT_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
0000756A  4CDF 7CBE               9643                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000756E  4E75                    9644                                              RTS                                                     ;return to subroutine
00007570                          9645  
00007570  227C 00008A27           9646  NOT_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
00007576  4CDF 7CBE               9647                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000757A  4E75                    9648                                              RTS                                                     ;return to subroutine
0000757C                          9649                                                      
0000757C                          9650  ;------------------Absolute Addressing Output-----------------------
0000757C  22FC 00008A37           9651  NOT_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00007582  22C5                    9652                                           MOVE.L      D5,(A1)+                           ;load address                  
00007584  4CDF 7CBE               9653                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007588  4E75                    9654                                           RTS                                            :return to subroutine
0000758A                          9655                                             
0000758A                          9656  
0000758A  2A18                    9657  NOT_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000758C  22FC 00008A37           9658                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00007592  22C5                    9659                                           MOVE.L      D5,(A1)+                           ;load address                  
00007594  4CDF 7CBE               9660                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007598  4E75                    9661                                           RTS                                            :return to subroutine                                            
0000759A                          9662                                                  
0000759A  =00000038               9663  mask_NOT_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
0000759A  =0000003F               9664  mask_NOT_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
0000759A  =0000003F               9665  mask_NOT_ea_mode_abs_add                    EQU             $003F
0000759A                          9666  
0000759A  =00000000               9667  match_NOT_Dn                                EQU             $0000              ;match for data reg dir
0000759A  =00000010               9668  match_NOT_An_indir                          EQU             $0010              ;match for add reg indir
0000759A  =00000020               9669  match_NOT_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
0000759A  =00000018               9670  match_NOT_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
0000759A  =00000039               9671  match_NOT_abs_add_word                      EQU             $0039              ;match for word abs add 
0000759A  =0000003C               9672  match_NOT_abs_add_long                      EQU             $003C              ;match for long abs add
0000759A                          9673  
0000759A  =00000000               9674  match_NOT_D0                                EQU             $0000              ;match for data reg dir with data reg 0
0000759A  =00000001               9675  match_NOT_D1                                EQU             $0001              ;match for data reg dir with data reg 1
0000759A  =00000002               9676  match_NOT_D2                                EQU             $0002              ;match for data reg dir with data reg 2
0000759A  =00000003               9677  match_NOT_D3                                EQU             $0003              ;match for data reg dir with data reg 3
0000759A  =00000004               9678  match_NOT_D4                                EQU             $0004              ;match for data reg dir with data reg 4
0000759A  =00000005               9679  match_NOT_D5                                EQU             $0005              ;match for data reg dir with data reg 5
0000759A  =00000006               9680  match_NOT_D6                                EQU             $0006              ;match for data reg dir with data reg 6
0000759A  =00000007               9681  match_NOT_D7                                EQU             $0007              ;match for data reg dir with data reg 7
0000759A                          9682  
0000759A  =00000010               9683  match_NOT_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
0000759A  =00000011               9684  match_NOT_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
0000759A  =00000012               9685  match_NOT_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
0000759A  =00000013               9686  match_NOT_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
0000759A  =00000014               9687  match_NOT_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
0000759A  =00000015               9688  match_NOT_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
0000759A  =00000016               9689  match_NOT_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
0000759A  =00000017               9690  match_NOT_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
0000759A                          9691  
0000759A                          9692  
0000759A  =00000020               9693  match_NOT_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
0000759A  =00000021               9694  match_NOT_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
0000759A  =00000022               9695  match_NOT_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
0000759A  =00000023               9696  match_NOT_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
0000759A  =00000024               9697  match_NOT_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
0000759A  =00000025               9698  match_NOT_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
0000759A  =00000026               9699  match_NOT_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
0000759A  =00000027               9700  match_NOT_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
0000759A                          9701  
0000759A  =00000018               9702  match_NOT_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
0000759A  =00000019               9703  match_NOT_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
0000759A  =0000001A               9704  match_NOT_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
0000759A  =0000001B               9705  match_NOT_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
0000759A  =0000001C               9706  match_NOT_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
0000759A  =0000001D               9707  match_NOT_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
0000759A  =0000001E               9708  match_NOT_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
0000759A  =0000001F               9709  match_NOT_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
0000759A                          9710  
0000759A                          9711  
0000759A                          9712  
0000759A                          9713  
0000759A                          9714  
0000759A                          9715  
0000759A                          9716  -------------------- end include --------------------
0000759A                          9717              INCLUDE 'OR Subroutine.x68'
0000759A                          9718  
0000759A                          9719  
0000759A                          9720  
0000759A                          9721     
0000759A                          9722  ;--------------------------------------------------------OR ORroutine-----------------------------------------------------------------------
0000759A  48E7 7D3E               9723  OR_sub                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)                  ;preserve the registers, 
0000759E                          9724                                   
0000759E  223C 000001C0           9725                                         MOVE.L              #mask_OR_opmode,D1                       ;load mask to determine the operOR order
000075A4                          9726                                  
000075A4  B2BC 00000000           9727  OR_Dn_ea_match                         CMP.L              #match_OR_b_Dn_ea,D1                 ;check to see if it's Dn,ea
000075AA  6700 05DE               9728                                         BEQ                OR_Dn_ea                                 ;if equal go figure out data register
000075AE  6600 0002               9729                                         BNE                OR_Dn_ea_match_w                         ;if not check word size for same order
000075B2                          9730  
000075B2  B2BC 00000040           9731  OR_Dn_ea_match_w                       CMP.L              #match_OR_w_Dn_ea,D1                 ;check to see if it's Dn,ea
000075B8  6700 05D0               9732                                         BEQ                OR_Dn_ea                                 ;if equal go figure out data register
000075BC  6600 0002               9733                                         BNE                OR_Dn_ea_match_l                         ;if not check long size for same order
000075C0                          9734  
000075C0  B2BC 00000080           9735  OR_Dn_ea_match_l                       CMP.L              #match_OR_l_Dn_ea,D1                 ;check to see if it's Dn,ea
000075C6  6700 05C2               9736                                         BEQ                OR_Dn_ea                                 ;if equal go figure out data register
000075CA  6600 0002               9737                                         BNE                OR_ea_Dn_match                           ;if not check other order
000075CE                          9738  
000075CE  B2BC 00000100           9739  OR_ea_Dn_match                         CMP.L              #match_OR_b_ea_Dn,D1                 ;check to see if it's ea,Dn
000075D4  6700 0022               9740                                         BEQ                OR_ea_Dn                                 ;if equal go figure out ea mode
000075D8  6600 0002               9741                                         BNE                OR_ea_Dn_match_w                         ;if not go check word size for same order
000075DC                          9742  
000075DC  B2BC 00000140           9743  OR_ea_Dn_match_w                       CMP.L              #match_OR_w_ea_Dn,D1                 ;check to see if it's ea,Dn
000075E2  6700 0014               9744                                         BEQ                OR_ea_Dn                                 ;if equal go figure out ea mode
000075E6  6600 0002               9745                                         BNE                OR_ea_Dn_match_l                         ;if not go check word size for same order
000075EA                          9746  
000075EA  B2BC 00000180           9747  OR_ea_Dn_match_l                       CMP.L              #match_OR_l_ea_Dn,D1                 ;check to see if it's ea,Dn
000075F0  6700 0006               9748                                         BEQ                OR_ea_Dn                                 ;if equal go figure out ea mode
000075F4  6600 C06C               9749                                         BNE                ERROR                                 ;if not go to error message
000075F8                          9750  ;--------------------------------------------------------------------------------------------------------------------------
000075F8                          9751  ;-------------------------------------------------------------------------------------------------------------------------
000075F8  4241                    9752  OR_ea_Dn                             CLR                D1                                        ;clear D1 to load new mask                                
000075FA  223C 00000038           9753                                       MOVE.L             #mask_OR_ea_mode,D1                       ;move the mask to D1
00007600                          9754  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00007600  B2BC 00000010           9755  OR_ea_Dn_add_reg_indir               CMP.L             #match_OR_An_indir,D1                      ;check to see if mode is add reg indir
00007606  6600 0006               9756                                       BNE               OR_ea_Dn_add_reg_indir_predec              ;if not, go check add reg indir predec 
0000760A  6700 01E8               9757                                       BEQ               OR_ea_Dn_An_indir_reg                      ;if equal go figure out the register           
0000760E                          9758              
0000760E  B2BC 00000020           9759  OR_ea_Dn_add_reg_indir_predec        CMP.L             #match_OR_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00007614  6600 0006               9760                                       BNE               OR_ea_Dn_add_reg_indir_postinc             ;if not go check add reg indir/predec
00007618  6700 037A               9761                                       BEQ               OR_ea_Dn_An_indir_predec                   ;if equal go figure out the register
0000761C                          9762                        
0000761C  B2BC 00000018           9763  OR_ea_Dn_add_reg_indir_postinc       CMP.L             #match_OR_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00007622  6600 0006               9764                                       BNE               OR_ea_Dn_abs_add_word                      ;if not go check abs add word
00007626  6700 029C               9765                                       BEQ               OR_ea_Dn_An_indir_postinc_reg              ;if equal go figure out the register
0000762A                          9766  
0000762A  243C 0000003F           9767  OR_ea_Dn_abs_add_word                MOVE.L            #mask_OR_abs_add,D2                        ;load mask to determine if abs add word or long
00007630                          9768                                   
00007630  B4BC 00000038           9769                                       CMP.L             #match_OR_abs_add_word,D2                  ;check if abs add word
00007636  2A18                    9770                                       MOVE.L            (A0)+,D5                                   ;pull the next word instruction that holds the address
00007638  6600 0006               9771                                       BNE               OR_ea_Dn_abs_add_long                      ;if not go check abs add long
0000763C  6700 0426               9772                                       BEQ               OR_ea_Dn_abs_add_word_out                  ;if equal go to output
00007640                          9773    
00007640  B4BC 00000039           9774  OR_ea_Dn_abs_add_long                CMP.L             #match_OR_abs_add_long,D2                  ;check to see if abs add long
00007646  6700 042A               9775                                       BEQ               OR_ea_Dn_abs_add_long_out                  ;if equal go to output
0000764A  6600 C016               9776                                       BNE               ERROR                                      ;if not equal go to error mesage OR routine
0000764E                          9777  
0000764E                          9778  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
0000764E                          9779                                   
0000764E                          9780                                   
0000764E                          9781  ;-----------------------------------Data Register Direct--------------------------------
0000764E  243C 0000003F           9782  OR_ea_Dn_Dn_reg                  MOVE.L             #mask_OR_ea_reg_OR_mode,D2             ;load the mask into D2 for the mode OR the register
00007654  B4BC 00000000           9783                                   CMP.L              #match_OR_D0,D2                       ;check to see in the register is 0
0000765A  6600 0006               9784                                   BNE                OR_ea_Dn_rD1                                     ;if not go check register 1
0000765E  6700 0064               9785                                   BEQ                OR_ea_Dn_D0_out                              ;if equal go to output ORroutine
00007662                          9786  
00007662  B4BC 00000001           9787  OR_ea_Dn_rD1                     CMP.L              #match_OR_D1,D2                       ;check to see in the register is 1
00007668  6600 0006               9788                                   BNE                OR_ea_Dn_rD2                                     ;if not go check register 2
0000766C  6700 0062               9789                                   BEQ                OR_ea_Dn_D1_out                              ;if equal go to output ORroutine
00007670                          9790  
00007670  B4BC 00000002           9791  OR_ea_Dn_rD2                     CMP.L              #match_OR_D2,D2                       ;check to see in the register is 2
00007676  6600 0006               9792                                   BNE                OR_ea_Dn_rD3                                     ;if not go check register 3
0000767A  6700 0060               9793                                   BEQ                OR_ea_Dn_D2_out                              ;if equal go to output ORroutine
0000767E                          9794  
0000767E  B4BC 00000003           9795  OR_ea_Dn_rD3                     CMP.L              #match_OR_D3,D2                       ;check to see in the register is 3
00007684  6600 0006               9796                                   BNE                OR_ea_Dn_rD4                                     ;if not go check register 4
00007688  6700 005E               9797                                   BEQ                OR_ea_Dn_D3_out                              ;if equal go to output ORroutine
0000768C                          9798  
0000768C  B4BC 00000004           9799  OR_ea_Dn_rD4                     CMP.L              #match_OR_D4,D2                       ;check to see in the register is 4
00007692  6600 0006               9800                                   BNE                OR_ea_Dn_rD5                                     ;if not go check register 5
00007696  6700 005C               9801                                   BEQ                OR_ea_Dn_D4_out                              ;if equal go to output ORroutine
0000769A                          9802  
0000769A  B4BC 00000005           9803  OR_ea_Dn_rD5                     CMP.L              #match_OR_D5,D2                       ;check to see in the register is 5
000076A0  6600 0006               9804                                   BNE                OR_ea_Dn_rD6                                     ;if not go check register 6
000076A4  6700 005A               9805                                   BEQ                OR_ea_Dn_D5_out                              ;if equal go to output ORroutine
000076A8                          9806  
000076A8  B4BC 00000006           9807  OR_ea_Dn_rD6                     CMP.L              #match_OR_D6,D2                       ;check to see in the register is 6
000076AE  6600 0006               9808                                   BNE                OR_ea_Dn_rD7                                     ;if not go check register 7
000076B2  6700 0058               9809                                   BEQ                OR_ea_Dn_D6_out                              ;if equal go to output ORroutine
000076B6                          9810  
000076B6  B4BC 00000007           9811  OR_ea_Dn_rD7                     CMP.L              #match_OR_D7,D2                       ;check to see in the register is 7
000076BC  6700 005A               9812                                   BEQ                OR_ea_Dn_D7_out                              ;if equal go to output ORroutine
000076C0  6600 BFA0               9813                                   BNE                ERROR                               ;if not equal, got to error message
000076C4                          9814  ;--------------------Data Register Direct Output-----------------------
000076C4  227C 00008965           9815  OR_ea_Dn_D0_out                 MOVE.L          #ea_D0,A1                           ;load string constant into A1
000076CA  4EB9 00007AB2           9816                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000076D0                          9817  
000076D0  227C 00008968           9818  OR_ea_Dn_D1_out                 MOVE.L          #ea_D1,A1                           ;load string constant into A1
000076D6  4EB9 00007AB2           9819                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000076DC                          9820  
000076DC                          9821  
000076DC  227C 0000896B           9822  OR_ea_Dn_D2_out                 MOVE.L          #ea_D2,A1                           ;load string constant into A1
000076E2  4EB9 00007AB2           9823                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000076E8                          9824  
000076E8  227C 0000896E           9825  OR_ea_Dn_D3_out                 MOVE.L          #ea_D3,A1                           ;load string constant into A1
000076EE  4EB9 00007AB2           9826                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000076F4                          9827  
000076F4                          9828  
000076F4  227C 00008971           9829  OR_ea_Dn_D4_out                 MOVE.L          #ea_D4,A1                           ;load string constant into A1
000076FA  4EB9 00007AB2           9830                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007700                          9831  
00007700                          9832  
00007700  227C 00008974           9833  OR_ea_Dn_D5_out                 MOVE.L          #ea_D5,A1                           ;load string constant into A1
00007706  4EB9 00007AB2           9834                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000770C                          9835  
0000770C                          9836  
0000770C  227C 00008977           9837  OR_ea_Dn_D6_out                 MOVE.L          #ea_D6,A1                           ;load string constant into A1
00007712  4EB9 00007AB2           9838                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007718                          9839  
00007718                          9840  
00007718  227C 0000897A           9841  OR_ea_Dn_D7_out                 MOVE.L          #ea_D7,A1                           ;load string constant into A1
0000771E  4EB9 00007AB2           9842                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007724                          9843  
00007724                          9844  ;------------------Address Register Direct-----------------------
00007724  B4BC 00000008           9845  OR_ea_Dn_An_reg                  CMP.L           #match_OR_A0,D2                      ;check reg is equal to 0
0000772A  6600 0006               9846                                   BNE             OR_ea_Dn_rA1                         ;if not try reg 1
0000772E  6700 0134               9847                                   BEQ             OR_ea_Dn_An_indir_reg0_out           ;if equal go to output ORroutine
00007732                          9848  
00007732  B4BC 00000009           9849  OR_ea_Dn_rA1                     CMP.L           #match_OR_A1,D2                      ;check reg is equal to 1
00007738  6600 0006               9850                                   BNE             OR_ea_Dn_rA2                         ;if not try reg 2
0000773C  6700 0132               9851                                   BEQ             OR_ea_Dn_An_indir_reg1_out           ;if equal go to output ORroutine
00007740                          9852  
00007740  B4BC 0000000A           9853  OR_ea_Dn_rA2                     CMP.L           #match_OR_A2,D2                      ;check reg is equal to 2
00007746  6600 0006               9854                                   BNE             OR_ea_Dn_rA3                         ;if not try reg 3
0000774A  6700 0130               9855                                   BEQ             OR_ea_Dn_An_indir_reg2_out           ;if equal go to output ORroutine
0000774E                          9856  
0000774E  B4BC 0000000B           9857  OR_ea_Dn_rA3                     CMP.L           #match_OR_A3,D2                      ;check reg is equal to 3
00007754  6600 0006               9858                                   BNE             OR_ea_Dn_rA4                         ;if not try reg 4
00007758  6700 012E               9859                                   BEQ             OR_ea_Dn_An_indir_reg3_out           ;if equal go to output ORroutine
0000775C                          9860  
0000775C  B4BC 0000000C           9861  OR_ea_Dn_rA4                     CMP.L           #match_OR_A4,D2                      ;check reg is equal to 4
00007762  6600 0006               9862                                   BNE             OR_ea_Dn_rA5                         ;if not try reg 5
00007766  6700 012C               9863                                   BEQ             OR_ea_Dn_An_indir_reg4_out           ;if equal go to output ORroutine
0000776A                          9864              
0000776A  B4BC 0000000D           9865  OR_ea_Dn_rA5                     CMP.L           #match_OR_A5,D2                      ;check reg is equal to 5
00007770  6600 0006               9866                                   BNE             OR_ea_Dn_rA6                         ;if not try reg 6
00007774  6700 012A               9867                                   BEQ             OR_ea_Dn_An_indir_reg5_out           ;if equal go to output ORroutine
00007778                          9868  
00007778  B4BC 0000000E           9869  OR_ea_Dn_rA6                     CMP.L           #match_OR_A6,D2                      ;check reg is equal to 6
0000777E  6600 0006               9870                                   BNE             OR_ea_Dn_rA7                         ;if not try reg 7
00007782  6700 0128               9871                                   BEQ             OR_ea_Dn_An_indir_reg6_out           ;if equal go to output ORroutine
00007786                          9872  
00007786  B4BC 0000000F           9873  OR_ea_Dn_rA7                     CMP.L           #match_OR_A7,D2                      ;check reg is equal to 7
0000778C  6700 012A               9874                                   BEQ             OR_ea_Dn_An_indir_reg7_out           ;if equal go to output ORroutine
00007790  6600 BED0               9875                                   BNE             ERROR                                ;if not equal to an addresssing mode, pritn error
00007794                          9876  
00007794                          9877  ;--------------------Address Register Direct Output-----------------------
00007794  227C 0000897D           9878  OR_ea_Dn_A0_out                 MOVE.L          #ea_A0,A1                           ;load string constant into A1
0000779A  4EB9 00007AB2           9879                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000077A0                          9880                                  
000077A0  227C 00008980           9881  OR_ea_Dn_A1_out                 MOVE.L          #ea_A1,A1                           ;load string constant into A1
000077A6  4EB9 00007AB2           9882                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000077AC                          9883                                  
000077AC  227C 00008983           9884  OR_ea_Dn_A2_out                 MOVE.L          #ea_A2,A1                           ;load string constant into A1
000077B2  4EB9 00007AB2           9885                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000077B8                          9886                                  
000077B8  227C 00008986           9887  OR_ea_Dn_A3_out                 MOVE.L          #ea_A3,A1                           ;load string constant into A1
000077BE  4EB9 00007AB2           9888                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000077C4                          9889  
000077C4  227C 00008989           9890  OR_ea_Dn_A4_out                 MOVE.L          #ea_A4,A1                           ;load string constant into A1
000077CA  4EB9 00007AB2           9891                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000077D0                          9892  
000077D0  227C 0000898C           9893  OR_ea_Dn_A5_out                 MOVE.L          #ea_A5,A1                           ;load string constant into A1
000077D6  4EB9 00007AB2           9894                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000077DC                          9895  
000077DC  227C 0000898F           9896  OR_ea_Dn_A6_out                 MOVE.L          #ea_A6,A1                           ;load string constant into A1
000077E2  4EB9 00007AB2           9897                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000077E8                          9898  
000077E8  227C 00008992           9899  OR_ea_Dn_A7_out                 MOVE.L          #ea_A7,A1                           ;load string constant into A1
000077EE  4EB9 00007AB2           9900                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000077F4                          9901  
000077F4                          9902  ;------------------Address Register Indirect-----------------------
000077F4  B4BC 00000010           9903  OR_ea_Dn_An_indir_reg            CMP.L          #match_OR_An_indir_r0,D2              ;check reg is equal to 0
000077FA  6600 0006               9904                                   BNE             OR_ea_Dn_An_indir_reg1                           ;if not try reg 1
000077FE  6700 0064               9905                                   BEQ             OR_ea_Dn_An_indir_reg0_out                       ;if equal go to output ORroutine
00007802                          9906  
00007802  B4BC 00000011           9907  OR_ea_Dn_An_indir_reg1           CMP.L           #match_OR_An_indir_r1,D2              ;check reg is equal to 1
00007808  6600 0006               9908                                   BNE             OR_ea_Dn_An_indir_reg2                           ;if not try reg 2
0000780C  6700 0062               9909                                   BEQ             OR_ea_Dn_An_indir_reg1_out                       ;if equal go to output ORroutine
00007810                          9910  
00007810  B4BC 00000012           9911  OR_ea_Dn_An_indir_reg2           CMP.L           #match_OR_An_indir_r2,D2              ;check reg is equal to 2
00007816  6600 0006               9912                                   BNE             OR_ea_Dn_An_indir_reg3                           ;if not try reg 3
0000781A  6700 0060               9913                                   BEQ             OR_ea_Dn_An_indir_reg2_out                       ;if equal go to output ORroutine
0000781E                          9914  
0000781E  B4BC 00000013           9915  OR_ea_Dn_An_indir_reg3           CMP.L           #match_OR_An_indir_r3,D2              ;check reg is equal to 3
00007824  6600 0006               9916                                   BNE             OR_ea_Dn_An_indir_reg4                           ;if not try reg 4
00007828  6700 005E               9917                                   BEQ             OR_ea_Dn_An_indir_reg3_out                       ;if equal go to output ORroutine
0000782C                          9918      
0000782C  B4BC 00000014           9919  OR_ea_Dn_An_indir_reg4           CMP.L           #match_OR_An_indir_r4,D2              ;check reg is equal to 4
00007832  6600 0006               9920                                   BNE             OR_ea_Dn_An_indir_reg5                           ;if not try reg 5
00007836  6700 005C               9921                                   BEQ             OR_ea_Dn_An_indir_reg4_out                       ;if equal go to output ORroutine
0000783A                          9922          
0000783A  B4BC 00000015           9923  OR_ea_Dn_An_indir_reg5           CMP.L           #match_OR_An_indir_r5,D2              ;check reg is equal to 5
00007840  6600 0006               9924                                   BNE             OR_ea_Dn_An_indir_reg6                           ;if not try reg 6
00007844  6700 005A               9925                                   BEQ             OR_ea_Dn_An_indir_reg5_out                       ;if equal go to output ORroutine
00007848                          9926  
00007848  B4BC 00000016           9927  OR_ea_Dn_An_indir_reg6           CMP.L           #match_OR_An_indir_r6,D2              ;check reg is equal to 6
0000784E  6600 0006               9928                                   BNE             OR_ea_Dn_An_indir_reg7                           ;if not try reg 7
00007852  6700 0058               9929                                   BEQ             OR_ea_Dn_An_indir_reg6_out                       ;if equal go to output ORroutine
00007856                          9930  
00007856  B4BC 00000017           9931  OR_ea_Dn_An_indir_reg7           CMP.L           #match_OR_An_indir_r7,D2              ;check reg is equal to 7
0000785C  6700 005A               9932                                   BEQ             OR_ea_Dn_An_indir_reg7_out                       ;if equal go to output ORroutine
00007860  6600 BE00               9933                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00007864                          9934  
00007864                          9935  ;--------------------Address Register Indirect Output-----------------------
00007864  227C 000089A5           9936  OR_ea_Dn_An_indir_reg0_out                  MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
0000786A  4EB9 00007AB2           9937                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007870                          9938  
00007870  227C 000089AA           9939  OR_ea_Dn_An_indir_reg1_out                  MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00007876  4EB9 00007AB2           9940                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000787C                          9941  
0000787C  227C 000089AF           9942  OR_ea_Dn_An_indir_reg2_out                  MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00007882  4EB9 00007AB2           9943                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007888                          9944  
00007888  227C 000089B4           9945  OR_ea_Dn_An_indir_reg3_out                  MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
0000788E  4EB9 00007AB2           9946                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007894                          9947  
00007894  227C 000089B9           9948  OR_ea_Dn_An_indir_reg4_out                  MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
0000789A  4EB9 00007AB2           9949                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000078A0                          9950  
000078A0  227C 000089BE           9951  OR_ea_Dn_An_indir_reg5_out                  MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
000078A6  4EB9 00007AB2           9952                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000078AC                          9953  
000078AC  227C 000089C3           9954  OR_ea_Dn_An_indir_reg6_out                  MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
000078B2  4EB9 00007AB2           9955                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000078B8                          9956                                          
000078B8  227C 000089C8           9957  OR_ea_Dn_An_indir_reg7_out                  MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
000078BE  4EB9 00007AB2           9958                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000078C4                          9959  
000078C4                          9960  ;------------------Address Register Indirect with Post Increment-----------------------
000078C4  B4BC 00000018           9961  OR_ea_Dn_An_indir_postinc_reg               CMP.L      #match_OR_An_indir_postinc_r0,D2        ;check reg is equal to 0
000078CA  6600 0006               9962                                              BNE        OR_ea_Dn_An_indir_pinc_r1               ;if not try reg 1
000078CE  6700 0064               9963                                              BEQ        OR_ea_Dn_An_indir_pinc_r0_out           ;if equal go to output ORroutine
000078D2                          9964  
000078D2  B4BC 00000019           9965  OR_ea_Dn_An_indir_pinc_r1                   CMP.L      #match_OR_An_indir_postinc_r1,D2        ;check reg is equal to 1
000078D8  6600 0006               9966                                              BNE        OR_ea_Dn_An_indir_pinc_r2               ;if not try reg 2
000078DC  6700 0062               9967                                              BEQ        OR_ea_Dn_An_indir_pinc_r1_out           ;if equal go to output ORroutine
000078E0                          9968  
000078E0  B4BC 0000001A           9969  OR_ea_Dn_An_indir_pinc_r2                   CMP.L      #match_OR_An_indir_postinc_r2,D2        ;check reg is equal to 2
000078E6  6600 0006               9970                                              BNE        OR_ea_Dn_An_indir_pinc_r3               ;if not try reg 3
000078EA  6700 0060               9971                                              BEQ        OR_ea_Dn_An_indir_pinc_r2_out           ;if equal go to output ORroutine
000078EE                          9972  
000078EE  B4BC 0000001B           9973  OR_ea_Dn_An_indir_pinc_r3                   CMP.L      #match_OR_An_indir_postinc_r3,D2        ;check reg is equal to 3
000078F4  6600 0006               9974                                              BNE        OR_ea_Dn_An_indir_pinc_r4               ;if not try reg 4
000078F8  6700 005E               9975                                              BEQ        OR_ea_Dn_An_indir_pinc_r3_out           ;if equal go to output ORroutine
000078FC                          9976   
000078FC  B4BC 0000001C           9977  OR_ea_Dn_An_indir_pinc_r4                   CMP.L      #match_OR_An_indir_postinc_r4,D2        ;check reg is equal to 4
00007902  6600 0006               9978                                              BNE        OR_ea_Dn_An_indir_pinc_r5               ;if not try reg 5
00007906  6700 005C               9979                                              BEQ        OR_ea_Dn_An_indir_pinc_r4_out           ;if equal go to output ORroutine
0000790A                          9980  
0000790A  B4BC 0000001D           9981  OR_ea_Dn_An_indir_pinc_r5                   CMP.L      #match_OR_An_indir_postinc_r5,D2        ;check reg is equal to 5
00007910  6600 0006               9982                                              BNE        OR_ea_Dn_An_indir_pinc_r6               ;if not try reg 6
00007914  6700 005A               9983                                              BEQ        OR_ea_Dn_An_indir_pinc_r5_out           ;if equal go to output ORroutine
00007918                          9984  
00007918  B4BC 0000001E           9985  OR_ea_Dn_An_indir_pinc_r6                   CMP.L      #match_OR_An_indir_postinc_r6,D2        ;check reg is equal to 6
0000791E  6600 0006               9986                                              BNE        OR_ea_Dn_An_indir_pinc_r7               ;if not try reg 7
00007922  6700 0058               9987                                              BEQ        OR_ea_Dn_An_indir_pinc_r6_out           ;if equal go to output ORroutine
00007926                          9988  
00007926  B4BC 0000001F           9989  OR_ea_Dn_An_indir_pinc_r7                   CMP.L      #match_OR_An_indir_postinc_r7,D2        ;check reg is equal to 7
0000792C  6700 005A               9990                                              BEQ        OR_ea_Dn_An_indir_pinc_r7_out           ;if equal go to output ORroutine
00007930  6600 BD30               9991                                              BNE        ERROR                                   :if not equal to an addresssing mode, pritn error
00007934                          9992  
00007934                          9993  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00007934  227C 000089CD           9994  OR_ea_Dn_An_indir_pinc_r0_out               MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
0000793A  4EB9 00007AB2           9995                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007940                          9996  
00007940  227C 000089D3           9997  OR_ea_Dn_An_indir_pinc_r1_out               MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00007946  4EB9 00007AB2           9998                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000794C                          9999  
0000794C  227C 000089D9          10000  OR_ea_Dn_An_indir_pinc_r2_out               MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00007952  4EB9 00007AB2          10001                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operORO
00007958                         10002  
00007958  227C 000089DF          10003  OR_ea_Dn_An_indir_pinc_r3_out               MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
0000795E  4EB9 00007AB2          10004                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007964                         10005  
00007964  227C 000089E5          10006  OR_ea_Dn_An_indir_pinc_r4_out               MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
0000796A  4EB9 00007AB2          10007                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007970                         10008  
00007970  227C 000089EB          10009  OR_ea_Dn_An_indir_pinc_r5_out               MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00007976  4EB9 00007AB2          10010                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000797C                         10011  
0000797C  227C 000089F1          10012  OR_ea_Dn_An_indir_pinc_r6_out               MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00007982  4EB9 00007AB2          10013                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007988                         10014  
00007988  227C 000089F7          10015  OR_ea_Dn_An_indir_pinc_r7_out               MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
0000798E  4EB9 00007AB2          10016                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007994                         10017  
00007994                         10018  ;------------------Address Register Indirect with Pre Decrement-----------------------
00007994  B4BC 00000020          10019  OR_ea_Dn_An_indir_predec                    CMP.L      #match_OR_An_indir_predec_reg0,D2       ;check reg is equal to 0
0000799A  6600 0006              10020                                              BNE        OR_ea_Dn_An_indir_pdec_r1                      ;if not try reg 1
0000799E  6700 0064              10021                                              BEQ        OR_ea_Dn_An_indir_pdec_r0_out               ;if equal go to output ORroutine
000079A2                         10022  
000079A2  B4BC 00000021          10023  OR_ea_Dn_An_indir_pdec_r1                   CMP.L      #match_OR_An_indir_predec_reg1,D2       ;check reg is equal to 1
000079A8  6600 0006              10024                                              BNE        OR_ea_Dn_An_indir_pdec_r2                      ;if not try reg 2
000079AC  6700 0062              10025                                              BEQ        OR_ea_Dn_An_indir_pdec_r1_out               ;if equal go to output ORroutine
000079B0                         10026  
000079B0  B4BC 00000022          10027  OR_ea_Dn_An_indir_pdec_r2                   CMP.L      #match_OR_An_indir_predec_reg2,D2       ;check reg is equal to 2
000079B6  6600 0006              10028                                              BNE        OR_ea_Dn_An_indir_pdec_r3                      ;if not try reg 3
000079BA  6700 0060              10029                                              BEQ        OR_ea_Dn_An_indir_pdec_r2_out               ;if equal go to output ORroutine
000079BE                         10030  
000079BE  B4BC 00000023          10031  OR_ea_Dn_An_indir_pdec_r3                   CMP.L      #match_OR_An_indir_predec_reg3,D2       ;check reg is equal to 3
000079C4  6600 0006              10032                                              BNE        OR_ea_Dn_An_indir_pdec_r4                      ;if not try reg 4
000079C8  6700 005E              10033                                              BEQ        OR_ea_Dn_An_indir_pdec_r3_out               ;if equal go to output ORroutine
000079CC                         10034  
000079CC  B4BC 00000024          10035  OR_ea_Dn_An_indir_pdec_r4                   CMP.L      #match_OR_An_indir_predec_reg4,D2       ;check reg is equal to 4
000079D2  6600 0006              10036                                              BNE        OR_ea_Dn_An_indir_pdec_r5                      ;if not try reg 5
000079D6  6700 005C              10037                                              BEQ        OR_ea_Dn_An_indir_pdec_r4_out               ;if equal go to output ORroutine
000079DA                         10038  
000079DA  B4BC 00000025          10039  OR_ea_Dn_An_indir_pdec_r5                   CMP.L      #match_OR_An_indir_predec_reg5,D2       ;check reg is equal to 5
000079E0  6600 0006              10040                                              BNE        OR_ea_Dn_An_indir_pdec_r6                     ;if not try reg 6
000079E4  6700 005A              10041                                              BEQ        OR_ea_Dn_An_indir_pdec_r5_out               ;if equal go to output ORroutine
000079E8                         10042  
000079E8  B4BC 00000026          10043  OR_ea_Dn_An_indir_pdec_r6                   CMP.L      #match_OR_An_indir_predec_reg6,D2       ;check reg is equal to 6
000079EE  6600 0006              10044                                              BNE        OR_ea_Dn_An_indir_pdec_r7                     ;if not try reg 7
000079F2  6700 0058              10045                                              BEQ        OR_ea_Dn_An_indir_pdec_r6_out               ;if equal go to output ORroutine
000079F6                         10046  
000079F6  B4BC 00000027          10047  OR_ea_Dn_An_indir_pdec_r7                   CMP.L      #match_OR_An_indir_predec_reg7,D2       ;check reg is equal to 7
000079FC  6700 005A              10048                                              BEQ        OR_ea_Dn_An_indir_pdec_r7_out               ;if equal go to output ORroutine
00007A00  6600 BC60              10049                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
00007A04                         10050  
00007A04                         10051  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00007A04  227C 000089FD          10052  OR_ea_Dn_An_indir_pdec_r0_out                   MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
00007A0A  4EB9 00007AB2          10053                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A10                         10054                                              
00007A10  227C 00008A03          10055  OR_ea_Dn_An_indir_pdec_r1_out                   MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
00007A16  4EB9 00007AB2          10056                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A1C                         10057  
00007A1C  227C 00008A09          10058  OR_ea_Dn_An_indir_pdec_r2_out                   MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
00007A22  4EB9 00007AB2          10059                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A28                         10060  
00007A28  227C 00008A0F          10061  OR_ea_Dn_An_indir_pdec_r3_out                   MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
00007A2E  4EB9 00007AB2          10062                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A34                         10063  
00007A34  227C 00008A15          10064  OR_ea_Dn_An_indir_pdec_r4_out                   MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
00007A3A  4EB9 00007AB2          10065                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A40                         10066  
00007A40  227C 00008A1B          10067  OR_ea_Dn_An_indir_pdec_r5_out                   MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
00007A46  4EB9 00007AB2          10068                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A4C                         10069  
00007A4C  227C 00008A21          10070  OR_ea_Dn_An_indir_pdec_r6_out                   MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
00007A52  4EB9 00007AB2          10071                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A58                         10072  
00007A58  227C 00008A27          10073  OR_ea_Dn_An_indir_pdec_r7_out                   MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00007A5E  4EB9 00007AB2          10074                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A64                         10075          
00007A64                         10076  ;------------------Absolute Addressing Output-----------------------
00007A64  22FC 00008A37          10077  OR_ea_Dn_abs_add_word_out                 MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
00007A6A  22C5                   10078                                            MOVE.L      D5,(A1)+                           ;load address                  
00007A6C  4EB9 00007AB2          10079                                            JSR         OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A72                         10080                                             
00007A72                         10081  
00007A72  2A18                   10082  OR_ea_Dn_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00007A74  22FC 00008A37          10083                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
00007A7A  22C5                   10084                                           MOVE.L      D5,(A1)+                           ;load address                  
00007A7C  4EB9 00007AB2          10085                                           JSR         OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007A82                         10086  
00007A82                         10087  ;---------------Immediate Addresing---------------------------
00007A82  2A18                   10088  OR_ea_Dn_immediate_add_out          MOVE.L      (A0)+,D5                             ;capture the immediate address
00007A84  BCBC 000000FC          10089                                      CMP.L       #match_OR_imm_add_word,D6               ;check to see if need to pull word
00007A8A  2A18                   10090                                      MOVE.L      (A0)+,D5                            ;pull the word
00007A8C  6700 0006              10091                                      BEQ         OR_ea_Dn_imm_add_w                           ;if equal go pull word    
00007A90  6600 0010              10092                                      BNE         OR_ea_Dn_imm_add_l                           ;if not equal, go check long
00007A94                         10093                                           
00007A94  22FC 00008A37          10094  OR_ea_Dn_imm_add_w                  MOVE.L     #ea_$,(A1)+                          ;load the $
00007A9A  32C5                   10095                                      MOVE.W     D5,(A1)+                             ;load the word address                           
00007A9C  4EB9 00007AB2          10096                                      JSR        OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007AA2                         10097                                           
00007AA2  2A18                   10098  OR_ea_Dn_imm_add_l                  MOVE.L     (A0)+,D5                             ;pull the long OR increase the pointer
00007AA4  22FC 00008A37          10099                                      MOVE.L     #ea_$,(A1)+                          ;load the $
00007AAA  2245                   10100                                      MOVE.L     D5,A1                               ;move to A1
00007AAC  4EB9 00007AB2          10101                                      JSR        OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007AB2                         10102  
00007AB2                         10103  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00007AB2  4282                   10104  OR_determine_second_op                          CLR.L       D2                          ;clear D2 
00007AB4  84BC 00000E00          10105                                                  OR.L        #mask_OR_An_reg,D2      ;load the mask for the register into D2, masks bit 11-9
00007ABA                         10106                                                  
00007ABA  B4BC 00000000          10107  ea_Dn_OR_reg0                                   CMP.L       #match_OR_reg0,D2       ;check to see if reg equal 0
00007AC0  6600 0006              10108                                                  BNE         ea_Dn_OR_reg1                   ;if not equal got check reg 1
00007AC4  6700 0064              10109                                                  BEQ         ea_Dn_OR_reg0_out               ;if equal go to output
00007AC8                         10110                                                  
00007AC8  B4BC 00000200          10111  ea_Dn_OR_reg1                                   CMP.L       #match_OR_reg1,D2       ;check to see if reg equal 1
00007ACE  6600 0006              10112                                                  BNE         ea_Dn_OR_reg2                   ;if not equal got check reg 2
00007AD2  6700 0062              10113                                                  BEQ         ea_Dn_OR_reg1_out               ;if equal go to output
00007AD6                         10114  
00007AD6  B4BC 00000400          10115  ea_Dn_OR_reg2                                   CMP.L       #match_OR_reg2,D2       ;check to see if reg equal 2
00007ADC  6600 0006              10116                                                  BNE         ea_Dn_OR_reg3                   ;if not equal got check reg 3
00007AE0  6700 0060              10117                                                  BEQ         ea_Dn_OR_reg2_out               ;if equal go to output
00007AE4                         10118  
00007AE4  B4BC 00000600          10119  ea_Dn_OR_reg3                                   CMP.L       #match_OR_reg3,D2       ;check to see if reg equal 3
00007AEA  6600 0006              10120                                                  BNE         ea_Dn_OR_reg4                   ;if not equal got check reg 4
00007AEE  6700 005E              10121                                                  BEQ         ea_Dn_OR_reg3_out               ;if equal go to output
00007AF2                         10122                                                  
00007AF2  B4BC 00000800          10123  ea_Dn_OR_reg4                                   CMP.L       #match_OR_reg4,D2       ;check to see if reg equal 4
00007AF8  6600 0006              10124                                                  BNE         ea_Dn_OR_reg5                   ;if not equal got check reg 5
00007AFC  6700 005C              10125                                                  BEQ         ea_Dn_OR_reg4_out               ;if equal go to output
00007B00                         10126  
00007B00  B4BC 00000A00          10127  ea_Dn_OR_reg5                                   CMP.L       #match_OR_reg5,D2       ;check to see if reg equal 5
00007B06  6600 0006              10128                                                  BNE         ea_Dn_OR_reg6                   ;if not equal got check reg 6
00007B0A  6700 005A              10129                                                  BEQ         ea_Dn_OR_reg5_out               ;if equal go to output
00007B0E                         10130  
00007B0E  B4BC 00000C00          10131  ea_Dn_OR_reg6                                   CMP.L       #match_OR_reg6,D2       ;check to see if reg equal 6
00007B14  6600 0006              10132                                                  BNE         ea_Dn_OR_reg7                   ;if not equal got check reg 7
00007B18  6700 0058              10133                                                  BEQ         ea_Dn_OR_reg6_out               ;if equal go to output          
00007B1C                         10134  
00007B1C  B4BC 00000E00          10135  ea_Dn_OR_reg7                                   CMP.L       #match_OR_reg7,D2       ;check to see if reg equal 7
00007B22  6700 005A              10136                                                  BEQ         ea_Dn_OR_reg7_out               ;if equal go to output
00007B26  6600 BB3A              10137                                                  BNE         ERROR                         ;if not equal to an addresssing mode, pritn error
00007B2A                         10138                                  
00007B2A                         10139  
00007B2A                         10140  ;--------------------Data Output-----------------------
00007B2A  227C 00008965          10141  ea_Dn_OR_reg0_out                               MOVE.L          #ea_D0,A1                        ;load string constant into A1
00007B30  4CDF 7CBE              10142                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007B34  4E75                   10143                                                  RTS
00007B36                         10144                                              
00007B36  227C 00008968          10145  ea_Dn_OR_reg1_out                               MOVE.L          #ea_D1,A1                       ;load string constant into A1
00007B3C  4CDF 7CBE              10146                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007B40  4E75                   10147                                                  RTS
00007B42                         10148                                              
00007B42  227C 0000896B          10149  ea_Dn_OR_reg2_out                               MOVE.L          #ea_D2,A1                       ;load string constant into A1
00007B48  4CDF 7CBE              10150                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007B4C  4E75                   10151                                                  RTS
00007B4E                         10152                                              
00007B4E  227C 0000896E          10153  ea_Dn_OR_reg3_out                               MOVE.L          #ea_D3,A1                       ;load string constant into A1
00007B54  4CDF 7CBE              10154                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007B58  4E75                   10155                                                  RTS
00007B5A                         10156                                              
00007B5A  227C 00008971          10157  ea_Dn_OR_reg4_out                               MOVE.L          #ea_D4,A1                       ;load string constant into A1
00007B60  4CDF 7CBE              10158                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007B64  4E75                   10159                                                  RTS
00007B66                         10160                                              
00007B66  227C 00008974          10161  ea_Dn_OR_reg5_out                               MOVE.L          #ea_D5,A1                       ;load string constant into A1
00007B6C  4CDF 7CBE              10162                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007B70  4E75                   10163                                                  RTS
00007B72                         10164                                              
00007B72  227C 00008977          10165  ea_Dn_OR_reg6_out                               MOVE.L          #ea_D6,A1                       ;load string constant into A1
00007B78  4CDF 7CBE              10166                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007B7C  4E75                   10167                                                  RTS
00007B7E                         10168                                              
00007B7E  227C 0000897A          10169  ea_Dn_OR_reg7_out                               MOVE.L          #ea_D7,A1                       ;load string constant into A1
00007B84  4CDF 7CBE              10170                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007B88  4E75                   10171                                                  RTS             
00007B8A                         10172                                              
00007B8A                         10173                      
00007B8A                         10174  
00007B8A                         10175  
00007B8A                         10176  
00007B8A                         10177  
00007B8A                         10178  
00007B8A                         10179  
00007B8A                         10180  
00007B8A                         10181  
00007B8A                         10182  
00007B8A                         10183  
00007B8A                         10184  
00007B8A                         10185  
00007B8A                         10186  
00007B8A                         10187  
00007B8A                         10188  
00007B8A                         10189  
00007B8A                         10190  
00007B8A                         10191  
00007B8A                         10192  
00007B8A                         10193  
00007B8A                         10194  
00007B8A                         10195  
00007B8A                         10196  
00007B8A                         10197  
00007B8A                         10198  
00007B8A                         10199  
00007B8A                         10200  
00007B8A                         10201  
00007B8A                         10202  
00007B8A                         10203  
00007B8A                         10204                          
00007B8A                         10205  ;------------------------------------------------------------------------------------------------------------------------------------------
00007B8A                         10206  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
00007B8A                         10207  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00007B8A  4282                   10208  OR_Dn_ea                                        CLR.L       D2                                ;clear D2 
00007B8C  243C 00000E00          10209                                                  MOVE.L      #mask_OR_An_reg,D2            ;load the mask for the register into D2, masks bit 11-9
00007B92                         10210                                                  
00007B92  B4BC 00000000          10211  Dn_ea_OR_reg0                                   CMP.L       #match_OR_reg0,D2                   ;check to see if reg equal 0
00007B98  6600 0006              10212                                                  BNE         Dn_ea_OR_reg1                   ;if not equal got check reg 1
00007B9C  6700 0064              10213                                                  BEQ         Dn_ea_OR_reg0_out               ;if equal go to output
00007BA0                         10214                                                  
00007BA0  B4BC 00000200          10215  Dn_ea_OR_reg1                                   CMP.L       #match_OR_reg1,D2                   ;check to see if reg equal 1
00007BA6  6600 0006              10216                                                  BNE         Dn_ea_OR_reg2                   ;if not equal got check reg 2
00007BAA  6700 0062              10217                                                  BEQ         Dn_ea_OR_reg1_out               ;if equal go to output
00007BAE                         10218  
00007BAE  B4BC 00000400          10219  Dn_ea_OR_reg2                                   CMP.L       #match_OR_reg2,D2                   ;check to see if reg equal 2
00007BB4  6600 0006              10220                                                  BNE         Dn_ea_OR_reg3                   ;if not equal got check reg 3
00007BB8  6700 0060              10221                                                  BEQ         Dn_ea_OR_reg2_out               ;if equal go to output
00007BBC                         10222  
00007BBC  B4BC 00000600          10223  Dn_ea_OR_reg3                                   CMP.L       #match_OR_reg3,D2                   ;check to see if reg equal 3
00007BC2  6600 0006              10224                                                  BNE         Dn_ea_OR_reg4                   ;if not equal got check reg 4
00007BC6  6700 005E              10225                                                  BEQ         Dn_ea_OR_reg3_out               ;if equal go to output
00007BCA                         10226                                                  
00007BCA  B4BC 00000800          10227  Dn_ea_OR_reg4                                   CMP.L       #match_OR_reg4,D2                   ;check to see if reg equal 4
00007BD0  6600 0006              10228                                                  BNE         Dn_ea_OR_reg5                   ;if not equal got check reg 5
00007BD4  6700 005C              10229                                                  BEQ         Dn_ea_OR_reg4_out               ;if equal go to output
00007BD8                         10230  
00007BD8  B4BC 00000A00          10231  Dn_ea_OR_reg5                                   CMP.L       #match_OR_reg5,D2                   ;check to see if reg equal 5
00007BDE  6600 0006              10232                                                  BNE         Dn_ea_OR_reg6                   ;if not equal got check reg 6
00007BE2  6700 005A              10233                                                  BEQ         Dn_ea_OR_reg5_out               ;if equal go to output
00007BE6                         10234  
00007BE6  B4BC 00000C00          10235  Dn_ea_OR_reg6                                   CMP.L       #match_OR_reg6,D2                   ;check to see if reg equal 6
00007BEC  6600 0006              10236                                                  BNE         Dn_ea_OR_reg7                   ;if not equal got check reg 7
00007BF0  6700 0058              10237                                                  BEQ         Dn_ea_OR_reg6_out               ;if equal go to output          
00007BF4                         10238  
00007BF4  B4BC 00000E00          10239  Dn_ea_OR_reg7                                   CMP.L       #match_OR_reg7,D2                   ;check to see if reg equal 7
00007BFA  6700 005A              10240                                                  BEQ         Dn_ea_OR_reg7_out               ;if equal go to output
00007BFE  6600 BA62              10241                                                  BNE         ERROR                                ;if not equal to an addresssing mode, pritn error
00007C02                         10242                                  
00007C02                         10243  
00007C02                         10244  ;--------------------Data Output-----------------------
00007C02  227C 00008965          10245  Dn_ea_OR_reg0_out             MOVE.L            #ea_D0,A1                                          ;load string constant into A1
00007C08  4EB9 00007C62          10246                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007C0E                         10247                                              
00007C0E  227C 00008968          10248  Dn_ea_OR_reg1_out             MOVE.L            #ea_D1,A1                                       ;load string constant into A1
00007C14  4EB9 00007C62          10249                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007C1A                         10250                                              
00007C1A  227C 0000896B          10251  Dn_ea_OR_reg2_out             MOVE.L            #ea_D2,A1                                       ;load string constant into A1
00007C20  4EB9 00007C62          10252                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007C26                         10253                                              
00007C26  227C 0000896E          10254  Dn_ea_OR_reg3_out             MOVE.L            #ea_D3,A1                                           ;load string constant into A1
00007C2C  4EB9 00007C62          10255                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007C32                         10256                                              
00007C32  227C 00008971          10257  Dn_ea_OR_reg4_out             MOVE.L            #ea_D4,A1                                           ;load string constant into A1
00007C38  4EB9 00007C62          10258                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007C3E                         10259                                                  
00007C3E  227C 00008974          10260  Dn_ea_OR_reg5_out             MOVE.L            #ea_D5,A1                                           ;load string constant into A1
00007C44  4EB9 00007C62          10261                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007C4A                         10262                                              
00007C4A  227C 00008977          10263  Dn_ea_OR_reg6_out             MOVE.L            #ea_D6,A1                                           ;load string constant into A1
00007C50  4EB9 00007C62          10264                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007C56                         10265                                              
00007C56  227C 0000897A          10266  Dn_ea_OR_reg7_out             MOVE.L            #ea_D7,A1                                           ;load string constant into A1
00007C5C  4EB9 00007C62          10267                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007C62                         10268                                              
00007C62                         10269  ;------------------------------------------------------Determine Second OperOR----------------------------------------------------------------
00007C62  4241                   10270  OR_determine_second_operand      CLR               D1                                            ;clear D1 to load new mask                                
00007C64  223C 00000038          10271                                   MOVE.L             #mask_OR_ea_mode,D1                        ;move the mask to D1
00007C6A                         10272  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00007C6A  B2BC 00000010          10273  OR_Dn_ea_add_reg_indir           CMP.L             #match_OR_An_indir,D1                      ;check to see if mode is add reg indir
00007C70  6600 0006              10274                                   BNE               OR_Dn_ea_add_reg_indir_pdec                          ;if not, go check add reg indir predec 
00007C74  6700 0042              10275                                   BEQ               OR_Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
00007C78                         10276             
00007C78  B2BC 00000020          10277  OR_Dn_ea_add_reg_indir_pdec      CMP.L             #match_OR_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00007C7E  6600 0006              10278                                   BNE               OR_Dn_ea_add_reg_indir_pinc                         ;if not go check add reg indir/predec
00007C82  6700 01DA              10279                                   BEQ               OR_Dn_ea_An_indir_predec                               ;if equal go figure out the register
00007C86                         10280                        
00007C86  B2BC 00000018          10281  OR_Dn_ea_add_reg_indir_pinc      CMP.L             #match_OR_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00007C8C  6600 0006              10282                                   BNE               OR_Dn_ea_abs_add_word                                  ;if not go check abs add word
00007C90  6700 00FC              10283                                   BEQ               OR_Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
00007C94                         10284  
00007C94  243C 0000003F          10285  OR_Dn_ea_abs_add_word            MOVE.L             #mask_OR_abs_add,D2                        ;load mask to determine if abs add word or long
00007C9A                         10286                                   
00007C9A  B4BC 00000038          10287                                   CMP.L             #match_OR_abs_add_word,D2                  ;check if abs add word
00007CA0  2A18                   10288                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00007CA2  6600 0006              10289                                   BNE               OR_Dn_ea_abs_add_long                                  ;if not go check abs add long
00007CA6  6700 0286              10290                                   BEQ               OR_Dn_ea_abs_add_word_out                              ;if equal go to output
00007CAA                         10291    
00007CAA  B4BC 00000039          10292  OR_Dn_ea_abs_add_long            CMP.L             #match_OR_abs_add_long,D2                  ;check to see if abs add long
00007CB0  6700 028A              10293                                   BEQ               OR_Dn_ea_abs_add_long_out                              ;if equal go to output
00007CB4  6600 B9AC              10294                                   BNE               ERROR                                         ;if not equal go to error mesage OR routine
00007CB8                         10295  
00007CB8                         10296  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00007CB8                         10297                                   
00007CB8                         10298                                   
00007CB8                         10299  ;------------------Address Register Indirect-----------------------
00007CB8  243C 0000003F          10300  OR_Dn_ea_An_indir_reg            MOVE.L          #mask_OR_ea_reg_OR_mode,D2         ;load the mask into D2 for the mode OR the register
00007CBE  B4BC 00000010          10301                                   CMP.L           #match_OR_An_indir_r0,D2              ;check reg is equal to 0
00007CC4  6600 0006              10302                                   BNE             OR_Dn_ea_An_indir_reg1                           ;if not try reg 1
00007CC8  6700 0064              10303                                   BEQ             OR_Dn_ea_An_indir_reg0_out                       ;if equal go to output ORroutine
00007CCC                         10304  
00007CCC  B4BC 00000011          10305  OR_Dn_ea_An_indir_reg1           CMP.L           #match_OR_An_indir_r1,D2              ;check reg is equal to 1
00007CD2  6600 0006              10306                                   BNE             OR_Dn_ea_An_indir_reg2                           ;if not try reg 2
00007CD6  6700 0062              10307                                   BEQ             OR_Dn_ea_An_indir_reg1_out                       ;if equal go to output ORroutine
00007CDA                         10308  
00007CDA  B4BC 00000012          10309  OR_Dn_ea_An_indir_reg2           CMP.L           #match_OR_An_indir_r2,D2              ;check reg is equal to 2
00007CE0  6600 0006              10310                                   BNE             OR_Dn_ea_An_indir_reg3                           ;if not try reg 3
00007CE4  6700 0060              10311                                   BEQ             OR_Dn_ea_An_indir_reg2_out                       ;if equal go to output ORroutine
00007CE8                         10312  
00007CE8  B4BC 00000013          10313  OR_Dn_ea_An_indir_reg3           CMP.L           #match_OR_An_indir_r3,D2              ;check reg is equal to 3
00007CEE  6600 0006              10314                                   BNE             OR_Dn_ea_An_indir_reg4                           ;if not try reg 4
00007CF2  6700 005E              10315                                   BEQ             OR_Dn_ea_An_indir_reg3_out                       ;if equal go to output ORroutine
00007CF6                         10316      
00007CF6  B4BC 00000014          10317  OR_Dn_ea_An_indir_reg4           CMP.L           #match_OR_An_indir_r4,D2              ;check reg is equal to 4
00007CFC  6600 0006              10318                                   BNE             OR_Dn_ea_An_indir_reg5                           ;if not try reg 5
00007D00  6700 005C              10319                                   BEQ             OR_Dn_ea_An_indir_reg4_out                       ;if equal go to output ORroutine
00007D04                         10320          
00007D04  B4BC 00000015          10321  OR_Dn_ea_An_indir_reg5           CMP.L           #match_OR_An_indir_r5,D2              ;check reg is equal to 5
00007D0A  6600 0006              10322                                   BNE             OR_Dn_ea_An_indir_reg6                           ;if not try reg 6
00007D0E  6700 005A              10323                                   BEQ             OR_Dn_ea_An_indir_reg5_out                       ;if equal go to output ORroutine
00007D12                         10324  
00007D12  B4BC 00000016          10325  OR_Dn_ea_An_indir_reg6           CMP.L           #match_OR_An_indir_r6,D2              ;check reg is equal to 6
00007D18  6600 0006              10326                                   BNE             OR_Dn_ea_An_indir_reg7                           ;if not try reg 7
00007D1C  6700 0058              10327                                   BEQ             OR_Dn_ea_An_indir_reg6_out                       ;if equal go to output ORroutine
00007D20                         10328  
00007D20  B4BC 00000017          10329  OR_Dn_ea_An_indir_reg7           CMP.L           #match_OR_An_indir_r7,D2              ;check reg is equal to 7
00007D26  6700 005A              10330                                   BEQ             OR_Dn_ea_An_indir_reg7_out                       ;if equal go to output ORroutine
00007D2A  6600 B936              10331                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00007D2E                         10332  
00007D2E                         10333  ;--------------------Address Register Indirect Output-----------------------
00007D2E  227C 000089A5          10334  OR_Dn_ea_An_indir_reg0_out          MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00007D34  4CDF 7CBE              10335                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007D38  4E75                   10336                                       RTS
00007D3A                         10337  
00007D3A  227C 000089AA          10338  OR_Dn_ea_An_indir_reg1_out          MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00007D40  4CDF 7CBE              10339                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007D44  4E75                   10340                                       RTS
00007D46                         10341  
00007D46  227C 000089AF          10342  OR_Dn_ea_An_indir_reg2_out          MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00007D4C  4CDF 7CBE              10343                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007D50  4E75                   10344                                       RTS
00007D52                         10345  
00007D52  227C 000089B4          10346  OR_Dn_ea_An_indir_reg3_out          MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00007D58  4CDF 7CBE              10347                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007D5C  4E75                   10348                                       RTS
00007D5E                         10349  
00007D5E  227C 000089B9          10350  OR_Dn_ea_An_indir_reg4_out          MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00007D64  4CDF 7CBE              10351                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007D68  4E75                   10352                                       RTS
00007D6A                         10353  
00007D6A  227C 000089BE          10354  OR_Dn_ea_An_indir_reg5_out          MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00007D70  4CDF 7CBE              10355                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007D74  4E75                   10356                                       RTS
00007D76                         10357  
00007D76  227C 000089C3          10358  OR_Dn_ea_An_indir_reg6_out          MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00007D7C  4CDF 7CBE              10359                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007D80  4E75                   10360                                       RTS
00007D82                         10361                                          
00007D82  227C 000089C8          10362  OR_Dn_ea_An_indir_reg7_out          MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00007D88  4CDF 7CBE              10363                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007D8C  4E75                   10364                                      RTS
00007D8E                         10365  
00007D8E                         10366  ;------------------Address Register Indirect with Post Increment-----------------------
00007D8E  B4BC 00000018          10367  OR_Dn_ea_An_indir_postinc_reg               CMP.L      #match_OR_An_indir_postinc_r0,D2                 ;check reg is equal to 0
00007D94  6600 0006              10368                                              BNE        OR_Dn_ea_An_indir_pinc_r1                      ;if not try reg 1
00007D98  6700 0064              10369                                              BEQ        OR_Dn_ea_An_indir_pinc_r0_out                  ;if equal go to output ORroutine
00007D9C                         10370  
00007D9C  B4BC 00000019          10371  OR_Dn_ea_An_indir_pinc_r1                   CMP.L      #match_OR_An_indir_postinc_r1,D2                 ;check reg is equal to 1
00007DA2  6600 0006              10372                                              BNE        OR_Dn_ea_An_indir_pinc_r2                      ;if not try reg 2
00007DA6  6700 0062              10373                                              BEQ        OR_Dn_ea_An_indir_pinc_r1_out                  ;if equal go to output ORroutine
00007DAA                         10374  
00007DAA  B4BC 0000001A          10375  OR_Dn_ea_An_indir_pinc_r2                   CMP.L      #match_OR_An_indir_postinc_r2,D2                ;check reg is equal to 2
00007DB0  6600 0006              10376                                              BNE        OR_Dn_ea_An_indir_pinc_r3                      ;if not try reg 3
00007DB4  6700 0060              10377                                              BEQ        OR_Dn_ea_An_indir_pinc_r2_out                  ;if equal go to output ORroutine
00007DB8                         10378  
00007DB8  B4BC 0000001B          10379  OR_Dn_ea_An_indir_pinc_r3                   CMP.L      #match_OR_An_indir_postinc_r3,D2               ;check reg is equal to 3
00007DBE  6600 0006              10380                                              BNE        OR_Dn_ea_An_indir_pinc_r4                      ;if not try reg 4
00007DC2  6700 005E              10381                                              BEQ        OR_Dn_ea_An_indir_pinc_r3_out                  ;if equal go to output ORroutine
00007DC6                         10382   
00007DC6  B4BC 0000001C          10383  OR_Dn_ea_An_indir_pinc_r4                   CMP.L      #match_OR_An_indir_postinc_r4,D2               ;check reg is equal to 4
00007DCC  6600 0006              10384                                              BNE        OR_Dn_ea_An_indir_pinc_r5                      ;if not try reg 5
00007DD0  6700 005C              10385                                              BEQ        OR_Dn_ea_An_indir_pinc_r4_out                  ;if equal go to output ORroutine
00007DD4                         10386  
00007DD4  B4BC 0000001D          10387  OR_Dn_ea_An_indir_pinc_r5                   CMP.L      #match_OR_An_indir_postinc_r5,D2                 ;check reg is equal to 5
00007DDA  6600 0006              10388                                              BNE        OR_Dn_ea_An_indir_pinc_r6                      ;if not try reg 6
00007DDE  6700 005A              10389                                              BEQ        OR_Dn_ea_An_indir_pinc_r5_out                  ;if equal go to output ORroutine
00007DE2                         10390  
00007DE2  B4BC 0000001E          10391  OR_Dn_ea_An_indir_pinc_r6                   CMP.L      #match_OR_An_indir_postinc_r6,D2                 ;check reg is equal to 6
00007DE8  6600 0006              10392                                              BNE        OR_Dn_ea_An_indir_pinc_r7                        ;if not try reg 7
00007DEC  6700 0058              10393                                              BEQ        OR_Dn_ea_An_indir_pinc_r6_out                    ;if equal go to output ORroutine
00007DF0                         10394  
00007DF0  B4BC 0000001F          10395  OR_Dn_ea_An_indir_pinc_r7                   CMP.L      #match_OR_An_indir_postinc_r7,D2                 ;check reg is equal to 7
00007DF6  6700 005A              10396                                              BEQ        OR_Dn_ea_An_indir_pinc_r7_out                    ;if equal go to output ORroutine
00007DFA  6600 B866              10397                                              BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
00007DFE                         10398  
00007DFE                         10399  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00007DFE  227C 000089CD          10400  OR_Dn_ea_An_indir_pinc_r0_out           MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00007E04  4CDF 7CBE              10401                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007E08  4E75                   10402                                          RTS
00007E0A                         10403  
00007E0A  227C 000089D3          10404  OR_Dn_ea_An_indir_pinc_r1_out           MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00007E10  4CDF 7CBE              10405                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007E14  4E75                   10406                                          RTS
00007E16                         10407  
00007E16  227C 000089D9          10408  OR_Dn_ea_An_indir_pinc_r2_out           MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00007E1C  4CDF 7CBE              10409                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007E20  4E75                   10410                                          RTS
00007E22                         10411  
00007E22  227C 000089DF          10412  OR_Dn_ea_An_indir_pinc_r3_out           MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00007E28  4CDF 7CBE              10413                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007E2C  4E75                   10414                                          RTS
00007E2E                         10415  
00007E2E  227C 000089E5          10416  OR_Dn_ea_An_indir_pinc_r4_out           MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00007E34  4CDF 7CBE              10417                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007E38  4E75                   10418                                          RTS
00007E3A                         10419  
00007E3A  227C 000089EB          10420  OR_Dn_ea_An_indir_pinc_r5_out           MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00007E40  4CDF 7CBE              10421                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007E44  4E75                   10422                                          RTS
00007E46                         10423  
00007E46  227C 000089F1          10424  OR_Dn_ea_An_indir_pinc_r6_out           MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00007E4C  4CDF 7CBE              10425                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007E50  4E75                   10426                                          RTS
00007E52                         10427  
00007E52  227C 000089F7          10428  OR_Dn_ea_An_indir_pinc_r7_out           MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00007E58  4CDF 7CBE              10429                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007E5C  4E75                   10430                                          RTS
00007E5E                         10431  
00007E5E                         10432  ;------------------Address Register Indirect with Pre Decrement-----------------------
00007E5E  B4BC 00000020          10433  OR_Dn_ea_An_indir_predec                    CMP.L      #match_OR_An_indir_predec_reg0,D2       ;check reg is equal to 0
00007E64  6600 0006              10434                                              BNE        OR_Dn_ea_An_indir_pdec_r1                      ;if not try reg 1
00007E68  6700 0064              10435                                              BEQ        OR_Dn_ea_An_indir_pdec_r0_out               ;if equal go to output ORroutine
00007E6C                         10436  
00007E6C  B4BC 00000021          10437  OR_Dn_ea_An_indir_pdec_r1                   CMP.L      #match_OR_An_indir_predec_reg1,D2       ;check reg is equal to 1
00007E72  6600 0006              10438                                              BNE        OR_Dn_ea_An_indir_pdec_r2                      ;if not try reg 2
00007E76  6700 0062              10439                                              BEQ        OR_Dn_ea_An_indir_pdec_r1_out               ;if equal go to output ORroutine
00007E7A                         10440  
00007E7A  B4BC 00000022          10441  OR_Dn_ea_An_indir_pdec_r2                   CMP.L      #match_OR_An_indir_predec_reg2,D2       ;check reg is equal to 2
00007E80  6600 0006              10442                                              BNE        OR_Dn_ea_An_indir_pdec_r3                      ;if not try reg 3
00007E84  6700 0060              10443                                              BEQ        OR_Dn_ea_An_indir_pdec_r2_out               ;if equal go to output ORroutine
00007E88                         10444  
00007E88  B4BC 00000023          10445  OR_Dn_ea_An_indir_pdec_r3                   CMP.L      #match_OR_An_indir_predec_reg3,D2       ;check reg is equal to 3
00007E8E  6600 0006              10446                                              BNE        OR_Dn_ea_An_indir_pdec_r4                      ;if not try reg 4
00007E92  6700 005E              10447                                              BEQ        OR_Dn_ea_An_indir_pdec_r3_out               ;if equal go to output ORroutine
00007E96                         10448  
00007E96  B4BC 00000024          10449  OR_Dn_ea_An_indir_pdec_r4                   CMP.L      #match_OR_An_indir_predec_reg4,D2       ;check reg is equal to 4
00007E9C  6600 0006              10450                                              BNE        OR_Dn_ea_An_indir_pdec_r5                      ;if not try reg 5
00007EA0  6700 005C              10451                                              BEQ        OR_Dn_ea_An_indir_pdec_r4_out               ;if equal go to output ORroutine
00007EA4                         10452  
00007EA4  B4BC 00000025          10453  OR_Dn_ea_An_indir_pdec_r5                   CMP.L      #match_OR_An_indir_predec_reg5,D2       ;check reg is equal to 5
00007EAA  6600 0006              10454                                              BNE        OR_Dn_ea_An_indir_pdec_r6                     ;if not try reg 6
00007EAE  6700 005A              10455                                              BEQ        OR_Dn_ea_An_indir_pdec_r5_out               ;if equal go to output ORroutine
00007EB2                         10456  
00007EB2  B4BC 00000026          10457  OR_Dn_ea_An_indir_pdec_r6                   CMP.L      #match_OR_An_indir_predec_reg6,D2       ;check reg is equal to 6
00007EB8  6600 0006              10458                                              BNE        OR_Dn_ea_An_indir_pdec_r7                     ;if not try reg 7
00007EBC  6700 0058              10459                                              BEQ        OR_Dn_ea_An_indir_pdec_r6_out               ;if equal go to output ORroutine
00007EC0                         10460  
00007EC0  B4BC 00000027          10461  OR_Dn_ea_An_indir_pdec_r7                   CMP.L      #match_OR_An_indir_predec_reg7,D2       ;check reg is equal to 7
00007EC6  6700 005A              10462                                              BEQ        OR_Dn_ea_An_indir_pdec_r7_out               ;if equal go to output ORroutine
00007ECA  6600 B796              10463                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
00007ECE                         10464  
00007ECE                         10465  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00007ECE  227C 000089FD          10466  OR_Dn_ea_An_indir_pdec_r0_out                  MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00007ED4  4CDF 7CBE              10467                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007ED8  4E75                   10468                                                 RTS
00007EDA                         10469                                              
00007EDA  227C 00008A03          10470  OR_Dn_ea_An_indir_pdec_r1_out                  MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00007EE0  4CDF 7CBE              10471                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007EE4  4E75                   10472                                                 RTS
00007EE6                         10473  
00007EE6  227C 00008A09          10474  OR_Dn_ea_An_indir_pdec_r2_out                  MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00007EEC  4CDF 7CBE              10475                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007EF0  4E75                   10476                                                 RTS
00007EF2                         10477  
00007EF2  227C 00008A0F          10478  OR_Dn_ea_An_indir_pdec_r3_out                  MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00007EF8  4CDF 7CBE              10479                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007EFC  4E75                   10480                                                 RTS
00007EFE                         10481  
00007EFE  227C 00008A15          10482  OR_Dn_ea_An_indir_pdec_r4_out                  MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00007F04  4CDF 7CBE              10483                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007F08  4E75                   10484                                                 RTS
00007F0A                         10485  
00007F0A  227C 00008A1B          10486  OR_Dn_ea_An_indir_pdec_r5_out                  MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00007F10  4CDF 7CBE              10487                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007F14  4E75                   10488                                                 RTS
00007F16                         10489  
00007F16  227C 00008A21          10490  OR_Dn_ea_An_indir_pdec_r6_out                  MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00007F1C  4CDF 7CBE              10491                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007F20  4E75                   10492                                                 RTS
00007F22                         10493  
00007F22  227C 00008A27          10494  OR_Dn_ea_An_indir_pdec_r7_out                  MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00007F28  4CDF 7CBE              10495                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007F2C  4E75                   10496                                                 RTS
00007F2E                         10497                                              
00007F2E                         10498  ;------------------Absolute Addressing Output-----------------------
00007F2E  22FC 00008A37          10499  OR_Dn_ea_abs_add_word_out             MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
00007F34  22C5                   10500                                        MOVE.L      D5,(A1)+                           ;load address                  
00007F36  4CDF 7CBE              10501                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007F3A  4E75                   10502                                        RTS                                            :return to ORroutine
00007F3C                         10503                                             
00007F3C                         10504  
00007F3C  2A18                   10505  OR_Dn_ea_abs_add_long_out             MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00007F3E  22FC 00008A37          10506                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
00007F44  22C5                   10507                                        MOVE.L      D5,(A1)+                           ;load address                  
00007F46  4CDF 7CBE              10508                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00007F4A  4E75                   10509                                        RTS                                            :return to ORroutine                                                                             
00007F4C                         10510  
00007F4C                         10511  
00007F4C  =000001C0              10512  mask_OR_opmode                          EQU         $01C0                   ;mask for the opmode to determine operOR order
00007F4C                         10513  
00007F4C  =00000038              10514  mask_OR_ea_mode                 EQU         $0038
00007F4C  =0000003F              10515  mask_OR_abs_add                 EQU         $003F
00007F4C  =0000003F              10516  mask_OR_ea_reg_OR_mode          EQU         $003F
00007F4C  =00000E00              10517  mask_OR_An_reg                  EQU         $0E00
00007F4C                         10518  
00007F4C                         10519  
00007F4C  =00000100              10520  match_OR_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
00007F4C  =00000140              10521  match_OR_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
00007F4C  =00000180              10522  match_OR_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
00007F4C                         10523  
00007F4C  =00000000              10524  match_OR_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
00007F4C  =00000040              10525  match_OR_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
00007F4C  =00000080              10526  match_OR_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
00007F4C                         10527  
00007F4C                         10528  
00007F4C                         10529  
00007F4C  =00000000              10530  match_OR_Dn                     EQU         $0000
00007F4C  =00000010              10531  match_OR_An_indir                   EQU         $0010
00007F4C  =00000020              10532  match_OR_An_indir_predec            EQU         $0020
00007F4C  =00000018              10533  match_OR_An_indir_postinc           EQU         $0018
00007F4C  =00000038              10534  match_OR_abs_add_word               EQU         $0038
00007F4C  =00000039              10535  match_OR_abs_add_long               EQU         $0039
00007F4C                         10536  
00007F4C  =00000000              10537  match_OR_D0                         EQU         $0000
00007F4C  =00000001              10538  match_OR_D1                         EQU         $0001
00007F4C  =00000002              10539  match_OR_D2                         EQU         $0002
00007F4C  =00000003              10540  match_OR_D3                         EQU         $0003
00007F4C  =00000004              10541  match_OR_D4                         EQU         $0004
00007F4C  =00000005              10542  match_OR_D5                         EQU         $0005
00007F4C  =00000006              10543  match_OR_D6                         EQU         $0006
00007F4C  =00000007              10544  match_OR_D7                         EQU         $0007
00007F4C                         10545  
00007F4C  =00000008              10546  match_OR_A0                         EQU         $0008
00007F4C  =00000009              10547  match_OR_A1                         EQU         $0009
00007F4C  =0000000A              10548  match_OR_A2                         EQU         $000A
00007F4C  =0000000B              10549  match_OR_A3                         EQU         $000B
00007F4C  =0000000C              10550  match_OR_A4                         EQU         $000C
00007F4C  =0000000D              10551  match_OR_A5                         EQU         $000D
00007F4C  =0000000E              10552  match_OR_A6                         EQU         $000E
00007F4C  =0000000F              10553  match_OR_A7                         EQU         $000F
00007F4C                         10554  
00007F4C  =00000010              10555  match_OR_An_indir_r0                    EQU         $0010
00007F4C  =00000011              10556  match_OR_An_indir_r1                    EQU         $0011
00007F4C  =00000012              10557  match_OR_An_indir_r2                    EQU         $0012
00007F4C  =00000013              10558  match_OR_An_indir_r3                    EQU         $0013
00007F4C  =00000014              10559  match_OR_An_indir_r4                    EQU         $0014
00007F4C  =00000015              10560  match_OR_An_indir_r5                    EQU         $0015
00007F4C  =00000016              10561  match_OR_An_indir_r6                    EQU         $0016
00007F4C  =00000017              10562  match_OR_An_indir_r7                    EQU         $0017
00007F4C                         10563  
00007F4C  =00000018              10564  match_OR_An_indir_postinc_r0        EQU         $0018
00007F4C  =00000019              10565  match_OR_An_indir_postinc_r1        EQU         $0019
00007F4C  =0000001A              10566  match_OR_An_indir_postinc_r2        EQU         $001A
00007F4C  =0000001B              10567  match_OR_An_indir_postinc_r3        EQU         $001B
00007F4C  =0000001C              10568  match_OR_An_indir_postinc_r4        EQU         $001C
00007F4C  =0000001D              10569  match_OR_An_indir_postinc_r5        EQU         $001D
00007F4C  =0000001E              10570  match_OR_An_indir_postinc_r6        EQU         $001E
00007F4C  =0000001F              10571  match_OR_An_indir_postinc_r7        EQU         $001F
00007F4C                         10572  
00007F4C  =00000020              10573  match_OR_An_indir_predec_reg0           EQU         $0020
00007F4C  =00000021              10574  match_OR_An_indir_predec_reg1           EQU         $0021
00007F4C  =00000022              10575  match_OR_An_indir_predec_reg2           EQU         $0022
00007F4C  =00000023              10576  match_OR_An_indir_predec_reg3           EQU         $0023
00007F4C  =00000024              10577  match_OR_An_indir_predec_reg4           EQU         $0024
00007F4C  =00000025              10578  match_OR_An_indir_predec_reg5           EQU         $0025
00007F4C  =00000026              10579  match_OR_An_indir_predec_reg6           EQU         $0026
00007F4C  =00000027              10580  match_OR_An_indir_predec_reg7           EQU         $0027
00007F4C                         10581  
00007F4C  =0000003C              10582  match_OR_imm_add                           EQU         $003C
00007F4C  =000000FC              10583  match_OR_imm_add_word                      EQU         $00FC
00007F4C  =000001FC              10584  match_OR_imm_add_long                      EQU         $01FC
00007F4C                         10585  
00007F4C  =00000000              10586  match_OR_reg0                           EQU         $0000
00007F4C  =00000200              10587  match_OR_reg1                           EQU         $0200
00007F4C  =00000400              10588  match_OR_reg2                           EQU         $0400
00007F4C  =00000600              10589  match_OR_reg3                           EQU         $0600
00007F4C  =00000800              10590  match_OR_reg4                           EQU         $0800
00007F4C  =00000A00              10591  match_OR_reg5                           EQU         $0A00
00007F4C  =00000C00              10592  match_OR_reg6                           EQU         $0C00
00007F4C  =00000E00              10593  match_OR_reg7                           EQU         $0E00
00007F4C                         10594  
00007F4C                         10595  
00007F4C                         10596  
00007F4C                         10597  
00007F4C                         10598  -------------------- end include --------------------
00007F4C                         10599              INCLUDE 'ROD Subroutine.x68'
00007F4C                         10600  
00007F4C  48E7 7D3E              10601  ROD_sub                          MOVEM.L           D1-D5/D7/A2-A6, -(SP)                    ;preserve the registers,\ 
00007F50                         10602                                   
00007F50                         10603  ;------------------------Determine Shift Type-----------------------------------------------------------------
00007F50  C2BC 000000C0          10604  ROD_shift_type                   AND.L              #mask_ROD_shift_type,D1                 ;load mask into D1
00007F56  B2BC 000000C0          10605                                   CMP.L              #match_ROD_mem_shift,D1                 ;check to see if memory shift
00007F5C  6700 0006              10606                                   BEQ                ROD_mem_shift                               ;if equal go to mem shift subroutine
00007F60  6600 02EE              10607                                   BNE                ROD_reg_shift                               ;if ROD mem shift, go to reg shift
00007F64                         10608  
00007F64                         10609  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
00007F64  4241                   10610  ROD_mem_shift                    CLR               D1                                        ;clear shift mask
00007F66  C2BC 00000038          10611                                   AND.L             #mask_ROD_ea_mode,D1                      ;move the mask to D1
00007F6C                         10612  
00007F6C  B2BC 00000010          10613  ROD_An_indir                     CMP.L             #match_ROD_An_indir,D1                    ;check to see if mode is add reg indir
00007F72  6600 0014              10614                                   BNE               ROD_An_indir_predec                           ;if ROD, go check add reg indir predec 
00007F76  6700 0042              10615                                   BEQ               ROD_An_indir_reg                              ;if equal go figure out the register           
00007F7A                         10616            
00007F7A  B2BC 00000020          10617  ROD_An_indir_postinc             CMP.L             #match_ROD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
00007F80  6600 0006              10618                                   BNE               ROD_An_indir_predec                           ;if ROD go check add reg indir/predec
00007F84  6700 010C              10619                                   BEQ               ROD_An_indir_postinc_reg                      ;if equal go figure out the register
00007F88                         10620                        
00007F88  B2BC 00000018          10621  ROD_An_indir_predec              CMP.L             #match_ROD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
00007F8E  6600 0006              10622                                   BNE               ROD_abs_add_word                              ;if ROD go check abs add word
00007F92  6700 01CE              10623                                   BEQ               ROD_An_indir_predec_reg                       ;if equal go figure out the register
00007F96                         10624  
00007F96  C4BC 0000003F          10625  ROD_abs_add_word                 AND.L             #mask_ROD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
00007F9C                         10626                                   
00007F9C  B4BC 00000039          10627                                   CMP.L             #match_ROD_abs_add_word,D2                ;check if abs add word
00007FA2  2A18                   10628                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00007FA4  6600 0006              10629                                   BNE               ROD_abs_add_long                              ;if ROD go check abs add long
00007FA8  6700 0288              10630                                   BEQ               ROD_abs_add_word_out                          ;if equal go to output
00007FAC                         10631    
00007FAC  B4BC 0000003C          10632  ROD_abs_add_long                 CMP.L             #match_ROD_abs_add_long,D2                ;check to see if abs add long
00007FB2  6700 028C              10633                                   BEQ               ROD_abs_add_long_out                          ;if equal go to output
00007FB6  6600 B6AA              10634                                   BNE               ERROR                                     ;if ROD equal to an addresssing mode, pritn error
00007FBA                         10635                               
00007FBA                         10636  
00007FBA                         10637  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00007FBA                         10638  ;------------------Address Register Indirect-----------------------
00007FBA  4242                   10639  ROD_An_indir_reg                            CLR             D2                                      ;make sure D2 is empty
00007FBC  C4BC 0000003F          10640                                              AND.L           #mask_ROD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00007FC2                         10641  
00007FC2  B4BC 00000010          10642                                              CMP.L           #match_ROD_An_indir_r0,D2              ;check reg is equal to 0
00007FC8  6600 0006              10643                                              BNE             ROD_An_indir_reg1                            ;if ROD try reg 1
00007FCC  6700 0064              10644                                              BEQ             ROD_An_indir_reg0_out                     ;if equal go to output subroutine
00007FD0                         10645  
00007FD0  B4BC 00000011          10646  ROD_An_indir_reg1                           CMP.L           #match_ROD_An_indir_r1,D2              ;check reg is equal to 1
00007FD6  6600 0006              10647                                              BNE             ROD_An_indir_reg2                            ;if ROD try reg 2
00007FDA  6700 0062              10648                                              BEQ             ROD_An_indir_reg1_out                     ;if equal go to output subroutine
00007FDE                         10649  
00007FDE  B4BC 00000012          10650  ROD_An_indir_reg2                           CMP.L           #match_ROD_An_indir_r2,D2              ;check reg is equal to 2
00007FE4  6600 0006              10651                                              BNE             ROD_An_indir_reg3                            ;if ROD try reg 3
00007FE8  6700 0060              10652                                              BEQ             ROD_An_indir_reg2_out                     ;if equal go to output subroutine
00007FEC                         10653  
00007FEC  B4BC 00000013          10654  ROD_An_indir_reg3                           CMP.L           #match_ROD_An_indir_r3,D2              ;check reg is equal to 3
00007FF2  6600 0006              10655                                              BNE             ROD_An_indir_reg4                            ;if ROD try reg 4
00007FF6  6700 005E              10656                                              BEQ             ROD_An_indir_reg3_out                     ;if equal go to output subroutine
00007FFA                         10657  
00007FFA  B4BC 00000014          10658  ROD_An_indir_reg4                           CMP.L           #match_ROD_An_indir_r4,D2              ;check reg is equal to 4
00008000  6600 0006              10659                                              BNE             ROD_An_indir_reg5                            ;if ROD try reg 5
00008004  6700 005C              10660                                              BEQ             ROD_An_indir_reg4_out                    ;if equal go to output subroutine
00008008                         10661  
00008008  B4BC 00000015          10662  ROD_An_indir_reg5                           CMP.L           #match_ROD_An_indir_r5,D2              ;check reg is equal to 5
0000800E  6600 0006              10663                                              BNE             ROD_An_indir_reg6                            ;if ROD try reg 6
00008012  6700 005A              10664                                              BEQ             ROD_An_indir_reg5_out                     ;if equal go to output subroutine
00008016                         10665  
00008016  B4BC 00000016          10666  ROD_An_indir_reg6                           CMP.L           #match_ROD_An_indir_r6,D2              ;check reg is equal to 6
0000801C  6700 005C              10667                                              BEQ             ROD_An_indir_reg6_out                     ;if equal go to output subroutine
00008020  6600 0002              10668                                              BNE             ROD_An_indir_reg7
00008024                         10669                                              
00008024  B4BC 00000016          10670  ROD_An_indir_reg7                           CMP.L           #match_ROD_An_indir_r6,D2              ;check reg is equal to 6
0000802A  6700 005A              10671                                              BEQ             ROD_An_indir_reg7_out                     ;if equal go to output subroutine
0000802E  6600 B632              10672                                              BNE             ERROR                                        :if ROD equal to an addresssing mode, pritn error
00008032                         10673  
00008032                         10674  ;--------------------Address Register Indirect Output-----------------------
00008032  227C 000089A5          10675  ROD_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
00008038  4CDF 7CBE              10676                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000803C  4E75                   10677                                          RTS                                                         ;return to subroutine
0000803E                         10678                                      
0000803E  227C 000089AA          10679  ROD_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
00008044  4CDF 7CBE              10680                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008048  4E75                   10681                                          RTS                                                         ;return to subroutine
0000804A                         10682                                              
0000804A  227C 000089AF          10683  ROD_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
00008050  4CDF 7CBE              10684                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008054  4E75                   10685                                          RTS                                                     ;return to subroutine
00008056                         10686  
00008056  227C 000089B4          10687  ROD_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
0000805C  4CDF 7CBE              10688                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008060  4E75                   10689                                          RTS                                                     ;return to subroutine
00008062                         10690                                              
00008062  227C 000089B9          10691  ROD_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
00008068  4CDF 7CBE              10692                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000806C  4E75                   10693                                          RTS                                                         ;return to subroutine
0000806E                         10694                                          
0000806E  227C 000089BE          10695  ROD_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
00008074  4CDF 7CBE              10696                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008078  4E75                   10697                                          RTS                                                     ;return to subroutine
0000807A                         10698  
0000807A  227C 000089C3          10699  ROD_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
00008080  4CDF 7CBE              10700                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008084  4E75                   10701                                          RTS                                                         ;return to subroutine
00008086                         10702  
00008086  227C 000089C8          10703  ROD_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
0000808C  4CDF 7CBE              10704                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008090  4E75                   10705                                          RTS                                                         ;return to subroutine
00008092                         10706  
00008092                         10707  ;------------------Address Register Indirect with Post Increment-----------------------
00008092  B4BC 00000020          10708  ROD_An_indir_postinc_reg                    CMP.L      #match_ROD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00008098                         10709  
00008098  6600 0006              10710                                              BNE        ROD_An_indir_pinc_r1                      ;if ROD try reg 1
0000809C  6700 0064              10711                                              BEQ        ROD_An_indir_pinc_r0_out               ;if equal go to output subroutine
000080A0                         10712  
000080A0  B4BC 00000021          10713  ROD_An_indir_pinc_r1                        CMP.L      #match_ROD_An_indir_postinc_r1,D2        ;check reg is equal to 1
000080A6  6600 0006              10714                                              BNE        ROD_An_indir_pinc_r2                      ;if ROD try reg 2
000080AA  6700 0062              10715                                              BEQ        ROD_An_indir_pinc_r1_out               ;if equal go to output subroutine
000080AE                         10716  
000080AE  B4BC 00000022          10717  ROD_An_indir_pinc_r2                        CMP.L      #match_ROD_An_indir_postinc_r2,D2        ;check reg is equal to 2
000080B4  6600 0006              10718                                              BNE        ROD_An_indir_pinc_r3                      ;if ROD try reg 3
000080B8  6700 0060              10719                                              BEQ        ROD_An_indir_pinc_r2_out               ;if equal go to output subroutine
000080BC                         10720      
000080BC  B4BC 00000023          10721  ROD_An_indir_pinc_r3                        CMP.L      #match_ROD_An_indir_postinc_r3,D2        ;check reg is equal to 3
000080C2  6600 0006              10722                                              BNE        ROD_An_indir_pinc_r4                      ;if ROD try reg 4
000080C6  6700 005E              10723                                              BEQ        ROD_An_indir_pinc_r3_out               ;if equal go to output subroutine
000080CA                         10724   
000080CA  B4BC 00000024          10725  ROD_An_indir_pinc_r4                        CMP.L      #match_ROD_An_indir_postinc_r4,D2        ;check reg is equal to 4
000080D0  6600 0006              10726                                              BNE        ROD_An_indir_pinc_r5                      ;if ROD try reg 5
000080D4  6700 005C              10727                                              BEQ        ROD_An_indir_pinc_r4_out               ;if equal go to output subroutine
000080D8                         10728  
000080D8  B4BC 00000025          10729  ROD_An_indir_pinc_r5                        CMP.L      #match_ROD_An_indir_postinc_r5,D2        ;check reg is equal to 5
000080DE  6600 0006              10730                                              BNE        ROD_An_indir_pinc_r6                      ;if ROD try reg 6
000080E2  6700 005A              10731                                              BEQ        ROD_An_indir_pinc_r5_out               ;if equal go to output subroutine
000080E6                         10732  
000080E6  B4BC 00000026          10733  ROD_An_indir_pinc_r6                        CMP.L      #match_ROD_An_indir_postinc_r6,D2        ;check reg is equal to 6
000080EC  6700 005C              10734                                              BEQ        ROD_An_indir_pinc_r6_out              ;if equal go to output subroutine
000080F0  6600 0002              10735                                              BNE        ROD_An_indir_pinc_r7
000080F4                         10736  
000080F4  B4BC 00000026          10737  ROD_An_indir_pinc_r7                        CMP.L      #match_ROD_An_indir_postinc_r6,D2        ;check reg is equal to 6
000080FA  6700 005A              10738                                              BEQ        ROD_An_indir_pinc_r7_out              ;if equal go to output subroutine
000080FE  6600 B562              10739                                              BNE        ERROR                                        :if ROD equal to an addresssing mode, pritn error
00008102                         10740  
00008102                         10741  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00008102  227C 000089D3          10742  ROD_An_indir_pinc_r0_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
00008108  4CDF 7CBE              10743                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000810C  4E75                   10744                                              RTS                                             ;return to subroutine
0000810E                         10745  
0000810E  227C 000089D3          10746  ROD_An_indir_pinc_r1_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
00008114  4CDF 7CBE              10747                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008118  4E75                   10748                                              RTS                                             ;return to subroutine
0000811A                         10749  
0000811A  227C 000089D9          10750  ROD_An_indir_pinc_r2_out                    MOVE.L          #ea_indir_postinc_A2,A1                         ;load string constant into A1
00008120  4CDF 7CBE              10751                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008124  4E75                   10752                                              RTS                                             ;return to subroutine
00008126                         10753  
00008126  227C 000089DF          10754  ROD_An_indir_pinc_r3_out                    MOVE.L          #ea_indir_postinc_A3,A1                         ;load string constant into A1
0000812C  4CDF 7CBE              10755                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008130  4E75                   10756                                              RTS                                             ;return to subroutine
00008132                         10757  
00008132  227C 000089E5          10758  ROD_An_indir_pinc_r4_out                    MOVE.L          #ea_indir_postinc_A4,A1                         ;load string constant into A1
00008138  4CDF 7CBE              10759                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000813C  4E75                   10760                                              RTS                                             ;return to subroutine
0000813E                         10761  
0000813E  227C 000089EB          10762  ROD_An_indir_pinc_r5_out                    MOVE.L          #ea_indir_postinc_A5,A1                         ;load string constant into A1
00008144  4CDF 7CBE              10763                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008148  4E75                   10764                                              RTS                                             ;return to subroutine
0000814A                         10765   
0000814A  227C 000089F1          10766  ROD_An_indir_pinc_r6_out                    MOVE.L          #ea_indir_postinc_A6,A1                         ;load string constant into A1
00008150  4CDF 7CBE              10767                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008154  4E75                   10768                                              RTS                                             ;return to subroutine
00008156                         10769  
00008156  227C 000089F7          10770  ROD_An_indir_pinc_r7_out                    MOVE.L          #ea_indir_postinc_A7,A1                         ;load string constant into A1
0000815C  4CDF 7CBE              10771                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008160  4E75                   10772                                              RTS                                             ;return to subroutine
00008162                         10773                                                      
00008162                         10774  ;------------------Address Register Indirect with Pre Decrement-----------------------
00008162  B4BC 00000018          10775  ROD_An_indir_predec_reg                     CMP.L      #match_ROD_An_indir_predec_r0,D2         ;check reg is equal to 0
00008168  6600 0006              10776                                              BNE        ROD_An_indir_pdec_r1                      ;if ROD try reg 1
0000816C  6700 0064              10777                                              BEQ        ROD_An_indir_pdec_r0_out               ;if equal go to output subroutine
00008170                         10778  
00008170  B4BC 00000019          10779  ROD_An_indir_pdec_r1                         CMP.L      #match_ROD_An_indir_predec_r1,D2         ;check reg is equal to 1
00008176  6600 0006              10780                                              BNE        ROD_An_indir_pdec_r2                      ;if ROD try reg 2
0000817A  6700 0062              10781                                              BEQ        ROD_An_indir_pdec_r1_out              ;if equal go to output subroutine
0000817E                         10782  
0000817E  B4BC 0000001A          10783  ROD_An_indir_pdec_r2                        CMP.L      #match_ROD_An_indir_predec_r2,D2         ;check reg is equal to 2
00008184  6600 0006              10784                                              BNE        ROD_An_indir_pdec_r3                      ;if ROD try reg 3
00008188  6700 0060              10785                                              BEQ        ROD_An_indir_pdec_r2_out               ;if equal go to output subroutine
0000818C                         10786  
0000818C  B4BC 0000001B          10787  ROD_An_indir_pdec_r3                        CMP.L      #match_ROD_An_indir_predec_r3,D2         ;check reg is equal to 3
00008192  6600 0006              10788                                              BNE        ROD_An_indir_pdec_r4                      ;if ROD try reg 4
00008196  6700 0076              10789                                              BEQ        ROD_An_indir_pdec_r5_out               ;if equal go to output subroutine
0000819A                         10790  
0000819A  B4BC 0000001C          10791  ROD_An_indir_pdec_r4                        CMP.L      #match_ROD_An_indir_predec_r4,D2         ;check reg is equal to 4
000081A0  6600 0006              10792                                              BNE        ROD_An_indir_pdec_r5                      ;if ROD try reg 5
000081A4  6700 005C              10793                                              BEQ        ROD_An_indir_pdec_r4_out               ;if equal go to output subroutine
000081A8                         10794  
000081A8  B4BC 0000001D          10795  ROD_An_indir_pdec_r5                        CMP.L      #match_ROD_An_indir_predec_r5,D2         ;check reg is equal to 5
000081AE  6600 0006              10796                                              BNE        ROD_An_indir_pdec_r6                      ;if ROD try reg 6
000081B2  6700 005A              10797                                              BEQ        ROD_An_indir_pdec_r5_out               ;if equal go to output subroutine
000081B6                         10798  
000081B6  B4BC 0000001E          10799  ROD_An_indir_pdec_r6                        CMP.L      #match_ROD_An_indir_predec_r6,D2         ;check reg is equal to 6
000081BC  6700 005C              10800                                              BEQ        ROD_An_indir_pdec_r6_out               ;if equal go to output subroutine
000081C0  6600 0002              10801                                              BNE        ROD_An_indir_pdec_r7
000081C4                         10802                                              
000081C4  B4BC 0000001F          10803  ROD_An_indir_pdec_r7                        CMP.L      #match_ROD_An_indir_predec_r7,D2         ;check reg is equal to 6
000081CA  6700 005A              10804                                              BEQ        ROD_An_indir_pdec_r7_out               ;if equal go to output subroutine
000081CE  6600 B492              10805                                              BNE        ERROR                                        :if ROD equal to an addresssing mode, pritn error
000081D2                         10806  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000081D2  227C 000089FD          10807  ROD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
000081D8  4CDF 7CBE              10808                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000081DC  4E75                   10809                                              RTS                                                     ;return to subroutine
000081DE                         10810  
000081DE  227C 00008A03          10811  ROD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
000081E4  4CDF 7CBE              10812                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000081E8  4E75                   10813                                              RTS                                                     ;return to subroutine
000081EA                         10814                                                      
000081EA  227C 00008A09          10815  ROD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
000081F0  4CDF 7CBE              10816                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000081F4  4E75                   10817                                              RTS                                                     ;return to subroutine
000081F6                         10818  
000081F6  227C 00008A0F          10819  ROD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
000081FC  4CDF 7CBE              10820                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008200  4E75                   10821                                              RTS                                                     ;return to subroutine
00008202                         10822  
00008202  227C 00008A15          10823  ROD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
00008208  4CDF 7CBE              10824                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000820C  4E75                   10825                                              RTS                                                     ;return to subroutine
0000820E                         10826      
0000820E  227C 00008A1B          10827  ROD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00008214  4CDF 7CBE              10828                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008218  4E75                   10829                                              RTS                                                     ;return to subroutine
0000821A                         10830      
0000821A  227C 00008A21          10831  ROD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
00008220  4CDF 7CBE              10832                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008224  4E75                   10833                                              RTS                                                     ;return to subroutine
00008226                         10834  
00008226  227C 00008A27          10835  ROD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
0000822C  4CDF 7CBE              10836                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008230  4E75                   10837                                              RTS                                                     ;return to subroutine
00008232                         10838                                                      
00008232                         10839  ;------------------Absolute Addressing Output-----------------------
00008232  22FC 00008A37          10840  ROD_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00008238  22C5                   10841                                           MOVE.L      D5,(A1)+                           ;load address                  
0000823A  4CDF 7CBE              10842                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000823E  4E75                   10843                                           RTS                                            :return to subroutine
00008240                         10844                                             
00008240                         10845  
00008240  2A18                   10846  ROD_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00008242  22FC 00008A37          10847                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00008248  22C5                   10848                                           MOVE.L      D5,(A1)+                           ;load address                  
0000824A  4CDF 7CBE              10849                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000824E  4E75                   10850                                           RTS                                            :return to subroutine                                            
00008250                         10851  ;----------------------Error Handling----------------------------------------
00008250                         10852                                           ;return to subroutine
00008250                         10853                                                  
00008250                         10854  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
00008250                         10855  ; determine if the shift is a data register or a immediate value
00008250  4241                   10856  ROD_reg_shift                       CLR         D1                              ;clear D1
00008252  C2BC 00000020          10857                                      AND.L       #mask_ROD_reg_shift_ir,D1           ;load the mask into D1
00008258  B2BC 00000020          10858                                      CMP.L       #match_ROD_shift_reg,D1             ;check to see if the shift is a data register
0000825E  6700 0006              10859                                      BEQ         ROD_shift_reg                       ;if the shift is a register, go to subroutine
00008262  6600 007A              10860                                      BNE         ROD_count_val                       ;if ROD go to immediate value subroutine
00008266                         10861  
00008266                         10862  ;i/r = 1, the shift is a Data register                                    
00008266                         10863  ; this the subroutine for the data register shift
00008266  4241                   10864  ROD_shift_reg                       CLR         D1                              ;clear D1
00008268  C2BC 00000020          10865                                      AND.L       #mask_ROD_reg_shift,D1              ;load mask into D1 for bits 11-9
0000826E                         10866  
0000826E  B2BC 00000000          10867  ROD_count_reg0                      CMP.L       #match_ROD_count_reg0,D1            ;check to see if count/shift = 0
00008274  6600 0006              10868                                      BNE         ROD_count_reg1                    ;if ROD go check 1
00008278  6700 0134              10869                                      BEQ         ROD_count_reg0_out                ;got to output
0000827C                         10870                                      
0000827C  B2BC 00000200          10871  ROD_count_reg1                      CMP.L       #match_ROD_count_reg1,D1            ;check to see if count/shift = 1
00008282  6600 0006              10872                                      BNE         ROD_count_reg2                    ;if ROD go check 2
00008286  6700 0132              10873                                      BEQ         ROD_count_reg1_out                ;got to output
0000828A                         10874  
0000828A  B2BC 00000400          10875  ROD_count_reg2                      CMP.L       #match_ROD_count_reg2,D1            ;check to see if count/shift = 2
00008290  6600 0006              10876                                      BNE         ROD_count_reg3                    ;if ROD go check 3
00008294  6700 0130              10877                                      BEQ         ROD_count_reg2_out                ;got to output
00008298                         10878  
00008298  B2BC 00000600          10879  ROD_count_reg3                      CMP.L       #match_ROD_count_reg3,D1            ;check to see if count/shift = 3
0000829E  6600 0006              10880                                      BNE         ROD_count_reg4                    ;if ROD go check 4
000082A2  6700 012E              10881                                      BEQ         ROD_count_reg3_out                ;got to output
000082A6                         10882  
000082A6  B2BC 00000800          10883  ROD_count_reg4                      CMP.L       #match_ROD_count_reg4,D1            ;check to see if count/shift = 4
000082AC  6600 0006              10884                                      BNE         ROD_count_reg5                    ;if ROD go check 5
000082B0  6700 012C              10885                                      BEQ         ROD_count_reg4_out                ;got to output
000082B4                         10886  
000082B4  B2BC 00000A00          10887  ROD_count_reg5                      CMP.L       #match_ROD_count_reg5,D1            ;check to see if count/shift = 5
000082BA  6600 0006              10888                                      BNE         ROD_count_reg6                      ;if ROD go check 6
000082BE  6700 012A              10889                                      BEQ         ROD_count_reg5_out                  ;got to output
000082C2                         10890  
000082C2  B2BC 00000C00          10891  ROD_count_reg6                      CMP.L       #match_ROD_count_reg6,D1            ;check to see if count/shift = 6
000082C8  6600 0006              10892                                      BNE         ROD_count_reg7                      ;if ROD go check 7
000082CC  6700 0128              10893                                      BEQ         ROD_count_reg6_out                  ;got to output
000082D0                         10894  
000082D0  B2BC 00000E00          10895  ROD_count_reg7                      CMP.L       #match_ROD_count_reg7,D1            ;check to see if count/shift = 7
000082D6  6600 B38A              10896                                      BNE         ERROR                           ; if none of the registers, then print error message
000082DA  6700 0126              10897                                      BEQ         ROD_count_reg7_out                  ;got to output
000082DE                         10898  
000082DE                         10899  
000082DE                         10900  
000082DE                         10901  ;i/r = 0, the shift is an immediate value
000082DE                         10902  ;1-7 = 1-7
000082DE                         10903  ;0 = 8
000082DE                         10904  ; this is the subroutine for the immedite value shift
000082DE  B2BC 00000000          10905  ROD_count_val                       CMP.L       #match_ROD_count_val0,D1          ;check to see if shift count is 0
000082E4  6600 0006              10906                                      BNE         ROD_count_val1                    ;if ROD 0 check 1
000082E8  6700 0064              10907                                      BEQ         ROD_count_val0_out                ;if 0 got to output
000082EC                         10908  
000082EC  B2BC 00000200          10909  ROD_count_val1                      CMP.L       #match_ROD_count_val1,D1          ;check to see if shift count is 0
000082F2  6600 0006              10910                                      BNE         ROD_count_val2                    ;if ROD 0 check 1
000082F6  6700 0062              10911                                      BEQ         ROD_count_val1_out                ;if 0 got to output
000082FA                         10912  
000082FA  B2BC 00000400          10913  ROD_count_val2                      CMP.L       #match_ROD_count_val2,D1          ;check to see if shift count is 0
00008300  6600 0006              10914                                      BNE         ROD_count_val3                    ;if ROD 0 check 1
00008304  6700 0060              10915                                      BEQ         ROD_count_val2_out                ;if 0 got to output
00008308                         10916  
00008308  B2BC 00000600          10917  ROD_count_val3                      CMP.L       #match_ROD_count_val3,D1          ;check to see if shift count is 0
0000830E  6600 0006              10918                                      BNE         ROD_count_val4                    ;if ROD 0 check 1
00008312  6700 005E              10919                                      BEQ         ROD_count_val3_out                ;if 0 got to output
00008316                         10920  
00008316  B2BC 00000800          10921  ROD_count_val4                      CMP.L       #match_ROD_count_val4,D1          ;check to see if shift count is 0
0000831C  6600 0006              10922                                      BNE         ROD_count_val5                    ;if ROD 0 check 1
00008320  6700 005C              10923                                      BEQ         ROD_count_val4_out                ;if 0 got to output
00008324                         10924  
00008324  B2BC 00000A00          10925  ROD_count_val5                      CMP.L       #match_ROD_count_val5,D1          ;check to see if shift count is 0
0000832A  6600 0006              10926                                      BNE         ROD_count_val6                    ;if ROD 0 check 1
0000832E  6700 005A              10927                                      BEQ         ROD_count_val5_out                ;if 0 got to output
00008332                         10928  
00008332  B2BC 00000C00          10929  ROD_count_val6                      CMP.L       #match_ROD_count_val6,D1          ;check to see if shift count is 0
00008338  6600 0006              10930                                      BNE         ROD_count_val7                    ;if ROD 0 check 1
0000833C  6700 0058              10931                                      BEQ         ROD_count_val6_out                ;if 0 got to output
00008340                         10932  
00008340  B2BC 00000E00          10933  ROD_count_val7                      CMP.L       #match_ROD_count_val7,D1          ;check to see if shift count is 0
00008346  6600 B31A              10934                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
0000834A  6700 0056              10935                                      BEQ         ROD_count_val7_out                ;if 0 got to output
0000834E                         10936  
0000834E                         10937  ;-----------------------------------Count Shift Immedite Value Output---------------------------
0000834E  227C 00008995          10938  ROD_count_val0_out            MOVE.L            #ea_val0,A1         ;load string constant into A1
00008354  4EB9 0000840E          10939                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
0000835A                         10940                                
0000835A  227C 00008997          10941  ROD_count_val1_out            MOVE.L            #ea_val1,A1         ;load string constant into A1
00008360  4EB9 0000840E          10942                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00008366                         10943  
00008366  227C 00008999          10944  ROD_count_val2_out            MOVE.L            #ea_val2,A1         ;load string constant into A1
0000836C  4EB9 0000840E          10945                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00008372                         10946  
00008372  227C 0000899B          10947  ROD_count_val3_out            MOVE.L            #ea_val3,A1         ;load string constant into A1
00008378  4EB9 0000840E          10948                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
0000837E                         10949  
0000837E  227C 0000899D          10950  ROD_count_val4_out            MOVE.L            #ea_val4,A1         ;load string constant into A1
00008384  4EB9 0000840E          10951                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
0000838A                         10952  
0000838A  227C 0000899F          10953  ROD_count_val5_out            MOVE.L            #ea_val5,A1         ;load string constant into A1
00008390  4EB9 0000840E          10954                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00008396                         10955  
00008396  227C 000089A1          10956  ROD_count_val6_out            MOVE.L            #ea_val6,A1         ;load string constant into A1
0000839C  4EB9 0000840E          10957                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
000083A2                         10958  
000083A2  227C 000089A3          10959  ROD_count_val7_out            MOVE.L            #ea_val7,A1         ;load string constant into A1
000083A8  4EB9 0000840E          10960                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
000083AE                         10961  
000083AE                         10962  ;-------------------------Count Shift Output (Dn)-----------------------------------------
000083AE  227C 00008965          10963  ROD_count_reg0_out            MOVE.L            #ea_D0,A1           ;load string constant into A1
000083B4  4EB9 0000840E          10964                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
000083BA                         10965                                
000083BA  227C 00008968          10966  ROD_count_reg1_out            MOVE.L            #ea_D1,A1           ;load string constant into A1
000083C0  4EB9 0000840E          10967                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
000083C6                         10968                                
000083C6  227C 0000896B          10969  ROD_count_reg2_out            MOVE.L            #ea_D2,A1           ;load string constant into A1
000083CC  4EB9 0000840E          10970                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
000083D2                         10971                                
000083D2  227C 0000896E          10972  ROD_count_reg3_out            MOVE.L            #ea_D3,A1           ;load string constant into A1
000083D8  4EB9 0000840E          10973                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
000083DE                         10974                                
000083DE  227C 00008971          10975  ROD_count_reg4_out            MOVE.L            #ea_D4,A1           ;load string constant into A1
000083E4  4EB9 0000840E          10976                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
000083EA                         10977                                
000083EA  227C 00008974          10978  ROD_count_reg5_out            MOVE.L            #ea_D5,A1           ;load string constant into A1
000083F0  4EB9 0000840E          10979                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
000083F6                         10980                                
000083F6  227C 00008977          10981  ROD_count_reg6_out            MOVE.L            #ea_D6,A1           ;load string constant into A1
000083FC  4EB9 0000840E          10982                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00008402                         10983                                
00008402  227C 0000897A          10984  ROD_count_reg7_out            MOVE.L            #ea_D7,A1           ;load string constant into A1
00008408  4EB9 0000840E          10985                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand                                    
0000840E                         10986                                      
0000840E                         10987                                      
0000840E                         10988  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
0000840E  4241                   10989  ROD_Dn0                         CLR             D1                  ;clear D1
00008410  C2BC 00000007          10990                                  AND.L           #mask_ROD_data_reg,D1   ;load data register mask for second operand
00008416                         10991                                  
00008416  B2BC 00000000          10992                                  CMP.L           #match_ROD_D_reg0,D1          ;check if data register is D0
0000841C  6700 0068              10993                                  BEQ             ROD_D0_out              ;if equal got to output subroutine
00008420  6600 0002              10994                                  BNE             ROD_Dn1                 ;if ROD check D1
00008424                         10995                                  
00008424  B2BC 00000001          10996  ROD_Dn1                         CMP.L           #match_ROD_D_reg1,D1          ;check if data register is D0
0000842A  6700 0066              10997                                  BEQ             ROD_D1_out              ;if equal got to output subroutine
0000842E  6600 0002              10998                                  BNE             ROD_Dn2                 ;if ROD check D2
00008432                         10999  
00008432  B2BC 00000002          11000  ROD_Dn2                         CMP.L           #match_ROD_D_reg2,D1          ;check if data register is D0
00008438  6700 0064              11001                                  BEQ             ROD_D2_out              ;if equal got to output subroutine
0000843C  6600 0002              11002                                  BNE             ROD_Dn3                 ;if ROD check D3
00008440                         11003  
00008440  B2BC 00000003          11004  ROD_Dn3                         CMP.L           #match_ROD_D_reg3,D1          ;check if data register is D0
00008446  6700 0062              11005                                  BEQ             ROD_D3_out              ;if equal got to output subroutine
0000844A  6600 0002              11006                                  BNE             ROD_Dn4                 ;if ROD check D4
0000844E                         11007  
0000844E  B2BC 00000004          11008  ROD_Dn4                         CMP.L           #match_ROD_D_reg4,D1          ;check if data register is D0
00008454  6700 0060              11009                                  BEQ             ROD_D4_out              ;if equal got to output subroutine
00008458  6600 0002              11010                                  BNE             ROD_Dn5                 ;if ROD check D5
0000845C                         11011  
0000845C  B2BC 00000005          11012  ROD_Dn5                         CMP.L           #match_ROD_D_reg5,D1          ;check if data register is D0
00008462  6700 005E              11013                                  BEQ             ROD_D5_out              ;if equal got to output subroutine
00008466  6600 0002              11014                                  BNE             ROD_Dn6                 ;if ROD check D6
0000846A                         11015  
0000846A  B2BC 00000006          11016  ROD_Dn6                         CMP.L           #match_ROD_D_reg6,D1          ;check if data register is D0
00008470  6700 005C              11017                                  BEQ             ROD_D6_out              ;if equal got to output subroutine
00008474  6600 0002              11018                                  BNE             ROD_Dn7                 ;if ROD check D7
00008478                         11019  
00008478  B2BC 00000007          11020  ROD_Dn7                         CMP.L           #match_ROD_D_reg7,D1          ;check if data register is D0
0000847E  6700 005A              11021                                  BEQ             ROD_D7_out              ;if equal got to output subroutine
00008482  6600 B1DE              11022                                  BNE             ERROR               :if none of the registers go to error sub routine
00008486                         11023                                  
00008486                         11024                                  
00008486                         11025  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
00008486  227C 00008965          11026  ROD_D0_out                    MOVE.L            #ea_D0,A1           ;load string constant into A1
0000848C  4CDF 7CBE              11027                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00008490  4E75                   11028                                RTS                                   ;return to subroutine
00008492                         11029  
00008492                         11030  
00008492  227C 00008968          11031  ROD_D1_out                    MOVE.L            #ea_D1,A1           ;load string constant into A1
00008498  4CDF 7CBE              11032                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000849C  4E75                   11033                                RTS                                   ;return to subroutine
0000849E                         11034  
0000849E                         11035  
0000849E  227C 0000896B          11036  ROD_D2_out                    MOVE.L            #ea_D2,A1           ;load string constant into A1
000084A4  4CDF 7CBE              11037                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000084A8  4E75                   11038                                RTS                                   ;return to subroutine
000084AA                         11039  
000084AA                         11040              
000084AA  227C 0000896E          11041  ROD_D3_out                    MOVE.L            #ea_D3,A1           ;load string constant into A1
000084B0  4CDF 7CBE              11042                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000084B4  4E75                   11043                                RTS                                   ;return to subroutine
000084B6                         11044  
000084B6                         11045  
000084B6  227C 00008971          11046  ROD_D4_out                    MOVE.L            #ea_D4,A1           ;load string constant into A1
000084BC  4CDF 7CBE              11047                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000084C0  4E75                   11048                                RTS                                   ;return to subroutine
000084C2                         11049  
000084C2                         11050  
000084C2  227C 00008974          11051  ROD_D5_out                    MOVE.L            #ea_D5,A1           ;load string constant into A1
000084C8  4CDF 7CBE              11052                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000084CC  4E75                   11053                                RTS                                   ;return to subroutine
000084CE                         11054  
000084CE                         11055  
000084CE  227C 00008977          11056  ROD_D6_out                    MOVE.L            #ea_D6,A1           ;load string constant into A1
000084D4  4CDF 7CBE              11057                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000084D8  4E75                   11058                                RTS                                   ;return to subroutine
000084DA                         11059  
000084DA                         11060  
000084DA  227C 0000897A          11061  ROD_D7_out                    MOVE.L            #ea_D7,A1           ;load string constant into A1
000084E0  4CDF 7CBE              11062                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000084E4  4E75                   11063                                RTS                                   ;return to subroutine
000084E6                         11064  
000084E6                         11065  
000084E6                         11066                                      
000084E6  =000000C0              11067  mask_ROD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
000084E6  =00000038              11068  mask_ROD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
000084E6  =0000003F              11069  mask_ROD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
000084E6  =0000003F              11070  mask_ROD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
000084E6  =00000020              11071  mask_ROD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
000084E6  =00000E00              11072  mask_ROD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
000084E6  =00000020              11073  mask_ROD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
000084E6  =00000007              11074  mask_ROD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
000084E6                         11075  
000084E6  =00000000              11076  match_ROD_D_reg0                                EQU             $0000               ;match for second operand data register 0
000084E6  =00000001              11077  match_ROD_D_reg1                                EQU             $0001               ;match for second operand data register 1
000084E6  =00000002              11078  match_ROD_D_reg2                                EQU             $0002               ;match for second operand data register 2
000084E6  =00000003              11079  match_ROD_D_reg3                                EQU             $0003               ;match for second operand data register 3
000084E6  =00000004              11080  match_ROD_D_reg4                                EQU             $0004               ;match for second operand data register 4
000084E6  =00000005              11081  match_ROD_D_reg5                                EQU             $0005               ;match for second operand data register 5
000084E6  =00000006              11082  match_ROD_D_reg6                                EQU             $0006               ;match for second operand data register 6
000084E6  =00000007              11083  match_ROD_D_reg7                                EQU             $0007               ;match for second operand data register 7
000084E6                         11084  
000084E6  =00000000              11085  match_ROD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
000084E6  =00000200              11086  match_ROD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
000084E6  =00000400              11087  match_ROD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
000084E6  =00000600              11088  match_ROD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
000084E6  =00000800              11089  match_ROD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
000084E6  =00000A00              11090  match_ROD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
000084E6  =00000C00              11091  match_ROD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
000084E6  =00000E00              11092  match_ROD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
000084E6                         11093  
000084E6  =00000020              11094  match_ROD_shift_reg                             EQU             $0020               ;match to for a register shift
000084E6  =00000000              11095  match_ROD_count_val0                            EQU             $0000               ;match for shift reg 0
000084E6  =00000200              11096  match_ROD_count_val1                           EQU             $0200               ;match for shift reg 1
000084E6  =00000400              11097  match_ROD_count_val2                            EQU             $0400               ;match for shift reg 2
000084E6  =00000600              11098  match_ROD_count_val3                            EQU             $0600               ;match for shift reg 3
000084E6  =00000800              11099  match_ROD_count_val4                            EQU             $0800               ;match for shift reg 4
000084E6  =00000A00              11100  match_ROD_count_val5                            EQU             $0A00               ;match for shift reg 5
000084E6  =00000C00              11101  match_ROD_count_val6                            EQU             $0C00               ;match for shift reg 6
000084E6  =00000E00              11102  match_ROD_count_val7                            EQU             $0E00               ;match for shift reg 7
000084E6                         11103  
000084E6  =00000020              11104  match_ROD_shift_count                           EQU             $0020
000084E6  =000000C0              11105  match_ROD_mem_shift                         EQU             $00C0              ;match for memory shift
000084E6  =00000010              11106  match_ROD_An_indir                          EQU             $0010              ;match for add reg indir
000084E6  =00000020              11107  match_ROD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
000084E6  =00000018              11108  match_ROD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
000084E6  =00000039              11109  match_ROD_abs_add_word                      EQU             $0039              ;match for word abs add 
000084E6  =0000003C              11110  match_ROD_abs_add_long                      EQU             $003C              ;match for long abs add
000084E6                         11111  
000084E6                         11112  
000084E6  =00000010              11113  match_ROD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
000084E6  =00000011              11114  match_ROD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
000084E6  =00000012              11115  match_ROD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
000084E6  =00000013              11116  match_ROD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
000084E6  =00000014              11117  match_ROD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
000084E6  =00000015              11118  match_ROD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
000084E6  =00000016              11119  match_ROD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
000084E6  =00000017              11120  match_ROD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
000084E6                         11121  
000084E6                         11122  
000084E6  =00000020              11123  match_ROD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
000084E6  =00000021              11124  match_ROD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
000084E6  =00000022              11125  match_ROD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
000084E6  =00000023              11126  match_ROD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
000084E6  =00000024              11127  match_ROD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
000084E6  =00000025              11128  match_ROD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
000084E6  =00000026              11129  match_ROD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
000084E6  =00000027              11130  match_ROD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
000084E6                         11131  
000084E6  =00000018              11132  match_ROD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
000084E6  =00000019              11133  match_ROD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
000084E6  =0000001A              11134  match_ROD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
000084E6  =0000001B              11135  match_ROD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
000084E6  =0000001C              11136  match_ROD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
000084E6  =0000001D              11137  match_ROD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
000084E6  =0000001E              11138  match_ROD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
000084E6  =0000001F              11139  match_ROD_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
000084E6                         11140  
000084E6                         11141  
000084E6                         11142  
000084E6                         11143  
000084E6                         11144  
000084E6                         11145  
000084E6                         11146  
000084E6                         11147  
000084E6                         11148  -------------------- end include --------------------
000084E6                         11149              INCLUDE 'EA Masks.x68'
000084E6                         11150  
000084E6  =00000FFF              11151  mask_MOVE_EA                EQU     $0FFF
000084E6  =00000E00              11152  mask_MOVE_dst_reg           EQU     $0E00
000084E6  =000001C0              11153  mask_MOVE_dst_mode          EQU     $01C0
000084E6  =00000038              11154  mask_MOVE_src_reg           EQU     $0038
000084E6  =00000007              11155  mask_MOVE_src_mode          EQU     $0007
000084E6                         11156  
000084E6  =00000E3F              11157  mask_MOVEA_EA               EQU     $0E3F
000084E6  =00000E00              11158  mask_MOVEA_dst_reg          EQU     $0E00
000084E6  =00000038              11159  mask_MOVEA_src_mode         EQU     $0038
000084E6  =00000007              11160  mask_MOVEA_src_reg          EQU     $0007
000084E6                         11161  
000084E6  =00000EFF              11162  mask_MOVEQ_EA               EQU     $0EFF
000084E6  =00000E00              11163  mask_MOVEQ_reg              EQU     $0E00
000084E6  =000000FF              11164  mask_MOVEQ_data             EQU     $00FF
000084E6                         11165  
000084E6  =0000047F              11166  mask_MOVEM_EA               EQU     $047F       
000084E6  =00000400              11167  mask_MOVEM_direct           EQU     $0400
000084E6  =00000040              11168  mask_MOVEM_size             EQU     $0040
000084E6                         11169  ;using predecrement bits go from 15-0 15 = D0, 0 = A7
000084E6                         11170  ;using post increment bits ggo from 15-0, 15 = A7, 0 = D0
000084E6                         11171  ;the low order bit is the register transfered first
000084E6  =00000007              11172  mask_MOVEM_ea_reg           EQU     $0007
000084E6                         11173  
000084E6  =00000FFF              11174  mask_ADD_EA                 EQU     $0FFF
000084E6  =00000E00              11175  mask_ADD_reg                EQU     $0E00
000084E6  =000001C0              11176  mask_ADD_opmode             EQU     $01C0
000084E6  =00000007              11177  mask_ADD_ea_reg             EQU     $0007
000084E6                         11178  
000084E6  =00000FFF              11179  mask_ADDA_EA                EQU     $0FFF
000084E6  =00000E00              11180  mask_ADDA_reg               EQU     $0E00
000084E6  =000001C0              11181  mask_ADDA_opmode            EQU     $01C0
000084E6  =00000038              11182  mask_ADDA_ea_mode           EQU     $0038
000084E6  =00000007              11183  mask_ADDA_ea_reg            EQU     $0007
000084E6                         11184  
000084E6  =00000EFF              11185  mask_ADDQ_EA                EQU     $0EFF
000084E6  =00000E00              11186  mask_ADDQ_data              EQU     $0E00
000084E6  =000000C0              11187  mask_ADDQ_size              EQU     $00C0
000084E6  =00000038              11188  mask_ADDQ_ea_mode           EQU     $0038
000084E6  =00000007              11189  mask_ADDQ_ea_reg            EQU     $0007
000084E6                         11190  
000084E6  =00000FFF              11191  mask_SUB_EA                 EQU     $0FFF
000084E6  =00000E00              11192  mask_SUB_reg                EQU     $0E00
000084E6  =000001C0              11193  mask_SUB_opmode             EQU     $01C0
000084E6  =00000038              11194  mask_SUB_ea_mode            EQU     $0038
000084E6  =00000007              11195  mask_SUB_ea_reg             EQU     $0007
000084E6                         11196  
000084E6  =00000E3F              11197  mask_LEA_EA                 EQU     $0E3F
000084E6  =00000E00              11198  mask_LEA_reg                EQU     $0E00
000084E6  =00000038              11199  mask_LEA_ea_mode            EQU     $0038
000084E6  =00000007              11200  mask_LEA_ea_reg             EQU     $0007
000084E6                         11201  
000084E6  =00000FFF              11202  mask_AND_EA                 EQU     $0FFF
000084E6  =00000E00              11203  mask_AND_reg                EQU     $0E00
000084E6  =000001C0              11204  mask_AND_opmode             EQU     $01C0
000084E6  =00000038              11205  mask_AND_ea_mode            EQU     $0038
000084E6  =00000007              11206  mask_AND_ea_reg             EQU     $0007
000084E6                         11207  
000084E6  =00000FFF              11208  mask_OR_EA                  EQU     $0FFF
000084E6  =00000E00              11209  mask_OR_reg                 EQU     $0E00
000084E6  =000001C0              11210  mask_OR_opmode              EQU     $01C0
000084E6  =00000038              11211  mask_OR_ea_mode             EQU     $0038
000084E6  =00000007              11212  mask_OR_ea_reg              EQU     $0007
000084E6                         11213  
000084E6  =000000FF              11214  mask_NOT_EA                 EQU     $00FF
000084E6  =000000C0              11215  mask_NOT_size               EQU     $00C0
000084E6  =00000038              11216  mask_NOT_ea_mode            EQU     $0038
000084E6  =00000007              11217  mask_NOT_ea_reg             EQU     $0007
000084E6                         11218  
000084E6  =0000013F              11219  mask_ASR_mem_shift_EA       EQU     $013F
000084E6  =00000100              11220  mask_ASR_mem_shift_direct   EQU     $0100
000084E6  =00000038              11221  mask_ASR_mem_shift_ea_mode  EQU     $0038
000084E6  =00000007              11222  mask_ASR_mem_shift_ea_reg   EQU     $0007
000084E6                         11223  
000084E6  =0000013F              11224  mask_ASL_mem_shift_EA       EQU     $013F
000084E6  =00000100              11225  mask_ASL_mem_shift_direct   EQU     $0100
000084E6  =00000038              11226  mask_ASL_mem_shift_ea_mode  EQU     $0038
000084E6  =00000007              11227  mask_ASL_mem_shift_ea_reg   EQU     $0007
000084E6                         11228  
000084E6  =00000FE7              11229  mask_ASR_reg_shift_EA       EQU     $0FE7
000084E6  =00000E00              11230  mask_ASR_reg_shift_count    EQU     $0E00
000084E6  =00000100              11231  mask_ASR_reg_shift_direct   EQU     $0100
000084E6  =000000C0              11232  mask_ASR_reg_shift_size     EQU     $00C0
000084E6  =00000020              11233  mask_ASR_reg_shift_ir       EQU     $0020
000084E6  =00000007              11234  mask_ASR_reg_shift_reg      EQU     $0007
000084E6                         11235  
000084E6  =00000FE7              11236  mask_ASL_reg_shift_EA       EQU     $0FE7
000084E6  =00000E00              11237  mask_ASL_reg_shift_count    EQU     $0E00
000084E6  =00000100              11238  mask_ASL_reg_shift_direct   EQU     $0100
000084E6  =000000C0              11239  mask_ASL_reg_shift_size     EQU     $00C0
000084E6  =00000020              11240  mask_ASL_reg_shift_ir       EQU     $0020
000084E6  =00000007              11241  mask_ASL_reg_shift_reg      EQU     $0007
000084E6                         11242  
000084E6  =0000013F              11243  mask_LSR_mem_shift_EA       EQU     $013F
000084E6  =00000100              11244  mask_LSR_mem_shift_direct   EQU     $0100
000084E6  =00000038              11245  mask_LSR_mem_shift_ea_mode  EQU     $0038
000084E6  =00000007              11246  mask_LSR_mem_shift_ea_reg   EQU     $0007
000084E6                         11247  
000084E6  =0000013F              11248  mask_LSL_mem_shift_EA       EQU     $013F
000084E6  =00000100              11249  mask_LSL_mem_shift_direct   EQU     $0100
000084E6  =00000038              11250  mask_LSL_mem_shift_ea_mode  EQU     $0038
000084E6  =00000007              11251  mask_LSL_mem_shift_ea_reg   EQU     $0007
000084E6                         11252  
000084E6  =00000FE7              11253  mask_LSR_reg_shift_EA       EQU     $0FE7
000084E6  =00000E00              11254  mask_LSR_reg_shift_count    EQU     $0E00
000084E6  =00000100              11255  mask_LSR_reg_shift_direct   EQU     $0100
000084E6  =000000C0              11256  mask_LSR_reg_shift_size     EQU     $00C0
000084E6  =00000020              11257  mask_LSR_reg_shift_ir       EQU     $0020
000084E6  =00000007              11258  mask_LSR_reg_shift_reg      EQU     $0007
000084E6                         11259  
000084E6  =00000FE7              11260  mask_LSL_reg_shift_EA       EQU     $0FE7
000084E6  =00000E00              11261  mask_LSL_reg_shift_count    EQU     $0E00
000084E6  =00000100              11262  mask_LSL_reg_shift_direct   EQU     $0100
000084E6  =000000C0              11263  mask_LSL_reg_shift_sIze     EQU     $00C0
000084E6  =00000020              11264  mask_LSL_reg_shift_ir       EQU     $0020
000084E6  =00000007              11265  mask_LSL_reg_shift_reg      EQU     $0007
000084E6                         11266  
000084E6                         11267  
000084E6  =0000013F              11268  mask_ROR_mem_rot_EA         EQU     $013F
000084E6  =00000100              11269  mask_ROR_mem_rot_direct     EQU     $0100
000084E6  =00000038              11270  mask_ROR_mem_rot_ea_mode    EQU     $0038
000084E6  =00000007              11271  mask_ROR_mem_rot_ea_reg     EQU     $0007
000084E6                         11272  
000084E6  =0000013F              11273  mask_ROL_mem_rot_EA         EQU     $013F
000084E6  =00000100              11274  mask_ROL_mem_rot_direct     EQU     $0100
000084E6  =00000038              11275  mask_ROL_mem_rot_ea_mode    EQU     $0038
000084E6  =00000007              11276  mask_ROL_mem_rot_ea_reg     EQU     $0007
000084E6                         11277  
000084E6  =00000FE7              11278  mask_ROR_reg_rot_EA         EQU     $0FE7
000084E6  =00000E00              11279  mask_ROR_reg_rot_count      EQU     $0E00
000084E6  =00000100              11280  mask_ROR_reg_rot_direct     EQU     $0100
000084E6  =000000C0              11281  mask_ROR_reg_rot_size       EQU     $00C0
000084E6  =00000020              11282  mask_ROR_reg_rot_ir         EQU     $0020
000084E6  =00000007              11283  mask_ROR_reg_rot_reg        EQU     $0007
000084E6                         11284  
000084E6  =00000FE7              11285  mask_ROL_reg_rot_EA         EQU     $0FE7
000084E6  =00000E00              11286  mask_ROL_reg_rot_count      EQU     $0E00
000084E6  =00000100              11287  mask_ROL_reg_rot_direct     EQU     $0100
000084E6  =00000C00              11288  mask_ROL_reg_rot_size       EQU     $0C00
000084E6  =00000020              11289  mask_ROL_reg_rot_ir         EQU     $0020
000084E6  =00000007              11290  mask_ROL_reg_rot_reg        EQU     $0007
000084E6                         11291  
000084E6  =00000FFF              11292  mask_Bcc_EA                 EQU     $0FFF
000084E6  =00000E00              11293  mask_Bcc_cond               EQU     $0E00
000084E6  =000000FF              11294  mask_Bcc_displace           EQU     $00FF
000084E6                         11295  
000084E6  =00000F00              11296  mask_BLE_EA                 EQU     $0F00       ;code for LE condition is 1111
000084E6  =000000FF              11297  mask_BLE_displace           EQU     $00FF
000084E6                         11298  
000084E6  =00000F00              11299  mask_BGT_EA                 EQU     $0F00       ;code for GT condition is 1110
000084E6  =000000FF              11300  mask_BGT_displace           EQU     $00FF
000084E6                         11301  
000084E6  =0000003F              11302  mask_JSR_EA                 EQU     $003F
000084E6  =00000038              11303  mask_JSR_ea_mode            EQU     $0038
000084E6  =00000007              11304  mask_JSR_ea_reg             EQU     $0007
000084E6                         11305  
000084E6  =000000FF              11306  mask_BRA_EA                 EQU     $00FF
000084E6                         11307  
000084E6                         11308  
000084E6                         11309  -------------------- end include --------------------
000084E6                         11310              INCLUDE 'variables.X68'
000084E6  =0000F000              11311  mask_opcode     EQU     $F000
000084E6  =0000C000              11312  mask_MOVE       EQU     $C000
000084E6  =000001C0              11313  mask_MOVE_A     EQU     $01C0
000084E6  =0000F1C0              11314  mask_LEA        EQU     $F1C0
000084E6  =0000FFC0              11315  mask_JSR        EQU     $FFC0
000084E6  =0000FF00              11316  mask_NOT        EQU     $FF00
000084E6  =0000F0C0              11317  mask_ADDA       EQU     $F0C0
000084E6  =0000FF00              11318  mask_BCC        EQU     $FF00
000084E6  =0000FFC0              11319  mask_SHFT_M     EQU     $FFC0
000084E6  =0000F118              11320  mask_SHFT_R     EQU     $F118
000084E6  =000000FF              11321  mask_BCC_size   EQU     $00FF
000084E6  =0000FF80              11322  mask_MOVEM      EQU     $FF80
000084E6  =00000000              11323  match_MOVE       EQU     $0000
000084E6  =00001000              11324  match_MOVEB      EQU     $1000
000084E6  =00003000              11325  match_MOVEW      EQU     $3000
000084E6  =00002000              11326  match_MOVEL      EQU     $2000
000084E6  =00000040              11327  match_MOVEA      EQU     $0040
000084E6  =00007000              11328  match_MOVEQ      EQU     $7000
000084E6  =00004000              11329  match_G0100      EQU     $4000
000084E6  =00004E71              11330  match_NOP        EQU     $4E71
000084E6  =00004E75              11331  match_RTS        EQU     $4E75
000084E6  =000041C0              11332  match_LEA        EQU     $41C0
000084E6  =00004E80              11333  match_JSR        EQU     $4E80
000084E6  =00004600              11334  match_NOT        EQU     $4600
000084E6  =0000D000              11335  match_G1101      EQU     $D000
000084E6  =0000D0C0              11336  match_ADDA       EQU     $D0C0
000084E6  =00006000              11337  match_G0110      EQU     $6000
000084E6  =00006E00              11338  match_BGT        EQU     $6E00
000084E6  =00006700              11339  match_BEQ        EQU     $6700
000084E6  =00006F00              11340  match_BLE        EQU     $6F00
000084E6  =00006000              11341  match_BRA        EQU     $6000
000084E6  =0000E000              11342  match_G1110      EQU     $E000
000084E6  =0000E3C0              11343  match_LSL_M      EQU     $E3C0
000084E6  =0000E2C0              11344  match_LSR_M      EQU     $E2C0
000084E6  =0000E1C0              11345  match_ASL_M      EQU     $E1C0
000084E6  =0000E0C0              11346  match_ASR_M      EQU     $E0C0
000084E6  =0000E7C0              11347  match_ROL_M      EQU     $E7C0
000084E6  =0000E6C0              11348  match_ROR_M      EQU     $E6C0
000084E6  =0000E108              11349  match_LSL_R      EQU     $E108
000084E6  =0000E008              11350  match_LSR_R      EQU     $E008
000084E6  =0000E100              11351  match_ASL_R      EQU     $E100
000084E6  =0000E000              11352  match_ASR_R      EQU     $E000
000084E6  =0000E118              11353  match_ROL_R      EQU     $E118
000084E6  =0000E018              11354  match_ROR_R      EQU     $E018
000084E6  =00005000              11355  match_ADDQ       EQU     $5000
000084E6  =00009000              11356  match_SUB        EQU     $9000
000084E6  =0000C000              11357  match_AND        EQU     $C000
000084E6  =00008000              11358  match_OR         EQU     $8000
000084E6  =00004880              11359  match_MOVEM_RM   EQU     $4880
000084E6  =00004C80              11360  match_MOVEM_MR   EQU     $4C80
000084E6  =00003000              11361  mask_size_MOVES     EQU     $3000
000084E6  =000000C0              11362  mask_size_NOT       EQU     $00C0
000084E6  =00000100              11363  mask_size_ADDA      EQU     $0100
000084E6  =000000C0              11364  mask_size_ADD       EQU     $00C0
000084E6  =000000C0              11365  mask_size_shifts    EQU     $00C0
000084E6  =000000C0              11366  mask_size_SUB       EQU     $00C0
000084E6  =000000C0              11367  mask_size_logic     EQU     $00C0
000084E6  =00000040              11368  mask_size_MOVEM     EQU     $0040
000084E6  =0000F100              11369  mask_size_MOVEQ     EQU     $F100
000084E6  =00001000              11370  m_size_B_MOVES      EQU     $1000
000084E6  =00003000              11371  m_size_W_MOVES      EQU     $3000
000084E6  =00002000              11372  m_size_L_MOVES      EQU     $2000
000084E6  =00000000              11373  m_size_B_NOT        EQU     $0000
000084E6  =00000040              11374  m_size_W_NOT        EQU     $0040
000084E6  =00000080              11375  m_size_L_NOT        EQU     $0080
000084E6  =00000000              11376  m_size_W_ADDA       EQU     $0000
000084E6  =00000100              11377  m_size_L_ADDA       EQU     $0100
000084E6  =00000000              11378  m_size_B_ADD        EQU     $0000
000084E6  =00000040              11379  m_size_W_ADD        EQU     $0040
000084E6  =00000080              11380  m_size_L_ADD        EQU     $0080
000084E6  =00000000              11381  m_size_B_shfts      EQU     $0000
000084E6  =00000040              11382  m_size_W_shfts      EQU     $0040
000084E6  =00000080              11383  m_size_L_shfts      EQU     $0080
000084E6  =00000000              11384  m_size_B_SUB        EQU     $0000
000084E6  =00000040              11385  m_size_W_SUB        EQU     $0040
000084E6  =00000080              11386  m_size_L_SUB        EQU     $0080
000084E6  =00000000              11387  m_size_B_logic      EQU     $0000
000084E6  =00000040              11388  m_size_W_logic      EQU     $0040
000084E6  =00000080              11389  m_size_L_logic      EQU     $0080
000084E6  =000000FF              11390  m_size_L_bcc        EQU     $00FF
000084E6  =00000000              11391  m_size_W_bcc        EQU     $0000
000084E6  =00000000              11392  m_size_W_MOVEM      EQU     $0000
000084E6  =00000040              11393  m_size_L_MOVEM      EQU     $0040
000084E6  =00007000              11394  m_size_L_MOVEQ      EQU     $7000
000084E6  =00000001              11395  byte_size           EQU     1
000084E6  =00000002              11396  word_size           EQU     2
000084E6  =00000003              11397  long_size           EQU     3
000084E6  =00000000              11398  no_size             EQU     0
000084E6  =FFFFFFFF              11399  not_hex             EQU     $FFFFFFFF
000084E6  =00000000              11400  hex_clear           EQU     $00000000
000084E6  =00007000              11401  start_Adr           EQU     $00007000
000084E6  =000073BA              11402  end_Adr             EQU     $000073BA
000084E6  =00000038              11403  mask_ADDA_ea_mode                       EQU         $0038
000084E6  =0000003F              11404  mask_ADDA_abs_add                       EQU         $003F
000084E6  =0000003F              11405  mask_ADDA_ea_reg_and_mode               EQU         $003F
000084E6  =00000E00              11406  mask_ADDA_An_reg                        EQU         $0E00
000084E6                         11407  
000084E6  =00000000              11408  match_ADDA_Dn                           EQU         $0000
000084E6  =00000008              11409  match_ADDA_An                           EQU         $0008
000084E6  =00000010              11410  match_ADDA_An_indir                     EQU         $0010
000084E6  =00000020              11411  match_ADDA_An_indir_predec              EQU         $0020
000084E6  =00000018              11412  match_ADDA_An_indir_postinc             EQU         $0018
000084E6  =00000038              11413  match_ADDA_abs_add_word                 EQU         $0038
000084E6  =00000039              11414  match_ADDA_abs_add_long                 EQU         $0039
000084E6                         11415  
000084E6  =00000000              11416  match_ADDA_D0                           EQU         $0000
000084E6  =00000001              11417  match_ADDA_D1                           EQU         $0001
000084E6  =00000002              11418  match_ADDA_D2                           EQU         $0002
000084E6  =00000003              11419  match_ADDA_D3                           EQU         $0003
000084E6  =00000004              11420  match_ADDA_D4                           EQU         $0004
000084E6  =00000005              11421  match_ADDA_D5                           EQU         $0005
000084E6  =00000006              11422  match_ADDA_D6                           EQU         $0006
000084E6  =00000007              11423  match_ADDA_D7                           EQU         $0007
000084E6                         11424  
000084E6  =00000008              11425  match_ADDA_A0                           EQU         $0008
000084E6  =00000009              11426  match_ADDA_A1                           EQU         $0009
000084E6  =0000000A              11427  match_ADDA_A2                           EQU         $000A
000084E6  =0000000B              11428  match_ADDA_A3                           EQU         $000B
000084E6  =0000000C              11429  match_ADDA_A4                           EQU         $000C
000084E6  =0000000D              11430  match_ADDA_A5                           EQU         $000D
000084E6  =0000000E              11431  match_ADDA_A6                           EQU         $000E
000084E6  =0000000F              11432  match_ADDA_A7                           EQU         $000F
000084E6                         11433  
000084E6  =00000010              11434  match_ADDA_An_indir_r0                  EQU         $0010
000084E6  =00000011              11435  match_ADDA_An_indir_r1                  EQU         $0011
000084E6  =00000012              11436  match_ADDA_An_indir_r2                  EQU         $0012
000084E6  =00000013              11437  match_ADDA_An_indir_r3                  EQU         $0013
000084E6  =00000014              11438  match_ADDA_An_indir_r4                  EQU         $0014
000084E6  =00000015              11439  match_ADDA_An_indir_r5                  EQU         $0015
000084E6  =00000016              11440  match_ADDA_An_indir_r6                  EQU         $0016
000084E6  =00000017              11441  match_ADDA_An_indir_r7                  EQU         $0017
000084E6                         11442  
000084E6  =00000018              11443  match_ADDA_An_indir_postinc_reg0        EQU         $0018
000084E6  =00000019              11444  match_ADDA_An_indir_postinc_reg1        EQU         $0019
000084E6  =0000001A              11445  match_ADDA_An_indir_postinc_reg2        EQU         $001A
000084E6  =0000001B              11446  match_ADDA_An_indir_postinc_reg3        EQU         $001B
000084E6  =0000001C              11447  match_ADDA_An_indir_postinc_reg4        EQU         $001C
000084E6  =0000001D              11448  match_ADDA_An_indir_postinc_reg5        EQU         $001D
000084E6  =0000001E              11449  match_ADDA_An_indir_postinc_reg6        EQU         $001E
000084E6  =0000001F              11450  match_ADDA_An_indir_postinc_reg7        EQU         $001F
000084E6                         11451  
000084E6  =00000020              11452  match_ADDA_An_indir_predec_reg0         EQU         $0020
000084E6  =00000021              11453  match_ADDA_An_indir_predec_reg1         EQU         $0021
000084E6  =00000022              11454  match_ADDA_An_indir_predec_reg2         EQU         $0022
000084E6  =00000023              11455  match_ADDA_An_indir_predec_reg3         EQU         $0023
000084E6  =00000024              11456  match_ADDA_An_indir_predec_reg4         EQU         $0024
000084E6  =00000025              11457  match_ADDA_An_indir_predec_reg5         EQU         $0025
000084E6  =00000026              11458  match_ADDA_An_indir_predec_reg6         EQU         $0026
000084E6  =00000027              11459  match_ADDA_An_indir_predec_reg7         EQU         $0027
000084E6                         11460  
000084E6  =0000003C              11461  match_imm_add                           EQU         $003C
000084E6  =000000FC              11462  match_imm_add_word                      EQU         $00FC
000084E6  =000001FC              11463  match_imm_add_long                      EQU         $01FC
000084E6                         11464  
000084E6  =00000000              11465  match_ADDA_reg0                         EQU         $0000
000084E6  =00000200              11466  match_ADDA_reg1                         EQU         $0200
000084E6  =00000400              11467  match_ADDA_reg2                         EQU         $0400
000084E6  =00000600              11468  match_ADDA_reg3                         EQU         $0600
000084E6  =00000800              11469  match_ADDA_reg4                         EQU         $0800
000084E6  =00000A00              11470  match_ADDA_reg5                         EQU         $0A00
000084E6  =00000C00              11471  match_ADDA_reg6                         EQU         $0C00
000084E6  =00000E00              11472  match_ADDA_reg7                         EQU         $0E00
000084E6                         11473  
000084E6  =00000038              11474  mask_ADDQ_ea_mode           EQU         $0038
000084E6  =0000003F              11475  mask_ADDQ_abs_add           EQU         $003F
000084E6  =0000003F              11476  mask_ADDQ_ea_reg_and_mode   EQU         $003F
000084E6  =00000E00              11477  mask_ADDQ_reg               EQU         $0E00
000084E6                         11478  
000084E6  =00000000              11479  match_ADDQ_Dn               EQU         $0000
000084E6  =00000008              11480  match_ADDQ_An               EQU         $0008
000084E6  =00000010              11481  match_ADDQ_An_indir         EQU         $0010
000084E6  =00000020              11482  match_ADDQ_An_indir_predec  EQU         $0020
000084E6  =00000018              11483  match_ADDQ_An_indir_postinc EQU         $0018
000084E6  =00000038              11484  match_ADDQ_abs_add_word     EQU         $0038
000084E6  =00000039              11485  match_ADDQ_abs_add_long     EQU         $0039
000084E6                         11486  
000084E6  =00000000              11487  match_ADDQ_D0               EQU         $0000
000084E6  =00000001              11488  match_ADDQ_D1               EQU         $0001
000084E6  =00000002              11489  match_ADDQ_D2               EQU         $0002
000084E6  =00000003              11490  match_ADDQ_D3               EQU         $0003
000084E6  =00000004              11491  match_ADDQ_D4               EQU         $0004
000084E6  =00000005              11492  match_ADDQ_D5               EQU         $0005
000084E6  =00000006              11493  match_ADDQ_D6               EQU         $0006
000084E6  =00000007              11494  match_ADDQ_D7               EQU         $0007
000084E6                         11495  
000084E6  =00000008              11496  match_ADDQ_A0               EQU         $0008
000084E6  =00000009              11497  match_ADDQ_A1               EQU         $0009
000084E6  =0000000A              11498  match_ADDQ_A2               EQU         $000A
000084E6  =0000000B              11499  match_ADDQ_A3               EQU         $000B
000084E6  =0000000C              11500  match_ADDQ_A4               EQU         $000C
000084E6  =0000000D              11501  match_ADDQ_A5               EQU         $000D
000084E6  =0000000E              11502  match_ADDQ_A6               EQU         $000E
000084E6  =0000000F              11503  match_ADDQ_A7               EQU         $000F
000084E6                         11504  
000084E6  =00000010              11505  match_ADDQ_An_indir_r0      EQU         $0010
000084E6  =00000011              11506  match_ADDQ_An_indir_r1      EQU         $0011
000084E6  =00000012              11507  match_ADDQ_An_indir_r2      EQU         $0012
000084E6  =00000013              11508  match_ADDQ_An_indir_r3      EQU         $0013
000084E6  =00000014              11509  match_ADDQ_An_indir_r4      EQU         $0014
000084E6  =00000015              11510  match_ADDQ_An_indir_r5      EQU         $0015
000084E6  =00000016              11511  match_ADDQ_An_indir_r6      EQU         $0016
000084E6  =00000017              11512  match_ADDQ_An_indir_r7      EQU         $0017
000084E6                         11513  
000084E6  =00000018              11514  match_ADDQ_An_indir_postinc_reg0        EQU         $0018
000084E6  =00000019              11515  match_ADDQ_An_indir_postinc_reg1        EQU         $0019
000084E6  =0000001A              11516  match_ADDQ_An_indir_postinc_reg2        EQU         $001A
000084E6  =0000001B              11517  match_ADDQ_An_indir_postinc_reg3        EQU         $001B
000084E6  =0000001C              11518  match_ADDQ_An_indir_postinc_reg4        EQU         $001C
000084E6  =0000001D              11519  match_ADDQ_An_indir_postinc_reg5        EQU         $001D
000084E6  =0000001E              11520  match_ADDQ_An_indir_postinc_reg6        EQU         $001E
000084E6  =0000001F              11521  match_ADDQ_An_indir_postinc_reg7        EQU         $001F
000084E6                         11522  
000084E6  =00000020              11523  match_ADDQ_An_indir_predec_reg0         EQU         $0020
000084E6  =00000021              11524  match_ADDQ_An_indir_predec_reg1         EQU         $0021
000084E6  =00000022              11525  match_ADDQ_An_indir_predec_reg2         EQU         $0022
000084E6  =00000023              11526  match_ADDQ_An_indir_predec_reg3         EQU         $0023
000084E6  =00000024              11527  match_ADDQ_An_indir_predec_reg4         EQU         $0024
000084E6  =00000025              11528  match_ADDQ_An_indir_predec_reg5         EQU         $0025
000084E6  =00000026              11529  match_ADDQ_An_indir_predec_reg6         EQU         $0026
000084E6  =00000027              11530  match_ADDQ_An_indir_predec_reg7         EQU         $0027
000084E6                         11531  
000084E6                         11532  
000084E6  =00000000              11533  match_ADDQ_reg0                         EQU         $0000
000084E6  =00000200              11534  match_ADDQ_reg1                         EQU         $0200
000084E6  =00000400              11535  match_ADDQ_reg2                         EQU         $0400
000084E6  =00000600              11536  match_ADDQ_reg3                         EQU         $0600
000084E6  =00000800              11537  match_ADDQ_reg4                         EQU         $0800
000084E6  =00000A00              11538  match_ADDQ_reg5                         EQU         $0A00
000084E6  =00000C00              11539  match_ADDQ_reg6                         EQU         $0C00
000084E6  =00000E00              11540  match_ADDQ_reg7                         EQU         $0E00
000084E6                         11541  
000084E6                         11542  
000084E6                         11543  
000084E6                         11544  
000084E6                         11545  
000084E6                         11546  
000084E6                         11547  
000084E6                         11548  
000084E6                         11549  -------------------- end include --------------------
000084E6                         11550              INCLUDE 'strings.x68'
000084E6= 4D 4F 56 45 2E 42 00   11551  opcode_MOVEB    DC.B    'MOVE.B',0
000084ED= 4D 4F 56 45 2E 57 00   11552  opcode_MOVEW    DC.B    'MOVE.W',0
000084F4= 4D 4F 56 45 2E 4C 00   11553  opcode_MOVEL    DC.B    'MOVE.L',0
000084FB= 4D 4F 56 45 4D 00      11554  opcode_MOVEM    DC.B    'MOVEM',0
00008501= 4D 4F 56 45 51 00      11555  opcode_MOVEQ    DC.B    'MOVEQ',0
00008507= 4D 4F 56 45 41 2E ...  11556  opcode_MOVEAB   DC.B    'MOVEA.B',0
0000850F= 4D 4F 56 45 41 2E ...  11557  opcode_MOVEAW   DC.B    'MOVEA.W',0
00008517= 4D 4F 56 45 41 2E ...  11558  opcode_MOVEAL   DC.B    'MOVEA.L',0
0000851F= 4E 4F 50 00            11559  opcode_NOP      DC.B    'NOP',0
00008523= 41 44 44 2E 42 00      11560  opcode_ADDB     DC.B    'ADD.B',0
00008529= 41 44 44 2E 57 00      11561  opcode_ADDW     DC.B    'ADD.W',0
0000852F= 41 44 44 2E 4C 00      11562  opcode_ADDL     DC.B    'ADD.L',0
00008535= 41 44 44 41 2E 57 00   11563  opcode_ADDAW    DC.B    'ADDA.W',0
0000853C= 41 44 44 41 2E 4C 00   11564  opcode_ADDAL    DC.B    'ADDA.L',0
00008543= 41 44 44 51 2E 42 00   11565  opcode_ADDQB    DC.B    'ADDQ.B',0
0000854A= 41 44 44 51 2E 57 00   11566  opcode_ADDQW    DC.B    'ADDQ.W',0
00008551= 41 44 44 51 2E 4C 00   11567  opcode_ADDQL    DC.B    'ADDQ.L',0
00008558= 53 55 42 2E 42 00      11568  opcode_SUBB     DC.B    'SUB.B',0
0000855E= 53 55 42 2E 57 00      11569  opcode_SUBW     DC.B    'SUB.W',0
00008564= 53 55 42 2E 4C 00      11570  opcode_SUBL     DC.B    'SUB.L',0
0000856A= 4C 45 41 00            11571  opcode_LEA      DC.B    'LEA',0
0000856E= 41 4E 44 2E 42 00      11572  opcode_ANDB     DC.B    'AND.B',0
00008574= 41 4E 44 2E 57 00      11573  opcode_ANDW     DC.B    'AND.W',0
0000857A= 41 4E 44 2E 4C 00      11574  opcode_ANDL     DC.B    'AND.L',0
00008580= 4F 52 2E 42 00         11575  opcode_ORB      DC.B    'OR.B',0
00008585= 4F 52 2E 57 00         11576  opcode_ORW      DC.B    'OR.W',0
0000858A= 4F 52 2E 4C 00         11577  opcode_ORL      DC.B    'OR.L',0
0000858F= 4E 4F 54 2E 42 00      11578  opcode_NOTB     DC.B    'NOT.B',0
00008595= 4E 4F 54 2E 57 00      11579  opcode_NOTW     DC.B    'NOT.W',0
0000859B= 4E 4F 54 2E 4C 00      11580  opcode_NOTL     DC.B    'NOT.L',0
000085A1= 4C 53 4C 2E 42 00      11581  opcode_LSLB     DC.B    'LSL.B',0
000085A7= 4C 53 4C 2E 57 00      11582  opcode_LSLW     DC.B    'LSL.W',0
000085AD= 4C 53 4C 2E 4C 00      11583  opcode_LSLL     DC.B    'LSL.L',0
000085B3= 4C 53 52 2E 42 00      11584  opcode_LSRB     DC.B    'LSR.B',0
000085B9= 4C 53 52 2E 57 00      11585  opcode_LSRW     DC.B    'LSR.W',0
000085BF= 4C 53 52 2E 4C 00      11586  opcode_LSRL     DC.B    'LSR.L',0
000085C5= 41 53 4C 2E 42 00      11587  opcode_ASLB     DC.B    'ASL.B',0
000085CB= 41 53 4C 2E 57 00      11588  opcode_ASLW     DC.B    'ASL.W',0
000085D1= 41 53 4C 2E 4C 00      11589  opcode_ASLL     DC.B    'ASL.L',0
000085D7= 41 53 52 2E 42 00      11590  opcode_ASRB     DC.B    'ASR.B',0
000085DD= 41 53 52 2E 57 00      11591  opcode_ASRW     DC.B    'ASR.W',0
000085E3= 41 53 52 2E 4C 00      11592  opcode_ASRL     DC.B    'ASR.L',0
000085E9= 52 4F 4C 2E 42 00      11593  opcode_ROLB     DC.B    'ROL.B',0
000085EF= 52 4F 4C 2E 57 00      11594  opcode_ROLW     DC.B    'ROL.W',0
000085F5= 52 4F 4C 2E 4C 00      11595  opcode_ROLL     DC.B    'ROL.L',0
000085FB= 52 4F 52 2E 42 00      11596  opcode_RORB     DC.B    'ROR.B',0
00008601= 52 4F 52 2E 57 00      11597  opcode_RORW     DC.B    'ROR.W',0
00008607= 52 4F 52 2E 4C 00      11598  opcode_RORL     DC.B    'ROR.L',0
0000860D= 42 47 54 00            11599  opcode_BGT      DC.B    'BGT',0
00008611= 42 47 54 2E 42 00      11600  opcode_BGTB     DC.B    'BGT.B',0
00008617= 42 47 54 2E 57 00      11601  opcode_BGTW     DC.B    'BGT.W',0
0000861D= 42 4C 45 00            11602  opcode_BLE      DC.B    'BLE',0
00008621= 42 4C 45 2E 42 00      11603  opcode_BLEB     DC.B    'BLE.B',0
00008627= 42 4C 45 2E 57 00      11604  opcode_BLEW     DC.B    'BLE.W',0
0000862D= 42 45 51 00            11605  opcode_BEQ      DC.B    'BEQ',0
00008631= 42 45 51 2E 42 00      11606  opcode_BEQB     DC.B    'BEQ.B',0
00008637= 42 45 51 2E 57 00      11607  opcode_BEQW     DC.B    'BEQ.W',0
0000863D= 4A 53 52 00            11608  opcode_JSR      DC.B    'JSR',0
00008641= 52 54 53 00            11609  opcode_RTS      DC.B    'RTS',0
00008645= 42 52 41 00            11610  opcode_BRA      DC.B    'BRA',0
00008649= 42 52 41 2E 42 00      11611  opcode_BRAB     DC.B    'BRA.B',0
0000864F= 42 52 41 2E 57 00      11612  opcode_BRAW     DC.B    'BRA.W',0
00008655= 4D 4F 56 45 4D 2E ...  11613  opcode_MOVEMW   DC.B    'MOVEM.W',0
0000865D= 4D 4F 56 45 4D 2E ...  11614  opcode_MOVEML   DC.B    'MOVEM.L',0
00008665= 44 41 54 41 00         11615  opcode_DATA     DC.B    'DATA',0
0000866A  =0000000D              11616  CR          EQU     $0D *ASCII code for carriage return
0000866A  =0000000A              11617  LF          EQU     $0A *ASCII code for line feed
0000866A  =00000009              11618  HT          EQU     $09 *ASCII code for horizontal tab
0000866A  =00000071              11619  QT          EQU     $71 *ascii for lowercase q
0000866A  =00000072              11620  RT          EQU     $72 *ascii for lowercase r
0000866A                         11621  
0000866A= 57 65 6C 63 6F 6D ...  11622  LOAD_MESSAGE    DC.B    'Welcome to The Disassemblers CSS 422 projectA',CR,LF,'Select "demo_test.s68" in File->Open Data for test data',CR,LF,0
000086D3= 49 66 20 79 6F 75 ...  11623  LOAD2_MESSAGE   DC.B    'If you got to this page without loading the test file,',CR,LF,'please exit and follow the directions above.',CR,LF,0
0000873A= 49 6E 70 75 74 20 ...  11624  START_REQUEST   DC.B    'Input starting memory location between $00007000 and $000073BA',CR,LF,'in the format "########": ',0
00008795= 49 6E 70 75 74 20 ...  11625  END_REQUEST     DC.B    'Input ending memory location between $00007000 and $000073BA',CR,LF,'in the format "########": ',0
000087EE= 49 6E 70 75 74 20 ...  11626  NOT_HEX_MSG     DC.B    'Input was not in the hexadecimal range 0-F',0
00008819= 49 6E 70 75 74 20 ...  11627  BAD_RANGE       DC.B    'Input is not in the range between $00007000 and $000073BA',CR,LF,0
00008855= 45 6E 64 69 6E 67 ...  11628  BAD_END         DC.B    'Ending location is less than the starting location, please switch the inputs.',CR,LF,0
000088A5= 49 6E 70 75 74 20 ...  11629  BAD_BOUND       DC.B    'Input is not on an input boundary, please enter address divisible by 2.',CR,LF,0
000088EF= 0D 0A 00               11630  SPACE           DC.B    CR,LF,0
000088F2= 50 72 65 73 73 20 ...  11631  PRESS_ENTER     DC.B    'Press ENTER to continue.',CR,LF,0
0000890D= 09 00                  11632  TAB             DC.B    HT,0
0000890F= 57 6F 75 6C 64 20 ...  11633  RESTART_Q       DC.B    'Would you like to test again?',CR,LF,'Press r to restart or q to quit.',CR,LF,0
00008951                         11634  
00008951= 49 6E 63 6F 72 72 ...  11635  ERROR_MESSAGE                   DC.B            'Incorrect EA Format',0
00008965= 44 30 00               11636  ea_D0                       DC.B        'D0',0
00008968= 44 31 00               11637  ea_D1                       DC.B        'D1',0
0000896B= 44 32 00               11638  ea_D2                       DC.B        'D2',0
0000896E= 44 33 00               11639  ea_D3                       DC.B        'D3',0
00008971= 44 34 00               11640  ea_D4                       DC.B        'D4',0
00008974= 44 35 00               11641  ea_D5                       DC.B        'D5',0
00008977= 44 36 00               11642  ea_D6                       DC.B        'D6',0
0000897A= 44 37 00               11643  ea_D7                       DC.B        'D7',0
0000897D                         11644  
0000897D= 41 30 00               11645  ea_A0                       DC.B        'A0',0
00008980= 41 31 00               11646  ea_A1                       DC.B        'A1',0
00008983= 41 32 00               11647  ea_A2                       DC.B        'A2',0
00008986= 41 33 00               11648  ea_A3                       DC.B        'A3',0
00008989= 41 34 00               11649  ea_A4                       DC.B        'A4',0
0000898C= 41 35 00               11650  ea_A5                       DC.B        'A5',0
0000898F= 41 36 00               11651  ea_A6                       DC.B        'A6',0
00008992= 41 37 00               11652  ea_A7                       DC.B        'A7',0
00008995                         11653  
00008995= 38 00                  11654  ea_val0                     DC.B        '8',0
00008997= 31 00                  11655  ea_val1                     DC.B        '1',0
00008999= 32 00                  11656  ea_val2                     DC.B        '2',0
0000899B= 33 00                  11657  ea_val3                     DC.B        '3',0
0000899D= 34 00                  11658  ea_val4                     DC.B        '4',0
0000899F= 35 00                  11659  ea_val5                     DC.B        '5',0
000089A1= 36 00                  11660  ea_val6                     DC.B        '6',0
000089A3= 37 00                  11661  ea_val7                     DC.B        '7',0
000089A5                         11662  
000089A5= 28 41 30 29 00         11663  ea_indir_A0                 DC.B        '(A0)',0
000089AA= 28 41 31 29 00         11664  ea_indir_A1                 DC.B        '(A1)',0
000089AF= 28 41 32 29 00         11665  ea_indir_A2                 DC.B        '(A2)',0
000089B4= 28 41 33 29 00         11666  ea_indir_A3                 DC.B        '(A3)',0
000089B9= 28 41 34 29 00         11667  ea_indir_A4                 DC.B        '(A4)',0
000089BE= 28 41 35 29 00         11668  ea_indir_A5                 DC.B        '(A5)',0
000089C3= 28 41 36 29 00         11669  ea_indir_A6                 DC.B        '(A6)',0
000089C8= 28 41 37 29 00         11670  ea_indir_A7                 DC.B        '(A7)',0
000089CD                         11671  
000089CD= 28 41 30 29 2B 00      11672  ea_indir_postinc_A0         DC.B        '(A0)+',0
000089D3= 28 41 31 29 2B 00      11673  ea_indir_postinc_A1         DC.B        '(A1)+',0
000089D9= 28 41 32 29 2B 00      11674  ea_indir_postinc_A2         DC.B        '(A2)+',0
000089DF= 28 41 33 29 2B 00      11675  ea_indir_postinc_A3         DC.B        '(A3)+',0
000089E5= 28 41 34 29 2B 00      11676  ea_indir_postinc_A4         DC.B        '(A4)+',0
000089EB= 28 41 35 29 2B 00      11677  ea_indir_postinc_A5         DC.B        '(A5)+',0
000089F1= 28 41 36 29 2B 00      11678  ea_indir_postinc_A6         DC.B        '(A6)+',0
000089F7= 28 41 37 29 2B 00      11679  ea_indir_postinc_A7         DC.B        '(A7)+',0
000089FD                         11680  
000089FD                         11681  
000089FD= 2D 28 41 30 29 00      11682  ea_indir_predec_A0          DC.B        '-(A0)',0
00008A03= 2D 28 41 31 29 00      11683  ea_indir_predec_A1          DC.B        '-(A1)',0
00008A09= 2D 28 41 32 29 00      11684  ea_indir_predec_A2          DC.B        '-(A2)',0
00008A0F= 2D 28 41 33 29 00      11685  ea_indir_predec_A3          DC.B        '-(A3)',0
00008A15= 2D 28 41 34 29 00      11686  ea_indir_predec_A4          DC.B        '-(A4)',0
00008A1B= 2D 28 41 35 29 00      11687  ea_indir_predec_A5          DC.B        '-(A5)',0
00008A21= 2D 28 41 36 29 00      11688  ea_indir_predec_A6          DC.B        '-(A6)',0
00008A27= 2D 28 41 37 29 00      11689  ea_indir_predec_A7          DC.B        '-(A7)',0
00008A2D                         11690  
00008A2D= 28 00                  11691  ea_paren_open               DC.B        '(',0
00008A2F= 29 00                  11692  ea_paren_closed             DC.B        ')',0
00008A31= 2E 57 00               11693  ea_abs_word_string          DC.B        '.W',0
00008A34= 2E 4C 00               11694  ea_abs_long_string          DC.B        '.L',0
00008A37= 24 00                  11695  ea_$                        DC.B        '$',0
00008A39= 23 00                  11696  ea_lb                       DC.B            '#',0   
00008A3B                         11697  
00008A3B= 23 30 00               11698  ea_data0                    DC.B      '#0',0
00008A3E= 23 31 00               11699  ea_data1                    DC.B      '#1',0
00008A41= 23 32 00               11700  ea_data2                    DC.B      '#2',0
00008A44= 23 33 00               11701  ea_data3                    DC.B      '#3',0
00008A47= 23 34 00               11702  ea_data4                    DC.B      '#4',0
00008A4A= 23 35 00               11703  ea_data5                    DC.B      '#5',0
00008A4D= 23 36 00               11704  ea_data6                    DC.B      '#6',0
00008A50= 23 37 00               11705  ea_data7                    DC.B      '#7',0
00008A53                         11706  
00008A53                         11707  
00008A53                         11708  
00008A53                         11709  
00008A53                         11710  
00008A53                         11711  
00008A53                         11712  
00008A53                         11713  
00008A53                         11714  
00008A53                         11715  
00008A53                         11716  
00008A53                         11717  -------------------- end include --------------------
00008A53                         11718      
00008A53                         11719  
00008A53                         11720  STOP:
00008A53                         11721      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_A0_OUT         3832
ADDA_A1_OUT         383E
ADDA_A2_OUT         384A
ADDA_A3_OUT         3856
ADDA_A4_OUT         3862
ADDA_A5_OUT         386E
ADDA_A6_OUT         387A
ADDA_A7_OUT         3886
ADDA_ABS_ADD_LONG   36D4
ADDA_ABS_ADD_LONG_OUT  3B10
ADDA_ABS_ADD_WORD   36BE
ADDA_ABS_ADD_WORD_OUT  3B02
ADDA_ADD_REG_DIR    3686
ADDA_ADD_REG_INDIR  3694
ADDA_ADD_REG_INDIR_POSTINC  36B0
ADDA_ADD_REG_INDIR_PREDEC  36A2
ADDA_AN_INDIR_POSTINC_REG  3962
ADDA_AN_INDIR_POSTINC_REG0_OUT  39D2
ADDA_AN_INDIR_POSTINC_REG1  3970
ADDA_AN_INDIR_POSTINC_REG1_OUT  39DE
ADDA_AN_INDIR_POSTINC_REG2  397E
ADDA_AN_INDIR_POSTINC_REG2_OUT  39EA
ADDA_AN_INDIR_POSTINC_REG3  398C
ADDA_AN_INDIR_POSTINC_REG3_OUT  39F6
ADDA_AN_INDIR_POSTINC_REG4  399A
ADDA_AN_INDIR_POSTINC_REG4_OUT  3A02
ADDA_AN_INDIR_POSTINC_REG5  39A8
ADDA_AN_INDIR_POSTINC_REG5_OUT  3A0E
ADDA_AN_INDIR_POSTINC_REG6  39B6
ADDA_AN_INDIR_POSTINC_REG6_OUT  3A1A
ADDA_AN_INDIR_POSTINC_REG7  39C4
ADDA_AN_INDIR_POSTINC_REG7_OUT  3A26
ADDA_AN_INDIR_PREDEC  3A32
ADDA_AN_INDIR_PREDEC_REG0_OUT  3AA2
ADDA_AN_INDIR_PREDEC_REG1  3A40
ADDA_AN_INDIR_PREDEC_REG1_OUT  3AAE
ADDA_AN_INDIR_PREDEC_REG2  3A4E
ADDA_AN_INDIR_PREDEC_REG2_OUT  3ABA
ADDA_AN_INDIR_PREDEC_REG3  3A5C
ADDA_AN_INDIR_PREDEC_REG3_OUT  3AC6
ADDA_AN_INDIR_PREDEC_REG4  3A6A
ADDA_AN_INDIR_PREDEC_REG4_OUT  3AD2
ADDA_AN_INDIR_PREDEC_REG5  3A78
ADDA_AN_INDIR_PREDEC_REG5_OUT  3ADE
ADDA_AN_INDIR_PREDEC_REG6  3A86
ADDA_AN_INDIR_PREDEC_REG6_OUT  3AEA
ADDA_AN_INDIR_PREDEC_REG7  3A94
ADDA_AN_INDIR_PREDEC_REG7_OUT  3AF6
ADDA_AN_INDIR_REG   3892
ADDA_AN_INDIR_REG0_OUT  3902
ADDA_AN_INDIR_REG1  38A0
ADDA_AN_INDIR_REG1_OUT  390E
ADDA_AN_INDIR_REG2  38AE
ADDA_AN_INDIR_REG2_OUT  391A
ADDA_AN_INDIR_REG3  38BC
ADDA_AN_INDIR_REG3_OUT  3926
ADDA_AN_INDIR_REG4  38CA
ADDA_AN_INDIR_REG4_OUT  3932
ADDA_AN_INDIR_REG5  38D8
ADDA_AN_INDIR_REG5_OUT  393E
ADDA_AN_INDIR_REG6  38E6
ADDA_AN_INDIR_REG6_OUT  394A
ADDA_AN_INDIR_REG7  38F4
ADDA_AN_INDIR_REG7_OUT  3956
ADDA_AN_REG         37C2
ADDA_D0_OUT         3762
ADDA_D1_OUT         376E
ADDA_D2_OUT         377A
ADDA_D3_OUT         3786
ADDA_D4_OUT         3792
ADDA_D5_OUT         379E
ADDA_D6_OUT         37AA
ADDA_D7_OUT         37B6
ADDA_DATA_REG_DIR   3678
ADDA_DETERMINE_SECOND_OP  3B50
ADDA_DN_REG         36F2
ADDA_END            1772
ADDA_FAIL           176C
ADDA_IMMEDIATE_ADD  36DE
ADDA_IMMEDIATE_ADD_OUT  3B20
ADDA_IMM_ADD_L      3B40
ADDA_IMM_ADD_W      3B32
ADDA_L              1748
ADDA_RA1            37D0
ADDA_RA2            37DE
ADDA_RA3            37EC
ADDA_RA4            37FA
ADDA_RA5            3808
ADDA_RA6            3816
ADDA_RA7            3824
ADDA_RD1            3700
ADDA_RD2            370E
ADDA_RD3            371C
ADDA_RD4            372A
ADDA_RD5            3738
ADDA_RD6            3746
ADDA_RD7            3754
ADDA_REG0           3B58
ADDA_REG0_OUT       3BC8
ADDA_REG1           3B66
ADDA_REG1_OUT       3BD4
ADDA_REG2           3B74
ADDA_REG2_OUT       3BE0
ADDA_REG3           3B82
ADDA_REG3_OUT       3BEC
ADDA_REG4           3B90
ADDA_REG4_OUT       3BF8
ADDA_REG5           3B9E
ADDA_REG5_OUT       3C04
ADDA_REG6           3BAC
ADDA_REG6_OUT       3C10
ADDA_REG7           3BBA
ADDA_REG7_OUT       3C1C
ADDA_SIZE           171A
ADDA_SUB            366E
ADDQ_A0_OUT         3EBA
ADDQ_A1_OUT         3EC6
ADDQ_A2_OUT         3ED2
ADDQ_A3_OUT         3EDE
ADDQ_A4_OUT         3EEA
ADDQ_A5_OUT         3EF6
ADDQ_A6_OUT         3F02
ADDQ_A7_OUT         3F0E
ADDQ_ABS_ADD_LONG   3D66
ADDQ_ABS_ADD_LONG_OUT  4198
ADDQ_ABS_ADD_WORD   3D50
ADDQ_ABS_ADD_WORD_OUT  418A
ADDQ_ADD_REG_DIR    3D18
ADDQ_ADD_REG_INDIR  3D26
ADDQ_ADD_REG_INDIR_POSTINC  3D42
ADDQ_ADD_REG_INDIR_PREDEC  3D34
ADDQ_AN_INDIR_PDEC_R0_OUT  412A
ADDQ_AN_INDIR_PDEC_R1  40C8
ADDQ_AN_INDIR_PDEC_R1_OUT  4136
ADDQ_AN_INDIR_PDEC_R2  40D6
ADDQ_AN_INDIR_PDEC_R2_OUT  4142
ADDQ_AN_INDIR_PDEC_R3  40E4
ADDQ_AN_INDIR_PDEC_R3_OUT  414E
ADDQ_AN_INDIR_PDEC_R4  40F2
ADDQ_AN_INDIR_PDEC_R4_OUT  415A
ADDQ_AN_INDIR_PDEC_R5  4100
ADDQ_AN_INDIR_PDEC_R5_OUT  4166
ADDQ_AN_INDIR_PDEC_R6  410E
ADDQ_AN_INDIR_PDEC_R6_OUT  4172
ADDQ_AN_INDIR_PDEC_R7  411C
ADDQ_AN_INDIR_PDEC_R7_OUT  417E
ADDQ_AN_INDIR_PINC_R0_OUT  405A
ADDQ_AN_INDIR_PINC_R1  3FF8
ADDQ_AN_INDIR_PINC_R1_OUT  4066
ADDQ_AN_INDIR_PINC_R2  4006
ADDQ_AN_INDIR_PINC_R2_OUT  4072
ADDQ_AN_INDIR_PINC_R3  4014
ADDQ_AN_INDIR_PINC_R3_OUT  407E
ADDQ_AN_INDIR_PINC_R4  4022
ADDQ_AN_INDIR_PINC_R4_OUT  408A
ADDQ_AN_INDIR_PINC_R5  4030
ADDQ_AN_INDIR_PINC_R5_OUT  4096
ADDQ_AN_INDIR_PINC_R6  403E
ADDQ_AN_INDIR_PINC_R6_OUT  40A2
ADDQ_AN_INDIR_PINC_R7  404C
ADDQ_AN_INDIR_PINC_R7_OUT  40AE
ADDQ_AN_INDIR_PINC_REG  3FEA
ADDQ_AN_INDIR_PREDEC  40BA
ADDQ_AN_INDIR_REG   3F1A
ADDQ_AN_INDIR_REG0_OUT  3F8A
ADDQ_AN_INDIR_REG1  3F28
ADDQ_AN_INDIR_REG1_OUT  3F96
ADDQ_AN_INDIR_REG2  3F36
ADDQ_AN_INDIR_REG2_OUT  3FA2
ADDQ_AN_INDIR_REG3  3F44
ADDQ_AN_INDIR_REG3_OUT  3FAE
ADDQ_AN_INDIR_REG4  3F52
ADDQ_AN_INDIR_REG4_OUT  3FBA
ADDQ_AN_INDIR_REG5  3F60
ADDQ_AN_INDIR_REG5_OUT  3FC6
ADDQ_AN_INDIR_REG6  3F6E
ADDQ_AN_INDIR_REG6_OUT  3FD2
ADDQ_AN_INDIR_REG7  3F7C
ADDQ_AN_INDIR_REG7_OUT  3FDE
ADDQ_AN_REG         3E4A
ADDQ_D0_OUT         3DEA
ADDQ_D1_OUT         3DF6
ADDQ_D2_OUT         3E02
ADDQ_D3_OUT         3E0E
ADDQ_D4_OUT         3E1A
ADDQ_D5_OUT         3E26
ADDQ_D6_OUT         3E32
ADDQ_D7_OUT         3E3E
ADDQ_DATA_REG_DIR   3D0A
ADDQ_DETERMINE_SECOND_OPERAND  3D0A
ADDQ_DN_REG         3D74
ADDQ_END            1EAC
ADDQ_FAIL           1EA6
ADDQ_L              1E82
ADDQ_RA1            3E58
ADDQ_RA2            3E66
ADDQ_RA3            3E74
ADDQ_RA4            3E82
ADDQ_RA5            3E90
ADDQ_RA6            3E9E
ADDQ_RA7            3EAC
ADDQ_RD1            3D88
ADDQ_RD2            3D96
ADDQ_RD3            3DA4
ADDQ_RD4            3DB2
ADDQ_RD5            3DC0
ADDQ_RD6            3DCE
ADDQ_RD7            3DDC
ADDQ_REG0           3C3A
ADDQ_REG0_OUT       3CAA
ADDQ_REG1           3C48
ADDQ_REG1_OUT       3CB6
ADDQ_REG2           3C56
ADDQ_REG2_OUT       3CC2
ADDQ_REG3           3C64
ADDQ_REG3_OUT       3CCE
ADDQ_REG4           3C72
ADDQ_REG4_OUT       3CDA
ADDQ_REG5           3C80
ADDQ_REG5_OUT       3CE6
ADDQ_REG6           3C8E
ADDQ_REG6_OUT       3CF2
ADDQ_REG7           3C9C
ADDQ_REG7_OUT       3CFE
ADDQ_SIZE           1E30
ADDQ_SUB            3C28
ADDQ_W              1E5E
ADD_ADD             237A
ADD_DETERMINE_SECOND_OP  27DA
ADD_DETERMINE_SECOND_OPERAND  298A
ADD_DN_EA           28B2
ADD_DN_EA_ABS_ADD_LONG  29D2
ADD_DN_EA_ABS_ADD_LONG_OUT  2C64
ADD_DN_EA_ABS_ADD_WORD  29BC
ADD_DN_EA_ABS_ADD_WORD_OUT  2C56
ADD_DN_EA_ADD_REG_INDIR  2992
ADD_DN_EA_ADD_REG_INDIR_POSTINC  29AE
ADD_DN_EA_ADD_REG_INDIR_PREDEC  29A0
ADD_DN_EA_AN_INDIR_POSTINC_REG  2AB6
ADD_DN_EA_AN_INDIR_POSTINC_REG1  2AC4
ADD_DN_EA_AN_INDIR_POSTINC_REG2  2AD2
ADD_DN_EA_AN_INDIR_POSTINC_REG3  2AE0
ADD_DN_EA_AN_INDIR_POSTINC_REG4  2AEE
ADD_DN_EA_AN_INDIR_POSTINC_REG5  2AFC
ADD_DN_EA_AN_INDIR_POSTINC_REG6  2B0A
ADD_DN_EA_AN_INDIR_POSTINC_REG7  2B18
ADD_DN_EA_AN_INDIR_POSTIN_R0_OUT  2B26
ADD_DN_EA_AN_INDIR_POSTIN_R1_OUT  2B32
ADD_DN_EA_AN_INDIR_POSTIN_R2_OUT  2B3E
ADD_DN_EA_AN_INDIR_POSTIN_R3_OUT  2B4A
ADD_DN_EA_AN_INDIR_POSTIN_R4_OUT  2B56
ADD_DN_EA_AN_INDIR_POSTIN_R5_OUT  2B62
ADD_DN_EA_AN_INDIR_POSTIN_R6_OUT  2B6E
ADD_DN_EA_AN_INDIR_POSTIN_R7_OUT  2B7A
ADD_DN_EA_AN_INDIR_PREDEC  2B86
ADD_DN_EA_AN_INDIR_PREDEC_REG1  2B94
ADD_DN_EA_AN_INDIR_PREDEC_REG2  2BA2
ADD_DN_EA_AN_INDIR_PREDEC_REG3  2BB0
ADD_DN_EA_AN_INDIR_PREDEC_REG4  2BBE
ADD_DN_EA_AN_INDIR_PREDEC_REG5  2BCC
ADD_DN_EA_AN_INDIR_PREDEC_REG6  2BDA
ADD_DN_EA_AN_INDIR_PREDEC_REG7  2BE8
ADD_DN_EA_AN_INDIR_PREDE_R0_OUT  2BF6
ADD_DN_EA_AN_INDIR_PREDE_R1_OUT  2C02
ADD_DN_EA_AN_INDIR_PREDE_R2_OUT  2C0E
ADD_DN_EA_AN_INDIR_PREDE_R3_OUT  2C1A
ADD_DN_EA_AN_INDIR_PREDE_R4_OUT  2C26
ADD_DN_EA_AN_INDIR_PREDE_R5_OUT  2C32
ADD_DN_EA_AN_INDIR_PREDE_R6_OUT  2C3E
ADD_DN_EA_AN_INDIR_PREDE_R7_OUT  2C4A
ADD_DN_EA_AN_INDIR_REG  29E6
ADD_DN_EA_AN_INDIR_REG0_OUT  2A56
ADD_DN_EA_AN_INDIR_REG1  29F4
ADD_DN_EA_AN_INDIR_REG1_OUT  2A62
ADD_DN_EA_AN_INDIR_REG2  2A02
ADD_DN_EA_AN_INDIR_REG2_OUT  2A6E
ADD_DN_EA_AN_INDIR_REG3  2A10
ADD_DN_EA_AN_INDIR_REG3_OUT  2A7A
ADD_DN_EA_AN_INDIR_REG4  2A1E
ADD_DN_EA_AN_INDIR_REG4_OUT  2A86
ADD_DN_EA_AN_INDIR_REG5  2A2C
ADD_DN_EA_AN_INDIR_REG5_OUT  2A92
ADD_DN_EA_AN_INDIR_REG6  2A3A
ADD_DN_EA_AN_INDIR_REG6_OUT  2A9E
ADD_DN_EA_AN_INDIR_REG7  2A48
ADD_DN_EA_AN_INDIR_REG7_OUT  2AAA
ADD_DN_EA_IMMEDIATE_ADD_OUT  2C74
ADD_DN_EA_IMM_ADD_L  2C94
ADD_DN_EA_IMM_ADD_W  2C86
ADD_DN_EA_MATCH     23AE
ADD_DN_EA_MATCH_L   23CA
ADD_DN_EA_MATCH_W   23BC
ADD_EA_DN           23D8
ADD_EA_DN_ABS_ADD_LONG  242E
ADD_EA_DN_ABS_ADD_LONG_OUT  279A
ADD_EA_DN_ABS_ADD_WORD  2418
ADD_EA_DN_ABS_ADD_WORD_OUT  278C
ADD_EA_DN_ADD_REG_INDIR  23EE
ADD_EA_DN_ADD_REG_INDIR_POSTINC  240A
ADD_EA_DN_ADD_REG_INDIR_PREDEC  23FC
ADD_EA_DN_AN_INDIR_POSTINC_REG  25EC
ADD_EA_DN_AN_INDIR_POSTINC_REG1  25FA
ADD_EA_DN_AN_INDIR_POSTINC_REG2  2608
ADD_EA_DN_AN_INDIR_POSTINC_REG3  2616
ADD_EA_DN_AN_INDIR_POSTINC_REG4  2624
ADD_EA_DN_AN_INDIR_POSTINC_REG5  2632
ADD_EA_DN_AN_INDIR_POSTINC_REG6  2640
ADD_EA_DN_AN_INDIR_POSTINC_REG7  264E
ADD_EA_DN_AN_INDIR_POSTIN_R0_OUT  265C
ADD_EA_DN_AN_INDIR_POSTIN_R1_OUT  2668
ADD_EA_DN_AN_INDIR_POSTIN_R2_OUT  2674
ADD_EA_DN_AN_INDIR_POSTIN_R3_OUT  2680
ADD_EA_DN_AN_INDIR_POSTIN_R4_OUT  268C
ADD_EA_DN_AN_INDIR_POSTIN_R5_OUT  2698
ADD_EA_DN_AN_INDIR_POSTIN_R6_OUT  26A4
ADD_EA_DN_AN_INDIR_POSTIN_R7_OUT  26B0
ADD_EA_DN_AN_INDIR_PREDEC  26BC
ADD_EA_DN_AN_INDIR_PREDEC_REG1  26CA
ADD_EA_DN_AN_INDIR_PREDEC_REG2  26D8
ADD_EA_DN_AN_INDIR_PREDEC_REG3  26E6
ADD_EA_DN_AN_INDIR_PREDEC_REG4  26F4
ADD_EA_DN_AN_INDIR_PREDEC_REG5  2702
ADD_EA_DN_AN_INDIR_PREDEC_REG6  2710
ADD_EA_DN_AN_INDIR_PREDEC_REG7  271E
ADD_EA_DN_AN_INDIR_PREDE_R0_OUT  272C
ADD_EA_DN_AN_INDIR_PREDE_R1_OUT  2738
ADD_EA_DN_AN_INDIR_PREDE_R2_OUT  2744
ADD_EA_DN_AN_INDIR_PREDE_R3_OUT  2750
ADD_EA_DN_AN_INDIR_PREDE_R4_OUT  275C
ADD_EA_DN_AN_INDIR_PREDE_R5_OUT  2768
ADD_EA_DN_AN_INDIR_PREDE_R6_OUT  2774
ADD_EA_DN_AN_INDIR_PREDE_R7_OUT  2780
ADD_EA_DN_AN_INDIR_REG  251C
ADD_EA_DN_AN_INDIR_REG0_OUT  258C
ADD_EA_DN_AN_INDIR_REG1  252A
ADD_EA_DN_AN_INDIR_REG1_OUT  2598
ADD_EA_DN_AN_INDIR_REG2  2538
ADD_EA_DN_AN_INDIR_REG2_OUT  25A4
ADD_EA_DN_AN_INDIR_REG3  2546
ADD_EA_DN_AN_INDIR_REG3_OUT  25B0
ADD_EA_DN_AN_INDIR_REG4  2554
ADD_EA_DN_AN_INDIR_REG4_OUT  25BC
ADD_EA_DN_AN_INDIR_REG5  2562
ADD_EA_DN_AN_INDIR_REG5_OUT  25C8
ADD_EA_DN_AN_INDIR_REG6  2570
ADD_EA_DN_AN_INDIR_REG6_OUT  25D4
ADD_EA_DN_AN_INDIR_REG7  257E
ADD_EA_DN_AN_INDIR_REG7_OUT  25E0
ADD_EA_DN_D0_OUT    24BC
ADD_EA_DN_D1_OUT    24C8
ADD_EA_DN_D2_OUT    24D4
ADD_EA_DN_D3_OUT    24E0
ADD_EA_DN_D4_OUT    24EC
ADD_EA_DN_D5_OUT    24F8
ADD_EA_DN_D6_OUT    2504
ADD_EA_DN_D7_OUT    2510
ADD_EA_DN_DATA_REG_DIR  23E0
ADD_EA_DN_DN_REG    244C
ADD_EA_DN_IMMEDIATE_ADD  2438
ADD_EA_DN_IMMEDIATE_ADD_OUT  27AA
ADD_EA_DN_IMM_ADD_L  27CA
ADD_EA_DN_IMM_ADD_W  27BC
ADD_EA_DN_MATCH     2384
ADD_EA_DN_MATCH_L   23A0
ADD_EA_DN_MATCH_W   2392
ADD_EA_DN_RD1       245A
ADD_EA_DN_RD2       2468
ADD_EA_DN_RD3       2476
ADD_EA_DN_RD4       2484
ADD_EA_DN_RD5       2492
ADD_EA_DN_RD6       24A0
ADD_EA_DN_RD7       24AE
ADD_END             17F4
ADD_ERROR           2CA4
ADD_FAIL            17EE
ADD_L               17CA
ADD_SIZE            1778
ADD_W               17A6
AND_DETERMINE_SECOND_OP  31C8
AND_DETERMINE_SECOND_OPERAND  3378
AND_DN_EA           32A0
AND_DN_EA_MATCH     2CBA
AND_DN_EA_MATCH_L   2CD6
AND_DN_EA_MATCH_W   2CC8
AND_EA_DN           2D0E
AND_EA_DN_A0_OUT    2EAA
AND_EA_DN_A1_OUT    2EB6
AND_EA_DN_A2_OUT    2EC2
AND_EA_DN_A3_OUT    2ECE
AND_EA_DN_A4_OUT    2EDA
AND_EA_DN_A5_OUT    2EE6
AND_EA_DN_A6_OUT    2EF2
AND_EA_DN_A7_OUT    2EFE
AND_EA_DN_ABS_ADD_LONG  2D56
AND_EA_DN_ABS_ADD_LONG_OUT  3188
AND_EA_DN_ABS_ADD_WORD  2D40
AND_EA_DN_ABS_ADD_WORD_OUT  317A
AND_EA_DN_ADD_REG_INDIR  2D16
AND_EA_DN_ADD_REG_INDIR_PDEC  2D24
AND_EA_DN_ADD_REG_INDIR_PINC  2D32
AND_EA_DN_AN_INDIR_PDEC_R0_OUT  311A
AND_EA_DN_AN_INDIR_PDEC_R1  30B8
AND_EA_DN_AN_INDIR_PDEC_R1_OUT  3126
AND_EA_DN_AN_INDIR_PDEC_R2  30C6
AND_EA_DN_AN_INDIR_PDEC_R2_OUT  3132
AND_EA_DN_AN_INDIR_PDEC_R3  30D4
AND_EA_DN_AN_INDIR_PDEC_R3_OUT  313E
AND_EA_DN_AN_INDIR_PDEC_R4  30E2
AND_EA_DN_AN_INDIR_PDEC_R4_OUT  314A
AND_EA_DN_AN_INDIR_PDEC_R5  30F0
AND_EA_DN_AN_INDIR_PDEC_R5_OUT  3156
AND_EA_DN_AN_INDIR_PDEC_R6  30FE
AND_EA_DN_AN_INDIR_PDEC_R6_OUT  3162
AND_EA_DN_AN_INDIR_PDEC_R7  310C
AND_EA_DN_AN_INDIR_PDEC_R7_OUT  316E
AND_EA_DN_AN_INDIR_PINC_R0_OUT  304A
AND_EA_DN_AN_INDIR_PINC_R1  2FE8
AND_EA_DN_AN_INDIR_PINC_R1_OUT  3056
AND_EA_DN_AN_INDIR_PINC_R2  2FF6
AND_EA_DN_AN_INDIR_PINC_R2_OUT  3062
AND_EA_DN_AN_INDIR_PINC_R3  3004
AND_EA_DN_AN_INDIR_PINC_R3_OUT  306E
AND_EA_DN_AN_INDIR_PINC_R4  3012
AND_EA_DN_AN_INDIR_PINC_R4_OUT  307A
AND_EA_DN_AN_INDIR_PINC_R5  3020
AND_EA_DN_AN_INDIR_PINC_R5_OUT  3086
AND_EA_DN_AN_INDIR_PINC_R6  302E
AND_EA_DN_AN_INDIR_PINC_R6_OUT  3092
AND_EA_DN_AN_INDIR_PINC_R7  303C
AND_EA_DN_AN_INDIR_PINC_R7_OUT  309E
AND_EA_DN_AN_INDIR_PINC_REG  2FDA
AND_EA_DN_AN_INDIR_PREDEC  30AA
AND_EA_DN_AN_INDIR_REG  2F0A
AND_EA_DN_AN_INDIR_REG0_OUT  2F7A
AND_EA_DN_AN_INDIR_REG1  2F18
AND_EA_DN_AN_INDIR_REG1_OUT  2F86
AND_EA_DN_AN_INDIR_REG2  2F26
AND_EA_DN_AN_INDIR_REG2_OUT  2F92
AND_EA_DN_AN_INDIR_REG3  2F34
AND_EA_DN_AN_INDIR_REG3_OUT  2F9E
AND_EA_DN_AN_INDIR_REG4  2F42
AND_EA_DN_AN_INDIR_REG4_OUT  2FAA
AND_EA_DN_AN_INDIR_REG5  2F50
AND_EA_DN_AN_INDIR_REG5_OUT  2FB6
AND_EA_DN_AN_INDIR_REG6  2F5E
AND_EA_DN_AN_INDIR_REG6_OUT  2FC2
AND_EA_DN_AN_INDIR_REG7  2F6C
AND_EA_DN_AN_INDIR_REG7_OUT  2FCE
AND_EA_DN_AN_REG    2E3A
AND_EA_DN_D0_OUT    2DDA
AND_EA_DN_D1_OUT    2DE6
AND_EA_DN_D2_OUT    2DF2
AND_EA_DN_D3_OUT    2DFE
AND_EA_DN_D4_OUT    2E0A
AND_EA_DN_D5_OUT    2E16
AND_EA_DN_D6_OUT    2E22
AND_EA_DN_D7_OUT    2E2E
AND_EA_DN_DN_REG    2D6A
AND_EA_DN_IMMEDIATE_ADD_OUT  3198
AND_EA_DN_IMM_ADD_L  31B8
AND_EA_DN_IMM_ADD_W  31AA
AND_EA_DN_MATCH     2CE4
AND_EA_DN_MATCH_L   2D00
AND_EA_DN_MATCH_W   2CF2
AND_EA_DN_RA1       2E48
AND_EA_DN_RA2       2E56
AND_EA_DN_RA3       2E64
AND_EA_DN_RA4       2E72
AND_EA_DN_RA5       2E80
AND_EA_DN_RA6       2E8E
AND_EA_DN_RA7       2E9C
AND_EA_DN_RD1       2D78
AND_EA_DN_RD2       2D86
AND_EA_DN_RD3       2D94
AND_EA_DN_RD4       2DA2
AND_EA_DN_RD5       2DB0
AND_EA_DN_RD6       2DBE
AND_EA_DN_RD7       2DCC
AND_END             1FB0
AND_FAIL            1FAA
AND_L               1F86
AND_SIZE            1F34
AND_SUB             2CB0
AND_W               1F62
ASD_ABS_ADD_LONG    4208
ASD_ABS_ADD_LONG_OUT  44A4
ASD_ABS_ADD_WORD    41F2
ASD_ABS_ADD_WORD_OUT  4496
ASD_AN_INDIR        41C8
ASD_AN_INDIR_PDEC_R0_OUT  4436
ASD_AN_INDIR_PDEC_R1  43D4
ASD_AN_INDIR_PDEC_R1_OUT  4442
ASD_AN_INDIR_PDEC_R2  43E2
ASD_AN_INDIR_PDEC_R2_OUT  444E
ASD_AN_INDIR_PDEC_R3  43F0
ASD_AN_INDIR_PDEC_R3_OUT  445A
ASD_AN_INDIR_PDEC_R4  43FE
ASD_AN_INDIR_PDEC_R4_OUT  4466
ASD_AN_INDIR_PDEC_R5  440C
ASD_AN_INDIR_PDEC_R5_OUT  4472
ASD_AN_INDIR_PDEC_R6  441A
ASD_AN_INDIR_PDEC_R6_OUT  447E
ASD_AN_INDIR_PDEC_R7  4428
ASD_AN_INDIR_PDEC_R7_OUT  448A
ASD_AN_INDIR_PINC_R0_OUT  4366
ASD_AN_INDIR_PINC_R1  4304
ASD_AN_INDIR_PINC_R1_OUT  4372
ASD_AN_INDIR_PINC_R2  4312
ASD_AN_INDIR_PINC_R2_OUT  437E
ASD_AN_INDIR_PINC_R3  4320
ASD_AN_INDIR_PINC_R3_OUT  438A
ASD_AN_INDIR_PINC_R4  432E
ASD_AN_INDIR_PINC_R4_OUT  4396
ASD_AN_INDIR_PINC_R5  433C
ASD_AN_INDIR_PINC_R5_OUT  43A2
ASD_AN_INDIR_PINC_R6  434A
ASD_AN_INDIR_PINC_R6_OUT  43AE
ASD_AN_INDIR_PINC_R7  4358
ASD_AN_INDIR_PINC_R7_OUT  43BA
ASD_AN_INDIR_POSTINC  41D6
ASD_AN_INDIR_POSTINC_REG  42EE
ASD_AN_INDIR_PREDEC  41E4
ASD_AN_INDIR_PREDEC_REG  43C6
ASD_AN_INDIR_REG    4216
ASD_AN_INDIR_REG0_OUT  428E
ASD_AN_INDIR_REG1   422C
ASD_AN_INDIR_REG1_OUT  429A
ASD_AN_INDIR_REG2   423A
ASD_AN_INDIR_REG2_OUT  42A6
ASD_AN_INDIR_REG3   4248
ASD_AN_INDIR_REG3_OUT  42B2
ASD_AN_INDIR_REG4   4256
ASD_AN_INDIR_REG4_OUT  42BE
ASD_AN_INDIR_REG5   4264
ASD_AN_INDIR_REG5_OUT  42CA
ASD_AN_INDIR_REG6   4272
ASD_AN_INDIR_REG6_OUT  42D6
ASD_AN_INDIR_REG7   4280
ASD_AN_INDIR_REG7_OUT  42E2
ASD_COUNT_REG0      44D2
ASD_COUNT_REG0_OUT  4612
ASD_COUNT_REG1      44E0
ASD_COUNT_REG1_OUT  461E
ASD_COUNT_REG2      44EE
ASD_COUNT_REG2_OUT  462A
ASD_COUNT_REG3      44FC
ASD_COUNT_REG3_OUT  4636
ASD_COUNT_REG4      450A
ASD_COUNT_REG4_OUT  4642
ASD_COUNT_REG5      4518
ASD_COUNT_REG5_OUT  464E
ASD_COUNT_REG6      4526
ASD_COUNT_REG6_OUT  465A
ASD_COUNT_REG7      4534
ASD_COUNT_REG7_OUT  4666
ASD_COUNT_VAL       4542
ASD_COUNT_VAL0_OUT  45B2
ASD_COUNT_VAL1      4550
ASD_COUNT_VAL1_OUT  45BE
ASD_COUNT_VAL2      455E
ASD_COUNT_VAL2_OUT  45CA
ASD_COUNT_VAL3      456C
ASD_COUNT_VAL3_OUT  45D6
ASD_COUNT_VAL4      457A
ASD_COUNT_VAL4_OUT  45E2
ASD_COUNT_VAL5      4588
ASD_COUNT_VAL5_OUT  45EE
ASD_COUNT_VAL6      4596
ASD_COUNT_VAL6_OUT  45FA
ASD_COUNT_VAL7      45A4
ASD_COUNT_VAL7_OUT  4606
ASD_D0_OUT          46EA
ASD_D1_OUT          46F6
ASD_D2_OUT          4702
ASD_D3_OUT          470E
ASD_D4_OUT          471A
ASD_D5_OUT          4726
ASD_D6_OUT          4732
ASD_D7_OUT          473E
ASD_DN0             4672
ASD_DN1             4688
ASD_DN2             4696
ASD_DN3             46A4
ASD_DN4             46B2
ASD_DN5             46C0
ASD_DN6             46CE
ASD_DN7             46DC
ASD_MEM_SHIFT       41C0
ASD_REG_SHIFT       44B4
ASD_SHIFT_REG       44CA
ASD_SUB             41A8
ASLM_END            1C2C
ASLR_END            1C04
ASLR_FAIL           1BFE
ASLR_L              1BDA
ASLR_W              1BB6
ASL_M_SIZE          1C0A
ASL_R_SIZE          1B88
ASRM_END            1CD6
ASRR_END            1CAE
ASRR_FAIL           1CA8
ASRR_L              1C84
ASRR_W              1C60
ASR_M_SIZE          1CB4
ASR_R_SIZE          1C32
BAD_BOUND           88A5
BAD_END             8855
BAD_RANGE           8819
BCC_ADDRESS         1A12
BCC_ADD_END         1A2E
BCC_B               182C
BCC_END             1834
BCC_L               1804
BCC_NEGATIVE        1A26
BCC_SIZE            17FA
BCC_W               1818
BEQ_B               1902
BEQ_END             1920
BEQ_L               18BA
BEQ_SIZE            18B0
BEQ_W               18DE
BGT_B               188C
BGT_END             18AA
BGT_L               1844
BGT_SIZE            183A
BGT_W               1868
BLE_B               1978
BLE_END             1996
BLE_L               1930
BLE_SIZE            1926
BLE_W               1954
BOUNDARY1           10EE
BOUNDARY2           1192
BRA_B               19EE
BRA_END             1A0C
BRA_L               19A6
BRA_SIZE            199C
BRA_W               19CA
BYTE_SIZE           1
CONT                1098
CONT2               113C
CR                  D
DATA                2136
DISP_DONE           13FE
DISP_LOOP           13EA
DN_EA_ABS_ADD_LONG  33C0
DN_EA_ABS_ADD_LONG_OUT  3652
DN_EA_ABS_ADD_WORD  33AA
DN_EA_ABS_ADD_WORD_OUT  3644
DN_EA_ADD_REG0      28BA
DN_EA_ADD_REG0_OUT  292A
DN_EA_ADD_REG1      28C8
DN_EA_ADD_REG1_OUT  2936
DN_EA_ADD_REG2      28D6
DN_EA_ADD_REG2_OUT  2942
DN_EA_ADD_REG3      28E4
DN_EA_ADD_REG3_OUT  294E
DN_EA_ADD_REG4      28F2
DN_EA_ADD_REG4_OUT  295A
DN_EA_ADD_REG5      2900
DN_EA_ADD_REG5_OUT  2966
DN_EA_ADD_REG6      290E
DN_EA_ADD_REG6_OUT  2972
DN_EA_ADD_REG7      291C
DN_EA_ADD_REG7_OUT  297E
DN_EA_ADD_REG_INDIR  3380
DN_EA_ADD_REG_INDIR_POSTINC  339C
DN_EA_ADD_REG_INDIR_PREDEC  338E
DN_EA_AND_REG0      32A8
DN_EA_AND_REG0_OUT  3318
DN_EA_AND_REG1      32B6
DN_EA_AND_REG1_OUT  3324
DN_EA_AND_REG2      32C4
DN_EA_AND_REG2_OUT  3330
DN_EA_AND_REG3      32D2
DN_EA_AND_REG3_OUT  333C
DN_EA_AND_REG4      32E0
DN_EA_AND_REG4_OUT  3348
DN_EA_AND_REG5      32EE
DN_EA_AND_REG5_OUT  3354
DN_EA_AND_REG6      32FC
DN_EA_AND_REG6_OUT  3360
DN_EA_AND_REG7      330A
DN_EA_AND_REG7_OUT  336C
DN_EA_AN_INDIR_POSTINC_REG  34A4
DN_EA_AN_INDIR_POSTINC_REG0_OUT  3514
DN_EA_AN_INDIR_POSTINC_REG1  34B2
DN_EA_AN_INDIR_POSTINC_REG1_OUT  3520
DN_EA_AN_INDIR_POSTINC_REG2  34C0
DN_EA_AN_INDIR_POSTINC_REG2_OUT  352C
DN_EA_AN_INDIR_POSTINC_REG3  34CE
DN_EA_AN_INDIR_POSTINC_REG3_OUT  3538
DN_EA_AN_INDIR_POSTINC_REG4  34DC
DN_EA_AN_INDIR_POSTINC_REG4_OUT  3544
DN_EA_AN_INDIR_POSTINC_REG5  34EA
DN_EA_AN_INDIR_POSTINC_REG5_OUT  3550
DN_EA_AN_INDIR_POSTINC_REG6  34F8
DN_EA_AN_INDIR_POSTINC_REG6_OUT  355C
DN_EA_AN_INDIR_POSTINC_REG7  3506
DN_EA_AN_INDIR_POSTINC_REG7_OUT  3568
DN_EA_AN_INDIR_PREDEC  3574
DN_EA_AN_INDIR_PREDEC_REG0_OUT  35E4
DN_EA_AN_INDIR_PREDEC_REG1  3582
DN_EA_AN_INDIR_PREDEC_REG1_OUT  35F0
DN_EA_AN_INDIR_PREDEC_REG2  3590
DN_EA_AN_INDIR_PREDEC_REG2_OUT  35FC
DN_EA_AN_INDIR_PREDEC_REG3  359E
DN_EA_AN_INDIR_PREDEC_REG3_OUT  3608
DN_EA_AN_INDIR_PREDEC_REG4  35AC
DN_EA_AN_INDIR_PREDEC_REG4_OUT  3614
DN_EA_AN_INDIR_PREDEC_REG5  35BA
DN_EA_AN_INDIR_PREDEC_REG5_OUT  3620
DN_EA_AN_INDIR_PREDEC_REG6  35C8
DN_EA_AN_INDIR_PREDEC_REG6_OUT  362C
DN_EA_AN_INDIR_PREDEC_REG7  35D6
DN_EA_AN_INDIR_PREDEC_REG7_OUT  3638
DN_EA_AN_INDIR_REG  33D4
DN_EA_AN_INDIR_REG0_OUT  3444
DN_EA_AN_INDIR_REG1  33E2
DN_EA_AN_INDIR_REG1_OUT  3450
DN_EA_AN_INDIR_REG2  33F0
DN_EA_AN_INDIR_REG2_OUT  345C
DN_EA_AN_INDIR_REG3  33FE
DN_EA_AN_INDIR_REG3_OUT  3468
DN_EA_AN_INDIR_REG4  340C
DN_EA_AN_INDIR_REG4_OUT  3474
DN_EA_AN_INDIR_REG5  341A
DN_EA_AN_INDIR_REG5_OUT  3480
DN_EA_AN_INDIR_REG6  3428
DN_EA_AN_INDIR_REG6_OUT  348C
DN_EA_AN_INDIR_REG7  3436
DN_EA_AN_INDIR_REG7_OUT  3498
DN_EA_OR_REG0       7B92
DN_EA_OR_REG0_OUT   7C02
DN_EA_OR_REG1       7BA0
DN_EA_OR_REG1_OUT   7C0E
DN_EA_OR_REG2       7BAE
DN_EA_OR_REG2_OUT   7C1A
DN_EA_OR_REG3       7BBC
DN_EA_OR_REG3_OUT   7C26
DN_EA_OR_REG4       7BCA
DN_EA_OR_REG4_OUT   7C32
DN_EA_OR_REG5       7BD8
DN_EA_OR_REG5_OUT   7C3E
DN_EA_OR_REG6       7BE6
DN_EA_OR_REG6_OUT   7C4A
DN_EA_OR_REG7       7BF4
DN_EA_OR_REG7_OUT   7C56
DN_EA_SUB_REG0      61A8
DN_EA_SUB_REG0_OUT  6218
DN_EA_SUB_REG1      61B6
DN_EA_SUB_REG1_OUT  6224
DN_EA_SUB_REG2      61C4
DN_EA_SUB_REG2_OUT  6230
DN_EA_SUB_REG3      61D2
DN_EA_SUB_REG3_OUT  623C
DN_EA_SUB_REG4      61E0
DN_EA_SUB_REG4_OUT  6248
DN_EA_SUB_REG5      61EE
DN_EA_SUB_REG5_OUT  6254
DN_EA_SUB_REG6      61FC
DN_EA_SUB_REG6_OUT  6260
DN_EA_SUB_REG7      620A
DN_EA_SUB_REG7_OUT  626C
EA_$                8A37
EA_A0               897D
EA_A1               8980
EA_A2               8983
EA_A3               8986
EA_A4               8989
EA_A5               898C
EA_A6               898F
EA_A7               8992
EA_ABS_LONG_STRING  8A34
EA_ABS_WORD_STRING  8A31
EA_D0               8965
EA_D1               8968
EA_D2               896B
EA_D3               896E
EA_D4               8971
EA_D5               8974
EA_D6               8977
EA_D7               897A
EA_DATA0            8A3B
EA_DATA1            8A3E
EA_DATA2            8A41
EA_DATA3            8A44
EA_DATA4            8A47
EA_DATA5            8A4A
EA_DATA6            8A4D
EA_DATA7            8A50
EA_DN_ADD_REG0      27E2
EA_DN_ADD_REG0_OUT  2852
EA_DN_ADD_REG1      27F0
EA_DN_ADD_REG1_OUT  285E
EA_DN_ADD_REG2      27FE
EA_DN_ADD_REG2_OUT  286A
EA_DN_ADD_REG3      280C
EA_DN_ADD_REG3_OUT  2876
EA_DN_ADD_REG4      281A
EA_DN_ADD_REG4_OUT  2882
EA_DN_ADD_REG5      2828
EA_DN_ADD_REG5_OUT  288E
EA_DN_ADD_REG6      2836
EA_DN_ADD_REG6_OUT  289A
EA_DN_ADD_REG7      2844
EA_DN_ADD_REG7_OUT  28A6
EA_DN_AND_REG0      31D0
EA_DN_AND_REG0_OUT  3240
EA_DN_AND_REG1      31DE
EA_DN_AND_REG1_OUT  324C
EA_DN_AND_REG2      31EC
EA_DN_AND_REG2_OUT  3258
EA_DN_AND_REG3      31FA
EA_DN_AND_REG3_OUT  3264
EA_DN_AND_REG4      3208
EA_DN_AND_REG4_OUT  3270
EA_DN_AND_REG5      3216
EA_DN_AND_REG5_OUT  327C
EA_DN_AND_REG6      3224
EA_DN_AND_REG6_OUT  3288
EA_DN_AND_REG7      3232
EA_DN_AND_REG7_OUT  3294
EA_DN_OR_REG0       7ABA
EA_DN_OR_REG0_OUT   7B2A
EA_DN_OR_REG1       7AC8
EA_DN_OR_REG1_OUT   7B36
EA_DN_OR_REG2       7AD6
EA_DN_OR_REG2_OUT   7B42
EA_DN_OR_REG3       7AE4
EA_DN_OR_REG3_OUT   7B4E
EA_DN_OR_REG4       7AF2
EA_DN_OR_REG4_OUT   7B5A
EA_DN_OR_REG5       7B00
EA_DN_OR_REG5_OUT   7B66
EA_DN_OR_REG6       7B0E
EA_DN_OR_REG6_OUT   7B72
EA_DN_OR_REG7       7B1C
EA_DN_OR_REG7_OUT   7B7E
EA_DN_SUB_REG0      60D0
EA_DN_SUB_REG0_OUT  6140
EA_DN_SUB_REG1      60DE
EA_DN_SUB_REG1_OUT  614C
EA_DN_SUB_REG2      60EC
EA_DN_SUB_REG2_OUT  6158
EA_DN_SUB_REG3      60FA
EA_DN_SUB_REG3_OUT  6164
EA_DN_SUB_REG4      6108
EA_DN_SUB_REG4_OUT  6170
EA_DN_SUB_REG5      6116
EA_DN_SUB_REG5_OUT  617C
EA_DN_SUB_REG6      6124
EA_DN_SUB_REG6_OUT  6188
EA_DN_SUB_REG7      6132
EA_DN_SUB_REG7_OUT  6194
EA_INDIR_A0         89A5
EA_INDIR_A1         89AA
EA_INDIR_A2         89AF
EA_INDIR_A3         89B4
EA_INDIR_A4         89B9
EA_INDIR_A5         89BE
EA_INDIR_A6         89C3
EA_INDIR_A7         89C8
EA_INDIR_POSTINC_A0  89CD
EA_INDIR_POSTINC_A1  89D3
EA_INDIR_POSTINC_A2  89D9
EA_INDIR_POSTINC_A3  89DF
EA_INDIR_POSTINC_A4  89E5
EA_INDIR_POSTINC_A5  89EB
EA_INDIR_POSTINC_A6  89F1
EA_INDIR_POSTINC_A7  89F7
EA_INDIR_PREDEC_A0  89FD
EA_INDIR_PREDEC_A1  8A03
EA_INDIR_PREDEC_A2  8A09
EA_INDIR_PREDEC_A3  8A0F
EA_INDIR_PREDEC_A4  8A15
EA_INDIR_PREDEC_A5  8A1B
EA_INDIR_PREDEC_A6  8A21
EA_INDIR_PREDEC_A7  8A27
EA_LB               8A39
EA_PAREN_CLOSED     8A2F
EA_PAREN_OPEN       8A2D
EA_VAL0             8995
EA_VAL1             8997
EA_VAL2             8999
EA_VAL3             899B
EA_VAL4             899D
EA_VAL5             899F
EA_VAL6             89A1
EA_VAL7             89A3
END_ADR             73BA
END_AN              2342
END_AQ              2326
END_BAD             11C2
END_DATA            2374
END_G1              21BE
END_G2              2204
END_G3              2242
END_G4              22D0
END_MOVEQ           235E
END_MV              2158
END_OP              213C
END_OR              2350
END_REQUEST         8795
END_SB              2334
ENTR_LP             11F8
ERR                 1030
ERROR               3662
ERROR_MESSAGE       8951
EXIT_LOOP           1266
GROUP1_DECODE       216A
GROUP2_DECODE       21EE
GROUP3_DECODE       2218
GROUP4_DECODE       2260
HEX_CLEAR           0
HT                  9
INPUT1              106E
INPUT1PASS          10C6
INPUT2              1112
INPUT2PASS          116A
INPUT_LOOP          1082
INPUT_LOOP2         1126
IO_SUBROUTINE       1052
IPT_DONE            109C
IPT_DONE2           1140
JSR_ABS_ADD_LONG    4778
JSR_ABS_ADD_LONG_OUT  486A
JSR_ABS_ADD_WORD    4762
JSR_ABS_ADD_WORD_OUT  485C
JSR_ADD_REG_INDIR   4754
JSR_AN_INDIR_REG    4786
JSR_AN_INDIR_REG0_OUT  47FC
JSR_AN_INDIR_REG1   479A
JSR_AN_INDIR_REG1_OUT  4808
JSR_AN_INDIR_REG2   47A8
JSR_AN_INDIR_REG2_OUT  4814
JSR_AN_INDIR_REG3   47B6
JSR_AN_INDIR_REG3_OUT  4820
JSR_AN_INDIR_REG4   47C4
JSR_AN_INDIR_REG4_OUT  482C
JSR_AN_INDIR_REG5   47D2
JSR_AN_INDIR_REG5_OUT  4838
JSR_AN_INDIR_REG6   47E0
JSR_AN_INDIR_REG6_OUT  4844
JSR_AN_INDIR_REG7   47EE
JSR_AN_INDIR_REG7_OUT  4850
JSR_SIZE            1676
JSR_SUB             474A
LEA_ABS_ADD_LONG    48A8
LEA_ABS_ADD_LONG_OUT  499A
LEA_ABS_ADD_WORD    4892
LEA_ABS_ADD_WORD_OUT  498C
LEA_ADD_REG_INDIR   4884
LEA_AN_INDIR_REG    48B6
LEA_AN_INDIR_REG0_OUT  492C
LEA_AN_INDIR_REG1   48CA
LEA_AN_INDIR_REG1_OUT  4938
LEA_AN_INDIR_REG2   48D8
LEA_AN_INDIR_REG2_OUT  4944
LEA_AN_INDIR_REG3   48E6
LEA_AN_INDIR_REG3_OUT  4950
LEA_AN_INDIR_REG4   48F4
LEA_AN_INDIR_REG4_OUT  495C
LEA_AN_INDIR_REG5   4902
LEA_AN_INDIR_REG5_OUT  4968
LEA_AN_INDIR_REG6   4910
LEA_AN_INDIR_REG6_OUT  4974
LEA_AN_INDIR_REG7   491E
LEA_AN_INDIR_REG7_OUT  4980
LEA_DETERMINE_SECOND_OP  49AA
LEA_REG0            49B2
LEA_REG0_OUT        4A22
LEA_REG1            49C0
LEA_REG1_OUT        4A2E
LEA_REG2            49CE
LEA_REG2_OUT        4A3A
LEA_REG3            49DC
LEA_REG3_OUT        4A46
LEA_REG4            49EA
LEA_REG4_OUT        4A52
LEA_REG5            49F8
LEA_REG5_OUT        4A5E
LEA_REG6            4A06
LEA_REG6_OUT        4A6A
LEA_REG7            4A14
LEA_REG7_OUT        4A76
LEA_SIZE            1654
LEA_SUB             487A
LETTER              103C
LF                  A
LINE_DONE           1428
LINE_LOOP           1414
LOAD2_MESSAGE       86D3
LOAD_MESSAGE        866A
LONG_SIZE           3
LOOPM               11E0
LOOPM_CONT          1220
LOOPM_DONE          122E
LSD_ABS_ADD_LONG    65F2
LSD_ABS_ADD_LONG_OUT  6882
LSD_ABS_ADD_WORD    65DC
LSD_ABS_ADD_WORD_OUT  6874
LSD_AN_INDIR        65B2
LSD_AN_INDIR_PDEC_R0_OUT  6814
LSD_AN_INDIR_PDEC_R1  67B2
LSD_AN_INDIR_PDEC_R1_OUT  6820
LSD_AN_INDIR_PDEC_R2  67C0
LSD_AN_INDIR_PDEC_R2_OUT  682C
LSD_AN_INDIR_PDEC_R3  67CE
LSD_AN_INDIR_PDEC_R3_OUT  6838
LSD_AN_INDIR_PDEC_R4  67DC
LSD_AN_INDIR_PDEC_R4_OUT  6844
LSD_AN_INDIR_PDEC_R5  67EA
LSD_AN_INDIR_PDEC_R5_OUT  6850
LSD_AN_INDIR_PDEC_R6  67F8
LSD_AN_INDIR_PDEC_R6_OUT  685C
LSD_AN_INDIR_PDEC_R7  6806
LSD_AN_INDIR_PDEC_R7_OUT  6868
LSD_AN_INDIR_PINC_R0_OUT  6744
LSD_AN_INDIR_PINC_R1  66E6
LSD_AN_INDIR_PINC_R1_OUT  6750
LSD_AN_INDIR_PINC_R2  66F4
LSD_AN_INDIR_PINC_R2_OUT  675C
LSD_AN_INDIR_PINC_R3  6702
LSD_AN_INDIR_PINC_R3_OUT  6768
LSD_AN_INDIR_PINC_R4  6710
LSD_AN_INDIR_PINC_R4_OUT  6774
LSD_AN_INDIR_PINC_R5  671E
LSD_AN_INDIR_PINC_R5_OUT  6780
LSD_AN_INDIR_PINC_R6  672C
LSD_AN_INDIR_PINC_R6_OUT  678C
LSD_AN_INDIR_PINC_R7  6736
LSD_AN_INDIR_PINC_R7_OUT  6798
LSD_AN_INDIR_POSTINC  65C0
LSD_AN_INDIR_POSTINC_REG  66D8
LSD_AN_INDIR_PREDEC  65CE
LSD_AN_INDIR_PREDEC_REG  67A4
LSD_AN_INDIR_REG    6600
LSD_AN_INDIR_REG0_OUT  6678
LSD_AN_INDIR_REG1   6616
LSD_AN_INDIR_REG1_OUT  6684
LSD_AN_INDIR_REG2   6624
LSD_AN_INDIR_REG2_OUT  6690
LSD_AN_INDIR_REG3   6632
LSD_AN_INDIR_REG3_OUT  669C
LSD_AN_INDIR_REG4   6640
LSD_AN_INDIR_REG4_OUT  66A8
LSD_AN_INDIR_REG5   664E
LSD_AN_INDIR_REG5_OUT  66B4
LSD_AN_INDIR_REG6   665C
LSD_AN_INDIR_REG6_OUT  66C0
LSD_AN_INDIR_REG7   666A
LSD_AN_INDIR_REG7_OUT  66CC
LSD_COUNT_REG0      68B0
LSD_COUNT_REG0_OUT  69F0
LSD_COUNT_REG1      68BE
LSD_COUNT_REG1_OUT  69FC
LSD_COUNT_REG2      68CC
LSD_COUNT_REG2_OUT  6A08
LSD_COUNT_REG3      68DA
LSD_COUNT_REG3_OUT  6A14
LSD_COUNT_REG4      68E8
LSD_COUNT_REG4_OUT  6A20
LSD_COUNT_REG5      68F6
LSD_COUNT_REG5_OUT  6A2C
LSD_COUNT_REG6      6904
LSD_COUNT_REG6_OUT  6A38
LSD_COUNT_REG7      6912
LSD_COUNT_REG7_OUT  6A44
LSD_COUNT_VAL       6920
LSD_COUNT_VAL0_OUT  6990
LSD_COUNT_VAL1      692E
LSD_COUNT_VAL1_OUT  699C
LSD_COUNT_VAL2      693C
LSD_COUNT_VAL2_OUT  69A8
LSD_COUNT_VAL3      694A
LSD_COUNT_VAL3_OUT  69B4
LSD_COUNT_VAL4      6958
LSD_COUNT_VAL4_OUT  69C0
LSD_COUNT_VAL5      6966
LSD_COUNT_VAL5_OUT  69CC
LSD_COUNT_VAL6      6974
LSD_COUNT_VAL6_OUT  69D8
LSD_COUNT_VAL7      6982
LSD_COUNT_VAL7_OUT  69E4
LSD_D0_OUT          6AC8
LSD_D1_OUT          6AD4
LSD_D2_OUT          6AE0
LSD_D3_OUT          6AEC
LSD_D4_OUT          6AF8
LSD_D5_OUT          6B04
LSD_D6_OUT          6B10
LSD_D7_OUT          6B1C
LSD_DN0             6A50
LSD_DN1             6A66
LSD_DN2             6A74
LSD_DN3             6A82
LSD_DN4             6A90
LSD_DN5             6A9E
LSD_DN6             6AAC
LSD_DN7             6ABA
LSD_MEM_SHIFT       65AA
LSD_REG_SHIFT       6892
LSD_SHIFT_REG       68A8
LSD_SHIFT_TYPE      6596
LSD_SUB             6592
LSLM_END            1AD8
LSLR_END            1AB0
LSLR_FAIL           1AAA
LSLR_L              1A86
LSLR_W              1A62
LSL_M_SIZE          1AB6
LSL_R_SIZE          1A34
LSRM_END            1B82
LSRR_END            1B5A
LSRR_FAIL           1B54
LSRR_L              1B30
LSRR_W              1B0C
LSR_M_SIZE          1B60
LSR_R_SIZE          1ADE
MAIN                1000
MAIN_LOOP           11D2
MASK_ADDA           F0C0
MASK_ADDA_ABS_ADD   3F
MASK_ADDA_AN_REG    E00
MASK_ADDA_EA        FFF
MASK_ADDA_EA_MODE   38
MASK_ADDA_EA_REG    7
MASK_ADDA_EA_REG_AND_MODE  3F
MASK_ADDA_OPMODE    1C0
MASK_ADDA_REG       E00
MASK_ADDQ_ABS_ADD   3F
MASK_ADDQ_DATA      E00
MASK_ADDQ_EA        EFF
MASK_ADDQ_EA_MODE   38
MASK_ADDQ_EA_REG    7
MASK_ADDQ_EA_REG_AND_MODE  3F
MASK_ADDQ_REG       E00
MASK_ADDQ_SIZE      C0
MASK_ADD_ABS_ADD    3F
MASK_ADD_AN_REG     E00
MASK_ADD_EA         FFF
MASK_ADD_EA_MODE    38
MASK_ADD_EA_REG     7
MASK_ADD_EA_REG_AND_MODE  3F
MASK_ADD_OPMODE     1C0
MASK_ADD_REG        E00
MASK_AND_ABS_ADD    3F
MASK_AND_AN_REG     E00
MASK_AND_EA         FFF
MASK_AND_EA_MODE    38
MASK_AND_EA_REG     7
MASK_AND_EA_REG_AND_MODE  3F
MASK_AND_OPMODE     1C0
MASK_AND_REG        E00
MASK_ASD_COUNT_SHIFT  E00
MASK_ASD_DATA_REG   7
MASK_ASD_EA_MODE    38
MASK_ASD_EA_MODE_ABS_ADD  3F
MASK_ASD_EA_REG_AND_MODE  3F
MASK_ASD_REG_SHIFT  20
MASK_ASD_REG_SHIFT_IR  20
MASK_ASD_SHIFT_TYPE  C0
MASK_ASL_MEM_SHIFT_DIRECT  100
MASK_ASL_MEM_SHIFT_EA  13F
MASK_ASL_MEM_SHIFT_EA_MODE  38
MASK_ASL_MEM_SHIFT_EA_REG  7
MASK_ASL_REG_SHIFT_COUNT  E00
MASK_ASL_REG_SHIFT_DIRECT  100
MASK_ASL_REG_SHIFT_EA  FE7
MASK_ASL_REG_SHIFT_IR  20
MASK_ASL_REG_SHIFT_REG  7
MASK_ASL_REG_SHIFT_SIZE  C0
MASK_ASR_MEM_SHIFT_DIRECT  100
MASK_ASR_MEM_SHIFT_EA  13F
MASK_ASR_MEM_SHIFT_EA_MODE  38
MASK_ASR_MEM_SHIFT_EA_REG  7
MASK_ASR_REG_SHIFT_COUNT  E00
MASK_ASR_REG_SHIFT_DIRECT  100
MASK_ASR_REG_SHIFT_EA  FE7
MASK_ASR_REG_SHIFT_IR  20
MASK_ASR_REG_SHIFT_REG  7
MASK_ASR_REG_SHIFT_SIZE  C0
MASK_BCC            FF00
MASK_BCC_COND       E00
MASK_BCC_DISPLACE   FF
MASK_BCC_EA         FFF
MASK_BCC_SIZE       FF
MASK_BGT_DISPLACE   FF
MASK_BGT_EA         F00
MASK_BLE_DISPLACE   FF
MASK_BLE_EA         F00
MASK_BRA_EA         FF
MASK_JSR            FFC0
MASK_JSR_ABS_ADD    3F
MASK_JSR_AN_REG     E00
MASK_JSR_EA         3F
MASK_JSR_EA_MODE    38
MASK_JSR_EA_REG     7
MASK_JSR_EA_REG_AND_MODE  3F
MASK_LEA            F1C0
MASK_LEA_ABS_ADD    3F
MASK_LEA_AN_REG     E00
MASK_LEA_EA         E3F
MASK_LEA_EA_MODE    38
MASK_LEA_EA_REG     7
MASK_LEA_EA_REG_AND_MODE  3F
MASK_LEA_REG        E00
MASK_LSD_COUNT_SHIFT  E00
MASK_LSD_DATA_REG   7
MASK_LSD_EA_MODE    38
MASK_LSD_EA_MODE_ABS_ADD  3F
MASK_LSD_EA_REG_AND_MODE  3F
MASK_LSD_REG_SHIFT  20
MASK_LSD_REG_SHIFT_IR  20
MASK_LSD_SHIFT_TYPE  C0
MASK_LSL_MEM_SHIFT_DIRECT  100
MASK_LSL_MEM_SHIFT_EA  13F
MASK_LSL_MEM_SHIFT_EA_MODE  38
MASK_LSL_MEM_SHIFT_EA_REG  7
MASK_LSL_REG_SHIFT_COUNT  E00
MASK_LSL_REG_SHIFT_DIRECT  100
MASK_LSL_REG_SHIFT_EA  FE7
MASK_LSL_REG_SHIFT_IR  20
MASK_LSL_REG_SHIFT_REG  7
MASK_LSL_REG_SHIFT_SIZE  C0
MASK_LSR_MEM_SHIFT_DIRECT  100
MASK_LSR_MEM_SHIFT_EA  13F
MASK_LSR_MEM_SHIFT_EA_MODE  38
MASK_LSR_MEM_SHIFT_EA_REG  7
MASK_LSR_REG_SHIFT_COUNT  E00
MASK_LSR_REG_SHIFT_DIRECT  100
MASK_LSR_REG_SHIFT_EA  FE7
MASK_LSR_REG_SHIFT_IR  20
MASK_LSR_REG_SHIFT_REG  7
MASK_LSR_REG_SHIFT_SIZE  C0
MASK_MOVE           C000
MASK_MOVEA_ABS_ADD  3F
MASK_MOVEA_AN_REG   E00
MASK_MOVEA_DST_REG  E00
MASK_MOVEA_EA       E3F
MASK_MOVEA_EA_MODE  38
MASK_MOVEA_EA_REG_AND_MODE  3F
MASK_MOVEA_SRC_MODE  38
MASK_MOVEA_SRC_REG  7
MASK_MOVEM          FF80
MASK_MOVEM_ABS_ADD  38
MASK_MOVEM_DIR      400
MASK_MOVEM_DIRECT   400
MASK_MOVEM_EA       47F
MASK_MOVEM_EA_MODE  3C
MASK_MOVEM_EA_REG   7
MASK_MOVEM_EA_REG_AND_MODE  3F
MASK_MOVEM_MEM_REG_A0  100
MASK_MOVEM_MEM_REG_A1  200
MASK_MOVEM_MEM_REG_A2  400
MASK_MOVEM_MEM_REG_A3  800
MASK_MOVEM_MEM_REG_A4  1000
MASK_MOVEM_MEM_REG_A5  2000
MASK_MOVEM_MEM_REG_A6  4000
MASK_MOVEM_MEM_REG_A7  8000
MASK_MOVEM_MEM_REG_D0  100
MASK_MOVEM_MEM_REG_D1  200
MASK_MOVEM_MEM_REG_D2  400
MASK_MOVEM_MEM_REG_D3  800
MASK_MOVEM_MEM_REG_D4  1000
MASK_MOVEM_MEM_REG_D5  2000
MASK_MOVEM_MEM_REG_D6  4000
MASK_MOVEM_MEM_REG_D7  8000
MASK_MOVEM_REG_MEM_A0  80
MASK_MOVEM_REG_MEM_A1  40
MASK_MOVEM_REG_MEM_A2  20
MASK_MOVEM_REG_MEM_A3  10
MASK_MOVEM_REG_MEM_A4  8
MASK_MOVEM_REG_MEM_A5  4
MASK_MOVEM_REG_MEM_A6  2
MASK_MOVEM_REG_MEM_A7  1
MASK_MOVEM_REG_MEM_D0  8000
MASK_MOVEM_REG_MEM_D1  4000
MASK_MOVEM_REG_MEM_D2  2000
MASK_MOVEM_REG_MEM_D3  1000
MASK_MOVEM_REG_MEM_D4  800
MASK_MOVEM_REG_MEM_D5  400
MASK_MOVEM_REG_MEM_D6  200
MASK_MOVEM_REG_MEM_D7  100
MASK_MOVEM_SIZE     40
MASK_MOVEQ_DATA     FF
MASK_MOVEQ_EA       EFF
MASK_MOVEQ_FIRST_OPERAND  FF
MASK_MOVEQ_REG      E00
MASK_MOVEQ_SECOND_OP_DN  E00
MASK_MOVE_A         1C0
MASK_MOVE_DEST_ABS_ADD  1C0
MASK_MOVE_DEST_EA_MODE  1C0
MASK_MOVE_DEST_EA_REG_AND_MODE  FC0
MASK_MOVE_DST_MODE  1C0
MASK_MOVE_DST_REG   E00
MASK_MOVE_EA        FFF
MASK_MOVE_SRC_ABS_ADD  3F
MASK_MOVE_SRC_EA_MODE  38
MASK_MOVE_SRC_EA_REG_AND_MODE  3F
MASK_MOVE_SRC_MODE  7
MASK_MOVE_SRC_REG   38
MASK_NOT            FF00
MASK_NOT_EA         FF
MASK_NOT_EA_MODE    38
MASK_NOT_EA_MODE_ABS_ADD  3F
MASK_NOT_EA_REG     7
MASK_NOT_EA_REG_AND_MODE  3F
MASK_NOT_SIZE       C0
MASK_OPCODE         F000
MASK_OPMODE         1C0
MASK_OR_ABS_ADD     3F
MASK_OR_AN_REG      E00
MASK_OR_EA          FFF
MASK_OR_EA_MODE     38
MASK_OR_EA_REG      7
MASK_OR_EA_REG_OR_MODE  3F
MASK_OR_OPMODE      1C0
MASK_OR_REG         E00
MASK_ROD_COUNT_SHIFT  E00
MASK_ROD_DATA_REG   7
MASK_ROD_EA_MODE    38
MASK_ROD_EA_MODE_ABS_ADD  3F
MASK_ROD_EA_REG_AND_MODE  3F
MASK_ROD_REG_SHIFT  20
MASK_ROD_REG_SHIFT_IR  20
MASK_ROD_SHIFT_TYPE  C0
MASK_ROL_MEM_ROT_DIRECT  100
MASK_ROL_MEM_ROT_EA  13F
MASK_ROL_MEM_ROT_EA_MODE  38
MASK_ROL_MEM_ROT_EA_REG  7
MASK_ROL_REG_ROT_COUNT  E00
MASK_ROL_REG_ROT_DIRECT  100
MASK_ROL_REG_ROT_EA  FE7
MASK_ROL_REG_ROT_IR  20
MASK_ROL_REG_ROT_REG  7
MASK_ROL_REG_ROT_SIZE  C00
MASK_ROR_MEM_ROT_DIRECT  100
MASK_ROR_MEM_ROT_EA  13F
MASK_ROR_MEM_ROT_EA_MODE  38
MASK_ROR_MEM_ROT_EA_REG  7
MASK_ROR_REG_ROT_COUNT  E00
MASK_ROR_REG_ROT_DIRECT  100
MASK_ROR_REG_ROT_EA  FE7
MASK_ROR_REG_ROT_IR  20
MASK_ROR_REG_ROT_REG  7
MASK_ROR_REG_ROT_SIZE  C0
MASK_SHFT_M         FFC0
MASK_SHFT_R         F118
MASK_SIZE_ADD       C0
MASK_SIZE_ADDA      100
MASK_SIZE_LOGIC     C0
MASK_SIZE_MOVEM     40
MASK_SIZE_MOVEQ     F100
MASK_SIZE_MOVES     3000
MASK_SIZE_NOT       C0
MASK_SIZE_SHIFTS    C0
MASK_SIZE_SUB       C0
MASK_SUB_ABS_ADD    3F
MASK_SUB_AN_REG     E00
MASK_SUB_EA         FFF
MASK_SUB_EA_MODE    38
MASK_SUB_EA_REG     7
MASK_SUB_EA_REG_AND_MODE  3F
MASK_SUB_OPMODE     1C0
MASK_SUB_REG        E00
MATCH_ADDA          D0C0
MATCH_ADDA_A0       8
MATCH_ADDA_A1       9
MATCH_ADDA_A2       A
MATCH_ADDA_A3       B
MATCH_ADDA_A4       C
MATCH_ADDA_A5       D
MATCH_ADDA_A6       E
MATCH_ADDA_A7       F
MATCH_ADDA_ABS_ADD_LONG  39
MATCH_ADDA_ABS_ADD_WORD  38
MATCH_ADDA_AN       8
MATCH_ADDA_AN_INDIR  10
MATCH_ADDA_AN_INDIR_POSTINC  18
MATCH_ADDA_AN_INDIR_POSTINC_REG0  18
MATCH_ADDA_AN_INDIR_POSTINC_REG1  19
MATCH_ADDA_AN_INDIR_POSTINC_REG2  1A
MATCH_ADDA_AN_INDIR_POSTINC_REG3  1B
MATCH_ADDA_AN_INDIR_POSTINC_REG4  1C
MATCH_ADDA_AN_INDIR_POSTINC_REG5  1D
MATCH_ADDA_AN_INDIR_POSTINC_REG6  1E
MATCH_ADDA_AN_INDIR_POSTINC_REG7  1F
MATCH_ADDA_AN_INDIR_PREDEC  20
MATCH_ADDA_AN_INDIR_PREDEC_REG0  20
MATCH_ADDA_AN_INDIR_PREDEC_REG1  21
MATCH_ADDA_AN_INDIR_PREDEC_REG2  22
MATCH_ADDA_AN_INDIR_PREDEC_REG3  23
MATCH_ADDA_AN_INDIR_PREDEC_REG4  24
MATCH_ADDA_AN_INDIR_PREDEC_REG5  25
MATCH_ADDA_AN_INDIR_PREDEC_REG6  26
MATCH_ADDA_AN_INDIR_PREDEC_REG7  27
MATCH_ADDA_AN_INDIR_R0  10
MATCH_ADDA_AN_INDIR_R1  11
MATCH_ADDA_AN_INDIR_R2  12
MATCH_ADDA_AN_INDIR_R3  13
MATCH_ADDA_AN_INDIR_R4  14
MATCH_ADDA_AN_INDIR_R5  15
MATCH_ADDA_AN_INDIR_R6  16
MATCH_ADDA_AN_INDIR_R7  17
MATCH_ADDA_D0       0
MATCH_ADDA_D1       1
MATCH_ADDA_D2       2
MATCH_ADDA_D3       3
MATCH_ADDA_D4       4
MATCH_ADDA_D5       5
MATCH_ADDA_D6       6
MATCH_ADDA_D7       7
MATCH_ADDA_DN       0
MATCH_ADDA_IMM_ADD  3C
MATCH_ADDA_IMM_ADD_LONG  1FC
MATCH_ADDA_IMM_ADD_WORD  FC
MATCH_ADDA_REG0     0
MATCH_ADDA_REG1     200
MATCH_ADDA_REG2     400
MATCH_ADDA_REG3     600
MATCH_ADDA_REG4     800
MATCH_ADDA_REG5     A00
MATCH_ADDA_REG6     C00
MATCH_ADDA_REG7     E00
MATCH_ADDQ          5000
MATCH_ADDQ_A0       8
MATCH_ADDQ_A1       9
MATCH_ADDQ_A2       A
MATCH_ADDQ_A3       B
MATCH_ADDQ_A4       C
MATCH_ADDQ_A5       D
MATCH_ADDQ_A6       E
MATCH_ADDQ_A7       F
MATCH_ADDQ_ABS_ADD_LONG  39
MATCH_ADDQ_ABS_ADD_WORD  38
MATCH_ADDQ_AN       8
MATCH_ADDQ_AN_INDIR  10
MATCH_ADDQ_AN_INDIR_POSTINC  18
MATCH_ADDQ_AN_INDIR_POSTINC_REG0  18
MATCH_ADDQ_AN_INDIR_POSTINC_REG1  19
MATCH_ADDQ_AN_INDIR_POSTINC_REG2  1A
MATCH_ADDQ_AN_INDIR_POSTINC_REG3  1B
MATCH_ADDQ_AN_INDIR_POSTINC_REG4  1C
MATCH_ADDQ_AN_INDIR_POSTINC_REG5  1D
MATCH_ADDQ_AN_INDIR_POSTINC_REG6  1E
MATCH_ADDQ_AN_INDIR_POSTINC_REG7  1F
MATCH_ADDQ_AN_INDIR_PREDEC  20
MATCH_ADDQ_AN_INDIR_PREDEC_REG0  20
MATCH_ADDQ_AN_INDIR_PREDEC_REG1  21
MATCH_ADDQ_AN_INDIR_PREDEC_REG2  22
MATCH_ADDQ_AN_INDIR_PREDEC_REG3  23
MATCH_ADDQ_AN_INDIR_PREDEC_REG4  24
MATCH_ADDQ_AN_INDIR_PREDEC_REG5  25
MATCH_ADDQ_AN_INDIR_PREDEC_REG6  26
MATCH_ADDQ_AN_INDIR_PREDEC_REG7  27
MATCH_ADDQ_AN_INDIR_R0  10
MATCH_ADDQ_AN_INDIR_R1  11
MATCH_ADDQ_AN_INDIR_R2  12
MATCH_ADDQ_AN_INDIR_R3  13
MATCH_ADDQ_AN_INDIR_R4  14
MATCH_ADDQ_AN_INDIR_R5  15
MATCH_ADDQ_AN_INDIR_R6  16
MATCH_ADDQ_AN_INDIR_R7  17
MATCH_ADDQ_D0       0
MATCH_ADDQ_D1       1
MATCH_ADDQ_D2       2
MATCH_ADDQ_D3       3
MATCH_ADDQ_D4       4
MATCH_ADDQ_D5       5
MATCH_ADDQ_D6       6
MATCH_ADDQ_D7       7
MATCH_ADDQ_DN       0
MATCH_ADDQ_REG0     0
MATCH_ADDQ_REG1     200
MATCH_ADDQ_REG2     400
MATCH_ADDQ_REG3     600
MATCH_ADDQ_REG4     800
MATCH_ADDQ_REG5     A00
MATCH_ADDQ_REG6     C00
MATCH_ADDQ_REG7     E00
MATCH_ADD_A0        8
MATCH_ADD_A1        9
MATCH_ADD_A2        A
MATCH_ADD_A3        B
MATCH_ADD_A4        C
MATCH_ADD_A5        D
MATCH_ADD_A6        E
MATCH_ADD_A7        F
MATCH_ADD_ABS_ADD_LONG  39
MATCH_ADD_ABS_ADD_WORD  38
MATCH_ADD_AN        8
MATCH_ADD_AN_INDIR  10
MATCH_ADD_AN_INDIR_POSTINC  18
MATCH_ADD_AN_INDIR_POSTINC_R0  18
MATCH_ADD_AN_INDIR_POSTINC_R1  19
MATCH_ADD_AN_INDIR_POSTINC_R2  1A
MATCH_ADD_AN_INDIR_POSTINC_R3  1B
MATCH_ADD_AN_INDIR_POSTINC_R4  1C
MATCH_ADD_AN_INDIR_POSTINC_R5  1D
MATCH_ADD_AN_INDIR_POSTINC_R6  1E
MATCH_ADD_AN_INDIR_POSTINC_R7  1F
MATCH_ADD_AN_INDIR_PREDEC  20
MATCH_ADD_AN_INDIR_PREDEC_REG0  20
MATCH_ADD_AN_INDIR_PREDEC_REG1  21
MATCH_ADD_AN_INDIR_PREDEC_REG2  22
MATCH_ADD_AN_INDIR_PREDEC_REG3  23
MATCH_ADD_AN_INDIR_PREDEC_REG4  24
MATCH_ADD_AN_INDIR_PREDEC_REG5  25
MATCH_ADD_AN_INDIR_PREDEC_REG6  26
MATCH_ADD_AN_INDIR_PREDEC_REG7  27
MATCH_ADD_AN_INDIR_R0  10
MATCH_ADD_AN_INDIR_R1  11
MATCH_ADD_AN_INDIR_R2  12
MATCH_ADD_AN_INDIR_R3  13
MATCH_ADD_AN_INDIR_R4  14
MATCH_ADD_AN_INDIR_R5  15
MATCH_ADD_AN_INDIR_R6  16
MATCH_ADD_AN_INDIR_R7  17
MATCH_ADD_B_DN_EA   0
MATCH_ADD_B_EA_DN   100
MATCH_ADD_D0        0
MATCH_ADD_D1        1
MATCH_ADD_D2        2
MATCH_ADD_D3        3
MATCH_ADD_D4        4
MATCH_ADD_D5        5
MATCH_ADD_D6        6
MATCH_ADD_D7        7
MATCH_ADD_DN        0
MATCH_ADD_L_DN_EA   80
MATCH_ADD_L_EA_DN   180
MATCH_ADD_REG0      0
MATCH_ADD_REG1      200
MATCH_ADD_REG2      400
MATCH_ADD_REG3      600
MATCH_ADD_REG4      800
MATCH_ADD_REG5      A00
MATCH_ADD_REG6      C00
MATCH_ADD_REG7      E00
MATCH_ADD_W_DN_EA   40
MATCH_ADD_W_EA_DN   140
MATCH_AND           C000
MATCH_AND_A0        8
MATCH_AND_A1        9
MATCH_AND_A2        A
MATCH_AND_A3        B
MATCH_AND_A4        C
MATCH_AND_A5        D
MATCH_AND_A6        E
MATCH_AND_A7        F
MATCH_AND_ABS_ADD_LONG  39
MATCH_AND_ABS_ADD_WORD  38
MATCH_AND_AN_INDIR  10
MATCH_AND_AN_INDIR_POSTINC  18
MATCH_AND_AN_INDIR_POSTINC_R0  18
MATCH_AND_AN_INDIR_POSTINC_R1  19
MATCH_AND_AN_INDIR_POSTINC_R2  1A
MATCH_AND_AN_INDIR_POSTINC_R3  1B
MATCH_AND_AN_INDIR_POSTINC_R4  1C
MATCH_AND_AN_INDIR_POSTINC_R5  1D
MATCH_AND_AN_INDIR_POSTINC_R6  1E
MATCH_AND_AN_INDIR_POSTINC_R7  1F
MATCH_AND_AN_INDIR_PREDEC  20
MATCH_AND_AN_INDIR_PREDEC_REG0  20
MATCH_AND_AN_INDIR_PREDEC_REG1  21
MATCH_AND_AN_INDIR_PREDEC_REG2  22
MATCH_AND_AN_INDIR_PREDEC_REG3  23
MATCH_AND_AN_INDIR_PREDEC_REG4  24
MATCH_AND_AN_INDIR_PREDEC_REG5  25
MATCH_AND_AN_INDIR_PREDEC_REG6  26
MATCH_AND_AN_INDIR_PREDEC_REG7  27
MATCH_AND_AN_INDIR_R0  10
MATCH_AND_AN_INDIR_R1  11
MATCH_AND_AN_INDIR_R2  12
MATCH_AND_AN_INDIR_R3  13
MATCH_AND_AN_INDIR_R4  14
MATCH_AND_AN_INDIR_R5  15
MATCH_AND_AN_INDIR_R6  16
MATCH_AND_AN_INDIR_R7  17
MATCH_AND_B_DN_EA   0
MATCH_AND_B_EA_DN   100
MATCH_AND_D0        0
MATCH_AND_D1        1
MATCH_AND_D2        2
MATCH_AND_D3        3
MATCH_AND_D4        4
MATCH_AND_D5        5
MATCH_AND_D6        6
MATCH_AND_D7        7
MATCH_AND_DN        0
MATCH_AND_IMM_ADD   3C
MATCH_AND_IMM_ADD_LONG  1FC
MATCH_AND_IMM_ADD_WORD  FC
MATCH_AND_L_DN_EA   80
MATCH_AND_L_EA_DN   180
MATCH_AND_REG0      0
MATCH_AND_REG1      200
MATCH_AND_REG2      400
MATCH_AND_REG3      600
MATCH_AND_REG4      800
MATCH_AND_REG5      A00
MATCH_AND_REG6      C00
MATCH_AND_REG7      E00
MATCH_AND_W_DN_EA   40
MATCH_AND_W_EA_DN   140
MATCH_ASD_ABS_ADD_LONG  3C
MATCH_ASD_ABS_ADD_WORD  39
MATCH_ASD_AN_INDIR  10
MATCH_ASD_AN_INDIR_POSTINC  20
MATCH_ASD_AN_INDIR_POSTINC_R0  20
MATCH_ASD_AN_INDIR_POSTINC_R1  21
MATCH_ASD_AN_INDIR_POSTINC_R2  22
MATCH_ASD_AN_INDIR_POSTINC_R3  23
MATCH_ASD_AN_INDIR_POSTINC_R4  24
MATCH_ASD_AN_INDIR_POSTINC_R5  25
MATCH_ASD_AN_INDIR_POSTINC_R6  26
MATCH_ASD_AN_INDIR_POSTINC_R7  27
MATCH_ASD_AN_INDIR_PREDEC  18
MATCH_ASD_AN_INDIR_PREDEC_R0  18
MATCH_ASD_AN_INDIR_PREDEC_R1  19
MATCH_ASD_AN_INDIR_PREDEC_R2  1A
MATCH_ASD_AN_INDIR_PREDEC_R3  1B
MATCH_ASD_AN_INDIR_PREDEC_R4  1C
MATCH_ASD_AN_INDIR_PREDEC_R5  1D
MATCH_ASD_AN_INDIR_PREDEC_R6  1E
MATCH_ASD_AN_INDIR_PREDEC_R7  1F
MATCH_ASD_AN_INDIR_R0  10
MATCH_ASD_AN_INDIR_R1  11
MATCH_ASD_AN_INDIR_R2  12
MATCH_ASD_AN_INDIR_R3  13
MATCH_ASD_AN_INDIR_R4  14
MATCH_ASD_AN_INDIR_R5  15
MATCH_ASD_AN_INDIR_R6  16
MATCH_ASD_AN_INDIR_R7  17
MATCH_ASD_COUNT_REG0  0
MATCH_ASD_COUNT_REG1  200
MATCH_ASD_COUNT_REG2  400
MATCH_ASD_COUNT_REG3  600
MATCH_ASD_COUNT_REG4  800
MATCH_ASD_COUNT_REG5  A00
MATCH_ASD_COUNT_REG6  C00
MATCH_ASD_COUNT_REG7  E00
MATCH_ASD_COUNT_VAL0  0
MATCH_ASD_COUNT_VAL1  200
MATCH_ASD_COUNT_VAL2  400
MATCH_ASD_COUNT_VAL3  600
MATCH_ASD_COUNT_VAL4  800
MATCH_ASD_COUNT_VAL5  A00
MATCH_ASD_COUNT_VAL6  C00
MATCH_ASD_COUNT_VAL7  E00
MATCH_ASD_D_REG0    0
MATCH_ASD_D_REG1    1
MATCH_ASD_D_REG2    2
MATCH_ASD_D_REG3    3
MATCH_ASD_D_REG4    4
MATCH_ASD_D_REG5    5
MATCH_ASD_D_REG6    6
MATCH_ASD_D_REG7    7
MATCH_ASD_MEM_SHIFT  C0
MATCH_ASD_SHIFT_COUNT  20
MATCH_ASD_SHIFT_REG  20
MATCH_ASL_M         E1C0
MATCH_ASL_R         E100
MATCH_ASR_M         E0C0
MATCH_ASR_R         E000
MATCH_BEQ           6700
MATCH_BGT           6E00
MATCH_BLE           6F00
MATCH_BRA           6000
MATCH_G0100         4000
MATCH_G0110         6000
MATCH_G1101         D000
MATCH_G1110         E000
MATCH_IMM_ADD       3C
MATCH_IMM_ADD_LONG  1FC
MATCH_IMM_ADD_WORD  FC
MATCH_JSR           4E80
MATCH_JSR_ABS_ADD_LONG  39
MATCH_JSR_ABS_ADD_WORD  38
MATCH_JSR_AN_INDIR  10
MATCH_JSR_AN_INDIR_R0  10
MATCH_JSR_AN_INDIR_R1  11
MATCH_JSR_AN_INDIR_R2  12
MATCH_JSR_AN_INDIR_R3  13
MATCH_JSR_AN_INDIR_R4  14
MATCH_JSR_AN_INDIR_R5  15
MATCH_JSR_AN_INDIR_R6  16
MATCH_JSR_AN_INDIR_R7  17
MATCH_JSR_D0        0
MATCH_JSR_D1        1
MATCH_JSR_D2        2
MATCH_JSR_D3        3
MATCH_JSR_D4        4
MATCH_JSR_D5        5
MATCH_JSR_D6        6
MATCH_JSR_D7        7
MATCH_JSR_DN        0
MATCH_LEA           41C0
MATCH_LEA_ABS_ADD_LONG  39
MATCH_LEA_ABS_ADD_WORD  38
MATCH_LEA_AN_INDIR  10
MATCH_LEA_AN_INDIR_R0  10
MATCH_LEA_AN_INDIR_R1  11
MATCH_LEA_AN_INDIR_R2  12
MATCH_LEA_AN_INDIR_R3  13
MATCH_LEA_AN_INDIR_R4  14
MATCH_LEA_AN_INDIR_R5  15
MATCH_LEA_AN_INDIR_R6  16
MATCH_LEA_AN_INDIR_R7  17
MATCH_LEA_REG0      0
MATCH_LEA_REG1      200
MATCH_LEA_REG2      400
MATCH_LEA_REG3      600
MATCH_LEA_REG4      800
MATCH_LEA_REG5      A00
MATCH_LEA_REG6      C00
MATCH_LEA_REG7      E00
MATCH_LSD_ABS_ADD_LONG  3C
MATCH_LSD_ABS_ADD_WORD  39
MATCH_LSD_AN_INDIR  10
MATCH_LSD_AN_INDIR_POSTINC  20
MATCH_LSD_AN_INDIR_POSTINC_R0  20
MATCH_LSD_AN_INDIR_POSTINC_R1  21
MATCH_LSD_AN_INDIR_POSTINC_R2  22
MATCH_LSD_AN_INDIR_POSTINC_R3  23
MATCH_LSD_AN_INDIR_POSTINC_R4  24
MATCH_LSD_AN_INDIR_POSTINC_R5  25
MATCH_LSD_AN_INDIR_POSTINC_R6  26
MATCH_LSD_AN_INDIR_POSTINC_R7  27
MATCH_LSD_AN_INDIR_PREDEC  18
MATCH_LSD_AN_INDIR_PREDEC_R0  18
MATCH_LSD_AN_INDIR_PREDEC_R1  19
MATCH_LSD_AN_INDIR_PREDEC_R2  1A
MATCH_LSD_AN_INDIR_PREDEC_R3  1B
MATCH_LSD_AN_INDIR_PREDEC_R4  1C
MATCH_LSD_AN_INDIR_PREDEC_R5  1D
MATCH_LSD_AN_INDIR_PREDEC_R6  1E
MATCH_LSD_AN_INDIR_PREDEC_R7  1
MATCH_LSD_AN_INDIR_R0  10
MATCH_LSD_AN_INDIR_R1  11
MATCH_LSD_AN_INDIR_R2  12
MATCH_LSD_AN_INDIR_R3  13
MATCH_LSD_AN_INDIR_R4  14
MATCH_LSD_AN_INDIR_R5  15
MATCH_LSD_AN_INDIR_R6  16
MATCH_LSD_AN_INDIR_R7  17
MATCH_LSD_COUNT_REG0  0
MATCH_LSD_COUNT_REG1  200
MATCH_LSD_COUNT_REG2  400
MATCH_LSD_COUNT_REG3  600
MATCH_LSD_COUNT_REG4  800
MATCH_LSD_COUNT_REG5  A00
MATCH_LSD_COUNT_REG6  C00
MATCH_LSD_COUNT_REG7  E00
MATCH_LSD_COUNT_VAL0  0
MATCH_LSD_COUNT_VAL1  200
MATCH_LSD_COUNT_VAL2  400
MATCH_LSD_COUNT_VAL3  600
MATCH_LSD_COUNT_VAL4  800
MATCH_LSD_COUNT_VAL5  A00
MATCH_LSD_COUNT_VAL6  C00
MATCH_LSD_COUNT_VAL7  E00
MATCH_LSD_D_REG0    0
MATCH_LSD_D_REG1    1
MATCH_LSD_D_REG2    2
MATCH_LSD_D_REG3    3
MATCH_LSD_D_REG4    4
MATCH_LSD_D_REG5    5
MATCH_LSD_D_REG6    6
MATCH_LSD_D_REG7    7
MATCH_LSD_MEM_SHIFT  C0
MATCH_LSD_SHIFT_COUNT  20
MATCH_LSD_SHIFT_REG  20
MATCH_LSL_M         E3C0
MATCH_LSL_R         E108
MATCH_LSR_M         E2C0
MATCH_LSR_R         E008
MATCH_MOVE          0
MATCH_MOVEA         40
MATCH_MOVEA_A0      8
MATCH_MOVEA_A1      9
MATCH_MOVEA_A2      A
MATCH_MOVEA_A3      B
MATCH_MOVEA_A4      C
MATCH_MOVEA_A5      D
MATCH_MOVEA_A6      E
MATCH_MOVEA_A7      F
MATCH_MOVEA_ABS_ADD_LONG  39
MATCH_MOVEA_ABS_ADD_WORD  38
MATCH_MOVEA_AN      8
MATCH_MOVEA_AN_INDIR  10
MATCH_MOVEA_AN_INDIR_POSTINC  18
MATCH_MOVEA_AN_INDIR_POSTINC_R0  18
MATCH_MOVEA_AN_INDIR_POSTINC_R1  19
MATCH_MOVEA_AN_INDIR_POSTINC_R2  1A
MATCH_MOVEA_AN_INDIR_POSTINC_R3  1B
MATCH_MOVEA_AN_INDIR_POSTINC_R4  1C
MATCH_MOVEA_AN_INDIR_POSTINC_R5  1D
MATCH_MOVEA_AN_INDIR_POSTINC_R6  1E
MATCH_MOVEA_AN_INDIR_POSTINC_R7  1F
MATCH_MOVEA_AN_INDIR_PREDEC  20
MATCH_MOVEA_AN_INDIR_PREDEC_REG0  20
MATCH_MOVEA_AN_INDIR_PREDEC_REG1  21
MATCH_MOVEA_AN_INDIR_PREDEC_REG2  22
MATCH_MOVEA_AN_INDIR_PREDEC_REG3  23
MATCH_MOVEA_AN_INDIR_PREDEC_REG4  24
MATCH_MOVEA_AN_INDIR_PREDEC_REG5  25
MATCH_MOVEA_AN_INDIR_PREDEC_REG6  26
MATCH_MOVEA_AN_INDIR_PREDEC_REG7  27
MATCH_MOVEA_AN_INDIR_R0  10
MATCH_MOVEA_AN_INDIR_R1  11
MATCH_MOVEA_AN_INDIR_R2  12
MATCH_MOVEA_AN_INDIR_R3  13
MATCH_MOVEA_AN_INDIR_R4  14
MATCH_MOVEA_AN_INDIR_R5  15
MATCH_MOVEA_AN_INDIR_R6  16
MATCH_MOVEA_AN_INDIR_R7  17
MATCH_MOVEA_D0      0
MATCH_MOVEA_D1      1
MATCH_MOVEA_D2      2
MATCH_MOVEA_D3      3
MATCH_MOVEA_D4      4
MATCH_MOVEA_D5      5
MATCH_MOVEA_D6      6
MATCH_MOVEA_D7      7
MATCH_MOVEA_DN      0
MATCH_MOVEA_IMM_ADD  3C
MATCH_MOVEA_IMM_ADD_LONG  1FC
MATCH_MOVEA_IMM_ADD_WORD  FC
MATCH_MOVEA_REG0    0
MATCH_MOVEA_REG1    200
MATCH_MOVEA_REG2    400
MATCH_MOVEA_REG3    600
MATCH_MOVEA_REG4    800
MATCH_MOVEA_REG5    A00
MATCH_MOVEA_REG6    C00
MATCH_MOVEA_REG7    E00
MATCH_MOVEB         1000
MATCH_MOVEL         2000
MATCH_MOVEM_ABS_ADD_LONG  39
MATCH_MOVEM_ABS_ADD_WORD  38
MATCH_MOVEM_AN_INDIR  10
MATCH_MOVEM_AN_INDIR_PDEC  20
MATCH_MOVEM_AN_INDIR_PDEC_R0  20
MATCH_MOVEM_AN_INDIR_PDEC_R1  21
MATCH_MOVEM_AN_INDIR_PDEC_R2  22
MATCH_MOVEM_AN_INDIR_PDEC_R3  23
MATCH_MOVEM_AN_INDIR_PDEC_R4  24
MATCH_MOVEM_AN_INDIR_PDEC_R5  25
MATCH_MOVEM_AN_INDIR_PDEC_R6  26
MATCH_MOVEM_AN_INDIR_PDEC_R7  27
MATCH_MOVEM_AN_INDIR_PINC  10
MATCH_MOVEM_AN_INDIR_PINC_R0  18
MATCH_MOVEM_AN_INDIR_PINC_R1  19
MATCH_MOVEM_AN_INDIR_PINC_R2  1A
MATCH_MOVEM_AN_INDIR_PINC_R3  1B
MATCH_MOVEM_AN_INDIR_PINC_R4  1C
MATCH_MOVEM_AN_INDIR_PINC_R5  1D
MATCH_MOVEM_AN_INDIR_PINC_R6  1E
MATCH_MOVEM_AN_INDIR_PINC_R7  1F
MATCH_MOVEM_AN_INDIR_R0  10
MATCH_MOVEM_AN_INDIR_R1  11
MATCH_MOVEM_AN_INDIR_R2  12
MATCH_MOVEM_AN_INDIR_R3  13
MATCH_MOVEM_AN_INDIR_R4  14
MATCH_MOVEM_AN_INDIR_R5  15
MATCH_MOVEM_AN_INDIR_R6  16
MATCH_MOVEM_AN_INDIR_R7  17
MATCH_MOVEM_IMM_ADD  38
MATCH_MOVEM_IMM_ADD_LONG  39
MATCH_MOVEM_IMM_ADD_WORD  38
MATCH_MOVEM_MEM_REG  400
MATCH_MOVEM_MEM_REG_A0  100
MATCH_MOVEM_MEM_REG_A1  200
MATCH_MOVEM_MEM_REG_A2  400
MATCH_MOVEM_MEM_REG_A3  800
MATCH_MOVEM_MEM_REG_A4  1000
MATCH_MOVEM_MEM_REG_A5  2000
MATCH_MOVEM_MEM_REG_A6  4000
MATCH_MOVEM_MEM_REG_A7  8000
MATCH_MOVEM_MEM_REG_D0  100
MATCH_MOVEM_MEM_REG_D1  200
MATCH_MOVEM_MEM_REG_D2  400
MATCH_MOVEM_MEM_REG_D3  800
MATCH_MOVEM_MEM_REG_D4  1000
MATCH_MOVEM_MEM_REG_D5  2000
MATCH_MOVEM_MEM_REG_D6  4000
MATCH_MOVEM_MEM_REG_D7  8000
MATCH_MOVEM_MR      4C80
MATCH_MOVEM_REG_MEM  400
MATCH_MOVEM_REG_MEM_A0  80
MATCH_MOVEM_REG_MEM_A1  40
MATCH_MOVEM_REG_MEM_A2  20
MATCH_MOVEM_REG_MEM_A3  10
MATCH_MOVEM_REG_MEM_A4  8
MATCH_MOVEM_REG_MEM_A5  4
MATCH_MOVEM_REG_MEM_A6  2
MATCH_MOVEM_REG_MEM_A7  1
MATCH_MOVEM_REG_MEM_D0  8000
MATCH_MOVEM_REG_MEM_D1  4000
MATCH_MOVEM_REG_MEM_D2  2000
MATCH_MOVEM_REG_MEM_D3  1000
MATCH_MOVEM_REG_MEM_D4  800
MATCH_MOVEM_REG_MEM_D5  400
MATCH_MOVEM_REG_MEM_D6  200
MATCH_MOVEM_REG_MEM_D7  100
MATCH_MOVEM_RM      4880
MATCH_MOVEQ         7000
MATCH_MOVEQ_D0      0
MATCH_MOVEQ_D1      200
MATCH_MOVEQ_D2      400
MATCH_MOVEQ_D3      600
MATCH_MOVEQ_D4      800
MATCH_MOVEQ_D5      A00
MATCH_MOVEQ_D6      C00
MATCH_MOVEQ_D7      E00
MATCH_MOVEW         3000
MATCH_MOVE_DEST_A0  40
MATCH_MOVE_DEST_A1  240
MATCH_MOVE_DEST_A2  440
MATCH_MOVE_DEST_A3  640
MATCH_MOVE_DEST_A4  840
MATCH_MOVE_DEST_A5  A40
MATCH_MOVE_DEST_A6  C40
MATCH_MOVE_DEST_A7  E40
MATCH_MOVE_DEST_ABS_ADD_LONG  9C0
MATCH_MOVE_DEST_ABS_ADD_WORD  1C0
MATCH_MOVE_DEST_AN  40
MATCH_MOVE_DEST_AN_INDIR  80
MATCH_MOVE_DEST_AN_INDIR_PDEC_R0  100
MATCH_MOVE_DEST_AN_INDIR_PDEC_R1  300
MATCH_MOVE_DEST_AN_INDIR_PDEC_R2  500
MATCH_MOVE_DEST_AN_INDIR_PDEC_R3  700
MATCH_MOVE_DEST_AN_INDIR_PDEC_R4  900
MATCH_MOVE_DEST_AN_INDIR_PDEC_R5  B00
MATCH_MOVE_DEST_AN_INDIR_PDEC_R6  D00
MATCH_MOVE_DEST_AN_INDIR_PDEC_R7  F00
MATCH_MOVE_DEST_AN_INDIR_PINC_R0  C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R1  2C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R2  4C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R3  6C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R4  8C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R5  AC0
MATCH_MOVE_DEST_AN_INDIR_PINC_R6  CC0
MATCH_MOVE_DEST_AN_INDIR_PINC_R7  EC0
MATCH_MOVE_DEST_AN_INDIR_POSTINC  C0
MATCH_MOVE_DEST_AN_INDIR_PREDEC  100
MATCH_MOVE_DEST_AN_INDIR_R0  80
MATCH_MOVE_DEST_AN_INDIR_R1  280
MATCH_MOVE_DEST_AN_INDIR_R2  480
MATCH_MOVE_DEST_AN_INDIR_R3  680
MATCH_MOVE_DEST_AN_INDIR_R4  880
MATCH_MOVE_DEST_AN_INDIR_R5  A80
MATCH_MOVE_DEST_AN_INDIR_R6  C80
MATCH_MOVE_DEST_AN_INDIR_R7  E80
MATCH_MOVE_DEST_D0  0
MATCH_MOVE_DEST_D1  200
MATCH_MOVE_DEST_D2  400
MATCH_MOVE_DEST_D3  600
MATCH_MOVE_DEST_D4  800
MATCH_MOVE_DEST_D5  A00
MATCH_MOVE_DEST_D6  C00
MATCH_MOVE_DEST_D7  E00
MATCH_MOVE_DEST_DN  0
MATCH_MOVE_DEST_IMM_ADD  1C0
MATCH_MOVE_DEST_IMM_ADD_LONG  9C0
MATCH_MOVE_DEST_IMM_ADD_WORD  1C0
MATCH_MOVE_SRC_A0   8
MATCH_MOVE_SRC_A1   9
MATCH_MOVE_SRC_A2   A
MATCH_MOVE_SRC_A3   B
MATCH_MOVE_SRC_A4   C
MATCH_MOVE_SRC_A5   D
MATCH_MOVE_SRC_A6   E
MATCH_MOVE_SRC_A7   F
MATCH_MOVE_SRC_ABS_ADD_LONG  39
MATCH_MOVE_SRC_ABS_ADD_WORD  38
MATCH_MOVE_SRC_AN   8
MATCH_MOVE_SRC_AN_INDIR  10
MATCH_MOVE_SRC_AN_INDIR_PINC_R0  18
MATCH_MOVE_SRC_AN_INDIR_PINC_R1  19
MATCH_MOVE_SRC_AN_INDIR_PINC_R2  1A
MATCH_MOVE_SRC_AN_INDIR_PINC_R3  1B
MATCH_MOVE_SRC_AN_INDIR_PINC_R4  1C
MATCH_MOVE_SRC_AN_INDIR_PINC_R5  1D
MATCH_MOVE_SRC_AN_INDIR_PINC_R6  1E
MATCH_MOVE_SRC_AN_INDIR_PINC_R7  1F
MATCH_MOVE_SRC_AN_INDIR_POSTINC  18
MATCH_MOVE_SRC_AN_INDIR_PREDEC  20
MATCH_MOVE_SRC_AN_INDIR_PREDE_R0  20
MATCH_MOVE_SRC_AN_INDIR_PREDE_R1  21
MATCH_MOVE_SRC_AN_INDIR_PREDE_R2  22
MATCH_MOVE_SRC_AN_INDIR_PREDE_R3  23
MATCH_MOVE_SRC_AN_INDIR_PREDE_R4  24
MATCH_MOVE_SRC_AN_INDIR_PREDE_R5  25
MATCH_MOVE_SRC_AN_INDIR_PREDE_R6  26
MATCH_MOVE_SRC_AN_INDIR_PREDE_R7  27
MATCH_MOVE_SRC_AN_INDIR_R0  10
MATCH_MOVE_SRC_AN_INDIR_R1  11
MATCH_MOVE_SRC_AN_INDIR_R2  12
MATCH_MOVE_SRC_AN_INDIR_R3  13
MATCH_MOVE_SRC_AN_INDIR_R4  14
MATCH_MOVE_SRC_AN_INDIR_R5  15
MATCH_MOVE_SRC_AN_INDIR_R6  16
MATCH_MOVE_SRC_AN_INDIR_R7  17
MATCH_MOVE_SRC_D0   0
MATCH_MOVE_SRC_D1   1
MATCH_MOVE_SRC_D2   2
MATCH_MOVE_SRC_D3   3
MATCH_MOVE_SRC_D4   4
MATCH_MOVE_SRC_D5   5
MATCH_MOVE_SRC_D6   6
MATCH_MOVE_SRC_D7   7
MATCH_MOVE_SRC_DN   0
MATCH_MOVE_SRC_IMM_ADD  3C
MATCH_MOVE_SRC_IMM_ADD_LONG  1FC
MATCH_MOVE_SRC_IMM_ADD_WORD  FC
MATCH_NOP           4E71
MATCH_NOT           4600
MATCH_NOT_ABS_ADD_LONG  3C
MATCH_NOT_ABS_ADD_WORD  39
MATCH_NOT_AN_INDIR  10
MATCH_NOT_AN_INDIR_POSTINC  20
MATCH_NOT_AN_INDIR_POSTINC_R0  20
MATCH_NOT_AN_INDIR_POSTINC_R1  21
MATCH_NOT_AN_INDIR_POSTINC_R2  22
MATCH_NOT_AN_INDIR_POSTINC_R3  23
MATCH_NOT_AN_INDIR_POSTINC_R4  24
MATCH_NOT_AN_INDIR_POSTINC_R5  25
MATCH_NOT_AN_INDIR_POSTINC_R6  26
MATCH_NOT_AN_INDIR_POSTINC_R7  27
MATCH_NOT_AN_INDIR_PREDEC  18
MATCH_NOT_AN_INDIR_PREDEC_R0  18
MATCH_NOT_AN_INDIR_PREDEC_R1  19
MATCH_NOT_AN_INDIR_PREDEC_R2  1A
MATCH_NOT_AN_INDIR_PREDEC_R3  1B
MATCH_NOT_AN_INDIR_PREDEC_R4  1C
MATCH_NOT_AN_INDIR_PREDEC_R5  1D
MATCH_NOT_AN_INDIR_PREDEC_R6  1E
MATCH_NOT_AN_INDIR_PREDEC_R7  1F
MATCH_NOT_AN_INDIR_R0  10
MATCH_NOT_AN_INDIR_R1  11
MATCH_NOT_AN_INDIR_R2  12
MATCH_NOT_AN_INDIR_R3  13
MATCH_NOT_AN_INDIR_R4  14
MATCH_NOT_AN_INDIR_R5  15
MATCH_NOT_AN_INDIR_R6  16
MATCH_NOT_AN_INDIR_R7  17
MATCH_NOT_D0        0
MATCH_NOT_D1        1
MATCH_NOT_D2        2
MATCH_NOT_D3        3
MATCH_NOT_D4        4
MATCH_NOT_D5        5
MATCH_NOT_D6        6
MATCH_NOT_D7        7
MATCH_NOT_DN        0
MATCH_OR            8000
MATCH_OR_A0         8
MATCH_OR_A1         9
MATCH_OR_A2         A
MATCH_OR_A3         B
MATCH_OR_A4         C
MATCH_OR_A5         D
MATCH_OR_A6         E
MATCH_OR_A7         F
MATCH_OR_ABS_ADD_LONG  39
MATCH_OR_ABS_ADD_WORD  38
MATCH_OR_AN_INDIR   10
MATCH_OR_AN_INDIR_POSTINC  18
MATCH_OR_AN_INDIR_POSTINC_R0  18
MATCH_OR_AN_INDIR_POSTINC_R1  19
MATCH_OR_AN_INDIR_POSTINC_R2  1A
MATCH_OR_AN_INDIR_POSTINC_R3  1B
MATCH_OR_AN_INDIR_POSTINC_R4  1C
MATCH_OR_AN_INDIR_POSTINC_R5  1D
MATCH_OR_AN_INDIR_POSTINC_R6  1E
MATCH_OR_AN_INDIR_POSTINC_R7  1F
MATCH_OR_AN_INDIR_PREDEC  20
MATCH_OR_AN_INDIR_PREDEC_REG0  20
MATCH_OR_AN_INDIR_PREDEC_REG1  21
MATCH_OR_AN_INDIR_PREDEC_REG2  22
MATCH_OR_AN_INDIR_PREDEC_REG3  23
MATCH_OR_AN_INDIR_PREDEC_REG4  24
MATCH_OR_AN_INDIR_PREDEC_REG5  25
MATCH_OR_AN_INDIR_PREDEC_REG6  26
MATCH_OR_AN_INDIR_PREDEC_REG7  27
MATCH_OR_AN_INDIR_R0  10
MATCH_OR_AN_INDIR_R1  11
MATCH_OR_AN_INDIR_R2  12
MATCH_OR_AN_INDIR_R3  13
MATCH_OR_AN_INDIR_R4  14
MATCH_OR_AN_INDIR_R5  15
MATCH_OR_AN_INDIR_R6  16
MATCH_OR_AN_INDIR_R7  17
MATCH_OR_B_DN_EA    0
MATCH_OR_B_EA_DN    100
MATCH_OR_D0         0
MATCH_OR_D1         1
MATCH_OR_D2         2
MATCH_OR_D3         3
MATCH_OR_D4         4
MATCH_OR_D5         5
MATCH_OR_D6         6
MATCH_OR_D7         7
MATCH_OR_DN         0
MATCH_OR_IMM_ADD    3C
MATCH_OR_IMM_ADD_LONG  1FC
MATCH_OR_IMM_ADD_WORD  FC
MATCH_OR_L_DN_EA    80
MATCH_OR_L_EA_DN    180
MATCH_OR_REG0       0
MATCH_OR_REG1       200
MATCH_OR_REG2       400
MATCH_OR_REG3       600
MATCH_OR_REG4       800
MATCH_OR_REG5       A00
MATCH_OR_REG6       C00
MATCH_OR_REG7       E00
MATCH_OR_W_DN_EA    40
MATCH_OR_W_EA_DN    140
MATCH_ROD_ABS_ADD_LONG  3C
MATCH_ROD_ABS_ADD_WORD  39
MATCH_ROD_AN_INDIR  10
MATCH_ROD_AN_INDIR_POSTINC  20
MATCH_ROD_AN_INDIR_POSTINC_R0  20
MATCH_ROD_AN_INDIR_POSTINC_R1  21
MATCH_ROD_AN_INDIR_POSTINC_R2  22
MATCH_ROD_AN_INDIR_POSTINC_R3  23
MATCH_ROD_AN_INDIR_POSTINC_R4  24
MATCH_ROD_AN_INDIR_POSTINC_R5  25
MATCH_ROD_AN_INDIR_POSTINC_R6  26
MATCH_ROD_AN_INDIR_POSTINC_R7  27
MATCH_ROD_AN_INDIR_PREDEC  18
MATCH_ROD_AN_INDIR_PREDEC_R0  18
MATCH_ROD_AN_INDIR_PREDEC_R1  19
MATCH_ROD_AN_INDIR_PREDEC_R2  1A
MATCH_ROD_AN_INDIR_PREDEC_R3  1B
MATCH_ROD_AN_INDIR_PREDEC_R4  1C
MATCH_ROD_AN_INDIR_PREDEC_R5  1D
MATCH_ROD_AN_INDIR_PREDEC_R6  1E
MATCH_ROD_AN_INDIR_PREDEC_R7  1F
MATCH_ROD_AN_INDIR_R0  10
MATCH_ROD_AN_INDIR_R1  11
MATCH_ROD_AN_INDIR_R2  12
MATCH_ROD_AN_INDIR_R3  13
MATCH_ROD_AN_INDIR_R4  14
MATCH_ROD_AN_INDIR_R5  15
MATCH_ROD_AN_INDIR_R6  16
MATCH_ROD_AN_INDIR_R7  17
MATCH_ROD_COUNT_REG0  0
MATCH_ROD_COUNT_REG1  200
MATCH_ROD_COUNT_REG2  400
MATCH_ROD_COUNT_REG3  600
MATCH_ROD_COUNT_REG4  800
MATCH_ROD_COUNT_REG5  A00
MATCH_ROD_COUNT_REG6  C00
MATCH_ROD_COUNT_REG7  E00
MATCH_ROD_COUNT_VAL0  0
MATCH_ROD_COUNT_VAL1  200
MATCH_ROD_COUNT_VAL2  400
MATCH_ROD_COUNT_VAL3  600
MATCH_ROD_COUNT_VAL4  800
MATCH_ROD_COUNT_VAL5  A00
MATCH_ROD_COUNT_VAL6  C00
MATCH_ROD_COUNT_VAL7  E00
MATCH_ROD_D_REG0    0
MATCH_ROD_D_REG1    1
MATCH_ROD_D_REG2    2
MATCH_ROD_D_REG3    3
MATCH_ROD_D_REG4    4
MATCH_ROD_D_REG5    5
MATCH_ROD_D_REG6    6
MATCH_ROD_D_REG7    7
MATCH_ROD_MEM_SHIFT  C0
MATCH_ROD_SHIFT_COUNT  20
MATCH_ROD_SHIFT_REG  20
MATCH_ROL_M         E7C0
MATCH_ROL_R         E118
MATCH_ROR_M         E6C0
MATCH_ROR_R         E018
MATCH_RTS           4E75
MATCH_SUB           9000
MATCH_SUB_A0        8
MATCH_SUB_A1        9
MATCH_SUB_A2        A
MATCH_SUB_A3        B
MATCH_SUB_A4        C
MATCH_SUB_A5        D
MATCH_SUB_A6        E
MATCH_SUB_A7        F
MATCH_SUB_ABS_ADD_LONG  39
MATCH_SUB_ABS_ADD_WORD  38
MATCH_SUB_AN        8
MATCH_SUB_AN_INDIR  10
MATCH_SUB_AN_INDIR_POSTINC  18
MATCH_SUB_AN_INDIR_POSTINC_R0  18
MATCH_SUB_AN_INDIR_POSTINC_R1  19
MATCH_SUB_AN_INDIR_POSTINC_R2  1A
MATCH_SUB_AN_INDIR_POSTINC_R3  1B
MATCH_SUB_AN_INDIR_POSTINC_R4  1C
MATCH_SUB_AN_INDIR_POSTINC_R5  1D
MATCH_SUB_AN_INDIR_POSTINC_R6  1E
MATCH_SUB_AN_INDIR_POSTINC_R7  1F
MATCH_SUB_AN_INDIR_PREDEC  20
MATCH_SUB_AN_INDIR_PREDEC_REG0  20
MATCH_SUB_AN_INDIR_PREDEC_REG1  21
MATCH_SUB_AN_INDIR_PREDEC_REG2  22
MATCH_SUB_AN_INDIR_PREDEC_REG3  23
MATCH_SUB_AN_INDIR_PREDEC_REG4  24
MATCH_SUB_AN_INDIR_PREDEC_REG5  25
MATCH_SUB_AN_INDIR_PREDEC_REG6  26
MATCH_SUB_AN_INDIR_PREDEC_REG7  27
MATCH_SUB_AN_INDIR_R0  10
MATCH_SUB_AN_INDIR_R1  11
MATCH_SUB_AN_INDIR_R2  12
MATCH_SUB_AN_INDIR_R3  13
MATCH_SUB_AN_INDIR_R4  14
MATCH_SUB_AN_INDIR_R5  15
MATCH_SUB_AN_INDIR_R6  16
MATCH_SUB_AN_INDIR_R7  17
MATCH_SUB_B_DN_EA   0
MATCH_SUB_B_EA_DN   100
MATCH_SUB_D0        0
MATCH_SUB_D1        1
MATCH_SUB_D2        2
MATCH_SUB_D3        3
MATCH_SUB_D4        4
MATCH_SUB_D5        5
MATCH_SUB_D6        6
MATCH_SUB_D7        7
MATCH_SUB_DN        0
MATCH_SUB_IMM_ADD   3C
MATCH_SUB_IMM_ADD_LONG  1FC
MATCH_SUB_IMM_ADD_WORD  FC
MATCH_SUB_L_DN_EA   80
MATCH_SUB_L_EA_DN   180
MATCH_SUB_REG0      0
MATCH_SUB_REG1      200
MATCH_SUB_REG2      400
MATCH_SUB_REG3      600
MATCH_SUB_REG4      800
MATCH_SUB_REG5      A00
MATCH_SUB_REG6      C00
MATCH_SUB_REG7      E00
MATCH_SUB_W_DN_EA   40
MATCH_SUB_W_EA_DN   140
MA_END              14DA
MA_FAIL             14D4
MA_L                14B0
MA_W                148C
MOVEA_A0_OUT        6CEC
MOVEA_A1_OUT        6CF8
MOVEA_A2_OUT        6D04
MOVEA_A3_OUT        6D10
MOVEA_A4_OUT        6D1C
MOVEA_A5_OUT        6D28
MOVEA_A6_OUT        6D34
MOVEA_A7_OUT        6D40
MOVEA_ABS_ADD_LONG  6B8E
MOVEA_ABS_ADD_LONG_OUT  6FCA
MOVEA_ABS_ADD_WORD  6B78
MOVEA_ABS_ADD_WORD_OUT  6FBC
MOVEA_ADD_REG_DIR   6B40
MOVEA_ADD_REG_INDIR  6B4E
MOVEA_ADD_REG_INDIR_POSTINC  6B6A
MOVEA_ADD_REG_INDIR_PREDEC  6B5C
MOVEA_AN_INDIR_POSTINC_REG  6E1C
MOVEA_AN_INDIR_POSTINC_REG0_OUT  6E8C
MOVEA_AN_INDIR_POSTINC_REG1  6E2A
MOVEA_AN_INDIR_POSTINC_REG1_OUT  6E98
MOVEA_AN_INDIR_POSTINC_REG2  6E38
MOVEA_AN_INDIR_POSTINC_REG2_OUT  6EA4
MOVEA_AN_INDIR_POSTINC_REG3  6E46
MOVEA_AN_INDIR_POSTINC_REG3_OUT  6EB0
MOVEA_AN_INDIR_POSTINC_REG4  6E54
MOVEA_AN_INDIR_POSTINC_REG4_OUT  6EBC
MOVEA_AN_INDIR_POSTINC_REG5  6E62
MOVEA_AN_INDIR_POSTINC_REG5_OUT  6EC8
MOVEA_AN_INDIR_POSTINC_REG6  6E70
MOVEA_AN_INDIR_POSTINC_REG6_OUT  6ED4
MOVEA_AN_INDIR_POSTINC_REG7  6E7E
MOVEA_AN_INDIR_POSTINC_REG7_OUT  6EE0
MOVEA_AN_INDIR_PREDEC  6EEC
MOVEA_AN_INDIR_PREDEC_REG0_OUT  6F5C
MOVEA_AN_INDIR_PREDEC_REG1  6EFA
MOVEA_AN_INDIR_PREDEC_REG1_OUT  6F68
MOVEA_AN_INDIR_PREDEC_REG2  6F08
MOVEA_AN_INDIR_PREDEC_REG2_OUT  6F74
MOVEA_AN_INDIR_PREDEC_REG3  6F16
MOVEA_AN_INDIR_PREDEC_REG3_OUT  6F80
MOVEA_AN_INDIR_PREDEC_REG4  6F24
MOVEA_AN_INDIR_PREDEC_REG4_OUT  6F8C
MOVEA_AN_INDIR_PREDEC_REG5  6F32
MOVEA_AN_INDIR_PREDEC_REG5_OUT  6F98
MOVEA_AN_INDIR_PREDEC_REG6  6F40
MOVEA_AN_INDIR_PREDEC_REG6_OUT  6FA4
MOVEA_AN_INDIR_PREDEC_REG7  6F4E
MOVEA_AN_INDIR_PREDEC_REG7_OUT  6FB0
MOVEA_AN_INDIR_REG  6D4C
MOVEA_AN_INDIR_REG0_OUT  6DBC
MOVEA_AN_INDIR_REG1  6D5A
MOVEA_AN_INDIR_REG1_OUT  6DC8
MOVEA_AN_INDIR_REG2  6D68
MOVEA_AN_INDIR_REG2_OUT  6DD4
MOVEA_AN_INDIR_REG3  6D76
MOVEA_AN_INDIR_REG3_OUT  6DE0
MOVEA_AN_INDIR_REG4  6D84
MOVEA_AN_INDIR_REG4_OUT  6DEC
MOVEA_AN_INDIR_REG5  6D92
MOVEA_AN_INDIR_REG5_OUT  6DF8
MOVEA_AN_INDIR_REG6  6DA0
MOVEA_AN_INDIR_REG6_OUT  6E04
MOVEA_AN_INDIR_REG7  6DAE
MOVEA_AN_INDIR_REG7_OUT  6E10
MOVEA_AN_REG        6C7C
MOVEA_D0_OUT        6C1C
MOVEA_D1_OUT        6C28
MOVEA_D2_OUT        6C34
MOVEA_D3_OUT        6C40
MOVEA_D4_OUT        6C4C
MOVEA_D5_OUT        6C58
MOVEA_D6_OUT        6C64
MOVEA_D7_OUT        6C70
MOVEA_DATA_REG_DIR  6B32
MOVEA_DETERMINE_SECOND_OP  700A
MOVEA_DN_REG        6BA6
MOVEA_IMMEDIATE_ADD  6B98
MOVEA_IMMEDIATE_ADD_OUT  6FDA
MOVEA_IMM_ADD_L     6FFA
MOVEA_IMM_ADD_W     6FEC
MOVEA_RA1           6C8A
MOVEA_RA2           6C98
MOVEA_RA3           6CA6
MOVEA_RA4           6CB4
MOVEA_RA5           6CC2
MOVEA_RA6           6CD0
MOVEA_RA7           6CDE
MOVEA_RD1           6BBA
MOVEA_RD2           6BC8
MOVEA_RD3           6BD6
MOVEA_RD4           6BE4
MOVEA_RD5           6BF2
MOVEA_RD6           6C00
MOVEA_RD7           6C0E
MOVEA_REG0          7012
MOVEA_REG0_OUT      7082
MOVEA_REG1          7020
MOVEA_REG1_OUT      708E
MOVEA_REG2          702E
MOVEA_REG2_OUT      709A
MOVEA_REG3          703C
MOVEA_REG3_OUT      70A6
MOVEA_REG4          704A
MOVEA_REG4_OUT      70B2
MOVEA_REG5          7058
MOVEA_REG5_OUT      70BE
MOVEA_REG6          7066
MOVEA_REG6_OUT      70CA
MOVEA_REG7          7074
MOVEA_REG7_OUT      70D6
MOVEA_SIZE          1482
MOVEA_SUB           6B28
MOVEM_A0_REG_LIST_OUT  552E
MOVEM_A1_REG_LIST_OUT  5538
MOVEM_A2_REG_LIST_OUT  5542
MOVEM_A3_REG_LIST_OUT  554C
MOVEM_A4_REG_LIST_OUT  5556
MOVEM_A5_REG_LIST_OUT  5560
MOVEM_A6_REG_LIST_OUT  556A
MOVEM_A7_REG_LIST_OUT  5574
MOVEM_ABS_ADD_LONG  55BA
MOVEM_ABS_ADD_LONG_OUT  577C
MOVEM_ABS_ADD_WORD  55A4
MOVEM_ABS_ADD_WORD_OUT  576E
MOVEM_ADD_REG_INDIR  5588
MOVEM_ADD_REG_INDIR_PREDEC  5596
MOVEM_AN_INDIR_PDEC_R0_OUT  570E
MOVEM_AN_INDIR_PDEC_R1  56AC
MOVEM_AN_INDIR_PDEC_R1_OUT  571A
MOVEM_AN_INDIR_PDEC_R2  56BA
MOVEM_AN_INDIR_PDEC_R2_OUT  5726
MOVEM_AN_INDIR_PDEC_R3  56C8
MOVEM_AN_INDIR_PDEC_R3_OUT  5732
MOVEM_AN_INDIR_PDEC_R4  56D6
MOVEM_AN_INDIR_PDEC_R4_OUT  573E
MOVEM_AN_INDIR_PDEC_R5  56E4
MOVEM_AN_INDIR_PDEC_R5_OUT  574A
MOVEM_AN_INDIR_PDEC_R6  56F2
MOVEM_AN_INDIR_PDEC_R6_OUT  5756
MOVEM_AN_INDIR_PDEC_R7  5700
MOVEM_AN_INDIR_PDEC_R7_OUT  5762
MOVEM_AN_INDIR_PREDEC  569E
MOVEM_AN_INDIR_R0_OUT  563E
MOVEM_AN_INDIR_R1   55DC
MOVEM_AN_INDIR_R1_OUT  564A
MOVEM_AN_INDIR_R2   55EA
MOVEM_AN_INDIR_R2_OUT  5656
MOVEM_AN_INDIR_R3   55F8
MOVEM_AN_INDIR_R3_OUT  5662
MOVEM_AN_INDIR_R4   5606
MOVEM_AN_INDIR_R4_OUT  566E
MOVEM_AN_INDIR_R5   5614
MOVEM_AN_INDIR_R5_OUT  567A
MOVEM_AN_INDIR_R6   5622
MOVEM_AN_INDIR_R6_OUT  5686
MOVEM_AN_INDIR_R7   5630
MOVEM_AN_INDIR_R7_OUT  5692
MOVEM_AN_INDIR_REG  55CE
MOVEM_D0_REG_LIST_OUT  54DE
MOVEM_D1_REG_LIST_OUT  54E8
MOVEM_D2_REG_LIST_OUT  54F2
MOVEM_D3_REG_LIST_OUT  54FC
MOVEM_D4_REG_LIST_OUT  5506
MOVEM_D5_REG_LIST_OUT  5510
MOVEM_D6_REG_LIST_OUT  551A
MOVEM_D7_REG_LIST_OUT  5524
MOVEM_DETERMINE_SECOND_OP  578C
MOVEM_DETERMINE_SECOND_OPERAND  5580
MOVEM_ERROR         5C5A
MOVEM_M2R           5A3A
MOVEM_M2R_A0        5AF8
MOVEM_M2R_A0_REG_LIST_OUT  5C08
MOVEM_M2R_A1        5B10
MOVEM_M2R_A1_REG_LIST_OUT  5C12
MOVEM_M2R_A2        5B28
MOVEM_M2R_A2_REG_LIST_OUT  5C1C
MOVEM_M2R_A3        5B40
MOVEM_M2R_A3_REG_LIST_OUT  5C26
MOVEM_M2R_A4        5B58
MOVEM_M2R_A4_REG_LIST_OUT  5C30
MOVEM_M2R_A5        5B70
MOVEM_M2R_A5_REG_LIST_OUT  5C3A
MOVEM_M2R_A6        5B88
MOVEM_M2R_A6_REG_LIST_OUT  5C44
MOVEM_M2R_A7        5BA0
MOVEM_M2R_A7_REG_LIST_OUT  5C4E
MOVEM_M2R_ABS_ADD_LONG  57C6
MOVEM_M2R_ABS_ADD_LONG_OUT  5A28
MOVEM_M2R_ABS_ADD_WORD  57B0
MOVEM_M2R_ABS_ADD_WORD_OUT  5A1A
MOVEM_M2R_AN_INDIR  5794
MOVEM_M2R_AN_INDIR_PDEC_R0_OUT  59CA
MOVEM_M2R_AN_INDIR_PDEC_R1  5968
MOVEM_M2R_AN_INDIR_PDEC_R1_OUT  59D4
MOVEM_M2R_AN_INDIR_PDEC_R2  5976
MOVEM_M2R_AN_INDIR_PDEC_R2_OUT  59DE
MOVEM_M2R_AN_INDIR_PDEC_R3  5984
MOVEM_M2R_AN_INDIR_PDEC_R3_OUT  59E8
MOVEM_M2R_AN_INDIR_PDEC_R4  5992
MOVEM_M2R_AN_INDIR_PDEC_R4_OUT  59F2
MOVEM_M2R_AN_INDIR_PDEC_R5  59A0
MOVEM_M2R_AN_INDIR_PDEC_R5_OUT  59FC
MOVEM_M2R_AN_INDIR_PDEC_R6  59AE
MOVEM_M2R_AN_INDIR_PDEC_R6_OUT  5A06
MOVEM_M2R_AN_INDIR_PDEC_R7  59BC
MOVEM_M2R_AN_INDIR_PDEC_R7_OUT  5A10
MOVEM_M2R_AN_INDIR_PINC_R0_OUT  590A
MOVEM_M2R_AN_INDIR_PINC_R1  58A8
MOVEM_M2R_AN_INDIR_PINC_R1_OUT  5914
MOVEM_M2R_AN_INDIR_PINC_R2  58B6
MOVEM_M2R_AN_INDIR_PINC_R2_OUT  591E
MOVEM_M2R_AN_INDIR_PINC_R3  58C4
MOVEM_M2R_AN_INDIR_PINC_R3_OUT  5928
MOVEM_M2R_AN_INDIR_PINC_R4  58D2
MOVEM_M2R_AN_INDIR_PINC_R4_OUT  5932
MOVEM_M2R_AN_INDIR_PINC_R5  58E0
MOVEM_M2R_AN_INDIR_PINC_R5_OUT  593C
MOVEM_M2R_AN_INDIR_PINC_R6  58EE
MOVEM_M2R_AN_INDIR_PINC_R6_OUT  5946
MOVEM_M2R_AN_INDIR_PINC_R7  58FC
MOVEM_M2R_AN_INDIR_PINC_R7_OUT  5950
MOVEM_M2R_AN_INDIR_PINC_REG  589A
MOVEM_M2R_AN_INDIR_POSTINC  57A2
MOVEM_M2R_AN_INDIR_R0_OUT  584A
MOVEM_M2R_AN_INDIR_R1  57E8
MOVEM_M2R_AN_INDIR_R1_OUT  5854
MOVEM_M2R_AN_INDIR_R2  57F6
MOVEM_M2R_AN_INDIR_R2_OUT  585E
MOVEM_M2R_AN_INDIR_R3  5804
MOVEM_M2R_AN_INDIR_R3_OUT  5868
MOVEM_M2R_AN_INDIR_R4  5812
MOVEM_M2R_AN_INDIR_R4_OUT  5872
MOVEM_M2R_AN_INDIR_R5  5820
MOVEM_M2R_AN_INDIR_R5_OUT  587C
MOVEM_M2R_AN_INDIR_R6  582E
MOVEM_M2R_AN_INDIR_R6_OUT  5886
MOVEM_M2R_AN_INDIR_R7  583C
MOVEM_M2R_AN_INDIR_R7_OUT  5890
MOVEM_M2R_AN_INDIR_REG  57DA
MOVEM_M2R_D0_REG_LIST_OUT  5BB8
MOVEM_M2R_D1        5A50
MOVEM_M2R_D1_REG_LIST_OUT  5BC2
MOVEM_M2R_D2        5A68
MOVEM_M2R_D2_REG_LIST_OUT  5BCC
MOVEM_M2R_D3        5A80
MOVEM_M2R_D3_REG_LIST_OUT  5BD6
MOVEM_M2R_D4        5A98
MOVEM_M2R_D4_REG_LIST_OUT  5BE0
MOVEM_M2R_D5        5AB0
MOVEM_M2R_D5_REG_LIST_OUT  5BEA
MOVEM_M2R_D6        5AC8
MOVEM_M2R_D6_REG_LIST_OUT  5BF4
MOVEM_M2R_D7        5AE0
MOVEM_M2R_D7_REG_LIST_OUT  5BFE
MOVEM_MEM_REG_MATCH  5350
MOVEM_MR_END        161E
MOVEM_MR_FAIL       1618
MOVEM_MR_L          15F4
MOVEM_MR_SIZE       15C6
MOVEM_REG_MEM       535E
MOVEM_REG_MEM_A0    541E
MOVEM_REG_MEM_A1    5436
MOVEM_REG_MEM_A2    544E
MOVEM_REG_MEM_A3    5466
MOVEM_REG_MEM_A4    547E
MOVEM_REG_MEM_A5    5496
MOVEM_REG_MEM_A6    54AE
MOVEM_REG_MEM_A7    54C6
MOVEM_REG_MEM_D1    5376
MOVEM_REG_MEM_D2    538E
MOVEM_REG_MEM_D3    53A6
MOVEM_REG_MEM_D4    53BE
MOVEM_REG_MEM_D5    53D6
MOVEM_REG_MEM_D6    53EE
MOVEM_REG_MEM_D7    5406
MOVEM_RM_END        15C0
MOVEM_RM_FAIL       15BA
MOVEM_RM_L          1596
MOVEM_RM_SIZE       1568
MOVEM_SECOND_OPERAND  5A38
MOVEM_SUB           5338
MOVEQ_D0_OUTPUT     7170
MOVEQ_D1_OUTPUT     717C
MOVEQ_D2_OUTPUT     7188
MOVEQ_D3_OUTPUT     7194
MOVEQ_D4_OUTPUT     71A0
MOVEQ_D5_OUTPUT     71AC
MOVEQ_D6_OUTPUT     71B8
MOVEQ_D7_OUTPUT     71C4
MOVEQ_DN_REG        7100
MOVEQ_END           206C
MOVEQ_FAIL          2066
MOVEQ_FIRST_OPERAND  70E4
MOVEQ_RD1           710E
MOVEQ_RD2           711C
MOVEQ_RD3           712A
MOVEQ_RD4           7138
MOVEQ_RD5           7146
MOVEQ_RD6           7154
MOVEQ_RD7           7162
MOVEQ_SECOND_OPERAND  70FA
MOVEQ_SIZE          2038
MOVEQ_SUB           70E0
MOVE_ABS_ADD_LONG   4ADA
MOVE_ABS_ADD_LONG_OUT  4E3C
MOVE_ABS_ADD_WORD   4AC4
MOVE_ABS_ADD_WORD_OUT  4E2E
MOVE_ADD_REG_INDIR  4A9A
MOVE_ADD_REG_INDIR_POSTINC  4AB6
MOVE_ADD_REG_INDIR_PREDEC  4AA8
MOVE_AN_INDIR_POSTINC_REG  4C8E
MOVE_AN_INDIR_POSTINC_REG0_OUT  4CFE
MOVE_AN_INDIR_POSTINC_REG1  4C9C
MOVE_AN_INDIR_POSTINC_REG1_OUT  4D0A
MOVE_AN_INDIR_POSTINC_REG2  4CAA
MOVE_AN_INDIR_POSTINC_REG2_OUT  4D16
MOVE_AN_INDIR_POSTINC_REG3  4CB8
MOVE_AN_INDIR_POSTINC_REG3_OUT  4D22
MOVE_AN_INDIR_POSTINC_REG4  4CC6
MOVE_AN_INDIR_POSTINC_REG4_OUT  4D2E
MOVE_AN_INDIR_POSTINC_REG5  4CD4
MOVE_AN_INDIR_POSTINC_REG5_OUT  4D3A
MOVE_AN_INDIR_POSTINC_REG6  4CE2
MOVE_AN_INDIR_POSTINC_REG6_OUT  4D46
MOVE_AN_INDIR_POSTINC_REG7  4CF0
MOVE_AN_INDIR_POSTINC_REG7_OUT  4D52
MOVE_AN_INDIR_PREDEC  4D5E
MOVE_AN_INDIR_PREDEC_REG0_OUT  4DCE
MOVE_AN_INDIR_PREDEC_REG1  4D6C
MOVE_AN_INDIR_PREDEC_REG1_OUT  4DDA
MOVE_AN_INDIR_PREDEC_REG2  4D7A
MOVE_AN_INDIR_PREDEC_REG2_OUT  4DE6
MOVE_AN_INDIR_PREDEC_REG3  4D88
MOVE_AN_INDIR_PREDEC_REG3_OUT  4DF2
MOVE_AN_INDIR_PREDEC_REG4  4D96
MOVE_AN_INDIR_PREDEC_REG4_OUT  4DFE
MOVE_AN_INDIR_PREDEC_REG5  4DA4
MOVE_AN_INDIR_PREDEC_REG5_OUT  4E0A
MOVE_AN_INDIR_PREDEC_REG6  4DB2
MOVE_AN_INDIR_PREDEC_REG6_OUT  4E16
MOVE_AN_INDIR_PREDEC_REG7  4DC0
MOVE_AN_INDIR_PREDEC_REG7_OUT  4E22
MOVE_AN_INDIR_REG   4BBE
MOVE_AN_INDIR_REG0_OUT  4C2E
MOVE_AN_INDIR_REG1  4BCC
MOVE_AN_INDIR_REG1_OUT  4C3A
MOVE_AN_INDIR_REG2  4BDA
MOVE_AN_INDIR_REG2_OUT  4C46
MOVE_AN_INDIR_REG3  4BE8
MOVE_AN_INDIR_REG3_OUT  4C52
MOVE_AN_INDIR_REG4  4BF6
MOVE_AN_INDIR_REG4_OUT  4C5E
MOVE_AN_INDIR_REG5  4C04
MOVE_AN_INDIR_REG5_OUT  4C6A
MOVE_AN_INDIR_REG6  4C12
MOVE_AN_INDIR_REG6_OUT  4C76
MOVE_AN_INDIR_REG7  4C20
MOVE_AN_INDIR_REG7_OUT  4C82
MOVE_D0_OUT         4B5E
MOVE_D1_OUT         4B6A
MOVE_D2_OUT         4B76
MOVE_D3_OUT         4B82
MOVE_D4_OUT         4B8E
MOVE_D5_OUT         4B9A
MOVE_D6_OUT         4BA6
MOVE_D7_OUT         4BB2
MOVE_DATA_REG_DIR   4A8C
MOVE_DECODE         2142
MOVE_DEST_A0_OUT    500E
MOVE_DEST_A1_OUT    501A
MOVE_DEST_A2_OUT    5026
MOVE_DEST_A3_OUT    5032
MOVE_DEST_A4_OUT    503E
MOVE_DEST_A5_OUT    504A
MOVE_DEST_A6_OUT    5056
MOVE_DEST_A7_OUT    5062
MOVE_DEST_ABS_ADD_LONG  4EB0
MOVE_DEST_ABS_ADD_LONG_OUT  52EC
MOVE_DEST_ABS_ADD_WORD  4E9A
MOVE_DEST_ABS_ADD_WORD_OUT  52DE
MOVE_DEST_ADD_REG_DIR  4E62
MOVE_DEST_ADD_REG_INDIR  4E70
MOVE_DEST_ADD_REG_INDIR_POSTINC  4E8C
MOVE_DEST_ADD_REG_INDIR_PREDEC  4E7E
MOVE_DEST_AN_INDIR_PDEC_R0_OUT  527E
MOVE_DEST_AN_INDIR_PDEC_R1  521C
MOVE_DEST_AN_INDIR_PDEC_R1_OUT  528A
MOVE_DEST_AN_INDIR_PDEC_R2  522A
MOVE_DEST_AN_INDIR_PDEC_R2_OUT  5296
MOVE_DEST_AN_INDIR_PDEC_R3  5238
MOVE_DEST_AN_INDIR_PDEC_R3_OUT  52A2
MOVE_DEST_AN_INDIR_PDEC_R4  5246
MOVE_DEST_AN_INDIR_PDEC_R4_OUT  52AE
MOVE_DEST_AN_INDIR_PDEC_R5  5254
MOVE_DEST_AN_INDIR_PDEC_R5_OUT  52BA
MOVE_DEST_AN_INDIR_PDEC_R6  5262
MOVE_DEST_AN_INDIR_PDEC_R6_OUT  52C6
MOVE_DEST_AN_INDIR_PDEC_R7  5270
MOVE_DEST_AN_INDIR_PDEC_R7_OUT  52D2
MOVE_DEST_AN_INDIR_PINC_R  513E
MOVE_DEST_AN_INDIR_PINC_R0_OUT  51AE
MOVE_DEST_AN_INDIR_PINC_R1  514C
MOVE_DEST_AN_INDIR_PINC_R1_OUT  51BA
MOVE_DEST_AN_INDIR_PINC_R2  515A
MOVE_DEST_AN_INDIR_PINC_R2_OUT  51C6
MOVE_DEST_AN_INDIR_PINC_R3  5168
MOVE_DEST_AN_INDIR_PINC_R3_OUT  51D2
MOVE_DEST_AN_INDIR_PINC_R4  5176
MOVE_DEST_AN_INDIR_PINC_R4_OUT  51DE
MOVE_DEST_AN_INDIR_PINC_R5  5184
MOVE_DEST_AN_INDIR_PINC_R5_OUT  51EA
MOVE_DEST_AN_INDIR_PINC_R6  5192
MOVE_DEST_AN_INDIR_PINC_R6_OUT  51F6
MOVE_DEST_AN_INDIR_PINC_R7  51A0
MOVE_DEST_AN_INDIR_PINC_R7_OUT  5202
MOVE_DEST_AN_INDIR_PREDEC  520E
MOVE_DEST_AN_INDIR_REG  506E
MOVE_DEST_AN_INDIR_REG0_OUT  50DE
MOVE_DEST_AN_INDIR_REG1  507C
MOVE_DEST_AN_INDIR_REG1_OUT  50EA
MOVE_DEST_AN_INDIR_REG2  508A
MOVE_DEST_AN_INDIR_REG2_OUT  50F6
MOVE_DEST_AN_INDIR_REG3  5098
MOVE_DEST_AN_INDIR_REG3_OUT  5102
MOVE_DEST_AN_INDIR_REG4  50A6
MOVE_DEST_AN_INDIR_REG4_OUT  510E
MOVE_DEST_AN_INDIR_REG5  50B4
MOVE_DEST_AN_INDIR_REG5_OUT  511A
MOVE_DEST_AN_INDIR_REG6  50C2
MOVE_DEST_AN_INDIR_REG6_OUT  5126
MOVE_DEST_AN_INDIR_REG7  50D0
MOVE_DEST_AN_INDIR_REG7_OUT  5132
MOVE_DEST_AN_REG    4F9E
MOVE_DEST_D0_OUT    4F3E
MOVE_DEST_D1_OUT    4F4A
MOVE_DEST_D2_OUT    4F56
MOVE_DEST_D3_OUT    4F62
MOVE_DEST_D4_OUT    4F6E
MOVE_DEST_D5_OUT    4F7A
MOVE_DEST_D6_OUT    4F86
MOVE_DEST_D7_OUT    4F92
MOVE_DEST_DATA_REG_DIR  4E54
MOVE_DEST_DN_REG    4ECE
MOVE_DEST_IMMEDIATE_ADD  4EBA
MOVE_DEST_IMMEDIATE_ADD_OUT  52FC
MOVE_DEST_IMM_ADD_L  531C
MOVE_DEST_IMM_ADD_W  530E
MOVE_DEST_RA1       4FAC
MOVE_DEST_RA2       4FBA
MOVE_DEST_RA3       4FC8
MOVE_DEST_RA4       4FD6
MOVE_DEST_RA5       4FE4
MOVE_DEST_RA6       4FF2
MOVE_DEST_RA7       5000
MOVE_DEST_RD1       4EDC
MOVE_DEST_RD2       4EEA
MOVE_DEST_RD3       4EF8
MOVE_DEST_RD4       4F06
MOVE_DEST_RD5       4F14
MOVE_DEST_RD6       4F22
MOVE_DEST_RD7       4F30
MOVE_DETERMINE_SECOND_OP  4E4C
MOVE_DN_REG         4AEE
MOVE_ERROR          532C
MOVE_M2R_AN_INDIR_PREDEC  595A
MOVE_MOVE           4A82
MOVE_RD1            4AFC
MOVE_RD2            4B0A
MOVE_RD3            4B18
MOVE_RD4            4B26
MOVE_RD5            4B34
MOVE_RD6            4B42
MOVE_RD7            4B50
MOVE_SIZE           14E0
M_END               1562
M_FAIL              155C
M_L                 1536
M_SIZE_B_ADD        0
M_SIZE_B_LOGIC      0
M_SIZE_B_MOVES      1000
M_SIZE_B_NOT        0
M_SIZE_B_SHFTS      0
M_SIZE_B_SUB        0
M_SIZE_L_ADD        80
M_SIZE_L_ADDA       100
M_SIZE_L_BCC        FF
M_SIZE_L_LOGIC      80
M_SIZE_L_MOVEM      40
M_SIZE_L_MOVEQ      7000
M_SIZE_L_MOVES      2000
M_SIZE_L_NOT        80
M_SIZE_L_SHFTS      80
M_SIZE_L_SUB        80
M_SIZE_W_ADD        40
M_SIZE_W_ADDA       0
M_SIZE_W_BCC        0
M_SIZE_W_LOGIC      40
M_SIZE_W_MOVEM      0
M_SIZE_W_MOVES      3000
M_SIZE_W_NOT        40
M_SIZE_W_SHFTS      40
M_SIZE_W_SUB        40
M_W                 1510
NOP_SIZE            1624
NOT_ABS_ADD_LONG    7228
NOT_ABS_ADD_LONG_OUT  758A
NOT_ABS_ADD_WORD    7212
NOT_ABS_ADD_WORD_OUT  757C
NOT_AN_INDIR        71E8
NOT_AN_INDIR_PDEC_R0_OUT  751C
NOT_AN_INDIR_PDEC_R1  74BA
NOT_AN_INDIR_PDEC_R1_OUT  7528
NOT_AN_INDIR_PDEC_R2  74C8
NOT_AN_INDIR_PDEC_R2_OUT  7534
NOT_AN_INDIR_PDEC_R3  74D6
NOT_AN_INDIR_PDEC_R3_OUT  7540
NOT_AN_INDIR_PDEC_R4  74E4
NOT_AN_INDIR_PDEC_R4_OUT  754C
NOT_AN_INDIR_PDEC_R5  74F2
NOT_AN_INDIR_PDEC_R5_OUT  7558
NOT_AN_INDIR_PDEC_R6  7500
NOT_AN_INDIR_PDEC_R6_OUT  7564
NOT_AN_INDIR_PDEC_R7  750E
NOT_AN_INDIR_PDEC_R7_OUT  7570
NOT_AN_INDIR_PINC_R0_OUT  744C
NOT_AN_INDIR_PINC_R1  73EC
NOT_AN_INDIR_PINC_R1_OUT  7458
NOT_AN_INDIR_PINC_R2  73FA
NOT_AN_INDIR_PINC_R2_OUT  7464
NOT_AN_INDIR_PINC_R3  7408
NOT_AN_INDIR_PINC_R3_OUT  7470
NOT_AN_INDIR_PINC_R4  7416
NOT_AN_INDIR_PINC_R4_OUT  747C
NOT_AN_INDIR_PINC_R5  7424
NOT_AN_INDIR_PINC_R5_OUT  7488
NOT_AN_INDIR_PINC_R6  7432
NOT_AN_INDIR_PINC_R6_OUT  7494
NOT_AN_INDIR_PINC_R7  743E
NOT_AN_INDIR_PINC_R7_OUT  74A0
NOT_AN_INDIR_POSTINC  71F6
NOT_AN_INDIR_POSTINC_REG  73DE
NOT_AN_INDIR_PREDEC  7204
NOT_AN_INDIR_PREDEC_REG  74AC
NOT_AN_INDIR_REG    730E
NOT_AN_INDIR_REG0_OUT  737E
NOT_AN_INDIR_REG1   731C
NOT_AN_INDIR_REG1_OUT  738A
NOT_AN_INDIR_REG2   732A
NOT_AN_INDIR_REG2_OUT  7396
NOT_AN_INDIR_REG3   7338
NOT_AN_INDIR_REG3_OUT  73A2
NOT_AN_INDIR_REG4   7346
NOT_AN_INDIR_REG4_OUT  73AE
NOT_AN_INDIR_REG5   7354
NOT_AN_INDIR_REG5_OUT  73BA
NOT_AN_INDIR_REG6   7362
NOT_AN_INDIR_REG6_OUT  73C6
NOT_AN_INDIR_REG7   7370
NOT_AN_INDIR_REG7_OUT  73D2
NOT_D0_OUTPUT       72AE
NOT_D1_OUTPUT       72BA
NOT_D2_OUTPUT       72C6
NOT_D3_OUTPUT       72D2
NOT_D4_OUTPUT       72DE
NOT_D5_OUTPUT       72EA
NOT_D6_OUTPUT       72F6
NOT_D7_OUTPUT       7302
NOT_DATA_REG_DIR    71DA
NOT_DN_REG          7236
NOT_END             1714
NOT_FAIL            170E
NOT_HEX             FFFFFFFF
NOT_HEX_MSG         87EE
NOT_L               16EA
NOT_RD1             724C
NOT_RD2             725A
NOT_RD3             7268
NOT_RD4             7276
NOT_RD5             7284
NOT_RD6             7292
NOT_RD7             72A0
NOT_SIZE            1698
NOT_SUB             71D0
NOT_W               16C6
NO_SIZE             0
OPCODE_ADDAL        853C
OPCODE_ADDAW        8535
OPCODE_ADDB         8523
OPCODE_ADDL         852F
OPCODE_ADDQB        8543
OPCODE_ADDQL        8551
OPCODE_ADDQW        854A
OPCODE_ADDW         8529
OPCODE_ANDB         856E
OPCODE_ANDL         857A
OPCODE_ANDW         8574
OPCODE_ASLB         85C5
OPCODE_ASLL         85D1
OPCODE_ASLW         85CB
OPCODE_ASRB         85D7
OPCODE_ASRL         85E3
OPCODE_ASRW         85DD
OPCODE_BEQ          862D
OPCODE_BEQB         8631
OPCODE_BEQW         8637
OPCODE_BGT          860D
OPCODE_BGTB         8611
OPCODE_BGTW         8617
OPCODE_BLE          861D
OPCODE_BLEB         8621
OPCODE_BLEW         8627
OPCODE_BRA          8645
OPCODE_BRAB         8649
OPCODE_BRAW         864F
OPCODE_DATA         8665
OPCODE_JSR          863D
OPCODE_LEA          856A
OPCODE_LSLB         85A1
OPCODE_LSLL         85AD
OPCODE_LSLW         85A7
OPCODE_LSRB         85B3
OPCODE_LSRL         85BF
OPCODE_LSRW         85B9
OPCODE_MOVEAB       8507
OPCODE_MOVEAL       8517
OPCODE_MOVEAW       850F
OPCODE_MOVEB        84E6
OPCODE_MOVEL        84F4
OPCODE_MOVEM        84FB
OPCODE_MOVEML       865D
OPCODE_MOVEMW       8655
OPCODE_MOVEQ        8501
OPCODE_MOVEW        84ED
OPCODE_NOP          851F
OPCODE_NOTB         858F
OPCODE_NOTL         859B
OPCODE_NOTW         8595
OPCODE_ORB          8580
OPCODE_ORL          858A
OPCODE_ORW          8585
OPCODE_ROLB         85E9
OPCODE_ROLL         85F5
OPCODE_ROLW         85EF
OPCODE_RORB         85FB
OPCODE_RORL         8607
OPCODE_RORW         8601
OPCODE_RTS          8641
OPCODE_SUBB         8558
OPCODE_SUBL         8564
OPCODE_SUBROUTINE   2072
OPCODE_SUBW         855E
OPWD_DONE           147C
OPWD_LOOP           1468
OP_ADD              2212
OP_ADDA             220A
OP_ADDQ             231E
OP_AND              233A
OP_ASL_M            22E2
OP_ASL_R            2306
OP_ASR_M            22E8
OP_ASR_R            230C
OP_BEQ              224E
OP_BGT              2248
OP_BLE              2254
OP_BRA              225A
OP_DATA             2364
OP_JSR              21E2
OP_LEA              21D0
OP_LSL_M            22D6
OP_LSL_R            22FA
OP_LSR_M            22DC
OP_LSR_R            2300
OP_MOVE             2164
OP_MOVEA            215E
OP_MOVEM_MR         21DC
OP_MOVEM_RM         21D6
OP_MOVEQ            2356
OP_NOP              21C4
OP_NOT              21E8
OP_OR               2348
OP_ROL_M            22EE
OP_ROL_R            2312
OP_ROR_M            22F4
OP_ROR_R            2318
OP_RTS              21CA
OP_SUB              232C
OR_DETERMINE_SECOND_OP  7AB2
OR_DETERMINE_SECOND_OPERAND  7C62
OR_DN_EA            7B8A
OR_DN_EA_ABS_ADD_LONG  7CAA
OR_DN_EA_ABS_ADD_LONG_OUT  7F3C
OR_DN_EA_ABS_ADD_WORD  7C94
OR_DN_EA_ABS_ADD_WORD_OUT  7F2E
OR_DN_EA_ADD_REG_INDIR  7C6A
OR_DN_EA_ADD_REG_INDIR_PDEC  7C78
OR_DN_EA_ADD_REG_INDIR_PINC  7C86
OR_DN_EA_AN_INDIR_PDEC_R0_OUT  7ECE
OR_DN_EA_AN_INDIR_PDEC_R1  7E6C
OR_DN_EA_AN_INDIR_PDEC_R1_OUT  7EDA
OR_DN_EA_AN_INDIR_PDEC_R2  7E7A
OR_DN_EA_AN_INDIR_PDEC_R2_OUT  7EE6
OR_DN_EA_AN_INDIR_PDEC_R3  7E88
OR_DN_EA_AN_INDIR_PDEC_R3_OUT  7EF2
OR_DN_EA_AN_INDIR_PDEC_R4  7E96
OR_DN_EA_AN_INDIR_PDEC_R4_OUT  7EFE
OR_DN_EA_AN_INDIR_PDEC_R5  7EA4
OR_DN_EA_AN_INDIR_PDEC_R5_OUT  7F0A
OR_DN_EA_AN_INDIR_PDEC_R6  7EB2
OR_DN_EA_AN_INDIR_PDEC_R6_OUT  7F16
OR_DN_EA_AN_INDIR_PDEC_R7  7EC0
OR_DN_EA_AN_INDIR_PDEC_R7_OUT  7F22
OR_DN_EA_AN_INDIR_PINC_R0_OUT  7DFE
OR_DN_EA_AN_INDIR_PINC_R1  7D9C
OR_DN_EA_AN_INDIR_PINC_R1_OUT  7E0A
OR_DN_EA_AN_INDIR_PINC_R2  7DAA
OR_DN_EA_AN_INDIR_PINC_R2_OUT  7E16
OR_DN_EA_AN_INDIR_PINC_R3  7DB8
OR_DN_EA_AN_INDIR_PINC_R3_OUT  7E22
OR_DN_EA_AN_INDIR_PINC_R4  7DC6
OR_DN_EA_AN_INDIR_PINC_R4_OUT  7E2E
OR_DN_EA_AN_INDIR_PINC_R5  7DD4
OR_DN_EA_AN_INDIR_PINC_R5_OUT  7E3A
OR_DN_EA_AN_INDIR_PINC_R6  7DE2
OR_DN_EA_AN_INDIR_PINC_R6_OUT  7E46
OR_DN_EA_AN_INDIR_PINC_R7  7DF0
OR_DN_EA_AN_INDIR_PINC_R7_OUT  7E52
OR_DN_EA_AN_INDIR_POSTINC_REG  7D8E
OR_DN_EA_AN_INDIR_PREDEC  7E5E
OR_DN_EA_AN_INDIR_REG  7CB8
OR_DN_EA_AN_INDIR_REG0_OUT  7D2E
OR_DN_EA_AN_INDIR_REG1  7CCC
OR_DN_EA_AN_INDIR_REG1_OUT  7D3A
OR_DN_EA_AN_INDIR_REG2  7CDA
OR_DN_EA_AN_INDIR_REG2_OUT  7D46
OR_DN_EA_AN_INDIR_REG3  7CE8
OR_DN_EA_AN_INDIR_REG3_OUT  7D52
OR_DN_EA_AN_INDIR_REG4  7CF6
OR_DN_EA_AN_INDIR_REG4_OUT  7D5E
OR_DN_EA_AN_INDIR_REG5  7D04
OR_DN_EA_AN_INDIR_REG5_OUT  7D6A
OR_DN_EA_AN_INDIR_REG6  7D12
OR_DN_EA_AN_INDIR_REG6_OUT  7D76
OR_DN_EA_AN_INDIR_REG7  7D20
OR_DN_EA_AN_INDIR_REG7_OUT  7D82
OR_DN_EA_MATCH      75A4
OR_DN_EA_MATCH_L    75C0
OR_DN_EA_MATCH_W    75B2
OR_EA_DN            75F8
OR_EA_DN_A0_OUT     7794
OR_EA_DN_A1_OUT     77A0
OR_EA_DN_A2_OUT     77AC
OR_EA_DN_A3_OUT     77B8
OR_EA_DN_A4_OUT     77C4
OR_EA_DN_A5_OUT     77D0
OR_EA_DN_A6_OUT     77DC
OR_EA_DN_A7_OUT     77E8
OR_EA_DN_ABS_ADD_LONG  7640
OR_EA_DN_ABS_ADD_LONG_OUT  7A72
OR_EA_DN_ABS_ADD_WORD  762A
OR_EA_DN_ABS_ADD_WORD_OUT  7A64
OR_EA_DN_ADD_REG_INDIR  7600
OR_EA_DN_ADD_REG_INDIR_POSTINC  761C
OR_EA_DN_ADD_REG_INDIR_PREDEC  760E
OR_EA_DN_AN_INDIR_PDEC_R0_OUT  7A04
OR_EA_DN_AN_INDIR_PDEC_R1  79A2
OR_EA_DN_AN_INDIR_PDEC_R1_OUT  7A10
OR_EA_DN_AN_INDIR_PDEC_R2  79B0
OR_EA_DN_AN_INDIR_PDEC_R2_OUT  7A1C
OR_EA_DN_AN_INDIR_PDEC_R3  79BE
OR_EA_DN_AN_INDIR_PDEC_R3_OUT  7A28
OR_EA_DN_AN_INDIR_PDEC_R4  79CC
OR_EA_DN_AN_INDIR_PDEC_R4_OUT  7A34
OR_EA_DN_AN_INDIR_PDEC_R5  79DA
OR_EA_DN_AN_INDIR_PDEC_R5_OUT  7A40
OR_EA_DN_AN_INDIR_PDEC_R6  79E8
OR_EA_DN_AN_INDIR_PDEC_R6_OUT  7A4C
OR_EA_DN_AN_INDIR_PDEC_R7  79F6
OR_EA_DN_AN_INDIR_PDEC_R7_OUT  7A58
OR_EA_DN_AN_INDIR_PINC_R0_OUT  7934
OR_EA_DN_AN_INDIR_PINC_R1  78D2
OR_EA_DN_AN_INDIR_PINC_R1_OUT  7940
OR_EA_DN_AN_INDIR_PINC_R2  78E0
OR_EA_DN_AN_INDIR_PINC_R2_OUT  794C
OR_EA_DN_AN_INDIR_PINC_R3  78EE
OR_EA_DN_AN_INDIR_PINC_R3_OUT  7958
OR_EA_DN_AN_INDIR_PINC_R4  78FC
OR_EA_DN_AN_INDIR_PINC_R4_OUT  7964
OR_EA_DN_AN_INDIR_PINC_R5  790A
OR_EA_DN_AN_INDIR_PINC_R5_OUT  7970
OR_EA_DN_AN_INDIR_PINC_R6  7918
OR_EA_DN_AN_INDIR_PINC_R6_OUT  797C
OR_EA_DN_AN_INDIR_PINC_R7  7926
OR_EA_DN_AN_INDIR_PINC_R7_OUT  7988
OR_EA_DN_AN_INDIR_POSTINC_REG  78C4
OR_EA_DN_AN_INDIR_PREDEC  7994
OR_EA_DN_AN_INDIR_REG  77F4
OR_EA_DN_AN_INDIR_REG0_OUT  7864
OR_EA_DN_AN_INDIR_REG1  7802
OR_EA_DN_AN_INDIR_REG1_OUT  7870
OR_EA_DN_AN_INDIR_REG2  7810
OR_EA_DN_AN_INDIR_REG2_OUT  787C
OR_EA_DN_AN_INDIR_REG3  781E
OR_EA_DN_AN_INDIR_REG3_OUT  7888
OR_EA_DN_AN_INDIR_REG4  782C
OR_EA_DN_AN_INDIR_REG4_OUT  7894
OR_EA_DN_AN_INDIR_REG5  783A
OR_EA_DN_AN_INDIR_REG5_OUT  78A0
OR_EA_DN_AN_INDIR_REG6  7848
OR_EA_DN_AN_INDIR_REG6_OUT  78AC
OR_EA_DN_AN_INDIR_REG7  7856
OR_EA_DN_AN_INDIR_REG7_OUT  78B8
OR_EA_DN_AN_REG     7724
OR_EA_DN_D0_OUT     76C4
OR_EA_DN_D1_OUT     76D0
OR_EA_DN_D2_OUT     76DC
OR_EA_DN_D3_OUT     76E8
OR_EA_DN_D4_OUT     76F4
OR_EA_DN_D5_OUT     7700
OR_EA_DN_D6_OUT     770C
OR_EA_DN_D7_OUT     7718
OR_EA_DN_DN_REG     764E
OR_EA_DN_IMMEDIATE_ADD_OUT  7A82
OR_EA_DN_IMM_ADD_L  7AA2
OR_EA_DN_IMM_ADD_W  7A94
OR_EA_DN_MATCH      75CE
OR_EA_DN_MATCH_L    75EA
OR_EA_DN_MATCH_W    75DC
OR_EA_DN_RA1        7732
OR_EA_DN_RA2        7740
OR_EA_DN_RA3        774E
OR_EA_DN_RA4        775C
OR_EA_DN_RA5        776A
OR_EA_DN_RA6        7778
OR_EA_DN_RA7        7786
OR_EA_DN_RD1        7662
OR_EA_DN_RD2        7670
OR_EA_DN_RD3        767E
OR_EA_DN_RD4        768C
OR_EA_DN_RD5        769A
OR_EA_DN_RD6        76A8
OR_EA_DN_RD7        76B6
OR_END              2032
OR_FAIL             202C
OR_L                2008
OR_SIZE             1FB6
OR_SUB              759A
OR_W                1FE4
PRESS_ENTER         88F2
PRINT_BCC           1392
PRINT_DATA          1340
PRINT_DISPLACEDADDRESS  13DC
PRINT_EA            143E
PRINT_EAT           142E
PRINT_HEX           1278
PRINT_LINE_NUMBER   1404
PRINT_OPCODE_WORD   145A
PRINT_STRING        1268
PRINT_STRING_OP_NL  12C0
PRINT_STRING_OP_NN  128C
PRINT_STRING_SIZED  12F4
QT                  71
RANGE_CHECK1        10C8
RANGE_CHECK2        116C
RESTART_Q           890F
ROD_ABS_ADD_LONG    7FAC
ROD_ABS_ADD_LONG_OUT  8240
ROD_ABS_ADD_WORD    7F96
ROD_ABS_ADD_WORD_OUT  8232
ROD_AN_INDIR        7F6C
ROD_AN_INDIR_PDEC_R0_OUT  81D2
ROD_AN_INDIR_PDEC_R1  8170
ROD_AN_INDIR_PDEC_R1_OUT  81DE
ROD_AN_INDIR_PDEC_R2  817E
ROD_AN_INDIR_PDEC_R2_OUT  81EA
ROD_AN_INDIR_PDEC_R3  818C
ROD_AN_INDIR_PDEC_R3_OUT  81F6
ROD_AN_INDIR_PDEC_R4  819A
ROD_AN_INDIR_PDEC_R4_OUT  8202
ROD_AN_INDIR_PDEC_R5  81A8
ROD_AN_INDIR_PDEC_R5_OUT  820E
ROD_AN_INDIR_PDEC_R6  81B6
ROD_AN_INDIR_PDEC_R6_OUT  821A
ROD_AN_INDIR_PDEC_R7  81C4
ROD_AN_INDIR_PDEC_R7_OUT  8226
ROD_AN_INDIR_PINC_R0_OUT  8102
ROD_AN_INDIR_PINC_R1  80A0
ROD_AN_INDIR_PINC_R1_OUT  810E
ROD_AN_INDIR_PINC_R2  80AE
ROD_AN_INDIR_PINC_R2_OUT  811A
ROD_AN_INDIR_PINC_R3  80BC
ROD_AN_INDIR_PINC_R3_OUT  8126
ROD_AN_INDIR_PINC_R4  80CA
ROD_AN_INDIR_PINC_R4_OUT  8132
ROD_AN_INDIR_PINC_R5  80D8
ROD_AN_INDIR_PINC_R5_OUT  813E
ROD_AN_INDIR_PINC_R6  80E6
ROD_AN_INDIR_PINC_R6_OUT  814A
ROD_AN_INDIR_PINC_R7  80F4
ROD_AN_INDIR_PINC_R7_OUT  8156
ROD_AN_INDIR_POSTINC  7F7A
ROD_AN_INDIR_POSTINC_REG  8092
ROD_AN_INDIR_PREDEC  7F88
ROD_AN_INDIR_PREDEC_REG  8162
ROD_AN_INDIR_REG    7FBA
ROD_AN_INDIR_REG0_OUT  8032
ROD_AN_INDIR_REG1   7FD0
ROD_AN_INDIR_REG1_OUT  803E
ROD_AN_INDIR_REG2   7FDE
ROD_AN_INDIR_REG2_OUT  804A
ROD_AN_INDIR_REG3   7FEC
ROD_AN_INDIR_REG3_OUT  8056
ROD_AN_INDIR_REG4   7FFA
ROD_AN_INDIR_REG4_OUT  8062
ROD_AN_INDIR_REG5   8008
ROD_AN_INDIR_REG5_OUT  806E
ROD_AN_INDIR_REG6   8016
ROD_AN_INDIR_REG6_OUT  807A
ROD_AN_INDIR_REG7   8024
ROD_AN_INDIR_REG7_OUT  8086
ROD_COUNT_REG0      826E
ROD_COUNT_REG0_OUT  83AE
ROD_COUNT_REG1      827C
ROD_COUNT_REG1_OUT  83BA
ROD_COUNT_REG2      828A
ROD_COUNT_REG2_OUT  83C6
ROD_COUNT_REG3      8298
ROD_COUNT_REG3_OUT  83D2
ROD_COUNT_REG4      82A6
ROD_COUNT_REG4_OUT  83DE
ROD_COUNT_REG5      82B4
ROD_COUNT_REG5_OUT  83EA
ROD_COUNT_REG6      82C2
ROD_COUNT_REG6_OUT  83F6
ROD_COUNT_REG7      82D0
ROD_COUNT_REG7_OUT  8402
ROD_COUNT_VAL       82DE
ROD_COUNT_VAL0_OUT  834E
ROD_COUNT_VAL1      82EC
ROD_COUNT_VAL1_OUT  835A
ROD_COUNT_VAL2      82FA
ROD_COUNT_VAL2_OUT  8366
ROD_COUNT_VAL3      8308
ROD_COUNT_VAL3_OUT  8372
ROD_COUNT_VAL4      8316
ROD_COUNT_VAL4_OUT  837E
ROD_COUNT_VAL5      8324
ROD_COUNT_VAL5_OUT  838A
ROD_COUNT_VAL6      8332
ROD_COUNT_VAL6_OUT  8396
ROD_COUNT_VAL7      8340
ROD_COUNT_VAL7_OUT  83A2
ROD_D0_OUT          8486
ROD_D1_OUT          8492
ROD_D2_OUT          849E
ROD_D3_OUT          84AA
ROD_D4_OUT          84B6
ROD_D5_OUT          84C2
ROD_D6_OUT          84CE
ROD_D7_OUT          84DA
ROD_DN0             840E
ROD_DN1             8424
ROD_DN2             8432
ROD_DN3             8440
ROD_DN4             844E
ROD_DN5             845C
ROD_DN6             846A
ROD_DN7             8478
ROD_MEM_SHIFT       7F64
ROD_REG_SHIFT       8250
ROD_SHIFT_REG       8266
ROD_SHIFT_TYPE      7F50
ROD_SUB             7F4C
ROLM_END            1D80
ROLR_END            1D58
ROLR_FAIL           1D52
ROLR_L              1D2E
ROLR_W              1D0A
ROL_M_SIZE          1D5E
ROL_R_SIZE          1CDC
RORM_END            1E2A
RORR_END            1E02
RORR_FAIL           1DFC
RORR_L              1DD8
RORR_W              1DB4
ROR_M_SIZE          1E08
ROR_R_SIZE          1D86
RT                  72
RTS_SIZE            163C
RUN_AGAIN           1256
RUN_PROG            1006
SHIFT_TYPE          41AC
SKIP1               208E
SKIP2               20A6
SKIP3               20B8
SKIP4               20CA
SKIP5               20DC
SKIP6               20EE
SKIP7               2100
SKIP8               2112
SKIP9               2124
SPACE               88EF
START_ADR           7000
START_REQUEST       873A
STOP                8A53
SUB_DETERMINE_SECOND_OP  60C8
SUB_DETERMINE_SECOND_OPERAND  6278
SUB_DN_EA           61A0
SUB_DN_EA_ABS_ADD_LONG  62C0
SUB_DN_EA_ABS_ADD_LONG_OUT  6552
SUB_DN_EA_ABS_ADD_WORD  62AA
SUB_DN_EA_ABS_ADD_WORD_OUT  6544
SUB_DN_EA_ADD_REG_INDIR  6280
SUB_DN_EA_ADD_REG_INDIR_POSTINC  629C
SUB_DN_EA_ADD_REG_INDIR_PREDEC  628E
SUB_DN_EA_AN_INDIR_PDEC_R0_OUT  64E4
SUB_DN_EA_AN_INDIR_PDEC_R1  6482
SUB_DN_EA_AN_INDIR_PDEC_R1_OUT  64F0
SUB_DN_EA_AN_INDIR_PDEC_R2  6490
SUB_DN_EA_AN_INDIR_PDEC_R2_OUT  64FC
SUB_DN_EA_AN_INDIR_PDEC_R3  649E
SUB_DN_EA_AN_INDIR_PDEC_R3_OUT  6508
SUB_DN_EA_AN_INDIR_PDEC_R4  64AC
SUB_DN_EA_AN_INDIR_PDEC_R4_OUT  6514
SUB_DN_EA_AN_INDIR_PDEC_R5  64BA
SUB_DN_EA_AN_INDIR_PDEC_R5_OUT  6520
SUB_DN_EA_AN_INDIR_PDEC_R6  64C8
SUB_DN_EA_AN_INDIR_PDEC_R6_OUT  652C
SUB_DN_EA_AN_INDIR_PDEC_R7  64D6
SUB_DN_EA_AN_INDIR_PDEC_R7_OUT  6538
SUB_DN_EA_AN_INDIR_PINC_R0_OUT  6414
SUB_DN_EA_AN_INDIR_PINC_R1  63B2
SUB_DN_EA_AN_INDIR_PINC_R1_OUT  6420
SUB_DN_EA_AN_INDIR_PINC_R2  63C0
SUB_DN_EA_AN_INDIR_PINC_R2_OUT  642C
SUB_DN_EA_AN_INDIR_PINC_R3  63CE
SUB_DN_EA_AN_INDIR_PINC_R3_OUT  6438
SUB_DN_EA_AN_INDIR_PINC_R4  63DC
SUB_DN_EA_AN_INDIR_PINC_R4_OUT  6444
SUB_DN_EA_AN_INDIR_PINC_R5  63EA
SUB_DN_EA_AN_INDIR_PINC_R5_OUT  6450
SUB_DN_EA_AN_INDIR_PINC_R6  63F8
SUB_DN_EA_AN_INDIR_PINC_R6_OUT  645C
SUB_DN_EA_AN_INDIR_PINC_R7  6406
SUB_DN_EA_AN_INDIR_PINC_R7_OUT  6468
SUB_DN_EA_AN_INDIR_POSTINC_REG  63A4
SUB_DN_EA_AN_INDIR_PREDEC  6474
SUB_DN_EA_AN_INDIR_REG  62D4
SUB_DN_EA_AN_INDIR_REG0_OUT  6344
SUB_DN_EA_AN_INDIR_REG1  62E2
SUB_DN_EA_AN_INDIR_REG1_OUT  6350
SUB_DN_EA_AN_INDIR_REG2  62F0
SUB_DN_EA_AN_INDIR_REG2_OUT  635C
SUB_DN_EA_AN_INDIR_REG3  62FE
SUB_DN_EA_AN_INDIR_REG3_OUT  6368
SUB_DN_EA_AN_INDIR_REG4  630C
SUB_DN_EA_AN_INDIR_REG4_OUT  6374
SUB_DN_EA_AN_INDIR_REG5  631A
SUB_DN_EA_AN_INDIR_REG5_OUT  6380
SUB_DN_EA_AN_INDIR_REG6  6328
SUB_DN_EA_AN_INDIR_REG6_OUT  638C
SUB_DN_EA_AN_INDIR_REG7  6336
SUB_DN_EA_AN_INDIR_REG7_OUT  6398
SUB_DN_EA_IMMEDIATE_ADD_OUT  6562
SUB_DN_EA_IMM_ADD_L  6582
SUB_DN_EA_IMM_ADD_W  6574
SUB_DN_EA_MATCH     5C98
SUB_DN_EA_MATCH_L   5CB4
SUB_DN_EA_MATCH_W   5CA6
SUB_EA_DN           5CC2
SUB_EA_DN_ABS_ADD_LONG  5D18
SUB_EA_DN_ABS_ADD_LONG_OUT  6088
SUB_EA_DN_ABS_ADD_WORD  5D02
SUB_EA_DN_ABS_ADD_WORD_OUT  607A
SUB_EA_DN_ADD_REG_INDIR  5CD8
SUB_EA_DN_ADD_REG_INDIR_POSTINC  5CF4
SUB_EA_DN_ADD_REG_INDIR_PREDEC  5CE6
SUB_EA_DN_AN_INDIR_PDEC_R0_OUT  601A
SUB_EA_DN_AN_INDIR_PDEC_R1  5FB8
SUB_EA_DN_AN_INDIR_PDEC_R1_OUT  6026
SUB_EA_DN_AN_INDIR_PDEC_R2  5FC6
SUB_EA_DN_AN_INDIR_PDEC_R2_OUT  6032
SUB_EA_DN_AN_INDIR_PDEC_R3  5FD4
SUB_EA_DN_AN_INDIR_PDEC_R3_OUT  603E
SUB_EA_DN_AN_INDIR_PDEC_R4  5FE2
SUB_EA_DN_AN_INDIR_PDEC_R4_OUT  604A
SUB_EA_DN_AN_INDIR_PDEC_R5  5FF0
SUB_EA_DN_AN_INDIR_PDEC_R5_OUT  6056
SUB_EA_DN_AN_INDIR_PDEC_R6  5FFE
SUB_EA_DN_AN_INDIR_PDEC_R6_OUT  6062
SUB_EA_DN_AN_INDIR_PDEC_R7  600C
SUB_EA_DN_AN_INDIR_PDEC_R7_OUT  606E
SUB_EA_DN_AN_INDIR_PINC_R0_OUT  5F4A
SUB_EA_DN_AN_INDIR_PINC_R1  5EE8
SUB_EA_DN_AN_INDIR_PINC_R1_OUT  5F56
SUB_EA_DN_AN_INDIR_PINC_R2  5EF6
SUB_EA_DN_AN_INDIR_PINC_R2_OUT  5F62
SUB_EA_DN_AN_INDIR_PINC_R3  5F04
SUB_EA_DN_AN_INDIR_PINC_R3_OUT  5F6E
SUB_EA_DN_AN_INDIR_PINC_R4  5F12
SUB_EA_DN_AN_INDIR_PINC_R4_OUT  5F7A
SUB_EA_DN_AN_INDIR_PINC_R5  5F20
SUB_EA_DN_AN_INDIR_PINC_R5_OUT  5F86
SUB_EA_DN_AN_INDIR_PINC_R6  5F2E
SUB_EA_DN_AN_INDIR_PINC_R6_OUT  5F92
SUB_EA_DN_AN_INDIR_PINC_R7  5F3C
SUB_EA_DN_AN_INDIR_PINC_R7_OUT  5F9E
SUB_EA_DN_AN_INDIR_POSTINC_REG  5EDA
SUB_EA_DN_AN_INDIR_PREDEC  5FAA
SUB_EA_DN_AN_INDIR_REG  5E0A
SUB_EA_DN_AN_INDIR_REG0_OUT  5E7A
SUB_EA_DN_AN_INDIR_REG1  5E18
SUB_EA_DN_AN_INDIR_REG1_OUT  5E86
SUB_EA_DN_AN_INDIR_REG2  5E26
SUB_EA_DN_AN_INDIR_REG2_OUT  5E92
SUB_EA_DN_AN_INDIR_REG3  5E34
SUB_EA_DN_AN_INDIR_REG3_OUT  5E9E
SUB_EA_DN_AN_INDIR_REG4  5E42
SUB_EA_DN_AN_INDIR_REG4_OUT  5EAA
SUB_EA_DN_AN_INDIR_REG5  5E50
SUB_EA_DN_AN_INDIR_REG5_OUT  5EB6
SUB_EA_DN_AN_INDIR_REG6  5E5E
SUB_EA_DN_AN_INDIR_REG6_OUT  5EC2
SUB_EA_DN_AN_INDIR_REG7  5E6C
SUB_EA_DN_AN_INDIR_REG7_OUT  5ECE
SUB_EA_DN_D0_OUT    5DAA
SUB_EA_DN_D1_OUT    5DB6
SUB_EA_DN_D2_OUT    5DC2
SUB_EA_DN_D3_OUT    5DCE
SUB_EA_DN_D4_OUT    5DDA
SUB_EA_DN_D5_OUT    5DE6
SUB_EA_DN_D6_OUT    5DF2
SUB_EA_DN_D7_OUT    5DFE
SUB_EA_DN_DATA_REG_DIR  5CCA
SUB_EA_DN_DN_REG    5D3A
SUB_EA_DN_IMMEDIATE_ADD  5D26
SUB_EA_DN_IMMEDIATE_ADD_OUT  6098
SUB_EA_DN_IMM_ADD_L  60B8
SUB_EA_DN_IMM_ADD_W  60AA
SUB_EA_DN_MATCH     5C70
SUB_EA_DN_MATCH_L   5C8C
SUB_EA_DN_MATCH_W   5C7E
SUB_EA_DN_RD1       5D48
SUB_EA_DN_RD2       5D56
SUB_EA_DN_RD3       5D64
SUB_EA_DN_RD4       5D72
SUB_EA_DN_RD5       5D80
SUB_EA_DN_RD6       5D8E
SUB_EA_DN_RD7       5D9C
SUB_END             1F2E
SUB_FAIL            1F28
SUB_L               1F04
SUB_SIZE            1EB2
SUB_SUB             5C66
SUB_W               1EE0
TAB                 890D
TEST_ENDS           11B6
TOHEX               1016
WORD_SIZE           2
WRONG_RANGE1        10E0
WRONG_RANGE2        1184
