00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/10/2020 10:38:55 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main File
00000000                             3  *-----------------------------------------------------------
00001000                             4              ORG $1000
00001000                             5  MAIN:
00001000  2E7C 00100000              6              MOVEA.L #$00100000,SP
00001006                             7      
00001006  4EB9 00001052              8  run_prog    JSR     io_subroutine
0000100C  4EB9 00001182              9              JSR     main_loop
00001012                            10  
00001012  FFFF FFFF                 11              SIMHALT             ; halt simulator   
00001016                            12          
00001016                            13              INCLUDE 'toHex.x68'
00001016                            14  toHex:
00001016  48E7 DDFE                 15              MOVEM.L     A0-A6/D0-D1/D3-D5/D7,-(SP)
0000101A  0C06 0030                 16              CMPI.B      #$30,D6
0000101E  6D10                      17              BLT.B       ERR
00001020  BC3C 0039                 18              CMP.B       #$39,D6
00001024  6E16                      19              BGT.B       letter
00001026  0406 0030                 20              SUBI.B      #$30,D6
0000102A  4CDF 7FBB                 21              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
0000102E  4E75                      22              RTS
00001030                            23        
00001030  243C FFFFFFFF             24  ERR         MOVE.L      #not_hex,D2
00001036  4CDF 7FBB                 25              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
0000103A  4E75                      26              RTS
0000103C                            27          
0000103C  0C06 0041                 28  letter      CMPI.B      #$41,D6
00001040  6DEE                      29              BLT.B       ERR
00001042  0C06 0046                 30              CMPI.B      #$46,D6
00001046  6EE8                      31              BGT.B       ERR
00001048  0406 0037                 32              SUBI.B      #$37,D6
0000104C  4CDF 7FBB                 33              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
00001050  4E75                      34              RTS
00001052                            35  
00001052                            36  
00001052                            37  
00001052                            38  
00001052                            39  
00001052                            40  
00001052                            41  -------------------- end include --------------------
00001052                            42              INCLUDE 'io_subroutine.x68'
00001052                            43  
00001052                            44  io_subroutine:
00001052  48E7 CFFE                 45              MOVEM.L      D0-D1/D4-D7/A0-A6,-(SP)
00001056                            46              *display the intro message to the user
00001056  43F9 000080E4             47              LEA         LOAD_MESSAGE, A1
0000105C  103C 000D                 48              MOVE.B      #13, D0
00001060  4E4F                      49              TRAP        #15
00001062                            50              *display the intro message to the user
00001062  43F9 0000815C             51              LEA         LOAD2_MESSAGE, A1
00001068  103C 000D                 52              MOVE.B      #13, D0
0000106C  4E4F                      53              TRAP        #15
0000106E                            54  
0000106E  43F9 000081C1             55  INPUT1      LEA         START_REQUEST, A1
00001074  103C 000E                 56              MOVE.B      #14, D0
00001078  4E4F                      57              TRAP        #15
0000107A                            58  
0000107A                            59              *------Code for input-----
0000107A  183C 0000                 60              MOVE.B      #0,D4           *counter 
0000107E  1A3C 0008                 61              MOVE.B      #8,D5
00001082  BA04                      62  input_loop  CMP.B       D4,D5           *loop 8 time for a long info
00001084  6700 0016                 63              BEQ         ipt_done
00001088                            64              *inside loop code
00001088  103C 0005                 65              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
0000108C  4E4F                      66              TRAP        #15
0000108E  1C01                      67              MOVE.B      D1,D6
00001090  4EB8 1016                 68              JSR         toHex           *convert the value to hex
00001094  E98F                      69              LSL.L       #4,D7           *Move the hex value one byte left
00001096  DE86                      70              ADD.L       D6,D7           *append the character to the input
00001098                            71              *loop code done
00001098  5204                      72  cont        ADDQ.B      #1,D4           *increment the counter
0000109A  60E6                      73              BRA         input_loop
0000109C                            74              
0000109C                            75              
0000109C                            76  ipt_done    *provide a new line
0000109C  43F9 0000837A             77              LEA         SPACE, A1
000010A2  103C 000E                 78              MOVE.B      #14, D0
000010A6  4E4F                      79              TRAP        #15
000010A8                            80              *test if there was a non hex value inputted
000010A8  B4BC FFFFFFFF             81              CMP.L       #not_hex,D2
000010AE  6600 0016                 82              BNE         input1pass
000010B2                            83              *else, display message
000010B2  43F9 0000826B             84              LEA         NOT_HEX_MSG, A1
000010B8  103C 000D                 85              MOVE.B      #13, D0
000010BC  4E4F                      86              TRAP        #15
000010BE  243C 00000000             87              MOVE.L      #hex_clear,D2
000010C4  60A8                      88              BRA         INPUT1
000010C6                            89              
000010C6  2607                      90  input1pass  MOVE.L      D7,D3   *move the hex value to D3
000010C8                            91       
000010C8                            92  boundary1:
000010C8                            93              *test if input is on the word boundary
000010C8  2803                      94              MOVE.L      D3,D4
000010CA  88FC 0002                 95              DIVU        #2,D4
000010CE  4244                      96              CLR.W       D4
000010D0  4844                      97              SWAP        D4
000010D2                            98              
000010D2  B8BC 00000000             99              CMP.L       #hex_clear,D4
000010D8  6700 0010                100              BEQ         INPUT2
000010DC                           101              *else, not on boundary
000010DC  43F9 00008330            102              LEA         BAD_BOUND, A1
000010E2  103C 000D                103              MOVE.B      #13, D0
000010E6  4E4F                     104              TRAP        #15   
000010E8                           105              *go back to start
000010E8  6084                     106              BRA         INPUT1  
000010EA                           107              
000010EA  43F9 00008215            108  INPUT2      LEA         END_REQUEST, A1
000010F0  103C 000E                109              MOVE.B      #14, D0
000010F4  4E4F                     110              TRAP        #15
000010F6                           111  
000010F6                           112              *------Code for input-----
000010F6  183C 0000                113              MOVE.B      #0,D4           *counter 
000010FA  1A3C 0008                114              MOVE.B      #8,D5
000010FE  BA04                     115  input_loop2 CMP.B       D4,D5           *loop 8 time for a long info
00001100  6700 0016                116              BEQ         ipt_done2
00001104                           117              *inside loop code
00001104  103C 0005                118              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
00001108  4E4F                     119              TRAP        #15
0000110A  1C01                     120              MOVE.B      D1,D6
0000110C  4EB8 1016                121              JSR         toHex           *convert the value to hex
00001110  E98F                     122              LSL.L       #4,D7           *Move the hex value one byte left
00001112  DE86                     123              ADD.L       D6,D7           *append the character to the input
00001114                           124              *loop code done
00001114  5204                     125  cont2       ADDQ.B      #1,D4           *increment the counter
00001116  60E6                     126              BRA         input_loop2
00001118                           127              
00001118                           128              
00001118                           129  ipt_done2   *provide a new line
00001118  43F9 0000837A            130              LEA         SPACE, A1
0000111E  103C 000E                131              MOVE.B      #14, D0
00001122  4E4F                     132              TRAP        #15
00001124                           133              *test if there was a non hex value inputted
00001124  B4BC FFFFFFFF            134              CMP.L       #not_hex,D2
0000112A  6600 0016                135              BNE         input2pass
0000112E                           136              *else, display message
0000112E  43F9 0000826B            137              LEA         NOT_HEX_MSG, A1
00001134  103C 000D                138              MOVE.B      #13, D0
00001138  4E4F                     139              TRAP        #15
0000113A  243C 00000000            140              MOVE.L      #hex_clear,D2
00001140  60A8                     141              BRA         INPUT2
00001142                           142              
00001142  2407                     143  input2pass  MOVE.L      D7,D2   *move the hex value to D2
00001144                           144                          
00001144                           145  boundary2:
00001144                           146              *test if input is on the word boundary
00001144  2802                     147              MOVE.L      D2,D4
00001146  88FC 0002                148              DIVU        #2,D4
0000114A  4244                     149              CLR.W       D4
0000114C  4844                     150              SWAP        D4
0000114E                           151              
0000114E  B8BC 00000000            152              CMP.L       #hex_clear,D4
00001154  6700 0010                153              BEQ         test_ends
00001158                           154              *else, not on boundary
00001158  43F9 00008330            155              LEA         BAD_BOUND, A1
0000115E  103C 000D                156              MOVE.B      #13, D0
00001162  4E4F                     157              TRAP        #15   
00001164                           158              *go back to start
00001164  6084                     159              BRA         INPUT2  
00001166                           160  
00001166                           161  test_ends:  
00001166                           162              *test if the starting address is less than the ending address
00001166  B483                     163              CMP.L       D3,D2
00001168  6F00 0008                164              BLE         end_bad
0000116C  4CDF 7FF3                165              MOVEM.L      (SP)+,D0-D1/D4-D7/A0-A6
00001170  4E75                     166              RTS
00001172                           167  
00001172                           168  end_bad:    
00001172                           169              *not in correct range
00001172  43F9 000082D2            170              LEA         BAD_END, A1
00001178  103C 000D                171              MOVE.B      #13, D0
0000117C  4E4F                     172              TRAP        #15   
0000117E                           173              *go back to start
0000117E  6000 FEEE                174              BRA         INPUT1  
00001182                           175  
00001182                           176      
00001182                           177  
00001182                           178  
00001182                           179  
00001182                           180  
00001182                           181  -------------------- end include --------------------
00001182                           182              INCLUDE 'main_loop.x68'
00001182                           183  main_loop:
00001182  183C 0000                184              MOVE.B      #0,D4           *counter 
00001186  1A3C 001E                185              MOVE.B      #30,D5
0000118A                           186  
0000118A  2043                     187              MOVE.L      D3,A0   *move the starting address to A0
0000118C  5482                     188              ADDQ.L      #2,D2   *add 1 word to ending address so it gets covered
0000118E  2442                     189              MOVE.L      D2,A2   *move the ending address to A2
00001190  B5C8                     190  loopM       CMP.L       A0,A2
00001192  6700 004A                191              BEQ         loopM_done
00001196                           192              *inside loop code
00001196  88FC 001D                193              DIVU        #29,D4      *test if full page has been reached
0000119A  4244                     194              CLR.W       D4
0000119C  4844                     195              SWAP        D4
0000119E  B8BC 00000000            196              CMP.L       #hex_clear,D4
000011A4  6600 002A                197              BNE         loopM_Cont
000011A8                           198              *pause till enter inputted
000011A8                           199              *display the prompt message to the user
000011A8  43F9 0000837D            200  entr_lp     LEA         PRESS_ENTER, A1
000011AE  103C 000E                201              MOVE.B      #14, D0
000011B2  4E4F                     202              TRAP        #15
000011B4                           203              *look for enter key
000011B4  103C 0005                204              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
000011B8  4E4F                     205              TRAP        #15
000011BA  B2BC 0000000D            206              CMP.L       #CR,D1          
000011C0  6700 000E                207              BEQ         loopM_Cont      *continue if enter pressed
000011C4  B2BC 0000000A            208              CMP.L       #LF,D1
000011CA  6700 0004                209              BEQ         loopM_Cont
000011CE  60D8                     210              BRA         entr_lp
000011D0                           211              *resume
000011D0  3010                     212  loopM_Cont  MOVE.W      (A0),D0 *move the opcode into D0 for testing
000011D2  4EB9 00002080            213              JSR         opcode_subroutine
000011D8                           214              *loop code end
000011D8  5448                     215              ADDQ        #2,A0   *move the pointer one word
000011DA  5244                     216              ADDQ        #1,D4   *add one to the output counter
000011DC  60B2                     217              BRA         loopM   
000011DE                           218                
000011DE                           219              *ask if the user wants to test again  
000011DE  43F9 0000839A            220  loopM_done  LEA         RESTART_Q, A1
000011E4  103C 000D                221              MOVE.B      #13, D0
000011E8  4E4F                     222              TRAP        #15
000011EA                           223              *look for q or r key
000011EA  103C 0005                224              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
000011EE  4E4F                     225              TRAP        #15
000011F0  B2BC 00000072            226              CMP.L       #RT,D1          
000011F6  6700 000E                227              BEQ         run_again       *r pressed, restart
000011FA  B2BC 00000071            228              CMP.L       #QT,D1
00001200  6700 0014                229              BEQ         exit_loop       *q pressed, exit
00001204  60D8                     230              BRA         loopM_done      *neither, ask again
00001206                           231             
00001206                           232  run_again   *print new line
00001206  43F9 0000837A            233              LEA         SPACE,A1
0000120C  103C 000E                234              MOVE.B      #14,D0              *move number 14 into d0 for string
00001210  4E4F                     235              TRAP        #15                 *print the data
00001212  4EB8 1006                236              JSR         run_prog   *go back for input
00001216                           237              
00001216  4E75                     238  exit_loop   RTS
00001218                           239  
00001218                           240  
00001218                           241  
00001218                           242  
00001218                           243  -------------------- end include --------------------
00001218                           244              INCLUDE 'output.x68'
00001218                           245  print_string:
00001218  48E7 FFFE                246      MOVEM.L     D0-D7/A0-A6, -(SP)
0000121C  103C 000E                247      MOVE.B      #14,D0              *move number 14 into d0 for string plus
00001220  4E4F                     248      TRAP        #15
00001222  4CDF 7FFF                249      MOVEM.L     (SP)+, D0-D7/A0-A6
00001226  4E75                     250      RTS
00001228                           251      
00001228                           252  print_hex:
00001228  48E7 FFFE                253      MOVEM.L     D0-D7/A0-A6, -(SP)
0000122C  103C 000F                254      MOVE.B      #15,D0
00001230  143C 0010                255      MOVE.B      #16,D2          *display in base 16 (hex)
00001234  4E4F                     256      TRAP        #15
00001236  4CDF 7FFF                257      MOVEM.L     (SP)+, D0-D7/A0-A6
0000123A  4E75                     258      RTS
0000123C                           259  
0000123C                           260  print_string_op_nn:
0000123C  48E7 FFFE                261      MOVEM.L     D0-D7/A0-A6, -(SP)
00001240  3600                     262      MOVE.W      D0,D3           *move full opcode to D2 temporarily
00001242  2449                     263      MOVEA.L     A1,A2           *move string into A2 temp
00001244                           264      *print the line number
00001244  4EB9 000013B4            265      JSR         print_line_number
0000124A                           266      *print a tab
0000124A  43F9 00008398            267      LEA         TAB,A1
00001250  103C 000E                268      MOVE.B      #14,D0              *move number 14 into d0 for string
00001254  4E4F                     269      TRAP        #15                 *print the data
00001256                           270      *print data
00001256  224A                     271      MOVE.L      A2,A1
00001258  103C 000E                272      MOVE.B      #14,D0              *move number 14 into d0 for string
0000125C  4E4F                     273      TRAP        #15                 *print the data
0000125E                           274      *print a tab
0000125E  43F9 00008398            275      LEA         TAB,A1
00001264  103C 000E                276      MOVE.B      #14,D0              *move number 14 into d0 for string
00001268  4E4F                     277      TRAP        #15                 *print the data
0000126A                           278      
0000126A  4CDF 7FFF                279      MOVEM.L     (SP)+, D0-D7/A0-A6
0000126E  4E75                     280      RTS
00001270                           281  
00001270                           282  
00001270                           283  print_string_op_nl:
00001270  48E7 FFFE                284      MOVEM.L     D0-D7/A0-A6, -(SP)
00001274  3600                     285      MOVE.W      D0,D3           *move full opcode to D2 temporarily
00001276  2449                     286      MOVEA.L     A1,A2           *move string into A2 temp
00001278                           287      *print the line number
00001278  4EB9 000013B4            288      JSR         print_line_number
0000127E                           289      *print a tab
0000127E  43F9 00008398            290      LEA         TAB,A1
00001284  103C 000E                291      MOVE.B      #14,D0              *move number 14 into d0 for string
00001288  4E4F                     292      TRAP        #15                 *print the data
0000128A                           293      *print data
0000128A  224A                     294      MOVE.L      A2,A1
0000128C  103C 000E                295      MOVE.B      #14,D0              *move number 14 into d0 for string
00001290  4E4F                     296      TRAP        #15                 *print the data
00001292                           297      *print new line
00001292  43F9 0000837A            298      LEA         SPACE,A1
00001298  103C 000E                299      MOVE.B      #14,D0              *move number 14 into d0 for string
0000129C  4E4F                     300      TRAP        #15                 *print the data
0000129E                           301      
0000129E  4CDF 7FFF                302      MOVEM.L     (SP)+, D0-D7/A0-A6
000012A2  4E75                     303      RTS
000012A4                           304  
000012A4                           305  print_string_sized:
000012A4  48E7 FFFE                306      MOVEM.L     D0-D7/A0-A6, -(SP)
000012A8  2601                     307      MOVE.L      D1,D3           *move full opcode to D2 temporarily
000012AA  2449                     308      MOVEA.L     A1,A2           *move string into A2 temp
000012AC                           309      *print the line number
000012AC  4EB9 000013B4            310      JSR         print_line_number
000012B2                           311      *print a tab
000012B2  43F9 00008398            312      LEA         TAB,A1
000012B8  103C 000E                313      MOVE.B      #14,D0              *move number 14 into d0 for string
000012BC  4E4F                     314      TRAP        #15                 *print the data
000012BE                           315      *print data
000012BE  224A                     316      MOVE.L      A2,A1
000012C0  103C 000E                317      MOVE.B      #14,D0              *move number 14 into d0 for string
000012C4  4E4F                     318      TRAP        #15                 *print the data
000012C6                           319      *print a tab
000012C6  43F9 00008398            320      LEA         TAB,A1
000012CC  103C 000E                321      MOVE.B      #14,D0              *move number 14 into d0 for string
000012D0  4E4F                     322      TRAP        #15                 *print the data
000012D2                           323      *print opcode
000012D2  2201                     324      MOVE.L      D1,D1
000012D4  103C 000F                325      MOVE.B      #15,D0
000012D8  143C 0010                326      MOVE.B      #16,D2          *display in base 16 (hex)
000012DC  4E4F                     327      TRAP        #15
000012DE                           328      *print new line
000012DE  43F9 0000837A            329      LEA         SPACE,A1
000012E4  103C 000E                330      MOVE.B      #14,D0              *move number 14 into d0 for string
000012E8  4E4F                     331      TRAP        #15                 *print the data
000012EA                           332      
000012EA  4CDF 7FFF                333      MOVEM.L     (SP)+, D0-D7/A0-A6
000012EE  4E75                     334      RTS
000012F0                           335  
000012F0                           336  print_data:
000012F0  48E7 FFFE                337      MOVEM.L     D0-D7/A0-A6, -(SP)
000012F4  3600                     338      MOVE.W      D0,D3           *move full opcode to D2 temporarily
000012F6  2449                     339      MOVEA.L     A1,A2           *move string into A2 temp
000012F8                           340      *print the line number
000012F8  4EB9 000013B4            341      JSR         print_line_number
000012FE                           342      *print a tab
000012FE  43F9 00008398            343      LEA         TAB,A1
00001304  103C 000E                344      MOVE.B      #14,D0              *move number 14 into d0 for string
00001308  4E4F                     345      TRAP        #15                 *print the data
0000130A                           346      *print data
0000130A  224A                     347      MOVE.L      A2,A1
0000130C  103C 000E                348      MOVE.B      #14,D0              *move number 14 into d0 for string
00001310  4E4F                     349      TRAP        #15                 *print the data
00001312                           350      *print a tab
00001312  43F9 00008398            351      LEA         TAB,A1
00001318  103C 000E                352      MOVE.B      #14,D0              *move number 14 into d0 for string
0000131C  4E4F                     353      TRAP        #15                 *print the data
0000131E                           354      *print $
0000131E  43F9 000084C4            355      LEA         ea_$,A1
00001324  103C 000E                356      MOVE.B      #14,D0              *move number 14 into d0 for string
00001328  4E4F                     357      TRAP        #15                 *print the data
0000132A                           358      *print opcode
0000132A  4EB9 00001426            359      JSR         print_opcode_word   *print the opcode in 4 digits
00001330                           360      *print new line
00001330  43F9 0000837A            361      LEA         SPACE,A1
00001336  103C 000E                362      MOVE.B      #14,D0              *move number 14 into d0 for string
0000133A  4E4F                     363      TRAP        #15                 *print the data
0000133C                           364      
0000133C  4CDF 7FFF                365      MOVEM.L     (SP)+, D0-D7/A0-A6
00001340  4E75                     366      RTS
00001342                           367  
00001342                           368  print_bcc:
00001342  48E7 FFFE                369      MOVEM.L     D0-D7/A0-A6, -(SP)
00001346  2803                     370      MOVE.L      D3,D4
00001348  3600                     371      MOVE.W      D0,D3           *move full opcode to D2 temporarily
0000134A  2449                     372      MOVEA.L     A1,A2           *move string into A2 temp
0000134C                           373      *print the line number
0000134C  4EB9 000013B4            374      JSR         print_line_number
00001352                           375      *print a tab
00001352  43F9 00008398            376      LEA         TAB,A1
00001358  103C 000E                377      MOVE.B      #14,D0              *move number 14 into d0 for string
0000135C  4E4F                     378      TRAP        #15                 *print the data
0000135E                           379      *print data
0000135E  224A                     380      MOVE.L      A2,A1
00001360  103C 000E                381      MOVE.B      #14,D0              *move number 14 into d0 for string
00001364  4E4F                     382      TRAP        #15                 *print the data
00001366                           383      *print a tab
00001366  43F9 00008398            384      LEA         TAB,A1
0000136C  103C 000E                385      MOVE.B      #14,D0              *move number 14 into d0 for string
00001370  4E4F                     386      TRAP        #15                 *print the data
00001372                           387      *print displaced address
00001372  2604                     388      MOVE.L      D4,D3
00001374  4EB9 0000138C            389      JSR         print_displacedAddress
0000137A                           390      *print new line
0000137A  43F9 0000837A            391      LEA         SPACE,A1
00001380  103C 000E                392      MOVE.B      #14,D0              *move number 14 into d0 for string
00001384  4E4F                     393      TRAP        #15                 *print the data
00001386                           394      
00001386  4CDF 7FFF                395      MOVEM.L     (SP)+, D0-D7/A0-A6
0000138A  4E75                     396      RTS
0000138C                           397  
0000138C                           398  print_displacedAddress:
0000138C  48E7 FFFE                399              MOVEM.L     D0-D7/A0-A6, -(SP)
00001390  7800                     400              MOVE.L      #0,D4           *counter 
00001392  7A08                     401              MOVE.L      #8,D5
00001394  4281                     402              CLR.L       D1
00001396  700F                     403              MOVE.L      #15,D0
00001398  7410                     404              MOVE.L      #16,D2          *display in base 16 (hex)
0000139A  BA04                     405  disp_loop   CMP.B       D4,D5           *loop 8 time for a long of info
0000139C  6700 0010                406              BEQ         disp_done
000013A0                           407              *inside loop code
000013A0  E99B                     408              ROL.L       #4,D3          *rotate bits so last is first
000013A2  1203                     409              MOVE.B      D3,D1
000013A4  E909                     410              LSL.B       #4,D1           *rotate left then right to get rid 
000013A6  E809                     411              LSR.B       #4,D1           *of the other character
000013A8  4E4F                     412              TRAP        #15             *print 1 hex character
000013AA                           413              
000013AA                           414              *loop code done
000013AA  5204                     415              ADDQ.B  #1,D4           *increment the counter
000013AC  60EC                     416              BRA     disp_loop
000013AE                           417              
000013AE  4CDF 7FFF                418  disp_done   MOVEM.L     (SP)+, D0-D7/A0-A6
000013B2  4E75                     419              RTS
000013B4                           420  
000013B4                           421  print_line_number:
000013B4  48E7 FFFE                422              MOVEM.L     D0-D7/A0-A6, -(SP)
000013B8  2608                     423              MOVE.L      A0,D3
000013BA  7800                     424              MOVE.L      #0,D4           *counter 
000013BC  7A08                     425              MOVE.L      #8,D5
000013BE  4281                     426              CLR.L       D1
000013C0  700F                     427              MOVE.L      #15,D0
000013C2  7410                     428              MOVE.L      #16,D2          *display in base 16 (hex)
000013C4  BA04                     429  line_loop   CMP.B       D4,D5           *loop 2 time for a byte of info
000013C6  6700 0010                430              BEQ         line_done
000013CA                           431              *inside loop code
000013CA  E99B                     432              ROL.L       #4,D3          *rotate bits so last is first
000013CC  1203                     433              MOVE.B      D3,D1
000013CE  E909                     434              LSL.B       #4,D1           *rotate left then right to get rid 
000013D0  E809                     435              LSR.B       #4,D1           *of the other character
000013D2  4E4F                     436              TRAP        #15             *print 1 hex character
000013D4                           437              
000013D4                           438              *loop code done
000013D4  5204                     439              ADDQ.B  #1,D4           *increment the counter
000013D6  60EC                     440              BRA     line_loop
000013D8                           441              
000013D8  4CDF 7FFF                442  line_done   MOVEM.L     (SP)+, D0-D7/A0-A6
000013DC  4E75                     443              RTS
000013DE                           444              
000013DE                           445  print_eat:
000013DE  48E7 FFFE                446      MOVEM.L     D0-D7/A0-A6, -(SP)
000013E2                           447      *print data
000013E2  103C 000E                448      MOVE.B      #14,D0              *move number 14 into d0 for string
000013E6  4E4F                     449      TRAP        #15                 *print the data
000013E8  4CDF 7FFF                450      MOVEM.L     (SP)+, D0-D7/A0-A6
000013EC  4E75                     451      RTS
000013EE                           452      
000013EE                           453  print_ea:
000013EE  48E7 FFFE                454      MOVEM.L     D0-D7/A0-A6, -(SP)
000013F2                           455      *print data
000013F2  103C 000E                456      MOVE.B      #14,D0              *move number 14 into d0 for string
000013F6  4E4F                     457      TRAP        #15                 *print the data in A1
000013F8                           458      *print new line
000013F8  43F9 0000837A            459      LEA         SPACE,A1
000013FE  103C 000E                460      MOVE.B      #14,D0              *move number 14 into d0 for string
00001402  4E4F                     461      TRAP        #15                 *print the data
00001404  4CDF 7FFF                462      MOVEM.L     (SP)+, D0-D7/A0-A6
00001408  4E75                     463      RTS
0000140A                           464      
0000140A                           465  print_first:
0000140A  48E7 FFFE                466      MOVEM.L     D0-D7/A0-A6, -(SP)
0000140E                           467      *print data
0000140E  103C 000E                468      MOVE.B      #14,D0              *move number 14 into d0 for string
00001412  4E4F                     469      TRAP        #15                 *print the data in A1
00001414                           470       *print comma
00001414  43F9 000083DC            471      LEA         COMMA,A1
0000141A  103C 000E                472      MOVE.B      #14,D0              *move number 14 into d0 for string
0000141E  4E4F                     473      TRAP        #15                 *print the data
00001420  4CDF 7FFF                474      MOVEM.L     (SP)+, D0-D7/A0-A6
00001424  4E75                     475      RTS
00001426                           476  
00001426                           477  print_opcode_word:
00001426  48E7 FFFE                478              MOVEM.L     D0-D7/A0-A6, -(SP)
0000142A                           479              *MOVE.L      A0,D3
0000142A  7800                     480              MOVE.L      #0,D4           *counter 
0000142C  7A04                     481              MOVE.L      #4,D5
0000142E  4281                     482              CLR.L       D1
00001430  700F                     483              MOVE.L      #15,D0
00001432  7410                     484              MOVE.L      #16,D2          *display in base 16 (hex)
00001434  BA04                     485  opWd_loop   CMP.B       D4,D5           *loop 4 time for a word of info
00001436  6700 0010                486              BEQ         opWd_done
0000143A                           487              *inside loop code
0000143A  E95B                     488              ROL.W       #4,D3          *rotate bits so last is first
0000143C  1203                     489              MOVE.B      D3,D1
0000143E  E909                     490              LSL.B       #4,D1           *rotate left then right to get rid 
00001440  E809                     491              LSR.B       #4,D1           *of the other character
00001442  4E4F                     492              TRAP        #15             *print 1 hex character
00001444                           493              
00001444                           494              *loop code done
00001444  5204                     495              ADDQ.B      #1,D4           *increment the counter
00001446  60EC                     496              BRA         opWd_loop
00001448                           497              
00001448  4CDF 7FFF                498  opWd_done   MOVEM.L     (SP)+, D0-D7/A0-A6
0000144C  4E75                     499              RTS
0000144E                           500  
0000144E                           501  
0000144E                           502  
0000144E                           503  
0000144E                           504  
0000144E                           505  
0000144E                           506  
0000144E                           507  
0000144E                           508  
0000144E                           509  
0000144E                           510  -------------------- end include --------------------
0000144E                           511              INCLUDE 'opcode_size.X68'
0000144E                           512  movea_size:
0000144E  48E7 FDFE                513          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001452  3200                     514          MOVE.W      D0,D1           *put the full opcode into D1
00001454  C27C 3000                515          AND.W       #mask_size_MOVES,D1 *mask to only see the size bits
00001458                           516          
00001458                           517          *test for word size
00001458  B27C 3000                518  MA_W    CMP.W       #m_size_W_MOVES,D1
0000145C  6600 0020                519          BNE         MA_L
00001460  43F9 00007F89            520          LEA         opcode_MOVEAW,A1
00001466  1C3C 0002                521          MOVE.B      #word_size,D6
0000146A  4EB8 123C                522          JSR         print_string_op_nn  *print the opcode
0000146E  3200                     523          MOVE.W      D0,D1               *reload the opcode into D1
00001470  4EB9 0000650A            524          JSR         MOVEA_sub
00001476  4EB8 13EE                525          JSR         print_ea
0000147A  6000 002E                526          BRA         MA_END
0000147E                           527          
0000147E                           528          *test for long size
0000147E  B27C 2000                529  MA_L    CMP.W       #m_size_L_MOVES,D1
00001482  6600 0020                530          BNE         MA_FAIL
00001486  43F9 00007F91            531          LEA         opcode_MOVEAL,A1
0000148C  1C3C 0003                532          MOVE.B      #long_size,D6
00001490  4EB8 123C                533          JSR         print_string_op_nn  *print the opcode
00001494  3200                     534          MOVE.W      D0,D1               *reload the opcode into D1
00001496  4EB9 0000650A            535          JSR         MOVEA_sub
0000149C  4EB8 13EE                536          JSR         print_ea
000014A0  6000 0008                537          BRA         MA_END
000014A4                           538          
000014A4                           539          *did not match, its data
000014A4  4EB9 00002372            540  MA_FAIL JSR         op_DATA
000014AA                           541          
000014AA  4CDF 7FBF                542  MA_END  MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000014AE  4E75                     543          RTS
000014B0                           544  
000014B0                           545  move_size:
000014B0  48E7 FDFE                546          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000014B4  3200                     547          MOVE.W      D0,D1           *put the full opcode into D1
000014B6  C27C 3000                548          AND.W       #mask_size_MOVES,D1 *mask to only see the size bits
000014BA                           549          
000014BA                           550          *test for byte size
000014BA  B27C 1000                551          CMP.W       #m_size_B_MOVES,D1
000014BE  6600 0020                552          BNE         M_W
000014C2  43F9 00007F60            553          LEA         opcode_MOVEB,A1    *move the value for printing
000014C8  1C3C 0001                554          MOVE.B      #byte_size,D6
000014CC  4EB8 123C                555          JSR         print_string_op_nn  *print the opcode
000014D0  3200                     556          MOVE.W      D0,D1               *reload full address
000014D2  4EB9 00004C68            557          JSR         MOVE_sub
000014D8  4EB8 13EE                558          JSR         print_ea
000014DC  6000 0054                559          BRA         M_END
000014E0                           560          
000014E0                           561          *test for word size
000014E0  B27C 3000                562  M_W     CMP.W       #m_size_W_MOVES,D1
000014E4  6600 0020                563          BNE         M_L
000014E8  43F9 00007F67            564          LEA         opcode_MOVEW,A1
000014EE  1C3C 0002                565          MOVE.B      #word_size,D6
000014F2  4EB8 123C                566          JSR         print_string_op_nn  *print the opcode
000014F6  3200                     567          MOVE.W      D0,D1               *reload full address
000014F8  4EB9 00004C68            568          JSR         MOVE_sub
000014FE  4EB8 13EE                569          JSR         print_ea
00001502  6000 002E                570          BRA         M_END
00001506                           571          
00001506                           572          *test for long size
00001506  B27C 2000                573  M_L     CMP.W       #m_size_L_MOVES,D1
0000150A  6600 0020                574          BNE         M_FAIL
0000150E  43F9 00007F6E            575          LEA         opcode_MOVEL,A1
00001514  1C3C 0003                576          MOVE.B      #long_size,D6
00001518  4EB8 123C                577          JSR         print_string_op_nn  *print the opcode
0000151C  3200                     578          MOVE.W      D0,D1               *reload full address
0000151E  4EB9 00004C68            579          JSR         MOVE_sub
00001524  4EB8 13EE                580          JSR         print_ea
00001528  6000 0008                581          BRA         M_END
0000152C                           582          
0000152C  4EB9 00002372            583  M_FAIL  JSR         op_DATA
00001532                           584          
00001532  4CDF 7FBF                585  M_END   MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001536  4E75                     586          RTS
00001538                           587          
00001538                           588  movem_rm_size:
00001538  48E7 FDFE                589          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000153C  3200                     590          MOVE.W      D0,D1           *put the full opcode into D1
0000153E  C27C 0040                591          AND.W       #mask_size_MOVEM,D1 *mask to only see the size bits
00001542                           592          
00001542                           593          *test for word size
00001542  B27C 0000                594          CMP.W       #m_size_W_MOVEM,D1
00001546  6600 0016                595          BNE         MOVEM_rm_L 
0000154A  43F9 000080CF            596          LEA         opcode_MOVEMW,A1    *move the value for printing
00001550  1C3C 0002                597          MOVE.B      #word_size,D6
00001554  4EB8 1270                598          JSR         print_string_op_nl  *print the opcode
00001558  3200                     599          MOVE.W      D0,D1               *reload the opcode into D1
0000155A                           600          *JSR         MOVEM_sub
0000155A                           601          *JSR         print_ea
0000155A  6000 0024                602          BRA         MOVEM_rm_END
0000155E                           603          
0000155E                           604          *test for long size
0000155E                           605  MOVEM_rm_L  
0000155E  B27C 0040                606          CMP.W       #m_size_L_MOVEM,D1
00001562  6600 0016                607          BNE         MOVEM_rm_FAIL
00001566  43F9 000080D7            608          LEA         opcode_MOVEML,A1
0000156C  1C3C 0003                609          MOVE.B      #long_size,D6
00001570  4EB8 1270                610          JSR         print_string_op_nl  *print the opcode
00001574  3200                     611          MOVE.W      D0,D1               *reload the opcode into D1
00001576                           612          *JSR         MOVEM_sub
00001576                           613          *JSR         print_ea
00001576  6000 0008                614          BRA         MOVEM_rm_END
0000157A                           615          
0000157A                           616  MOVEM_rm_FAIL 
0000157A  4EB9 00002372            617          JSR         op_DATA
00001580                           618  
00001580                           619  MOVEM_rm_END 
00001580  4CDF 7FBF                620          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001584  4E75                     621          RTS
00001586                           622  
00001586                           623  movem_mr_size:
00001586  48E7 FDFE                624          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000158A  3200                     625          MOVE.W      D0,D1           *put the full opcode into D1
0000158C  C27C 0040                626          AND.W       #mask_size_MOVEM,D1 *mask to only see the size bits
00001590                           627          
00001590                           628          *test for word size
00001590  B27C 0000                629          CMP.W       #m_size_W_MOVEM,D1
00001594  6600 0016                630          BNE         MOVEM_mr_L
00001598  43F9 000080CF            631          LEA         opcode_MOVEMW,A1    *move the value for printing
0000159E  1C3C 0002                632          MOVE.B      #word_size,D6
000015A2  4EB8 1270                633          JSR         print_string_op_nl  *print the opcode
000015A6  3200                     634          MOVE.W      D0,D1               *reload the opcode into D1
000015A8                           635          *JSR         MOVEM_sub
000015A8                           636          *JSR         print_ea
000015A8  6000 0024                637          BRA         MOVEM_mr_END
000015AC                           638          
000015AC                           639          *test for long size
000015AC                           640  MOVEM_mr_L  
000015AC  B27C 0040                641          CMP.W       #m_size_L_MOVEM,D1
000015B0  6600 0016                642          BNE         MOVEM_mr_FAIL
000015B4  43F9 000080D7            643          LEA         opcode_MOVEML,A1
000015BA  1C3C 0003                644          MOVE.B      #long_size,D6
000015BE  4EB8 1270                645          JSR         print_string_op_nl  *print the opcode
000015C2  3200                     646          MOVE.W      D0,D1               *reload the opcode into D1
000015C4                           647          *JSR         MOVEM_sub
000015C4                           648          *JSR         print_ea
000015C4  6000 0008                649          BRA         MOVEM_mr_END
000015C8                           650          
000015C8                           651  MOVEM_mr_FAIL 
000015C8  4EB9 00002372            652          JSR         op_DATA
000015CE                           653  
000015CE                           654  MOVEM_mr_END 
000015CE  4CDF 7FBF                655          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000015D2  4E75                     656          RTS
000015D4                           657  
000015D4                           658          
000015D4                           659  nop_size:
000015D4  48E7 FDFE                660          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000015D8  43F9 00007F99            661          LEA         opcode_NOP,A1
000015DE  1C3C 0000                662          MOVE.B      #no_size,D6
000015E2  4EB8 1270                663          JSR         print_string_op_nl  *print the opcode
000015E6  4CDF 7FBF                664          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000015EA  4E75                     665          RTS
000015EC                           666          
000015EC                           667  rts_size:
000015EC  48E7 FDFE                668          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000015F0  43F9 000080BB            669          LEA         opcode_RTS,A1
000015F6  1C3C 0000                670          MOVE.B      #no_size,D6
000015FA  4EB8 1270                671          JSR         print_string_op_nl  *print the opcode
000015FE  4CDF 7FBF                672          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001602  4E75                     673          RTS
00001604                           674          
00001604                           675          
00001604                           676  lea_size:
00001604  48E7 FDFE                677          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001608  43F9 00007FE4            678          LEA         opcode_LEA,A1
0000160E  1C3C 0003                679          MOVE.B      #long_size,D6
00001612  4EB8 123C                680          JSR         print_string_op_nn  *print the opcode
00001616  3200                     681          MOVE.W      D0,D1               *reload the opcode into D1
00001618  4EB9 00004A6A            682          JSR         LEA_sub
0000161E  4EB8 13EE                683          JSR         print_ea
00001622  4CDF 7FBF                684          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001626  4E75                     685          RTS
00001628                           686          
00001628                           687  jsr_size:
00001628  48E7 FDFE                688          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000162C  43F9 000080B7            689          LEA         opcode_JSR,A1
00001632  1C3C 0000                690          MOVE.B      #no_size,D6
00001636  4EB8 123C                691          JSR         print_string_op_nn  *print the opcode
0000163A  3200                     692          MOVE.W      D0,D1               *reload the opcode into D1
0000163C  4EB9 0000495E            693          JSR         JSR_sub
00001642  4EB8 13EE                694          JSR         print_ea
00001646  4CDF 7FBF                695          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000164A  4E75                     696          RTS
0000164C                           697          
0000164C                           698  not_size:
0000164C  48E7 FDFE                699          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001650  3200                     700          MOVE.W      D0,D1           *put the full opcode into D1
00001652  C27C 00C0                701          AND.W       #mask_size_NOT,D1 *mask to only see the size bits
00001656                           702          
00001656                           703          *test for byte size
00001656  B27C 0000                704          CMP.W       #m_size_B_NOT,D1
0000165A  6600 0020                705          BNE         NOT_W
0000165E  43F9 00008009            706          LEA         opcode_NOTB,A1    *move the value for printing
00001664  1C3C 0001                707          MOVE.B      #byte_size,D6
00001668  4EB8 123C                708          JSR         print_string_op_nn  *print the opcode
0000166C  3200                     709          MOVE.W      D0,D1               *reload the opcode into D1
0000166E  4EB9 00006BBC            710          JSR         NOT_sub
00001674  4EB8 13EE                711          JSR         print_ea
00001678  6000 0054                712          BRA         NOT_END
0000167C                           713          
0000167C                           714          *test for word size
0000167C  B27C 0040                715  NOT_W   CMP.W       #m_size_W_NOT,D1
00001680  6600 0020                716          BNE         NOT_L
00001684  43F9 0000800F            717          LEA         opcode_NOTW,A1
0000168A  1C3C 0002                718          MOVE.B      #word_size,D6
0000168E  4EB8 123C                719          JSR         print_string_op_nn  *print the opcode
00001692  3200                     720          MOVE.W      D0,D1               *reload the opcode into D1
00001694  4EB9 00006BBC            721          JSR         NOT_sub
0000169A  4EB8 13EE                722          JSR         print_ea
0000169E  6000 002E                723          BRA         NOT_END
000016A2                           724          
000016A2                           725          *test for long size
000016A2  B27C 0080                726  NOT_L   CMP.W       #m_size_L_NOT,D1
000016A6  6600 0020                727          BNE         NOT_FAIL
000016AA  43F9 00008015            728          LEA         opcode_NOTL,A1
000016B0  1C3C 0003                729          MOVE.B      #long_size,D6
000016B4  4EB8 123C                730          JSR         print_string_op_nn  *print the opcode
000016B8  3200                     731          MOVE.W      D0,D1               *reload the opcode into D1
000016BA  4EB9 00006BBC            732          JSR         NOT_sub
000016C0  4EB8 13EE                733          JSR         print_ea
000016C4  6000 0008                734          BRA         NOT_END
000016C8                           735          
000016C8                           736          *does not match any
000016C8  4EB9 00002372            737  NOT_FAIL JSR         op_DATA
000016CE                           738          
000016CE  4CDF 7FBF                739  NOT_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000016D2  4E75                     740          RTS
000016D4                           741  
000016D4                           742  
000016D4                           743  adda_size:
000016D4  48E7 FDFE                744          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000016D8  3200                     745          MOVE.W      D0,D1           *put the full opcode into D1
000016DA  C27C 0100                746          AND.W       #mask_size_ADDA,D1 *mask to only see the size bits
000016DE                           747          
000016DE                           748          *test for word size
000016DE  B27C 0000                749          CMP.W       #m_size_W_ADDA,D1
000016E2  6600 0020                750          BNE         ADDA_L
000016E6  43F9 00007FAF            751          LEA         opcode_ADDAW,A1    *move the value for printing
000016EC  1C3C 0002                752          MOVE.B      #word_size,D6
000016F0  4EB8 123C                753          JSR         print_string_op_nn  *print the opcode
000016F4  3200                     754          MOVE.W      D0,D1               *reload the opcode into D1
000016F6  4EB9 0000380A            755          JSR         ADDA_sub
000016FC  4EB8 13EE                756          JSR         print_ea
00001700  6000 002E                757          BRA         ADDA_END
00001704                           758          
00001704                           759          *test for long size
00001704  B27C 0100                760  ADDA_L  CMP.W       #m_size_L_ADDA,D1
00001708  6600 0020                761          BNE         ADDA_FAIL
0000170C  43F9 00007FB6            762          LEA         opcode_ADDAL,A1
00001712  1C3C 0003                763          MOVE.B      #long_size,D6
00001716  4EB8 123C                764          JSR         print_string_op_nn  *print the opcode
0000171A  3200                     765          MOVE.W      D0,D1               *reload the opcode into D1
0000171C  4EB9 0000380A            766          JSR         ADDA_sub
00001722  4EB8 13EE                767          JSR         print_ea
00001726  6000 0008                768          BRA         ADDA_END
0000172A                           769          
0000172A  4EB9 00002372            770  ADDA_FAIL JSR         op_DATA
00001730                           771  
00001730  4CDF 7FBF                772  ADDA_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001734  4E75                     773          RTS
00001736                           774          
00001736                           775  add_size:
00001736  48E7 FDFE                776          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000173A  3200                     777          MOVE.W      D0,D1           *put the full opcode into D1
0000173C  C27C 00C0                778          AND.W       #mask_size_ADD,D1 *mask to only see the size bits
00001740                           779          
00001740                           780          *test for byte size
00001740  B27C 0000                781          CMP.W       #m_size_B_ADD,D1
00001744  6600 0020                782          BNE         ADD_W
00001748  43F9 00007F9D            783          LEA         opcode_ADDB,A1    *move the value for printing
0000174E  1C3C 0001                784          MOVE.B      #byte_size,D6
00001752  4EB8 123C                785          JSR         print_string_op_nn  *print the opcode
00001756  3200                     786          MOVE.W      D0,D1               *reload the opcode into D1
00001758  4EB9 00002388            787          JSR         ADD_ADD             *calculate ea and print
0000175E  4EB8 13EE                788          JSR         print_ea
00001762  6000 0054                789          BRA         ADD_END
00001766                           790          
00001766                           791          *test for word size
00001766  B27C 0040                792  ADD_W   CMP.W       #m_size_W_ADD,D1
0000176A  6600 0020                793          BNE         ADD_L
0000176E  43F9 00007FA3            794          LEA         opcode_ADDW,A1
00001774  1C3C 0002                795          MOVE.B      #word_size,D6
00001778  4EB8 123C                796          JSR         print_string_op_nn  *print the opcode
0000177C  3200                     797          MOVE.W      D0,D1               *reload the opcode into D1
0000177E  4EB9 00002388            798          JSR         ADD_ADD             *calculate ea and print
00001784  4EB8 13EE                799          JSR         print_ea
00001788  6000 002E                800          BRA         ADD_END
0000178C                           801          
0000178C                           802          *test for long size
0000178C  B27C 0080                803  ADD_L   CMP.W       #m_size_L_ADD,D1
00001790  6600 0020                804          BNE         ADD_FAIL
00001794  43F9 00007FA9            805          LEA         opcode_ADDL,A1
0000179A  1C3C 0003                806          MOVE.B      #long_size,D6
0000179E  4EB8 123C                807          JSR         print_string_op_nn  *print the opcode
000017A2  3200                     808          MOVE.W      D0,D1               *reload the opcode into D1
000017A4  4EB9 00002388            809          JSR         ADD_ADD             *calculate ea and print
000017AA  4EB8 13EE                810          JSR         print_ea
000017AE  6000 0008                811          BRA         ADD_END
000017B2                           812          
000017B2  4EB9 00002372            813  ADD_FAIL JSR         op_DATA
000017B8                           814          
000017B8  4CDF 7FBF                815  ADD_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000017BC  4E75                     816          RTS
000017BE                           817  
000017BE                           818  bcc_size:
000017BE  48E7 FDFE                819          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000017C2  3200                     820          MOVE.W      D0,D1           *refresh the entire opcode into D1
000017C4  C27C 00FF                821          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
000017C8                           822          
000017C8                           823          *test for long displacement size
000017C8  B27C 00FF                824  BCC_L   CMP.W       #m_size_L_bcc,D1
000017CC  6600 000E                825          BNE         BCC_W
000017D0                           826          *grab the next 32 bits
000017D0  2210                     827          MOVE.L      (A0),D1         *move the long value into D1
000017D2  5848                     828          ADDQ        #4,A0           *increment the pointer by 1 long
000017D4  4EB8 12A4                829          JSR         print_string_sized  *print the output
000017D8  6000 001E                830          BRA         BCC_END
000017DC                           831          
000017DC                           832          *test for word displacement size
000017DC  B27C 0000                833  BCC_W   CMP.W       #m_size_W_bcc,D1
000017E0  6600 000E                834          BNE         BCC_B
000017E4                           835          *grab the next 16 bits
000017E4  3210                     836          MOVE.W      (A0),D1         *move the long value into D1
000017E6  5448                     837          ADDQ        #2,A0           *increment the pointer by 1 word
000017E8  4EB8 12A4                838          JSR         print_string_sized  *print the output
000017EC  6000 000A                839          BRA         BCC_END
000017F0                           840          
000017F0                           841          *neither so it is byte size, print byte
000017F0  4EB8 1270                842  BCC_B   JSR         print_string_op_nl
000017F4  6000 0002                843          BRA         BCC_END
000017F8                           844          
000017F8  4CDF 7FBF                845  BCC_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000017FC  4E75                     846          RTS
000017FE                           847  
000017FE                           848  
000017FE                           849  bgt_size:
000017FE  48E7 FDFE                850          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001802  3200                     851          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001804  C27C 00FF                852          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001808                           853          
00001808                           854          *test for long displacement size
00001808  B27C 00FF                855  BGT_L   CMP.W       #m_size_L_bcc,D1
0000180C  6600 001E                856          BNE         BGT_W
00001810  43F9 00008087            857          LEA         opcode_BGT,A1
00001816                           858          *grab the next 32 bits
00001816  5448                     859          ADDQ        #2,A0           *increment the pointer by 1 word
00001818  2610                     860          MOVE.L      (A0),D3         *move the data to D3
0000181A  2408                     861          MOVE.L      A0,D2           *move the address location to D2
0000181C  5448                     862          ADDQ        #2,A0           *increment the pointer by another 1 word
0000181E  4EB9 000019D6            863          JSR         bcc_address
00001824  4EB8 1342                864          JSR         print_bcc       *print the output
00001828  6000 0044                865          BRA         BGT_END
0000182C                           866          
0000182C                           867          *test for word displacement size
0000182C  B27C 0000                868  BGT_W   CMP.W       #m_size_W_bcc,D1
00001830  6600 001E                869          BNE         BGT_B
00001834  43F9 00008091            870          LEA         opcode_BGTW,A1
0000183A                           871          *grab the next 16 bits
0000183A  5448                     872          ADDQ        #2,A0           *increment the pointer by 1 word
0000183C  3610                     873          MOVE.W      (A0),D3         *move the data to D3
0000183E  2408                     874          MOVE.L      A0,D2           *move the address location to D2
00001840  48C3                     875          EXT.L       D3              *make the word into long
00001842  4EB9 000019D6            876          JSR         bcc_address
00001848  4EB8 1342                877          JSR         print_bcc       *print the output
0000184C  6000 0020                878          BRA         BGT_END
00001850                           879          
00001850                           880          *neither so it is byte size, print byte
00001850  43F9 0000808B            881  BGT_B   LEA         opcode_BGTB,A1
00001856  3610                     882          MOVE.W      (A0),D3         *move the data to D3
00001858  E14B                     883          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
0000185A  E04B                     884          LSR.W       #8,D3
0000185C  2408                     885          MOVE.L      A0,D2           *move the address location to D2
0000185E  48C3                     886          EXT.L       D3              *make the word into long
00001860  4EB9 000019D6            887          JSR         bcc_address
00001866  4EB8 1342                888          JSR         print_bcc       *print the output
0000186A  6000 0002                889          BRA         BGT_END
0000186E                           890          
0000186E  4CDF 7FBF                891  BGT_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001872  4E75                     892          RTS
00001874                           893          
00001874                           894  beq_size:
00001874  48E7 FDFE                895          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001878  3200                     896          MOVE.W      D0,D1           *refresh the entire opcode into D1
0000187A  C27C 00FF                897          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
0000187E                           898          
0000187E                           899          *test for long displacement size
0000187E  B27C 00FF                900  BEQ_L   CMP.W       #m_size_L_bcc,D1
00001882  6600 001E                901          BNE         BEQ_W
00001886  43F9 000080A7            902          LEA         opcode_BEQ,A1
0000188C                           903          *grab the next 32 bits
0000188C  5448                     904          ADDQ        #2,A0           *increment the pointer by 1 word
0000188E  2610                     905          MOVE.L      (A0),D3         *move the data to D3
00001890  2408                     906          MOVE.L      A0,D2           *move the address location to D2
00001892  5448                     907          ADDQ        #2,A0           *increment the pointer by another 1 word
00001894  4EB9 000019D6            908          JSR         bcc_address
0000189A  4EB8 1342                909          JSR         print_bcc       *print the output
0000189E  6000 0044                910          BRA         BEQ_END
000018A2                           911          
000018A2                           912          *test for word displacement size
000018A2  B27C 0000                913  BEQ_W   CMP.W       #m_size_W_bcc,D1
000018A6  6600 001E                914          BNE         BEQ_B
000018AA  43F9 000080B1            915          LEA         opcode_BEQW,A1
000018B0                           916          *grab the next 16 bits
000018B0  5448                     917          ADDQ        #2,A0           *increment the pointer by 1 word
000018B2  3610                     918          MOVE.W      (A0),D3         *move the data to D3
000018B4  2408                     919          MOVE.L      A0,D2           *move the address location to D2
000018B6  48C3                     920          EXT.L       D3              *make the word into long
000018B8  4EB9 000019D6            921          JSR         bcc_address
000018BE  4EB8 1342                922          JSR         print_bcc       *print the output
000018C2  6000 0020                923          BRA         BEQ_END
000018C6                           924          
000018C6                           925          *neither so it is byte size, print byte
000018C6  43F9 000080AB            926  BEQ_B   LEA         opcode_BEQB,A1
000018CC  3610                     927          MOVE.W      (A0),D3         *move the data to D3
000018CE  E14B                     928          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
000018D0  E04B                     929          LSR.W       #8,D3
000018D2  2408                     930          MOVE.L      A0,D2           *move the address location to D2
000018D4  48C3                     931          EXT.L       D3              *make the word into long
000018D6  4EB9 000019D6            932          JSR         bcc_address
000018DC  4EB8 1342                933          JSR         print_bcc       *print the output
000018E0  6000 0002                934          BRA         BEQ_END
000018E4                           935          
000018E4  4CDF 7FBF                936  BEQ_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000018E8  4E75                     937          RTS
000018EA                           938          
000018EA                           939  ble_size:
000018EA  48E7 FDFE                940          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000018EE  3200                     941          MOVE.W      D0,D1           *refresh the entire opcode into D1
000018F0  C27C 00FF                942          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
000018F4                           943          
000018F4                           944          *test for long displacement size
000018F4  B27C 00FF                945  BLE_L   CMP.W       #m_size_L_bcc,D1
000018F8  6600 001E                946          BNE         BLE_W
000018FC  43F9 00008097            947          LEA         opcode_BLE,A1
00001902                           948          *grab the next 32 bits
00001902  5448                     949          ADDQ        #2,A0           *increment the pointer by 1 word
00001904  2610                     950          MOVE.L      (A0),D3         *move the data to D3
00001906  2408                     951          MOVE.L      A0,D2           *move the address location to D2
00001908  5448                     952          ADDQ        #2,A0           *increment the pointer by another 1 word
0000190A  4EB9 000019D6            953          JSR         bcc_address
00001910  4EB8 1342                954          JSR         print_bcc       *print the output
00001914  6000 0044                955          BRA         BLE_END
00001918                           956          
00001918                           957          *test for word displacement size
00001918  B27C 0000                958  BLE_W   CMP.W       #m_size_W_bcc,D1
0000191C  6600 001E                959          BNE         BLE_B
00001920  43F9 000080A1            960          LEA         opcode_BLEW,A1
00001926                           961          *grab the next 16 bits
00001926  5448                     962          ADDQ        #2,A0           *increment the pointer by 1 word
00001928  3610                     963          MOVE.W      (A0),D3         *move the data to D3
0000192A  2408                     964          MOVE.L      A0,D2           *move the address location to D2
0000192C  48C3                     965          EXT.L       D3              *make the word into long
0000192E  4EB9 000019D6            966          JSR         bcc_address
00001934  4EB8 1342                967          JSR         print_bcc       *print the output
00001938  6000 0020                968          BRA         BLE_END
0000193C                           969          
0000193C                           970          *neither so it is byte size, print byte
0000193C  43F9 0000809B            971  BLE_B   LEA         opcode_BLEB,A1
00001942  3610                     972          MOVE.W      (A0),D3         *move the data to D3
00001944  E14B                     973          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
00001946  E04B                     974          LSR.W       #8,D3
00001948  2408                     975          MOVE.L      A0,D2           *move the address location to D2
0000194A  48C3                     976          EXT.L       D3              *make the word into long
0000194C  4EB9 000019D6            977          JSR         bcc_address
00001952  4EB8 1342                978          JSR         print_bcc       *print the output
00001956  6000 0002                979          BRA         BLE_END
0000195A                           980          
0000195A  4CDF 7FBF                981  BLE_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000195E  4E75                     982          RTS
00001960                           983  
00001960                           984  
00001960                           985          
00001960                           986  bra_size:
00001960  48E7 FDFE                987          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001964  3200                     988          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001966  C27C 00FF                989          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
0000196A                           990          
0000196A                           991          *test for long displacement size
0000196A  B27C 00FF                992  BRA_L   CMP.W       #m_size_L_bcc,D1
0000196E  6600 001E                993          BNE         BRA_W
00001972  43F9 000080BF            994          LEA         opcode_BRA,A1
00001978                           995          *grab the next 32 bits
00001978  5448                     996          ADDQ        #2,A0           *increment the pointer by 1 word
0000197A  2610                     997          MOVE.L      (A0),D3         *move the data to D3
0000197C  2408                     998          MOVE.L      A0,D2           *move the address location to D2
0000197E  5448                     999          ADDQ        #2,A0           *increment the pointer by another 1 word
00001980  4EB9 000019D6           1000          JSR         bcc_address
00001986  4EB8 1342               1001          JSR         print_bcc       *print the output
0000198A  6000 0044               1002          BRA         BRA_END
0000198E                          1003          
0000198E                          1004          *test for word displacement size
0000198E  B27C 0000               1005  BRA_W   CMP.W       #m_size_W_bcc,D1
00001992  6600 001E               1006          BNE         BRA_B
00001996  43F9 000080C9           1007          LEA         opcode_BRAW,A1
0000199C                          1008          *grab the next 16 bits
0000199C  5448                    1009          ADDQ        #2,A0           *increment the pointer by 1 word
0000199E  3610                    1010          MOVE.W      (A0),D3         *move the data to D3
000019A0  2408                    1011          MOVE.L      A0,D2           *move the address location to D2
000019A2  48C3                    1012          EXT.L       D3              *make the word into long
000019A4  4EB9 000019D6           1013          JSR         bcc_address
000019AA  4EB8 1342               1014          JSR         print_bcc       *print the output
000019AE  6000 0020               1015          BRA         BRA_END
000019B2                          1016          
000019B2                          1017          *neither so it is byte size, print byte
000019B2  43F9 000080C3           1018  BRA_B   LEA         opcode_BRAB,A1
000019B8  3610                    1019          MOVE.W      (A0),D3         *move the data to D3
000019BA  E14B                    1020          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
000019BC  E04B                    1021          LSR.W       #8,D3
000019BE  2408                    1022          MOVE.L      A0,D2           *move the address location to D2
000019C0  48C3                    1023          EXT.L       D3              *make the word into long
000019C2  4EB9 000019D6           1024          JSR         bcc_address
000019C8  4EB8 1342               1025          JSR         print_bcc       *print the output
000019CC  6000 0002               1026          BRA         BRA_END
000019D0                          1027          
000019D0  4CDF 7FBF               1028  BRA_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000019D4  4E75                    1029          RTS
000019D6                          1030  
000019D6                          1031  bcc_address:
000019D6  48E7 EFFE               1032          MOVEM.L     D0-D2/D4-D7/A0-A6, -(SP)
000019DA  B6BC 00000000           1033          CMP.L       #0,D3           *compare against 0
000019E0  6D00 0008               1034          BLT         bcc_negative    *branch if the value is negative
000019E4                          1035          *else
000019E4  D682                    1036          ADD.L       D2,D3           *add address by displacement
000019E6  6000 000A               1037          BRA         bcc_add_end     *return for printing
000019EA                          1038  bcc_negative
000019EA  7800                    1039          MOVE.L      #0,D4
000019EC  9883                    1040          SUB.L       D3,D4           *flip the bits
000019EE  9484                    1041          SUB.L       D4,D2           *get the address of displacemnt
000019F0  2602                    1042          MOVE.L      D2,D3           *move back for printing
000019F2                          1043  bcc_add_end  
000019F2  4CDF 7FF7               1044          MOVEM.L     (SP)+, D0-D2/D4-D7/A0-A6
000019F6  4E75                    1045          RTS
000019F8                          1046                  
000019F8                          1047  lsl_r_size:
000019F8  48E7 FDFE               1048          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000019FC  3200                    1049          MOVE.W      D0,D1           *put the full opcode into D1
000019FE  C27C 00C0               1050          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001A02                          1051          
00001A02                          1052          *test for byte size
00001A02  B27C 0000               1053          CMP.W       #m_size_B_shfts,D1
00001A06  6600 0020               1054          BNE         LSLR_W
00001A0A  43F9 0000801B           1055          LEA         opcode_LSLB,A1    *move the value for printing
00001A10  1C3C 0001               1056          MOVE.B      #byte_size,D6
00001A14  4EB8 123C               1057          JSR         print_string_op_nn  *print the opcode
00001A18  3200                    1058          MOVE.W      D0,D1               *reload the opcode into D1
00001A1A  4EB9 00005F28           1059          JSR         LSD_sub
00001A20  4EB8 13EE               1060          JSR         print_ea
00001A24  6000 0054               1061          BRA         LSLR_END
00001A28                          1062          
00001A28                          1063          *test for word size
00001A28  B27C 0040               1064  LSLR_W  CMP.W       #m_size_W_shfts,D1
00001A2C  6600 0020               1065          BNE         LSLR_L
00001A30  43F9 00008021           1066          LEA         opcode_LSLW,A1
00001A36  1C3C 0002               1067          MOVE.B      #word_size,D6
00001A3A  4EB8 123C               1068          JSR         print_string_op_nn  *print the opcode
00001A3E  3200                    1069          MOVE.W      D0,D1               *reload the opcode into D1
00001A40  4EB9 00005F28           1070          JSR         LSD_sub
00001A46  4EB8 13EE               1071          JSR         print_ea
00001A4A  6000 002E               1072          BRA         LSLR_END
00001A4E                          1073          
00001A4E                          1074          *test for long size
00001A4E  B27C 0080               1075  LSLR_L  CMP.W       #m_size_L_shfts,D1
00001A52  6600 0020               1076          BNE         LSLR_FAIL
00001A56  43F9 00008027           1077          LEA         opcode_LSLL,A1
00001A5C  1C3C 0003               1078          MOVE.B      #long_size,D6
00001A60  4EB8 123C               1079          JSR         print_string_op_nn  *print the opcode
00001A64  3200                    1080          MOVE.W      D0,D1               *reload the opcode into D1
00001A66  4EB9 00005F28           1081          JSR         LSD_sub
00001A6C  4EB8 13EE               1082          JSR         print_ea
00001A70  6000 0008               1083          BRA         LSLR_END
00001A74                          1084          
00001A74                          1085          *did not match any
00001A74  4EB9 00002372           1086  LSLR_FAIL JSR         op_DATA
00001A7A                          1087          
00001A7A  4CDF 7FBF               1088  LSLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001A7E  4E75                    1089          RTS
00001A80                          1090  
00001A80                          1091  lsl_m_size:
00001A80  48E7 FDFE               1092          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001A84  3200                    1093          MOVE.W      D0,D1           *put the full opcode into D1
00001A86                          1094          *memory only works on word size
00001A86  43F9 00008021           1095          LEA         opcode_LSLW,A1
00001A8C  1C3C 0002               1096          MOVE.B      #word_size,D6
00001A90  4EB8 123C               1097          JSR         print_string_op_nn  *print the opcode
00001A94  3200                    1098          MOVE.W      D0,D1               *reload the opcode into D1
00001A96  4EB9 00005F28           1099          JSR         LSD_sub
00001A9C  4EB8 13EE               1100          JSR         print_ea
00001AA0  6000 0002               1101          BRA         LSLM_END
00001AA4                          1102          
00001AA4  4CDF 7FBF               1103  LSLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001AA8  4E75                    1104          RTS
00001AAA                          1105  
00001AAA                          1106  
00001AAA                          1107  lsr_r_size:
00001AAA  48E7 FDFE               1108          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001AAE  3200                    1109          MOVE.W      D0,D1           *put the full opcode into D1
00001AB0  C27C 00C0               1110          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001AB4                          1111          
00001AB4                          1112          *test for byte size
00001AB4  B27C 0000               1113          CMP.W       #m_size_B_shfts,D1
00001AB8  6600 0020               1114          BNE         LSRR_W
00001ABC  43F9 0000802D           1115          LEA         opcode_LSRB,A1    *move the value for printing
00001AC2  1C3C 0001               1116          MOVE.B      #byte_size,D6
00001AC6  4EB8 123C               1117          JSR         print_string_op_nn  *print the opcode
00001ACA  3200                    1118          MOVE.W      D0,D1               *reload the opcode into D1
00001ACC  4EB9 00005F28           1119          JSR         LSD_sub
00001AD2  4EB8 13EE               1120          JSR         print_ea
00001AD6  6000 0054               1121          BRA         LSRR_END
00001ADA                          1122          
00001ADA                          1123          *test for word size
00001ADA  B27C 0040               1124  LSRR_W  CMP.W       #m_size_W_shfts,D1
00001ADE  6600 0020               1125          BNE         LSRR_L
00001AE2  43F9 00008033           1126          LEA         opcode_LSRW,A1
00001AE8  1C3C 0002               1127          MOVE.B      #word_size,D6
00001AEC  4EB8 123C               1128          JSR         print_string_op_nn  *print the opcode
00001AF0  3200                    1129          MOVE.W      D0,D1               *reload the opcode into D1
00001AF2  4EB9 00005F28           1130          JSR         LSD_sub
00001AF8  4EB8 13EE               1131          JSR         print_ea
00001AFC  6000 002E               1132          BRA         LSRR_END
00001B00                          1133          
00001B00                          1134          *test for long size
00001B00  B27C 0080               1135  LSRR_L  CMP.W       #m_size_L_shfts,D1
00001B04  6600 0020               1136          BNE         LSRR_FAIL
00001B08  43F9 00008039           1137          LEA         opcode_LSRL,A1
00001B0E  1C3C 0003               1138          MOVE.B      #long_size,D6
00001B12  4EB8 123C               1139          JSR         print_string_op_nn  *print the opcode
00001B16  3200                    1140          MOVE.W      D0,D1               *reload the opcode into D1
00001B18  4EB9 00005F28           1141          JSR         LSD_sub
00001B1E  4EB8 13EE               1142          JSR         print_ea
00001B22  6000 0008               1143          BRA         LSRR_END
00001B26                          1144          
00001B26  4EB9 00002372           1145  LSRR_FAIL JSR         op_DATA
00001B2C                          1146          
00001B2C  4CDF 7FBF               1147  LSRR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001B30  4E75                    1148          RTS
00001B32                          1149          
00001B32                          1150  lsr_m_size:
00001B32  48E7 FDFE               1151          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001B36  3200                    1152          MOVE.W      D0,D1           *put the full opcode into D1
00001B38                          1153          *memory only works on word size
00001B38  43F9 00008033           1154          LEA         opcode_LSRW,A1
00001B3E  1C3C 0002               1155          MOVE.B      #word_size,D6
00001B42  4EB8 123C               1156          JSR         print_string_op_nn  *print the opcode
00001B46  3200                    1157          MOVE.W      D0,D1               *reload the opcode into D1
00001B48  4EB9 00005F28           1158          JSR         LSD_sub
00001B4E  4EB8 13EE               1159          JSR         print_ea
00001B52  6000 0002               1160          BRA         LSRM_END
00001B56                          1161          
00001B56  4CDF 7FBF               1162  LSRM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001B5A  4E75                    1163          RTS
00001B5C                          1164  
00001B5C                          1165  asl_r_size:
00001B5C  48E7 FDFE               1166          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001B60  3200                    1167          MOVE.W      D0,D1           *put the full opcode into D1
00001B62  C27C 00C0               1168          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001B66                          1169          
00001B66                          1170          *test for byte size
00001B66  B27C 0000               1171          CMP.W       #m_size_B_shfts,D1
00001B6A  6600 0020               1172          BNE         ASLR_W
00001B6E  43F9 0000803F           1173          LEA         opcode_ASLB,A1    *move the value for printing
00001B74  1C3C 0001               1174          MOVE.B      #byte_size,D6
00001B78  4EB8 123C               1175          JSR         print_string_op_nn  *print the opcode
00001B7C  3200                    1176          MOVE.W      D0,D1               *reload the opcode into D1
00001B7E  4EB9 000043EA           1177          JSR         ASD_sub
00001B84  4EB8 13EE               1178          JSR         print_ea
00001B88  6000 0054               1179          BRA         ASLR_END
00001B8C                          1180          
00001B8C                          1181          *test for word size
00001B8C  B27C 0040               1182  ASLR_W  CMP.W       #m_size_W_shfts,D1
00001B90  6600 0020               1183          BNE         ASLR_L
00001B94  43F9 00008045           1184          LEA         opcode_ASLW,A1
00001B9A  1C3C 0002               1185          MOVE.B      #word_size,D6
00001B9E  4EB8 123C               1186          JSR         print_string_op_nn  *print the opcode
00001BA2  3200                    1187          MOVE.W      D0,D1               *reload the opcode into D1
00001BA4  4EB9 000043EA           1188          JSR         ASD_sub
00001BAA  4EB8 13EE               1189          JSR         print_ea
00001BAE  6000 002E               1190          BRA         ASLR_END
00001BB2                          1191          
00001BB2                          1192          *test for long size
00001BB2  B27C 0080               1193  ASLR_L  CMP.W       #m_size_L_shfts,D1
00001BB6  6600 0020               1194          BNE         ASLR_FAIL
00001BBA  43F9 0000804B           1195          LEA         opcode_ASLL,A1
00001BC0  1C3C 0003               1196          MOVE.B      #long_size,D6
00001BC4  4EB8 123C               1197          JSR         print_string_op_nn  *print the opcode
00001BC8  3200                    1198          MOVE.W      D0,D1               *reload the opcode into D1
00001BCA  4EB9 000043EA           1199          JSR         ASD_sub
00001BD0  4EB8 13EE               1200          JSR         print_ea
00001BD4  6000 0008               1201          BRA         ASLR_END
00001BD8                          1202         
00001BD8  4EB9 00002372           1203  ASLR_FAIL JSR         op_DATA
00001BDE                          1204          
00001BDE  4CDF 7FBF               1205  ASLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001BE2  4E75                    1206          RTS
00001BE4                          1207          
00001BE4                          1208  asl_m_size:
00001BE4  48E7 FDFE               1209          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001BE8  3200                    1210          MOVE.W      D0,D1           *put the full opcode into D1
00001BEA                          1211          *memory only works on word size
00001BEA  43F9 00008045           1212          LEA         opcode_ASLW,A1
00001BF0  1C3C 0002               1213          MOVE.B      #word_size,D6
00001BF4  4EB8 123C               1214          JSR         print_string_op_nn  *print the opcode
00001BF8  3200                    1215          MOVE.W      D0,D1               *reload the opcode into D1
00001BFA  4EB9 000043EA           1216          JSR         ASD_sub
00001C00  4EB8 13EE               1217          JSR         print_ea
00001C04  6000 0002               1218          BRA         ASLM_END
00001C08                          1219          
00001C08  4CDF 7FBF               1220  ASLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001C0C  4E75                    1221          RTS
00001C0E                          1222          
00001C0E                          1223  
00001C0E                          1224  asr_r_size:
00001C0E  48E7 FDFE               1225          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001C12  3200                    1226          MOVE.W      D0,D1           *put the full opcode into D1
00001C14  C27C 00C0               1227          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001C18                          1228          
00001C18                          1229          *test for byte size
00001C18  B27C 0000               1230          CMP.W       #m_size_B_shfts,D1
00001C1C  6600 0020               1231          BNE         ASRR_W
00001C20  43F9 00008051           1232          LEA         opcode_ASRB,A1    *move the value for printing
00001C26  1C3C 0001               1233          MOVE.B      #byte_size,D6
00001C2A  4EB8 123C               1234          JSR         print_string_op_nn  *print the opcode
00001C2E  3200                    1235          MOVE.W      D0,D1               *reload the opcode into D1
00001C30  4EB9 000043EA           1236          JSR         ASD_sub
00001C36  4EB8 13EE               1237          JSR         print_ea
00001C3A  6000 0054               1238          BRA         ASRR_END
00001C3E                          1239          
00001C3E                          1240          *test for word size
00001C3E  B27C 0040               1241  ASRR_W  CMP.W       #m_size_W_shfts,D1
00001C42  6600 0020               1242          BNE         ASRR_L
00001C46  43F9 00008057           1243          LEA         opcode_ASRW,A1
00001C4C  1C3C 0002               1244          MOVE.B      #word_size,D6
00001C50  4EB8 123C               1245          JSR         print_string_op_nn  *print the opcode
00001C54  3200                    1246          MOVE.W      D0,D1               *reload the opcode into D1
00001C56  4EB9 000043EA           1247          JSR         ASD_sub
00001C5C  4EB8 13EE               1248          JSR         print_ea
00001C60  6000 002E               1249          BRA         ASRR_END
00001C64                          1250          
00001C64                          1251          *test for long size
00001C64  B27C 0080               1252  ASRR_L  CMP.W       #m_size_L_shfts,D1
00001C68  6600 0020               1253          BNE         ASRR_FAIL
00001C6C  43F9 0000805D           1254          LEA         opcode_ASRL,A1
00001C72  1C3C 0003               1255          MOVE.B      #long_size,D6
00001C76  4EB8 123C               1256          JSR         print_string_op_nn  *print the opcode
00001C7A  3200                    1257          MOVE.W      D0,D1               *reload the opcode into D1
00001C7C  4EB9 000043EA           1258          JSR         ASD_sub
00001C82  4EB8 13EE               1259          JSR         print_ea
00001C86  6000 0008               1260          BRA         ASRR_END
00001C8A                          1261          
00001C8A  4EB9 00002372           1262  ASRR_FAIL JSR         op_DATA
00001C90                          1263          
00001C90  4CDF 7FBF               1264  ASRR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001C94  4E75                    1265          RTS
00001C96                          1266  
00001C96                          1267  asr_m_size:
00001C96  48E7 FDFE               1268          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001C9A  3200                    1269          MOVE.W      D0,D1           *put the full opcode into D1
00001C9C                          1270          *memory only works on word size
00001C9C  43F9 00008057           1271          LEA         opcode_ASRW,A1
00001CA2  1C3C 0002               1272          MOVE.B      #word_size,D6
00001CA6  4EB8 123C               1273          JSR         print_string_op_nn  *print the opcode
00001CAA  3200                    1274          MOVE.W      D0,D1               *reload the opcode into D1
00001CAC  4EB9 000043EA           1275          JSR         ASD_sub
00001CB2  4EB8 13EE               1276          JSR         print_ea
00001CB6  6000 0002               1277          BRA         ASRM_END
00001CBA                          1278          
00001CBA  4CDF 7FBF               1279  ASRM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001CBE  4E75                    1280          RTS
00001CC0                          1281          
00001CC0                          1282  
00001CC0                          1283  rol_r_size:
00001CC0  48E7 FDFE               1284          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001CC4  3200                    1285          MOVE.W      D0,D1           *put the full opcode into D1
00001CC6  C27C 00C0               1286          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001CCA                          1287          
00001CCA                          1288          *test for byte size
00001CCA  B27C 0000               1289          CMP.W       #m_size_B_shfts,D1
00001CCE  6600 0020               1290          BNE         ROLR_W
00001CD2  43F9 00008063           1291          LEA         opcode_ROLB,A1    *move the value for printing
00001CD8  1C3C 0001               1292          MOVE.B      #byte_size,D6
00001CDC  4EB8 123C               1293          JSR         print_string_op_nn  *print the opcode
00001CE0  3200                    1294          MOVE.W      D0,D1               *reload the opcode into D1
00001CE2  4EB9 000079CE           1295          JSR         ROD_sub
00001CE8  4EB8 13EE               1296          JSR         print_ea
00001CEC  6000 0054               1297          BRA         ROLR_END
00001CF0                          1298          
00001CF0                          1299          *test for word size
00001CF0  B27C 0040               1300  ROLR_W  CMP.W       #m_size_W_shfts,D1
00001CF4  6600 0020               1301          BNE         ROLR_L
00001CF8  43F9 00008069           1302          LEA         opcode_ROLW,A1
00001CFE  1C3C 0002               1303          MOVE.B      #word_size,D6
00001D02  4EB8 123C               1304          JSR         print_string_op_nn  *print the opcode
00001D06  3200                    1305          MOVE.W      D0,D1               *reload the opcode into D1
00001D08  4EB9 000079CE           1306          JSR         ROD_sub
00001D0E  4EB8 13EE               1307          JSR         print_ea
00001D12  6000 002E               1308          BRA         ROLR_END
00001D16                          1309          
00001D16                          1310          *test for long size
00001D16  B27C 0080               1311  ROLR_L  CMP.W       #m_size_L_shfts,D1
00001D1A  6600 0020               1312          BNE         ROLR_FAIL
00001D1E  43F9 0000806F           1313          LEA         opcode_ROLL,A1
00001D24  1C3C 0003               1314          MOVE.B      #long_size,D6
00001D28  4EB8 123C               1315          JSR         print_string_op_nn  *print the opcode
00001D2C  3200                    1316          MOVE.W      D0,D1               *reload the opcode into D1
00001D2E  4EB9 000079CE           1317          JSR         ROD_sub
00001D34  4EB8 13EE               1318          JSR         print_ea
00001D38  6000 0008               1319          BRA         ROLR_END
00001D3C                          1320          
00001D3C  4EB9 00002372           1321  ROLR_FAIL JSR         op_DATA
00001D42                          1322          
00001D42  4CDF 7FBF               1323  ROLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001D46  4E75                    1324          RTS
00001D48                          1325  
00001D48                          1326  rol_m_size:
00001D48  48E7 FDFE               1327          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001D4C  3200                    1328          MOVE.W      D0,D1           *put the full opcode into D1
00001D4E                          1329          *memory only works on word size
00001D4E  43F9 00008069           1330          LEA         opcode_ROLW,A1
00001D54  1C3C 0002               1331          MOVE.B      #word_size,D6
00001D58  4EB8 123C               1332          JSR         print_string_op_nn  *print the opcode
00001D5C  3200                    1333          MOVE.W      D0,D1               *reload the opcode into D1
00001D5E  4EB9 000079CE           1334          JSR         ROD_sub
00001D64  4EB8 13EE               1335          JSR         print_ea
00001D68  6000 0002               1336          BRA         ROLM_END
00001D6C                          1337          
00001D6C  4CDF 7FBF               1338  ROLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001D70  4E75                    1339          RTS
00001D72                          1340          
00001D72                          1341  
00001D72                          1342  ror_r_size:
00001D72  48E7 FDFE               1343          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001D76  3200                    1344          MOVE.W      D0,D1           *put the full opcode into D1
00001D78  C27C 00C0               1345          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001D7C                          1346          
00001D7C                          1347          *test for byte size
00001D7C  B27C 0000               1348          CMP.W       #m_size_B_shfts,D1
00001D80  6600 0020               1349          BNE         RORR_W
00001D84  43F9 00008075           1350          LEA         opcode_RORB,A1    *move the value for printing
00001D8A  1C3C 0001               1351          MOVE.B      #byte_size,D6
00001D8E  4EB8 123C               1352          JSR         print_string_op_nn  *print the opcode
00001D92  3200                    1353          MOVE.W      D0,D1               *reload the opcode into D1
00001D94  4EB9 000079CE           1354          JSR         ROD_sub
00001D9A  4EB8 13EE               1355          JSR         print_ea
00001D9E  6000 0054               1356          BRA         RORR_END
00001DA2                          1357          
00001DA2                          1358          *test for word size
00001DA2  B27C 0040               1359  RORR_W  CMP.W       #m_size_W_shfts,D1
00001DA6  6600 0020               1360          BNE         RORR_L
00001DAA  43F9 0000807B           1361          LEA         opcode_RORW,A1
00001DB0  1C3C 0002               1362          MOVE.B      #word_size,D6
00001DB4  4EB8 123C               1363          JSR         print_string_op_nn  *print the opcode
00001DB8  3200                    1364          MOVE.W      D0,D1               *reload the opcode into D1
00001DBA  4EB9 000079CE           1365          JSR         ROD_sub
00001DC0  4EB8 13EE               1366          JSR         print_ea
00001DC4  6000 002E               1367          BRA         RORR_END
00001DC8                          1368          
00001DC8                          1369          *test for long size
00001DC8  B27C 0080               1370  RORR_L  CMP.W       #m_size_L_shfts,D1
00001DCC  6600 0020               1371          BNE         RORR_FAIL
00001DD0  43F9 00008081           1372          LEA         opcode_RORL,A1
00001DD6  1C3C 0003               1373          MOVE.B      #long_size,D6
00001DDA  4EB8 123C               1374          JSR         print_string_op_nn  *print the opcode
00001DDE  3200                    1375          MOVE.W      D0,D1               *reload the opcode into D1
00001DE0  4EB9 000079CE           1376          JSR         ROD_sub
00001DE6  4EB8 13EE               1377          JSR         print_ea
00001DEA  6000 0008               1378          BRA         RORR_END
00001DEE                          1379          
00001DEE  4EB9 00002372           1380  RORR_FAIL JSR         op_DATA
00001DF4                          1381          
00001DF4  4CDF 7FBF               1382  RORR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001DF8  4E75                    1383          RTS
00001DFA                          1384  
00001DFA                          1385  ror_m_size:
00001DFA  48E7 FDFE               1386          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001DFE  3200                    1387          MOVE.W      D0,D1           *put the full opcode into D1
00001E00                          1388          *memory only works on word size
00001E00  43F9 0000807B           1389          LEA         opcode_RORW,A1
00001E06  1C3C 0002               1390          MOVE.B      #word_size,D6
00001E0A  4EB8 123C               1391          JSR         print_string_op_nn  *print the opcode
00001E0E  3200                    1392          MOVE.W      D0,D1               *reload the opcode into D1
00001E10  4EB9 000079CE           1393          JSR         ROD_sub
00001E16  4EB8 13EE               1394          JSR         print_ea
00001E1A  6000 0002               1395          BRA         RORM_END
00001E1E                          1396          
00001E1E  4CDF 7FBF               1397  RORM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001E22  4E75                    1398          RTS
00001E24                          1399          
00001E24                          1400  
00001E24                          1401  addq_size:
00001E24  48E7 FDFE               1402          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001E28  3200                    1403          MOVE.W      D0,D1           *put the full opcode into D1
00001E2A  C27C 00C0               1404          AND.W       #mask_size_ADD,D1 *mask to only see the size bits
00001E2E                          1405          
00001E2E                          1406          *test for byte size
00001E2E  B27C 0000               1407          CMP.W       #m_size_B_ADD,D1
00001E32  6600 0020               1408          BNE         ADDQ_W
00001E36  43F9 00007FBD           1409          LEA         opcode_ADDQB,A1    *move the value for printing
00001E3C  1C3C 0001               1410          MOVE.B      #byte_size,D6
00001E40  4EB8 123C               1411          JSR         print_string_op_nn  *print the opcode
00001E44  3200                    1412          MOVE.W      D0,D1               *reload the opcode into D1
00001E46  4EB9 00003EC8           1413          JSR         ADDQ_sub
00001E4C  4EB8 13EE               1414          JSR         print_ea
00001E50  6000 0054               1415          BRA         ADDQ_END
00001E54                          1416          
00001E54                          1417          *test for word size
00001E54  B27C 0040               1418  ADDQ_W  CMP.W       #m_size_W_ADD,D1
00001E58  6600 0020               1419          BNE         ADDQ_L
00001E5C  43F9 00007FC4           1420          LEA         opcode_ADDQW,A1
00001E62  1C3C 0002               1421          MOVE.B      #word_size,D6
00001E66  4EB8 123C               1422          JSR         print_string_op_nn  *print the opcode
00001E6A  3200                    1423          MOVE.W      D0,D1               *reload the opcode into D1
00001E6C  4EB9 00003EC8           1424          JSR         ADDQ_sub
00001E72  4EB8 13EE               1425          JSR         print_ea
00001E76  6000 002E               1426          BRA         ADDQ_END
00001E7A                          1427          
00001E7A                          1428          *test for long size
00001E7A  B27C 0080               1429  ADDQ_L  CMP.W       #m_size_L_ADD,D1
00001E7E  6600 0020               1430          BNE         ADDQ_FAIL
00001E82  43F9 00007FCB           1431          LEA         opcode_ADDQL,A1
00001E88  1C3C 0003               1432          MOVE.B      #long_size,D6
00001E8C  4EB8 123C               1433          JSR         print_string_op_nn  *print the opcode
00001E90  3200                    1434          MOVE.W      D0,D1               *reload the opcode into D1
00001E92  4EB9 00003EC8           1435          JSR         ADDQ_sub
00001E98  4EB8 13EE               1436          JSR         print_ea
00001E9C  6000 0008               1437          BRA         ADDQ_END
00001EA0                          1438          
00001EA0  4EB9 00002372           1439  ADDQ_FAIL JSR         op_DATA
00001EA6                          1440          
00001EA6  4CDF 7FBF               1441  ADDQ_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001EAA  4E75                    1442          RTS
00001EAC                          1443  
00001EAC                          1444  
00001EAC                          1445  sub_size:
00001EAC  48E7 FDFE               1446          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001EB0  3200                    1447          MOVE.W      D0,D1           *put the full opcode into D1
00001EB2  C27C 00C0               1448          AND.W       #mask_size_SUB,D1 *mask to only see the size bits
00001EB6                          1449          
00001EB6                          1450          *test for byte size
00001EB6  B27C 0000               1451          CMP.W       #m_size_B_SUB,D1
00001EBA  6600 0020               1452          BNE         SUB_W
00001EBE  43F9 00007FD2           1453          LEA         opcode_SUBB,A1    *move the value for printing
00001EC4  1C3C 0001               1454          MOVE.B      #byte_size,D6
00001EC8  4EB8 123C               1455          JSR         print_string_op_nn  *print the opcode
00001ECC  3200                    1456          MOVE.W      D0,D1               *reload the opcode into D1
00001ECE  4EB9 00005566           1457          JSR         SUB_sub
00001ED4  4EB8 13EE               1458          JSR         print_ea
00001ED8  6000 0054               1459          BRA         SUB_END
00001EDC                          1460          
00001EDC                          1461          *test for word size
00001EDC  B27C 0040               1462  SUB_W   CMP.W       #m_size_W_SUB,D1
00001EE0  6600 0020               1463          BNE         SUB_L
00001EE4  43F9 00007FD8           1464          LEA         opcode_SUBW,A1
00001EEA  1C3C 0002               1465          MOVE.B      #word_size,D6
00001EEE  4EB8 123C               1466          JSR         print_string_op_nn  *print the opcode
00001EF2  3200                    1467          MOVE.W      D0,D1               *reload the opcode into D1
00001EF4  4EB9 00005566           1468          JSR         SUB_sub
00001EFA  4EB8 13EE               1469          JSR         print_ea
00001EFE  6000 002E               1470          BRA         SUB_END
00001F02                          1471          
00001F02                          1472          *test for long size
00001F02  B27C 0080               1473  SUB_L   CMP.W       #m_size_L_SUB,D1
00001F06  6600 0020               1474          BNE         SUB_FAIL
00001F0A  43F9 00007FDE           1475          LEA         opcode_SUBL,A1
00001F10  1C3C 0003               1476          MOVE.B      #long_size,D6
00001F14  4EB8 123C               1477          JSR         print_string_op_nn  *print the opcode
00001F18  3200                    1478          MOVE.W      D0,D1               *reload the opcode into D1
00001F1A  4EB9 00005566           1479          JSR         SUB_sub
00001F20  4EB8 13EE               1480          JSR         print_ea
00001F24  6000 0008               1481          BRA         SUB_END
00001F28                          1482          
00001F28  4EB9 00002372           1483  SUB_FAIL JSR         op_DATA
00001F2E                          1484          
00001F2E  4CDF 7FBF               1485  SUB_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001F32  4E75                    1486          RTS
00001F34                          1487  
00001F34                          1488  and_size:
00001F34  48E7 FDFE               1489          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001F38  3200                    1490          MOVE.W      D0,D1           *put the full opcode into D1
00001F3A  C27C 00C0               1491          AND.W       #mask_size_logic,D1 *mask to only see the size bits
00001F3E                          1492          
00001F3E                          1493          *test for byte size
00001F3E  B27C 0000               1494          CMP.W       #m_size_B_logic,D1
00001F42  6600 0020               1495          BNE         AND_W
00001F46  43F9 00007FE8           1496          LEA         opcode_ANDB,A1    *move the value for printing
00001F4C  1C3C 0001               1497          MOVE.B      #byte_size,D6
00001F50  4EB8 123C               1498          JSR         print_string_op_nn  *print the opcode
00001F54  3200                    1499          MOVE.W      D0,D1               *reload the opcode into D1
00001F56  4EB9 00002D5C           1500          JSR         AND_sub
00001F5C  4EB8 13EE               1501          JSR         print_ea
00001F60  6000 0054               1502          BRA         AND_END
00001F64                          1503          
00001F64                          1504          *test for word size
00001F64  B27C 0040               1505  AND_W   CMP.W       #m_size_W_logic,D1
00001F68  6600 0020               1506          BNE         AND_L
00001F6C  43F9 00007FEE           1507          LEA         opcode_ANDW,A1
00001F72  1C3C 0002               1508          MOVE.B      #word_size,D6
00001F76  4EB8 123C               1509          JSR         print_string_op_nn  *print the opcode
00001F7A  3200                    1510          MOVE.W      D0,D1               *reload the opcode into D1
00001F7C  4EB9 00002D5C           1511          JSR         AND_sub
00001F82  4EB8 13EE               1512          JSR         print_ea
00001F86  6000 002E               1513          BRA         AND_END
00001F8A                          1514          
00001F8A                          1515          *test for long size
00001F8A  B27C 0080               1516  AND_L   CMP.W       #m_size_L_logic,D1
00001F8E  6600 0020               1517          BNE         AND_FAIL
00001F92  43F9 00007FF4           1518          LEA         opcode_ANDL,A1
00001F98  1C3C 0003               1519          MOVE.B      #long_size,D6
00001F9C  4EB8 123C               1520          JSR         print_string_op_nn  *print the opcode
00001FA0  3200                    1521          MOVE.W      D0,D1               *reload the opcode into D1
00001FA2  4EB9 00002D5C           1522          JSR         AND_sub
00001FA8  4EB8 13EE               1523          JSR         print_ea
00001FAC  6000 0008               1524          BRA         AND_END
00001FB0                          1525          
00001FB0  4EB9 00002372           1526  AND_FAIL JSR         op_DATA
00001FB6                          1527          
00001FB6  4CDF 7FBF               1528  AND_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001FBA  4E75                    1529          RTS
00001FBC                          1530          
00001FBC                          1531  or_size:
00001FBC  48E7 FDFE               1532          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001FC0  3200                    1533          MOVE.W      D0,D1           *put the full opcode into D1
00001FC2  C27C 00C0               1534          AND.W       #mask_size_logic,D1 *mask to only see the size bits
00001FC6                          1535          
00001FC6                          1536          *test for byte size
00001FC6  B27C 0000               1537          CMP.W       #m_size_B_logic,D1
00001FCA  6600 0020               1538          BNE         OR_W
00001FCE  43F9 00007FFA           1539          LEA         opcode_ORB,A1    *move the value for printing
00001FD4  1C3C 0001               1540          MOVE.B      #byte_size,D6
00001FD8  4EB8 123C               1541          JSR         print_string_op_nn  *print the opcode
00001FDC  3200                    1542          MOVE.W      D0,D1               *reload the opcode into D1
00001FDE  4EB9 00006F26           1543          JSR         OR_sub
00001FE4  4EB8 13EE               1544          JSR         print_ea
00001FE8  6000 0054               1545          BRA         OR_END
00001FEC                          1546          
00001FEC                          1547          *test for word size
00001FEC  B27C 0040               1548  OR_W    CMP.W       #m_size_W_logic,D1
00001FF0  6600 0020               1549          BNE         OR_L
00001FF4  43F9 00007FFF           1550          LEA         opcode_ORW,A1
00001FFA  1C3C 0002               1551          MOVE.B      #word_size,D6
00001FFE  4EB8 123C               1552          JSR         print_string_op_nn  *print the opcode
00002002  3200                    1553          MOVE.W      D0,D1               *reload the opcode into D1
00002004  4EB9 00006F26           1554          JSR         OR_sub
0000200A  4EB8 13EE               1555          JSR         print_ea
0000200E  6000 002E               1556          BRA         OR_END
00002012                          1557          
00002012                          1558          *test for long size
00002012  B27C 0080               1559  OR_L    CMP.W       #m_size_L_logic,D1
00002016  6600 0020               1560          BNE         OR_FAIL
0000201A  43F9 00008004           1561          LEA         opcode_ORL,A1
00002020  1C3C 0003               1562          MOVE.B      #long_size,D6
00002024  4EB8 123C               1563          JSR         print_string_op_nn  *print the opcode
00002028  3200                    1564          MOVE.W      D0,D1               *reload the opcode into D1
0000202A  4EB9 00006F26           1565          JSR         OR_sub
00002030  4EB8 13EE               1566          JSR         print_ea
00002034  6000 0008               1567          BRA         OR_END
00002038                          1568          
00002038  4EB9 00002372           1569  OR_FAIL JSR         op_DATA
0000203E                          1570          
0000203E  4CDF 7FBF               1571  OR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00002042  4E75                    1572          RTS
00002044                          1573  
00002044                          1574  moveq_size:
00002044  48E7 FDFE               1575          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00002048  3200                    1576          MOVE.W      D0,D1           *put the full opcode into D1
0000204A  C27C F100               1577          AND.W       #mask_size_MOVEQ,D1 *mask to only see the size bits
0000204E                          1578          
0000204E                          1579          *test for long size (only)
0000204E  B27C 7000               1580          CMP.W       #m_size_L_MOVEQ,D1
00002052  6600 0020               1581          BNE         MOVEQ_FAIL
00002056  43F9 00007F7B           1582          LEA         opcode_MOVEQ,A1    *move the value for printing
0000205C  1C3C 0003               1583          MOVE.B      #long_size,D6
00002060  4EB8 123C               1584          JSR         print_string_op_nn  *print the opcode
00002064  3200                    1585          MOVE.W      D0,D1               *reload the opcode into D1
00002066  4EB9 00006AF0           1586          JSR         MOVEQ_sub
0000206C  4EB8 13EE               1587          JSR         print_ea
00002070  6000 0008               1588          BRA         MOVEQ_END
00002074                          1589          
00002074                          1590  MOVEQ_FAIL 
00002074  4EB9 00002372           1591          JSR         op_DATA
0000207A                          1592          
0000207A                          1593  MOVEQ_END 
0000207A  4CDF 7FBF               1594          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000207E  4E75                    1595          RTS
00002080                          1596  
00002080                          1597  
00002080                          1598  
00002080                          1599  
00002080                          1600  
00002080                          1601  
00002080                          1602  
00002080                          1603  
00002080                          1604  
00002080                          1605  
00002080                          1606  
00002080                          1607  
00002080                          1608  
00002080                          1609  
00002080                          1610  
00002080                          1611  
00002080                          1612  
00002080                          1613  
00002080                          1614  
00002080                          1615  -------------------- end include --------------------
00002080                          1616              INCLUDE 'opcode_subroutine.x68'
00002080                          1617  opcode_subroutine:
00002080  48E7 FFFE               1618          MOVEM.L     D0-D7/A0-A6, -(SP)
00002084  3200                    1619          MOVE.W      D0,D1
00002086                          1620          *MOVE.W      #mask_opcode,D2      *move the mask into D2
00002086  C27C C000               1621          AND.W       #mask_MOVE,D1               *mask to only see the first 2 bits
0000208A                          1622          
0000208A                          1623          *test the move operations (00SS)
0000208A  B27C 0000               1624          CMP.W       #match_MOVE,D1
0000208E  6600 000C               1625          BNE         skip1
00002092  4EB9 00002150           1626          JSR         move_decode
00002098  6000 00B0               1627          BRA         end_op
0000209C                          1628          
0000209C                          1629          *test the 0100 clump and jump to subroutine (nop,lea,not,jsr,rts,movem)
0000209C  3200                    1630  skip1   MOVE.W      D0,D1
0000209E  C27C F000               1631          AND.W       #mask_opcode,D1               *mask the full machine code by the opcode mask
000020A2  B27C 4000               1632          CMP.W       #match_G0100,D1
000020A6  6600 000C               1633          BNE         skip2       
000020AA  4EB9 00002178           1634          JSR         group1_decode   *opcode matches group starting with 0100
000020B0  6000 0098               1635          BRA         end_op
000020B4                          1636  
000020B4                          1637          *test the 1101 clump and jump to subroutine (add,adda)
000020B4  B27C D000               1638  skip2   CMP.W       #match_G1101,D1
000020B8  6600 000C               1639          BNE         skip3
000020BC  4EB9 000021FC           1640          JSR         group2_decode
000020C2  6000 0086               1641          BRA         end_op
000020C6                          1642          
000020C6                          1643          *test the 0110 clump and jump to subroutine (bra,bgt,beq)
000020C6  B27C 6000               1644  skip3   CMP.W       #match_G0110,D1
000020CA  6600 000C               1645          BNE         skip4
000020CE  4EB9 00002226           1646          JSR         group3_decode
000020D4  6000 0074               1647          BRA         end_op
000020D8                          1648          
000020D8                          1649          *test the 1110 clump and jump to subroutine (lsl/lsr,asl/asr,rol/ror)
000020D8  B27C E000               1650  skip4   CMP.W       #match_G1110,D1
000020DC  6600 000C               1651          BNE         skip5
000020E0  4EB9 0000226E           1652          JSR         group4_decode
000020E6  6000 0062               1653          BRA         end_op
000020EA                          1654  
000020EA                          1655          *test addq
000020EA  B27C 5000               1656  skip5   CMP.W       #match_ADDQ,D1
000020EE  6600 000C               1657          BNE         skip6
000020F2  4EB9 0000232C           1658          JSR         op_ADDQ
000020F8  6000 0050               1659          BRA         end_op
000020FC                          1660          
000020FC                          1661          *test sub
000020FC  B27C 9000               1662  skip6   CMP.W       #match_SUB,D1
00002100  6600 000C               1663          BNE         skip7
00002104  4EB9 0000233A           1664          JSR         op_SUB
0000210A  6000 003E               1665          BRA         end_op
0000210E                          1666          
0000210E                          1667          *test and
0000210E  B27C C000               1668  skip7   CMP.W       #match_AND,D1
00002112  6600 000C               1669          BNE         skip8
00002116  4EB9 00002348           1670          JSR         op_AND
0000211C  6000 002C               1671          BRA         end_op
00002120                          1672          
00002120                          1673          *test or
00002120  B27C 8000               1674  skip8   CMP.W       #match_OR,D1
00002124  6600 000C               1675          BNE         skip9
00002128  4EB9 00002356           1676          JSR         op_OR
0000212E  6000 001A               1677          BRA         end_op
00002132                          1678          
00002132  B27C 7000               1679  skip9   CMP.W       #match_MOVEQ,D1
00002136  6600 000C               1680          BNE         data
0000213A  4EB9 00002364           1681          JSR         op_MOVEQ
00002140  6000 0008               1682          BRA         end_op
00002144                          1683          
00002144  4EB9 00002372           1684  data    JSR         op_DATA
0000214A                          1685          
0000214A  4CDF 7FFF               1686  end_op  MOVEM.L     (SP)+, D0-D7/A0-A6
0000214E  4E75                    1687          RTS
00002150                          1688          
00002150                          1689  move_decode:
00002150  48E7 FFFE               1690          MOVEM.L     D0-D7/A0-A6, -(SP)
00002154  3200                    1691          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002156  C27C 01C0               1692          AND.W       #mask_MOVE_A,D1  *get only the differentiating bits of move/movea
0000215A                          1693          
0000215A  B27C 0040               1694          CMP.W       #match_MOVEA,D1
0000215E  6700 000C               1695          BEQ         op_MOVEA
00002162                          1696          
00002162  6000 000E               1697          BRA         op_MOVE
00002166                          1698          
00002166  4CDF 7FFF               1699  end_MV  MOVEM.L     (SP)+, D0-D7/A0-A6
0000216A  4E75                    1700          RTS
0000216C                          1701          
0000216C                          1702  op_MOVEA:
0000216C  4EB8 144E               1703          JSR         movea_size  *find the size of the operation
00002170  60F4                    1704          BRA         end_MV
00002172                          1705  
00002172                          1706  op_MOVE:
00002172  4EB8 14B0               1707          JSR         move_size
00002176  60EE                    1708          BRA         end_MV
00002178                          1709  
00002178                          1710  group1_decode:
00002178  48E7 FFFE               1711          MOVEM.L     D0-D7/A0-A6, -(SP)
0000217C  3200                    1712          MOVE.W      D0,D1           *put the full opcode back into D1
0000217E                          1713          
0000217E  B27C 4E71               1714          CMP.W       #match_NOP,D1   *test the full opcode against NOP
00002182  6700 004E               1715          BEQ         op_NOP
00002186                          1716          
00002186  B27C 4E75               1717          CMP.W       #match_RTS,D1   *test the full opcode against RTS
0000218A  6700 004C               1718          BEQ         op_RTS
0000218E                          1719          
0000218E  C27C F1C0               1720          AND.W       #mask_LEA,D1    *test the masked opcode against LEA
00002192  B27C 41C0               1721          CMP.W       #match_LEA,D1   *look for 0100 xxx1 11xx
00002196  6700 0046               1722          BEQ         op_LEA
0000219A                          1723          
0000219A  3200                    1724          MOVE.W      D0,D1           *refresh D1 back into the full opcode
0000219C  C27C FF80               1725          AND.W       #mask_MOVEM,D1    *test the masked opcode against movem
000021A0  B27C 4880               1726          CMP.W       #match_MOVEM_RM,D1   *look for 0100 1000 1000
000021A4  6700 003E               1727          BEQ         op_MOVEM_RM
000021A8  B27C 4C80               1728          CMP.W       #match_MOVEM_MR,D1   *look for 0100 1100 1000
000021AC  6700 003C               1729          BEQ         op_MOVEM_MR
000021B0                          1730          
000021B0  3200                    1731          MOVE.W      D0,D1           *refresh D1 back into the full opcode
000021B2  C27C FFC0               1732          AND.W       #mask_JSR,D1    *test the masked opcode against JSR
000021B6  B27C 4E80               1733          CMP.W       #match_JSR,D1   *look for 0100 1110 10xx
000021BA  6700 0034               1734          BEQ         op_JSR
000021BE                          1735          
000021BE  3200                    1736          MOVE.W      D0,D1           *refresh D1 back into the full opcode
000021C0  C27C FF00               1737          AND.W       #mask_NOT,D1    *test the masked opcode against NOT
000021C4  B27C 4600               1738          CMP.W       #match_NOT,D1   *look for 0100 0110
000021C8  6700 002C               1739          BEQ         op_NOT
000021CC                          1740          
000021CC  4CDF 7FFF               1741  end_G1  MOVEM.L     (SP)+, D0-D7/A0-A6
000021D0  4E75                    1742          RTS
000021D2                          1743          
000021D2                          1744  op_NOP:
000021D2  4EB8 15D4               1745          JSR         nop_size
000021D6  60F4                    1746          BRA         end_G1
000021D8                          1747  
000021D8                          1748  op_RTS:
000021D8  4EB8 15EC               1749          JSR         rts_size
000021DC  60EE                    1750          BRA         end_G1
000021DE                          1751  
000021DE                          1752  op_LEA:
000021DE  4EB8 1604               1753          JSR         lea_size
000021E2  60E8                    1754          BRA         end_G1
000021E4                          1755          
000021E4                          1756  op_MOVEM_RM:
000021E4  4EB8 1538               1757          JSR         movem_rm_size
000021E8  60E2                    1758          BRA         end_G1
000021EA                          1759          
000021EA                          1760  op_MOVEM_MR:
000021EA  4EB8 1586               1761          JSR         movem_mr_size
000021EE  60DC                    1762          BRA         end_G1
000021F0                          1763          
000021F0                          1764  op_JSR:
000021F0  4EB8 1628               1765          JSR         jsr_size
000021F4  60D6                    1766          BRA         end_G1
000021F6                          1767  
000021F6                          1768  op_NOT:
000021F6  4EB8 164C               1769          JSR         not_size
000021FA  60D0                    1770          BRA         end_G1
000021FC                          1771  
000021FC                          1772  group2_decode:
000021FC  48E7 FFFE               1773          MOVEM.L     D0-D7/A0-A6, -(SP)
00002200  3200                    1774          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002202                          1775          
00002202  C27C F0C0               1776          AND.W       #mask_ADDA,D1   *test the masked opcode against the 
00002206  B27C D0C0               1777          CMP.W       #match_ADDA,D1  *difference between add/adda
0000220A  6700 000C               1778          BEQ         op_ADDA         
0000220E                          1779          
0000220E  6000 0010               1780          BRA         op_ADD          *if its not adda, it is add
00002212                          1781          
00002212  4CDF 7FFF               1782  end_G2  MOVEM.L     (SP)+, D0-D7/A0-A6
00002216  4E75                    1783          RTS
00002218                          1784  
00002218                          1785  op_ADDA:
00002218  4EB8 16D4               1786          JSR         adda_size
0000221C  3200                    1787          MOVE.W      D0,D1
0000221E                          1788          *JSR         ADDA_sub
0000221E                          1789          *JSR         print_ea
0000221E  60F2                    1790          BRA         end_G2
00002220                          1791  
00002220                          1792  op_ADD:
00002220  4EB8 1736               1793          JSR         add_size
00002224  60EC                    1794          BRA         end_G2
00002226                          1795  
00002226                          1796  group3_decode:
00002226  48E7 FFFE               1797          MOVEM.L     D0-D7/A0-A6, -(SP)
0000222A  3200                    1798          MOVE.W      D0,D1       *refresh the entire opcode into D1
0000222C  C27C FF00               1799          AND.W       #mask_BCC,D1
00002230                          1800          
00002230  B27C 6E00               1801          CMP.W       #match_BGT,D1   *test the first 8 bits against the BGT cond
00002234  6700 0020               1802          BEQ         op_BGT
00002238                          1803          
00002238  B27C 6700               1804          CMP.W       #match_BEQ,D1   *test the first 8 bits against the BEQ cond
0000223C  6700 001E               1805          BEQ         op_BEQ
00002240                          1806          
00002240  B27C 6F00               1807          CMP.W       #match_BLE,D1
00002244  6700 001C               1808          BEQ         op_BLE
00002248                          1809          
00002248  B27C 6000               1810          CMP.W       #match_BRA,D1   *test the first 8 bits against the BRA cond
0000224C  6700 001A               1811          BEQ         op_BRA
00002250                          1812          
00002250                          1813          
00002250                          1814          
00002250  4CDF 7FFF               1815  end_G3  MOVEM.L     (SP)+, D0-D7/A0-A6
00002254  4E75                    1816          RTS
00002256                          1817          
00002256                          1818  op_BGT:
00002256  4EB8 17FE               1819          JSR         bgt_size
0000225A  60F4                    1820          BRA         end_G3
0000225C                          1821  
0000225C                          1822  op_BEQ:
0000225C  4EB8 1874               1823          JSR         beq_size
00002260  60EE                    1824          BRA         end_G3
00002262                          1825          
00002262                          1826  op_BLE:
00002262  4EB8 18EA               1827          JSR         ble_size
00002266  60E8                    1828          BRA         end_G3
00002268                          1829  
00002268                          1830  op_BRA:
00002268  4EB8 1960               1831          JSR         bra_size
0000226C  60E2                    1832          BRA         end_G3
0000226E                          1833  
0000226E                          1834  group4_decode:
0000226E  48E7 FFFE               1835          MOVEM.L     D0-D7/A0-A6, -(SP)
00002272  3200                    1836          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002274  C27C FFC0               1837          AND.W       #mask_SHFT_M,D1   *look at the first 10 bits for memory shift
00002278                          1838          
00002278                          1839          *test memory shift left
00002278  B27C E3C0               1840          CMP.W       #match_LSL_M,D1  
0000227C  6700 0066               1841          BEQ         op_LSL_M      
00002280                          1842          
00002280                          1843          *test memory shift right
00002280  B27C E2C0               1844          CMP.W       #match_LSR_M,D1  
00002284  6700 0064               1845          BEQ         op_LSR_M    
00002288                          1846          
00002288                          1847          *test memory shift left
00002288  B27C E1C0               1848          CMP.W       #match_ASL_M,D1  
0000228C  6700 0062               1849          BEQ         op_ASL_M      
00002290                          1850          
00002290                          1851          *test memory shift right
00002290  B27C E0C0               1852          CMP.W       #match_ASR_M,D1  
00002294  6700 0060               1853          BEQ         op_ASR_M  
00002298                          1854          
00002298                          1855          *test memory rotate left
00002298  B27C E7C0               1856          CMP.W       #match_ROL_M,D1  
0000229C  6700 005E               1857          BEQ         op_ROL_M      
000022A0                          1858  
000022A0                          1859          *test memory rotate right
000022A0  B27C E6C0               1860          CMP.W       #match_ROR_M,D1  
000022A4  6700 005C               1861          BEQ         op_ROR_M  
000022A8                          1862          
000022A8                          1863          *look at select bits for the register shifts
000022A8  3200                    1864          MOVE.W      D0,D1       *refresh the entire opcode into D1
000022AA  C27C F118               1865          AND.W       #mask_SHFT_R,D1
000022AE                          1866          
000022AE  B27C E108               1867          CMP.W       #match_LSL_R,D1
000022B2  6700 0054               1868          BEQ         op_LSL_R
000022B6                          1869          
000022B6  B27C E008               1870          CMP.W       #match_LSR_R,D1
000022BA  6700 0052               1871          BEQ         op_LSR_R
000022BE                          1872          
000022BE  B27C E100               1873          CMP.W       #match_ASL_R,D1
000022C2  6700 0050               1874          BEQ         op_ASL_R
000022C6                          1875          
000022C6  B27C E000               1876          CMP.W       #match_ASR_R,D1
000022CA  6700 004E               1877          BEQ         op_ASR_R
000022CE                          1878          
000022CE  B27C E118               1879          CMP.W       #match_ROL_R,D1
000022D2  6700 004C               1880          BEQ         op_ROL_R
000022D6                          1881          
000022D6  B27C E018               1882          CMP.W       #match_ROR_R,D1
000022DA  6700 004A               1883          BEQ         op_ROR_R
000022DE                          1884          
000022DE  4CDF 7FFF               1885  end_G4  MOVEM.L     (SP)+, D0-D7/A0-A6
000022E2  4E75                    1886          RTS
000022E4                          1887          
000022E4                          1888  op_LSL_M:
000022E4  4EB8 1A80               1889          JSR     lsl_m_size
000022E8  60F4                    1890          BRA     end_G4
000022EA                          1891          
000022EA                          1892  op_LSR_M:
000022EA  4EB8 1B32               1893          JSR     lsr_m_size
000022EE  60EE                    1894          BRA     end_G4
000022F0                          1895          
000022F0                          1896  op_ASL_M:
000022F0  4EB8 1BE4               1897          JSR     asl_m_size
000022F4  60E8                    1898          BRA     end_G4
000022F6                          1899          
000022F6                          1900  op_ASR_M:
000022F6  4EB8 1C96               1901          JSR     asr_m_size
000022FA  60E2                    1902          BRA     end_G4
000022FC                          1903  
000022FC                          1904  op_ROL_M:
000022FC  4EB8 1D48               1905          JSR     rol_m_size
00002300  60DC                    1906          BRA     end_G4
00002302                          1907  
00002302                          1908  op_ROR_M:
00002302  4EB8 1DFA               1909          JSR     ror_m_size
00002306  60D6                    1910          BRA     end_G4
00002308                          1911          
00002308                          1912  op_LSL_R:
00002308  4EB8 19F8               1913          JSR     lsl_r_size
0000230C  60D0                    1914          BRA     end_G4
0000230E                          1915  
0000230E                          1916  op_LSR_R:
0000230E  4EB8 1AAA               1917          JSR     lsr_r_size
00002312  60CA                    1918          BRA     end_G4
00002314                          1919  
00002314                          1920  op_ASL_R:
00002314  4EB8 1B5C               1921          JSR     asl_r_size
00002318  60C4                    1922          BRA     end_G4
0000231A                          1923  
0000231A                          1924  op_ASR_R:
0000231A  4EB8 1C0E               1925          JSR     asr_r_size
0000231E  60BE                    1926          BRA     end_G4
00002320                          1927  
00002320                          1928  op_ROL_R:
00002320  4EB8 1CC0               1929          JSR     rol_r_size
00002324  60B8                    1930          BRA     end_G4
00002326                          1931  
00002326                          1932  op_ROR_R:
00002326  4EB8 1D72               1933          JSR     ror_r_size
0000232A  60B2                    1934          BRA     end_G4
0000232C                          1935  
0000232C                          1936  op_ADDQ:
0000232C  48E7 FFFE               1937          MOVEM.L     D0-D7/A0-A6, -(SP)
00002330                          1938          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002330  4EB8 1E24               1939          JSR         addq_size
00002334                          1940          
00002334  4CDF 7FFF               1941  end_AQ  MOVEM.L     (SP)+, D0-D7/A0-A6
00002338  4E75                    1942          RTS
0000233A                          1943  
0000233A                          1944          
0000233A                          1945  op_SUB:
0000233A  48E7 FFFE               1946          MOVEM.L     D0-D7/A0-A6, -(SP)
0000233E                          1947          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000233E  4EB8 1EAC               1948          JSR         sub_size
00002342                          1949          
00002342  4CDF 7FFF               1950  end_SB  MOVEM.L     (SP)+, D0-D7/A0-A6
00002346  4E75                    1951          RTS
00002348                          1952        
00002348                          1953  
00002348                          1954  op_AND:
00002348  48E7 FFFE               1955          MOVEM.L     D0-D7/A0-A6, -(SP)
0000234C                          1956          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000234C  4EB8 1F34               1957          JSR         and_size
00002350                          1958          
00002350  4CDF 7FFF               1959  end_AN  MOVEM.L     (SP)+, D0-D7/A0-A6
00002354  4E75                    1960          RTS
00002356                          1961          
00002356                          1962  op_OR:
00002356  48E7 FFFE               1963          MOVEM.L     D0-D7/A0-A6, -(SP)
0000235A                          1964          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000235A  4EB8 1FBC               1965          JSR         or_size
0000235E                          1966          
0000235E  4CDF 7FFF               1967  end_OR  MOVEM.L     (SP)+, D0-D7/A0-A6
00002362  4E75                    1968          RTS
00002364                          1969          
00002364                          1970  op_MOVEQ:
00002364  48E7 FFFE               1971          MOVEM.L     D0-D7/A0-A6, -(SP)
00002368                          1972          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002368  4EB8 2044               1973          JSR         moveq_size
0000236C                          1974          
0000236C                          1975  end_MOVEQ  
0000236C  4CDF 7FFF               1976          MOVEM.L     (SP)+, D0-D7/A0-A6
00002370  4E75                    1977          RTS
00002372                          1978  
00002372                          1979  op_DATA:
00002372  48E7 FFFE               1980          MOVEM.L     D0-D7/A0-A6, -(SP)
00002376  43F9 000080DF           1981          LEA         opcode_DATA,A1  *move data string into 
0000237C  3200                    1982          MOVE.W      D0,D1           *move the full data into D1 for printing
0000237E  4EB8 12F0               1983          JSR         print_data
00002382                          1984          
00002382  4CDF 7FFF               1985  end_DATA MOVEM.L     (SP)+, D0-D7/A0-A6
00002386  4E75                    1986          RTS
00002388                          1987  
00002388                          1988  
00002388                          1989  
00002388                          1990  
00002388                          1991  
00002388                          1992  
00002388                          1993  
00002388                          1994  
00002388                          1995  
00002388                          1996  
00002388                          1997  -------------------- end include --------------------
00002388                          1998              INCLUDE 'ADD Subroutine.x68'
00002388                          1999  
00002388                          2000  
00002388                          2001  ADD_ADD                                                  ;preserve the registers, 
00002388                          2002  ;-----------------------------ea,Dn-----------------------------------------------------------------------------------------------------
00002388                          2003  
00002388  4281                    2004                                         CLR.L              D1
0000238A  3200                    2005                                         MOVE.W             D0,D1
0000238C  C2BC 000001C0           2006                                         AND.L              #mask_opmode,D1                              ;load mask to determine the operand order
00002392                          2007                                  
00002392  B2BC 00000000           2008  ADD_ea_Dn_match                        CMP.L              #match_ADD_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00002398  6700 004C               2009                                         BEQ                ADD_ea_Dn                                 ;if equal go figure out data register
0000239C  6600 0002               2010                                         BNE                ADD_ea_Dn_match_w                         ;if not check word size for same order
000023A0                          2011  
000023A0  B2BC 00000040           2012  ADD_ea_Dn_match_w                      CMP.L              #match_ADD_w_Dn_ea,D1                 ;check to see if it's Dn,ea
000023A6  6700 003E               2013                                         BEQ                ADD_ea_Dn                                 ;if equal go figure out data register
000023AA  6600 0002               2014                                         BNE                ADD_ea_Dn_match_l                         ;if not check long size for same order
000023AE                          2015  
000023AE  B2BC 00000080           2016  ADD_ea_Dn_match_l                      CMP.L              #match_ADD_l_Dn_ea,D1                 ;check to see if it's Dn,ea
000023B4  6700 05D8               2017                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out data register
000023B8  6600 0002               2018                                         BNE                ADD_Dn_ea_match                           ;if not check other order
000023BC                          2019  
000023BC  B2BC 00000100           2020  ADD_Dn_ea_match                        CMP.L              #match_ADD_b_ea_Dn,D1                 ;check to see if it's ea,Dn
000023C2  6700 05CA               2021                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000023C6  6600 0002               2022                                         BNE                ADD_Dn_ea_match_w                         ;if not go check word size for same order
000023CA                          2023  
000023CA  B2BC 00000140           2024  ADD_Dn_ea_match_w                      CMP.L              #match_ADD_w_ea_Dn,D1                 ;check to see if it's ea,Dn
000023D0  6700 05BC               2025                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000023D4  6600 0002               2026                                         BNE                ADD_Dn_ea_match_l                         ;if not go check word size for same order
000023D8                          2027  
000023D8  B2BC 00000180           2028  ADD_Dn_ea_match_l                      CMP.L              #match_ADD_l_ea_Dn,D1                 ;check to see if it's ea,Dn
000023DE  6700 05AE               2029                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000023E2  6600 0970               2030                                         BNE                ADD_ERROR                                 ;if not go to error message
000023E6                          2031  ;--------------------------------------------------------------------------------------------------------------------------
000023E6                          2032  ;-------------------------------------------------------------------------------------------------------------------------
000023E6  4281                    2033  ADD_ea_Dn                        CLR.L               D1                                            ;clear D1 to load new mask                                
000023E8  3200                    2034                                   MOVE.W            D0,D1
000023EA  C2BC 00000038           2035                                   AND.L             #mask_ADD_ea_mode,D1                          ;move the mask to D1
000023F0                          2036  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
000023F0  B2BC 00000000           2037  ADD_ea_Dn_data_reg_dir           CMP.L             #match_ADD_Dn,D1                              ;check to see if mode is data reg direct
000023F6  6600 0006               2038                                   BNE               ADD_ea_Dn_add_reg_indir                             ;if not, go check add reg dir
000023FA  6700 005A               2039                                   BEQ               ADD_ea_Dn_Dn_reg                                  ;if equal go figure out the register
000023FE                          2040  
000023FE  B2BC 00000010           2041  ADD_ea_Dn_add_reg_indir          CMP.L             #match_ADD_An_indir,D1                        ;check to see if mode is add reg indir
00002404  6600 0006               2042                                   BNE               ADD_ea_Dn_add_reg_indir_predec                    ;if not, go check add reg indir predec 
00002408  6700 0156               2043                                   BEQ               ADD_ea_Dn_An_indir_reg                            ;if equal go figure out the register           
0000240C                          2044             
0000240C  B2BC 00000020           2045  ADD_ea_Dn_add_reg_indir_predec   CMP.L             #match_ADD_An_indir_predec,D1                  ;check to see if mode is add reg indor w/ postinc
00002412  6600 0006               2046                                   BNE               ADD_ea_Dn_add_reg_indir_postinc                    ;if not go check add reg indir/predec
00002416  6700 035C               2047                                   BEQ               ADD_ea_Dn_An_indir_predec                          ;if equal go figure out the register
0000241A                          2048                        
0000241A  B2BC 00000018           2049  ADD_ea_Dn_add_reg_indir_postinc  CMP.L             #match_ADD_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00002420  6600 0006               2050                                   BNE               ADD_ea_Dn_abs_add_word                                  ;if not go check abs add word
00002424  6700 0244               2051                                   BEQ               ADD_ea_Dn_An_indir_postinc_reg                          ;if equal go figure out the register
00002428                          2052  
00002428  C4BC 0000003F           2053  ADD_ea_Dn_abs_add_word           AND.L             #mask_ADD_abs_add,D2                        ;load mask to determine if abs add word or long
0000242E                          2054                                   
0000242E  B4BC 00000038           2055                                   CMP.L             #match_ADD_abs_add_word,D2                  ;check if abs add word
00002434  2A18                    2056                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00002436  6600 0006               2057                                   BNE               ADD_ea_Dn_abs_add_long                                  ;if not go check abs add long
0000243A  6700 0442               2058                                   BEQ               ADD_ea_Dn_abs_add_word_out                              ;if equal go to output
0000243E                          2059    
0000243E  B4BC 00000039           2060  ADD_ea_Dn_abs_add_long           CMP.L             #match_ADD_abs_add_long,D2                  ;check to see if abs add long
00002444  6700 0446               2061                                   BEQ               ADD_ea_Dn_abs_add_long_out                              ;if equal go to output
00002448                          2062                                   
00002448  B2BC 0000003C           2063  ADD_ea_Dn_immediate_add          CMP.L             #match_imm_add,D1                             ;check if immediate address
0000244E  6700 044C               2064                                   BEQ               ADD_ea_Dn_immediate_add_out                             ;if equal go to immediate add ADD routine
00002452  6600 0900               2065                                   BNE               ADD_ERROR                                         ;if not equal go to error mesage ADD routine
00002456                          2066  
00002456                          2067  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00002456                          2068                                   
00002456                          2069                                   
00002456                          2070  ;-----------------------------------Data Register Direct--------------------------------
00002456  4282                    2071  ADD_ea_Dn_Dn_reg                 CLR.L                D2
00002458  3400                    2072                                   MOVE.W             D0,D2
0000245A  C4BC 0000003F           2073                                   AND.L              #mask_ADD_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00002460  B4BC 00000000           2074                                   CMP.L              #match_ADD_D0,D2                       ;check to see in the register is 0
00002466  6600 0006               2075                                   BNE                ADD_ea_Dn_rD1                                     ;if not go check register 1
0000246A  6700 0064               2076                                   BEQ                ADD_ea_Dn_D0_out                              ;if equal go to output ADDroutine
0000246E                          2077  
0000246E  B4BC 00000001           2078  ADD_ea_Dn_rD1                    CMP.L              #match_ADD_D1,D2                       ;check to see in the register is 1
00002474  6600 0006               2079                                   BNE                ADD_ea_Dn_rD2                                     ;if not go check register 2
00002478  6700 0068               2080                                   BEQ                ADD_ea_Dn_D1_out                              ;if equal go to output ADDroutine
0000247C                          2081  
0000247C  B4BC 00000002           2082  ADD_ea_Dn_rD2                    CMP.L              #match_ADD_D2,D2                       ;check to see in the register is 2
00002482  6600 0006               2083                                   BNE                ADD_ea_Dn_rD3                                     ;if not go check register 3
00002486  6700 006C               2084                                   BEQ                ADD_ea_Dn_D2_out                              ;if equal go to output ADDroutine
0000248A                          2085  
0000248A  B4BC 00000003           2086  ADD_ea_Dn_rD3                    CMP.L              #match_ADD_D3,D2                       ;check to see in the register is 3
00002490  6600 0006               2087                                   BNE                ADD_ea_Dn_rD4                                     ;if not go check register 4
00002494  6700 0070               2088                                   BEQ                ADD_ea_Dn_D3_out                              ;if equal go to output ADDroutine
00002498                          2089  
00002498  B4BC 00000004           2090  ADD_ea_Dn_rD4                    CMP.L              #match_ADD_D4,D2                       ;check to see in the register is 4
0000249E  6600 0006               2091                                   BNE                ADD_ea_Dn_rD5                                     ;if not go check register 5
000024A2  6700 0074               2092                                   BEQ                ADD_ea_Dn_D4_out                              ;if equal go to output ADDroutine
000024A6                          2093  
000024A6  B4BC 00000005           2094  ADD_ea_Dn_rD5                    CMP.L              #match_ADD_D5,D2                       ;check to see in the register is 5
000024AC  6600 0006               2095                                   BNE                ADD_ea_Dn_rD6                                     ;if not go check register 6
000024B0  6700 0078               2096                                   BEQ                ADD_ea_Dn_D5_out                              ;if equal go to output ADDroutine
000024B4                          2097  
000024B4  B4BC 00000006           2098  ADD_ea_Dn_rD6                    CMP.L              #match_ADD_D6,D2                       ;check to see in the register is 6
000024BA  6600 0006               2099                                   BNE                ADD_ea_Dn_rD7                                     ;if not go check register 7
000024BE  6700 007C               2100                                   BEQ                ADD_ea_Dn_D6_out                              ;if equal go to output ADDroutine
000024C2                          2101  
000024C2  B4BC 00000007           2102  ADD_ea_Dn_rD7                    CMP.L              #match_ADD_D7,D2                       ;check to see in the register is 7
000024C8  6700 0084               2103                                   BEQ                ADD_ea_Dn_D7_out                              ;if equal go to output ADDroutine
000024CC  6600 0886               2104                                   BNE                ADD_ERROR                               ;if not equal, got to error message
000024D0                          2105  ;--------------------Data Register Direct Output-----------------------
000024D0  227C 000083F2           2106  ADD_ea_Dn_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
000024D6  4EB8 140A               2107                                  JSR             print_first
000024DA  4EB9 000028D4           2108                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024E0  4E75                    2109                                  RTS
000024E2                          2110  
000024E2  227C 000083F5           2111  ADD_ea_Dn_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
000024E8  4EB8 140A               2112                                  JSR             print_first
000024EC  4EB9 000028D4           2113                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024F2  4E75                    2114                                  RTS
000024F4                          2115  
000024F4  227C 000083F8           2116  ADD_ea_Dn_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
000024FA  4EB8 140A               2117                                  JSR             print_first
000024FE  4EB9 000028D4           2118                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002504  4E75                    2119                                  RTS
00002506                          2120  
00002506  227C 000083FB           2121  ADD_ea_Dn_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
0000250C  4EB8 140A               2122                                  JSR             print_first
00002510  4EB9 000028D4           2123                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002516  4E75                    2124                                  RTS
00002518                          2125  
00002518                          2126  
00002518  227C 000083FE           2127  ADD_ea_Dn_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
0000251E  4EB8 140A               2128                                  JSR             print_first
00002522  4EB9 000028D4           2129                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002528  4E75                    2130                                  RTS
0000252A                          2131  
0000252A                          2132  
0000252A  227C 00008401           2133  ADD_ea_Dn_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00002530  4EB8 140A               2134                                  JSR             print_first
00002534  4EB9 000028D4           2135                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000253A  4E75                    2136                                  RTS
0000253C                          2137  
0000253C  227C 00008404           2138  ADD_ea_Dn_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00002542  4EB8 140A               2139                                  JSR             print_first
00002546  4EB9 000028D4           2140                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000254C  4E75                    2141                                  RTS
0000254E                          2142  
0000254E  227C 00008407           2143  ADD_ea_Dn_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00002554  4EB8 140A               2144                                  JSR             print_first
00002558  4EB9 000028D4           2145                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000255E  4E75                    2146                                  RTS
00002560                          2147  ;------------------Address Register Indirect-----------------------
00002560  4282                    2148  ADD_ea_Dn_An_indir_reg           CLR.L           D2
00002562  3400                    2149                                   MOVE.W          D0,D2
00002564  C4BC 0000003F           2150                                   AND.L           #mask_ADD_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
0000256A                          2151                                   
0000256A  B4BC 00000010           2152                                   CMP.L           #match_ADD_An_indir_r0,D2              ;check reg is equal to 0
00002570  6600 0006               2153                                   BNE             ADD_ea_Dn_An_indir_reg1                           ;if not try reg 1
00002574  6700 0064               2154                                   BEQ             ADD_ea_Dn_An_indir_reg0_out                       ;if equal go to output ADDroutine
00002578                          2155  
00002578  B4BC 00000011           2156  ADD_ea_Dn_An_indir_reg1          CMP.L           #match_ADD_An_indir_r1,D2              ;check reg is equal to 1
0000257E  6600 0006               2157                                   BNE             ADD_ea_Dn_An_indir_reg2                           ;if not try reg 2
00002582  6700 0068               2158                                   BEQ             ADD_ea_Dn_An_indir_reg1_out                       ;if equal go to output ADDroutine
00002586                          2159  
00002586  B4BC 00000012           2160  ADD_ea_Dn_An_indir_reg2          CMP.L           #match_ADD_An_indir_r2,D2              ;check reg is equal to 2
0000258C  6600 0006               2161                                   BNE             ADD_ea_Dn_An_indir_reg3                           ;if not try reg 3
00002590  6700 006C               2162                                   BEQ             ADD_ea_Dn_An_indir_reg2_out                       ;if equal go to output ADDroutine
00002594                          2163  
00002594  B4BC 00000013           2164  ADD_ea_Dn_An_indir_reg3          CMP.L           #match_ADD_An_indir_r3,D2              ;check reg is equal to 3
0000259A  6600 0006               2165                                   BNE             ADD_ea_Dn_An_indir_reg4                           ;if not try reg 4
0000259E  6700 0070               2166                                   BEQ             ADD_ea_Dn_An_indir_reg3_out                       ;if equal go to output ADDroutine
000025A2                          2167      
000025A2  B4BC 00000014           2168  ADD_ea_Dn_An_indir_reg4          CMP.L           #match_ADD_An_indir_r4,D2              ;check reg is equal to 4
000025A8  6600 0006               2169                                   BNE             ADD_ea_Dn_An_indir_reg5                           ;if not try reg 5
000025AC  6700 0074               2170                                   BEQ             ADD_ea_Dn_An_indir_reg4_out                       ;if equal go to output ADDroutine
000025B0                          2171          
000025B0  B4BC 00000015           2172  ADD_ea_Dn_An_indir_reg5          CMP.L           #match_ADD_An_indir_r5,D2              ;check reg is equal to 5
000025B6  6600 0006               2173                                   BNE             ADD_ea_Dn_An_indir_reg6                           ;if not try reg 6
000025BA  6700 0078               2174                                   BEQ             ADD_ea_Dn_An_indir_reg5_out                       ;if equal go to output ADDroutine
000025BE                          2175  
000025BE  B4BC 00000016           2176  ADD_ea_Dn_An_indir_reg6          CMP.L           #match_ADD_An_indir_r6,D2              ;check reg is equal to 6
000025C4  6600 0006               2177                                   BNE             ADD_ea_Dn_An_indir_reg7                           ;if not try reg 7
000025C8  6700 007C               2178                                   BEQ             ADD_ea_Dn_An_indir_reg6_out                       ;if equal go to output ADDroutine
000025CC                          2179  
000025CC  B4BC 00000017           2180  ADD_ea_Dn_An_indir_reg7          CMP.L           #match_ADD_An_indir_r7,D2              ;check reg is equal to 7
000025D2  6700 0084               2181                                   BEQ             ADD_ea_Dn_An_indir_reg7_out                       ;if equal go to output ADDroutine
000025D6  6600 077C               2182                                   BNE             ADD_ERROR                                   :if not equal to an addresssing mode, pritn error
000025DA                          2183  
000025DA                          2184  ;--------------------Address Register Indirect Output-----------------------
000025DA  227C 00008432           2185  ADD_ea_Dn_An_indir_reg0_out             MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
000025E0  4EB8 140A               2186                                          JSR             print_first                                       
000025E4  4EB9 000028D4           2187                                           JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025EA  4E75                    2188                                  RTS
000025EC                          2189  
000025EC  227C 00008437           2190  ADD_ea_Dn_An_indir_reg1_out             MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
000025F2  4EB8 140A               2191                                          JSR             print_first        
000025F6  4EB9 000028D4           2192                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025FC  4E75                    2193                                  RTS
000025FE                          2194  
000025FE  227C 0000843C           2195  ADD_ea_Dn_An_indir_reg2_out             MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00002604  4EB8 140A               2196                                          JSR             print_first
00002608  4EB9 000028D4           2197                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000260E  4E75                    2198                                  RTS
00002610                          2199  
00002610  227C 00008441           2200  ADD_ea_Dn_An_indir_reg3_out             MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00002616  4EB8 140A               2201                                          JSR             print_first
0000261A  4EB9 000028D4           2202                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002620  4E75                    2203                                  RTS
00002622                          2204  
00002622  227C 00008446           2205  ADD_ea_Dn_An_indir_reg4_out             MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00002628  4EB8 140A               2206                                          JSR             print_first
0000262C  4EB9 000028D4           2207                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002632  4E75                    2208                                  RTS
00002634                          2209  
00002634  227C 0000844B           2210  ADD_ea_Dn_An_indir_reg5_out             MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
0000263A  4EB8 140A               2211                                          JSR             print_first    
0000263E  4EB9 000028D4           2212                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002644  4E75                    2213                                  RTS
00002646                          2214  
00002646  227C 00008450           2215  ADD_ea_Dn_An_indir_reg6_out             MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
0000264C  4EB8 140A               2216                                          JSR             print_first
00002650  4EB9 000028D4           2217                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002656  4E75                    2218                                  RTS
00002658                          2219                                          
00002658  227C 00008455           2220  ADD_ea_Dn_An_indir_reg7_out             MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
0000265E  4EB8 140A               2221                                          JSR             print_first
00002662  4EB9 000028D4           2222                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002668  4E75                    2223                                  RTS
0000266A                          2224  
0000266A                          2225  ;------------------Address Register Indirect with Post Increment-----------------------
0000266A  4282                    2226  ADD_ea_Dn_An_indir_postinc_reg             CLR.L       D2
0000266C  3400                    2227                                              MOVE.W     D0,D2
0000266E  C4BC 0000003F           2228                                              AND.L      #mask_ADD_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00002674                          2229                                              
00002674  B4BC 00000018           2230                                              CMP.L      #match_ADD_An_indir_postinc_r0,D2        ;check reg is equal to 0
0000267A  6600 0006               2231                                              BNE        ADD_ea_Dn_An_indir_postinc_reg1                      ;if not try reg 1
0000267E  6700 0064               2232                                              BEQ        ADD_ea_Dn_An_indir_postin_r0_out               ;if equal go to output ADDroutine
00002682                          2233  
00002682  B4BC 00000019           2234  ADD_ea_Dn_An_indir_postinc_reg1             CMP.L      #match_ADD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00002688  6600 0006               2235                                              BNE        ADD_ea_Dn_An_indir_postinc_reg2                      ;if not try reg 2
0000268C  6700 0068               2236                                              BEQ        ADD_ea_Dn_An_indir_postin_r1_out               ;if equal go to output ADDroutine
00002690                          2237  
00002690  B4BC 0000001A           2238  ADD_ea_Dn_An_indir_postinc_reg2             CMP.L      #match_ADD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00002696  6600 0006               2239                                              BNE        ADD_ea_Dn_An_indir_postinc_reg3                      ;if not try reg 3
0000269A  6700 006C               2240                                              BEQ        ADD_ea_Dn_An_indir_postin_r2_out               ;if equal go to output ADDroutine
0000269E                          2241  
0000269E  B4BC 0000001B           2242  ADD_ea_Dn_An_indir_postinc_reg3             CMP.L      #match_ADD_An_indir_postinc_r3,D2        ;check reg is equal to 3
000026A4  6600 0006               2243                                              BNE        ADD_ea_Dn_An_indir_postinc_reg4                      ;if not try reg 4
000026A8  6700 0070               2244                                              BEQ        ADD_ea_Dn_An_indir_postin_r3_out               ;if equal go to output ADDroutine
000026AC                          2245   
000026AC  B4BC 0000001C           2246  ADD_ea_Dn_An_indir_postinc_reg4             CMP.L      #match_ADD_An_indir_postinc_r4,D2        ;check reg is equal to 4
000026B2  6600 0006               2247                                              BNE        ADD_ea_Dn_An_indir_postinc_reg5                      ;if not try reg 5
000026B6  6700 0074               2248                                              BEQ        ADD_ea_Dn_An_indir_postin_r4_out               ;if equal go to output ADDroutine
000026BA                          2249  
000026BA  B4BC 0000001D           2250  ADD_ea_Dn_An_indir_postinc_reg5             CMP.L      #match_ADD_An_indir_postinc_r5,D2        ;check reg is equal to 5
000026C0  6600 0006               2251                                              BNE        ADD_ea_Dn_An_indir_postinc_reg6                      ;if not try reg 6
000026C4  6700 0078               2252                                              BEQ        ADD_ea_Dn_An_indir_postin_r5_out               ;if equal go to output ADDroutine
000026C8                          2253  
000026C8  B4BC 0000001E           2254  ADD_ea_Dn_An_indir_postinc_reg6             CMP.L      #match_ADD_An_indir_postinc_r6,D2         ;check reg is equal to 6
000026CE  6600 0006               2255                                              BNE        ADD_ea_Dn_An_indir_postinc_reg7                        ;if not try reg 7
000026D2  6700 007C               2256                                              BEQ        ADD_ea_Dn_An_indir_postin_r6_out                    ;if equal go to output ADDroutine
000026D6                          2257  
000026D6  B4BC 0000001F           2258  ADD_ea_Dn_An_indir_postinc_reg7             CMP.L      #match_ADD_An_indir_postinc_r7,D2         ;check reg is equal to 7
000026DC  6700 0084               2259                                              BEQ        ADD_ea_Dn_An_indir_postin_r7_out                    ;if equal go to output ADDroutine
000026E0  6600 0672               2260                                              BNE        ADD_ERROR                                        :if not equal to an addresssing mode, pritn error
000026E4                          2261  
000026E4                          2262  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000026E4  227C 0000845A           2263  ADD_ea_Dn_An_indir_postin_r0_out                MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
000026EA  4EB8 140A               2264                                                  JSR             print_first
000026EE  4EB9 000028D4           2265                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026F4  4E75                    2266                                  RTS
000026F6                          2267  
000026F6  227C 00008460           2268  ADD_ea_Dn_An_indir_postin_r1_out                MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
000026FC  4EB8 140A               2269                                                  JSR             print_first
00002700  4EB9 000028D4           2270                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002706  4E75                    2271                                  RTS
00002708                          2272  
00002708  227C 00008466           2273  ADD_ea_Dn_An_indir_postin_r2_out                MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
0000270E  4EB8 140A               2274                                                  JSR             print_first
00002712  4EB9 000028D4           2275                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002718  4E75                    2276                                  RTS
0000271A                          2277  
0000271A  227C 0000846C           2278  ADD_ea_Dn_An_indir_postin_r3_out                MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00002720  4EB8 140A               2279                                                  JSR             print_first
00002724  4EB9 000028D4           2280                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000272A  4E75                    2281                                  RTS
0000272C                          2282  
0000272C  227C 00008472           2283  ADD_ea_Dn_An_indir_postin_r4_out                MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00002732  4EB8 140A               2284                                                  JSR             print_first
00002736  4EB9 000028D4           2285                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000273C  4E75                    2286                                  RTS
0000273E                          2287  
0000273E  227C 00008478           2288  ADD_ea_Dn_An_indir_postin_r5_out                MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00002744  4EB8 140A               2289                                                  JSR             print_first
00002748  4EB9 000028D4           2290                                                   JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000274E  4E75                    2291                                  RTS
00002750                          2292  
00002750  227C 0000847E           2293  ADD_ea_Dn_An_indir_postin_r6_out                MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00002756  4EB8 140A               2294                                                  JSR             print_first
0000275A  4EB9 000028D4           2295                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002760  4E75                    2296                                  RTS
00002762                          2297  
00002762  227C 00008484           2298  ADD_ea_Dn_An_indir_postin_r7_out                MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00002768  4EB8 140A               2299                                                  JSR             print_first
0000276C  4EB9 000028D4           2300                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002772  4E75                    2301                                  RTS
00002774                          2302  
00002774                          2303  ;------------------Address Register Indirect with Pre Decrement-----------------------
00002774  4282                    2304  ADD_ea_Dn_An_indir_predec                   CLR.L      D2
00002776  3400                    2305                                              MOVE.W     D0,D2
00002778  C4BC 0000003F           2306                                              AND.L      #mask_ADD_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
0000277E  B4BC 00000020           2307                                              CMP.L      #match_ADD_An_indir_predec_reg0,D2       ;check reg is equal to 0
00002784                          2308                                              
00002784  6600 0006               2309                                              BNE        ADD_ea_Dn_An_indir_predec_reg1                      ;if not try reg 1
00002788  6700 0064               2310                                              BEQ        ADD_ea_Dn_An_indir_prede_r0_out               ;if equal go to output ADDroutine
0000278C                          2311  
0000278C  B4BC 00000021           2312  ADD_ea_Dn_An_indir_predec_reg1              CMP.L      #match_ADD_An_indir_predec_reg1,D2       ;check reg is equal to 1
00002792  6600 0006               2313                                              BNE        ADD_ea_Dn_An_indir_predec_reg2                      ;if not try reg 2
00002796  6700 0068               2314                                              BEQ        ADD_ea_Dn_An_indir_prede_r1_out               ;if equal go to output ADDroutine
0000279A                          2315  
0000279A  B4BC 00000022           2316  ADD_ea_Dn_An_indir_predec_reg2              CMP.L      #match_ADD_An_indir_predec_reg2,D2       ;check reg is equal to 2
000027A0  6600 0006               2317                                              BNE        ADD_ea_Dn_An_indir_predec_reg3                      ;if not try reg 3
000027A4  6700 006C               2318                                              BEQ        ADD_ea_Dn_An_indir_prede_r2_out               ;if equal go to output ADDroutine
000027A8                          2319  
000027A8  B4BC 00000023           2320  ADD_ea_Dn_An_indir_predec_reg3              CMP.L      #match_ADD_An_indir_predec_reg3,D2       ;check reg is equal to 3
000027AE  6600 0006               2321                                              BNE        ADD_ea_Dn_An_indir_predec_reg4                      ;if not try reg 4
000027B2  6700 0070               2322                                              BEQ        ADD_ea_Dn_An_indir_prede_r3_out               ;if equal go to output ADDroutine
000027B6                          2323  
000027B6  B4BC 00000024           2324  ADD_ea_Dn_An_indir_predec_reg4              CMP.L      #match_ADD_An_indir_predec_reg4,D2       ;check reg is equal to 4
000027BC  6600 0006               2325                                              BNE        ADD_ea_Dn_An_indir_predec_reg5                      ;if not try reg 5
000027C0  6700 0074               2326                                              BEQ        ADD_ea_Dn_An_indir_prede_r4_out               ;if equal go to output ADDroutine
000027C4                          2327  
000027C4  B4BC 00000025           2328  ADD_ea_Dn_An_indir_predec_reg5              CMP.L      #match_ADD_An_indir_predec_reg5,D2       ;check reg is equal to 5
000027CA  6600 0006               2329                                              BNE        ADD_ea_Dn_An_indir_predec_reg6                     ;if not try reg 6
000027CE  6700 0078               2330                                              BEQ        ADD_ea_Dn_An_indir_prede_r5_out               ;if equal go to output ADDroutine
000027D2                          2331  
000027D2  B4BC 00000026           2332  ADD_ea_Dn_An_indir_predec_reg6              CMP.L      #match_ADD_An_indir_predec_reg6,D2       ;check reg is equal to 6
000027D8  6600 0006               2333                                              BNE        ADD_ea_Dn_An_indir_predec_reg7                     ;if not try reg 7
000027DC  6700 007C               2334                                              BEQ        ADD_ea_Dn_An_indir_prede_r6_out               ;if equal go to output ADDroutine
000027E0                          2335  
000027E0  B4BC 00000027           2336  ADD_ea_Dn_An_indir_predec_reg7              CMP.L      #match_ADD_An_indir_predec_reg7,D2       ;check reg is equal to 7
000027E6  6700 0084               2337                                              BEQ        ADD_ea_Dn_An_indir_prede_r7_out               ;if equal go to output ADDroutine
000027EA  6600 0568               2338                                              BNE        ADD_ERROR                                    :if not equal to an addresssing mode, pritn error
000027EE                          2339  
000027EE                          2340  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000027EE  227C 0000848A           2341  ADD_ea_Dn_An_indir_prede_r0_out         MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
000027F4  4EB8 140A               2342                                          JSR             print_first
000027F8  4EB9 000028D4           2343                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000027FE  4E75                    2344                                  RTS                                         
00002800                          2345  
00002800  227C 00008490           2346  ADD_ea_Dn_An_indir_prede_r1_out         MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
00002806  4EB8 140A               2347                                          JSR             print_first
0000280A  4EB9 000028D4           2348                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002810  4E75                    2349                                  RTS
00002812                          2350  
00002812  227C 00008496           2351  ADD_ea_Dn_An_indir_prede_r2_out         MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
00002818  4EB8 140A               2352                                          JSR             print_first
0000281C  4EB9 000028D4           2353                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002822  4E75                    2354                                  RTS
00002824                          2355  
00002824  227C 0000849C           2356  ADD_ea_Dn_An_indir_prede_r3_out         MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
0000282A  4EB8 140A               2357                                          JSR             print_first
0000282E  4EB9 000028D4           2358                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002834  4E75                    2359                                  RTS
00002836                          2360  
00002836  227C 000084A2           2361  ADD_ea_Dn_An_indir_prede_r4_out         MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
0000283C  4EB8 140A               2362                                          JSR             print_first
00002840  4EB9 000028D4           2363                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002846  4E75                    2364                                  RTS
00002848                          2365  
00002848  227C 000084A8           2366  ADD_ea_Dn_An_indir_prede_r5_out         MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
0000284E  4EB8 140A               2367                                          JSR             print_first
00002852  4EB9 000028D4           2368                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002858  4E75                    2369                                  RTS
0000285A                          2370  
0000285A  227C 000084AE           2371  ADD_ea_Dn_An_indir_prede_r6_out         MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
00002860  4EB8 140A               2372                                          JSR             print_first
00002864  4EB9 000028D4           2373                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000286A  4E75                    2374                                  RTS
0000286C                          2375  
0000286C  227C 000084B4           2376  ADD_ea_Dn_An_indir_prede_r7_out         MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00002872  4EB8 140A               2377                                          JSR             print_first
00002876  4EB9 000028D4           2378                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000287C  4E75                    2379                                  RTS
0000287E                          2380          
0000287E                          2381  ;------------------Absolute Addressing Output-----------------------
0000287E  22FC 000084C4           2382  ADD_ea_Dn_abs_add_word_out            MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002884  22C5                    2383                                        MOVE.L      D5,(A1)+                           ;load address                  
00002886  4EB8 140A               2384                                        JSR             print_first
0000288A  4E75                    2385                                        RTS                                            :return to ADDroutine
0000288C                          2386                                             
0000288C                          2387  
0000288C  2A18                    2388  ADD_ea_Dn_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000288E  22FC 000084C4           2389                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002894  22C5                    2390                                        MOVE.L      D5,(A1)+                           ;load address                  
00002896  4EB8 140A               2391                                        JSR             print_first
0000289A  4E75                    2392                                        RTS                                            :return to ADDroutine                                            
0000289C                          2393  ;---------------Immediate Addresing---------------------------
0000289C  2A18                    2394  ADD_ea_Dn_immediate_add_out          MOVE.L     (A0)+,D5                             ;capture the immediate address
0000289E  BCBC 000000FC           2395                                       CMP.L       #match_imm_add_word,D6               ;check to see if need to pull word
000028A4  2A18                    2396                                       MOVE.L      (A0)+,D5                            ;pull the word
000028A6  6700 0006               2397                                       BEQ         ADD_ea_Dn_imm_add_w                           ;if equal go pull word    
000028AA  6600 0014               2398                                       BNE         ADD_ea_Dn_imm_add_l                           ;if not equal, go check long
000028AE                          2399                                           
000028AE  22FC 000084C4           2400  ADD_ea_Dn_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
000028B4  32C5                    2401                                        MOVE.W     D5,(A1)+                             ;load the word address                           
000028B6  4EB8 140A               2402                                          JSR             print_first
000028BA  4EB9 000028D4           2403                                        JSR        ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000028C0                          2404                                           
000028C0  2A18                    2405  ADD_ea_Dn_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
000028C2  22FC 000084C4           2406                                        MOVE.L     #ea_$,(A1)+                          ;load the $
000028C8  2245                    2407                                        MOVE.L     D5,A1                               ;move to A
000028CA  4EB8 140A               2408                                        JSR             print_first
000028CE  4EB9 000028D4           2409                                        JSR        ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000028D4                          2410  
000028D4                          2411  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000028D4  4282                    2412  ADD_determine_second_op                         CLR.L       D2                          ;clear D2 
000028D6  3400                    2413                                                  MOVE.W      D0,D2                                               
000028D8  C4BC 00000E00           2414                                                  AND.L       #mask_ADD_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
000028DE                          2415                                                  
000028DE  B4BC 00000000           2416  ea_Dn_ADD_reg0                                  CMP.L       #match_ADD_reg0,D2      ;check to see if reg equal 0
000028E4  6600 0006               2417                                                  BNE         ea_Dn_ADD_reg1                  ;if not equal got check reg 1
000028E8  6700 0064               2418                                                  BEQ         ea_Dn_ADD_reg0_out              ;if equal go to output
000028EC                          2419                                                  
000028EC  B4BC 00000200           2420  ea_Dn_ADD_reg1                                  CMP.L       #match_ADD_reg1,D2      ;check to see if reg equal 1
000028F2  6600 0006               2421                                                  BNE         ea_Dn_ADD_reg2                  ;if not equal got check reg 2
000028F6  6700 005E               2422                                                  BEQ         ea_Dn_ADD_reg1_out              ;if equal go to output
000028FA                          2423  
000028FA  B4BC 00000400           2424  ea_Dn_ADD_reg2                                  CMP.L       #match_ADD_reg2,D2      ;check to see if reg equal 2
00002900  6600 0006               2425                                                  BNE         ea_Dn_ADD_reg3                  ;if not equal got check reg 3
00002904  6700 0058               2426                                                  BEQ         ea_Dn_ADD_reg2_out              ;if equal go to output
00002908                          2427  
00002908  B4BC 00000600           2428  ea_Dn_ADD_reg3                                  CMP.L       #match_ADD_reg3,D2      ;check to see if reg equal 3
0000290E  6600 0006               2429                                                  BNE         ea_Dn_ADD_reg4                  ;if not equal got check reg 4
00002912  6700 0052               2430                                                  BEQ         ea_Dn_ADD_reg3_out              ;if equal go to output
00002916                          2431                                                  
00002916  B4BC 00000800           2432  ea_Dn_ADD_reg4                                  CMP.L       #match_ADD_reg4,D2      ;check to see if reg equal 4
0000291C  6600 0006               2433                                                  BNE         ea_Dn_ADD_reg5                  ;if not equal got check reg 5
00002920  6700 004C               2434                                                  BEQ         ea_Dn_ADD_reg4_out              ;if equal go to output
00002924                          2435  
00002924  B4BC 00000A00           2436  ea_Dn_ADD_reg5                                  CMP.L       #match_ADD_reg5,D2      ;check to see if reg equal 5
0000292A  6600 0006               2437                                                  BNE         ea_Dn_ADD_reg6                  ;if not equal got check reg 6
0000292E  6700 0046               2438                                                  BEQ         ea_Dn_ADD_reg5_out              ;if equal go to output
00002932                          2439  
00002932  B4BC 00000C00           2440  ea_Dn_ADD_reg6                                  CMP.L       #match_ADD_reg6,D2      ;check to see if reg equal 6
00002938  6600 0006               2441                                                  BNE         ea_Dn_ADD_reg7                  ;if not equal got check reg 7
0000293C  6700 0040               2442                                                  BEQ         ea_Dn_ADD_reg6_out              ;if equal go to output          
00002940                          2443  
00002940  B4BC 00000E00           2444  ea_Dn_ADD_reg7                                  CMP.L       #match_ADD_reg7,D2      ;check to see if reg equal 7
00002946  6700 003E               2445                                                  BEQ         ea_Dn_ADD_reg7_out              ;if equal go to output
0000294A  6600 0408               2446                                                  BNE         ADD_ERROR                         ;if not equal to an addresssing mode, pritn error
0000294E                          2447                                  
0000294E                          2448  
0000294E                          2449  ;--------------------Data Output-----------------------
0000294E  227C 000083F2           2450  ea_Dn_ADD_reg0_out                         MOVE.L           #ea_D0,A1                                          ;load string constant into A1
00002954  4E75                    2451                                              RTS
00002956                          2452                                              
00002956  227C 000083F5           2453  ea_Dn_ADD_reg1_out                         MOVE.L           #ea_D1,A1                                       ;load string constant into A1
0000295C  4E75                    2454                                              RTS
0000295E                          2455                                              
0000295E  227C 000083F8           2456  ea_Dn_ADD_reg2_out                         MOVE.L           #ea_D2,A1                                       ;load string constant into A1
00002964  4E75                    2457                                              RTS
00002966                          2458                                              
00002966  227C 000083FB           2459  ea_Dn_ADD_reg3_out                         MOVE.L           #ea_D3,A1                                           ;load string constant into A1
0000296C  4E75                    2460                                              RTS
0000296E                          2461                                              
0000296E  227C 000083FE           2462  ea_Dn_ADD_reg4_out                         MOVE.L           #ea_D4,A1                                           ;load string constant into A1
00002974  4E75                    2463                                              RTS
00002976                          2464                                              
00002976  227C 00008401           2465  ea_Dn_ADD_reg5_out                         MOVE.L           #ea_D5,A1                                           ;load string constant into A1
0000297C  4E75                    2466                                              RTS
0000297E                          2467                                              
0000297E  227C 00008404           2468  ea_Dn_ADD_reg6_out                         MOVE.L           #ea_D6,A1                                           ;load string constant into A1
00002984  4E75                    2469                                              RTS
00002986                          2470                                              
00002986  227C 00008407           2471  ea_Dn_ADD_reg7_out                         MOVE.L           #ea_D7,A1                                           ;load string constant into A1
0000298C  4E75                    2472                                              RTS             
0000298E                          2473                                              
0000298E                          2474                      
0000298E                          2475  
0000298E                          2476  
0000298E                          2477  
0000298E                          2478  
0000298E                          2479  
0000298E                          2480  
0000298E                          2481  
0000298E                          2482  
0000298E                          2483  
0000298E                          2484  
0000298E                          2485  
0000298E                          2486  
0000298E                          2487  
0000298E                          2488  
0000298E                          2489  
0000298E                          2490  
0000298E                          2491  
0000298E                          2492  
0000298E                          2493  
0000298E                          2494  
0000298E                          2495  
0000298E                          2496  
0000298E                          2497  
0000298E                          2498  
0000298E                          2499  
0000298E                          2500  
0000298E                          2501  
0000298E                          2502  
0000298E                          2503  
0000298E                          2504  
0000298E                          2505                          
0000298E                          2506  ;------------------------------------------------------------------------------------------------------------------------------------------
0000298E                          2507  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
0000298E                          2508  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
0000298E  4282                    2509  ADD_Dn_ea                                       CLR.L       D2                                ;clear D2 
00002990  3400                    2510                                                  MOVE.W      D0,D2
00002992  C4BC 00000E00           2511                                                  AND.L       #mask_ADD_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
00002998                          2512                                                  
00002998  B4BC 00000000           2513  Dn_ea_ADD_reg0                                  CMP.L       #match_ADD_reg0,D2                  ;check to see if reg equal 0
0000299E  6600 0006               2514                                                  BNE         Dn_ea_ADD_reg1                  ;if not equal got check reg 1
000029A2  6700 0064               2515                                                  BEQ         Dn_ea_ADD_reg0_out              ;if equal go to output
000029A6                          2516                                                  
000029A6  B4BC 00000200           2517  Dn_ea_ADD_reg1                                  CMP.L       #match_ADD_reg1,D2                  ;check to see if reg equal 1
000029AC  6600 0006               2518                                                  BNE         Dn_ea_ADD_reg2                  ;if not equal got check reg 2
000029B0  6700 0068               2519                                                  BEQ         Dn_ea_ADD_reg1_out              ;if equal go to output
000029B4                          2520  
000029B4  B4BC 00000400           2521  Dn_ea_ADD_reg2                                  CMP.L       #match_ADD_reg2,D2                  ;check to see if reg equal 2
000029BA  6600 0006               2522                                                  BNE         Dn_ea_ADD_reg3                  ;if not equal got check reg 3
000029BE  6700 006C               2523                                                  BEQ         Dn_ea_ADD_reg2_out              ;if equal go to output
000029C2                          2524  
000029C2  B4BC 00000600           2525  Dn_ea_ADD_reg3                                  CMP.L       #match_ADD_reg3,D2                  ;check to see if reg equal 3
000029C8  6600 0006               2526                                                  BNE         Dn_ea_ADD_reg4                  ;if not equal got check reg 4
000029CC  6700 0070               2527                                                  BEQ         Dn_ea_ADD_reg3_out              ;if equal go to output
000029D0                          2528                                                  
000029D0  B4BC 00000800           2529  Dn_ea_ADD_reg4                                  CMP.L       #match_ADD_reg4,D2                  ;check to see if reg equal 4
000029D6  6600 0006               2530                                                  BNE         Dn_ea_ADD_reg5                  ;if not equal got check reg 5
000029DA  6700 0074               2531                                                  BEQ         Dn_ea_ADD_reg4_out              ;if equal go to output
000029DE                          2532  
000029DE  B4BC 00000A00           2533  Dn_ea_ADD_reg5                                  CMP.L       #match_ADD_reg5,D2                  ;check to see if reg equal 5
000029E4  6600 0006               2534                                                  BNE         Dn_ea_ADD_reg6                  ;if not equal got check reg 6
000029E8  6700 0078               2535                                                  BEQ         Dn_ea_ADD_reg5_out              ;if equal go to output
000029EC                          2536  
000029EC  B4BC 00000C00           2537  Dn_ea_ADD_reg6                                  CMP.L       #match_ADD_reg6,D2                  ;check to see if reg equal 6
000029F2  6600 0006               2538                                                  BNE         Dn_ea_ADD_reg7                  ;if not equal got check reg 7
000029F6  6700 007C               2539                                                  BEQ         Dn_ea_ADD_reg6_out              ;if equal go to output          
000029FA                          2540  
000029FA  B4BC 00000E00           2541  Dn_ea_ADD_reg7                                  CMP.L       #match_ADD_reg7,D2                  ;check to see if reg equal 7
00002A00  6700 0084               2542                                                  BEQ         Dn_ea_ADD_reg7_out              ;if equal go to output
00002A04  6600 034E               2543                                                  BNE         ADD_ERROR                                ;if not equal to an addresssing mode, pritn error
00002A08                          2544                                  
00002A08                          2545  
00002A08                          2546  ;--------------------Data Output-----------------------
00002A08  227C 000083F2           2547  Dn_ea_ADD_reg0_out               MOVE.L         #ea_D0,A1                                          ;load string constant into A1
00002A0E  4EB8 140A               2548                                   JSR            print_first
00002A12  4EB9 00002A98           2549                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002A18  4E75                    2550                                  RTS
00002A1A                          2551                                              
00002A1A  227C 000083F5           2552  Dn_ea_ADD_reg1_out               MOVE.L         #ea_D1,A1                                       ;load string constant into A1
00002A20  4EB8 140A               2553                                   JSR            print_first
00002A24  4EB9 00002A98           2554                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002A2A  4E75                    2555                                  RTS
00002A2C                          2556                                              
00002A2C  227C 000083F8           2557  Dn_ea_ADD_reg2_out               MOVE.L         #ea_D2,A1                                       ;load string constant into A1
00002A32  4EB8 140A               2558                                   JSR            print_first
00002A36  4EB9 00002A98           2559                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002A3C  4E75                    2560                                  RTS
00002A3E                          2561                                              
00002A3E  227C 000083FB           2562  Dn_ea_ADD_reg3_out               MOVE.L         #ea_D3,A1                                           ;load string constant into A1
00002A44  4EB8 140A               2563                                   JSR            print_first
00002A48  4EB9 00002A98           2564                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002A4E  4E75                    2565                                  RTS
00002A50                          2566                                              
00002A50  227C 000083FE           2567  Dn_ea_ADD_reg4_out               MOVE.L         #ea_D4,A1                                           ;load string constant into A1
00002A56  4EB8 140A               2568                                   JSR            print_first
00002A5A  4EB9 00002A98           2569                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002A60  4E75                    2570                                  RTS
00002A62                          2571                                              
00002A62  227C 00008401           2572  Dn_ea_ADD_reg5_out               MOVE.L         #ea_D5,A1                                           ;load string constant into A1
00002A68  4EB8 140A               2573                                   JSR            print_first
00002A6C  4EB9 00002A98           2574                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002A72  4E75                    2575                                  RTS
00002A74                          2576                                              
00002A74  227C 00008404           2577  Dn_ea_ADD_reg6_out               MOVE.L         #ea_D6,A1                                           ;load string constant into A1
00002A7A  4EB8 140A               2578                                   JSR            print_first
00002A7E  4EB9 00002A98           2579                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002A84  4E75                    2580                                  RTS
00002A86                          2581                                              
00002A86  227C 00008407           2582  Dn_ea_ADD_reg7_out               MOVE.L         #ea_D7,A1                                           ;load string constant into A1
00002A8C  4EB8 140A               2583                                   JSR            print_first
00002A90  4EB9 00002A98           2584                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002A96  4E75                    2585                                  RTS
00002A98                          2586                                              
00002A98                          2587  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00002A98  4241                    2588  ADD_determine_second_operand     CLR               D1                                            ;clear D1 to load new mask                                
00002A9A  3200                    2589                                  MOVE.W             D0,D1 
00002A9C  C2BC 00000038           2590                                  AND.L             #mask_ADD_ea_mode,D1                        ;move the mask to D1
00002AA2                          2591  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00002AA2  B2BC 00000010           2592  ADD_Dn_ea_add_reg_indir          CMP.L             #match_ADD_An_indir,D1                      ;check to see if mode is add reg indir
00002AA8  6600 0006               2593                                   BNE               ADD_Dn_ea_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00002AAC  6700 0046               2594                                   BEQ               ADD_Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
00002AB0                          2595             
00002AB0  B2BC 00000020           2596  ADD_Dn_ea_add_reg_indir_predec   CMP.L             #match_ADD_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00002AB6  6600 0006               2597                                   BNE               ADD_Dn_ea_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00002ABA  6700 01A6               2598                                   BEQ               ADD_Dn_ea_An_indir_predec                               ;if equal go figure out the register
00002ABE                          2599                        
00002ABE  B2BC 00000018           2600  ADD_Dn_ea_add_reg_indir_postinc  CMP.L             #match_ADD_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00002AC4  6600 0006               2601                                   BNE               ADD_Dn_ea_abs_add_word                                  ;if not go check abs add word
00002AC8  6700 00E4               2602                                   BEQ               ADD_Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
00002ACC                          2603  
00002ACC  4282                    2604  ADD_Dn_ea_abs_add_word           CLR.L             D2
00002ACE  3400                    2605                                   MOVE.W            D0,D2
00002AD0  C4BC 0000003F           2606                                   AND.L             #mask_ADD_abs_add,D2                        ;load mask to determine if abs add word or long
00002AD6                          2607                                   
00002AD6  B4BC 00000038           2608                                   CMP.L             #match_ADD_abs_add_word,D2                  ;check if abs add word
00002ADC  2A18                    2609                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00002ADE  6600 0006               2610                                   BNE               ADD_Dn_ea_abs_add_long                                  ;if not go check abs add long
00002AE2  6700 0232               2611                                   BEQ               ADD_Dn_ea_abs_add_word_out                              ;if equal go to output
00002AE6                          2612    
00002AE6  B4BC 00000039           2613  ADD_Dn_ea_abs_add_long           CMP.L             #match_ADD_abs_add_long,D2                  ;check to see if abs add long
00002AEC  6700 0232               2614                                   BEQ               ADD_Dn_ea_abs_add_long_out                              ;if equal go to output
00002AF0  6600 0262               2615                                   BNE               ADD_ERROR                                         ;if not equal go to error mesage ADD routine
00002AF4                          2616  
00002AF4                          2617  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00002AF4                          2618                                   
00002AF4                          2619                                   
00002AF4                          2620  ;------------------Address Register Indirect-----------------------
00002AF4  4282                    2621  ADD_Dn_ea_An_indir_reg          CLR.L           D2
00002AF6  3400                    2622                                  MOVE.W          D0,D2 
00002AF8  C4BC 0000003F           2623                                  AND.L           #mask_ADD_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
00002AFE  B4BC 00000010           2624                                   CMP.L          #match_ADD_An_indir_r0,D2              ;check reg is equal to 0
00002B04  6600 0006               2625                                   BNE             ADD_Dn_ea_An_indir_reg1                           ;if not try reg 1
00002B08  6700 0064               2626                                   BEQ             ADD_Dn_ea_An_indir_reg0_out                       ;if equal go to output ADDroutine
00002B0C                          2627  
00002B0C  B4BC 00000011           2628  ADD_Dn_ea_An_indir_reg1          CMP.L           #match_ADD_An_indir_r1,D2              ;check reg is equal to 1
00002B12  6600 0006               2629                                   BNE             ADD_Dn_ea_An_indir_reg2                           ;if not try reg 2
00002B16  6700 005E               2630                                   BEQ             ADD_Dn_ea_An_indir_reg1_out                       ;if equal go to output ADDroutine
00002B1A                          2631  
00002B1A  B4BC 00000012           2632  ADD_Dn_ea_An_indir_reg2          CMP.L           #match_ADD_An_indir_r2,D2              ;check reg is equal to 2
00002B20  6600 0006               2633                                   BNE             ADD_Dn_ea_An_indir_reg3                           ;if not try reg 3
00002B24  6700 0058               2634                                   BEQ             ADD_Dn_ea_An_indir_reg2_out                       ;if equal go to output ADDroutine
00002B28                          2635  
00002B28  B4BC 00000013           2636  ADD_Dn_ea_An_indir_reg3          CMP.L           #match_ADD_An_indir_r3,D2              ;check reg is equal to 3
00002B2E  6600 0006               2637                                   BNE             ADD_Dn_ea_An_indir_reg4                           ;if not try reg 4
00002B32  6700 0052               2638                                   BEQ             ADD_Dn_ea_An_indir_reg3_out                       ;if equal go to output ADDroutine
00002B36                          2639      
00002B36  B4BC 00000014           2640  ADD_Dn_ea_An_indir_reg4          CMP.L           #match_ADD_An_indir_r4,D2              ;check reg is equal to 4
00002B3C  6600 0006               2641                                   BNE             ADD_Dn_ea_An_indir_reg5                           ;if not try reg 5
00002B40  6700 004C               2642                                   BEQ             ADD_Dn_ea_An_indir_reg4_out                       ;if equal go to output ADDroutine
00002B44                          2643          
00002B44  B4BC 00000015           2644  ADD_Dn_ea_An_indir_reg5          CMP.L           #match_ADD_An_indir_r5,D2              ;check reg is equal to 5
00002B4A  6600 0006               2645                                   BNE             ADD_Dn_ea_An_indir_reg6                           ;if not try reg 6
00002B4E  6700 0046               2646                                   BEQ             ADD_Dn_ea_An_indir_reg5_out                       ;if equal go to output ADDroutine
00002B52                          2647  
00002B52  B4BC 00000016           2648  ADD_Dn_ea_An_indir_reg6          CMP.L           #match_ADD_An_indir_r6,D2              ;check reg is equal to 6
00002B58  6600 0006               2649                                   BNE             ADD_Dn_ea_An_indir_reg7                           ;if not try reg 7
00002B5C  6700 0040               2650                                   BEQ             ADD_Dn_ea_An_indir_reg6_out                       ;if equal go to output ADDroutine
00002B60                          2651  
00002B60  B4BC 00000017           2652  ADD_Dn_ea_An_indir_reg7          CMP.L           #match_ADD_An_indir_r7,D2              ;check reg is equal to 7
00002B66  6700 003E               2653                                   BEQ             ADD_Dn_ea_An_indir_reg7_out                       ;if equal go to output ADDroutine
00002B6A  6600 01E8               2654                                   BNE             ADD_ERROR                                   :if not equal to an addresssing mode, pritn error
00002B6E                          2655  
00002B6E                          2656  ;--------------------Address Register Indirect Output-----------------------
00002B6E  227C 00008432           2657  ADD_Dn_ea_An_indir_reg0_out         MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00002B74  4E75                    2658                                       RTS
00002B76                          2659  
00002B76  227C 00008437           2660  ADD_Dn_ea_An_indir_reg1_out         MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00002B7C  4E75                    2661                                       RTS
00002B7E                          2662  
00002B7E  227C 0000843C           2663  ADD_Dn_ea_An_indir_reg2_out         MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00002B84  4E75                    2664                                       RTS
00002B86                          2665  
00002B86  227C 00008441           2666  ADD_Dn_ea_An_indir_reg3_out         MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00002B8C  4E75                    2667                                       RTS
00002B8E                          2668  
00002B8E  227C 00008446           2669  ADD_Dn_ea_An_indir_reg4_out         MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00002B94  4E75                    2670                                       RTS
00002B96                          2671  
00002B96  227C 0000844B           2672  ADD_Dn_ea_An_indir_reg5_out         MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00002B9C  4E75                    2673                                       RTS
00002B9E                          2674  
00002B9E  227C 00008450           2675  ADD_Dn_ea_An_indir_reg6_out         MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00002BA4  4E75                    2676                                       RTS
00002BA6                          2677                                          
00002BA6  227C 00008455           2678  ADD_Dn_ea_An_indir_reg7_out         MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00002BAC  4E75                    2679                                       RTS
00002BAE                          2680  
00002BAE                          2681  ;------------------Address Register Indirect with Post Increment-----------------------
00002BAE  4282                    2682  ADD_Dn_ea_An_indir_postinc_reg              CLR.L           D2
00002BB0  3400                    2683                                              MOVE.W          D0,D2 
00002BB2  B4BC 00000018           2684                                              CMP.L      #match_ADD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00002BB8  6600 0006               2685                                              BNE        ADD_Dn_ea_An_indir_postinc_reg1                      ;if not try reg 1
00002BBC  6700 0064               2686                                              BEQ        ADD_Dn_ea_An_indir_postin_r0_out                  ;if equal go to output ADDroutine
00002BC0                          2687  
00002BC0  B4BC 00000019           2688  ADD_Dn_ea_An_indir_postinc_reg1             CMP.L      #match_ADD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00002BC6  6600 0006               2689                                              BNE        ADD_Dn_ea_An_indir_postinc_reg2                      ;if not try reg 2
00002BCA  6700 005E               2690                                              BEQ        ADD_Dn_ea_An_indir_postin_r1_out                  ;if equal go to output ADDroutine
00002BCE                          2691  
00002BCE  B4BC 0000001A           2692  ADD_Dn_ea_An_indir_postinc_reg2             CMP.L      #match_ADD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00002BD4  6600 0006               2693                                              BNE        ADD_Dn_ea_An_indir_postinc_reg3                      ;if not try reg 3
00002BD8  6700 0058               2694                                              BEQ        ADD_Dn_ea_An_indir_postin_r2_out                  ;if equal go to output ADDroutine
00002BDC                          2695  
00002BDC  B4BC 0000001B           2696  ADD_Dn_ea_An_indir_postinc_reg3             CMP.L      #match_ADD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00002BE2  6600 0006               2697                                              BNE        ADD_Dn_ea_An_indir_postinc_reg4                      ;if not try reg 4
00002BE6  6700 0052               2698                                              BEQ        ADD_Dn_ea_An_indir_postin_r3_out                  ;if equal go to output ADDroutine
00002BEA                          2699   
00002BEA  B4BC 0000001C           2700  ADD_Dn_ea_An_indir_postinc_reg4             CMP.L      #match_ADD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00002BF0  6600 0006               2701                                              BNE        ADD_Dn_ea_An_indir_postinc_reg5                      ;if not try reg 5
00002BF4  6700 004C               2702                                              BEQ        ADD_Dn_ea_An_indir_postin_r4_out                  ;if equal go to output ADDroutine
00002BF8                          2703  
00002BF8  B4BC 0000001D           2704  ADD_Dn_ea_An_indir_postinc_reg5             CMP.L      #match_ADD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00002BFE  6600 0006               2705                                              BNE        ADD_Dn_ea_An_indir_postinc_reg6                      ;if not try reg 6
00002C02  6700 0046               2706                                              BEQ        ADD_Dn_ea_An_indir_postin_r5_out                  ;if equal go to output ADDroutine
00002C06                          2707  
00002C06  B4BC 0000001E           2708  ADD_Dn_ea_An_indir_postinc_reg6             CMP.L      #match_ADD_An_indir_postinc_r6,D2         ;check reg is equal to 6
00002C0C  6600 0006               2709                                              BNE        ADD_Dn_ea_An_indir_postinc_reg7                        ;if not try reg 7
00002C10  6700 0040               2710                                              BEQ        ADD_Dn_ea_An_indir_postin_r6_out                    ;if equal go to output ADDroutine
00002C14                          2711  
00002C14  B4BC 0000001F           2712  ADD_Dn_ea_An_indir_postinc_reg7             CMP.L      #match_ADD_An_indir_postinc_r7,D2         ;check reg is equal to 7
00002C1A  6700 003E               2713                                              BEQ        ADD_Dn_ea_An_indir_postin_r7_out                    ;if equal go to output ADDroutine
00002C1E  6600 0134               2714                                              BNE        ADD_ERROR                                        :if not equal to an addresssing mode, pritn error
00002C22                          2715  
00002C22                          2716  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00002C22  227C 0000845A           2717  ADD_Dn_ea_An_indir_postin_r0_out                MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00002C28  4E75                    2718                                                  RTS
00002C2A                          2719  
00002C2A  227C 00008460           2720  ADD_Dn_ea_An_indir_postin_r1_out                MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00002C30  4E75                    2721                                                  RTS
00002C32                          2722  
00002C32  227C 00008466           2723  ADD_Dn_ea_An_indir_postin_r2_out                MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00002C38  4E75                    2724                                                  RTS
00002C3A                          2725  
00002C3A  227C 0000846C           2726  ADD_Dn_ea_An_indir_postin_r3_out                MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00002C40  4E75                    2727                                                  RTS
00002C42                          2728  
00002C42  227C 00008472           2729  ADD_Dn_ea_An_indir_postin_r4_out                MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00002C48  4E75                    2730                                                  RTS
00002C4A                          2731  
00002C4A  227C 00008478           2732  ADD_Dn_ea_An_indir_postin_r5_out                MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00002C50  4E75                    2733                                                  RTS
00002C52                          2734  
00002C52  227C 0000847E           2735  ADD_Dn_ea_An_indir_postin_r6_out                MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00002C58  4E75                    2736                                                  RTS
00002C5A                          2737  
00002C5A  227C 00008484           2738  ADD_Dn_ea_An_indir_postin_r7_out                MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00002C60  4E75                    2739                                                  RTS
00002C62                          2740  
00002C62                          2741  ;------------------Address Register Indirect with Pre Decrement-----------------------
00002C62  4282                    2742  ADD_Dn_ea_An_indir_predec                   CLR.L           D2
00002C64  3400                    2743                                              MOVE.W          D0,D2 
00002C66  B4BC 00000020           2744                                              CMP.L      #match_ADD_An_indir_predec_reg0,D2       ;check reg is equal to 0
00002C6C  6600 0006               2745                                              BNE        ADD_Dn_ea_An_indir_predec_reg1                      ;if not try reg 1
00002C70  6700 0064               2746                                              BEQ        ADD_Dn_ea_An_indir_prede_r0_out               ;if equal go to output ADDroutine
00002C74                          2747  
00002C74  B4BC 00000021           2748  ADD_Dn_ea_An_indir_predec_reg1              CMP.L      #match_ADD_An_indir_predec_reg1,D2       ;check reg is equal to 1
00002C7A  6600 0006               2749                                              BNE        ADD_Dn_ea_An_indir_predec_reg2                      ;if not try reg 2
00002C7E  6700 005E               2750                                              BEQ        ADD_Dn_ea_An_indir_prede_r1_out               ;if equal go to output ADDroutine
00002C82                          2751  
00002C82  B4BC 00000022           2752  ADD_Dn_ea_An_indir_predec_reg2              CMP.L      #match_ADD_An_indir_predec_reg2,D2       ;check reg is equal to 2
00002C88  6600 0006               2753                                              BNE        ADD_Dn_ea_An_indir_predec_reg3                      ;if not try reg 3
00002C8C  6700 0058               2754                                              BEQ        ADD_Dn_ea_An_indir_prede_r2_out               ;if equal go to output ADDroutine
00002C90                          2755  
00002C90  B4BC 00000023           2756  ADD_Dn_ea_An_indir_predec_reg3              CMP.L      #match_ADD_An_indir_predec_reg3,D2       ;check reg is equal to 3
00002C96  6600 0006               2757                                              BNE        ADD_Dn_ea_An_indir_predec_reg4                      ;if not try reg 4
00002C9A  6700 0052               2758                                              BEQ        ADD_Dn_ea_An_indir_prede_r3_out               ;if equal go to output ADDroutine
00002C9E                          2759  
00002C9E  B4BC 00000024           2760  ADD_Dn_ea_An_indir_predec_reg4              CMP.L      #match_ADD_An_indir_predec_reg4,D2       ;check reg is equal to 4
00002CA4  6600 0006               2761                                              BNE        ADD_Dn_ea_An_indir_predec_reg5                      ;if not try reg 5
00002CA8  6700 004C               2762                                              BEQ        ADD_Dn_ea_An_indir_prede_r4_out               ;if equal go to output ADDroutine
00002CAC                          2763  
00002CAC  B4BC 00000025           2764  ADD_Dn_ea_An_indir_predec_reg5              CMP.L      #match_ADD_An_indir_predec_reg5,D2       ;check reg is equal to 5
00002CB2  6600 0006               2765                                              BNE        ADD_Dn_ea_An_indir_predec_reg6                     ;if not try reg 6
00002CB6  6700 0046               2766                                              BEQ        ADD_Dn_ea_An_indir_prede_r5_out               ;if equal go to output ADDroutine
00002CBA                          2767  
00002CBA  B4BC 00000026           2768  ADD_Dn_ea_An_indir_predec_reg6              CMP.L      #match_ADD_An_indir_predec_reg6,D2       ;check reg is equal to 6
00002CC0  6600 0006               2769                                              BNE        ADD_Dn_ea_An_indir_predec_reg7                     ;if not try reg 7
00002CC4  6700 0040               2770                                              BEQ        ADD_Dn_ea_An_indir_prede_r6_out               ;if equal go to output ADDroutine
00002CC8                          2771  
00002CC8  B4BC 00000027           2772  ADD_Dn_ea_An_indir_predec_reg7              CMP.L      #match_ADD_An_indir_predec_reg7,D2       ;check reg is equal to 7
00002CCE  6700 003E               2773                                              BEQ        ADD_Dn_ea_An_indir_prede_r7_out               ;if equal go to output ADDroutine
00002CD2  6600 0080               2774                                              BNE        ADD_ERROR                                    :if not equal to an addresssing mode, pritn error
00002CD6                          2775  
00002CD6                          2776  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00002CD6  227C 0000848A           2777  ADD_Dn_ea_An_indir_prede_r0_out            MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00002CDC  4E75                    2778                                                 RTS
00002CDE                          2779                                              
00002CDE  227C 00008490           2780  ADD_Dn_ea_An_indir_prede_r1_out            MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00002CE4  4E75                    2781                                                 RTS
00002CE6                          2782  
00002CE6  227C 00008496           2783  ADD_Dn_ea_An_indir_prede_r2_out            MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00002CEC  4E75                    2784                                                 RTS
00002CEE                          2785  
00002CEE  227C 0000849C           2786  ADD_Dn_ea_An_indir_prede_r3_out            MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00002CF4  4E75                    2787                                                 RTS
00002CF6                          2788  
00002CF6  227C 000084A2           2789  ADD_Dn_ea_An_indir_prede_r4_out            MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00002CFC  4E75                    2790                                                 RTS
00002CFE                          2791  
00002CFE  227C 000084A8           2792  ADD_Dn_ea_An_indir_prede_r5_out            MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00002D04  4E75                    2793                                                 RTS
00002D06                          2794  
00002D06  227C 000084AE           2795  ADD_Dn_ea_An_indir_prede_r6_out            MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00002D0C  4E75                    2796                                                 RTS
00002D0E                          2797  
00002D0E  227C 000084B4           2798  ADD_Dn_ea_An_indir_prede_r7_out            MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00002D14  4E75                    2799                                                 RTS
00002D16                          2800                                              
00002D16                          2801  ;------------------Absolute Addressing Output-----------------------
00002D16  22FC 000084C4           2802  ADD_Dn_ea_abs_add_word_out            MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002D1C  22C5                    2803                                        MOVE.L      D5,(A1)+                           ;load address                  
00002D1E  4E75                    2804                                        RTS                                            :return to ADDroutine
00002D20                          2805                                             
00002D20                          2806  
00002D20                          2807  
00002D20  2A18                    2808  ADD_Dn_ea_abs_add_long_out            MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00002D22  22FC 000084C4           2809                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002D28  22C5                    2810                                        MOVE.L      D5,(A1)+                           ;load address                  
00002D2A  4E75                    2811                                        RTS                                            :return to ADDroutine                                            
00002D2C                          2812  ;---------------Immediate Addresing--------------------------
00002D2C  2A18                    2813  ADD_Dn_ea_immediate_add_out           MOVE.L        (A0)+,D5                             ;capture the immediate address
00002D2E  BCBC 000000FC           2814                                        CMP.L       #match_imm_add_word,D6               ;check to see if need to pull word
00002D34  2A18                    2815                                        MOVE.L      (A0)+,D5                            ;pull the word
00002D36  6700 0006               2816                                        BEQ         ADD_Dn_ea_imm_add_w                           ;if equal go pull word    
00002D3A  6600 000C               2817                                        BNE         ADD_Dn_ea_imm_add_l                           ;if not equal, go check long
00002D3E                          2818                                           
00002D3E  22FC 000084C4           2819  ADD_Dn_ea_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
00002D44  32C5                    2820                                        MOVE.W     D5,(A1)+                             ;load the word address                           
00002D46  4E75                    2821                                        RTS
00002D48                          2822                                           
00002D48  2A18                    2823  ADD_Dn_ea_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
00002D4A  22FC 000084C4           2824                                        MOVE.L     #ea_$,(A1)+                          ;load the $
00002D50  2245                    2825                                        MOVE.L     D5,A1                               ;move to A1
00002D52  4E75                    2826                                        RTS
00002D54                          2827  
00002D54                          2828  
00002D54                          2829  
00002D54                          2830  
00002D54                          2831  
00002D54                          2832  
00002D54                          2833  
00002D54                          2834  
00002D54                          2835  
00002D54                          2836  
00002D54                          2837  
00002D54                          2838                                   
00002D54                          2839  ;----------------------Error Handling----------------------------------------
00002D54  43F9 000083DE           2840  ADD_ERROR                                           LEA     ERROR_MESSAGE,A1                                         ;load error messge into A3
00002D5A  4E75                    2841                                                  RTS
00002D5C                          2842                                                  
00002D5C                          2843                                                  
00002D5C  =000001C0               2844  mask_opmode                         EQU         $01C0                   ;mask for the opmode to determine operand order
00002D5C                          2845  
00002D5C  =00000038               2846  mask_ADD_ea_mode                    EQU         $0038
00002D5C  =0000003F               2847  mask_ADD_abs_add                    EQU         $003F
00002D5C  =0000003F               2848  mask_ADD_ea_reg_and_mode            EQU         $003F
00002D5C  =00000E00               2849  mask_ADD_An_reg                     EQU         $0E00
00002D5C                          2850  
00002D5C                          2851  
00002D5C  =00000100               2852  match_ADD_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
00002D5C  =00000140               2853  match_ADD_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
00002D5C  =00000180               2854  match_ADD_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
00002D5C                          2855  
00002D5C  =00000000               2856  match_ADD_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
00002D5C  =00000040               2857  match_ADD_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
00002D5C  =00000080               2858  match_ADD_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
00002D5C                          2859  
00002D5C                          2860  
00002D5C                          2861  
00002D5C  =00000000               2862  match_ADD_Dn                        EQU         $0000
00002D5C  =00000008               2863  match_ADD_An                        EQU         $0008
00002D5C  =00000010               2864  match_ADD_An_indir                  EQU         $0010
00002D5C  =00000020               2865  match_ADD_An_indir_predec           EQU         $0020
00002D5C  =00000018               2866  match_ADD_An_indir_postinc          EQU         $0018
00002D5C  =00000038               2867  match_ADD_abs_add_word              EQU         $0038
00002D5C  =00000039               2868  match_ADD_abs_add_long              EQU         $0039
00002D5C                          2869  
00002D5C  =00000000               2870  match_ADD_D0                            EQU         $0000
00002D5C  =00000001               2871  match_ADD_D1                            EQU         $0001
00002D5C  =00000002               2872  match_ADD_D2                            EQU         $0002
00002D5C  =00000003               2873  match_ADD_D3                            EQU         $0003
00002D5C  =00000004               2874  match_ADD_D4                            EQU         $0004
00002D5C  =00000005               2875  match_ADD_D5                            EQU         $0005
00002D5C  =00000006               2876  match_ADD_D6                            EQU         $0006
00002D5C  =00000007               2877  match_ADD_D7                            EQU         $0007
00002D5C                          2878  
00002D5C  =00000008               2879  match_ADD_A0                            EQU         $0008
00002D5C  =00000009               2880  match_ADD_A1                            EQU         $0009
00002D5C  =0000000A               2881  match_ADD_A2                            EQU         $000A
00002D5C  =0000000B               2882  match_ADD_A3                            EQU         $000B
00002D5C  =0000000C               2883  match_ADD_A4                            EQU         $000C
00002D5C  =0000000D               2884  match_ADD_A5                            EQU         $000D
00002D5C  =0000000E               2885  match_ADD_A6                            EQU         $000E
00002D5C  =0000000F               2886  match_ADD_A7                            EQU         $000F
00002D5C                          2887  
00002D5C  =00000010               2888  match_ADD_An_indir_r0                   EQU         $0010
00002D5C  =00000011               2889  match_ADD_An_indir_r1                   EQU         $0011
00002D5C  =00000012               2890  match_ADD_An_indir_r2                   EQU         $0012
00002D5C  =00000013               2891  match_ADD_An_indir_r3                   EQU         $0013
00002D5C  =00000014               2892  match_ADD_An_indir_r4                   EQU         $0014
00002D5C  =00000015               2893  match_ADD_An_indir_r5                   EQU         $0015
00002D5C  =00000016               2894  match_ADD_An_indir_r6                   EQU         $0016
00002D5C  =00000017               2895  match_ADD_An_indir_r7                   EQU         $0017
00002D5C                          2896  
00002D5C  =00000018               2897  match_ADD_An_indir_postinc_r0       EQU         $0018
00002D5C  =00000019               2898  match_ADD_An_indir_postinc_r1       EQU         $0019
00002D5C  =0000001A               2899  match_ADD_An_indir_postinc_r2       EQU         $001A
00002D5C  =0000001B               2900  match_ADD_An_indir_postinc_r3       EQU         $001B
00002D5C  =0000001C               2901  match_ADD_An_indir_postinc_r4       EQU         $001C
00002D5C  =0000001D               2902  match_ADD_An_indir_postinc_r5       EQU         $001D
00002D5C  =0000001E               2903  match_ADD_An_indir_postinc_r6       EQU         $001E
00002D5C  =0000001F               2904  match_ADD_An_indir_postinc_r7       EQU         $001F
00002D5C                          2905  
00002D5C  =00000020               2906  match_ADD_An_indir_predec_reg0          EQU         $0020
00002D5C  =00000021               2907  match_ADD_An_indir_predec_reg1          EQU         $0021
00002D5C  =00000022               2908  match_ADD_An_indir_predec_reg2          EQU         $0022
00002D5C  =00000023               2909  match_ADD_An_indir_predec_reg3          EQU         $0023
00002D5C  =00000024               2910  match_ADD_An_indir_predec_reg4          EQU         $0024
00002D5C  =00000025               2911  match_ADD_An_indir_predec_reg5          EQU         $0025
00002D5C  =00000026               2912  match_ADD_An_indir_predec_reg6          EQU         $0026
00002D5C  =00000027               2913  match_ADD_An_indir_predec_reg7          EQU         $0027
00002D5C                          2914  
00002D5C  =0000003C               2915  match_imm_add                           EQU         $003C
00002D5C  =000000FC               2916  match_imm_add_word                      EQU         $00FC
00002D5C  =000001FC               2917  match_imm_add_long                      EQU         $01FC
00002D5C                          2918  
00002D5C  =00000000               2919  match_ADD_reg0                          EQU         $0000
00002D5C  =00000200               2920  match_ADD_reg1                          EQU         $0200
00002D5C  =00000400               2921  match_ADD_reg2                          EQU         $0400
00002D5C  =00000600               2922  match_ADD_reg3                          EQU         $0600
00002D5C  =00000800               2923  match_ADD_reg4                          EQU         $0800
00002D5C  =00000A00               2924  match_ADD_reg5                          EQU         $0A00
00002D5C  =00000C00               2925  match_ADD_reg6                          EQU         $0C00
00002D5C  =00000E00               2926  match_ADD_reg7                          EQU         $0E00
00002D5C                          2927  
00002D5C                          2928  
00002D5C                          2929  
00002D5C                          2930  
00002D5C                          2931  
00002D5C                          2932  
00002D5C                          2933  
00002D5C                          2934  
00002D5C                          2935  
00002D5C                          2936  
00002D5C                          2937  
00002D5C                          2938  
00002D5C                          2939  -------------------- end include --------------------
00002D5C                          2940              INCLUDE 'AND Subroutine.x68'
00002D5C                          2941     
00002D5C                          2942  ;--------------------------------------------------------AND ANDroutine-----------------------------------------------------------------------
00002D5C                          2943  AND_sub                                                ;preserve the registers, 
00002D5C                          2944                                   
00002D5C  C2BC 000001C0           2945                                         AND.L              #mask_opmode,D1                       ;load mask to determine the operand order
00002D62                          2946                                  
00002D62  B2BC 00000000           2947  AND_Dn_ea_match                        CMP.L              #match_AND_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00002D68  6700 06F6               2948                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002D6C  6600 0002               2949                                         BNE                AND_Dn_ea_match_w                     ;if not check word size for same order
00002D70                          2950  
00002D70  B2BC 00000040           2951  AND_Dn_ea_match_w                      CMP.L              #match_AND_w_Dn_ea,D1                 ;check to see if it's Dn,ea
00002D76  6700 06E8               2952                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002D7A  6600 0002               2953                                         BNE                AND_Dn_ea_match_l                     ;if not check long size for same order
00002D7E                          2954  
00002D7E  B2BC 00000080           2955  AND_Dn_ea_match_l                      CMP.L              #match_AND_l_Dn_ea,D1                 ;check to see if it's Dn,ea
00002D84  6700 06DA               2956                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002D88  6600 0002               2957                                         BNE                AND_ea_Dn_match                           ;if not check other order
00002D8C                          2958  
00002D8C  B2BC 00000100           2959  AND_ea_Dn_match                        CMP.L              #match_AND_b_ea_Dn,D1                 ;check to see if it's ea,Dn
00002D92  6700 0022               2960                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002D96  6600 0002               2961                                         BNE                AND_ea_Dn_match_w                     ;if not go check word size for same order
00002D9A                          2962  
00002D9A  B2BC 00000140           2963  AND_ea_Dn_match_w                      CMP.L              #match_AND_w_ea_Dn,D1                 ;check to see if it's ea,Dn
00002DA0  6700 0014               2964                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002DA4  6600 0002               2965                                         BNE                AND_ea_Dn_match_l                     ;if not go check word size for same order
00002DA8                          2966  
00002DA8  B2BC 00000180           2967  AND_ea_Dn_match_l                      CMP.L              #match_AND_l_ea_Dn,D1                 ;check to see if it's ea,Dn
00002DAE  6700 0006               2968                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002DB2  6600 416A               2969                                         BNE                ERROR                                 ;if not go to error message
00002DB6                          2970  ;--------------------------------------------------------------------------------------------------------------------------
00002DB6                          2971  ;-------------------------------------------------------------------------------------------------------------------------
00002DB6  4281                    2972  AND_ea_Dn                            CLR.L               D1                                          ;clear D1 to load new mask                                
00002DB8  3200                    2973                                       MOVE.W         D0,D1   
00002DBA  C2BC 00000038           2974                                       AND.L             #mask_AND_ea_mode,D1                        ;move the mask to D1
00002DC0                          2975  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00002DC0  B2BC 00000010           2976  AND_ea_Dn_add_reg_indir              CMP.L             #match_AND_An_indir,D1                       ;check to see if mode is add reg indir
00002DC6  6600 0006               2977                                       BNE               AND_ea_Dn_add_reg_indir_pdec                 ;if not, go check add reg indir predec 
00002DCA  6700 0256               2978                                       BEQ               AND_ea_Dn_An_indir_reg                       ;if equal go figure out the register           
00002DCE                          2979             
00002DCE  B2BC 00000020           2980  AND_ea_Dn_add_reg_indir_pdec         CMP.L             #match_AND_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00002DD4  6600 0006               2981                                       BNE               AND_ea_Dn_add_reg_indir_pinc                 ;if not go check add reg indir/predec
00002DD8  6700 045C               2982                                       BEQ               AND_ea_Dn_An_indir_predec                      ;if equal go figure out the register
00002DDC                          2983                        
00002DDC  B2BC 00000018           2984  AND_ea_Dn_add_reg_indir_pinc         CMP.L             #match_AND_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00002DE2  6600 0006               2985                                       BNE               AND_ea_Dn_abs_add_word                       ;if not go check abs add word
00002DE6  6700 0344               2986                                       BEQ               AND_ea_Dn_An_indir_pinc_reg                    ;if equal go figure out the register
00002DEA                          2987  
00002DEA  C4BC 0000003F           2988  AND_ea_Dn_abs_add_word               AND.L             #mask_AND_abs_add,D2                         ;load mask to determine if abs add word or long
00002DF0                          2989                                   
00002DF0  B4BC 00000038           2990                                       CMP.L             #match_AND_abs_add_word,D2                   ;check if abs add word
00002DF6  2A18                    2991                                       MOVE.L            (A0)+,D5                                     ;pull the next word instruction that holds the address
00002DF8  6600 0006               2992                                       BNE               AND_ea_Dn_abs_add_long                       ;if not go check abs add long
00002DFC  6700 0542               2993                                       BEQ               AND_ea_Dn_abs_add_word_out                   ;if equal go to output
00002E00                          2994    
00002E00  B4BC 00000039           2995  AND_ea_Dn_abs_add_long               CMP.L             #match_AND_abs_add_long,D2                   ;check to see if abs add long
00002E06  6700 054C               2996                                       BEQ               AND_ea_Dn_abs_add_long_out                   ;if equal go to output
00002E0A  6600 4112               2997                                       BNE               ERROR                                        ;if not equal go to error mesage AND routine
00002E0E                          2998  
00002E0E                          2999  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00002E0E                          3000                                   
00002E0E                          3001                                   
00002E0E                          3002  ;-----------------------------------Data Register Direct--------------------------------
00002E0E  4282                    3003  AND_ea_Dn_Dn_reg                 CLR.L          D2
00002E10  3400                    3004                                      MOVE.W      D0,D2
00002E12  C4BC 0000003F           3005                                  AND.L              #mask_AND_ea_reg_and_mode,D2             ;load the mask into D2 for the mode and the register
00002E18  B4BC 00000000           3006                                   CMP.L              #match_AND_D0,D2                         ;check to see in the register is 0
00002E1E  6600 0006               3007                                   BNE                AND_ea_Dn_rD1                            ;if not go check register 1
00002E22  6700 0064               3008                                   BEQ                AND_ea_Dn_D0_out                         ;if equal go to output ANDroutine
00002E26                          3009  
00002E26  B4BC 00000001           3010  AND_ea_Dn_rD1                    CMP.L              #match_AND_D1,D2                          ;check to see in the register is 1
00002E2C  6600 0006               3011                                   BNE                AND_ea_Dn_rD2                             ;if not go check register 2
00002E30  6700 0068               3012                                   BEQ                AND_ea_Dn_D1_out                          ;if equal go to output ANDroutine
00002E34                          3013  
00002E34  B4BC 00000002           3014  AND_ea_Dn_rD2                    CMP.L              #match_AND_D2,D2                          ;check to see in the register is 2
00002E3A  6600 0006               3015                                   BNE                AND_ea_Dn_rD3                             ;if not go check register 3
00002E3E  6700 006C               3016                                   BEQ                AND_ea_Dn_D2_out                          ;if equal go to output ANDroutine
00002E42                          3017  
00002E42  B4BC 00000003           3018  AND_ea_Dn_rD3                    CMP.L              #match_AND_D3,D2                          ;check to see in the register is 3
00002E48  6600 0006               3019                                   BNE                AND_ea_Dn_rD4                             ;if not go check register 4
00002E4C  6700 0070               3020                                   BEQ                AND_ea_Dn_D3_out                          ;if equal go to output ANDroutine
00002E50                          3021  
00002E50  B4BC 00000004           3022  AND_ea_Dn_rD4                    CMP.L              #match_AND_D4,D2                          ;check to see in the register is 4
00002E56  6600 0006               3023                                   BNE                AND_ea_Dn_rD5                             ;if not go check register 5
00002E5A  6700 0074               3024                                   BEQ                AND_ea_Dn_D4_out                          ;if equal go to output ANDroutine
00002E5E                          3025  
00002E5E  B4BC 00000005           3026  AND_ea_Dn_rD5                    CMP.L              #match_AND_D5,D2                          ;check to see in the register is 5
00002E64  6600 0006               3027                                   BNE                AND_ea_Dn_rD6                             ;if not go check register 6
00002E68  6700 0078               3028                                   BEQ                AND_ea_Dn_D5_out                          ;if equal go to output ANDroutine
00002E6C                          3029  
00002E6C  B4BC 00000006           3030  AND_ea_Dn_rD6                    CMP.L              #match_AND_D6,D2                          ;check to see in the register is 6
00002E72  6600 0006               3031                                   BNE                AND_ea_Dn_rD7                             ;if not go check register 7
00002E76  6700 007C               3032                                   BEQ                AND_ea_Dn_D6_out                          ;if equal go to output ANDroutine
00002E7A                          3033  
00002E7A  B4BC 00000007           3034  AND_ea_Dn_rD7                    CMP.L              #match_AND_D7,D2                          ;check to see in the register is 7
00002E80  6700 0084               3035                                   BEQ                AND_ea_Dn_D7_out                          ;if equal go to output ANDroutine
00002E84  6600 4098               3036                                   BNE                ERROR                                     ;if not equal, got to error message
00002E88                          3037  ;--------------------Data Register Direct Output-----------------------
00002E88  227C 000083F2           3038  AND_ea_Dn_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
00002E8E  4EB8 140A               3039                                      JSR             print_first
00002E92  4EB9 000033A6           3040                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E98  4E75                    3041                                  RTS
00002E9A                          3042                                  
00002E9A  227C 000083F5           3043  AND_ea_Dn_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
00002EA0  4EB8 140A               3044                                  JSR             print_first
00002EA4  4EB9 000033A6           3045                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EAA  4E75                    3046                                  RTS
00002EAC                          3047                                  
00002EAC  227C 000083F8           3048  AND_ea_Dn_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
00002EB2  4EB8 140A               3049                                  JSR             print_first
00002EB6  4EB9 000033A6           3050                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EBC  4E75                    3051                                  RTS
00002EBE                          3052                                  
00002EBE  227C 000083FB           3053  AND_ea_Dn_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
00002EC4  4EB8 140A               3054                                  JSR             print_first
00002EC8  4EB9 000033A6           3055                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002ECE  4E75                    3056                                  RTS
00002ED0                          3057                                  
00002ED0  227C 000083FE           3058  AND_ea_Dn_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
00002ED6  4EB8 140A               3059                                  JSR             print_first
00002EDA  4EB9 000033A6           3060                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EE0  4E75                    3061                                  RTS
00002EE2                          3062                                  
00002EE2  227C 00008401           3063  AND_ea_Dn_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00002EE8  4EB8 140A               3064                                  JSR             print_first
00002EEC  4EB9 000033A6           3065                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EF2  4E75                    3066                                  RTS
00002EF4                          3067                                  
00002EF4  227C 00008404           3068  AND_ea_Dn_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00002EFA  4EB8 140A               3069                                  JSR             print_first
00002EFE  4EB9 000033A6           3070                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F04  4E75                    3071                                  RTS
00002F06                          3072                                  
00002F06  227C 00008407           3073  AND_ea_Dn_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00002F0C  4EB8 140A               3074                                  JSR             print_first
00002F10  4EB9 000033A6           3075                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F16  4E75                    3076                                  RTS
00002F18                          3077                                  
00002F18                          3078  ;------------------Address Register Direct-----------------------
00002F18  4282                    3079  AND_ea_Dn_An_reg                 CLR.L          D2
00002F1A  3400                    3080                                      MOVE.W      D0,D2
00002F1C  C4BC 0000003F           3081                                  AND.L              #mask_AND_ea_reg_and_mode,D2
00002F22  B4BC 00000008           3082                                  CMP.L           #match_AND_A0,D2                        ;check reg is equal to 0
00002F28  6600 0006               3083                                   BNE             AND_ea_Dn_rA1                           ;if not try reg 1
00002F2C  6700 016E               3084                                   BEQ             AND_ea_Dn_An_indir_reg0_out             ;if equal go to output ANDroutine
00002F30                          3085  
00002F30  B4BC 00000009           3086  AND_ea_Dn_rA1                    CMP.L           #match_AND_A1,D2                        ;check reg is equal to 1
00002F36  6600 0006               3087                                   BNE             AND_ea_Dn_rA2                           ;if not try reg 2
00002F3A  6700 0172               3088                                   BEQ             AND_ea_Dn_An_indir_reg1_out             ;if equal go to output ANDroutine
00002F3E                          3089  
00002F3E  B4BC 0000000A           3090  AND_ea_Dn_rA2                    CMP.L           #match_AND_A2,D2                        ;check reg is equal to 2
00002F44  6600 0006               3091                                   BNE             AND_ea_Dn_rA3                           ;if not try reg 3
00002F48  6700 0176               3092                                   BEQ             AND_ea_Dn_An_indir_reg2_out             ;if equal go to output ANDroutine
00002F4C                          3093  
00002F4C  B4BC 0000000B           3094  AND_ea_Dn_rA3                    CMP.L           #match_AND_A3,D2                        ;check reg is equal to 3
00002F52  6600 0006               3095                                   BNE             AND_ea_Dn_rA4                           ;if not try reg 4
00002F56  6700 017A               3096                                   BEQ             AND_ea_Dn_An_indir_reg3_out             ;if equal go to output ANDroutine
00002F5A                          3097  
00002F5A  B4BC 0000000C           3098  AND_ea_Dn_rA4                    CMP.L           #match_AND_A4,D2                        ;check reg is equal to 4
00002F60  6600 0006               3099                                   BNE             AND_ea_Dn_rA5                           ;if not try reg 5
00002F64  6700 017E               3100                                   BEQ             AND_ea_Dn_An_indir_reg4_out             ;if equal go to output ANDroutine
00002F68                          3101              
00002F68  B4BC 0000000D           3102  AND_ea_Dn_rA5                    CMP.L           #match_AND_A5,D2                        ;check reg is equal to 5
00002F6E  6600 0006               3103                                   BNE             AND_ea_Dn_rA6                           ;if not try reg 6
00002F72  6700 0182               3104                                   BEQ             AND_ea_Dn_An_indir_reg5_out             ;if equal go to output ANDroutine
00002F76                          3105  
00002F76  B4BC 0000000E           3106  AND_ea_Dn_rA6                    CMP.L           #match_AND_A6,D2                        ;check reg is equal to 6
00002F7C  6600 0006               3107                                   BNE             AND_ea_Dn_rA7                           ;if not try reg 7
00002F80  6700 0186               3108                                   BEQ             AND_ea_Dn_An_indir_reg6_out             ;if equal go to output ANDroutine
00002F84                          3109  
00002F84  B4BC 0000000F           3110  AND_ea_Dn_rA7                    CMP.L           #match_AND_A7,D2                        ;check reg is equal to 7
00002F8A  6700 018E               3111                                   BEQ             AND_ea_Dn_An_indir_reg7_out             ;if equal go to output ANDroutine
00002F8E  6600 3F8E               3112                                   BNE             ERROR                                   ;if not equal to an addresssing mode, pritn error
00002F92                          3113  
00002F92                          3114  ;--------------------Address Register Direct Output-----------------------
00002F92  227C 0000840A           3115  AND_ea_Dn_A0_out                MOVE.L          #ea_A0,A1                               ;load string constant into A1
00002F98  4EB8 140A               3116                                  JSR             print_first
00002F9C  4EB9 000033A6           3117                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FA2  4E75                    3118                                  RTS
00002FA4                          3119                                  
00002FA4  227C 0000840D           3120  AND_ea_Dn_A1_out                MOVE.L          #ea_A1,A1                               ;load string constant into A1
00002FAA  4EB8 140A               3121                                  JSR             print_first
00002FAE  4EB9 000033A6           3122                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FB4  4E75                    3123                                  RTS
00002FB6                          3124                                  
00002FB6  227C 00008410           3125  AND_ea_Dn_A2_out                MOVE.L          #ea_A2,A1                               ;load string constant into A1
00002FBC  4EB8 140A               3126                                  JSR             print_first
00002FC0  4EB9 000033A6           3127                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FC6  4E75                    3128                                  RTS
00002FC8                          3129                                  
00002FC8  227C 00008413           3130  AND_ea_Dn_A3_out                MOVE.L          #ea_A3,A1                               ;load string constant into A1
00002FCE  4EB8 140A               3131                                  JSR             print_first
00002FD2  4EB9 000033A6           3132                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FD8  4E75                    3133                                  RTS
00002FDA                          3134                                  
00002FDA  227C 00008416           3135  AND_ea_Dn_A4_out                MOVE.L          #ea_A4,A1                               ;load string constant into A1
00002FE0  4EB8 140A               3136                                  JSR             print_first
00002FE4  4EB9 000033A6           3137                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FEA  4E75                    3138                                  RTS
00002FEC                          3139                                  
00002FEC  227C 00008419           3140  AND_ea_Dn_A5_out                MOVE.L          #ea_A5,A1                               ;load string constant into A1
00002FF2  4EB8 140A               3141                                  JSR             print_first
00002FF6  4EB9 000033A6           3142                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FFC  4E75                    3143                                  RTS
00002FFE                          3144                                  
00002FFE  227C 0000841C           3145  AND_ea_Dn_A6_out                MOVE.L          #ea_A6,A1                               ;load string constant into A1
00003004  4EB8 140A               3146                                  JSR             print_first
00003008  4EB9 000033A6           3147                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000300E  4E75                    3148                                  RTS
00003010                          3149                                  
00003010  227C 0000841F           3150  AND_ea_Dn_A7_out                MOVE.L          #ea_A7,A1                               ;load string constant into A1
00003016  4EB8 140A               3151                                  JSR             print_first
0000301A  4EB9 000033A6           3152                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003020  4E75                    3153                                  RTS
00003022                          3154                                  
00003022                          3155  ;------------------Address Register Indirect-----------------------
00003022  4282                    3156  AND_ea_Dn_An_indir_reg           CLR.L          D2
00003024  3400                    3157                                      MOVE.W      D0,D2
00003026  C4BC 0000003F           3158                                  AND.L              #mask_AND_ea_reg_and_mode,D2
0000302C  B4BC 00000010           3159                                  CMP.L          #match_AND_An_indir_r0,D2              ;check reg is equal to 0
00003032  6600 0006               3160                                   BNE             AND_ea_Dn_An_indir_reg1               ;if not try reg 1
00003036  6700 0064               3161                                   BEQ             AND_ea_Dn_An_indir_reg0_out           ;if equal go to output ANDroutine
0000303A                          3162  
0000303A  B4BC 00000011           3163  AND_ea_Dn_An_indir_reg1          CMP.L           #match_AND_An_indir_r1,D2             ;check reg is equal to 1
00003040  6600 0006               3164                                   BNE             AND_ea_Dn_An_indir_reg2               ;if not try reg 2
00003044  6700 0068               3165                                   BEQ             AND_ea_Dn_An_indir_reg1_out           ;if equal go to output ANDroutine
00003048                          3166  
00003048  B4BC 00000012           3167  AND_ea_Dn_An_indir_reg2          CMP.L           #match_AND_An_indir_r2,D2             ;check reg is equal to 2
0000304E  6600 0006               3168                                   BNE             AND_ea_Dn_An_indir_reg3               ;if not try reg 3
00003052  6700 006C               3169                                   BEQ             AND_ea_Dn_An_indir_reg2_out           ;if equal go to output ANDroutine
00003056                          3170  
00003056  B4BC 00000013           3171  AND_ea_Dn_An_indir_reg3          CMP.L           #match_AND_An_indir_r3,D2             ;check reg is equal to 3
0000305C  6600 0006               3172                                   BNE             AND_ea_Dn_An_indir_reg4               ;if not try reg 4
00003060  6700 0070               3173                                   BEQ             AND_ea_Dn_An_indir_reg3_out           ;if equal go to output ANDroutine
00003064                          3174      
00003064  B4BC 00000014           3175  AND_ea_Dn_An_indir_reg4          CMP.L           #match_AND_An_indir_r4,D2             ;check reg is equal to 4
0000306A  6600 0006               3176                                   BNE             AND_ea_Dn_An_indir_reg5               ;if not try reg 5
0000306E  6700 0074               3177                                   BEQ             AND_ea_Dn_An_indir_reg4_out           ;if equal go to output ANDroutine
00003072                          3178          
00003072  B4BC 00000015           3179  AND_ea_Dn_An_indir_reg5          CMP.L           #match_AND_An_indir_r5,D2             ;check reg is equal to 5
00003078  6600 0006               3180                                   BNE             AND_ea_Dn_An_indir_reg6               ;if not try reg 6
0000307C  6700 0078               3181                                   BEQ             AND_ea_Dn_An_indir_reg5_out           ;if equal go to output ANDroutine
00003080                          3182  
00003080  B4BC 00000016           3183  AND_ea_Dn_An_indir_reg6          CMP.L           #match_AND_An_indir_r6,D2             ;check reg is equal to 6
00003086  6600 0006               3184                                   BNE             AND_ea_Dn_An_indir_reg7               ;if not try reg 7
0000308A  6700 007C               3185                                   BEQ             AND_ea_Dn_An_indir_reg6_out           ;if equal go to output ANDroutine
0000308E                          3186  
0000308E  B4BC 00000017           3187  AND_ea_Dn_An_indir_reg7          CMP.L           #match_AND_An_indir_r7,D2             ;check reg is equal to 7
00003094  6700 0084               3188                                   BEQ             AND_ea_Dn_An_indir_reg7_out           ;if equal go to output ANDroutine
00003098  6600 3E84               3189                                   BNE             ERROR                                 ;if not equal to an addresssing mode, pritn error
0000309C                          3190  
0000309C                          3191  ;--------------------Address Register Indirect Output-----------------------
0000309C  227C 00008432           3192  AND_ea_Dn_An_indir_reg0_out                 MOVE.L          #ea_indir_A0,A1                       ;load string constant into A1
000030A2  4EB8 140A               3193                                  JSR             print_first
000030A6  4EB9 000033A6           3194                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000030AC  4E75                    3195                                              RTS
000030AE                          3196                                              
000030AE  227C 00008437           3197  AND_ea_Dn_An_indir_reg1_out                 MOVE.L          #ea_indir_A1,A1                     ;load string constant into A1
000030B4  4EB8 140A               3198                                  JSR             print_first
000030B8  4EB9 000033A6           3199                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000030BE  4E75                    3200                                              RTS
000030C0                          3201                                              
000030C0  227C 0000843C           3202  AND_ea_Dn_An_indir_reg2_out                 MOVE.L          #ea_indir_A2,A1                     ;load string constant into A1
000030C6  4EB8 140A               3203                                  JSR             print_first
000030CA  4EB9 000033A6           3204                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000030D0  4E75                    3205                                              RTS
000030D2                          3206                                              
000030D2  227C 00008441           3207  AND_ea_Dn_An_indir_reg3_out                 MOVE.L          #ea_indir_A3,A1                     ;load string constant into A1
000030D8  4EB8 140A               3208                                  JSR             print_first
000030DC  4EB9 000033A6           3209                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000030E2  4E75                    3210                                              RTS
000030E4                          3211                                              
000030E4  227C 00008446           3212  AND_ea_Dn_An_indir_reg4_out                 MOVE.L          #ea_indir_A4,A1                     ;load string constant into A1
000030EA  4EB8 140A               3213                                  JSR             print_first
000030EE  4EB9 000033A6           3214                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000030F4  4E75                    3215                                              RTS
000030F6                          3216                                              
000030F6  227C 0000844B           3217  AND_ea_Dn_An_indir_reg5_out                 MOVE.L          #ea_indir_A5,A1                     ;load string constant into A1
000030FC  4EB8 140A               3218                                  JSR             print_first
00003100  4EB9 000033A6           3219                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003106  4E75                    3220                                              RTS
00003108                          3221                                              
00003108  227C 00008450           3222  AND_ea_Dn_An_indir_reg6_out                 MOVE.L          #ea_indir_A6,A1                     ;load string constant into A1
0000310E  4EB8 140A               3223                                  JSR             print_first
00003112  4EB9 000033A6           3224                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003118  4E75                    3225                                              RTS
0000311A                          3226                                          
0000311A  227C 00008455           3227  AND_ea_Dn_An_indir_reg7_out                 MOVE.L          #ea_indir_A7,A1                     ;load string constant into A1
00003120  4EB8 140A               3228                                  JSR             print_first
00003124  4EB9 000033A6           3229                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000312A  4E75                    3230                                              RTS
0000312C                          3231                                              
0000312C                          3232  ;------------------Address Register Indirect with Post Increment-----------------------
0000312C  4282                    3233  AND_ea_Dn_An_indir_pinc_reg                 CLR.L          D2
0000312E  3400                    3234                                              MOVE.W      D0,D2
00003130  C4BC 0000003F           3235                                          AND.L              #mask_AND_ea_reg_and_mode,D2
00003136  B4BC 00000018           3236                                              CMP.L      #match_AND_An_indir_postinc_r0,D2                    ;check reg is equal to 0
0000313C  6600 0006               3237                                              BNE        AND_ea_Dn_An_indir_pinc_r1                      ;if not try reg 1
00003140  6700 0064               3238                                              BEQ        AND_ea_Dn_An_indir_pinc_r0_out                  ;if equal go to output ANDroutine
00003144                          3239  
00003144  B4BC 00000019           3240  AND_ea_Dn_An_indir_pinc_r1                  CMP.L      #match_AND_An_indir_postinc_r1,D2                    ;check reg is equal to 1
0000314A  6600 0006               3241                                              BNE        AND_ea_Dn_An_indir_pinc_r2                      ;if not try reg 2
0000314E  6700 0068               3242                                              BEQ        AND_ea_Dn_An_indir_pinc_r1_out                  ;if equal go to output ANDroutine
00003152                          3243  
00003152  B4BC 0000001A           3244  AND_ea_Dn_An_indir_pinc_r2                  CMP.L      #match_AND_An_indir_postinc_r2,D2                    ;check reg is equal to 2
00003158  6600 0006               3245                                              BNE        AND_ea_Dn_An_indir_pinc_r3                      ;if not try reg 3
0000315C  6700 006C               3246                                              BEQ        AND_ea_Dn_An_indir_pinc_r2_out                  ;if equal go to output ANDroutine
00003160                          3247  
00003160  B4BC 0000001B           3248  AND_ea_Dn_An_indir_pinc_r3                  CMP.L      #match_AND_An_indir_postinc_r3,D2                    ;check reg is equal to 3
00003166  6600 0006               3249                                              BNE        AND_ea_Dn_An_indir_pinc_r4                      ;if not try reg 4
0000316A  6700 0070               3250                                              BEQ        AND_ea_Dn_An_indir_pinc_r3_out                  ;if equal go to output ANDroutine
0000316E                          3251   
0000316E  B4BC 0000001C           3252  AND_ea_Dn_An_indir_pinc_r4                  CMP.L      #match_AND_An_indir_postinc_r4,D2                    ;check reg is equal to 4
00003174  6600 0006               3253                                              BNE        AND_ea_Dn_An_indir_pinc_r5                      ;if not try reg 5
00003178  6700 0074               3254                                              BEQ        AND_ea_Dn_An_indir_pinc_r4_out                  ;if equal go to output ANDroutine
0000317C                          3255  
0000317C  B4BC 0000001D           3256  AND_ea_Dn_An_indir_pinc_r5                  CMP.L      #match_AND_An_indir_postinc_r5,D2                    ;check reg is equal to 5
00003182  6600 0006               3257                                              BNE        AND_ea_Dn_An_indir_pinc_r6                      ;if not try reg 6
00003186  6700 0078               3258                                              BEQ        AND_ea_Dn_An_indir_pinc_r5_out                  ;if equal go to output ANDroutine
0000318A                          3259  
0000318A  B4BC 0000001E           3260  AND_ea_Dn_An_indir_pinc_r6                  CMP.L      #match_AND_An_indir_postinc_r6,D2                      ;check reg is equal to 6
00003190  6600 0006               3261                                              BNE        AND_ea_Dn_An_indir_pinc_r7                        ;if not try reg 7
00003194  6700 007C               3262                                              BEQ        AND_ea_Dn_An_indir_pinc_r6_out                    ;if equal go to output ANDroutine
00003198                          3263  
00003198  B4BC 0000001F           3264  AND_ea_Dn_An_indir_pinc_r7                  CMP.L      #match_AND_An_indir_postinc_r7,D2                      ;check reg is equal to 7
0000319E  6700 0084               3265                                              BEQ        AND_ea_Dn_An_indir_pinc_r7_out                    ;if equal go to output ANDroutine
000031A2  6600 3D7A               3266                                              BNE        ERROR                                                  ;if not equal to an addresssing mode, pritn error
000031A6                          3267  
000031A6                          3268  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000031A6  227C 0000845A           3269  AND_ea_Dn_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1               ;load string constant into A1
000031AC  4EB8 140A               3270                                  JSR             print_first
000031B0  4EB9 000033A6           3271                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000031B6  4E75                    3272                                              RTS
000031B8                          3273                                              
000031B8  227C 00008460           3274  AND_ea_Dn_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1               ;load string constant into A1
000031BE  4EB8 140A               3275                                  JSR             print_first
000031C2  4EB9 000033A6           3276                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000031C8  4E75                    3277                                              RTS
000031CA                          3278                                              
000031CA  227C 00008466           3279  AND_ea_Dn_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1               ;load string constant into A1
000031D0  4EB8 140A               3280                                  JSR             print_first
000031D4  4EB9 000033A6           3281                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000031DA  4E75                    3282                                              RTS
000031DC                          3283                                              
000031DC  227C 0000846C           3284  AND_ea_Dn_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1               ;load string constant into A1
000031E2  4EB8 140A               3285                                  JSR             print_first
000031E6  4EB9 000033A6           3286                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000031EC  4E75                    3287                                              RTS
000031EE                          3288                                              
000031EE  227C 00008472           3289  AND_ea_Dn_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1               ;load string constant into A1
000031F4  4EB8 140A               3290                                  JSR             print_first
000031F8  4EB9 000033A6           3291                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
000031FE  4E75                    3292                                              RTS
00003200                          3293                                              
00003200  227C 00008478           3294  AND_ea_Dn_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1               ;load string constant into A1
00003206  4EB8 140A               3295                                  JSR             print_first
0000320A  4EB9 000033A6           3296                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003210  4E75                    3297                                              RTS
00003212                          3298                                              
00003212  227C 0000847E           3299  AND_ea_Dn_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1               ;load string constant into A1
00003218  4EB8 140A               3300                                  JSR             print_first
0000321C  4EB9 000033A6           3301                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003222  4E75                    3302                                              RTS
00003224                          3303                                              
00003224  227C 00008484           3304  AND_ea_Dn_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1               ;load string constant into A1
0000322A  4EB8 140A               3305                                  JSR             print_first
0000322E  4EB9 000033A6           3306                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003234  4E75                    3307                                              RTS
00003236                          3308                                              
00003236                          3309  ;------------------Address Register Indirect with Pre Decrement-----------------------
00003236  4282                    3310  AND_ea_Dn_An_indir_predec                       CLR.L          D2
00003238  3400                    3311                                              MOVE.W      D0,D2
0000323A  C4BC 0000003F           3312                                              AND.L              #mask_AND_ea_reg_and_mode,D2
00003240  B4BC 00000020           3313                                                  CMP.L      #match_AND_An_indir_predec_reg0,D2               ;check reg is equal to 0
00003246  6600 0006               3314                                                  BNE        AND_ea_Dn_An_indir_pdec_r1                   ;if not try reg 1
0000324A  6700 0064               3315                                                  BEQ        AND_ea_Dn_An_indir_pdec_r0_out               ;if equal go to output ANDroutine
0000324E                          3316  
0000324E  B4BC 00000021           3317  AND_ea_Dn_An_indir_pdec_r1                      CMP.L      #match_AND_An_indir_predec_reg1,D2               ;check reg is equal to 1
00003254  6600 0006               3318                                                  BNE        AND_ea_Dn_An_indir_pdec_r2                   ;if not try reg 2
00003258  6700 0068               3319                                                  BEQ        AND_ea_Dn_An_indir_pdec_r1_out               ;if equal go to output ANDroutine
0000325C                          3320  
0000325C  B4BC 00000022           3321  AND_ea_Dn_An_indir_pdec_r2                      CMP.L      #match_AND_An_indir_predec_reg2,D2               ;check reg is equal to 2
00003262  6600 0006               3322                                                  BNE        AND_ea_Dn_An_indir_pdec_r3                   ;if not try reg 3
00003266  6700 006C               3323                                                  BEQ        AND_ea_Dn_An_indir_pdec_r2_out               ;if equal go to output ANDroutine
0000326A                          3324  
0000326A  B4BC 00000023           3325  AND_ea_Dn_An_indir_pdec_r3                      CMP.L      #match_AND_An_indir_predec_reg3,D2               ;check reg is equal to 3
00003270  6600 0006               3326                                                  BNE        AND_ea_Dn_An_indir_pdec_r4                   ;if not try reg 4
00003274  6700 0070               3327                                                  BEQ        AND_ea_Dn_An_indir_pdec_r3_out               ;if equal go to output ANDroutine
00003278                          3328  
00003278  B4BC 00000024           3329  AND_ea_Dn_An_indir_pdec_r4                      CMP.L      #match_AND_An_indir_predec_reg4,D2               ;check reg is equal to 4
0000327E  6600 0006               3330                                                  BNE        AND_ea_Dn_An_indir_pdec_r5                   ;if not try reg 5
00003282  6700 0074               3331                                                  BEQ        AND_ea_Dn_An_indir_pdec_r4_out               ;if equal go to output ANDroutine
00003286                          3332  
00003286  B4BC 00000025           3333  AND_ea_Dn_An_indir_pdec_r5                      CMP.L      #match_AND_An_indir_predec_reg5,D2               ;check reg is equal to 5
0000328C  6600 0006               3334                                                  BNE        AND_ea_Dn_An_indir_pdec_r6                   ;if not try reg 6
00003290  6700 0078               3335                                                  BEQ        AND_ea_Dn_An_indir_pdec_r5_out               ;if equal go to output ANDroutine
00003294                          3336  
00003294  B4BC 00000026           3337  AND_ea_Dn_An_indir_pdec_r6                      CMP.L      #match_AND_An_indir_predec_reg6,D2               ;check reg is equal to 6
0000329A  6600 0006               3338                                                  BNE        AND_ea_Dn_An_indir_pdec_r7                   ;if not try reg 7
0000329E  6700 007C               3339                                                  BEQ        AND_ea_Dn_An_indir_pdec_r6_out               ;if equal go to output ANDroutine
000032A2                          3340  
000032A2  B4BC 00000027           3341  AND_ea_Dn_An_indir_pdec_r7                      CMP.L      #match_AND_An_indir_predec_reg7,D2               ;check reg is equal to 7
000032A8  6700 0084               3342                                                  BEQ        AND_ea_Dn_An_indir_pdec_r7_out               ;if equal go to output ANDroutine
000032AC  6600 3C70               3343                                                  BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
000032B0                          3344  
000032B0                          3345  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000032B0  227C 0000848A           3346  AND_ea_Dn_An_indir_pdec_r0_out                  MOVE.L          #ea_indir_predec_A0,A1           ;load string constant into A1
000032B6  4EB8 140A               3347                                  JSR             print_first
000032BA  4EB9 000033A6           3348                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
000032C0  4E75                    3349                                                  RTS                                         
000032C2                          3350                                                  
000032C2  227C 00008490           3351  AND_ea_Dn_An_indir_pdec_r1_out                  MOVE.L          #ea_indir_predec_A1,A1           ;load string constant into A1
000032C8  4EB8 140A               3352                                  JSR             print_first
000032CC  4EB9 000033A6           3353                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
000032D2  4E75                    3354                                                  RTS                                         
000032D4                          3355                                                  
000032D4  227C 00008496           3356  AND_ea_Dn_An_indir_pdec_r2_out                  MOVE.L          #ea_indir_predec_A2,A1           ;load string constant into A1
000032DA  4EB8 140A               3357                                  JSR             print_first
000032DE  4EB9 000033A6           3358                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
000032E4  4E75                    3359                                                  RTS                                         
000032E6                          3360                                                  
000032E6  227C 0000849C           3361  AND_ea_Dn_An_indir_pdec_r3_out                  MOVE.L          #ea_indir_predec_A3,A1           ;load string constant into A1
000032EC  4EB8 140A               3362                                  JSR             print_first
000032F0  4EB9 000033A6           3363                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
000032F6  4E75                    3364                                                  RTS                                         
000032F8                          3365                                              
000032F8  227C 000084A2           3366  AND_ea_Dn_An_indir_pdec_r4_out                  MOVE.L          #ea_indir_predec_A4,A1           ;load string constant into A1
000032FE  4EB8 140A               3367                                  JSR             print_first
00003302  4EB9 000033A6           3368                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003308  4E75                    3369                                                  RTS                                         
0000330A                          3370                                                  
0000330A  227C 000084A8           3371  AND_ea_Dn_An_indir_pdec_r5_out                  MOVE.L          #ea_indir_predec_A5,A1           ;load string constant into A1
00003310  4EB8 140A               3372                                  JSR             print_first
00003314  4EB9 000033A6           3373                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
0000331A  4E75                    3374                                                  RTS                                         
0000331C                          3375                                                  
0000331C  227C 000084AE           3376  AND_ea_Dn_An_indir_pdec_r6_out                  MOVE.L          #ea_indir_predec_A6,A1           ;load string constant into A1
00003322  4EB8 140A               3377                                  JSR             print_first
00003326  4EB9 000033A6           3378                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
0000332C  4E75                    3379                                                  RTS                                         
0000332E                          3380                                                  
0000332E  227C 000084B4           3381  AND_ea_Dn_An_indir_pdec_r7_out                  MOVE.L          #ea_indir_predec_A7,A1           ;load string constant into A1
00003334  4EB8 140A               3382                                  JSR             print_first
00003338  4EB9 000033A6           3383                                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000333E  4E75                    3384                                                  RTS                                         
00003340                          3385  ;------------------Absolute Addressing Output-----------------------
00003340  22FC 000084C4           3386  AND_ea_Dn_abs_add_word_out                MOVE.L      #ea_$,(A1)+                       ;load $ for hex and increment A1
00003346  22C5                    3387                                            MOVE.L      D5,(A1)+                          ;load address                  
00003348  4EB8 140A               3388                                  JSR             print_first
0000334C  4EB9 000033A6           3389                                            JSR         AND_determine_second_op           ;jump to ANDroutine to determine second operand
00003352  4E75                    3390                                            RTS                                                                                      
00003354                          3391  
00003354  2A18                    3392  AND_ea_Dn_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00003356  22FC 000084C4           3393                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000335C  22C5                    3394                                           MOVE.L      D5,(A1)+                           ;load address                  
0000335E  4EB8 140A               3395                                  JSR             print_first
00003362  4EB9 000033A6           3396                                           JSR         AND_determine_second_op            ;jump to ANDroutine to determine second operand
00003368  4E75                    3397                                           RTS                                            
0000336A                          3398  ;---------------Immediate Addresing---------------------------
0000336A  2A18                    3399  AND_ea_Dn_immediate_add_out         MOVE.L      (A0)+,D5                           ;capture the immediate address
0000336C  BCBC 000000FC           3400                                      CMP.L       #match_AND_imm_add_word,D6         ;check to see if need to pull word
00003372  2A18                    3401                                      MOVE.L      (A0)+,D5                           ;pull the word
00003374  6700 0006               3402                                      BEQ         AND_ea_Dn_imm_add_w                ;if equal go pull word    
00003378  6600 0016               3403                                      BNE         AND_ea_Dn_imm_add_l                ;if not equal, go check long
0000337C                          3404                                           
0000337C  22FC 000084C4           3405  AND_ea_Dn_imm_add_w                 MOVE.L     #ea_$,(A1)+                         ;load the $
00003382  32C5                    3406                                      MOVE.W     D5,(A1)+                            ;load the word address                           
00003384  4EB8 140A               3407                                  JSR             print_first
00003388  4EB9 000033A6           3408                                      JSR        AND_determine_second_op             ;jump to ANDroutine to determine second operand
0000338E  4E75                    3409                                      RTS
00003390                          3410                                                                                       
00003390  2A18                    3411  AND_ea_Dn_imm_add_l                 MOVE.L     (A0)+,D5                            ;pull the long and increase the pointer
00003392  22FC 000084C4           3412                                      MOVE.L     #ea_$,(A1)+                         ;load the $
00003398  2245                    3413                                      MOVE.L     D5,A1                               ;move to A1
0000339A  4EB8 140A               3414                                  JSR             print_first
0000339E  4EB9 000033A6           3415                                      JSR        AND_determine_second_op             ;jump to ANDroutine to determine second operand
000033A4  4E75                    3416                                      RTS                                         
000033A6                          3417                                                  
000033A6                          3418  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000033A6  4282                    3419  AND_determine_second_op                         CLR.L       D2                          ;clear D2 
000033A8  3400                    3420                                                  MOVE.W      D0,D2
000033AA  C4BC 00000E00           3421                                                  AND.L       #mask_AND_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
000033B0                          3422                                                  
000033B0  B4BC 00000000           3423  ea_Dn_AND_reg0                                  CMP.L       #match_AND_reg0,D2            ;check to see if reg equal 0
000033B6  6600 0006               3424                                                  BNE         ea_Dn_AND_reg1              ;if not equal got check reg 1
000033BA  6700 0064               3425                                                  BEQ         ea_Dn_AND_reg0_out          ;if equal go to output
000033BE                          3426                                                  
000033BE  B4BC 00000200           3427  ea_Dn_AND_reg1                                  CMP.L       #match_AND_reg1,D2             ;check to see if reg equal 1
000033C4  6600 0006               3428                                                  BNE         ea_Dn_AND_reg2               ;if not equal got check reg 2
000033C8  6700 005E               3429                                                  BEQ         ea_Dn_AND_reg1_out           ;if equal go to output
000033CC                          3430  
000033CC  B4BC 00000400           3431  ea_Dn_AND_reg2                                  CMP.L       #match_AND_reg2,D2             ;check to see if reg equal 2
000033D2  6600 0006               3432                                                  BNE         ea_Dn_AND_reg3               ;if not equal got check reg 3
000033D6  6700 0058               3433                                                  BEQ         ea_Dn_AND_reg2_out           ;if equal go to output
000033DA                          3434  
000033DA  B4BC 00000600           3435  ea_Dn_AND_reg3                                  CMP.L       #match_AND_reg3,D2             ;check to see if reg equal 3
000033E0  6600 0006               3436                                                  BNE         ea_Dn_AND_reg4               ;if not equal got check reg 4
000033E4  6700 0052               3437                                                  BEQ         ea_Dn_AND_reg3_out           ;if equal go to output
000033E8                          3438                                                  
000033E8  B4BC 00000800           3439  ea_Dn_AND_reg4                                  CMP.L       #match_AND_reg4,D2             ;check to see if reg equal 4
000033EE  6600 0006               3440                                                  BNE         ea_Dn_AND_reg5               ;if not equal got check reg 5
000033F2  6700 004C               3441                                                  BEQ         ea_Dn_AND_reg4_out           ;if equal go to output
000033F6                          3442  
000033F6  B4BC 00000A00           3443  ea_Dn_AND_reg5                                  CMP.L       #match_AND_reg5,D2             ;check to see if reg equal 5
000033FC  6600 0006               3444                                                  BNE         ea_Dn_AND_reg6               ;if not equal got check reg 6
00003400  6700 0046               3445                                                  BEQ         ea_Dn_AND_reg5_out           ;if equal go to output
00003404                          3446  
00003404  B4BC 00000C00           3447  ea_Dn_AND_reg6                                  CMP.L       #match_AND_reg6,D2             ;check to see if reg equal 6
0000340A  6600 0006               3448                                                  BNE         ea_Dn_AND_reg7               ;if not equal got check reg 7
0000340E  6700 0040               3449                                                  BEQ         ea_Dn_AND_reg6_out           ;if equal go to output         
00003412                          3450  
00003412  B4BC 00000E00           3451  ea_Dn_AND_reg7                                  CMP.L       #match_AND_reg7,D2             ;check to see if reg equal 7
00003418  6700 003E               3452                                                  BEQ         ea_Dn_AND_reg7_out           ;if equal go to output
0000341C  6600 3B00               3453                                                  BNE         ERROR                          ;if not equal to an addresssing mode, pritn error
00003420                          3454                                  
00003420                          3455  
00003420                          3456  ;--------------------Data Output-----------------------
00003420  227C 000083F2           3457  ea_Dn_AND_reg0_out                              MOVE.L          #ea_D0,A1                        ;load string constant into A1
00003426  4E75                    3458                                                  RTS
00003428                          3459                                              
00003428  227C 000083F5           3460  ea_Dn_AND_reg1_out                              MOVE.L          #ea_D1,A1                       ;load string constant into A1
0000342E  4E75                    3461                                                  RTS
00003430                          3462                                              
00003430  227C 000083F8           3463  ea_Dn_AND_reg2_out                              MOVE.L          #ea_D2,A1                       ;load string constant into A1
00003436  4E75                    3464                                                  RTS
00003438                          3465                                              
00003438  227C 000083FB           3466  ea_Dn_AND_reg3_out                              MOVE.L          #ea_D3,A1                       ;load string constant into A1
0000343E  4E75                    3467                                                  RTS
00003440                          3468                                              
00003440  227C 000083FE           3469  ea_Dn_AND_reg4_out                              MOVE.L          #ea_D4,A1                       ;load string constant into A1
00003446  4E75                    3470                                                  RTS
00003448                          3471                                              
00003448  227C 00008401           3472  ea_Dn_AND_reg5_out                              MOVE.L          #ea_D5,A1                       ;load string constant into A1
0000344E  4E75                    3473                                                  RTS
00003450                          3474                                              
00003450  227C 00008404           3475  ea_Dn_AND_reg6_out                              MOVE.L          #ea_D6,A1                       ;load string constant into A1
00003456  4E75                    3476                                                  RTS
00003458                          3477                                              
00003458  227C 00008407           3478  ea_Dn_AND_reg7_out                              MOVE.L          #ea_D7,A1                       ;load string constant into A1
0000345E  4E75                    3479                                                  RTS             
00003460                          3480                                              
00003460                          3481                      
00003460                          3482  
00003460                          3483  
00003460                          3484  
00003460                          3485  
00003460                          3486  
00003460                          3487  
00003460                          3488  
00003460                          3489  
00003460                          3490  
00003460                          3491  
00003460                          3492  
00003460                          3493  
00003460                          3494  
00003460                          3495  
00003460                          3496  
00003460                          3497  
00003460                          3498  
00003460                          3499  
00003460                          3500  
00003460                          3501  
00003460                          3502  
00003460                          3503  
00003460                          3504  
00003460                          3505  
00003460                          3506  
00003460                          3507  
00003460                          3508  
00003460                          3509  
00003460                          3510  
00003460                          3511  
00003460                          3512                          
00003460                          3513  ;------------------------------------------------------------------------------------------------------------------------------------------
00003460                          3514  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
00003460                          3515  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003460  4282                    3516  AND_Dn_ea                                       CLR.L       D2                                ;clear D2                             ;clear D2 
00003462  3400                    3517                                                  MOVE.W      D0,D2
00003464  C4BC 00000E00           3518                                                  AND.L       #mask_AND_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
0000346A                          3519                                                  
0000346A  B4BC 00000000           3520  Dn_ea_AND_reg0                                  CMP.L       #match_AND_reg0,D2                  ;check to see if reg equal 0
00003470  6600 0006               3521                                                  BNE         Dn_ea_AND_reg1                  ;if not equal got check reg 1
00003474  6700 0064               3522                                                  BEQ         Dn_ea_AND_reg0_out              ;if equal go to output
00003478                          3523                                                  
00003478  B4BC 00000200           3524  Dn_ea_AND_reg1                                  CMP.L       #match_AND_reg1,D2                  ;check to see if reg equal 1
0000347E  6600 0006               3525                                                  BNE         Dn_ea_AND_reg2                  ;if not equal got check reg 2
00003482  6700 0068               3526                                                  BEQ         Dn_ea_AND_reg1_out              ;if equal go to output
00003486                          3527  
00003486  B4BC 00000400           3528  Dn_ea_AND_reg2                                  CMP.L       #match_AND_reg2,D2                  ;check to see if reg equal 2
0000348C  6600 0006               3529                                                  BNE         Dn_ea_AND_reg3                  ;if not equal got check reg 3
00003490  6700 006C               3530                                                  BEQ         Dn_ea_AND_reg2_out              ;if equal go to output
00003494                          3531  
00003494  B4BC 00000600           3532  Dn_ea_AND_reg3                                  CMP.L       #match_AND_reg3,D2                  ;check to see if reg equal 3
0000349A  6600 0006               3533                                                  BNE         Dn_ea_AND_reg4                  ;if not equal got check reg 4
0000349E  6700 0070               3534                                                  BEQ         Dn_ea_AND_reg3_out              ;if equal go to output
000034A2                          3535                                                  
000034A2  B4BC 00000800           3536  Dn_ea_AND_reg4                                  CMP.L       #match_AND_reg4,D2                  ;check to see if reg equal 4
000034A8  6600 0006               3537                                                  BNE         Dn_ea_AND_reg5                  ;if not equal got check reg 5
000034AC  6700 0074               3538                                                  BEQ         Dn_ea_AND_reg4_out              ;if equal go to output
000034B0                          3539  
000034B0  B4BC 00000A00           3540  Dn_ea_AND_reg5                                  CMP.L       #match_AND_reg5,D2                  ;check to see if reg equal 5
000034B6  6600 0006               3541                                                  BNE         Dn_ea_AND_reg6                  ;if not equal got check reg 6
000034BA  6700 0078               3542                                                  BEQ         Dn_ea_AND_reg5_out              ;if equal go to output
000034BE                          3543  
000034BE  B4BC 00000C00           3544  Dn_ea_AND_reg6                                  CMP.L       #match_AND_reg6,D2                  ;check to see if reg equal 6
000034C4  6600 0006               3545                                                  BNE         Dn_ea_AND_reg7                  ;if not equal got check reg 7
000034C8  6700 007C               3546                                                  BEQ         Dn_ea_AND_reg6_out              ;if equal go to output          
000034CC                          3547  
000034CC  B4BC 00000E00           3548  Dn_ea_AND_reg7                                  CMP.L       #match_AND_reg7,D2                  ;check to see if reg equal 7
000034D2  6700 0084               3549                                                  BEQ         Dn_ea_AND_reg7_out              ;if equal go to output
000034D6  6600 3A46               3550                                                  BNE          ERROR                                ;if not equal to an addresssing mode, pritn error
000034DA                          3551                                  
000034DA                          3552  
000034DA                          3553  ;--------------------Data Output-----------------------
000034DA  227C 000083F2           3554  Dn_ea_AND_reg0_out               MOVE.L         #ea_D0,A1                                          ;load string constant into A1
000034E0  4EB8 140A               3555                                      JSR             print_first
000034E4  4EB9 0000356A           3556                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
000034EA  4E75                    3557                                   RTS
000034EC                          3558                                                                                          
000034EC  227C 000083F5           3559  Dn_ea_AND_reg1_out               MOVE.L         #ea_D1,A1                                       ;load string constant into A1
000034F2  4EB8 140A               3560                                      JSR             print_first
000034F6  4EB9 0000356A           3561                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
000034FC  4E75                    3562                                   RTS
000034FE                          3563                                              
000034FE  227C 000083F8           3564  Dn_ea_AND_reg2_out               MOVE.L         #ea_D2,A1                                       ;load string constant into A1
00003504  4EB8 140A               3565                                      JSR             print_first
00003508  4EB9 0000356A           3566                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
0000350E  4E75                    3567                                   RTS
00003510                          3568                                              
00003510  227C 000083FB           3569  Dn_ea_AND_reg3_out               MOVE.L         #ea_D3,A1                                           ;load string constant into A1
00003516  4EB8 140A               3570                                      JSR             print_first
0000351A  4EB9 0000356A           3571                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003520  4E75                    3572                                   RTS
00003522                          3573                                              
00003522  227C 000083FE           3574  Dn_ea_AND_reg4_out               MOVE.L         #ea_D4,A1                                           ;load string constant into A1
00003528  4EB8 140A               3575                                      JSR             print_first
0000352C  4EB9 0000356A           3576                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003532  4E75                    3577                                   RTS
00003534                          3578                                              
00003534  227C 00008401           3579  Dn_ea_AND_reg5_out               MOVE.L         #ea_D5,A1                                           ;load string constant into A1
0000353A  4EB8 140A               3580                                      JSR             print_first
0000353E  4EB9 0000356A           3581                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003544  4E75                    3582                                   RTS
00003546                          3583                                              
00003546  227C 00008404           3584  Dn_ea_AND_reg6_out               MOVE.L         #ea_D6,A1                                           ;load string constant into A1
0000354C  4EB8 140A               3585                                      JSR             print_first
00003550  4EB9 0000356A           3586                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003556  4E75                    3587                                   RTS
00003558                          3588                                              
00003558  227C 00008407           3589  Dn_ea_AND_reg7_out               MOVE.L         #ea_D7,A1                                           ;load string constant into A1
0000355E  4EB8 140A               3590                                      JSR             print_first
00003562  4EB9 0000356A           3591                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003568  4E75                    3592                                   RTS                                            
0000356A                          3593  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
0000356A  4241                    3594  AND_determine_second_operand      CLR               D1                                            ;clear D1 to load new mask                                
0000356C  3200                    3595                                    MOVE.W            D0,D1  
0000356E  C2BC 00000038           3596                                   AND.L             #mask_AND_ea_mode,D1                        ;move the mask to D1
00003574                          3597  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00003574  B2BC 00000010           3598  Dn_ea_add_reg_indir              CMP.L             #match_AND_An_indir,D1                      ;check to see if mode is add reg indir
0000357A  6600 0006               3599                                   BNE               Dn_ea_add_reg_indir_predec                          ;if not, go check add reg indir predec 
0000357E  6700 0046               3600                                   BEQ               Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
00003582                          3601             
00003582  B2BC 00000020           3602  Dn_ea_add_reg_indir_predec       CMP.L             #match_AND_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00003588  6600 0006               3603                                   BNE               Dn_ea_add_reg_indir_postinc                         ;if not go check add reg indir/predec
0000358C  6700 01AC               3604                                   BEQ               Dn_ea_An_indir_predec                               ;if equal go figure out the register
00003590                          3605                        
00003590  B2BC 00000018           3606  Dn_ea_add_reg_indir_postinc      CMP.L             #match_AND_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00003596  6600 0006               3607                                   BNE               Dn_ea_abs_add_word                                  ;if not go check abs add word
0000359A  6700 00E4               3608                                   BEQ               Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
0000359E                          3609  
0000359E  4282                    3610  Dn_ea_abs_add_word              CLR.L   D2
000035A0  3400                    3611                                  MOVE.W      D0,D2 
000035A2  C4BC 0000003F           3612                                  AND.L             #mask_AND_abs_add,D2                        ;load mask to determine if abs add word or long
000035A8                          3613                                   
000035A8  B4BC 00000038           3614                                   CMP.L             #match_AND_abs_add_word,D2                  ;check if abs add word
000035AE  2A18                    3615                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000035B0  6600 0006               3616                                   BNE               Dn_ea_abs_add_long                                  ;if not go check abs add long
000035B4  6700 023E               3617                                   BEQ               Dn_ea_abs_add_word_out                              ;if equal go to output
000035B8                          3618    
000035B8  B4BC 00000039           3619  Dn_ea_abs_add_long               CMP.L             #match_AND_abs_add_long,D2                  ;check to see if abs add long
000035BE  6700 023E               3620                                   BEQ               Dn_ea_abs_add_long_out                              ;if equal go to output
000035C2  6600 395A               3621                                   BNE               ERROR                                         ;if not equal go to error mesage AND routine
000035C6                          3622  
000035C6                          3623  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000035C6                          3624                                   
000035C6                          3625                                   
000035C6                          3626  ;------------------Address Register Indirect-----------------------
000035C6  4282                    3627  Dn_ea_An_indir_reg               CLR.L      D2
000035C8  3400                    3628                                  MOVE.W      D0,D2
000035CA  C4BC 0000003F           3629                                  AND.L              #mask_AND_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
000035D0  B4BC 00000010           3630                                   CMP.L          #match_AND_An_indir_r0,D2              ;check reg is equal to 0
000035D6  6600 0006               3631                                   BNE             Dn_ea_An_indir_reg1                           ;if not try reg 1
000035DA  6700 0064               3632                                   BEQ             Dn_ea_An_indir_reg0_out                       ;if equal go to output ANDroutine
000035DE                          3633  
000035DE  B4BC 00000011           3634  Dn_ea_An_indir_reg1              CMP.L           #match_AND_An_indir_r1,D2              ;check reg is equal to 1
000035E4  6600 0006               3635                                   BNE             Dn_ea_An_indir_reg2                           ;if not try reg 2
000035E8  6700 005E               3636                                   BEQ             Dn_ea_An_indir_reg1_out                       ;if equal go to output ANDroutine
000035EC                          3637  
000035EC  B4BC 00000012           3638  Dn_ea_An_indir_reg2              CMP.L           #match_AND_An_indir_r2,D2              ;check reg is equal to 2
000035F2  6600 0006               3639                                   BNE             Dn_ea_An_indir_reg3                           ;if not try reg 3
000035F6  6700 0058               3640                                   BEQ             Dn_ea_An_indir_reg2_out                       ;if equal go to output ANDroutine
000035FA                          3641  
000035FA  B4BC 00000013           3642  Dn_ea_An_indir_reg3              CMP.L           #match_AND_An_indir_r3,D2              ;check reg is equal to 3
00003600  6600 0006               3643                                   BNE             Dn_ea_An_indir_reg4                           ;if not try reg 4
00003604  6700 0052               3644                                   BEQ             Dn_ea_An_indir_reg3_out                       ;if equal go to output ANDroutine
00003608                          3645      
00003608  B4BC 00000014           3646  Dn_ea_An_indir_reg4              CMP.L           #match_AND_An_indir_r4,D2              ;check reg is equal to 4
0000360E  6600 0006               3647                                   BNE             Dn_ea_An_indir_reg5                           ;if not try reg 5
00003612  6700 004C               3648                                   BEQ             Dn_ea_An_indir_reg4_out                       ;if equal go to output ANDroutine
00003616                          3649          
00003616  B4BC 00000015           3650  Dn_ea_An_indir_reg5              CMP.L           #match_AND_An_indir_r5,D2              ;check reg is equal to 5
0000361C  6600 0006               3651                                   BNE             Dn_ea_An_indir_reg6                           ;if not try reg 6
00003620  6700 0046               3652                                   BEQ             Dn_ea_An_indir_reg5_out                       ;if equal go to output ANDroutine
00003624                          3653  
00003624  B4BC 00000016           3654  Dn_ea_An_indir_reg6              CMP.L           #match_AND_An_indir_r6,D2              ;check reg is equal to 6
0000362A  6600 0006               3655                                   BNE             Dn_ea_An_indir_reg7                           ;if not try reg 7
0000362E  6700 0040               3656                                   BEQ             Dn_ea_An_indir_reg6_out                       ;if equal go to output ANDroutine
00003632                          3657  
00003632  B4BC 00000017           3658  Dn_ea_An_indir_reg7              CMP.L           #match_AND_An_indir_r7,D2              ;check reg is equal to 7
00003638  6700 003E               3659                                   BEQ             Dn_ea_An_indir_reg7_out                       ;if equal go to output ANDroutine
0000363C  6600 38E0               3660                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00003640                          3661  
00003640                          3662  ;--------------------Address Register Indirect Output-----------------------
00003640  227C 00008432           3663  Dn_ea_An_indir_reg0_out         MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00003646  4E75                    3664                                   RTS
00003648                          3665  
00003648  227C 00008437           3666  Dn_ea_An_indir_reg1_out         MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
0000364E  4E75                    3667                                   RTS
00003650                          3668  
00003650  227C 0000843C           3669  Dn_ea_An_indir_reg2_out         MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00003656  4E75                    3670                                   RTS
00003658                          3671  
00003658  227C 00008441           3672  Dn_ea_An_indir_reg3_out         MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
0000365E  4E75                    3673                                   RTS
00003660                          3674  
00003660  227C 00008446           3675  Dn_ea_An_indir_reg4_out         MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00003666  4E75                    3676                                   RTS
00003668                          3677  
00003668  227C 0000844B           3678  Dn_ea_An_indir_reg5_out         MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
0000366E  4E75                    3679                                   RTS
00003670                          3680  
00003670  227C 00008450           3681  Dn_ea_An_indir_reg6_out         MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00003676  4E75                    3682                                   RTS
00003678                          3683                                          
00003678  227C 00008455           3684  Dn_ea_An_indir_reg7_out         MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
0000367E  4E75                    3685                                   RTS
00003680                          3686  
00003680                          3687  ;------------------Address Register Indirect with Post Increment-----------------------
00003680  4282                    3688  Dn_ea_An_indir_postinc_reg                  CLR.L      D2
00003682  3400                    3689                                           MOVE.W      D0,D2
00003684  C4BC 0000003F           3690                                          AND.L              #mask_AND_ea_reg_and_mode,D2
0000368A  B4BC 00000018           3691                                              CMP.L      #match_AND_An_indir_postinc_r0,D2        ;check reg is equal to 0
00003690  6600 0006               3692                                              BNE        Dn_ea_An_indir_postinc_reg1                      ;if not try reg 1
00003694  6700 0064               3693                                              BEQ        Dn_ea_An_indir_postinc_reg0_out                  ;if equal go to output ANDroutine
00003698                          3694  
00003698  B4BC 00000019           3695  Dn_ea_An_indir_postinc_reg1                 CMP.L      #match_AND_An_indir_postinc_r1,D2        ;check reg is equal to 1
0000369E  6600 0006               3696                                              BNE        Dn_ea_An_indir_postinc_reg2                      ;if not try reg 2
000036A2  6700 005E               3697                                              BEQ        Dn_ea_An_indir_postinc_reg1_out                  ;if equal go to output ANDroutine
000036A6                          3698  
000036A6  B4BC 0000001A           3699  Dn_ea_An_indir_postinc_reg2                 CMP.L      #match_AND_An_indir_postinc_r2,D2        ;check reg is equal to 2
000036AC  6600 0006               3700                                              BNE        Dn_ea_An_indir_postinc_reg3                      ;if not try reg 3
000036B0  6700 0058               3701                                              BEQ        Dn_ea_An_indir_postinc_reg2_out                  ;if equal go to output ANDroutine
000036B4                          3702  
000036B4  B4BC 0000001B           3703  Dn_ea_An_indir_postinc_reg3                 CMP.L      #match_AND_An_indir_postinc_r3,D2        ;check reg is equal to 3
000036BA  6600 0006               3704                                              BNE        Dn_ea_An_indir_postinc_reg4                      ;if not try reg 4
000036BE  6700 0052               3705                                              BEQ        Dn_ea_An_indir_postinc_reg3_out                  ;if equal go to output ANDroutine
000036C2                          3706   
000036C2  B4BC 0000001C           3707  Dn_ea_An_indir_postinc_reg4                 CMP.L      #match_AND_An_indir_postinc_r4,D2        ;check reg is equal to 4
000036C8  6600 0006               3708                                              BNE        Dn_ea_An_indir_postinc_reg5                      ;if not try reg 5
000036CC  6700 004C               3709                                              BEQ        Dn_ea_An_indir_postinc_reg4_out                  ;if equal go to output ANDroutine
000036D0                          3710  
000036D0  B4BC 0000001D           3711  Dn_ea_An_indir_postinc_reg5                 CMP.L      #match_AND_An_indir_postinc_r5,D2        ;check reg is equal to 5
000036D6  6600 0006               3712                                              BNE        Dn_ea_An_indir_postinc_reg6                      ;if not try reg 6
000036DA  6700 0046               3713                                              BEQ        Dn_ea_An_indir_postinc_reg5_out                  ;if equal go to output ANDroutine
000036DE                          3714  
000036DE  B4BC 0000001E           3715  Dn_ea_An_indir_postinc_reg6                 CMP.L      #match_AND_An_indir_postinc_r6,D2         ;check reg is equal to 6
000036E4  6600 0006               3716                                              BNE        Dn_ea_An_indir_postinc_reg7                        ;if not try reg 7
000036E8  6700 0040               3717                                              BEQ        Dn_ea_An_indir_postinc_reg6_out                    ;if equal go to output ANDroutine
000036EC                          3718  
000036EC  B4BC 0000001F           3719  Dn_ea_An_indir_postinc_reg7                 CMP.L      #match_AND_An_indir_postinc_r7,D2         ;check reg is equal to 7
000036F2  6700 003E               3720                                              BEQ        Dn_ea_An_indir_postinc_reg7_out                    ;if equal go to output ANDroutine
000036F6  6600 3826               3721                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
000036FA                          3722  
000036FA                          3723  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000036FA  227C 0000845A           3724  Dn_ea_An_indir_postinc_reg0_out             MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00003700  4E75                    3725                                          RTS
00003702                          3726  
00003702  227C 00008460           3727  Dn_ea_An_indir_postinc_reg1_out             MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00003708  4E75                    3728                                          RTS
0000370A                          3729  
0000370A  227C 00008466           3730  Dn_ea_An_indir_postinc_reg2_out             MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00003710  4E75                    3731                                          RTS
00003712                          3732  
00003712  227C 0000846C           3733  Dn_ea_An_indir_postinc_reg3_out             MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00003718  4E75                    3734                                          RTS
0000371A                          3735  
0000371A  227C 00008472           3736  Dn_ea_An_indir_postinc_reg4_out             MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00003720  4E75                    3737                                          RTS
00003722                          3738  
00003722  227C 00008478           3739  Dn_ea_An_indir_postinc_reg5_out             MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00003728  4E75                    3740                                          RTS
0000372A                          3741  
0000372A  227C 0000847E           3742  Dn_ea_An_indir_postinc_reg6_out             MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00003730  4E75                    3743                                          RTS
00003732                          3744  
00003732  227C 00008484           3745  Dn_ea_An_indir_postinc_reg7_out             MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00003738  4E75                    3746                                          RTS
0000373A                          3747  
0000373A                          3748  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000373A  4282                    3749  Dn_ea_An_indir_predec                       CLR.L      D2
0000373C  3400                    3750                                          MOVE.W      D0,D2
0000373E  C4BC 0000003F           3751                                          AND.L              #mask_AND_ea_reg_and_mode,D2
00003744  B4BC 00000020           3752                                              CMP.L      #match_AND_An_indir_predec_reg0,D2       ;check reg is equal to 0
0000374A  6600 0006               3753                                              BNE        Dn_ea_An_indir_predec_reg1                      ;if not try reg 1
0000374E  6700 0064               3754                                              BEQ        Dn_ea_An_indir_predec_reg0_out               ;if equal go to output ANDroutine
00003752                          3755  
00003752  B4BC 00000021           3756  Dn_ea_An_indir_predec_reg1                  CMP.L      #match_AND_An_indir_predec_reg1,D2       ;check reg is equal to 1
00003758  6600 0006               3757                                              BNE        Dn_ea_An_indir_predec_reg2                      ;if not try reg 2
0000375C  6700 005E               3758                                              BEQ        Dn_ea_An_indir_predec_reg1_out               ;if equal go to output ANDroutine
00003760                          3759  
00003760  B4BC 00000022           3760  Dn_ea_An_indir_predec_reg2                  CMP.L      #match_AND_An_indir_predec_reg2,D2       ;check reg is equal to 2
00003766  6600 0006               3761                                              BNE        Dn_ea_An_indir_predec_reg3                      ;if not try reg 3
0000376A  6700 0058               3762                                              BEQ        Dn_ea_An_indir_predec_reg2_out               ;if equal go to output ANDroutine
0000376E                          3763  
0000376E  B4BC 00000023           3764  Dn_ea_An_indir_predec_reg3                  CMP.L      #match_AND_An_indir_predec_reg3,D2       ;check reg is equal to 3
00003774  6600 0006               3765                                              BNE        Dn_ea_An_indir_predec_reg4                      ;if not try reg 4
00003778  6700 0052               3766                                              BEQ        Dn_ea_An_indir_predec_reg3_out               ;if equal go to output ANDroutine
0000377C                          3767  
0000377C  B4BC 00000024           3768  Dn_ea_An_indir_predec_reg4                  CMP.L      #match_AND_An_indir_predec_reg4,D2       ;check reg is equal to 4
00003782  6600 0006               3769                                              BNE        Dn_ea_An_indir_predec_reg5                      ;if not try reg 5
00003786  6700 004C               3770                                              BEQ        Dn_ea_An_indir_predec_reg4_out               ;if equal go to output ANDroutine
0000378A                          3771  
0000378A  B4BC 00000025           3772  Dn_ea_An_indir_predec_reg5                  CMP.L      #match_AND_An_indir_predec_reg5,D2       ;check reg is equal to 5
00003790  6600 0006               3773                                              BNE        Dn_ea_An_indir_predec_reg6                     ;if not try reg 6
00003794  6700 0046               3774                                              BEQ        Dn_ea_An_indir_predec_reg5_out               ;if equal go to output ANDroutine
00003798                          3775  
00003798  B4BC 00000026           3776  Dn_ea_An_indir_predec_reg6                  CMP.L      #match_AND_An_indir_predec_reg6,D2       ;check reg is equal to 6
0000379E  6600 0006               3777                                              BNE        Dn_ea_An_indir_predec_reg7                     ;if not try reg 7
000037A2  6700 0040               3778                                              BEQ        Dn_ea_An_indir_predec_reg6_out               ;if equal go to output ANDroutine
000037A6                          3779  
000037A6  B4BC 00000027           3780  Dn_ea_An_indir_predec_reg7                  CMP.L      #match_AND_An_indir_predec_reg7,D2       ;check reg is equal to 7
000037AC  6700 003E               3781                                              BEQ        Dn_ea_An_indir_predec_reg7_out               ;if equal go to output ANDroutine
000037B0  6600 376C               3782                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
000037B4                          3783  
000037B4                          3784  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000037B4  227C 0000848A           3785  Dn_ea_An_indir_predec_reg0_out             MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
000037BA  4E75                    3786                                              RTS
000037BC                          3787                                              
000037BC  227C 00008490           3788  Dn_ea_An_indir_predec_reg1_out             MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
000037C2  4E75                    3789                                              RTS
000037C4                          3790  
000037C4  227C 00008496           3791  Dn_ea_An_indir_predec_reg2_out             MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
000037CA  4E75                    3792                                              RTS
000037CC                          3793  
000037CC  227C 0000849C           3794  Dn_ea_An_indir_predec_reg3_out             MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
000037D2  4E75                    3795                                              RTS
000037D4                          3796  
000037D4  227C 000084A2           3797  Dn_ea_An_indir_predec_reg4_out             MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
000037DA  4E75                    3798                                              RTS
000037DC                          3799  
000037DC  227C 000084A8           3800  Dn_ea_An_indir_predec_reg5_out             MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
000037E2  4E75                    3801                                              RTS
000037E4                          3802  
000037E4  227C 000084AE           3803  Dn_ea_An_indir_predec_reg6_out             MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
000037EA  4E75                    3804                                              RTS
000037EC                          3805  
000037EC  227C 000084B4           3806  Dn_ea_An_indir_predec_reg7_out             MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
000037F2  4E75                    3807                                              RTS
000037F4                          3808                                              
000037F4                          3809  ;------------------Absolute Addressing Output-----------------------
000037F4  22FC 000084C4           3810  Dn_ea_abs_add_word_out                MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000037FA  22C5                    3811                                        MOVE.L      D5,(A1)+                           ;load address                  
000037FC  4E75                    3812                                        RTS                                            :return to ANDroutine
000037FE                          3813                                             
000037FE                          3814  
000037FE  2A18                    3815  Dn_ea_abs_add_long_out                       MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00003800  22FC 000084C4           3816                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00003806  22C5                    3817                                        MOVE.L      D5,(A1)+                           ;load address                  
00003808  4E75                    3818                                        RTS                                            :return to ANDroutine                                                                             
0000380A                          3819  ;----------------------Error Handling----------------------------------------
0000380A                          3820  
0000380A  =000001C0               3821  mask_opmode                          EQU         $01C0                   ;mask for the opmode to determine operand order
0000380A                          3822  
0000380A  =00000038               3823  mask_AND_ea_mode                    EQU         $0038
0000380A  =0000003F               3824  mask_AND_abs_add                    EQU         $003F
0000380A  =0000003F               3825  mask_AND_ea_reg_and_mode            EQU         $003F
0000380A  =00000E00               3826  mask_AND_An_reg                 EQU         $0E00
0000380A                          3827  
0000380A                          3828  
0000380A  =00000100               3829  match_AND_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
0000380A  =00000140               3830  match_AND_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
0000380A  =00000180               3831  match_AND_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
0000380A                          3832  
0000380A  =00000000               3833  match_AND_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
0000380A  =00000040               3834  match_AND_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
0000380A  =00000080               3835  match_AND_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
0000380A                          3836  
0000380A                          3837  
0000380A                          3838  
0000380A  =00000000               3839  match_AND_Dn                        EQU         $0000
0000380A  =00000010               3840  match_AND_An_indir                  EQU         $0010
0000380A  =00000020               3841  match_AND_An_indir_predec           EQU         $0020
0000380A  =00000018               3842  match_AND_An_indir_postinc          EQU         $0018
0000380A  =00000038               3843  match_AND_abs_add_word              EQU         $0038
0000380A  =00000039               3844  match_AND_abs_add_long              EQU         $0039
0000380A                          3845  
0000380A  =00000000               3846  match_AND_D0                            EQU         $0000
0000380A  =00000001               3847  match_AND_D1                            EQU         $0001
0000380A  =00000002               3848  match_AND_D2                            EQU         $0002
0000380A  =00000003               3849  match_AND_D3                            EQU         $0003
0000380A  =00000004               3850  match_AND_D4                            EQU         $0004
0000380A  =00000005               3851  match_AND_D5                            EQU         $0005
0000380A  =00000006               3852  match_AND_D6                            EQU         $0006
0000380A  =00000007               3853  match_AND_D7                            EQU         $0007
0000380A                          3854  
0000380A  =00000008               3855  match_AND_A0                            EQU         $0008
0000380A  =00000009               3856  match_AND_A1                            EQU         $0009
0000380A  =0000000A               3857  match_AND_A2                            EQU         $000A
0000380A  =0000000B               3858  match_AND_A3                            EQU         $000B
0000380A  =0000000C               3859  match_AND_A4                            EQU         $000C
0000380A  =0000000D               3860  match_AND_A5                            EQU         $000D
0000380A  =0000000E               3861  match_AND_A6                            EQU         $000E
0000380A  =0000000F               3862  match_AND_A7                            EQU         $000F
0000380A                          3863  
0000380A  =00000010               3864  match_AND_An_indir_r0                   EQU         $0010
0000380A  =00000011               3865  match_AND_An_indir_r1                   EQU         $0011
0000380A  =00000012               3866  match_AND_An_indir_r2                   EQU         $0012
0000380A  =00000013               3867  match_AND_An_indir_r3                   EQU         $0013
0000380A  =00000014               3868  match_AND_An_indir_r4                   EQU         $0014
0000380A  =00000015               3869  match_AND_An_indir_r5                   EQU         $0015
0000380A  =00000016               3870  match_AND_An_indir_r6                   EQU         $0016
0000380A  =00000017               3871  match_AND_An_indir_r7                   EQU         $0017
0000380A                          3872  
0000380A  =00000018               3873  match_AND_An_indir_postinc_r0       EQU         $0018
0000380A  =00000019               3874  match_AND_An_indir_postinc_r1       EQU         $0019
0000380A  =0000001A               3875  match_AND_An_indir_postinc_r2       EQU         $001A
0000380A  =0000001B               3876  match_AND_An_indir_postinc_r3       EQU         $001B
0000380A  =0000001C               3877  match_AND_An_indir_postinc_r4       EQU         $001C
0000380A  =0000001D               3878  match_AND_An_indir_postinc_r5       EQU         $001D
0000380A  =0000001E               3879  match_AND_An_indir_postinc_r6       EQU         $001E
0000380A  =0000001F               3880  match_AND_An_indir_postinc_r7       EQU         $001F
0000380A                          3881  
0000380A  =00000020               3882  match_AND_An_indir_predec_reg0          EQU         $0020
0000380A  =00000021               3883  match_AND_An_indir_predec_reg1          EQU         $0021
0000380A  =00000022               3884  match_AND_An_indir_predec_reg2          EQU         $0022
0000380A  =00000023               3885  match_AND_An_indir_predec_reg3          EQU         $0023
0000380A  =00000024               3886  match_AND_An_indir_predec_reg4          EQU         $0024
0000380A  =00000025               3887  match_AND_An_indir_predec_reg5          EQU         $0025
0000380A  =00000026               3888  match_AND_An_indir_predec_reg6          EQU         $0026
0000380A  =00000027               3889  match_AND_An_indir_predec_reg7          EQU         $0027
0000380A                          3890  
0000380A  =0000003C               3891  match_AND_imm_add                           EQU         $003C
0000380A  =000000FC               3892  match_AND_imm_add_word                      EQU         $00FC
0000380A  =000001FC               3893  match_AND_imm_add_long                      EQU         $01FC
0000380A                          3894  
0000380A  =00000000               3895  match_AND_reg0                          EQU         $0000
0000380A  =00000200               3896  match_AND_reg1                          EQU         $0200
0000380A  =00000400               3897  match_AND_reg2                          EQU         $0400
0000380A  =00000600               3898  match_AND_reg3                          EQU         $0600
0000380A  =00000800               3899  match_AND_reg4                          EQU         $0800
0000380A  =00000A00               3900  match_AND_reg5                          EQU         $0A00
0000380A  =00000C00               3901  match_AND_reg6                          EQU         $0C00
0000380A  =00000E00               3902  match_AND_reg7                          EQU         $0E00
0000380A                          3903  
0000380A                          3904  
0000380A                          3905  
0000380A                          3906  
0000380A                          3907  
0000380A                          3908  
0000380A                          3909  
0000380A                          3910  
0000380A                          3911  
0000380A                          3912  
0000380A                          3913  
0000380A                          3914  -------------------- end include --------------------
0000380A                          3915              INCLUDE 'ADDA Subroutine.x68'
0000380A                          3916     
0000380A                          3917  ADDA_sub                                                 ;preserve the registers, 
0000380A  C2BC 00000038           3918                                   AND.L             #mask_ADDA_ea_mode,D1                         ;move the mask to D1
00003810                          3919  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00003810  B2BC 00000000           3920  ADDA_data_reg_dir                CMP.L             #match_ADDA_Dn,D1                             ;check to see if mode is data reg direct
00003816  6600 0006               3921                                   BNE               ADDA_add_reg_dir                              ;if not, go check add reg dir
0000381A  6700 006A               3922                                   BEQ               ADDA_Dn_reg                                   ;if equal go figure out the register
0000381E                          3923  
0000381E  B2BC 00000008           3924  ADDA_add_reg_dir                 CMP.L             #match_ADDA_An,D1                             ;check if mode is add reg direct
00003824  6600 0006               3925                                   BNE               ADDA_add_reg_indir                            ;if not, go check add reg indir
00003828  6700 0166               3926                                   BEQ               ADDA_An_reg                                   ;if equal go figure out the reg
0000382C                          3927   
0000382C  B2BC 00000010           3928  ADDA_add_reg_indir               CMP.L             #match_ADDA_An_indir,D1                       ;check to see if mode is add reg indir
00003832  6600 0006               3929                                   BNE               ADDA_add_reg_indir_predec                     ;if not, go check add reg indir predec 
00003836  6700 0262               3930                                   BEQ               ADDA_An_indir_reg                             ;if equal go figure out the register           
0000383A                          3931             
0000383A  B2BC 00000020           3932  ADDA_add_reg_indir_predec        CMP.L             #match_ADDA_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00003840  6600 0006               3933                                   BNE               ADDA_add_reg_indir_postinc                    ;if not go check add reg indir/predec
00003844  6700 0468               3934                                   BEQ               ADDA_An_indir_predec                          ;if equal go figure out the register
00003848                          3935                        
00003848  B2BC 00000018           3936  ADDA_add_reg_indir_postinc       CMP.L             #match_ADDA_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
0000384E  6600 0006               3937                                   BNE               ADDA_abs_add_word                             ;if not go check abs add word
00003852  6700 0350               3938                                   BEQ               ADDA_An_indir_postinc_reg                     ;if equal go figure out the register
00003856                          3939  
00003856  3400                    3940  ADDA_abs_add_word                MOVE.W     D0,D2
00003858  C4BC 0000003F           3941                                   AND.L             #mask_ADDA_abs_add,D2                         ;load mask to determine if abs add word or long
0000385E                          3942                                   
0000385E  B4BC 00000038           3943                                   CMP.L             #match_ADDA_abs_add_word,D2                   ;check if abs add word
00003864  2A18                    3944                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00003866  6600 0006               3945                                   BNE               ADDA_abs_add_long                             ;if not go check abs add long
0000386A  6700 054C               3946                                   BEQ               ADDA_abs_add_word_out                         ;if equal go to output
0000386E                          3947    
0000386E  B4BC 00000039           3948  ADDA_abs_add_long                CMP.L             #match_ADDA_abs_add_long,D2                   ;check to see if abs add long
00003874  6700 0552               3949                                   BEQ               ADDA_abs_add_long_out                         ;if equal go to output
00003878                          3950                                   
00003878  B2BC 0000003C           3951  ADDA_immediate_add               CMP.L             #match_ADDA_imm_add,D1                             ;check if immediate address
0000387E  6700 055A               3952                                   BEQ               ADDA_immediate_add_out                        ;if equal go to immediate add sub routine
00003882  6600 369A               3953                                   BNE               ERROR                                         ;if not equal go to error mesage sub routine
00003886                          3954  
00003886                          3955  
00003886                          3956  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00003886                          3957                                   
00003886                          3958                                   
00003886                          3959  ;-----------------------------------Data Register Direct--------------------------------
00003886  4282                    3960  ADDA_Dn_reg                     CLR.L   D2
00003888  3400                    3961                                  MOVE.W  D0,D2 
0000388A  C4BC 0000003F           3962                                  AND.L              #mask_ADDA_ea_reg_and_mode,D2                ;load the mask into D2 for the mode and the register
00003890  B4BC 00000000           3963                                   CMP.L              #match_ADDA_D0,D2                            ;check to see in the register is 0
00003896  6600 0006               3964                                   BNE                ADDA_rD1                                     ;if not go check register 1
0000389A  6700 0064               3965                                   BEQ                ADDA_D0_out                                  ;if equal go to output subroutine
0000389E                          3966  
0000389E  B4BC 00000001           3967  ADDA_rD1                         CMP.L              #match_ADDA_D1,D2                            ;check to see in the register is 1
000038A4  6600 0006               3968                                   BNE                ADDA_rD2                                     ;if not go check register 2
000038A8  6700 0068               3969                                   BEQ                ADDA_D1_out                                  ;if equal go to output subroutine
000038AC                          3970  
000038AC  B4BC 00000002           3971  ADDA_rD2                         CMP.L              #match_ADDA_D2,D2                            ;check to see in the register is 2
000038B2  6600 0006               3972                                   BNE                ADDA_rD3                                     ;if not go check register 3
000038B6  6700 006C               3973                                   BEQ                ADDA_D2_out                                  ;if equal go to output subroutine
000038BA                          3974  
000038BA  B4BC 00000003           3975  ADDA_rD3                         CMP.L              #match_ADDA_D3,D2                            ;check to see in the register is 3
000038C0  6600 0006               3976                                   BNE                ADDA_rD4                                     ;if not go check register 4
000038C4  6700 0070               3977                                   BEQ                ADDA_D3_out                                  ;if equal go to output subroutine
000038C8                          3978  
000038C8  B4BC 00000004           3979  ADDA_rD4                         CMP.L              #match_ADDA_D4,D2                            ;check to see in the register is 4
000038CE  6600 0006               3980                                   BNE                ADDA_rD5                                     ;if not go check register 5
000038D2  6700 0074               3981                                   BEQ                ADDA_D4_out                                  ;if equal go to output subroutine
000038D6                          3982  
000038D6  B4BC 00000005           3983  ADDA_rD5                         CMP.L              #match_ADDA_D5,D2                            ;check to see in the register is 5
000038DC  6600 0006               3984                                   BNE                ADDA_rD6                                     ;if not go check register 6
000038E0  6700 0078               3985                                   BEQ                ADDA_D5_out                                  ;if equal go to output subroutine
000038E4                          3986  
000038E4  B4BC 00000006           3987  ADDA_rD6                         CMP.L              #match_ADDA_D6,D2                            ;check to see in the register is 6
000038EA  6600 0006               3988                                   BNE                ADDA_rD7                                     ;if not go check register 7
000038EE  6700 007C               3989                                   BEQ                ADDA_D6_out                                  ;if equal go to output subroutine
000038F2                          3990  
000038F2  B4BC 00000007           3991  ADDA_rD7                         CMP.L              #match_ADDA_D7,D2                            ;check to see in the register is 7
000038F8  6700 0084               3992                                   BEQ                ADDA_D7_out                                  ;if equal go to output subroutine
000038FC  6600 3620               3993                                   BNE                ERROR                                        ;if not equal, got to error message
00003900                          3994  
00003900                          3995  
00003900                          3996  ;--------------------Data Register Direct Output-----------------------
00003900  227C 000083F2           3997  ADDA_D0_out                     MOVE.L              #ea_D0,A1                                    ;load string constant into A1
00003906  4EB8 140A               3998                                  JSR             print_first
0000390A  4EB9 00003E0E           3999                                  JSR                 ADDA_determine_second_op                                
00003910  4E75                    4000                                  RTS
00003912                          4001  
00003912  227C 000083F5           4002  ADDA_D1_out                     MOVE.L              #ea_D1,A1                                    ;load string constant into A1
00003918  4EB8 140A               4003                                  JSR             print_first
0000391C  4EB9 00003E0E           4004                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003922  4E75                    4005                                  RTS
00003924                          4006                                  
00003924  227C 000083F8           4007  ADDA_D2_out                     MOVE.L              #ea_D2,A1                                    ;load string constant into A1
0000392A  4EB8 140A               4008                                  JSR             print_first
0000392E  4EB9 00003E0E           4009                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003934  4E75                    4010                                  RTS
00003936                          4011                                  
00003936  227C 000083FB           4012  ADDA_D3_out                     MOVE.L              #ea_D3,A1                                    ;load string constant into A1
0000393C  4EB8 140A               4013                                  JSR             print_first
00003940  4EB9 00003E0E           4014                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003946  4E75                    4015                                  RTS
00003948                          4016                                  
00003948  227C 000083FE           4017  ADDA_D4_out                     MOVE.L              #ea_D4,A1                                    ;load string constant into A1
0000394E  4EB8 140A               4018                                  JSR             print_first
00003952  4EB9 00003E0E           4019                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003958  4E75                    4020                                  RTS
0000395A                          4021                                  
0000395A  227C 00008401           4022  ADDA_D5_out                     MOVE.L              #ea_D5,A1                                    ;load string constant into A1
00003960  4EB8 140A               4023                                  JSR             print_first
00003964  4EB9 00003E0E           4024                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000396A  4E75                    4025                                  RTS
0000396C                          4026  
0000396C  227C 00008404           4027  ADDA_D6_out                     MOVE.L              #ea_D6,A1                                ;load string constant into A1
00003972  4EB8 140A               4028                                  JSR             print_first
00003976  4EB9 00003E0E           4029                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000397C  4E75                    4030                                  RTS
0000397E                          4031                                  
0000397E  227C 00008407           4032  ADDA_D7_out                     MOVE.L              #ea_D7,A1                                    ;load string constant into A1
00003984  4EB8 140A               4033                                  JSR             print_first
00003988  4EB9 00003E0E           4034                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000398E  4E75                    4035                                  RTS
00003990                          4036                                  
00003990                          4037  ;------------------Address Register Direct-----------------------
00003990  4282                    4038  ADDA_An_reg                     CLR.L   D2
00003992  3400                    4039                                  MOVE.W  D0,D2 
00003994  C4BC 0000003F           4040                                  AND.L              #mask_ADDA_ea_reg_and_mode,D2  
0000399A  B4BC 00000008           4041                                  CMP.L           #match_ADDA_A0,D2                               ;check reg is equal to 0
000039A0  6600 0006               4042                                   BNE             ADDA_rA1                                        ;if not try reg 1
000039A4  6700 016E               4043                                   BEQ             ADDA_An_indir_reg0_out                          ;if equal go to output subroutine
000039A8                          4044  
000039A8  B4BC 00000009           4045  ADDA_rA1                         CMP.L           #match_ADDA_A1,D2                               ;check reg is equal to 1
000039AE  6600 0006               4046                                   BNE             ADDA_rA2                                        ;if not try reg 2
000039B2  6700 0172               4047                                   BEQ             ADDA_An_indir_reg1_out                          ;if equal go to output subroutine
000039B6                          4048  
000039B6  B4BC 0000000A           4049  ADDA_rA2                         CMP.L           #match_ADDA_A2,D2                               ;check reg is equal to 2
000039BC  6600 0006               4050                                   BNE             ADDA_rA3                                        ;if not try reg 3
000039C0  6700 0176               4051                                   BEQ             ADDA_An_indir_reg2_out                          ;if equal go to output subroutine
000039C4                          4052  
000039C4  B4BC 0000000B           4053  ADDA_rA3                         CMP.L           #match_ADDA_A3,D2                               ;check reg is equal to 3
000039CA  6600 0006               4054                                   BNE             ADDA_rA4                                        ;if not try reg 4
000039CE  6700 017A               4055                                   BEQ             ADDA_An_indir_reg3_out                          ;if equal go to output subroutine
000039D2                          4056  
000039D2  B4BC 0000000C           4057  ADDA_rA4                         CMP.L           #match_ADDA_A4,D2                               ;check reg is equal to 4
000039D8  6600 0006               4058                                   BNE             ADDA_rA5                                        ;if not try reg 5
000039DC  6700 017E               4059                                   BEQ             ADDA_An_indir_reg4_out                          ;if equal go to output subroutine
000039E0                          4060              
000039E0  B4BC 0000000D           4061  ADDA_rA5                         CMP.L           #match_ADDA_A5,D2                               ;check reg is equal to 5
000039E6  6600 0006               4062                                   BNE             ADDA_rA6                                        ;if not try reg 6
000039EA  6700 0182               4063                                   BEQ             ADDA_An_indir_reg5_out                          ;if equal go to output subroutine
000039EE                          4064  
000039EE  B4BC 0000000E           4065  ADDA_rA6                         CMP.L           #match_ADDA_A6,D2                               ;check reg is equal to 6
000039F4  6600 0006               4066                                   BNE             ADDA_rA7                                        ;if not try reg 7
000039F8  6700 0186               4067                                   BEQ             ADDA_An_indir_reg6_out                          ;if equal go to output subroutine
000039FC                          4068  
000039FC  B4BC 0000000F           4069  ADDA_rA7                         CMP.L           #match_ADDA_A7,D2                               ;check reg is equal to 7
00003A02  6700 018E               4070                                   BEQ             ADDA_An_indir_reg7_out                          ;if equal go to output subroutine
00003A06  6600 3516               4071                                   BNE             ERROR                                           ;if not equal to an addresssing mode, pritn error
00003A0A                          4072  
00003A0A                          4073  
00003A0A                          4074  ;--------------------Address Register Direct Output-----------------------
00003A0A  227C 0000840A           4075  ADDA_A0_out                      MOVE.L              #ea_A0,A1                                       ;load string constant into A1
00003A10  4EB8 140A               4076                                  JSR             print_first
00003A14  4EB9 00003E0E           4077                                   JSR                ADDA_determine_second_op                         ;jump to subroutine to determine second operand
00003A1A  4E75                    4078                                   RTS                                
00003A1C                          4079                                   
00003A1C  227C 0000840D           4080  ADDA_A1_out                      MOVE.L             #ea_A1,A1                                    ;load string constant into A1
00003A22  4EB8 140A               4081                                  JSR             print_first
00003A26  4EB9 00003E0E           4082                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003A2C  4E75                    4083                                   RTS
00003A2E                          4084                                  
00003A2E  227C 00008410           4085  ADDA_A2_out                      MOVE.L             #ea_A2,A1                                    ;load string constant into A1
00003A34  4EB8 140A               4086                                  JSR             print_first
00003A38  4EB9 00003E0E           4087                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003A3E  4E75                    4088                                   RTS
00003A40                          4089                              
00003A40  227C 00008413           4090  ADDA_A3_out                      MOVE.L             #ea_A3,A1                                    ;load string constant into A1
00003A46  4EB8 140A               4091                                  JSR             print_first
00003A4A  4EB9 00003E0E           4092                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003A50  4E75                    4093                                   RTS
00003A52                          4094                                  
00003A52  227C 00008416           4095  ADDA_A4_out                      MOVE.L             #ea_A4,A1                                    ;load string constant into A1
00003A58  4EB8 140A               4096                                  JSR             print_first
00003A5C  4EB9 00003E0E           4097                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003A62  4E75                    4098                                   RTS
00003A64                          4099                                  
00003A64  227C 00008419           4100  ADDA_A5_out                      MOVE.L             #ea_A5,A1                                     ;load string constant into A1
00003A6A  4EB8 140A               4101                                  JSR             print_first
00003A6E  4EB9 00003E0E           4102                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003A74  4E75                    4103                                   RTS
00003A76                          4104                                  
00003A76  227C 0000841C           4105  ADDA_A6_out                      MOVE.L             #ea_A6,A1                                    ;load string constant into A1
00003A7C  4EB8 140A               4106                                  JSR             print_first
00003A80  4EB9 00003E0E           4107                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003A86  4E75                    4108                                   RTS
00003A88                          4109                                  
00003A88  227C 0000841F           4110  ADDA_A7_out                      MOVE.L             #ea_A7,A1                                    ;load string constant into A1
00003A8E  4EB8 140A               4111                                  JSR             print_first
00003A92  4EB9 00003E0E           4112                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003A98  4E75                    4113                                   RTS
00003A9A                          4114  
00003A9A                          4115  ;------------------Address Register Indirect-----------------------
00003A9A  4282                    4116  ADDA_An_indir_reg               CLR.L   D2
00003A9C  3400                    4117                                  MOVE.W  D0,D2 
00003A9E  C4BC 0000003F           4118                                  AND.L              #mask_ADDA_ea_reg_and_mode,D2  
00003AA4  B4BC 00000010           4119                                  CMP.L              #match_ADDA_An_indir_r0,D2                   ;check reg is equal to 0
00003AAA  6600 0006               4120                                   BNE                ADDA_An_indir_reg1                           ;if not try reg 1
00003AAE  6700 0064               4121                                   BEQ                ADDA_An_indir_reg0_out                       ;if equal go to output subroutine
00003AB2                          4122  
00003AB2  B4BC 00000011           4123  ADDA_An_indir_reg1               CMP.L              #match_ADDA_An_indir_r1,D2                   ;check reg is equal to 1
00003AB8  6600 0006               4124                                   BNE                ADDA_An_indir_reg2                           ;if not try reg 2
00003ABC  6700 0068               4125                                   BEQ                ADDA_An_indir_reg1_out                       ;if equal go to output subroutine
00003AC0                          4126  
00003AC0  B4BC 00000012           4127  ADDA_An_indir_reg2               CMP.L              #match_ADDA_An_indir_r2,D2                   ;check reg is equal to 2
00003AC6  6600 0006               4128                                   BNE                ADDA_An_indir_reg3                           ;if not try reg 3
00003ACA  6700 006C               4129                                   BEQ                ADDA_An_indir_reg2_out                       ;if equal go to output subroutine
00003ACE                          4130  
00003ACE  B4BC 00000013           4131  ADDA_An_indir_reg3               CMP.L              #match_ADDA_An_indir_r3,D2                   ;check reg is equal to 3
00003AD4  6600 0006               4132                                   BNE                ADDA_An_indir_reg4                           ;if not try reg 4
00003AD8  6700 0070               4133                                   BEQ                ADDA_An_indir_reg3_out                       ;if equal go to output subroutine
00003ADC                          4134      
00003ADC  B4BC 00000014           4135  ADDA_An_indir_reg4               CMP.L              #match_ADDA_An_indir_r4,D2                   ;check reg is equal to 4
00003AE2  6600 0006               4136                                   BNE                ADDA_An_indir_reg5                           ;if not try reg 5
00003AE6  6700 0074               4137                                   BEQ                ADDA_An_indir_reg4_out                       ;if equal go to output subroutine
00003AEA                          4138          
00003AEA  B4BC 00000015           4139  ADDA_An_indir_reg5               CMP.L              #match_ADDA_An_indir_r5,D2                   ;check reg is equal to 5
00003AF0  6600 0006               4140                                   BNE                ADDA_An_indir_reg6                           ;if not try reg 6
00003AF4  6700 0078               4141                                   BEQ                ADDA_An_indir_reg5_out                       ;if equal go to output subroutine
00003AF8                          4142  
00003AF8  B4BC 00000016           4143  ADDA_An_indir_reg6               CMP.L              #match_ADDA_An_indir_r6,D2                   ;check reg is equal to 6
00003AFE  6600 0006               4144                                   BNE                ADDA_An_indir_reg7                           ;if not try reg 7
00003B02  6700 007C               4145                                   BEQ                ADDA_An_indir_reg6_out                       ;if equal go to output subroutine
00003B06                          4146  
00003B06  B4BC 00000017           4147  ADDA_An_indir_reg7               CMP.L              #match_ADDA_An_indir_r7,D2                   ;check reg is equal to 7
00003B0C  6700 0084               4148                                   BEQ                ADDA_An_indir_reg7_out                       ;if equal go to output subroutine
00003B10  6600 340C               4149                                   BNE                ERROR                                        ;if not equal to an addresssing mode, pritn error
00003B14                          4150  
00003B14                          4151  
00003B14                          4152  ;--------------------Address Register Indirect Output-----------------------
00003B14  227C 00008432           4153  ADDA_An_indir_reg0_out           MOVE.L         #ea_indir_A0,A1                             ;load string constant into A1
00003B1A  4EB8 140A               4154                                  JSR             print_first
00003B1E  4EB9 00003E0E           4155                                   JSR            ADDA_determine_second_op                    ;jump to subroutine to determine second operand
00003B24  4E75                    4156                                   RTS
00003B26                          4157                                  
00003B26  227C 00008437           4158  ADDA_An_indir_reg1_out           MOVE.L         #ea_indir_A1,A1                             ;load string constant into A1
00003B2C  4EB8 140A               4159                                  JSR             print_first
00003B30  4EB9 00003E0E           4160                                   JSR            ADDA_determine_second_op                    ;jump to subroutine to determine second operand
00003B36  4E75                    4161                                   RTS
00003B38                          4162                                  
00003B38  227C 0000843C           4163  ADDA_An_indir_reg2_out           MOVE.L         #ea_indir_A2,A1                              ;load string constant into A1
00003B3E  4EB8 140A               4164                                  JSR             print_first
00003B42  4EB9 00003E0E           4165                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003B48  4E75                    4166                                   RTS
00003B4A                          4167                                  
00003B4A  227C 00008441           4168  ADDA_An_indir_reg3_out           MOVE.L         #ea_indir_A3,A1                              ;load string constant into A1
00003B50  4EB8 140A               4169                                  JSR             print_first
00003B54  4EB9 00003E0E           4170                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003B5A  4E75                    4171                                   RTS
00003B5C                          4172                                  
00003B5C  227C 00008446           4173  ADDA_An_indir_reg4_out           MOVE.L         #ea_indir_A4,A1                            ;load string constant into A1
00003B62  4EB8 140A               4174                                  JSR             print_first
00003B66  4EB9 00003E0E           4175                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003B6C  4E75                    4176                                   RTS
00003B6E                          4177                                  
00003B6E  227C 0000844B           4178  ADDA_An_indir_reg5_out           MOVE.L         #ea_indir_A5,A1                             ;load string constant into A1
00003B74  4EB8 140A               4179                                  JSR             print_first
00003B78  4EB9 00003E0E           4180                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
00003B7E  4E75                    4181                                   RTS
00003B80                          4182                                  
00003B80  227C 00008450           4183  ADDA_An_indir_reg6_out           MOVE.L         #ea_indir_A6,A1                             ;load string constant into A1
00003B86  4EB8 140A               4184                                  JSR             print_first
00003B8A  4EB9 00003E0E           4185                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
00003B90  4E75                    4186                                   RTS
00003B92                          4187                                          
00003B92  227C 00008455           4188  ADDA_An_indir_reg7_out           MOVE.L         #ea_indir_A7,A1                             ;load string constant into A1
00003B98  4EB8 140A               4189                                  JSR             print_first
00003B9C  4EB9 00003E0E           4190                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
00003BA2  4E75                    4191                                   RTS
00003BA4                          4192  
00003BA4                          4193  ;------------------Address Register Indirect with Post Increment-----------------------
00003BA4  4282                    4194  ADDA_An_indir_postinc_reg       CLR.L   D2
00003BA6  3400                    4195                                  MOVE.W  D0,D2 
00003BA8  C4BC 0000003F           4196                                  AND.L              #mask_ADDA_ea_reg_and_mode,D2  
00003BAE  B4BC 00000018           4197                                  CMP.L              #match_ADDA_An_indir_postinc_reg0,D2         ;check reg is equal to 0
00003BB4  6600 0006               4198                                   BNE                ADDA_An_indir_postinc_reg1                   ;if not try reg 1
00003BB8  6700 0064               4199                                   BEQ                ADDA_An_indir_postinc_reg0_out               ;if equal go to output subroutine
00003BBC                          4200  
00003BBC  B4BC 00000019           4201  ADDA_An_indir_postinc_reg1       CMP.L              #match_ADDA_An_indir_postinc_reg1,D2         ;check reg is equal to 1
00003BC2  6600 0006               4202                                   BNE            ADDA_An_indir_postinc_reg2                   ;if not try reg 2
00003BC6  6700 0068               4203                                   BEQ            ADDA_An_indir_postinc_reg1_out               ;if equal go to output subroutine
00003BCA                          4204  
00003BCA  B4BC 0000001A           4205  ADDA_An_indir_postinc_reg2       CMP.L          #match_ADDA_An_indir_postinc_reg2,D2         ;check reg is equal to 2
00003BD0  6600 0006               4206                                   BNE            ADDA_An_indir_postinc_reg3                   ;if not try reg 3
00003BD4  6700 006C               4207                                   BEQ            ADDA_An_indir_postinc_reg2_out               ;if equal go to output subroutine
00003BD8                          4208  
00003BD8  B4BC 0000001B           4209  ADDA_An_indir_postinc_reg3       CMP.L          #match_ADDA_An_indir_postinc_reg3,D2         ;check reg is equal to 3
00003BDE  6600 0006               4210                                   BNE            ADDA_An_indir_postinc_reg4                   ;if not try reg 4
00003BE2  6700 0070               4211                                   BEQ            ADDA_An_indir_postinc_reg3_out               ;if equal go to output subroutine
00003BE6                          4212   
00003BE6  B4BC 0000001C           4213  ADDA_An_indir_postinc_reg4       CMP.L          #match_ADDA_An_indir_postinc_reg4,D2         ;check reg is equal to 4
00003BEC  6600 0006               4214                                   BNE            ADDA_An_indir_postinc_reg5                   ;if not try reg 5
00003BF0  6700 0074               4215                                   BEQ            ADDA_An_indir_postinc_reg4_out               ;if equal go to output subroutine
00003BF4                          4216  
00003BF4  B4BC 0000001D           4217  ADDA_An_indir_postinc_reg5       CMP.L          #match_ADDA_An_indir_postinc_reg5,D2         ;check reg is equal to 5
00003BFA  6600 0006               4218                                   BNE            ADDA_An_indir_postinc_reg6                   ;if not try reg 6
00003BFE  6700 0078               4219                                   BEQ            ADDA_An_indir_postinc_reg5_out               ;if equal go to output subroutine
00003C02                          4220  
00003C02  B4BC 0000001E           4221  ADDA_An_indir_postinc_reg6       CMP.L          #match_ADDA_An_indir_postinc_reg6,D2         ;check reg is equal to 6
00003C08  6600 0006               4222                                   BNE            ADDA_An_indir_postinc_reg7                   ;if not try reg 7
00003C0C  6700 007C               4223                                   BEQ            ADDA_An_indir_postinc_reg6_out               ;if equal go to output subroutine
00003C10                          4224  
00003C10  B4BC 0000001F           4225  ADDA_An_indir_postinc_reg7       CMP.L          #match_ADDA_An_indir_postinc_reg7,D2         ;check reg is equal to 7
00003C16  6700 0084               4226                                   BEQ            ADDA_An_indir_postinc_reg7_out               ;if equal go to output subroutine
00003C1A  6600 3302               4227                                   BNE                ERROR                                        ;if not equal to an addresssing mode, pritn error
00003C1E                          4228  
00003C1E                          4229  
00003C1E                          4230  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00003C1E  227C 0000845A           4231  ADDA_An_indir_postinc_reg0_out        MOVE.L            #ea_indir_postinc_A0,A1              ;load string constant into A1
00003C24  4EB8 140A               4232                                  JSR             print_first
00003C28  4EB9 00003E0E           4233                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003C2E  4E75                    4234                                        RTS
00003C30                          4235                                        
00003C30  227C 00008460           4236  ADDA_An_indir_postinc_reg1_out        MOVE.L            #ea_indir_postinc_A1,A1              ;load string constant into A1
00003C36  4EB8 140A               4237                                  JSR             print_first
00003C3A  4EB9 00003E0E           4238                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003C40  4E75                    4239                                        RTS
00003C42                          4240                                        
00003C42  227C 00008466           4241  ADDA_An_indir_postinc_reg2_out        MOVE.L            #ea_indir_postinc_A2,A1              ;load string constant into A1
00003C48  4EB8 140A               4242                                  JSR             print_first
00003C4C  4EB9 00003E0E           4243                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003C52  4E75                    4244                                        RTS
00003C54                          4245                                        
00003C54  227C 0000846C           4246  ADDA_An_indir_postinc_reg3_out        MOVE.L            #ea_indir_postinc_A3,A1              ;load string constant into A1
00003C5A  4EB8 140A               4247                                  JSR             print_first
00003C5E  4EB9 00003E0E           4248                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003C64  4E75                    4249                                        RTS
00003C66                          4250                                        
00003C66  227C 00008472           4251  ADDA_An_indir_postinc_reg4_out        MOVE.L            #ea_indir_postinc_A4,A1          ;load string constant into A1
00003C6C  4EB8 140A               4252                                  JSR             print_first
00003C70  4EB9 00003E0E           4253                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003C76  4E75                    4254                                        RTS
00003C78                          4255                                        
00003C78  227C 00008478           4256  ADDA_An_indir_postinc_reg5_out        MOVE.L            #ea_indir_postinc_A5,A1              ;load string constant into A1
00003C7E  4EB8 140A               4257                                  JSR             print_first
00003C82  4EB9 00003E0E           4258                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003C88  4E75                    4259                                        RTS
00003C8A                          4260                                        
00003C8A  227C 0000847E           4261  ADDA_An_indir_postinc_reg6_out        MOVE.L            #ea_indir_postinc_A6,A1              ;load string constant into A1
00003C90  4EB8 140A               4262                                  JSR             print_first
00003C94  4EB9 00003E0E           4263                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003C9A  4E75                    4264                                        RTS
00003C9C                          4265                                        
00003C9C  227C 00008484           4266  ADDA_An_indir_postinc_reg7_out        MOVE.L            #ea_indir_postinc_A7,A1              ;load string constant into A1
00003CA2  4EB8 140A               4267                                  JSR             print_first
00003CA6  4EB9 00003E0E           4268                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003CAC  4E75                    4269                                        RTS
00003CAE                          4270  
00003CAE                          4271  ;------------------Address Register Indirect with Pre Decrement-----------------------
00003CAE  4282                    4272  ADDA_An_indir_predec                  CLR.L   D2
00003CB0  3400                    4273                                  MOVE.W  D0,D2 
00003CB2  C4BC 0000003F           4274                                  AND.L              #mask_ADDA_ea_reg_and_mode,D2 
00003CB8  B4BC 00000020           4275                                          CMP.L             #match_ADDA_An_indir_predec_reg0,D2        ;check reg is equal to 0
00003CBE  6600 0006               4276                                        BNE               ADDA_An_indir_predec_reg1                  ;if not try reg 1
00003CC2  6700 0064               4277                                        BEQ               ADDA_An_indir_predec_reg0_out              ;if equal go to output subroutine
00003CC6                          4278  
00003CC6  B4BC 00000021           4279  ADDA_An_indir_predec_reg1             CMP.L             #match_ADDA_An_indir_predec_reg1,D2        ;check reg is equal to 1
00003CCC  6600 0006               4280                                        BNE               ADDA_An_indir_predec_reg2                  ;if not try reg 2
00003CD0  6700 0068               4281                                        BEQ               ADDA_An_indir_predec_reg1_out              ;if equal go to output subroutine
00003CD4                          4282  
00003CD4  B4BC 00000022           4283  ADDA_An_indir_predec_reg2             CMP.L             #match_ADDA_An_indir_predec_reg2,D2        ;check reg is equal to 2
00003CDA  6600 0006               4284                                        BNE               ADDA_An_indir_predec_reg3                  ;if not try reg 3
00003CDE  6700 006C               4285                                        BEQ               ADDA_An_indir_predec_reg2_out              ;if equal go to output subroutine
00003CE2                          4286  
00003CE2  B4BC 00000023           4287  ADDA_An_indir_predec_reg3             CMP.L             #match_ADDA_An_indir_predec_reg3,D2        ;check reg is equal to 3
00003CE8  6600 0006               4288                                        BNE               ADDA_An_indir_predec_reg4                  ;if not try reg 4
00003CEC  6700 0070               4289                                        BEQ               ADDA_An_indir_predec_reg3_out              ;if equal go to output subroutine
00003CF0                          4290  
00003CF0  B4BC 00000024           4291  ADDA_An_indir_predec_reg4             CMP.L             #match_ADDA_An_indir_predec_reg4,D2        ;check reg is equal to 4
00003CF6  6600 0006               4292                                        BNE               ADDA_An_indir_predec_reg5                  ;if not try reg 5
00003CFA  6700 0074               4293                                        BEQ               ADDA_An_indir_predec_reg4_out              ;if equal go to output subroutine
00003CFE                          4294  
00003CFE  B4BC 00000025           4295  ADDA_An_indir_predec_reg5             CMP.L             #match_ADDA_An_indir_predec_reg5,D2        ;check reg is equal to 5
00003D04  6600 0006               4296                                        BNE               ADDA_An_indir_predec_reg6                  ;if not try reg 6
00003D08  6700 0078               4297                                        BEQ               ADDA_An_indir_predec_reg5_out              ;if equal go to output subroutine
00003D0C                          4298  
00003D0C  B4BC 00000026           4299  ADDA_An_indir_predec_reg6             CMP.L             #match_ADDA_An_indir_predec_reg6,D2        ;check reg is equal to 6
00003D12  6600 0006               4300                                        BNE               ADDA_An_indir_predec_reg7                  ;if not try reg 7
00003D16  6700 007C               4301                                        BEQ               ADDA_An_indir_predec_reg6_out              ;if equal go to output subroutine
00003D1A                          4302  
00003D1A  B4BC 00000027           4303  ADDA_An_indir_predec_reg7             CMP.L             #match_ADDA_An_indir_predec_reg7,D2        ;check reg is equal to 7
00003D20  6700 0084               4304                                        BEQ               ADDA_An_indir_predec_reg7_out              ;if equal go to output subroutine
00003D24  6600 31F8               4305                                        BNE               ERROR                                      ;if not equal to an addresssing mode, pritn error
00003D28                          4306  
00003D28                          4307  
00003D28                          4308  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00003D28  227C 0000848A           4309  ADDA_An_indir_predec_reg0_out         MOVE.L        #ea_indir_predec_A0,A1             ;load string constant into A1
00003D2E  4EB8 140A               4310                                  JSR             print_first
00003D32  4EB9 00003E0E           4311                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003D38  4E75                    4312                                        RTS
00003D3A                          4313                                              
00003D3A  227C 00008490           4314  ADDA_An_indir_predec_reg1_out         MOVE.L        #ea_indir_predec_A1,A1             ;load string constant into A1
00003D40  4EB8 140A               4315                                  JSR             print_first
00003D44  4EB9 00003E0E           4316                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003D4A  4E75                    4317                                        RTS
00003D4C                          4318                                        
00003D4C  227C 00008496           4319  ADDA_An_indir_predec_reg2_out         MOVE.L        #ea_indir_predec_A2,A1             ;load string constant into A1
00003D52  4EB8 140A               4320                                  JSR             print_first
00003D56  4EB9 00003E0E           4321                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003D5C  4E75                    4322                                        RTS
00003D5E                          4323                                        
00003D5E  227C 0000849C           4324  ADDA_An_indir_predec_reg3_out         MOVE.L        #ea_indir_predec_A3,A1             ;load string constant into A1
00003D64  4EB8 140A               4325                                  JSR             print_first
00003D68  4EB9 00003E0E           4326                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003D6E  4E75                    4327                                        RTS
00003D70                          4328                                        
00003D70  227C 000084A2           4329  ADDA_An_indir_predec_reg4_out         MOVE.L        #ea_indir_predec_A4,A1             ;load string constant into A1
00003D76  4EB8 140A               4330                                  JSR             print_first
00003D7A  4EB9 00003E0E           4331                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003D80  4E75                    4332                                        RTS
00003D82                          4333                                        
00003D82  227C 000084A8           4334  ADDA_An_indir_predec_reg5_out         MOVE.L        #ea_indir_predec_A5,A1             ;load string constant into A1
00003D88  4EB8 140A               4335                                  JSR             print_first
00003D8C  4EB9 00003E0E           4336                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003D92  4E75                    4337                                        RTS
00003D94                          4338                                        
00003D94  227C 000084AE           4339  ADDA_An_indir_predec_reg6_out         MOVE.L        #ea_indir_predec_A6,A1             ;load string constant into A1
00003D9A  4EB8 140A               4340                                  JSR             print_first
00003D9E  4EB9 00003E0E           4341                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003DA4  4E75                    4342                                        RTS
00003DA6                          4343                                        
00003DA6  227C 000084B4           4344  ADDA_An_indir_predec_reg7_out         MOVE.L        #ea_indir_predec_A7,A1             ;load string constant into A1
00003DAC  4EB8 140A               4345                                  JSR             print_first
00003DB0  4EB9 00003E0E           4346                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003DB6  4E75                    4347                                        RTS        
00003DB8                          4348  
00003DB8                          4349  ;------------------Absolute Addressing Output-----------------------
00003DB8  22FC 000084C4           4350  ADDA_abs_add_word_out                    MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003DBE  22C5                    4351                                           MOVE.L      D5,(A1)+                           ;load address                  
00003DC0  4EB9 00003E0E           4352                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003DC6  4E75                    4353                                           RTS                                           
00003DC8                          4354  
00003DC8  2A18                    4355  ADDA_abs_add_long_out                    MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00003DCA  22FC 000084C4           4356                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003DD0  22C5                    4357                                           MOVE.L      D5,(A1)+                           ;load address                  
00003DD2  4EB9 00003E0E           4358                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003DD8  4E75                    4359                                           RTS                                            
00003DDA                          4360  ;---------------Immediate Addresing---------------------------
00003DDA  2A18                    4361  ADDA_immediate_add_out                  MOVE.L       (A0)+,D5                           ;capture the immediate address
00003DDC  BCBC 000000FC           4362                                          CMP.L       #match_ADDA_imm_add_word,D6             ;check to see if need to pull word
00003DE2  2A18                    4363                                          MOVE.L      (A0)+,D5                           ;pull the word
00003DE4  6700 0006               4364                                          BEQ         ADDA_imm_add_w                     ;if equal go pull word    
00003DE8  6600 0012               4365                                          BNE         ADDA_imm_add_l                     ;if not equal, go check long
00003DEC                          4366                                           
00003DEC  22FC 000084C4           4367  ADDA_imm_add_w                           MOVE.L      #ea_$,(A1)+                        ;load the $
00003DF2  32C5                    4368                                           MOVE.W      D5,(A1)+                           ;load the word address                           
00003DF4  4EB9 00003E0E           4369                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003DFA  4E75                    4370                                           RTS
00003DFC                          4371                                           
00003DFC  2A18                    4372  ADDA_imm_add_l                           MOVE.L      (A0)+,D5                           ;pull the long and increase the pointer
00003DFE  22FC 000084C4           4373                                           MOVE.L      #ea_$,(A1)+                        ;load the $
00003E04  2245                    4374                                           MOVE.L      D5,A1                              ;move to A1
00003E06  4EB9 00003E0E           4375                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003E0C  4E75                    4376                                           RTS                                              
00003E0E                          4377                                                
00003E0E                          4378                                                
00003E0E                          4379  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003E0E  4282                    4380  ADDA_determine_second_op        CLR.L       D2                          ;clear D2 
00003E10  3400                    4381                                  MOVE.W  D0,D2 
00003E12  C4BC 00000E00           4382                                  AND.L       #mask_ADDA_An_reg,D2        ;load the mask for the register into D2, masks bit 11-9
00003E18                          4383                                                  
00003E18  B4BC 00000000           4384  ADDA_reg0                       CMP.L       #match_ADDA_reg0,D2     ;check to see if reg equal 0
00003E1E  6600 0006               4385                                  BNE         ADDA_reg1               ;if not equal got check reg 1
00003E22  6700 0064               4386                                  BEQ         ADDA_reg0_out           ;if equal go to output
00003E26                          4387                                                  
00003E26  B4BC 00000200           4388  ADDA_reg1                       CMP.L       #match_ADDA_reg1,D2     ;check to see if reg equal 1
00003E2C  6600 0006               4389                                  BNE         ADDA_reg2               ;if not equal got check reg 2
00003E30  6700 005E               4390                                  BEQ         ADDA_reg1_out           ;if equal go to output
00003E34                          4391  
00003E34  B4BC 00000400           4392  ADDA_reg2                       CMP.L       #match_ADDA_reg2,D2     ;check to see if reg equal 2
00003E3A  6600 0006               4393                                  BNE         ADDA_reg3               ;if not equal got check reg 3
00003E3E  6700 0058               4394                                  BEQ         ADDA_reg2_out           ;if equal go to output
00003E42                          4395  
00003E42  B4BC 00000600           4396  ADDA_reg3                       CMP.L       #match_ADDA_reg3,D2     ;check to see if reg equal 3
00003E48  6600 0006               4397                                  BNE         ADDA_reg4               ;if not equal got check reg 4
00003E4C  6700 0052               4398                                  BEQ         ADDA_reg3_out           ;if equal go to output
00003E50                          4399                                                  
00003E50  B4BC 00000800           4400  ADDA_reg4                       CMP.L       #match_ADDA_reg4,D2     ;check to see if reg equal 4
00003E56  6600 0006               4401                                  BNE         ADDA_reg5               ;if not equal got check reg 5
00003E5A  6700 004C               4402                                  BEQ         ADDA_reg4_out           ;if equal go to output
00003E5E                          4403  
00003E5E  B4BC 00000A00           4404  ADDA_reg5                       CMP.L       #match_ADDA_reg5,D2     ;check to see if reg equal 5
00003E64  6600 0006               4405                                  BNE         ADDA_reg6               ;if not equal got check reg 6
00003E68  6700 0046               4406                                  BEQ         ADDA_reg5_out           ;if equal go to output
00003E6C                          4407  
00003E6C  B4BC 00000C00           4408  ADDA_reg6                       CMP.L       #match_ADDA_reg6,D2     ;check to see if reg equal 6
00003E72  6600 0006               4409                                  BNE         ADDA_reg7               ;if not equal got check reg 7
00003E76  6700 0040               4410                                  BEQ         ADDA_reg6_out           ;if equal go to output          
00003E7A                          4411  
00003E7A  B4BC 00000E00           4412  ADDA_reg7                       CMP.L       #match_ADDA_reg7,D2     ;check to see if reg equal 7
00003E80  6700 003E               4413                                  BEQ         ADDA_reg7_out           ;if equal go to output
00003E84  6600 3098               4414                                  BNE         ERROR                           ;if not equal to an addresssing mode, pritn error
00003E88                          4415                                  
00003E88                          4416  
00003E88                          4417  ;--------------------Data Output-----------------------
00003E88  227C 0000840A           4418  ADDA_reg0_out                   MOVE.L      #ea_A0,A1               ;load string constant into A1
00003E8E  4E75                    4419                                  RTS
00003E90                          4420                                              
00003E90  227C 0000840D           4421  ADDA_reg1_out                   MOVE.L      #ea_A1,A1           ;load string constant into A1
00003E96  4E75                    4422                                  RTS
00003E98                          4423                                              
00003E98  227C 00008410           4424  ADDA_reg2_out                   MOVE.L      #ea_A2,A1           ;load string constant into A1
00003E9E  4E75                    4425                                  RTS
00003EA0                          4426                                              
00003EA0  227C 00008413           4427  ADDA_reg3_out                   MOVE.L      #ea_A3,A1           ;load string constant into A1
00003EA6  4E75                    4428                                  RTS
00003EA8                          4429                                              
00003EA8  227C 00008416           4430  ADDA_reg4_out                   MOVE.L      #ea_A4,A1           ;load string constant into A1
00003EAE  4E75                    4431                                  RTS
00003EB0                          4432                                              
00003EB0  227C 00008419           4433  ADDA_reg5_out                   MOVE.L      #ea_A5,A1           ;load string constant into A1
00003EB6  4E75                    4434                                  RTS
00003EB8                          4435                                              
00003EB8  227C 0000841C           4436  ADDA_reg6_out                   MOVE.L      #ea_A6,A1           ;load string constant into A1
00003EBE  4E75                    4437                                  RTS
00003EC0                          4438                                              
00003EC0  227C 0000841F           4439  ADDA_reg7_out                   MOVE.L      #ea_A7,A1           ;load string constant into A1
00003EC6  4E75                    4440                                  RTS
00003EC8                          4441                                  
00003EC8                          4442  
00003EC8                          4443  ;----------------------Error Handling----------------------------------------
00003EC8                          4444  
00003EC8                          4445                                                  
00003EC8                          4446                                                  
00003EC8                          4447  
00003EC8                          4448  
00003EC8                          4449  
00003EC8  =00000038               4450  mask_ADDA_ea_mode               EQU         $0038
00003EC8  =0000003F               4451  mask_ADDA_abs_add               EQU         $003F
00003EC8  =0000003F               4452  mask_ADDA_ea_reg_and_mode       EQU         $003F
00003EC8  =00000E00               4453  mask_ADDA_An_reg                EQU         $0E00
00003EC8                          4454  
00003EC8  =00000000               4455  match_ADDA_Dn                   EQU         $0000
00003EC8  =00000008               4456  match_ADDA_An                   EQU         $0008
00003EC8  =00000010               4457  match_ADDA_An_indir             EQU         $0010
00003EC8  =00000020               4458  match_ADDA_An_indir_predec      EQU         $0020
00003EC8  =00000018               4459  match_ADDA_An_indir_postinc     EQU         $0018
00003EC8  =00000038               4460  match_ADDA_abs_add_word         EQU         $0038
00003EC8  =00000039               4461  match_ADDA_abs_add_long         EQU         $0039
00003EC8                          4462  
00003EC8  =00000000               4463  match_ADDA_D0               EQU         $0000
00003EC8  =00000001               4464  match_ADDA_D1               EQU         $0001
00003EC8  =00000002               4465  match_ADDA_D2               EQU         $0002
00003EC8  =00000003               4466  match_ADDA_D3               EQU         $0003
00003EC8  =00000004               4467  match_ADDA_D4               EQU         $0004
00003EC8  =00000005               4468  match_ADDA_D5               EQU         $0005
00003EC8  =00000006               4469  match_ADDA_D6               EQU         $0006
00003EC8  =00000007               4470  match_ADDA_D7               EQU         $0007
00003EC8                          4471  
00003EC8  =00000008               4472  match_ADDA_A0               EQU         $0008
00003EC8  =00000009               4473  match_ADDA_A1               EQU         $0009
00003EC8  =0000000A               4474  match_ADDA_A2               EQU         $000A
00003EC8  =0000000B               4475  match_ADDA_A3               EQU         $000B
00003EC8  =0000000C               4476  match_ADDA_A4               EQU         $000C
00003EC8  =0000000D               4477  match_ADDA_A5               EQU         $000D
00003EC8  =0000000E               4478  match_ADDA_A6               EQU         $000E
00003EC8  =0000000F               4479  match_ADDA_A7               EQU         $000F
00003EC8                          4480  
00003EC8  =00000010               4481  match_ADDA_An_indir_r0          EQU         $0010
00003EC8  =00000011               4482  match_ADDA_An_indir_r1          EQU         $0011
00003EC8  =00000012               4483  match_ADDA_An_indir_r2          EQU         $0012
00003EC8  =00000013               4484  match_ADDA_An_indir_r3          EQU         $0013
00003EC8  =00000014               4485  match_ADDA_An_indir_r4          EQU         $0014
00003EC8  =00000015               4486  match_ADDA_An_indir_r5          EQU         $0015
00003EC8  =00000016               4487  match_ADDA_An_indir_r6          EQU         $0016
00003EC8  =00000017               4488  match_ADDA_An_indir_r7          EQU         $0017
00003EC8                          4489  
00003EC8  =00000018               4490  match_ADDA_An_indir_postinc_reg0    EQU         $0018
00003EC8  =00000019               4491  match_ADDA_An_indir_postinc_reg1    EQU         $0019
00003EC8  =0000001A               4492  match_ADDA_An_indir_postinc_reg2    EQU         $001A
00003EC8  =0000001B               4493  match_ADDA_An_indir_postinc_reg3    EQU         $001B
00003EC8  =0000001C               4494  match_ADDA_An_indir_postinc_reg4    EQU         $001C
00003EC8  =0000001D               4495  match_ADDA_An_indir_postinc_reg5    EQU         $001D
00003EC8  =0000001E               4496  match_ADDA_An_indir_postinc_reg6    EQU         $001E
00003EC8  =0000001F               4497  match_ADDA_An_indir_postinc_reg7    EQU         $001F
00003EC8                          4498  
00003EC8  =00000020               4499  match_ADDA_An_indir_predec_reg0     EQU         $0020
00003EC8  =00000021               4500  match_ADDA_An_indir_predec_reg1     EQU         $0021
00003EC8  =00000022               4501  match_ADDA_An_indir_predec_reg2     EQU         $0022
00003EC8  =00000023               4502  match_ADDA_An_indir_predec_reg3     EQU         $0023
00003EC8  =00000024               4503  match_ADDA_An_indir_predec_reg4     EQU         $0024
00003EC8  =00000025               4504  match_ADDA_An_indir_predec_reg5     EQU         $0025
00003EC8  =00000026               4505  match_ADDA_An_indir_predec_reg6     EQU         $0026
00003EC8  =00000027               4506  match_ADDA_An_indir_predec_reg7     EQU         $0027
00003EC8                          4507  
00003EC8  =0000003C               4508  match_ADDA_imm_add                      EQU                 $003C
00003EC8  =000000FC               4509  match_ADDA_imm_add_word                 EQU                 $00FC
00003EC8  =000001FC               4510  match_ADDA_imm_add_long                 EQU                 $01FC
00003EC8                          4511  
00003EC8  =00000000               4512  match_ADDA_reg0             EQU         $0000
00003EC8  =00000200               4513  match_ADDA_reg1             EQU         $0200
00003EC8  =00000400               4514  match_ADDA_reg2             EQU         $0400
00003EC8  =00000600               4515  match_ADDA_reg3             EQU         $0600
00003EC8  =00000800               4516  match_ADDA_reg4             EQU         $0800
00003EC8  =00000A00               4517  match_ADDA_reg5             EQU         $0A00
00003EC8  =00000C00               4518  match_ADDA_reg6             EQU         $0C00
00003EC8  =00000E00               4519  match_ADDA_reg7             EQU         $0E00
00003EC8                          4520  
00003EC8                          4521  
00003EC8                          4522  
00003EC8                          4523  
00003EC8                          4524  
00003EC8                          4525  
00003EC8                          4526  
00003EC8                          4527  
00003EC8                          4528  
00003EC8                          4529  
00003EC8                          4530  -------------------- end include --------------------
00003EC8                          4531              INCLUDE 'ADDQ Subroutine.x68'
00003EC8                          4532  ADDQ_sub                                                       ;preserve the registers, 
00003EC8                          4533                                                                   ;move the mask to D1
00003EC8                          4534                                   
00003EC8                          4535  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003EC8  4282                    4536                                  CLR.L       D2                                              ;clear D2 
00003ECA  3400                    4537                                  MOVE.W  D0,D2 
00003ECC  C4BC 00000E00           4538                                  AND.L       #mask_ADDQ_reg,D2                               ;load the mask for the register into D2, masks bit 11-9
00003ED2                          4539                                                  
00003ED2  B4BC 00000000           4540  ADDQ_reg0                       CMP.L       #match_ADDQ_reg0,D2                             ;check to see if reg equal 0
00003ED8  6600 0006               4541                                  BNE         ADDQ_reg1                                       ;if not equal got check reg 1
00003EDC  6700 0064               4542                                  BEQ         ADDQ_reg0_out                                   ;if equal go to output
00003EE0                          4543                                              
00003EE0  B4BC 00000200           4544  ADDQ_reg1                       CMP.L       #match_ADDQ_reg1,D2                             ;check to see if reg equal 1
00003EE6  6600 0006               4545                                  BNE         ADDQ_reg2                                       ;if not equal got check reg 2
00003EEA  6700 0066               4546                                  BEQ         ADDQ_reg1_out                                   ;if equal go to output
00003EEE                          4547  
00003EEE  B4BC 00000400           4548  ADDQ_reg2                       CMP.L       #match_ADDQ_reg2,D2                             ;check to see if reg equal 2
00003EF4  6600 0006               4549                                  BNE         ADDQ_reg3                                       ;if not equal got check reg 3
00003EF8  6700 0068               4550                                  BEQ         ADDQ_reg2_out                                   ;if equal go to output
00003EFC                          4551  
00003EFC  B4BC 00000600           4552  ADDQ_reg3                       CMP.L       #match_ADDQ_reg3,D2                             ;check to see if reg equal 3
00003F02  6600 0006               4553                                  BNE         ADDQ_reg4                                       ;if not equal got check reg 4
00003F06  6700 006A               4554                                  BEQ         ADDQ_reg3_out                                   ;if equal go to output
00003F0A                          4555                                                  
00003F0A  B4BC 00000800           4556  ADDQ_reg4                       CMP.L       #match_ADDQ_reg4,D2                             ;check to see if reg equal 4
00003F10  6600 0006               4557                                  BNE         ADDQ_reg5                                       ;if not equal got check reg 5
00003F14  6700 006C               4558                                  BEQ         ADDQ_reg4_out                                   ;if equal go to output
00003F18                          4559  
00003F18  B4BC 00000A00           4560  ADDQ_reg5                       CMP.L       #match_ADDQ_reg5,D2                             ;check to see if reg equal 5
00003F1E  6600 0006               4561                                  BNE         ADDQ_reg6                                       ;if not equal got check reg 6
00003F22  6700 006E               4562                                  BEQ         ADDQ_reg5_out                                   ;if equal go to output
00003F26                          4563  
00003F26  B4BC 00000C00           4564  ADDQ_reg6                       CMP.L       #match_ADDQ_reg6,D2                             ;check to see if reg equal 6
00003F2C  6600 0006               4565                                  BNE         ADDQ_reg7                                       ;if not equal got check reg 7
00003F30  6700 0070               4566                                  BEQ         ADDQ_reg6_out                                   ;if equal go to output          
00003F34                          4567  
00003F34  B4BC 00000E00           4568  ADDQ_reg7                       CMP.L       #match_ADDQ_reg7,D2                             ;check to see if reg equal 7
00003F3A  6700 0076               4569                                  BEQ         ADDQ_reg7_out                                   ;if equal go to output
00003F3E  6600 2FDE               4570                                  BNE         ERROR                                                ;if not equal to an addresssing mode, pritn error
00003F42                          4571                                  
00003F42                          4572  
00003F42                          4573  ;--------------------Data Output-----------------------
00003F42  227C 000084C8           4574  ADDQ_reg0_out                               MOVE.L      #ea_data0,A1                               ;load string constant into A1
00003F48  4EB8 140A               4575                                              JSR         print_first
00003F4C  4EB9 00003FC2           4576                                              JSR         ADDQ_determine_second_operand                ;jump to subroutine to determine the second operand
00003F52                          4577                                              
00003F52  227C 000084CB           4578  ADDQ_reg1_out                               MOVE.L      #ea_data1,A1                            ;load string constant into A1
00003F58  4EB8 140A               4579                                              JSR         print_first
00003F5C  4EB9 00003FC2           4580                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003F62                          4581  
00003F62  227C 000084CE           4582  ADDQ_reg2_out                               MOVE.L      #ea_data2,A1                                ;load string constant into A1
00003F68  4EB8 140A               4583                                              JSR         print_first
00003F6C  4EB9 00003FC2           4584                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003F72                          4585  
00003F72  227C 000084D1           4586  ADDQ_reg3_out                               MOVE.L      #ea_data3,A1                                    ;load string constant into A1
00003F78  4EB8 140A               4587                                              JSR         print_first
00003F7C  4EB9 00003FC2           4588                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003F82                          4589   
00003F82  227C 000084D4           4590  ADDQ_reg4_out                               MOVE.L      #ea_data4,A1                            ;load string constant into A1
00003F88  4EB8 140A               4591                                              JSR         print_first
00003F8C  4EB9 00003FC2           4592                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003F92                          4593  
00003F92  227C 000084D7           4594  ADDQ_reg5_out                               MOVE.L      #ea_data5,A1                            ;load string constant into A1
00003F98  4EB8 140A               4595                                              JSR         print_first
00003F9C  4EB9 00003FC2           4596                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003FA2                          4597  
00003FA2  227C 000084DA           4598  ADDQ_reg6_out                               MOVE.L      #ea_data6,A1                            ;load string constant into A1
00003FA8  4EB8 140A               4599                                              JSR         print_first
00003FAC  4EB9 00003FC2           4600                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003FB2                          4601  
00003FB2  227C 000084DD           4602  ADDQ_reg7_out                               MOVE.L      #ea_data7,A1                            ;load string constant into A1
00003FB8  4EB8 140A               4603                                              JSR         print_first
00003FBC  4EB9 00003FC2           4604                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003FC2                          4605                  
00003FC2                          4606  
00003FC2                          4607  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00003FC2  C2BC 00000038           4608  ADDQ_determine_second_operand    AND.L             #mask_ADDQ_ea_mode,D1   
00003FC8  B2BC 00000000           4609  ADDQ_data_reg_dir                CMP.L             #match_ADDQ_Dn,D1                             ;check to see if mode is data reg direct
00003FCE  6600 0006               4610                                   BNE               ADDQ_add_reg_dir                                   ;if not, go check add reg dir
00003FD2  6700 005E               4611                                   BEQ               ADDQ_Dn_reg                                        ;if equal go figure out the register
00003FD6                          4612  
00003FD6  B2BC 00000008           4613  ADDQ_add_reg_dir                 CMP.L             #match_ADDQ_An,D1                             ;check if mode is add reg direct
00003FDC  6600 0006               4614                                   BNE               ADDQ_add_reg_indir                                 ;if not, go check add reg indir
00003FE0  6700 010A               4615                                   BEQ               ADDQ_An_reg                                        ;if equal go figure out the reg
00003FE4                          4616   
00003FE4  B2BC 00000010           4617  ADDQ_add_reg_indir               CMP.L             #match_ADDQ_An_indir,D1                       ;check to see if mode is add reg indir
00003FEA  6600 0006               4618                                   BNE               ADDQ_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00003FEE  6700 01B6               4619                                   BEQ               ADDQ_An_indir_reg                                  ;if equal go figure out the register           
00003FF2                          4620             
00003FF2  B2BC 00000020           4621  ADDQ_add_reg_indir_predec        CMP.L             #match_ADDQ_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00003FF8  6600 0006               4622                                   BNE               ADDQ_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00003FFC  6700 031C               4623                                   BEQ               ADDQ_An_indir_predec                               ;if equal go figure out the register
00004000                          4624                        
00004000  B2BC 00000018           4625  ADDQ_add_reg_indir_postinc       CMP.L             #match_ADDQ_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00004006  6600 0006               4626                                   BNE               ADDQ_abs_add_word                                  ;if not go check abs add word
0000400A  6700 0254               4627                                   BEQ               ADDQ_An_indir_pinc_reg                          ;if equal go figure out the register
0000400E                          4628  
0000400E  C4BC 0000003F           4629  ADDQ_abs_add_word                AND.L             #mask_ADDQ_abs_add,D2                         ;load mask to determine if abs add word or long
00004014                          4630                                   
00004014  B4BC 00000038           4631                                   CMP.L             #match_ADDQ_abs_add_word,D2                   ;check if abs add word
0000401A  2A18                    4632                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
0000401C  6600 0006               4633                                   BNE               ADDQ_abs_add_long                                  ;if not go check abs add long
00004020  6700 03B2               4634                                   BEQ               ADDQ_abs_add_word_out                              ;if equal go to output
00004024                          4635    
00004024  B4BC 00000039           4636  ADDQ_abs_add_long                CMP.L             #match_ADDQ_abs_add_long,D2                    ;check to see if abs add long
0000402A  6700 03B2               4637                                   BEQ               ADDQ_abs_add_long_out                               ;if equal go to output
0000402E  6600 2EEE               4638                                   BNE               ERROR
00004032                          4639  
00004032                          4640  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004032                          4641                                   
00004032                          4642                                   
00004032                          4643  ;-----------------------------------Data Register Direct--------------------------------
00004032  4282                    4644  ADDQ_Dn_reg                      CLR.L  D2
00004034  3400                    4645                                   MOVE.W D0,D2
00004036  C4BC 0000003F           4646                                   AND.L              #mask_ADDQ_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
0000403C  B4BC 00000000           4647                                   CMP.L              #match_ADDQ_D0,D2                       ;check to see in the register is 0
00004042  6600 0006               4648                                   BNE                ADDQ_rD1                                     ;if not go check register 1
00004046  6700 0064               4649                                   BEQ                ADDQ_D0_out                              ;if equal go to output subroutine
0000404A                          4650  
0000404A  B4BC 00000001           4651  ADDQ_rD1                         CMP.L              #match_ADDQ_D1,D2                       ;check to see in the register is 1
00004050  6600 0006               4652                                   BNE                ADDQ_rD2                                     ;if not go check register 2
00004054  6700 005E               4653                                   BEQ                ADDQ_D1_out                              ;if equal go to output subroutine
00004058                          4654  
00004058  B4BC 00000002           4655  ADDQ_rD2                         CMP.L              #match_ADDQ_D2,D2                       ;check to see in the register is 2
0000405E  6600 0006               4656                                   BNE                ADDQ_rD3                                     ;if not go check register 3
00004062  6700 0058               4657                                   BEQ                ADDQ_D2_out                              ;if equal go to output subroutine
00004066                          4658  
00004066  B4BC 00000003           4659  ADDQ_rD3                         CMP.L              #match_ADDQ_D3,D2                       ;check to see in the register is 3
0000406C  6600 0006               4660                                   BNE                ADDQ_rD4                                     ;if not go check register 4
00004070  6700 0052               4661                                   BEQ                ADDQ_D3_out                              ;if equal go to output subroutine
00004074                          4662  
00004074  B4BC 00000004           4663  ADDQ_rD4                         CMP.L              #match_ADDQ_D4,D2                       ;check to see in the register is 4
0000407A  6600 0006               4664                                   BNE                ADDQ_rD5                                     ;if not go check register 5
0000407E  6700 004C               4665                                   BEQ                ADDQ_D4_out                              ;if equal go to output subroutine
00004082                          4666  
00004082  B4BC 00000005           4667  ADDQ_rD5                         CMP.L              #match_ADDQ_D5,D2                       ;check to see in the register is 5
00004088  6600 0006               4668                                   BNE                ADDQ_rD6                                     ;if not go check register 6
0000408C  6700 0046               4669                                   BEQ                ADDQ_D5_out                              ;if equal go to output subroutine
00004090                          4670  
00004090  B4BC 00000006           4671  ADDQ_rD6                         CMP.L              #match_ADDQ_D6,D2                       ;check to see in the register is 6
00004096  6600 0006               4672                                   BNE                ADDQ_rD7                                     ;if not go check register 7
0000409A  6700 0040               4673                                   BEQ                ADDQ_D6_out                              ;if equal go to output subroutine
0000409E                          4674  
0000409E  B4BC 00000007           4675  ADDQ_rD7                         CMP.L              #match_ADDQ_D7,D2                       ;check to see in the register is 7
000040A4  6700 003E               4676                                   BEQ                ADDQ_D7_out                              ;if equal go to output subroutine
000040A8  6600 2E74               4677                                   BNE                ERROR                                   ;if not equal, got to error message
000040AC                          4678  ;--------------------Data Register Direct Output-----------------------
000040AC  227C 000083F2           4679  ADDQ_D0_out                     MOVE.L              #ea_D0,A1                           ;load string constant into A1
000040B2                          4680  
000040B2  4E75                    4681                                  RTS                                                     ;return to subroutine
000040B4                          4682  
000040B4  227C 000083F5           4683  ADDQ_D1_out                     MOVE.L              #ea_D1,A1                           ;load string constant into A1
000040BA                          4684                                  
000040BA  4E75                    4685                                  RTS                                                     ;return to subroutine
000040BC                          4686  
000040BC                          4687  
000040BC  227C 000083F8           4688  ADDQ_D2_out                     MOVE.L              #ea_D2,A1                           ;load string constant into A1
000040C2                          4689                                  
000040C2  4E75                    4690                                  RTS                                                     ;return to subroutine
000040C4                          4691  
000040C4  227C 000083FB           4692  ADDQ_D3_out                     MOVE.L              #ea_D3,A1                           ;load string constant into A1
000040CA                          4693                                  
000040CA  4E75                    4694                                  RTS                                                     ;return to subroutine
000040CC                          4695  
000040CC                          4696  
000040CC  227C 000083FE           4697  ADDQ_D4_out                     MOVE.L              #ea_D4,A1                           ;load string constant into A1
000040D2                          4698                                  
000040D2  4E75                    4699                                  RTS                                                     ;return to subroutine
000040D4                          4700      
000040D4                          4701  
000040D4  227C 00008401           4702  ADDQ_D5_out                     MOVE.L              #ea_D5,A1                           ;load string constant into A1
000040DA                          4703                                  
000040DA  4E75                    4704                                  RTS                                                     ;return to subroutine
000040DC                          4705  
000040DC                          4706  
000040DC  227C 00008404           4707  ADDQ_D6_out                     MOVE.L              #ea_D6,A1                           ;load string constant into A1
000040E2                          4708                                  
000040E2  4E75                    4709                                  RTS                                                     ;return to subroutine
000040E4                          4710  
000040E4                          4711  
000040E4  227C 00008407           4712  ADDQ_D7_out                     MOVE.L              #ea_D7,A1                           ;load string constant into A1
000040EA                          4713                                  
000040EA  4E75                    4714                                  RTS                                                     ;return to subroutine
000040EC                          4715  
000040EC                          4716  ;------------------Address Register Direct-----------------------
000040EC  4282                    4717  ADDQ_An_reg                      CLR.L  D2
000040EE  3400                    4718                                   MOVE.W D0,D2
000040F0  C4BC 0000003F           4719                                   AND.L              #mask_ADDQ_ea_reg_and_mode,D2
000040F6  B4BC 00000008           4720                                  CMP.L           #match_ADDQ_A0,D2                           ;check reg is equal to 0
000040FC  6600 0006               4721                                   BNE             ADDQ_rA1                                    ;if not try reg 1
00004100  6700 011E               4722                                   BEQ             ADDQ_An_indir_reg0_out                      ;if equal go to output subroutine
00004104                          4723  
00004104  B4BC 00000009           4724  ADDQ_rA1                         CMP.L           #match_ADDQ_A1,D2                           ;check reg is equal to 1
0000410A  6600 0006               4725                                   BNE             ADDQ_rA2                                    ;if not try reg 2
0000410E  6700 0118               4726                                   BEQ             ADDQ_An_indir_reg1_out                      ;if equal go to output subroutine
00004112                          4727  
00004112  B4BC 0000000A           4728  ADDQ_rA2                         CMP.L           #match_ADDQ_A2,D2                           ;check reg is equal to 2
00004118  6600 0006               4729                                   BNE             ADDQ_rA3                                    ;if not try reg 3
0000411C  6700 0112               4730                                   BEQ             ADDQ_An_indir_reg2_out                      ;if equal go to output subroutine
00004120                          4731  
00004120  B4BC 0000000B           4732  ADDQ_rA3                         CMP.L           #match_ADDQ_A3,D2                           ;check reg is equal to 3
00004126  6600 0006               4733                                   BNE             ADDQ_rA4                                    ;if not try reg 4
0000412A  6700 010C               4734                                   BEQ             ADDQ_An_indir_reg3_out                      ;if equal go to output subroutine
0000412E                          4735  
0000412E  B4BC 0000000C           4736  ADDQ_rA4                         CMP.L           #match_ADDQ_A4,D2                           ;check reg is equal to 4
00004134  6600 0006               4737                                   BNE             ADDQ_rA5                                    ;if not try reg 5
00004138  6700 0106               4738                                   BEQ             ADDQ_An_indir_reg4_out                      ;if equal go to output subroutine
0000413C                          4739              
0000413C  B4BC 0000000D           4740  ADDQ_rA5                         CMP.L           #match_ADDQ_A5,D2                           ;check reg is equal to 5
00004142  6600 0006               4741                                   BNE             ADDQ_rA6                                    ;if not try reg 6
00004146  6700 0100               4742                                   BEQ             ADDQ_An_indir_reg5_out                      ;if equal go to output subroutine
0000414A                          4743  
0000414A  B4BC 0000000E           4744  ADDQ_rA6                         CMP.L           #match_ADDQ_A6,D2                           ;check reg is equal to 6
00004150  6600 0006               4745                                   BNE             ADDQ_rA7                                    ;if not try reg 7
00004154  6700 00FA               4746                                   BEQ             ADDQ_An_indir_reg6_out                      ;if equal go to output subroutine
00004158                          4747  
00004158  B4BC 0000000F           4748  ADDQ_rA7                         CMP.L           #match_ADDQ_A7,D2                           ;check reg is equal to 7
0000415E  6700 00F8               4749                                   BEQ             ADDQ_An_indir_reg7_out                      ;if equal go to output subroutine
00004162  6600 2DBA               4750                                   BNE             ERROR                                       ;if not equal to an addresssing mode, pritn error
00004166                          4751  
00004166                          4752  ;--------------------Address Register Direct Output-----------------------
00004166  227C 0000841F           4753  ADDQ_A0_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
0000416C                          4754                                  
0000416C  4E75                    4755                                       RTS                                            return to subroutine
0000416E                          4756                                  
0000416E  227C 0000841F           4757  ADDQ_A1_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00004174                          4758                                  
00004174  4E75                    4759                                       RTS                                            ;return to subroutine
00004176                          4760                                  
00004176  227C 0000841F           4761  ADDQ_A2_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
0000417C                          4762                                  
0000417C  4E75                    4763                                       RTS                                            ;return to subroutine
0000417E                          4764                                  
0000417E  227C 0000841F           4765  ADDQ_A3_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00004184                          4766                                  
00004184  4E75                    4767                                       RTS                                            ;return to subroutine
00004186                          4768  
00004186  227C 0000841F           4769  ADDQ_A4_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
0000418C                          4770                                  
0000418C  4E75                    4771                                       RTS                                            ;return to subroutine
0000418E                          4772  
0000418E  227C 0000841F           4773  ADDQ_A5_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00004194                          4774                                  
00004194  4E75                    4775                                       RTS                                            ;return to subroutine
00004196                          4776  
00004196  227C 0000841F           4777  ADDQ_A6_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
0000419C                          4778                                  
0000419C  4E75                    4779                                       RTS                                            ;return to subroutine
0000419E                          4780  
0000419E  227C 0000841F           4781  ADDQ_A7_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
000041A4                          4782                                  
000041A4  4E75                    4783                                       RTS                                            ;return to subroutine
000041A6                          4784  
000041A6                          4785  ;------------------Address Register Indirect-----------------------
000041A6  4282                    4786  ADDQ_An_indir_reg                CLR.L  D2
000041A8  3400                    4787                                   MOVE.W D0,D2
000041AA  C4BC 0000003F           4788                                   AND.L              #mask_ADDQ_ea_reg_and_mode,D2
000041B0  B4BC 00000010           4789                                  CMP.L           #match_ADDQ_An_indir_r0,D2              ;check reg is equal to 0
000041B6  6600 0006               4790                                   BNE             ADDQ_An_indir_reg1                      ;if not try reg 1
000041BA  6700 0064               4791                                   BEQ             ADDQ_An_indir_reg0_out                  ;if equal go to output subroutine
000041BE                          4792  
000041BE  B4BC 00000011           4793  ADDQ_An_indir_reg1               CMP.L           #match_ADDQ_An_indir_r1,D2              ;check reg is equal to 1
000041C4  6600 0006               4794                                   BNE             ADDQ_An_indir_reg2                      ;if not try reg 2
000041C8  6700 005E               4795                                   BEQ             ADDQ_An_indir_reg1_out                  ;if equal go to output subroutine
000041CC                          4796  
000041CC  B4BC 00000012           4797  ADDQ_An_indir_reg2               CMP.L           #match_ADDQ_An_indir_r2,D2              ;check reg is equal to 2
000041D2  6600 0006               4798                                   BNE             ADDQ_An_indir_reg3                      ;if not try reg 3
000041D6  6700 0058               4799                                   BEQ             ADDQ_An_indir_reg2_out                  ;if equal go to output subroutine
000041DA                          4800  
000041DA  B4BC 00000013           4801  ADDQ_An_indir_reg3               CMP.L           #match_ADDQ_An_indir_r3,D2              ;check reg is equal to 3
000041E0  6600 0006               4802                                   BNE             ADDQ_An_indir_reg4                      ;if not try reg 4
000041E4  6700 0052               4803                                   BEQ             ADDQ_An_indir_reg3_out                  ;if equal go to output subroutine
000041E8                          4804      
000041E8  B4BC 00000014           4805  ADDQ_An_indir_reg4               CMP.L           #match_ADDQ_An_indir_r4,D2              ;check reg is equal to 4
000041EE  6600 0006               4806                                   BNE             ADDQ_An_indir_reg5                      ;if not try reg 5
000041F2  6700 004C               4807                                   BEQ             ADDQ_An_indir_reg4_out                  ;if equal go to output subroutine
000041F6                          4808          
000041F6  B4BC 00000015           4809  ADDQ_An_indir_reg5               CMP.L           #match_ADDQ_An_indir_r5,D2              ;check reg is equal to 5
000041FC  6600 0006               4810                                   BNE             ADDQ_An_indir_reg6                      ;if not try reg 6
00004200  6700 0046               4811                                   BEQ             ADDQ_An_indir_reg5_out                  ;if equal go to output subroutine
00004204                          4812  
00004204  B4BC 00000016           4813  ADDQ_An_indir_reg6               CMP.L           #match_ADDQ_An_indir_r6,D2              ;check reg is equal to 6
0000420A  6600 0006               4814                                   BNE             ADDQ_An_indir_reg7                      ;if not try reg 7
0000420E  6700 0040               4815                                   BEQ             ADDQ_An_indir_reg6_out                  ;if equal go to output subroutine
00004212                          4816  
00004212  B4BC 00000017           4817  ADDQ_An_indir_reg7               CMP.L           #match_ADDQ_An_indir_r7,D2              ;check reg is equal to 7
00004218  6700 003E               4818                                   BEQ             ADDQ_An_indir_reg7_out                  ;if equal go to output subroutine
0000421C  6600 2D00               4819                                   BNE             ERROR                                   ;if not equal to an addresssing mode, pritn error
00004220                          4820  
00004220                          4821  ;--------------------Address Register Indirect Output-----------------------
00004220  227C 00008432           4822  ADDQ_An_indir_reg0_out                      MOVE.L      #ea_indir_A0,A1                           ;load string constant into A1
00004226                          4823                                  
00004226  4E75                    4824                                              RTS                                                     ;return to subroutine
00004228                          4825  
00004228  227C 00008437           4826  ADDQ_An_indir_reg1_out                      MOVE.L      #ea_indir_A1,A1                           ;load string constant into A1
0000422E                          4827                                  
0000422E  4E75                    4828                                              RTS                                                     ;return to subroutine
00004230                          4829  
00004230  227C 0000843C           4830  ADDQ_An_indir_reg2_out                      MOVE.L      #ea_indir_A2,A1                           ;load string constant into A1
00004236                          4831                                  
00004236  4E75                    4832                                              RTS                                                     ;return to subroutine
00004238                          4833  
00004238  227C 00008441           4834  ADDQ_An_indir_reg3_out                      MOVE.L      #ea_indir_A3,A1                           ;load string constant into A1
0000423E                          4835                                  
0000423E  4E75                    4836                                              RTS                                                     ;return to subroutine
00004240                          4837  
00004240  227C 00008446           4838  ADDQ_An_indir_reg4_out                      MOVE.L      #ea_indir_A4,A1                           ;load string constant into A1
00004246                          4839                                  
00004246  4E75                    4840                                              RTS                                                     ;return to subroutine
00004248                          4841  
00004248  227C 0000844B           4842  ADDQ_An_indir_reg5_out                      MOVE.L      #ea_indir_A5,A1                           ;load string constant into A1
0000424E                          4843                                  
0000424E  4E75                    4844                                              RTS                                                     ;return to subroutine
00004250                          4845  
00004250  227C 00008450           4846  ADDQ_An_indir_reg6_out                      MOVE.L      #ea_indir_A6,A1                           ;load string constant into A1
00004256                          4847                                  
00004256  4E75                    4848                                              RTS                                                     ;return to subroutine
00004258                          4849                                          
00004258  227C 00008455           4850  ADDQ_An_indir_reg7_out                      MOVE.L      #ea_indir_A7,A1                           ;load string constant into A1
0000425E                          4851                                  
0000425E  4E75                    4852                                              RTS                                                     ;return to subroutine
00004260                          4853  
00004260                          4854  ;------------------Address Register Indirect with Post Increment-----------------------
00004260  4282                    4855  ADDQ_An_indir_pinc_reg                      CLR.L  D2
00004262  3400                    4856                                           MOVE.W D0,D2
00004264  C4BC 0000003F           4857                                          AND.L              #mask_ADDQ_ea_reg_and_mode,D2
0000426A  B4BC 00000018           4858                                              CMP.L      #match_ADDQ_An_indir_postinc_reg0,D2            ;check reg is equal to 0
00004270  6600 0006               4859                                              BNE        ADDQ_An_indir_pinc_r1                           ;if not try reg 1
00004274  6700 0064               4860                                              BEQ        ADDQ_An_indir_pinc_r0_out                       ;if equal go to output subroutine
00004278                          4861  
00004278  B4BC 00000019           4862  ADDQ_An_indir_pinc_r1                       CMP.L      #match_ADDQ_An_indir_postinc_reg1,D2            ;check reg is equal to 1
0000427E  6600 0006               4863                                              BNE        ADDQ_An_indir_pinc_r2                           ;if not try reg 2
00004282  6700 005E               4864                                              BEQ        ADDQ_An_indir_pinc_r1_out                       ;if equal go to output subroutine
00004286                          4865  
00004286  B4BC 0000001A           4866  ADDQ_An_indir_pinc_r2                       CMP.L      #match_ADDQ_An_indir_postinc_reg2,D2            ;check reg is equal to 2
0000428C  6600 0006               4867                                              BNE        ADDQ_An_indir_pinc_r3                           ;if not try reg 3
00004290  6700 0058               4868                                              BEQ        ADDQ_An_indir_pinc_r2_out                       ;if equal go to output subroutine
00004294                          4869  
00004294  B4BC 0000001B           4870  ADDQ_An_indir_pinc_r3                       CMP.L      #match_ADDQ_An_indir_postinc_reg3,D2            ;check reg is equal to 3
0000429A  6600 0006               4871                                              BNE        ADDQ_An_indir_pinc_r4                           ;if not try reg 4
0000429E  6700 0052               4872                                              BEQ        ADDQ_An_indir_pinc_r3_out                       ;if equal go to output subroutine
000042A2                          4873   
000042A2  B4BC 0000001C           4874  ADDQ_An_indir_pinc_r4                       CMP.L      #match_ADDQ_An_indir_postinc_reg4,D2            ;check reg is equal to 4
000042A8  6600 0006               4875                                              BNE        ADDQ_An_indir_pinc_r5                           ;if not try reg 5
000042AC  6700 004C               4876                                              BEQ        ADDQ_An_indir_pinc_r4_out                       ;if equal go to output subroutine
000042B0                          4877  
000042B0  B4BC 0000001D           4878  ADDQ_An_indir_pinc_r5                       CMP.L      #match_ADDQ_An_indir_postinc_reg5,D2            ;check reg is equal to 5
000042B6  6600 0006               4879                                              BNE        ADDQ_An_indir_pinc_r6                           ;if not try reg 6
000042BA  6700 0046               4880                                              BEQ        ADDQ_An_indir_pinc_r5_out                       ;if equal go to output subroutine
000042BE                          4881  
000042BE  B4BC 0000001E           4882  ADDQ_An_indir_pinc_r6                       CMP.L      #match_ADDQ_An_indir_postinc_reg6,D2             ;check reg is equal to 6
000042C4  6600 0006               4883                                              BNE        ADDQ_An_indir_pinc_r7                            ;if not try reg 7
000042C8  6700 0040               4884                                              BEQ        ADDQ_An_indir_pinc_r6_out                        ;if equal go to output subroutine
000042CC                          4885  
000042CC  B4BC 0000001F           4886  ADDQ_An_indir_pinc_r7                       CMP.L      #match_ADDQ_An_indir_postinc_reg7,D2             ;check reg is equal to 7
000042D2  6700 003E               4887                                              BEQ        ADDQ_An_indir_pinc_r7_out                        ;if equal go to output subroutine
000042D6  6600 2C46               4888                                              BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
000042DA                          4889  
000042DA                          4890  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000042DA  227C 0000845A           4891  ADDQ_An_indir_pinc_r0_out                       MOVE.L      #ea_indir_postinc_A0,A1                           ;load string constant into A1
000042E0                          4892                                  
000042E0  4E75                    4893                                                  RTS                                                         ;return to subroutine
000042E2                          4894  
000042E2  227C 00008460           4895  ADDQ_An_indir_pinc_r1_out                       MOVE.L      #ea_indir_postinc_A1,A1                           ;load string constant into A1
000042E8                          4896                                  
000042E8  4E75                    4897                                                  RTS                                                         ;return to subroutine
000042EA                          4898  
000042EA  227C 00008466           4899  ADDQ_An_indir_pinc_r2_out                       MOVE.L      #ea_indir_postinc_A2,A1                           ;load string constant into A1
000042F0                          4900                                  
000042F0  4E75                    4901                                                  RTS                                                         ;return to subroutine
000042F2                          4902  
000042F2  227C 0000846C           4903  ADDQ_An_indir_pinc_r3_out                       MOVE.L      #ea_indir_postinc_A3,A1                           ;load string constant into A1
000042F8                          4904                                  
000042F8  4E75                    4905                                                  RTS                                                         ;return to subroutine
000042FA                          4906  
000042FA  227C 00008472           4907  ADDQ_An_indir_pinc_r4_out                       MOVE.L      #ea_indir_postinc_A4,A1                           ;load string constant into A1
00004300                          4908                                  
00004300  4E75                    4909                                                  RTS                                                         ;return to subroutine
00004302                          4910  
00004302  227C 00008478           4911  ADDQ_An_indir_pinc_r5_out                       MOVE.L      #ea_indir_postinc_A5,A1                           ;load string constant into A1
00004308                          4912                                  
00004308  4E75                    4913                                                  RTS                                                         ;return to subroutine
0000430A                          4914  
0000430A  227C 0000847E           4915  ADDQ_An_indir_pinc_r6_out                       MOVE.L      #ea_indir_postinc_A6,A1                           ;load string constant into A1
00004310                          4916                                  
00004310  4E75                    4917                                                  RTS                                                         ;return to subroutine
00004312                          4918  
00004312  227C 00008484           4919  ADDQ_An_indir_pinc_r7_out                       MOVE.L      #ea_indir_postinc_A7,A1                           ;load string constant into A1
00004318                          4920                                  
00004318  4E75                    4921                                                  RTS                                                         ;return to subroutine
0000431A                          4922  
0000431A                          4923  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000431A  4282                    4924  ADDQ_An_indir_predec                        CLR.L  D2
0000431C  3400                    4925                                           MOVE.W D0,D2
0000431E  C4BC 0000003F           4926                                           AND.L              #mask_ADDQ_ea_reg_and_mode,D2
00004324  B4BC 00000020           4927                                              CMP.L      #match_ADDQ_An_indir_predec_reg0,D2           ;check reg is equal to 0
0000432A  6600 0006               4928                                              BNE        ADDQ_An_indir_pdec_r1                         ;if not try reg 1
0000432E  6700 0064               4929                                              BEQ        ADDQ_An_indir_pdec_r0_out                     ;if equal go to output subroutine
00004332                          4930  
00004332  B4BC 00000021           4931  ADDQ_An_indir_pdec_r1                       CMP.L      #match_ADDQ_An_indir_predec_reg1,D2           ;check reg is equal to 1
00004338  6600 0006               4932                                              BNE        ADDQ_An_indir_pdec_r2                         ;if not try reg 2
0000433C  6700 005E               4933                                              BEQ        ADDQ_An_indir_pdec_r1_out                     ;if equal go to output subroutine
00004340                          4934  
00004340  B4BC 00000022           4935  ADDQ_An_indir_pdec_r2                       CMP.L      #match_ADDQ_An_indir_predec_reg2,D2           ;check reg is equal to 2
00004346  6600 0006               4936                                              BNE        ADDQ_An_indir_pdec_r3                         ;if not try reg 3
0000434A  6700 0058               4937                                              BEQ        ADDQ_An_indir_pdec_r2_out                     ;if equal go to output subroutine
0000434E                          4938  
0000434E  B4BC 00000023           4939  ADDQ_An_indir_pdec_r3                       CMP.L      #match_ADDQ_An_indir_predec_reg3,D2           ;check reg is equal to 3
00004354  6600 0006               4940                                              BNE        ADDQ_An_indir_pdec_r4                         ;if not try reg 4
00004358  6700 0052               4941                                              BEQ        ADDQ_An_indir_pdec_r3_out                     ;if equal go to output subroutine
0000435C                          4942  
0000435C  B4BC 00000024           4943  ADDQ_An_indir_pdec_r4                       CMP.L      #match_ADDQ_An_indir_predec_reg4,D2           ;check reg is equal to 4
00004362  6600 0006               4944                                              BNE        ADDQ_An_indir_pdec_r5                         ;if not try reg 5
00004366  6700 004C               4945                                              BEQ        ADDQ_An_indir_pdec_r4_out                     ;if equal go to output subroutine
0000436A                          4946  
0000436A  B4BC 00000025           4947  ADDQ_An_indir_pdec_r5                       CMP.L      #match_ADDQ_An_indir_predec_reg5,D2           ;check reg is equal to 5
00004370  6600 0006               4948                                              BNE        ADDQ_An_indir_pdec_r6                         ;if not try reg 6
00004374  6700 0046               4949                                              BEQ        ADDQ_An_indir_pdec_r5_out                     ;if equal go to output subroutine
00004378                          4950  
00004378  B4BC 00000026           4951  ADDQ_An_indir_pdec_r6                       CMP.L      #match_ADDQ_An_indir_predec_reg6,D2           ;check reg is equal to 6
0000437E  6600 0006               4952                                              BNE        ADDQ_An_indir_pdec_r7                         ;if not try reg 7
00004382  6700 0040               4953                                              BEQ        ADDQ_An_indir_pdec_r6_out                     ;if equal go to output subroutine
00004386                          4954  
00004386  B4BC 00000027           4955  ADDQ_An_indir_pdec_r7                       CMP.L      #match_ADDQ_An_indir_predec_reg7,D2           ;check reg is equal to 7
0000438C  6700 003E               4956                                              BEQ        ADDQ_An_indir_pdec_r7_out                    ;if equal go to output subroutine
00004390  6600 2B8C               4957                                              BNE        ERROR                                        ;if not equal to an addresssing mode, pritn error
00004394                          4958  
00004394                          4959  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00004394  227C 0000848A           4960  ADDQ_An_indir_pdec_r0_out                   MOVE.L      #ea_indir_predec_A0,A1                        ;load string constant into A1
0000439A                          4961                                  
0000439A  4E75                    4962                                              RTS                                                     ;return to subroutine
0000439C                          4963                                              
0000439C  227C 00008490           4964  ADDQ_An_indir_pdec_r1_out                   MOVE.L      #ea_indir_predec_A1,A1                      ;load string constant into A1
000043A2                          4965                                  
000043A2  4E75                    4966                                              RTS                                                     ;return to subroutine
000043A4                          4967  
000043A4  227C 00008496           4968  ADDQ_An_indir_pdec_r2_out                   MOVE.L      #ea_indir_predec_A2,A1                      ;load string constant into A1
000043AA                          4969                                  
000043AA  4E75                    4970                                              RTS                                                     ;return to subroutine
000043AC                          4971  
000043AC  227C 0000849C           4972  ADDQ_An_indir_pdec_r3_out                   MOVE.L      #ea_indir_predec_A3,A1                      ;load string constant into A1
000043B2                          4973                                  
000043B2  4E75                    4974                                              RTS                                                     ;return to subroutine
000043B4                          4975  
000043B4  227C 000084A2           4976  ADDQ_An_indir_pdec_r4_out                   MOVE.L      #ea_indir_predec_A4,A1                      ;load string constant into A1
000043BA                          4977                                  
000043BA  4E75                    4978                                              RTS                                                     ;return to subroutine
000043BC                          4979  
000043BC  227C 000084A8           4980  ADDQ_An_indir_pdec_r5_out                   MOVE.L      #ea_indir_predec_A5,A1                      ;load string constant into A1
000043C2                          4981                                  
000043C2  4E75                    4982                                              RTS                                                     ;return to subroutine
000043C4                          4983  
000043C4  227C 000084AE           4984  ADDQ_An_indir_pdec_r6_out                   MOVE.L      #ea_indir_predec_A6,A1                      ;load string constant into A1
000043CA                          4985                                  
000043CA  4E75                    4986                                              RTS                                                     ;return to subroutine
000043CC                          4987  
000043CC  227C 000084B4           4988  ADDQ_An_indir_pdec_r7_out                   MOVE.L      #ea_indir_predec_A7,A1                      ;load string constant into A1
000043D2                          4989                                  
000043D2  4E75                    4990                                              RTS                                                     ;return to subroutine
000043D4                          4991  
000043D4                          4992  ;------------------Absolute Addressing Output-----------------------
000043D4  22FC 000084C4           4993  ADDQ_abs_add_word_out                    MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
000043DA  22C5                    4994                                           MOVE.L      D5,(A1)+                           ;load address                  
000043DC                          4995                                  
000043DC  4E75                    4996                                           RTS                                            :return to subroutine
000043DE                          4997                                             
000043DE                          4998  
000043DE  2A18                    4999  ADDQ_abs_add_long_out                    MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000043E0  22FC 000084C4           5000                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
000043E6  22C5                    5001                                           MOVE.L      D5,(A1)+                           ;load address                  
000043E8                          5002                                  
000043E8  4E75                    5003                                           RTS                                           
000043EA                          5004  ;----------------------Error Handling----------------------------------------
000043EA                          5005  
000043EA                          5006  
000043EA  =00000038               5007  mask_ADDQ_ea_mode           EQU         $0038
000043EA  =0000003F               5008  mask_ADDQ_abs_add           EQU         $003F
000043EA  =0000003F               5009  mask_ADDQ_ea_reg_and_mode   EQU         $003F
000043EA  =00000E00               5010  mask_ADDQ_reg               EQU         $0E00
000043EA                          5011  
000043EA  =00000000               5012  match_ADDQ_Dn               EQU         $0000
000043EA  =00000008               5013  match_ADDQ_An               EQU         $0008
000043EA  =00000010               5014  match_ADDQ_An_indir         EQU         $0010
000043EA  =00000020               5015  match_ADDQ_An_indir_predec  EQU         $0020
000043EA  =00000018               5016  match_ADDQ_An_indir_postinc EQU         $0018
000043EA  =00000038               5017  match_ADDQ_abs_add_word     EQU         $0038
000043EA  =00000039               5018  match_ADDQ_abs_add_long     EQU         $0039
000043EA                          5019  
000043EA  =00000000               5020  match_ADDQ_D0               EQU         $0000
000043EA  =00000001               5021  match_ADDQ_D1               EQU         $0001
000043EA  =00000002               5022  match_ADDQ_D2               EQU         $0002
000043EA  =00000003               5023  match_ADDQ_D3               EQU         $0003
000043EA  =00000004               5024  match_ADDQ_D4               EQU         $0004
000043EA  =00000005               5025  match_ADDQ_D5               EQU         $0005
000043EA  =00000006               5026  match_ADDQ_D6               EQU         $0006
000043EA  =00000007               5027  match_ADDQ_D7               EQU         $0007
000043EA                          5028  
000043EA  =00000008               5029  match_ADDQ_A0               EQU         $0008
000043EA  =00000009               5030  match_ADDQ_A1               EQU         $0009
000043EA  =0000000A               5031  match_ADDQ_A2               EQU         $000A
000043EA  =0000000B               5032  match_ADDQ_A3               EQU         $000B
000043EA  =0000000C               5033  match_ADDQ_A4               EQU         $000C
000043EA  =0000000D               5034  match_ADDQ_A5               EQU         $000D
000043EA  =0000000E               5035  match_ADDQ_A6               EQU         $000E
000043EA  =0000000F               5036  match_ADDQ_A7               EQU         $000F
000043EA                          5037  
000043EA  =00000010               5038  match_ADDQ_An_indir_r0      EQU         $0010
000043EA  =00000011               5039  match_ADDQ_An_indir_r1      EQU         $0011
000043EA  =00000012               5040  match_ADDQ_An_indir_r2      EQU         $0012
000043EA  =00000013               5041  match_ADDQ_An_indir_r3      EQU         $0013
000043EA  =00000014               5042  match_ADDQ_An_indir_r4      EQU         $0014
000043EA  =00000015               5043  match_ADDQ_An_indir_r5      EQU         $0015
000043EA  =00000016               5044  match_ADDQ_An_indir_r6      EQU         $0016
000043EA  =00000017               5045  match_ADDQ_An_indir_r7      EQU         $0017
000043EA                          5046  
000043EA  =00000018               5047  match_ADDQ_An_indir_postinc_reg0        EQU         $0018
000043EA  =00000019               5048  match_ADDQ_An_indir_postinc_reg1        EQU         $0019
000043EA  =0000001A               5049  match_ADDQ_An_indir_postinc_reg2        EQU         $001A
000043EA  =0000001B               5050  match_ADDQ_An_indir_postinc_reg3        EQU         $001B
000043EA  =0000001C               5051  match_ADDQ_An_indir_postinc_reg4        EQU         $001C
000043EA  =0000001D               5052  match_ADDQ_An_indir_postinc_reg5        EQU         $001D
000043EA  =0000001E               5053  match_ADDQ_An_indir_postinc_reg6        EQU         $001E
000043EA  =0000001F               5054  match_ADDQ_An_indir_postinc_reg7        EQU         $001F
000043EA                          5055  
000043EA  =00000020               5056  match_ADDQ_An_indir_predec_reg0         EQU         $0020
000043EA  =00000021               5057  match_ADDQ_An_indir_predec_reg1         EQU         $0021
000043EA  =00000022               5058  match_ADDQ_An_indir_predec_reg2         EQU         $0022
000043EA  =00000023               5059  match_ADDQ_An_indir_predec_reg3         EQU         $0023
000043EA  =00000024               5060  match_ADDQ_An_indir_predec_reg4         EQU         $0024
000043EA  =00000025               5061  match_ADDQ_An_indir_predec_reg5         EQU         $0025
000043EA  =00000026               5062  match_ADDQ_An_indir_predec_reg6         EQU         $0026
000043EA  =00000027               5063  match_ADDQ_An_indir_predec_reg7         EQU         $0027
000043EA                          5064  
000043EA                          5065  
000043EA  =00000000               5066  match_ADDQ_reg0                         EQU         $0000
000043EA  =00000200               5067  match_ADDQ_reg1                         EQU         $0200
000043EA  =00000400               5068  match_ADDQ_reg2                         EQU         $0400
000043EA  =00000600               5069  match_ADDQ_reg3                         EQU         $0600
000043EA  =00000800               5070  match_ADDQ_reg4                         EQU         $0800
000043EA  =00000A00               5071  match_ADDQ_reg5                         EQU         $0A00
000043EA  =00000C00               5072  match_ADDQ_reg6                         EQU         $0C00
000043EA  =00000E00               5073  match_ADDQ_reg7                         EQU         $0E00
000043EA                          5074  
000043EA                          5075  
000043EA                          5076  
000043EA                          5077  
000043EA                          5078  
000043EA                          5079  
000043EA                          5080  
000043EA                          5081  
000043EA                          5082  
000043EA                          5083  
000043EA                          5084  -------------------- end include --------------------
000043EA                          5085              INCLUDE 'ASD Subroutine.x68'
000043EA                          5086  
000043EA                          5087  ASD_sub                                            ;preserve the registers,\ 
000043EA                          5088                                   
000043EA                          5089  ;------------------------Determine Shift Type-----------------------------------------------------------------
000043EA  C2BC 000000C0           5090  shift_type                       AND.L              #mask_ASD_shift_type,D1                 ;load mask into D1
000043F0  B2BC 000000C0           5091                                   CMP.L              #match_ASD_mem_shift,D1                 ;check to see if memory shift
000043F6  6700 0006               5092                                   BEQ                ASD_mem_shift                               ;if equal go to mem shift subroutine
000043FA  6600 029C               5093                                   BNE                ASD_reg_shift                               ;if ASD mem shift, go to reg shift
000043FE                          5094  
000043FE                          5095  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
000043FE  4241                    5096  ASD_mem_shift                    CLR               D1                                        ;clear shift mask
00004400  3200                    5097                                  MOVE.W              D0,D1
00004402  C2BC 00000038           5098                                   AND.L             #mask_ASD_ea_mode,D1                      ;move the mask to D1
00004408                          5099  
00004408  B2BC 00000010           5100  ASD_An_indir                     CMP.L             #match_ASD_An_indir,D1                    ;check to see if mode is add reg indir
0000440E  6600 0014               5101                                   BNE               ASD_An_indir_predec                           ;if ASD, go check add reg indir predec 
00004412  6700 0046               5102                                   BEQ               ASD_An_indir_reg                              ;if equal go figure out the register           
00004416                          5103            
00004416  B2BC 00000020           5104  ASD_An_indir_postinc             CMP.L             #match_ASD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
0000441C  6600 0006               5105                                   BNE               ASD_An_indir_predec                           ;if ASD go check add reg indir/predec
00004420  6700 00F2               5106                                   BEQ               ASD_An_indir_postinc_reg                      ;if equal go figure out the register
00004424                          5107                        
00004424  B2BC 00000018           5108  ASD_An_indir_predec              CMP.L             #match_ASD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
0000442A  6600 0006               5109                                   BNE               ASD_abs_add_word                              ;if ASD go check abs add word
0000442E  6700 019E               5110                                   BEQ               ASD_An_indir_predec_reg                       ;if equal go figure out the register
00004432                          5111  
00004432  4282                    5112  ASD_abs_add_word                CLR.L   D2 
00004434  3400                    5113                                  MOVE.W D0,D2
00004436  C4BC 0000003F           5114                                  AND.L             #mask_ASD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
0000443C                          5115                                   
0000443C  B4BC 00000039           5116                                   CMP.L             #match_ASD_abs_add_word,D2                ;check if abs add word
00004442  2A18                    5117                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00004444  6600 0006               5118                                   BNE               ASD_abs_add_long                              ;if ASD go check abs add long
00004448  6700 0238               5119                                   BEQ               ASD_abs_add_word_out                          ;if equal go to output
0000444C                          5120    
0000444C  B4BC 0000003C           5121  ASD_abs_add_long                 CMP.L             #match_ASD_abs_add_long,D2                ;check to see if abs add long
00004452  6700 0238               5122                                   BEQ               ASD_abs_add_long_out                          ;if equal go to output
00004456  6600 2AC6               5123                                   BNE               ERROR                                     ;if ASD equal to an addresssing mode, pritn error
0000445A                          5124                               
0000445A                          5125  
0000445A                          5126  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
0000445A                          5127                                              
0000445A                          5128  ;------------------Address Register Indirect-----------------------
0000445A  4242                    5129  ASD_An_indir_reg                            CLR             D2                                      ;make sure D2 is empty
0000445C  3400                    5130                                              MOVE.W          D0,D2
0000445E  C4BC 0000003F           5131                                              AND.L           #mask_ASD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00004464                          5132                                              
00004464  B4BC 00000010           5133                                              CMP.L           #match_ASD_An_indir_r0,D2              ;check reg is equal to 0
0000446A  6600 0006               5134                                              BNE             ASD_An_indir_reg1                            ;if ASD try reg 1
0000446E  6700 0064               5135                                              BEQ             ASD_An_indir_reg0_out                     ;if equal go to output subroutine
00004472                          5136  
00004472  B4BC 00000011           5137  ASD_An_indir_reg1                           CMP.L           #match_ASD_An_indir_r1,D2              ;check reg is equal to 1
00004478  6600 0006               5138                                              BNE             ASD_An_indir_reg2                            ;if ASD try reg 2
0000447C  6700 005E               5139                                              BEQ             ASD_An_indir_reg1_out                     ;if equal go to output subroutine
00004480                          5140  
00004480  B4BC 00000012           5141  ASD_An_indir_reg2                           CMP.L           #match_ASD_An_indir_r2,D2              ;check reg is equal to 2
00004486  6600 0006               5142                                              BNE             ASD_An_indir_reg3                            ;if ASD try reg 3
0000448A  6700 0058               5143                                              BEQ             ASD_An_indir_reg2_out                     ;if equal go to output subroutine
0000448E                          5144  
0000448E  B4BC 00000013           5145  ASD_An_indir_reg3                           CMP.L           #match_ASD_An_indir_r3,D2              ;check reg is equal to 3
00004494  6600 0006               5146                                              BNE             ASD_An_indir_reg4                            ;if ASD try reg 4
00004498  6700 0052               5147                                              BEQ             ASD_An_indir_reg3_out                     ;if equal go to output subroutine
0000449C                          5148  
0000449C  B4BC 00000014           5149  ASD_An_indir_reg4                           CMP.L           #match_ASD_An_indir_r4,D2              ;check reg is equal to 4
000044A2  6600 0006               5150                                              BNE             ASD_An_indir_reg5                            ;if ASD try reg 5
000044A6  6700 004C               5151                                              BEQ             ASD_An_indir_reg4_out                    ;if equal go to output subroutine
000044AA                          5152  
000044AA  B4BC 00000015           5153  ASD_An_indir_reg5                           CMP.L           #match_ASD_An_indir_r5,D2              ;check reg is equal to 5
000044B0  6600 0006               5154                                              BNE             ASD_An_indir_reg6                            ;if ASD try reg 6
000044B4  6700 0046               5155                                              BEQ             ASD_An_indir_reg5_out                     ;if equal go to output subroutine
000044B8                          5156  
000044B8  B4BC 00000016           5157  ASD_An_indir_reg6                           CMP.L           #match_ASD_An_indir_r6,D2              ;check reg is equal to 6
000044BE  6700 0044               5158                                              BEQ             ASD_An_indir_reg6_out                     ;if equal go to output subroutine
000044C2  6600 0002               5159                                              BNE             ASD_An_indir_reg7                            ;if ASD try reg 7
000044C6                          5160  
000044C6  B4BC 00000017           5161  ASD_An_indir_reg7                           CMP.L           #match_ASD_An_indir_r7,D2              ;check reg is equal to 6
000044CC  6700 003E               5162                                              BEQ             ASD_An_indir_reg7_out                     ;if equal go to output subroutine
000044D0  6600 2A4C               5163                                              BNE             ERROR                                        :if ASD equal to an addresssing mode, pritn error
000044D4                          5164  
000044D4                          5165  ;--------------------Address Register Indirect Output-----------------------
000044D4  227C 00008432           5166  ASD_An_indir_reg0_out                       MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
000044DA                          5167                                                  
000044DA  4E75                    5168                                              RTS                                                         ;return to subroutine
000044DC                          5169                                      
000044DC  227C 00008437           5170  ASD_An_indir_reg1_out                       MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
000044E2                          5171                                                  
000044E2  4E75                    5172                                              RTS                                                         ;return to subroutine
000044E4                          5173                                              
000044E4  227C 0000843C           5174  ASD_An_indir_reg2_out                       MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
000044EA                          5175                                                  
000044EA  4E75                    5176                                              RTS                                                     ;return to subroutine
000044EC                          5177  
000044EC  227C 00008441           5178  ASD_An_indir_reg3_out                       MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
000044F2                          5179                                                  
000044F2  4E75                    5180                                              RTS                                                         ;return to subroutine
000044F4                          5181                                              
000044F4  227C 00008446           5182  ASD_An_indir_reg4_out                       MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
000044FA                          5183                                                  
000044FA  4E75                    5184                                              RTS                                                         ;return to subroutine
000044FC                          5185                                          
000044FC  227C 0000844B           5186  ASD_An_indir_reg5_out                       MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
00004502                          5187                                                  
00004502  4E75                    5188                                              RTS                                                     ;return to subroutine
00004504                          5189  
00004504  227C 00008450           5190  ASD_An_indir_reg6_out                       MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
0000450A                          5191                                                  
0000450A  4E75                    5192                                              RTS                                                         ;return to subroutine
0000450C                          5193  
0000450C  227C 00008455           5194  ASD_An_indir_reg7_out                       MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
00004512                          5195                                                  
00004512  4E75                    5196                                              RTS                                                         ;return to subroutine
00004514                          5197  
00004514                          5198  
00004514                          5199  ;------------------Address Register Indirect with Post Increment-----------------------
00004514  4242                    5200  ASD_An_indir_postinc_reg                    CLR        D2                                      ;make sure D2 is empty
00004516  3400                    5201                                               MOVE.W     D0,D2
00004518  C4BC 0000003F           5202                                              AND.L      #mask_ASD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
0000451E                          5203  
0000451E  B4BC 00000020           5204                                              CMP.L      #match_ASD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00004524  6600 0006               5205                                              BNE        ASD_An_indir_pinc_r1                      ;if ASD try reg 1
00004528  6700 0064               5206                                              BEQ        ASD_An_indir_pinc_r0_out               ;if equal go to output subroutine
0000452C                          5207  
0000452C  B4BC 00000021           5208  ASD_An_indir_pinc_r1                        CMP.L      #match_ASD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00004532  6600 0006               5209                                              BNE        ASD_An_indir_pinc_r2                      ;if ASD try reg 2
00004536  6700 005E               5210                                              BEQ        ASD_An_indir_pinc_r1_out               ;if equal go to output subroutine
0000453A                          5211  
0000453A  B4BC 00000022           5212  ASD_An_indir_pinc_r2                        CMP.L      #match_ASD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00004540  6600 0006               5213                                              BNE        ASD_An_indir_pinc_r3                      ;if ASD try reg 3
00004544  6700 0058               5214                                              BEQ        ASD_An_indir_pinc_r2_out               ;if equal go to output subroutine
00004548                          5215      
00004548  B4BC 00000023           5216  ASD_An_indir_pinc_r3                        CMP.L      #match_ASD_An_indir_postinc_r3,D2        ;check reg is equal to 3
0000454E  6600 0006               5217                                              BNE        ASD_An_indir_pinc_r4                      ;if ASD try reg 4
00004552  6700 0052               5218                                              BEQ        ASD_An_indir_pinc_r3_out               ;if equal go to output subroutine
00004556                          5219  
00004556  B4BC 00000024           5220  ASD_An_indir_pinc_r4                        CMP.L      #match_ASD_An_indir_postinc_r4,D2        ;check reg is equal to 4
0000455C  6600 0006               5221                                              BNE        ASD_An_indir_pinc_r5                      ;if ASD try reg 5
00004560  6700 004C               5222                                              BEQ        ASD_An_indir_pinc_r4_out               ;if equal go to output subroutine
00004564                          5223  
00004564  B4BC 00000025           5224  ASD_An_indir_pinc_r5                        CMP.L      #match_ASD_An_indir_postinc_r5,D2        ;check reg is equal to 5
0000456A  6600 0006               5225                                              BNE        ASD_An_indir_pinc_r6                      ;if ASD try reg 6
0000456E  6700 0046               5226                                              BEQ        ASD_An_indir_pinc_r5_out               ;if equal go to output subroutine
00004572                          5227  
00004572  B4BC 00000026           5228  ASD_An_indir_pinc_r6                        CMP.L      #match_ASD_An_indir_postinc_r6,D2        ;check reg is equal to 6
00004578  6700 0044               5229                                              BEQ        ASD_An_indir_pinc_r6_out              ;if equal go to output subroutine
0000457C  6600 0002               5230                                              BNE        ASD_An_indir_pinc_r7
00004580                          5231  
00004580                          5232  
00004580  B4BC 00000026           5233  ASD_An_indir_pinc_r7                        CMP.L      #match_ASD_An_indir_postinc_r6,D2        ;check reg is equal to 6
00004586  6700 003E               5234                                              BEQ        ASD_An_indir_pinc_r7_out              ;if equal go to output subroutine
0000458A  6600 2992               5235                                              BNE        ERROR                                        :if ASD equal to an addresssing mode, pritn error
0000458E                          5236  
0000458E                          5237  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000458E  227C 00008460           5238  ASD_An_indir_pinc_r0_out                        MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
00004594                          5239                                                  
00004594  4E75                    5240                                                  RTS                                             ;return to subroutine
00004596                          5241  
00004596  227C 00008460           5242  ASD_An_indir_pinc_r1_out                        MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
0000459C                          5243                                                  
0000459C  4E75                    5244                                                  RTS                                             ;return to subroutine
0000459E                          5245  
0000459E  227C 00008466           5246  ASD_An_indir_pinc_r2_out                        MOVE.L          #ea_indir_postinc_A2,A1         ;load string constant into A1
000045A4                          5247                                                  
000045A4  4E75                    5248                                                  RTS                                             ;return to subroutine
000045A6                          5249  
000045A6  227C 0000846C           5250  ASD_An_indir_pinc_r3_out                        MOVE.L          #ea_indir_postinc_A3,A1         ;load string constant into A1
000045AC                          5251                                                  
000045AC  4E75                    5252                                                  RTS                                             ;return to subroutine
000045AE                          5253  
000045AE  227C 00008472           5254  ASD_An_indir_pinc_r4_out                        MOVE.L          #ea_indir_postinc_A4,A1         ;load string constant into A1
000045B4                          5255                                                  
000045B4  4E75                    5256                                                  RTS                                             ;return to subroutine
000045B6                          5257  
000045B6  227C 00008478           5258  ASD_An_indir_pinc_r5_out                        MOVE.L          #ea_indir_postinc_A5,A1         ;load string constant into A1
000045BC                          5259                                                  
000045BC  4E75                    5260                                                  RTS                                             ;return to subroutine
000045BE                          5261   
000045BE  227C 0000847E           5262  ASD_An_indir_pinc_r6_out                        MOVE.L          #ea_indir_postinc_A6,A1         ;load string constant into A1
000045C4                          5263                                                  
000045C4  4E75                    5264                                                  RTS                                             ;return to subroutine
000045C6                          5265  
000045C6  227C 00008484           5266  ASD_An_indir_pinc_r7_out                        MOVE.L          #ea_indir_postinc_A7,A1         ;load string constant into A1
000045CC                          5267                                                  
000045CC  4E75                    5268                                                  RTS                                             ;return to subroutine
000045CE                          5269  
000045CE                          5270                                                      
000045CE                          5271  ;------------------Address Register Indirect with Pre Decrement-----------------------
000045CE  4282                    5272  ASD_An_indir_predec_reg                     CLR.L       D2
000045D0  3400                    5273                                              MOVE.W      D0,D2
000045D2  B4BC 00000018           5274                                              CMP.L      #match_ASD_An_indir_predec_r0,D2         ;check reg is equal to 0
000045D8  6600 0006               5275                                              BNE        ASD_An_indir_pdec_r1                      ;if ASD try reg 1
000045DC  6700 0064               5276                                              BEQ        ASD_An_indir_pdec_r0_out               ;if equal go to output subroutine
000045E0                          5277  
000045E0  B4BC 00000019           5278  ASD_An_indir_pdec_r1                        CMP.L      #match_ASD_An_indir_predec_r1,D2         ;check reg is equal to 1
000045E6  6600 0006               5279                                              BNE        ASD_An_indir_pdec_r2                      ;if ASD try reg 2
000045EA  6700 005E               5280                                              BEQ        ASD_An_indir_pdec_r1_out               ;if equal go to output subroutine
000045EE                          5281  
000045EE  B4BC 0000001A           5282  ASD_An_indir_pdec_r2                        CMP.L      #match_ASD_An_indir_predec_r2,D2         ;check reg is equal to 2
000045F4  6600 0006               5283                                              BNE        ASD_An_indir_pdec_r3                      ;if ASD try reg 3
000045F8  6700 0058               5284                                              BEQ        ASD_An_indir_pdec_r2_out               ;if equal go to output subroutine
000045FC                          5285  
000045FC  B4BC 0000001B           5286  ASD_An_indir_pdec_r3                        CMP.L      #match_ASD_An_indir_predec_r3,D2         ;check reg is equal to 3
00004602  6600 0006               5287                                              BNE        ASD_An_indir_pdec_r4                      ;if ASD try reg 4
00004606  6700 0052               5288                                              BEQ        ASD_An_indir_pdec_r3_out               ;if equal go to output subroutine
0000460A                          5289  
0000460A  B4BC 0000001C           5290  ASD_An_indir_pdec_r4                        CMP.L      #match_ASD_An_indir_predec_r4,D2         ;check reg is equal to 4
00004610  6600 0006               5291                                              BNE        ASD_An_indir_pdec_r5                      ;if ASD try reg 5
00004614  6700 004C               5292                                              BEQ        ASD_An_indir_pdec_r4_out               ;if equal go to output subroutine
00004618                          5293  
00004618  B4BC 0000001D           5294  ASD_An_indir_pdec_r5                        CMP.L        #match_ASD_An_indir_predec_r5,D2         ;check reg is equal to 5
0000461E  6600 0006               5295                                              BNE        ASD_An_indir_pdec_r6                      ;if ASD try reg 6
00004622  6700 0046               5296                                              BEQ        ASD_An_indir_pdec_r5_out               ;if equal go to output subroutine
00004626                          5297  
00004626  B4BC 0000001E           5298  ASD_An_indir_pdec_r6                        CMP.L        #match_ASD_An_indir_predec_r6,D2         ;check reg is equal to 6
0000462C  6700 0044               5299                                              BEQ        ASD_An_indir_pdec_r6_out               ;if equal go to output subroutine
00004630  6600 0002               5300                                              BNE        ASD_An_indir_pdec_r7
00004634                          5301  
00004634  B4BC 0000001E           5302  ASD_An_indir_pdec_r7                        CMP.L        #match_ASD_An_indir_predec_r6,D2         ;check reg is equal to 6
0000463A  6700 003E               5303                                              BEQ        ASD_An_indir_pdec_r7_out               ;if equal go to output subroutine
0000463E  6600 28DE               5304                                              BNE        ERROR                                        :if ASD equal to an addresssing mode, pritn error
00004642                          5305  
00004642                          5306  
00004642                          5307  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00004642  227C 0000848A           5308  ASD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
00004648                          5309                                                  
00004648  4E75                    5310                                              RTS                                                     ;return to subroutine
0000464A                          5311  
0000464A  227C 00008490           5312  ASD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
00004650                          5313                                                  
00004650  4E75                    5314                                              RTS                                                     ;return to subroutine
00004652                          5315                                                      
00004652  227C 00008496           5316  ASD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
00004658                          5317                                                  
00004658  4E75                    5318                                              RTS                                                     ;return to subroutine
0000465A                          5319  
0000465A  227C 0000849C           5320  ASD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
00004660                          5321                                                  
00004660  4E75                    5322                                              RTS                                                     ;return to subroutine
00004662                          5323  
00004662  227C 000084A2           5324  ASD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
00004668                          5325                                                  
00004668  4E75                    5326                                              RTS                                                     ;return to subroutine
0000466A                          5327      
0000466A  227C 000084A8           5328  ASD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00004670                          5329                                                  
00004670  4E75                    5330                                              RTS                                                     ;return to subroutine
00004672                          5331      
00004672  227C 000084AE           5332  ASD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
00004678                          5333                                                  
00004678  4E75                    5334                                              RTS                                                     ;return to subroutine
0000467A                          5335  
0000467A  227C 000084B4           5336  ASD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
00004680                          5337                                                  
00004680  4E75                    5338                                              RTS                                                     ;return to subroutine
00004682                          5339  
00004682                          5340                                                      
00004682                          5341  ;------------------Absolute Addressing Output-----------------------
00004682  22FC 000084C4           5342  ASD_abs_add_word_out                      MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00004688  22C5                    5343                                           MOVE.L      D5,(A1)+                           ;load address                  
0000468A                          5344                                                  
0000468A  4E75                    5345                                           RTS                                            :return to subroutine
0000468C                          5346                                             
0000468C                          5347  
0000468C  2A18                    5348  ASD_abs_add_long_out                      MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000468E  22FC 000084C4           5349                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004694  22C5                    5350                                           MOVE.L      D5,(A1)+                           ;load address                  
00004696                          5351                                                  
00004696  4E75                    5352                                           RTS                                            :return to subroutine                                            
00004698                          5353  ;----------------------Error Handling----------------------------------------
00004698                          5354                                         ;return to subroutine
00004698                          5355                                                  
00004698                          5356  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
00004698                          5357  ; determine if the shift is a data register or a immediate value
00004698  4241                    5358  ASD_reg_shift                       CLR         D1                              ;clear D1
0000469A  3200                    5359                                      MOVE.W      D0,D1
0000469C  C2BC 00000020           5360                                      AND.L       #mask_ASD_reg_shift_ir,D1           ;load the mask into D1
000046A2  B2BC 00000020           5361                                      CMP.L       #match_ASD_shift_reg,D1             ;check to see if the shift is a data register
000046A8  6700 0006               5362                                       BEQ         ASD_shift_reg                       ;if the shift is a register, go to subroutine
000046AC  6600 007C               5363                                      BNE         ASD_count_val                       ;if ASD go to immediate value subroutine
000046B0                          5364  
000046B0                          5365  ;i/r = 1, the shift is a Data register                                    
000046B0                          5366  ; this the subroutine for the data register shift
000046B0  4241                    5367  ASD_shift_reg                           CLR         D1                              ;clear D1
000046B2  3200                    5368                                          MOVE.W      D0,D1
000046B4  C2BC 00000020           5369                                          AND.L       #mask_ASD_reg_shift,D1              ;load mask into D1 for bits 11-9
000046BA                          5370  
000046BA  B2BC 00000000           5371  ASD_count_reg0                          CMP.L       #match_ASD_count_reg0,D1            ;check to see if count/shift = 0
000046C0  6600 0006               5372                                          BNE         ASD_count_reg1                    ;if ASD go check 1
000046C4  6700 015E               5373                                          BEQ         ASD_count_reg0_out                ;got to output
000046C8                          5374                                      
000046C8  B2BC 00000200           5375  ASD_count_reg1                          CMP.L       #match_ASD_count_reg1,D1            ;check to see if count/shift = 1
000046CE  6600 0006               5376                                          BNE         ASD_count_reg2                    ;if ASD go check 2
000046D2  6700 0160               5377                                          BEQ         ASD_count_reg1_out                ;got to output
000046D6                          5378  
000046D6  B2BC 00000400           5379  ASD_count_reg2                          CMP.L       #match_ASD_count_reg2,D1            ;check to see if count/shift = 2
000046DC  6600 0006               5380                                          BNE         ASD_count_reg3                    ;if ASD go check 3
000046E0  6700 0162               5381                                          BEQ         ASD_count_reg2_out                ;got to output
000046E4                          5382  
000046E4  B2BC 00000600           5383  ASD_count_reg3                          CMP.L       #match_ASD_count_reg3,D1            ;check to see if count/shift = 3
000046EA  6600 0006               5384                                          BNE         ASD_count_reg4                    ;if ASD go check 4
000046EE  6700 0164               5385                                          BEQ         ASD_count_reg3_out                ;got to output
000046F2                          5386  
000046F2  B2BC 00000800           5387  ASD_count_reg4                          CMP.L       #match_ASD_count_reg4,D1            ;check to see if count/shift = 4
000046F8  6600 0006               5388                                          BNE         ASD_count_reg5                    ;if ASD go check 5
000046FC  6700 0166               5389                                          BEQ         ASD_count_reg4_out                ;got to output
00004700                          5390    
00004700  B2BC 00000A00           5391  ASD_count_reg5                          CMP.L       #match_ASD_count_reg5,D1            ;check to see if count/shift = 5
00004706  6600 0006               5392                                          BNE         ASD_count_reg6                      ;if ASD go check 6
0000470A  6700 0168               5393                                          BEQ         ASD_count_reg5_out                  ;got to output
0000470E                          5394  
0000470E  B2BC 00000C00           5395  ASD_count_reg6                          CMP.L       #match_ASD_count_reg6,D1            ;check to see if count/shift = 6
00004714  6600 0006               5396                                          BNE         ASD_count_reg7                      ;if ASD go check 7
00004718  6700 016A               5397                                          BEQ         ASD_count_reg6_out                  ;got to output
0000471C                          5398  
0000471C  B2BC 00000E00           5399  ASD_count_reg7                          CMP.L       #match_ASD_count_reg7,D1            ;check to see if count/shift = 7
00004722  6600 27FA               5400                                          BNE         ERROR                           ; if none of the registers, then print error message
00004726  6700 016C               5401                                          BEQ         ASD_count_reg7_out                  ;got to output
0000472A                          5402  
0000472A                          5403  
0000472A                          5404  
0000472A                          5405  ;i/r = 0, the shift is an immediate value
0000472A                          5406  ;1-7 = 1-7
0000472A                          5407  ;0 = 8
0000472A                          5408  ; this is the subroutine for the immedite value shift
0000472A  4241                    5409  ASD_count_val                       CLR         D1                              ;clear D1
0000472C  3200                    5410                                          MOVE.W      D0,D1
0000472E  C2BC 00000020           5411                                          AND.L       #mask_ASD_reg_shift,D1
00004734  B2BC 00000000           5412                                      CMP.L       #match_ASD_count_val0,D1          ;check to see if shift count is 0
0000473A  6600 0006               5413                                      BNE         ASD_count_val1                    ;if ASD 0 check 1
0000473E  6700 0064               5414                                      BEQ         ASD_count_val0_out                ;if 0 got to output
00004742                          5415  
00004742  B2BC 00000200           5416  ASD_count_val1                      CMP.L       #match_ASD_count_val1,D1          ;check to see if shift count is 0
00004748  6600 0006               5417                                      BNE         ASD_count_val2                    ;if ASD 0 check 1
0000474C  6700 0066               5418                                      BEQ         ASD_count_val1_out                ;if 0 got to output
00004750                          5419  
00004750  B2BC 00000400           5420  ASD_count_val2                      CMP.L       #match_ASD_count_val2,D1          ;check to see if shift count is 0
00004756  6600 0006               5421                                      BNE         ASD_count_val3                    ;if ASD 0 check 1
0000475A  6700 0068               5422                                      BEQ         ASD_count_val2_out                ;if 0 got to output
0000475E                          5423  
0000475E  B2BC 00000600           5424  ASD_count_val3                      CMP.L       #match_ASD_count_val3,D1          ;check to see if shift count is 0
00004764  6600 0006               5425                                      BNE         ASD_count_val4                    ;if ASD 0 check 1
00004768  6700 006A               5426                                      BEQ         ASD_count_val3_out                ;if 0 got to output
0000476C                          5427  
0000476C  B2BC 00000800           5428  ASD_count_val4                      CMP.L       #match_ASD_count_val4,D1          ;check to see if shift count is 0
00004772  6600 0006               5429                                      BNE         ASD_count_val5                    ;if ASD 0 check 1
00004776  6700 006C               5430                                      BEQ         ASD_count_val4_out                ;if 0 got to output
0000477A                          5431  
0000477A  B2BC 00000A00           5432  ASD_count_val5                      CMP.L       #match_ASD_count_val5,D1          ;check to see if shift count is 0
00004780  6600 0006               5433                                      BNE         ASD_count_val6                    ;if ASD 0 check 1
00004784  6700 006E               5434                                      BEQ         ASD_count_val5_out                ;if 0 got to output
00004788                          5435  
00004788  B2BC 00000C00           5436  ASD_count_val6                      CMP.L       #match_ASD_count_val6,D1          ;check to see if shift count is 0
0000478E  6600 0006               5437                                      BNE         ASD_count_val7                    ;if ASD 0 check 1
00004792  6700 0070               5438                                      BEQ         ASD_count_val6_out                ;if 0 got to output
00004796                          5439  
00004796  B2BC 00000E00           5440  ASD_count_val7                      CMP.L       #match_ASD_count_val7,D1          ;check to see if shift count is 0
0000479C  6600 2780               5441                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
000047A0  6700 0072               5442                                      BEQ         ASD_count_val7_out                ;if 0 got to output
000047A4                          5443  
000047A4                          5444  ;-----------------------------------Count Shift Immedite Value Output---------------------------
000047A4  227C 00008422           5445  ASD_count_val0_out                MOVE.L            #ea_val0,A1             ;load string constant into A1
000047AA  4EB8 140A               5446                                      JSR         print_first
000047AE  4EB9 000048A4           5447                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000047B4                          5448                                
000047B4  227C 00008424           5449  ASD_count_val1_out                MOVE.L            #ea_val1,A1             ;load string constant into A1
000047BA  4EB8 140A               5450                                      JSR         print_first
000047BE  4EB9 000048A4           5451                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000047C4                          5452  
000047C4  227C 00008426           5453  ASD_count_val2_out                MOVE.L            #ea_val2,A1             ;load string constant into A1
000047CA  4EB8 140A               5454                                      JSR         print_first
000047CE  4EB9 000048A4           5455                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000047D4                          5456  
000047D4  227C 00008428           5457  ASD_count_val3_out                MOVE.L            #ea_val3,A1             ;load string constant into A1
000047DA  4EB8 140A               5458                                      JSR         print_first
000047DE  4EB9 000048A4           5459                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000047E4                          5460  
000047E4  227C 0000842A           5461  ASD_count_val4_out                MOVE.L            #ea_val4,A1             ;load string constant into A1
000047EA  4EB8 140A               5462                                      JSR         print_first
000047EE  4EB9 000048A4           5463                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000047F4                          5464      
000047F4  227C 0000842C           5465  ASD_count_val5_out                MOVE.L            #ea_val5,A1             ;load string constant into A1
000047FA  4EB8 140A               5466                                      JSR         print_first
000047FE  4EB9 000048A4           5467                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004804                          5468  
00004804  227C 0000842E           5469  ASD_count_val6_out                MOVE.L            #ea_val6,A1             ;load string constant into A1
0000480A  4EB8 140A               5470                                      JSR         print_first
0000480E  4EB9 000048A4           5471                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004814                          5472  
00004814  227C 00008430           5473  ASD_count_val7_out                MOVE.L            #ea_val7,A1             ;load string constant into A1
0000481A  4EB8 140A               5474                                      JSR         print_first
0000481E  4EB9 000048A4           5475                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004824                          5476  
00004824                          5477  ;-------------------------Count Shift Output (Dn)-----------------------------------------
00004824  227C 000083F2           5478  ASD_count_reg0_out                MOVE.L            #ea_D0,A1           ;load string constant into A1
0000482A  4EB8 140A               5479                                      JSR         print_first
0000482E  4EB9 000048A4           5480                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004834                          5481                                
00004834  227C 000083F5           5482  ASD_count_reg1_out                MOVE.L            #ea_D1,A1           ;load string constant into A1
0000483A  4EB8 140A               5483                                      JSR         print_first
0000483E  4EB9 000048A4           5484                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004844                          5485                                
00004844  227C 000083F8           5486  ASD_count_reg2_out                MOVE.L            #ea_D2,A1           ;load string constant into A1
0000484A  4EB8 140A               5487                                      JSR         print_first
0000484E  4EB9 000048A4           5488                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004854                          5489                                
00004854  227C 000083FB           5490  ASD_count_reg3_out                MOVE.L            #ea_D3,A1           ;load string constant into A1
0000485A  4EB8 140A               5491                                      JSR         print_first
0000485E  4EB9 000048A4           5492                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004864                          5493                                
00004864  227C 000083FE           5494  ASD_count_reg4_out                MOVE.L            #ea_D4,A1           ;load string constant into A1
0000486A  4EB8 140A               5495                                      JSR         print_first
0000486E  4EB9 000048A4           5496                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004874                          5497                                
00004874  227C 00008401           5498  ASD_count_reg5_out                MOVE.L            #ea_D5,A1           ;load string constant into A1
0000487A  4EB8 140A               5499                                      JSR         print_first
0000487E  4EB9 000048A4           5500                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004884                          5501                                
00004884  227C 00008404           5502  ASD_count_reg6_out                MOVE.L            #ea_D6,A1           ;load string constant into A1
0000488A  4EB8 140A               5503                                      JSR         print_first
0000488E  4EB9 000048A4           5504                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004894                          5505                                
00004894  227C 00008407           5506  ASD_count_reg7_out                MOVE.L            #ea_D7,A1           ;load string constant into A1
0000489A  4EB8 140A               5507                                      JSR         print_first
0000489E  4EB9 000048A4           5508                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand                                    
000048A4                          5509                                      
000048A4                          5510                                      
000048A4                          5511  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
000048A4  4241                    5512  ASD_Dn0                         CLR             D1                  ;clear D1
000048A6  3200                    5513                                  MOVE.W          D0,D1
000048A8  C2BC 00000007           5514                                  AND.L           #mask_ASD_data_reg,D1   ;load data register mask for second operand
000048AE                          5515                                  
000048AE  B2BC 00000000           5516                                  CMP.L           #match_ASD_D_reg0,D1          ;check if data register is D0
000048B4  6700 0068               5517                                  BEQ             ASD_D0_out              ;if equal got to output subroutine
000048B8  6600 0002               5518                                  BNE             ASD_Dn1                 ;if ASD check D1
000048BC                          5519                                  
000048BC  B2BC 00000001           5520  ASD_Dn1                         CMP.L           #match_ASD_D_reg1,D1          ;check if data register is D0
000048C2  6700 0062               5521                                  BEQ             ASD_D1_out              ;if equal got to output subroutine
000048C6  6600 0002               5522                                  BNE             ASD_Dn2                 ;if ASD check D2
000048CA                          5523  
000048CA  B2BC 00000002           5524  ASD_Dn2                         CMP.L           #match_ASD_D_reg2,D1          ;check if data register is D0
000048D0  6700 005C               5525                                  BEQ             ASD_D2_out              ;if equal got to output subroutine
000048D4  6600 0002               5526                                  BNE             ASD_Dn3                 ;if ASD check D3
000048D8                          5527  
000048D8  B2BC 00000003           5528  ASD_Dn3                         CMP.L           #match_ASD_D_reg3,D1          ;check if data register is D0
000048DE  6700 0056               5529                                  BEQ             ASD_D3_out              ;if equal got to output subroutine
000048E2  6600 0002               5530                                  BNE             ASD_Dn4                 ;if ASD check D4
000048E6                          5531  
000048E6  B2BC 00000004           5532  ASD_Dn4                         CMP.L           #match_ASD_D_reg4,D1          ;check if data register is D0
000048EC  6700 0050               5533                                  BEQ             ASD_D4_out              ;if equal got to output subroutine
000048F0  6600 0002               5534                                  BNE             ASD_Dn5                 ;if ASD check D5
000048F4                          5535  
000048F4  B2BC 00000005           5536  ASD_Dn5                         CMP.L           #match_ASD_D_reg5,D1          ;check if data register is D0
000048FA  6700 004A               5537                                  BEQ             ASD_D5_out              ;if equal got to output subroutine
000048FE  6600 0002               5538                                  BNE             ASD_Dn6                 ;if ASD check D6
00004902                          5539  
00004902  B2BC 00000006           5540  ASD_Dn6                         CMP.L           #match_ASD_D_reg6,D1          ;check if data register is D0
00004908  6700 0044               5541                                  BEQ             ASD_D6_out              ;if equal got to output subroutine
0000490C  6600 0002               5542                                  BNE             ASD_Dn7                 ;if ASD check D7
00004910                          5543  
00004910  B2BC 00000007           5544  ASD_Dn7                         CMP.L           #match_ASD_D_reg7,D1          ;check if data register is D0
00004916  6700 003E               5545                                  BEQ             ASD_D7_out              ;if equal got to output subroutine
0000491A  6600 2602               5546                                  BNE             ERROR               :if none of the registers go to error sub routine
0000491E                          5547                                  
0000491E                          5548                                  
0000491E                          5549  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
0000491E  227C 000083F2           5550  ASD_D0_out                        MOVE.L            #ea_D0,A1           ;load string constant into A1
00004924                          5551                                                  
00004924  4E75                    5552                                   RTS                                    ;return to subroutine
00004926                          5553  
00004926  227C 000083F5           5554  ASD_D1_out                        MOVE.L            #ea_D1,A1           ;load string constant into A1
0000492C                          5555                                                  
0000492C  4E75                    5556                                    RTS                                   ;return to subroutine
0000492E                          5557  
0000492E  227C 000083F8           5558  ASD_D2_out                        MOVE.L            #ea_D2,A1           ;load string constant into A1
00004934                          5559                                                  
00004934  4E75                    5560                                    RTS                                   ;return to subroutine
00004936                          5561              
00004936  227C 000083FB           5562  ASD_D3_out                        MOVE.L            #ea_D3,A1           ;load string constant into A1
0000493C                          5563                                                  
0000493C  4E75                    5564                                    RTS                                   ;return to subroutine
0000493E                          5565  
0000493E  227C 000083FE           5566  ASD_D4_out                        MOVE.L            #ea_D4,A1           ;load string constant into A1
00004944                          5567                                                  
00004944  4E75                    5568                                    RTS                                   ;return to subroutine
00004946                          5569  
00004946  227C 00008401           5570  ASD_D5_out                        MOVE.L            #ea_D5,A1           ;load string constant into A1
0000494C                          5571                                                  
0000494C  4E75                    5572                                    RTS                                   ;return to subroutine
0000494E                          5573  
0000494E  227C 00008404           5574  ASD_D6_out                        MOVE.L            #ea_D6,A1           ;load string constant into A1
00004954                          5575                                                  
00004954  4E75                    5576                                    RTS                                   ;return to subroutine
00004956                          5577  
00004956  227C 00008407           5578  ASD_D7_out                        MOVE.L            #ea_D7,A1           ;load string constant into A1
0000495C                          5579                                                  
0000495C  4E75                    5580                                    RTS                                   ;return to subroutine
0000495E                          5581  
0000495E                          5582  
0000495E                          5583                                      
0000495E  =000000C0               5584  mask_ASD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
0000495E  =00000038               5585  mask_ASD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
0000495E  =0000003F               5586  mask_ASD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
0000495E  =0000003F               5587  mask_ASD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
0000495E  =00000020               5588  mask_ASD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
0000495E  =00000E00               5589  mask_ASD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
0000495E  =00000020               5590  mask_ASD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
0000495E  =00000007               5591  mask_ASD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
0000495E                          5592  
0000495E  =00000000               5593  match_ASD_D_reg0                                EQU             $0000               ;match for second operand data register 0
0000495E  =00000001               5594  match_ASD_D_reg1                                EQU             $0001               ;match for second operand data register 1
0000495E  =00000002               5595  match_ASD_D_reg2                                EQU             $0002               ;match for second operand data register 2
0000495E  =00000003               5596  match_ASD_D_reg3                                EQU             $0003               ;match for second operand data register 3
0000495E  =00000004               5597  match_ASD_D_reg4                                EQU             $0004               ;match for second operand data register 4
0000495E  =00000005               5598  match_ASD_D_reg5                                EQU             $0005               ;match for second operand data register 5
0000495E  =00000006               5599  match_ASD_D_reg6                                EQU             $0006               ;match for second operand data register 6
0000495E  =00000007               5600  match_ASD_D_reg7                                EQU             $0007               ;match for second operand data register 7
0000495E                          5601  
0000495E  =00000000               5602  match_ASD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
0000495E  =00000200               5603  match_ASD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
0000495E  =00000400               5604  match_ASD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
0000495E  =00000600               5605  match_ASD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
0000495E  =00000800               5606  match_ASD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
0000495E  =00000A00               5607  match_ASD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
0000495E  =00000C00               5608  match_ASD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
0000495E  =00000E00               5609  match_ASD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
0000495E                          5610  
0000495E  =00000020               5611  match_ASD_shift_reg                             EQU             $0020               ;match to for a register shift
0000495E  =00000000               5612  match_ASD_count_val0                            EQU             $0000               ;match for shift reg 0
0000495E  =00000200               5613  match_ASD_count_val1                           EQU             $0200               ;match for shift reg 1
0000495E  =00000400               5614  match_ASD_count_val2                            EQU             $0400               ;match for shift reg 2
0000495E  =00000600               5615  match_ASD_count_val3                            EQU             $0600               ;match for shift reg 3
0000495E  =00000800               5616  match_ASD_count_val4                            EQU             $0800               ;match for shift reg 4
0000495E  =00000A00               5617  match_ASD_count_val5                            EQU             $0A00               ;match for shift reg 5
0000495E  =00000C00               5618  match_ASD_count_val6                            EQU             $0C00               ;match for shift reg 6
0000495E  =00000E00               5619  match_ASD_count_val7                            EQU             $0E00               ;match for shift reg 7
0000495E                          5620  
0000495E  =00000020               5621  match_ASD_shift_count                           EQU             $0020
0000495E  =000000C0               5622  match_ASD_mem_shift                         EQU             $00C0              ;match for memory shift
0000495E  =00000010               5623  match_ASD_An_indir                          EQU             $0010              ;match for add reg indir
0000495E  =00000020               5624  match_ASD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
0000495E  =00000018               5625  match_ASD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
0000495E  =00000039               5626  match_ASD_abs_add_word                      EQU             $0039              ;match for word abs add 
0000495E  =0000003C               5627  match_ASD_abs_add_long                      EQU             $003C              ;match for long abs add
0000495E                          5628  
0000495E                          5629  
0000495E  =00000010               5630  match_ASD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
0000495E  =00000011               5631  match_ASD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
0000495E  =00000012               5632  match_ASD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
0000495E  =00000013               5633  match_ASD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
0000495E  =00000014               5634  match_ASD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
0000495E  =00000015               5635  match_ASD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
0000495E  =00000016               5636  match_ASD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
0000495E  =00000017               5637  match_ASD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
0000495E                          5638  
0000495E                          5639  
0000495E  =00000020               5640  match_ASD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
0000495E  =00000021               5641  match_ASD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
0000495E  =00000022               5642  match_ASD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
0000495E  =00000023               5643  match_ASD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
0000495E  =00000024               5644  match_ASD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
0000495E  =00000025               5645  match_ASD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
0000495E  =00000026               5646  match_ASD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
0000495E  =00000027               5647  match_ASD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
0000495E                          5648  
0000495E                          5649  
0000495E                          5650  
0000495E  =00000018               5651  match_ASD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
0000495E  =00000019               5652  match_ASD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
0000495E  =0000001A               5653  match_ASD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
0000495E  =0000001B               5654  match_ASD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
0000495E  =0000001C               5655  match_ASD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
0000495E  =0000001D               5656  match_ASD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
0000495E  =0000001E               5657  match_ASD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
0000495E  =0000001F               5658  match_ASD_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
0000495E                          5659  
0000495E                          5660  
0000495E                          5661  
0000495E                          5662  
0000495E                          5663  
0000495E                          5664  
0000495E                          5665  
0000495E                          5666  
0000495E                          5667  
0000495E                          5668  
0000495E                          5669  -------------------- end include --------------------
0000495E                          5670              INCLUDE 'JSR Subroutine.x68'
0000495E                          5671  
0000495E                          5672     
0000495E                          5673  JSR_sub                                                            ;preserve the registers, 
0000495E  C2BC 00000038           5674                                   AND.L             #mask_JSR_ea_mode,D1                                   ;move the mask to D1
00004964                          5675  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004964  B2BC 00000010           5676  JSR_add_reg_indir                CMP.L             #match_JSR_An_indir,D1                       ;check to see if mode is add reg indir
0000496A  6600 0006               5677                                   BNE               JSR_abs_add_word                                 ;if not, go check add reg indir predec 
0000496E  6700 002A               5678                                   BEQ               JSR_An_indir_reg                                  ;if equal go figure out the register           
00004972                          5679             
00004972  4282                    5680  JSR_abs_add_word                CLR.L           D2
00004974  3400                    5681                                  MOVE.W          D0,D2 
00004976  C4BC 0000003F           5682                                  AND.L             #mask_JSR_abs_add,D2                          ;load mask to determine if abs add word or long
0000497C                          5683                                   
0000497C  B4BC 00000038           5684                                   CMP.L             #match_JSR_abs_add_word,D2                    ;check if abs add word
00004982  2A18                    5685                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address 
00004984  6600 0006               5686                                   BNE               JSR_abs_add_long                                  ;if not go check abs add long
00004988  6700 00CA               5687                                   BEQ               JSR_abs_add_word_out                              ;if equal go to output
0000498C                          5688    
0000498C  B4BC 00000039           5689  JSR_abs_add_long                 CMP.L             #match_JSR_abs_add_long,D2                     ;check to see if abs add long
00004992  6700 00CA               5690                                   BEQ               JSR_abs_add_long_out                               ;if equal go to output
00004996  6600 2586               5691                                   BNE               ERROR                                         ;if not equal go to error mesage sub routine
0000499A                          5692  
0000499A                          5693  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
0000499A                          5694                                   
0000499A                          5695                       
0000499A                          5696  ;------------------Address Register Indirect-----------------------
0000499A  4282                    5697  JSR_An_indir_reg                 CLR.L      D2
0000499C  3400                    5698                                  MOVE.W  D0,D2
0000499E  C4BC 0000003F           5699                                  AND.L           #mask_JSR_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
000049A4  B4BC 00000010           5700                                   CMP.L           #match_JSR_An_indir_r0,D2              ;check reg is equal to 0
000049AA  6600 0006               5701                                   BNE             JSR_An_indir_reg1                           ;if not try reg 1
000049AE  6700 0064               5702                                   BEQ             JSR_An_indir_reg0_out                       ;if equal go to output subroutine
000049B2                          5703  
000049B2  B4BC 00000011           5704  JSR_An_indir_reg1                CMP.L           #match_JSR_An_indir_r1,D2              ;check reg is equal to 1
000049B8  6600 0006               5705                                   BNE             JSR_An_indir_reg2                           ;if not try reg 2
000049BC  6700 005E               5706                                   BEQ             JSR_An_indir_reg1_out                       ;if equal go to output subroutine
000049C0                          5707  
000049C0  B4BC 00000012           5708  JSR_An_indir_reg2                CMP.L           #match_JSR_An_indir_r2,D2              ;check reg is equal to 2
000049C6  6600 0006               5709                                   BNE             JSR_An_indir_reg3                           ;if not try reg 3
000049CA  6700 0058               5710                                   BEQ             JSR_An_indir_reg2_out                       ;if equal go to output subroutine
000049CE                          5711  
000049CE  B4BC 00000013           5712  JSR_An_indir_reg3                CMP.L           #match_JSR_An_indir_r3,D2              ;check reg is equal to 3
000049D4  6600 0006               5713                                   BNE             JSR_An_indir_reg4                           ;if not try reg 4
000049D8  6700 0052               5714                                   BEQ             JSR_An_indir_reg3_out                       ;if equal go to output subroutine
000049DC                          5715      
000049DC  B4BC 00000014           5716  JSR_An_indir_reg4                CMP.L           #match_JSR_An_indir_r4,D2              ;check reg is equal to 4
000049E2  6600 0006               5717                                   BNE             JSR_An_indir_reg5                           ;if not try reg 5
000049E6  6700 004C               5718                                   BEQ             JSR_An_indir_reg4_out                       ;if equal go to output subroutine
000049EA                          5719          
000049EA  B4BC 00000015           5720  JSR_An_indir_reg5                CMP.L           #match_JSR_An_indir_r5,D2              ;check reg is equal to 5
000049F0  6600 0006               5721                                   BNE             JSR_An_indir_reg6                           ;if not try reg 6
000049F4  6700 0046               5722                                   BEQ             JSR_An_indir_reg5_out                       ;if equal go to output subroutine
000049F8                          5723  
000049F8  B4BC 00000016           5724  JSR_An_indir_reg6                CMP.L           #match_JSR_An_indir_r6,D2              ;check reg is equal to 6
000049FE  6600 0006               5725                                   BNE             JSR_An_indir_reg7                           ;if not try reg 7
00004A02  6700 0040               5726                                   BEQ             JSR_An_indir_reg6_out                       ;if equal go to output subroutine
00004A06                          5727  
00004A06  B4BC 00000017           5728  JSR_An_indir_reg7                CMP.L           #match_JSR_An_indir_r7,D2              ;check reg is equal to 7
00004A0C  6700 003E               5729                                   BEQ             JSR_An_indir_reg7_out                       ;if equal go to output subroutine
00004A10  6600 250C               5730                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00004A14                          5731  
00004A14                          5732  ;--------------------Address Register Indirect Output-----------------------
00004A14  227C 00008432           5733  JSR_An_indir_reg0_out                       MOVE.L          #ea_indir_A0,A1                 ;load string constant into A1
00004A1A                          5734                                                                                              
00004A1A  4E75                    5735                                              RTS                                                 ;return to subroutine
00004A1C                          5736  
00004A1C  227C 00008437           5737  JSR_An_indir_reg1_out                       MOVE.L          #ea_indir_A1,A1                 ;load string constant into A1
00004A22                          5738                                                  
00004A22  4E75                    5739                                              RTS                                                 ;return to subroutine
00004A24                          5740  
00004A24  227C 0000843C           5741  JSR_An_indir_reg2_out                       MOVE.L          #ea_indir_A2,A1                 ;load string constant into A1
00004A2A                          5742                                                  
00004A2A  4E75                    5743                                              RTS                                                 ;return to subroutine
00004A2C                          5744  
00004A2C  227C 00008441           5745  JSR_An_indir_reg3_out                       MOVE.L          #ea_indir_A3,A1                 ;load string constant into A1
00004A32                          5746                                                  
00004A32  4E75                    5747                                              RTS                                                 ;return to subroutine
00004A34                          5748  
00004A34  227C 00008446           5749  JSR_An_indir_reg4_out                       MOVE.L          #ea_indir_A4,A1                 ;load string constant into A1
00004A3A                          5750                                                  
00004A3A  4E75                    5751                                              RTS                                                 ;return to subroutine
00004A3C                          5752  
00004A3C  227C 0000844B           5753  JSR_An_indir_reg5_out                       MOVE.L          #ea_indir_A5,A1                 ;load string constant into A1
00004A42                          5754                                                  
00004A42  4E75                    5755                                              RTS                                                 ;return to subroutine
00004A44                          5756  
00004A44  227C 00008450           5757  JSR_An_indir_reg6_out                       MOVE.L          #ea_indir_A6,A1                 ;load string constant into A1
00004A4A                          5758                                                  
00004A4A  4E75                    5759                                              RTS                                                 ;return to subroutine
00004A4C                          5760                                          
00004A4C  227C 00008455           5761  JSR_An_indir_reg7_out                       MOVE.L          #ea_indir_A7,A1                 ;load string constant into A1
00004A52                          5762                                                  
00004A52  4E75                    5763                                              RTS                                                 ;return to subroutine
00004A54                          5764  
00004A54                          5765  ;------------------Absolute Addressing Output-----------------------
00004A54  22FC 000084C4           5766  JSR_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00004A5A  22C5                    5767                                           MOVE.L      D5,(A1)+                           ;load address                  
00004A5C                          5768                                                  
00004A5C  4E75                    5769                                           RTS                                            :return to subroutine
00004A5E                          5770                                             
00004A5E                          5771  
00004A5E  2A18                    5772  JSR_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00004A60  22FC 000084C4           5773                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004A66  22C5                    5774                                           MOVE.L      D5,(A1)+                           ;load address                  
00004A68                          5775                                                  
00004A68  4E75                    5776                                           RTS                                            :return to subroutine                                            
00004A6A                          5777  
00004A6A                          5778  
00004A6A  =00000038               5779  mask_JSR_ea_mode                        EQU         $0038
00004A6A  =0000003F               5780  mask_JSR_abs_add                        EQU         $003F
00004A6A  =0000003F               5781  mask_JSR_ea_reg_and_mode                EQU         $003F
00004A6A  =00000E00               5782  mask_JSR_An_reg                     EQU         $0E00
00004A6A                          5783  
00004A6A  =00000000               5784  match_JSR_Dn                            EQU         $0000
00004A6A  =00000010               5785  match_JSR_An_indir                  EQU         $0010
00004A6A  =00000038               5786  match_JSR_abs_add_word              EQU         $0038
00004A6A  =00000039               5787  match_JSR_abs_add_long              EQU         $0039
00004A6A                          5788  
00004A6A  =00000000               5789  match_JSR_D0                            EQU         $0000
00004A6A  =00000001               5790  match_JSR_D1                            EQU         $0001
00004A6A  =00000002               5791  match_JSR_D2                            EQU         $0002
00004A6A  =00000003               5792  match_JSR_D3                            EQU         $0003
00004A6A  =00000004               5793  match_JSR_D4                            EQU         $0004
00004A6A  =00000005               5794  match_JSR_D5                            EQU         $0005
00004A6A  =00000006               5795  match_JSR_D6                            EQU         $0006
00004A6A  =00000007               5796  match_JSR_D7                            EQU         $0007
00004A6A                          5797  
00004A6A  =00000010               5798  match_JSR_An_indir_r0               EQU         $0010
00004A6A  =00000011               5799  match_JSR_An_indir_r1               EQU         $0011
00004A6A  =00000012               5800  match_JSR_An_indir_r2               EQU         $0012
00004A6A  =00000013               5801  match_JSR_An_indir_r3               EQU         $0013
00004A6A  =00000014               5802  match_JSR_An_indir_r4               EQU         $0014
00004A6A  =00000015               5803  match_JSR_An_indir_r5               EQU         $0015
00004A6A  =00000016               5804  match_JSR_An_indir_r6               EQU         $0016
00004A6A  =00000017               5805  match_JSR_An_indir_r7               EQU         $0017
00004A6A                          5806  
00004A6A                          5807  
00004A6A                          5808  
00004A6A                          5809  
00004A6A                          5810  
00004A6A                          5811  
00004A6A                          5812  
00004A6A                          5813  
00004A6A                          5814  -------------------- end include --------------------
00004A6A                          5815              INCLUDE 'LEA Subroutine.x68'
00004A6A                          5816  
00004A6A                          5817     
00004A6A                          5818  LEA_sub                                             ;preserve the registers, 
00004A6A  C2BC 00000038           5819                                   AND.L             #mask_LEA_ea_mode,D1                         ;move the mask to D1
00004A70                          5820  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004A70  B2BC 00000010           5821  LEA_add_reg_indir                CMP.L             #match_LEA_An_indir,D1                       ;check to see if mode is add reg indir
00004A76  6600 0006               5822                                   BNE               LEA_abs_add_word                             ;if not, go check add reg indir predec 
00004A7A  6700 002A               5823                                   BEQ               LEA_An_indir_reg                             ;if equal go figure out the register           
00004A7E                          5824             
00004A7E  4282                    5825  LEA_abs_add_word                CLR.L       D2
00004A80  3400                    5826                                  MOVE.W      D0,D2 
00004A82  C4BC 0000003F           5827                                  AND.L             #mask_LEA_abs_add,D2                         ;load mask to determine if abs add word or long
00004A88                          5828                                   
00004A88  B4BC 00000038           5829                                   CMP.L             #match_LEA_abs_add_word,D2                   ;check if abs add word
00004A8E  2A18                    5830                                   MOVE.L            (A0)+,D5                                     ;pull the next word instruction that holds the address
00004A90  6600 0006               5831                                   BNE               LEA_abs_add_long                             ;if not go check abs add long
00004A94  6700 00FA               5832                                   BEQ               LEA_abs_add_word_out                         ;if equal go to output
00004A98                          5833    
00004A98  B4BC 00000039           5834  LEA_abs_add_long                 CMP.L             #match_LEA_abs_add_long,D2                   ;check to see if abs add long
00004A9E  6700 00FE               5835                                   BEQ               LEA_abs_add_long_out                         ;if equal go to output
00004AA2  6600 247A               5836                                   BNE               ERROR                                        ;if not equal go to error mesage sub routine
00004AA6                          5837  
00004AA6                          5838  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004AA6                          5839                                  
00004AA6                          5840                                 
00004AA6                          5841  ;------------------Address Register Indirect-----------------------
00004AA6  4282                    5842  LEA_An_indir_reg                 CLR.L      D2
00004AA8  3400                    5843                                  MOVE.W      D0,D2
00004AAA  C4BC 0000003F           5844                                  AND.L           #mask_LEA_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register 
00004AB0  B4BC 00000010           5845                                   CMP.L           #match_LEA_An_indir_r0,D2              ;check reg is equal to 0
00004AB6  6600 0006               5846                                   BNE             LEA_An_indir_reg1                           ;if not try reg 1
00004ABA  6700 0064               5847                                   BEQ             LEA_An_indir_reg0_out                       ;if equal go to output subroutine
00004ABE                          5848  
00004ABE  B4BC 00000011           5849  LEA_An_indir_reg1                CMP.L           #match_LEA_An_indir_r1,D2              ;check reg is equal to 1
00004AC4  6600 0006               5850                                   BNE             LEA_An_indir_reg2                           ;if not try reg 2
00004AC8  6700 0064               5851                                   BEQ             LEA_An_indir_reg1_out                       ;if equal go to output subroutine
00004ACC                          5852  
00004ACC  B4BC 00000012           5853  LEA_An_indir_reg2                CMP.L           #match_LEA_An_indir_r2,D2              ;check reg is equal to 2
00004AD2  6600 0006               5854                                   BNE             LEA_An_indir_reg3                           ;if not try reg 3
00004AD6  6700 0064               5855                                   BEQ             LEA_An_indir_reg2_out                       ;if equal go to output subroutine
00004ADA                          5856  
00004ADA  B4BC 00000013           5857  LEA_An_indir_reg3                CMP.L           #match_LEA_An_indir_r3,D2              ;check reg is equal to 3
00004AE0  6600 0006               5858                                   BNE             LEA_An_indir_reg4                           ;if not try reg 4
00004AE4  6700 0064               5859                                   BEQ             LEA_An_indir_reg3_out                       ;if equal go to output subroutine
00004AE8                          5860      
00004AE8  B4BC 00000014           5861  LEA_An_indir_reg4                CMP.L           #match_LEA_An_indir_r4,D2              ;check reg is equal to 4
00004AEE  6600 0006               5862                                   BNE             LEA_An_indir_reg5                           ;if not try reg 5
00004AF2  6700 0064               5863                                   BEQ             LEA_An_indir_reg4_out                       ;if equal go to output subroutine
00004AF6                          5864          
00004AF6  B4BC 00000015           5865  LEA_An_indir_reg5                CMP.L           #match_LEA_An_indir_r5,D2              ;check reg is equal to 5
00004AFC  6600 0006               5866                                   BNE             LEA_An_indir_reg6                           ;if not try reg 6
00004B00  6700 0064               5867                                   BEQ             LEA_An_indir_reg5_out                       ;if equal go to output subroutine
00004B04                          5868  
00004B04  B4BC 00000016           5869  LEA_An_indir_reg6                CMP.L           #match_LEA_An_indir_r6,D2              ;check reg is equal to 6
00004B0A  6600 0006               5870                                   BNE             LEA_An_indir_reg7                           ;if not try reg 7
00004B0E  6700 0064               5871                                   BEQ             LEA_An_indir_reg6_out                       ;if equal go to output subroutine
00004B12                          5872  
00004B12  B4BC 00000017           5873  LEA_An_indir_reg7                CMP.L           #match_LEA_An_indir_r7,D2              ;check reg is equal to 7
00004B18  6700 0068               5874                                   BEQ             LEA_An_indir_reg7_out                       ;if equal go to output subroutine
00004B1C  6600 2400               5875                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00004B20                          5876  
00004B20                          5877  ;--------------------Address Register Indirect Output-----------------------
00004B20  227C 00008432           5878  LEA_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00004B26  4EB9 00004BAE           5879                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004B2C  4E75                    5880                                          RTS
00004B2E                          5881  
00004B2E  227C 00008437           5882  LEA_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00004B34  4EB9 00004BAE           5883                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004B3A  4E75                    5884                                          RTS
00004B3C                          5885  
00004B3C  227C 0000843C           5886  LEA_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00004B42  4EB9 00004BAE           5887                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004B48  4E75                    5888                                          RTS
00004B4A                          5889  
00004B4A  227C 00008441           5890  LEA_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00004B50  4EB9 00004BAE           5891                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004B56  4E75                    5892                                          RTS
00004B58                          5893  
00004B58  227C 00008446           5894  LEA_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00004B5E  4EB9 00004BAE           5895                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004B64  4E75                    5896                                          RTS
00004B66                          5897  
00004B66  227C 0000844B           5898  LEA_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00004B6C  4EB9 00004BAE           5899                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004B72  4E75                    5900                                          RTS
00004B74                          5901  
00004B74  227C 00008450           5902  LEA_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00004B7A  4EB9 00004BAE           5903                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004B80  4E75                    5904                                          RTS
00004B82                          5905                                          
00004B82  227C 00008455           5906  LEA_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00004B88  4EB9 00004BAE           5907                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004B8E  4E75                    5908                                          RTS
00004B90                          5909  ;------------------Absolute Addressing Output-----------------------
00004B90  22FC 000084C4           5910  LEA_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004B96  22C5                    5911                                           MOVE.L      D5,(A1)+                           ;load address                  
00004B98  4EB9 00004BAE           5912                                           JSR         LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004B9E                          5913                                             
00004B9E                          5914  
00004B9E  2A18                    5915  LEA_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00004BA0  22FC 000084C4           5916                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004BA6  22C5                    5917                                           MOVE.L      D5,(A1)+                           ;load address                  
00004BA8  4EB9 00004BAE           5918                                           JSR         LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004BAE                          5919                                                
00004BAE                          5920  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00004BAE  4282                    5921  LEA_determine_second_op                         CLR.L       D2                                              ;clear D2 
00004BB0  3400                    5922                                                  MOVE.W      D0,D2
00004BB2  C4BC 00000E00           5923                                                  AND.L       #mask_LEA_An_reg,D2                             ;load the mask for the register into D2, masks bit 11-9
00004BB8                          5924                                                  
00004BB8  B4BC 00000000           5925  LEA_reg0                                        CMP.L       #match_LEA_reg0,D2                              ;check to see if reg equal 0
00004BBE  6600 0006               5926                                                  BNE         LEA_reg1                                        ;if not equal got check reg 1
00004BC2  6700 0064               5927                                                  BEQ         LEA_reg0_out                                    ;if equal go to output
00004BC6                          5928                                                  
00004BC6  B4BC 00000200           5929  LEA_reg1                                        CMP.L       #match_LEA_reg1,D2                              ;check to see if reg equal 1
00004BCC  6600 0006               5930                                                  BNE         LEA_reg2                                        ;if not equal got check reg 2
00004BD0  6700 005E               5931                                                  BEQ         LEA_reg1_out                                    ;if equal go to output
00004BD4                          5932  
00004BD4  B4BC 00000400           5933  LEA_reg2                                        CMP.L       #match_LEA_reg2,D2                              ;check to see if reg equal 2
00004BDA  6600 0006               5934                                                  BNE         LEA_reg3                                        ;if not equal got check reg 3
00004BDE  6700 0058               5935                                                  BEQ         LEA_reg2_out                                    ;if equal go to output
00004BE2                          5936  
00004BE2  B4BC 00000600           5937  LEA_reg3                                        CMP.L       #match_LEA_reg3,D2                              ;check to see if reg equal 3
00004BE8  6600 0006               5938                                                  BNE         LEA_reg4                                        ;if not equal got check reg 4
00004BEC  6700 0052               5939                                                  BEQ         LEA_reg3_out                                    ;if equal go to output
00004BF0                          5940                                                  
00004BF0  B4BC 00000800           5941  LEA_reg4                                        CMP.L       #match_LEA_reg4,D2                              ;check to see if reg equal 4
00004BF6  6600 0006               5942                                                  BNE         LEA_reg5                                        ;if not equal got check reg 5
00004BFA  6700 004C               5943                                                  BEQ         LEA_reg4_out                                    ;if equal go to output
00004BFE                          5944  
00004BFE  B4BC 00000A00           5945  LEA_reg5                                        CMP.L       #match_LEA_reg5,D2                              ;check to see if reg equal 5
00004C04  6600 0006               5946                                                  BNE         LEA_reg6                                        ;if not equal got check reg 6
00004C08  6700 0046               5947                                                  BEQ         LEA_reg5_out                                    ;if equal go to output
00004C0C                          5948  
00004C0C  B4BC 00000C00           5949  LEA_reg6                                        CMP.L       #match_LEA_reg6,D2                              ;check to see if reg equal 6
00004C12  6600 0006               5950                                                  BNE         LEA_reg7                                        ;if not equal got check reg 7
00004C16  6700 0040               5951                                                  BEQ         LEA_reg6_out                                    ;if equal go to output          
00004C1A                          5952  
00004C1A  B4BC 00000E00           5953  LEA_reg7                                        CMP.L       #match_LEA_reg7,D2                              ;check to see if reg equal 7
00004C20  6700 003E               5954                                                  BEQ         LEA_reg7_out                                    ;if equal go to output
00004C24  6600 22F8               5955                                                  BNE         ERROR                                                       ;if not equal to an addresssing mode, pritn error
00004C28                          5956                                  
00004C28                          5957  
00004C28                          5958  ;--------------------Data Output-----------------------
00004C28  227C 0000840A           5959  LEA_reg0_out                                MOVE.L          #ea_A0,A1                                          ;load string constant into A1
00004C2E                          5960                                  
00004C2E  4E75                    5961                                              RTS
00004C30                          5962                                              
00004C30  227C 0000840D           5963  LEA_reg1_out                                MOVE.L          #ea_A1,A1                                       ;load string constant into A1
00004C36                          5964                                  
00004C36  4E75                    5965                                              RTS
00004C38                          5966                                              
00004C38  227C 00008410           5967  LEA_reg2_out                                MOVE.L          #ea_A2,A1                                       ;load string constant into A1
00004C3E                          5968                                  
00004C3E  4E75                    5969                                              RTS
00004C40                          5970                                              
00004C40  227C 00008413           5971  LEA_reg3_out                                MOVE.L          #ea_A3,A1                                           ;load string constant into A1
00004C46                          5972                                  
00004C46  4E75                    5973                                              RTS
00004C48                          5974                                              
00004C48  227C 00008416           5975  LEA_reg4_out                                MOVE.L          #ea_A4,A1                                           ;load string constant into A1
00004C4E                          5976                                  
00004C4E  4E75                    5977                                              RTS
00004C50                          5978                                              
00004C50  227C 00008419           5979  LEA_reg5_out                                MOVE.L          #ea_A5,A1                                           ;load string constant into A1
00004C56                          5980                                  
00004C56  4E75                    5981                                              RTS
00004C58                          5982                                              
00004C58  227C 0000841C           5983  LEA_reg6_out                                MOVE.L          #ea_A6,A1                                           ;load string constant into A1
00004C5E                          5984                                  
00004C5E  4E75                    5985                                              RTS
00004C60                          5986                                              
00004C60  227C 0000841F           5987  LEA_reg7_out                                MOVE.L          #ea_A7,A1                                           ;load string constant into A1
00004C66                          5988                                  
00004C66  4E75                    5989                                              RTS             
00004C68                          5990  
00004C68  =00000038               5991  mask_LEA_ea_mode                        EQU         $0038
00004C68  =0000003F               5992  mask_LEA_abs_add                        EQU         $003F
00004C68  =0000003F               5993  mask_LEA_ea_reg_and_mode                EQU         $003F
00004C68  =00000E00               5994  mask_LEA_An_reg                     EQU         $0E00
00004C68                          5995  
00004C68  =00000010               5996  match_LEA_An_indir                      EQU         $0010
00004C68  =00000038               5997  match_LEA_abs_add_word                  EQU         $0038
00004C68  =00000039               5998  match_LEA_abs_add_long                  EQU         $0039
00004C68                          5999  
00004C68  =00000010               6000  match_LEA_An_indir_r0                   EQU         $0010
00004C68  =00000011               6001  match_LEA_An_indir_r1                   EQU         $0011
00004C68  =00000012               6002  match_LEA_An_indir_r2                   EQU         $0012
00004C68  =00000013               6003  match_LEA_An_indir_r3                   EQU         $0013
00004C68  =00000014               6004  match_LEA_An_indir_r4                   EQU         $0014
00004C68  =00000015               6005  match_LEA_An_indir_r5                   EQU         $0015
00004C68  =00000016               6006  match_LEA_An_indir_r6                   EQU         $0016
00004C68  =00000017               6007  match_LEA_An_indir_r7                   EQU         $0017
00004C68                          6008  
00004C68  =0000003C               6009  match_imm_add                           EQU         $003C
00004C68  =000000FC               6010  match_imm_add_word                      EQU         $00FC
00004C68  =000001FC               6011  match_imm_add_long                      EQU         $01FC
00004C68                          6012  
00004C68  =00000000               6013  match_LEA_reg0                          EQU         $0000
00004C68  =00000200               6014  match_LEA_reg1                          EQU         $0200
00004C68  =00000400               6015  match_LEA_reg2                          EQU         $0400
00004C68  =00000600               6016  match_LEA_reg3                          EQU         $0600
00004C68  =00000800               6017  match_LEA_reg4                          EQU         $0800
00004C68  =00000A00               6018  match_LEA_reg5                          EQU         $0A00
00004C68  =00000C00               6019  match_LEA_reg6                          EQU         $0C00
00004C68  =00000E00               6020  match_LEA_reg7                          EQU         $0E00
00004C68                          6021  
00004C68                          6022  
00004C68                          6023  
00004C68                          6024  
00004C68                          6025  
00004C68                          6026  
00004C68                          6027  
00004C68                          6028  
00004C68                          6029  
00004C68                          6030  
00004C68                          6031  
00004C68                          6032  -------------------- end include --------------------
00004C68                          6033              INCLUDE 'MOVE Subroutine.x68'
00004C68                          6034    
00004C68                          6035  MOVE_sub                                                       ;preserve the registers, 
00004C68                          6036  
00004C68  C2BC 00000038           6037                                  AND.L             #mask_MOVE_src_ea_mode,D1                          ;move the mask to D1
00004C6E                          6038  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004C6E  B2BC 00000000           6039  MOVE_data_reg_dir               CMP.L             #match_MOVE_src_Dn,D1                              ;check to see if mode is data reg direct
00004C74  6600 0006               6040                                   BNE               MOVE_add_reg_indir                             ;if not, go check add reg dir
00004C78  6700 0050               6041                                   BEQ               MOVE_Dn_reg                                  ;if equal go figure out the register
00004C7C                          6042  
00004C7C  B2BC 00000010           6043  MOVE_add_reg_indir              CMP.L             #match_MOVE_src_An_indir,D1                        ;check to see if mode is add reg indir
00004C82  6600 0006               6044                                   BNE               MOVE_add_reg_indir_predec                    ;if not, go check add reg indir predec 
00004C86  6700 014C               6045                                   BEQ               MOVE_An_indir_reg                            ;if equal go figure out the register           
00004C8A                          6046             
00004C8A  B2BC 00000020           6047  MOVE_add_reg_indir_predec       CMP.L             #match_MOVE_src_An_indir_predec,D1                  ;check to see if mode is add reg indor w/ postinc
00004C90  6600 0006               6048                                   BNE               MOVE_add_reg_indir_postinc                    ;if not go check add reg indir/predec
00004C94  6700 0352               6049                                   BEQ               MOVE_An_indir_predec                          ;if equal go figure out the register
00004C98                          6050                        
00004C98  B2BC 00000018           6051  MOVE_add_reg_indir_postinc      CMP.L             #match_MOVE_src_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00004C9E  6600 0006               6052                                   BNE               MOVE_abs_add_word                                  ;if not go check abs add word
00004CA2  6700 023A               6053                                   BEQ               MOVE_An_indir_postinc_reg                          ;if equal go figure out the register
00004CA6                          6054  
00004CA6  C4BC 0000003F           6055  MOVE_abs_add_word               AND.L             #mask_MOVE_src_abs_add,D2                        ;load mask to determine if abs add word or long
00004CAC                          6056                                   
00004CAC  B4BC 00000038           6057                                   CMP.L             #match_MOVE_src_abs_add_word,D2                  ;check if abs add word
00004CB2  2A18                    6058                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00004CB4  6600 0006               6059                                   BNE               MOVE_abs_add_long                                  ;if not go check abs add long
00004CB8  6700 0438               6060                                   BEQ               MOVE_abs_add_word_out                              ;if equal go to output
00004CBC                          6061    
00004CBC  B4BC 00000039           6062  MOVE_abs_add_long               CMP.L             #match_MOVE_src_abs_add_long,D2                  ;check to see if abs add long
00004CC2  6700 0438               6063                                   BEQ               MOVE_abs_add_long_out                              ;if equal go to output
00004CC6  6600 2256               6064                                   BNE               ERROR                                         ;if not equal go to error mesage MOVE routine
00004CCA                          6065  
00004CCA                          6066  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004CCA                          6067                                   
00004CCA                          6068                                                         ;load the mask into D2 for the mode and the register
00004CCA                          6069  ;-----------------------------------Data Register Direct--------------------------------
00004CCA  4282                    6070  MOVE_Dn_reg                     CLR.L   D2
00004CCC  3400                    6071                                  MOVE.W  D0,D2
00004CCE  C4BC 0000003F           6072                                  AND.L              #mask_MOVE_src_ea_reg_and_mode,D2 
00004CD4  B4BC 00000000           6073                                  CMP.L              #match_MOVE_src_D0,D2                       ;check to see in the register is 0
00004CDA  6600 0006               6074                                   BNE                MOVE_rD1                                     ;if not go check register 1
00004CDE  6700 0064               6075                                   BEQ                MOVE_D0_out                              ;if equal go to output MOVEroutine
00004CE2                          6076  
00004CE2  B4BC 00000001           6077  MOVE_rD1                        CMP.L              #match_MOVE_src_D1,D2                       ;check to see in the register is 1
00004CE8  6600 0006               6078                                   BNE                MOVE_rD2                                     ;if not go check register 2
00004CEC  6700 0068               6079                                   BEQ                MOVE_D1_out                              ;if equal go to output MOVEroutine
00004CF0                          6080  
00004CF0  B4BC 00000002           6081  MOVE_rD2                        CMP.L              #match_MOVE_src_D2,D2                       ;check to see in the register is 2
00004CF6  6600 0006               6082                                   BNE                MOVE_rD3                                     ;if not go check register 3
00004CFA  6700 006C               6083                                   BEQ                MOVE_D2_out                              ;if equal go to output MOVEroutine
00004CFE                          6084  
00004CFE  B4BC 00000003           6085  MOVE_rD3                        CMP.L              #match_MOVE_src_D3,D2                       ;check to see in the register is 3
00004D04  6600 0006               6086                                   BNE                MOVE_rD4                                     ;if not go check register 4
00004D08  6700 0070               6087                                   BEQ                MOVE_D3_out                              ;if equal go to output MOVEroutine
00004D0C                          6088  
00004D0C  B4BC 00000004           6089  MOVE_rD4                        CMP.L              #match_MOVE_src_D4,D2                       ;check to see in the register is 4
00004D12  6600 0006               6090                                   BNE                MOVE_rD5                                     ;if not go check register 5
00004D16  6700 0074               6091                                   BEQ                MOVE_D4_out                              ;if equal go to output MOVEroutine
00004D1A                          6092  
00004D1A  B4BC 00000005           6093  MOVE_rD5                        CMP.L              #match_MOVE_src_D5,D2                       ;check to see in the register is 5
00004D20  6600 0006               6094                                   BNE                MOVE_rD6                                     ;if not go check register 6
00004D24  6700 0078               6095                                   BEQ                MOVE_D5_out                              ;if equal go to output MOVEroutine
00004D28                          6096  
00004D28  B4BC 00000006           6097  MOVE_rD6                        CMP.L              #match_MOVE_src_D6,D2                       ;check to see in the register is 6
00004D2E  6600 0006               6098                                   BNE                MOVE_rD7                                     ;if not go check register 7
00004D32  6700 007C               6099                                   BEQ                MOVE_D6_out                              ;if equal go to output MOVEroutine
00004D36                          6100  
00004D36  B4BC 00000007           6101  MOVE_rD7                        CMP.L              #match_MOVE_src_D7,D2                       ;check to see in the register is 7
00004D3C  6700 0084               6102                                   BEQ                MOVE_D7_out                              ;if equal go to output MOVEroutine
00004D40  6600 21DC               6103                                   BNE                ERROR                               ;if not equal, got to error message
00004D44                          6104  ;--------------------Data Register Direct Output-----------------------
00004D44  227C 000083F2           6105  MOVE_D0_out                    MOVE.L          #ea_D0,A1                            ;load string constant into A1
00004D4A  4EB8 140A               6106                                  JSR             print_first
00004D4E  4EB9 00005108           6107                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D54  4E75                    6108                                  RTS
00004D56                          6109                                  
00004D56  227C 000083F5           6110  MOVE_D1_out                    MOVE.L          #ea_D1,A1                            ;load string constant into A1
00004D5C  4EB8 140A               6111                                  JSR             print_first
00004D60  4EB9 00005108           6112                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D66  4E75                    6113                                  RTS
00004D68                          6114  
00004D68  227C 000083F8           6115  MOVE_D2_out                    MOVE.L          #ea_D2,A1                            ;load string constant into A1
00004D6E  4EB8 140A               6116                                  JSR             print_first
00004D72  4EB9 00005108           6117                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D78  4E75                    6118                                  RTS
00004D7A                          6119                                  
00004D7A  227C 000083FB           6120  MOVE_D3_out                    MOVE.L           #ea_D3,A1                           ;load string constant into A1
00004D80  4EB8 140A               6121                                  JSR             print_first
00004D84  4EB9 00005108           6122                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D8A  4E75                    6123                                  RTS
00004D8C                          6124  
00004D8C  227C 000083FE           6125  MOVE_D4_out                    MOVE.L           #ea_D4,A1                           ;load string constant into A1
00004D92  4EB8 140A               6126                                  JSR             print_first
00004D96  4EB9 00005108           6127                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D9C  4E75                    6128                                  RTS
00004D9E                          6129  
00004D9E  227C 00008401           6130  MOVE_D5_out                    MOVE.L           #ea_D5,A1                           ;load string constant into A1
00004DA4  4EB8 140A               6131                                  JSR             print_first
00004DA8  4EB9 00005108           6132                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004DAE  4E75                    6133                                  RTS
00004DB0                          6134  
00004DB0  227C 00008404           6135  MOVE_D6_out                    MOVE.L           #ea_D6,A1                           ;load string constant into A1
00004DB6  4EB8 140A               6136                                  JSR             print_first
00004DBA  4EB9 00005108           6137                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004DC0  4E75                    6138                                  RTS
00004DC2                          6139  
00004DC2  227C 00008407           6140  MOVE_D7_out                    MOVE.L           #ea_D7,A1                           ;load string constant into A1
00004DC8  4EB8 140A               6141                                  JSR             print_first
00004DCC  4EB9 00005108           6142                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004DD2  4E75                    6143                                  RTS
00004DD4                          6144  ;------------------Address Register Indirect-----------------------
00004DD4  4282                    6145  MOVE_An_indir_reg               CLR.L   D2
00004DD6  3400                    6146                                  MOVE.W  D0,D2
00004DD8  C4BC 0000003F           6147                                  AND.L              #mask_MOVE_src_ea_reg_and_mode,D2 
00004DDE  B4BC 00000010           6148                                  CMP.L          #match_MOVE_src_An_indir_r0,D2              ;check reg is equal to 0
00004DE4  6600 0006               6149                                   BNE             MOVE_An_indir_reg1                           ;if not try reg 1
00004DE8  6700 0064               6150                                   BEQ             MOVE_An_indir_reg0_out                       ;if equal go to output MOVEroutine
00004DEC                          6151  
00004DEC  B4BC 00000011           6152  MOVE_An_indir_reg1              CMP.L           #match_MOVE_src_An_indir_r1,D2              ;check reg is equal to 1
00004DF2  6600 0006               6153                                   BNE             MOVE_An_indir_reg2                           ;if not try reg 2
00004DF6  6700 0068               6154                                   BEQ             MOVE_An_indir_reg1_out                       ;if equal go to output MOVEroutine
00004DFA                          6155  
00004DFA  B4BC 00000012           6156  MOVE_An_indir_reg2              CMP.L           #match_MOVE_src_An_indir_r2,D2              ;check reg is equal to 2
00004E00  6600 0006               6157                                   BNE             MOVE_An_indir_reg3                           ;if not try reg 3
00004E04  6700 006C               6158                                   BEQ             MOVE_An_indir_reg2_out                       ;if equal go to output MOVEroutine
00004E08                          6159  
00004E08  B4BC 00000013           6160  MOVE_An_indir_reg3              CMP.L           #match_MOVE_src_An_indir_r3,D2              ;check reg is equal to 3
00004E0E  6600 0006               6161                                   BNE             MOVE_An_indir_reg4                           ;if not try reg 4
00004E12  6700 0070               6162                                   BEQ             MOVE_An_indir_reg3_out                       ;if equal go to output MOVEroutine
00004E16                          6163      
00004E16  B4BC 00000014           6164  MOVE_An_indir_reg4              CMP.L           #match_MOVE_src_An_indir_r4,D2              ;check reg is equal to 4
00004E1C  6600 0006               6165                                   BNE             MOVE_An_indir_reg5                           ;if not try reg 5
00004E20  6700 0074               6166                                   BEQ             MOVE_An_indir_reg4_out                       ;if equal go to output MOVEroutine
00004E24                          6167          
00004E24  B4BC 00000015           6168  MOVE_An_indir_reg5              CMP.L           #match_MOVE_src_An_indir_r5,D2              ;check reg is equal to 5
00004E2A  6600 0006               6169                                   BNE             MOVE_An_indir_reg6                           ;if not try reg 6
00004E2E  6700 0078               6170                                   BEQ             MOVE_An_indir_reg5_out                       ;if equal go to output MOVEroutine
00004E32                          6171  
00004E32  B4BC 00000016           6172  MOVE_An_indir_reg6              CMP.L           #match_MOVE_src_An_indir_r6,D2              ;check reg is equal to 6
00004E38  6600 0006               6173                                   BNE             MOVE_An_indir_reg7                           ;if not try reg 7
00004E3C  6700 007C               6174                                   BEQ             MOVE_An_indir_reg6_out                       ;if equal go to output MOVEroutine
00004E40                          6175  
00004E40  B4BC 00000017           6176  MOVE_An_indir_reg7              CMP.L           #match_MOVE_src_An_indir_r7,D2              ;check reg is equal to 7
00004E46  6700 0084               6177                                   BEQ             MOVE_An_indir_reg7_out                       ;if equal go to output MOVEroutine
00004E4A  6600 20D2               6178                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00004E4E                          6179  
00004E4E                          6180  ;--------------------Address Register Indirect Output-----------------------
00004E4E  227C 00008432           6181  MOVE_An_indir_reg0_out                 MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
00004E54  4EB8 140A               6182                                  JSR             print_first
00004E58  4EB9 00005108           6183                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004E5E  4E75                    6184                                          RTS
00004E60                          6185                                          
00004E60  227C 00008437           6186  MOVE_An_indir_reg1_out                 MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
00004E66  4EB8 140A               6187                                  JSR             print_first
00004E6A  4EB9 00005108           6188                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004E70  4E75                    6189                                          RTS
00004E72                          6190                                          
00004E72  227C 0000843C           6191  MOVE_An_indir_reg2_out                 MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
00004E78  4EB8 140A               6192                                  JSR             print_first
00004E7C  4EB9 00005108           6193                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004E82  4E75                    6194                                          RTS
00004E84                          6195                                          
00004E84  227C 00008441           6196  MOVE_An_indir_reg3_out                 MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
00004E8A  4EB8 140A               6197                                  JSR             print_first
00004E8E  4EB9 00005108           6198                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004E94  4E75                    6199                                          RTS
00004E96                          6200                                          
00004E96  227C 00008446           6201  MOVE_An_indir_reg4_out                 MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
00004E9C  4EB8 140A               6202                                  JSR             print_first
00004EA0  4EB9 00005108           6203                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004EA6  4E75                    6204                                          RTS
00004EA8                          6205                                          
00004EA8  227C 0000844B           6206  MOVE_An_indir_reg5_out                 MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
00004EAE  4EB8 140A               6207                                  JSR             print_first
00004EB2  4EB9 00005108           6208                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004EB8  4E75                    6209                                          RTS
00004EBA                          6210                                          
00004EBA  227C 00008450           6211  MOVE_An_indir_reg6_out                 MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
00004EC0  4EB8 140A               6212                                  JSR             print_first
00004EC4  4EB9 00005108           6213                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004ECA  4E75                    6214                                          RTS
00004ECC                          6215                                          
00004ECC  227C 00008455           6216  MOVE_An_indir_reg7_out                 MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
00004ED2  4EB8 140A               6217                                  JSR             print_first
00004ED6  4EB9 00005108           6218                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004EDC  4E75                    6219                                          RTS
00004EDE                          6220  ;------------------Address Register Indirect with Post Increment-----------------------
00004EDE  4282                    6221  MOVE_An_indir_postinc_reg                  CLR.L   D2
00004EE0  3400                    6222                                              MOVE.W  D0,D2
00004EE2  C4BC 0000003F           6223                                              AND.L              #mask_MOVE_src_ea_reg_and_mode,D2 
00004EE8  B4BC 00000018           6224                                              CMP.L      #match_MOVE_src_An_indir_pinc_r0,D2        ;check reg is equal to 0
00004EEE  6600 0006               6225                                              BNE        MOVE_An_indir_postinc_reg1                      ;if not try reg 1
00004EF2  6700 0064               6226                                              BEQ        MOVE_An_indir_postinc_reg0_out               ;if equal go to output MOVEroutine
00004EF6                          6227  
00004EF6  B4BC 00000019           6228  MOVE_An_indir_postinc_reg1                 CMP.L      #match_MOVE_src_An_indir_pinc_r1,D2        ;check reg is equal to 1
00004EFC  6600 0006               6229                                              BNE        MOVE_An_indir_postinc_reg2                      ;if not try reg 2
00004F00  6700 0068               6230                                              BEQ        MOVE_An_indir_postinc_reg1_out               ;if equal go to output MOVEroutine
00004F04                          6231  
00004F04  B4BC 0000001A           6232  MOVE_An_indir_postinc_reg2                 CMP.L      #match_MOVE_src_An_indir_pinc_r2,D2        ;check reg is equal to 2
00004F0A  6600 0006               6233                                              BNE        MOVE_An_indir_postinc_reg3                      ;if not try reg 3
00004F0E  6700 006C               6234                                              BEQ        MOVE_An_indir_postinc_reg2_out               ;if equal go to output MOVEroutine
00004F12                          6235  
00004F12  B4BC 0000001B           6236  MOVE_An_indir_postinc_reg3                 CMP.L      #match_MOVE_src_An_indir_pinc_r3,D2        ;check reg is equal to 3
00004F18  6600 0006               6237                                              BNE        MOVE_An_indir_postinc_reg4                      ;if not try reg 4
00004F1C  6700 0070               6238                                              BEQ        MOVE_An_indir_postinc_reg3_out               ;if equal go to output MOVEroutine
00004F20                          6239   
00004F20  B4BC 0000001C           6240  MOVE_An_indir_postinc_reg4                 CMP.L      #match_MOVE_src_An_indir_pinc_r4,D2        ;check reg is equal to 4
00004F26  6600 0006               6241                                              BNE        MOVE_An_indir_postinc_reg5                      ;if not try reg 5
00004F2A  6700 0074               6242                                              BEQ        MOVE_An_indir_postinc_reg4_out               ;if equal go to output MOVEroutine
00004F2E                          6243  
00004F2E  B4BC 0000001D           6244  MOVE_An_indir_postinc_reg5                 CMP.L      #match_MOVE_src_An_indir_pinc_r5,D2        ;check reg is equal to 5
00004F34  6600 0006               6245                                              BNE        MOVE_An_indir_postinc_reg6                      ;if not try reg 6
00004F38  6700 0078               6246                                              BEQ        MOVE_An_indir_postinc_reg5_out               ;if equal go to output MOVEroutine
00004F3C                          6247  
00004F3C  B4BC 0000001E           6248  MOVE_An_indir_postinc_reg6                 CMP.L      #match_MOVE_src_An_indir_pinc_r6,D2         ;check reg is equal to 6
00004F42  6600 0006               6249                                              BNE        MOVE_An_indir_postinc_reg7                        ;if not try reg 7
00004F46  6700 007C               6250                                              BEQ        MOVE_An_indir_postinc_reg6_out                    ;if equal go to output MOVEroutine
00004F4A                          6251  
00004F4A  B4BC 0000001F           6252  MOVE_An_indir_postinc_reg7                 CMP.L      #match_MOVE_src_An_indir_pinc_r7,D2         ;check reg is equal to 7
00004F50  6700 0084               6253                                              BEQ        MOVE_An_indir_postinc_reg7_out                    ;if equal go to output MOVEroutine
00004F54  6600 1FC8               6254                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
00004F58                          6255  
00004F58                          6256  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00004F58  227C 0000845A           6257  MOVE_An_indir_postinc_reg0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00004F5E  4EB8 140A               6258                                  JSR             print_first
00004F62  4EB9 00005108           6259                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004F68  4E75                    6260                                               RTS
00004F6A                          6261                                               
00004F6A  227C 00008460           6262  MOVE_An_indir_postinc_reg1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00004F70  4EB8 140A               6263                                  JSR             print_first
00004F74  4EB9 00005108           6264                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004F7A  4E75                    6265                                               RTS
00004F7C                          6266                                               
00004F7C  227C 00008466           6267  MOVE_An_indir_postinc_reg2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00004F82  4EB8 140A               6268                                  JSR             print_first
00004F86  4EB9 00005108           6269                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004F8C  4E75                    6270                                               RTS
00004F8E                          6271                                               
00004F8E  227C 0000846C           6272  MOVE_An_indir_postinc_reg3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00004F94  4EB8 140A               6273                                  JSR             print_first
00004F98  4EB9 00005108           6274                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004F9E  4E75                    6275                                               RTS
00004FA0                          6276                                               
00004FA0  227C 00008472           6277  MOVE_An_indir_postinc_reg4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00004FA6  4EB8 140A               6278                                  JSR             print_first
00004FAA  4EB9 00005108           6279                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004FB0  4E75                    6280                                               RTS
00004FB2                          6281                                               
00004FB2  227C 00008478           6282  MOVE_An_indir_postinc_reg5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00004FB8  4EB8 140A               6283                                  JSR             print_first
00004FBC  4EB9 00005108           6284                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004FC2  4E75                    6285                                               RTS
00004FC4                          6286                                               
00004FC4  227C 0000847E           6287  MOVE_An_indir_postinc_reg6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00004FCA  4EB8 140A               6288                                  JSR             print_first
00004FCE  4EB9 00005108           6289                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004FD4  4E75                    6290                                               RTS
00004FD6                          6291                                               
00004FD6  227C 00008484           6292  MOVE_An_indir_postinc_reg7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00004FDC  4EB8 140A               6293                                  JSR             print_first
00004FE0  4EB9 00005108           6294                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004FE6  4E75                    6295                                               RTS
00004FE8                          6296                                               
00004FE8                          6297  ;------------------Address Register Indirect with Pre Decrement-----------------------
00004FE8  4282                    6298  MOVE_An_indir_predec                       CLR.L   D2
00004FEA  3400                    6299                                               MOVE.W  D0,D2
00004FEC  C4BC 0000003F           6300                                              AND.L              #mask_MOVE_src_ea_reg_and_mode,D2 
00004FF2  B4BC 00000020           6301                                              CMP.L      #match_MOVE_src_An_indir_prede_r0,D2       ;check reg is equal to 0
00004FF8  6600 0006               6302                                              BNE        MOVE_An_indir_predec_reg1                      ;if not try reg 1
00004FFC  6700 0064               6303                                              BEQ        MOVE_An_indir_predec_reg0_out               ;if equal go to output MOVEroutine
00005000                          6304  
00005000  B4BC 00000021           6305  MOVE_An_indir_predec_reg1                  CMP.L      #match_MOVE_src_An_indir_prede_r1,D2       ;check reg is equal to 1
00005006  6600 0006               6306                                              BNE        MOVE_An_indir_predec_reg2                      ;if not try reg 2
0000500A  6700 0068               6307                                              BEQ        MOVE_An_indir_predec_reg1_out               ;if equal go to output MOVEroutine
0000500E                          6308  
0000500E  B4BC 00000022           6309  MOVE_An_indir_predec_reg2                  CMP.L      #match_MOVE_src_An_indir_prede_r2,D2       ;check reg is equal to 2
00005014  6600 0006               6310                                              BNE        MOVE_An_indir_predec_reg3                      ;if not try reg 3
00005018  6700 006C               6311                                              BEQ        MOVE_An_indir_predec_reg2_out               ;if equal go to output MOVEroutine
0000501C                          6312  
0000501C  B4BC 00000023           6313  MOVE_An_indir_predec_reg3                  CMP.L      #match_MOVE_src_An_indir_prede_r3,D2       ;check reg is equal to 3
00005022  6600 0006               6314                                              BNE        MOVE_An_indir_predec_reg4                      ;if not try reg 4
00005026  6700 0070               6315                                              BEQ        MOVE_An_indir_predec_reg3_out               ;if equal go to output MOVEroutine
0000502A                          6316  
0000502A  B4BC 00000024           6317  MOVE_An_indir_predec_reg4                  CMP.L      #match_MOVE_src_An_indir_prede_r4,D2       ;check reg is equal to 4
00005030  6600 0006               6318                                              BNE        MOVE_An_indir_predec_reg5                      ;if not try reg 5
00005034  6700 0074               6319                                              BEQ        MOVE_An_indir_predec_reg4_out               ;if equal go to output MOVEroutine
00005038                          6320  
00005038  B4BC 00000025           6321  MOVE_An_indir_predec_reg5                  CMP.L      #match_MOVE_src_An_indir_prede_r5,D2       ;check reg is equal to 5
0000503E  6600 0006               6322                                              BNE        MOVE_An_indir_predec_reg6                     ;if not try reg 6
00005042  6700 0078               6323                                              BEQ        MOVE_An_indir_predec_reg5_out               ;if equal go to output MOVEroutine
00005046                          6324  
00005046  B4BC 00000026           6325  MOVE_An_indir_predec_reg6                  CMP.L      #match_MOVE_src_An_indir_prede_r6,D2       ;check reg is equal to 6
0000504C  6600 0006               6326                                              BNE        MOVE_An_indir_predec_reg7                     ;if not try reg 7
00005050  6700 007C               6327                                              BEQ        MOVE_An_indir_predec_reg6_out               ;if equal go to output MOVEroutine
00005054                          6328  
00005054  B4BC 00000027           6329  MOVE_An_indir_predec_reg7                  CMP.L      #match_MOVE_src_An_indir_prede_r7,D2       ;check reg is equal to 7
0000505A  6700 0084               6330                                              BEQ        MOVE_An_indir_predec_reg7_out               ;if equal go to output MOVEroutine
0000505E  6600 1EBE               6331                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
00005062                          6332  
00005062                          6333  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00005062  227C 0000848A           6334  MOVE_An_indir_predec_reg0_out              MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00005068  4EB8 140A               6335                                  JSR             print_first
0000506C  4EB9 00005108           6336                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005072  4E75                    6337                                               RTS
00005074                          6338                                              
00005074  227C 00008490           6339  MOVE_An_indir_predec_reg1_out              MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
0000507A  4EB8 140A               6340                                  JSR             print_first
0000507E  4EB9 00005108           6341                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005084  4E75                    6342                                               RTS
00005086                          6343                                               
00005086  227C 00008496           6344  MOVE_An_indir_predec_reg2_out              MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
0000508C  4EB8 140A               6345                                  JSR             print_first
00005090  4EB9 00005108           6346                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005096  4E75                    6347                                               RTS
00005098                          6348                                               
00005098  227C 0000849C           6349  MOVE_An_indir_predec_reg3_out              MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
0000509E  4EB8 140A               6350                                  JSR             print_first
000050A2  4EB9 00005108           6351                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
000050A8  4E75                    6352                                               RTS
000050AA                          6353                                               
000050AA  227C 000084A2           6354  MOVE_An_indir_predec_reg4_out              MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
000050B0  4EB8 140A               6355                                  JSR             print_first
000050B4  4EB9 00005108           6356                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
000050BA  4E75                    6357                                               RTS
000050BC                          6358                                               
000050BC  227C 000084A8           6359  MOVE_An_indir_predec_reg5_out              MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
000050C2  4EB8 140A               6360                                  JSR             print_first
000050C6  4EB9 00005108           6361                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
000050CC  4E75                    6362                                               RTS
000050CE                          6363                                               
000050CE  227C 000084AE           6364  MOVE_An_indir_predec_reg6_out              MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
000050D4  4EB8 140A               6365                                  JSR             print_first
000050D8  4EB9 00005108           6366                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
000050DE  4E75                    6367                                               RTS
000050E0                          6368                                               
000050E0  227C 000084B4           6369  MOVE_An_indir_predec_reg7_out              MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
000050E6  4EB8 140A               6370                                  JSR             print_first
000050EA  4EB9 00005108           6371                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
000050F0  4E75                    6372                                              RTS
000050F2                          6373  ;------------------Absolute Addressing Output-----------------------
000050F2  22FC 000084C4           6374  MOVE_abs_add_word_out                MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000050F8  22C5                    6375                                        MOVE.L      D5,(A1)+                           ;load address                  
000050FA  4E75                    6376                                        RTS                                            :return to MOVEroutine
000050FC                          6377                                             
000050FC                          6378  
000050FC  2A18                    6379  MOVE_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000050FE  22FC 000084C4           6380                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00005104  22C5                    6381                                        MOVE.L      D5,(A1)+                           ;load address                  
00005106  4E75                    6382                                        RTS                                            :return to MOVEroutine                                            
00005108                          6383  
00005108  4241                    6384  MOVE_determine_second_op                CLR         D1
0000510A                          6385  
0000510A                          6386                                                                    ;move the mask to D1
0000510A                          6387  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000510A  3200                    6388  MOVE_dest_data_reg_dir           MOVE.W     D0,D1
0000510C  C2BC 000001C0           6389                                  AND.L             #mask_MOVE_dest_ea_mode,D1  
00005112  B2BC 00000000           6390                                  CMP.L             #match_MOVE_dest_Dn,D1                             ;check to see if mode is data reg direct
00005118  6600 0006               6391                                   BNE               MOVE_dest_add_reg_dir                                   ;if not, go check add reg dir
0000511C  6700 0068               6392                                   BEQ               MOVE_dest_Dn_reg                                        ;if equal go figure out the register
00005120                          6393  
00005120  B2BC 00000040           6394  MOVE_dest_add_reg_dir            CMP.L             #match_MOVE_dest_An,D1                             ;check if mode is add reg direct
00005126  6600 0006               6395                                   BNE               MOVE_dest_add_reg_indir                                 ;if not, go check add reg indir
0000512A  6700 0114               6396                                   BEQ               MOVE_dest_An_reg                                        ;if equal go figure out the reg
0000512E                          6397   
0000512E  B2BC 00000080           6398  MOVE_dest_add_reg_indir          CMP.L             #match_MOVE_dest_An_indir,D1                       ;check to see if mode is add reg indir
00005134  6600 0006               6399                                   BNE               MOVE_dest_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00005138  6700 01C0               6400                                   BEQ               MOVE_dest_An_indir_reg                                  ;if equal go figure out the register           
0000513C                          6401             
0000513C  B2BC 00000100           6402  MOVE_dest_add_reg_indir_predec   CMP.L             #match_MOVE_dest_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00005142  6600 0006               6403                                   BNE               MOVE_dest_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00005146  6700 0326               6404                                   BEQ               MOVE_dest_An_indir_predec                               ;if equal go figure out the register
0000514A                          6405                        
0000514A  B2BC 000000C0           6406  MOVE_dest_add_reg_indir_postinc  CMP.L             #match_MOVE_dest_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00005150  6600 0006               6407                                   BNE               MOVE_dest_abs_add_word                                  ;if not go check abs add word
00005154  6700 025E               6408                                   BEQ               MOVE_dest_An_indir_pinc_r                          ;if equal go figure out the register
00005158                          6409  
00005158  C4BC 000001C0           6410  MOVE_dest_abs_add_word           AND.L             #mask_MOVE_dest_abs_add,D2                         ;load mask to determine if abs add word or long
0000515E                          6411                                   
0000515E  B4BC 000001C0           6412                                   CMP.L             #match_MOVE_dest_abs_add_word,D2                   ;check if abs add word
00005164  2A18                    6413                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00005166  6600 0006               6414                                   BNE               MOVE_dest_abs_add_long                                  ;if not go check abs add long
0000516A  6700 03BC               6415                                   BEQ               MOVE_dest_abs_add_word_out                              ;if equal go to output
0000516E                          6416    
0000516E  B4BC 000009C0           6417  MOVE_dest_abs_add_long           CMP.L             #match_MOVE_dest_abs_add_long,D2                    ;check to see if abs add long
00005174  6700 03BC               6418                                   BEQ               MOVE_dest_abs_add_long_out                               ;if equal go to output
00005178                          6419                                   
00005178  B2BC 000001C0           6420  MOVE_dest_immediate_add          CMP.L             #match_MOVE_dest_imm_add,D1                                ;check if immediate address
0000517E  6700 03BE               6421                                   BEQ               MOVE_dest_immediate_add_out                                    ;if equal go to immediate add MOVE routine
00005182  6600 1D9A               6422                                   BNE               ERROR                                            ;if not equal go to error mesage MOVE routine
00005186                          6423  
00005186                          6424  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00005186                          6425                                   
00005186                          6426                                                       ;load the mask into D2 for the mode and the register
00005186                          6427  ;-----------------------------------Data Register Direct--------------------------------
00005186  4282                    6428  MOVE_dest_Dn_reg                CLR.L       D2
00005188  3400                    6429                                  MOVE.W     D0,D2
0000518A  C4BC 00000FC0           6430                                  AND.L              #mask_MOVE_dest_ea_reg_and_mode,D2   
00005190  B4BC 00000000           6431                                   CMP.L              #match_MOVE_dest_D0,D2                       ;check to see in the register is 0
00005196  6600 0006               6432                                   BNE                MOVE_dest_rD1                                     ;if not go check register 1
0000519A  6700 0064               6433                                   BEQ                MOVE_dest_D0_out                              ;if equal go to output MOVEroutine
0000519E                          6434  
0000519E  B4BC 00000200           6435  MOVE_dest_rD1                    CMP.L              #match_MOVE_dest_D1,D2                       ;check to see in the register is 1
000051A4  6600 0006               6436                                   BNE                MOVE_dest_rD2                                     ;if not go check register 2
000051A8  6700 005E               6437                                   BEQ                MOVE_dest_D1_out                              ;if equal go to output MOVEroutine
000051AC                          6438  
000051AC  B4BC 00000400           6439  MOVE_dest_rD2                    CMP.L              #match_MOVE_dest_D2,D2                       ;check to see in the register is 2
000051B2  6600 0006               6440                                   BNE                MOVE_dest_rD3                                     ;if not go check register 3
000051B6  6700 0058               6441                                   BEQ                MOVE_dest_D2_out                              ;if equal go to output MOVEroutine
000051BA                          6442  
000051BA  B4BC 00000600           6443  MOVE_dest_rD3                    CMP.L              #match_MOVE_dest_D3,D2                       ;check to see in the register is 3
000051C0  6600 0006               6444                                   BNE                MOVE_dest_rD4                                     ;if not go check register 4
000051C4  6700 0052               6445                                   BEQ                MOVE_dest_D3_out                              ;if equal go to output MOVEroutine
000051C8                          6446  
000051C8  B4BC 00000800           6447  MOVE_dest_rD4                    CMP.L              #match_MOVE_dest_D4,D2                       ;check to see in the register is 4
000051CE  6600 0006               6448                                   BNE                MOVE_dest_rD5                                     ;if not go check register 5
000051D2  6700 004C               6449                                   BEQ                MOVE_dest_D4_out                              ;if equal go to output MOVEroutine
000051D6                          6450  
000051D6  B4BC 00000A00           6451  MOVE_dest_rD5                    CMP.L              #match_MOVE_dest_D5,D2                       ;check to see in the register is 5
000051DC  6600 0006               6452                                   BNE                MOVE_dest_rD6                                     ;if not go check register 6
000051E0  6700 0046               6453                                   BEQ                MOVE_dest_D5_out                              ;if equal go to output MOVEroutine
000051E4                          6454  
000051E4  B4BC 00000C00           6455  MOVE_dest_rD6                    CMP.L              #match_MOVE_dest_D6,D2                       ;check to see in the register is 6
000051EA  6600 0006               6456                                   BNE                MOVE_dest_rD7                                     ;if not go check register 7
000051EE  6700 0040               6457                                   BEQ                MOVE_dest_D6_out                              ;if equal go to output MOVEroutine
000051F2                          6458  
000051F2  B4BC 00000E00           6459  MOVE_dest_rD7                    CMP.L              #match_MOVE_dest_D7,D2                       ;check to see in the register is 7
000051F8  6700 003E               6460                                   BEQ                MOVE_dest_D7_out                              ;if equal go to output MOVEroutine
000051FC  6600 1D20               6461                                   BNE                ERROR                               ;if not equal, got to error message
00005200                          6462  ;--------------------Data Register Direct Output-----------------------
00005200  227C 000083F2           6463  MOVE_dest_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
00005206  4E75                    6464                                  RTS
00005208                          6465  
00005208  227C 000083F5           6466  MOVE_dest_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
0000520E  4E75                    6467                                  RTS
00005210                          6468  
00005210  227C 000083F8           6469  MOVE_dest_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
00005216  4E75                    6470                                  RTS
00005218                          6471  
00005218  227C 000083FB           6472  MOVE_dest_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
0000521E  4E75                    6473                                  RTS
00005220                          6474  
00005220  227C 000083FE           6475  MOVE_dest_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
00005226  4E75                    6476                                  RTS
00005228                          6477  
00005228  227C 00008401           6478  MOVE_dest_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
0000522E  4E75                    6479                                  RTS
00005230                          6480  
00005230  227C 00008404           6481  MOVE_dest_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00005236  4E75                    6482                                  RTS
00005238                          6483  
00005238  227C 00008407           6484  MOVE_dest_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
0000523E  4E75                    6485                                  RTS
00005240                          6486  
00005240                          6487  ;------------------Address Register Direct-----------------------
00005240  4282                    6488  MOVE_dest_An_reg                CLR.L       D2
00005242  3400                    6489                                  MOVE.W     D0,D2
00005244  C4BC 00000FC0           6490                                  AND.L              #mask_MOVE_dest_ea_reg_and_mode,D2  
0000524A  B4BC 00000040           6491                                  CMP.L           #match_MOVE_dest_A0,D2                      ;check reg is equal to 0
00005250  6600 0006               6492                                   BNE             MOVE_dest_rA1                                  ;if not try reg 1
00005254  6700 011E               6493                                   BEQ             MOVE_dest_An_indir_reg0_out                     ;if equal go to output MOVEroutine
00005258                          6494  
00005258  B4BC 00000240           6495  MOVE_dest_rA1                     CMP.L           #match_MOVE_dest_A1,D2                      ;check reg is equal to 1
0000525E  6600 0006               6496                                   BNE             MOVE_dest_rA2                                  ;if not try reg 2
00005262  6700 0118               6497                                   BEQ             MOVE_dest_An_indir_reg1_out                     ;if equal go to output MOVEroutine
00005266                          6498  
00005266  B4BC 00000440           6499  MOVE_dest_rA2                     CMP.L           #match_MOVE_dest_A2,D2                     ;check reg is equal to 2
0000526C  6600 0006               6500                                   BNE             MOVE_dest_rA3                                  ;if not try reg 3
00005270  6700 0112               6501                                   BEQ             MOVE_dest_An_indir_reg2_out                     ;if equal go to output MOVEroutine
00005274                          6502  
00005274  B4BC 00000640           6503  MOVE_dest_rA3                     CMP.L           #match_MOVE_dest_A3,D2                       ;check reg is equal to 3
0000527A  6600 0006               6504                                   BNE             MOVE_dest_rA4                                    ;if not try reg 4
0000527E  6700 010C               6505                                   BEQ             MOVE_dest_An_indir_reg3_out                     ;if equal go to output MOVEroutine
00005282                          6506  
00005282  B4BC 00000840           6507  MOVE_dest_rA4                     CMP.L           #match_MOVE_dest_A4,D2                       ;check reg is equal to 4
00005288  6600 0006               6508                                   BNE             MOVE_dest_rA5                                    ;if not try reg 5
0000528C  6700 0106               6509                                   BEQ             MOVE_dest_An_indir_reg4_out                     ;if equal go to output MOVEroutine
00005290                          6510              
00005290  B4BC 00000A40           6511  MOVE_dest_rA5                     CMP.L           #match_MOVE_dest_A5,D2                      ;check reg is equal to 5
00005296  6600 0006               6512                                   BNE             MOVE_dest_rA6                                  ;if not try reg 6
0000529A  6700 0100               6513                                   BEQ             MOVE_dest_An_indir_reg5_out                     ;if equal go to output MOVEroutine
0000529E                          6514  
0000529E  B4BC 00000C40           6515  MOVE_dest_rA6                     CMP.L           #match_MOVE_dest_A6,D2                                     ;check reg is equal to 6
000052A4  6600 0006               6516                                   BNE             MOVE_dest_rA7                                  ;if not try reg 7
000052A8  6700 00FA               6517                                   BEQ             MOVE_dest_An_indir_reg6_out                     ;if equal go to output MOVEroutine
000052AC                          6518  
000052AC  B4BC 00000E40           6519  MOVE_dest_rA7                     CMP.L           #match_MOVE_dest_A7,D2                      ;check reg is equal to 7
000052B2  6700 00F8               6520                                   BEQ             MOVE_dest_An_indir_reg7_out                      ;if equal go to output MOVEroutine
000052B6  6600 1C66               6521                                   BNE             ERROR                                  :if not equal to an addresssing mode, pritn error
000052BA                          6522  
000052BA                          6523  ;--------------------Address Register Direct Output-----------------------
000052BA  227C 0000840A           6524  MOVE_dest_A0_out                 MOVE.L         #ea_A0,A1                           ;load string constant into A1
000052C0  4E75                    6525                                  RTS
000052C2                          6526                                  
000052C2  227C 0000840D           6527  MOVE_dest_A1_out                 MOVE.L         #ea_A1,A1                           ;load string constant into A1
000052C8  4E75                    6528                                  RTS
000052CA                          6529                                  
000052CA  227C 00008410           6530  MOVE_dest_A2_out                 MOVE.L         #ea_A2,A1                           ;load string constant into A1
000052D0  4E75                    6531                                  RTS
000052D2                          6532                                  
000052D2  227C 00008413           6533  MOVE_dest_A3_out                 MOVE.L         #ea_A3,A1                           ;load string constant into A1
000052D8  4E75                    6534                                  RTS
000052DA                          6535  
000052DA  227C 00008416           6536  MOVE_dest_A4_out                 MOVE.L         #ea_A4,A1                           ;load string constant into A1
000052E0  4E75                    6537                                  RTS
000052E2                          6538  
000052E2  227C 00008419           6539  MOVE_dest_A5_out                 MOVE.L         #ea_A5,A1                           ;load string constant into A1
000052E8  4E75                    6540                                  RTS
000052EA                          6541  
000052EA  227C 0000841C           6542  MOVE_dest_A6_out                 MOVE.L         #ea_A6,A1                           ;load string constant into A1
000052F0  4E75                    6543                                  RTS
000052F2                          6544  
000052F2  227C 0000841F           6545  MOVE_dest_A7_out                 MOVE.L         #ea_A7,A1                           ;load string constant into A1
000052F8  4E75                    6546                                  RTS
000052FA                          6547  
000052FA                          6548  ;------------------Address Register Indirect-----------------------
000052FA  4282                    6549  MOVE_dest_An_indir_reg          CLR.L       D2
000052FC  3400                    6550                                  MOVE.W     D0,D2
000052FE  C4BC 00000FC0           6551                                  AND.L              #mask_MOVE_dest_ea_reg_and_mode,D2   
00005304  B4BC 00000080           6552                                  CMP.L          #match_MOVE_dest_An_indir_r0,D2              ;check reg is equal to 0
0000530A  6600 0006               6553                                   BNE             MOVE_dest_An_indir_reg1                           ;if not try reg 1
0000530E  6700 0064               6554                                   BEQ             MOVE_dest_An_indir_reg0_out                       ;if equal go to output MOVEroutine
00005312                          6555  
00005312  B4BC 00000280           6556  MOVE_dest_An_indir_reg1           CMP.L           #match_MOVE_dest_An_indir_r1,D2              ;check reg is equal to 1
00005318  6600 0006               6557                                   BNE             MOVE_dest_An_indir_reg2                           ;if not try reg 2
0000531C  6700 005E               6558                                   BEQ             MOVE_dest_An_indir_reg1_out                       ;if equal go to output MOVEroutine
00005320                          6559  
00005320  B4BC 00000480           6560  MOVE_dest_An_indir_reg2           CMP.L           #match_MOVE_dest_An_indir_r2,D2              ;check reg is equal to 2
00005326  6600 0006               6561                                   BNE             MOVE_dest_An_indir_reg3                           ;if not try reg 3
0000532A  6700 0058               6562                                   BEQ             MOVE_dest_An_indir_reg2_out                       ;if equal go to output MOVEroutine
0000532E                          6563  
0000532E  B4BC 00000680           6564  MOVE_dest_An_indir_reg3           CMP.L           #match_MOVE_dest_An_indir_r3,D2              ;check reg is equal to 3
00005334  6600 0006               6565                                   BNE             MOVE_dest_An_indir_reg4                           ;if not try reg 4
00005338  6700 0052               6566                                   BEQ             MOVE_dest_An_indir_reg3_out                       ;if equal go to output MOVEroutine
0000533C                          6567      
0000533C  B4BC 00000880           6568  MOVE_dest_An_indir_reg4           CMP.L           #match_MOVE_dest_An_indir_r4,D2              ;check reg is equal to 4
00005342  6600 0006               6569                                   BNE             MOVE_dest_An_indir_reg5                           ;if not try reg 5
00005346  6700 004C               6570                                   BEQ             MOVE_dest_An_indir_reg4_out                       ;if equal go to output MOVEroutine
0000534A                          6571          
0000534A  B4BC 00000A80           6572  MOVE_dest_An_indir_reg5           CMP.L           #match_MOVE_dest_An_indir_r5,D2              ;check reg is equal to 5
00005350  6600 0006               6573                                   BNE             MOVE_dest_An_indir_reg6                           ;if not try reg 6
00005354  6700 0046               6574                                   BEQ             MOVE_dest_An_indir_reg5_out                       ;if equal go to output MOVEroutine
00005358                          6575  
00005358  B4BC 00000C80           6576  MOVE_dest_An_indir_reg6           CMP.L           #match_MOVE_dest_An_indir_r6,D2              ;check reg is equal to 6
0000535E  6600 0006               6577                                   BNE             MOVE_dest_An_indir_reg7                           ;if not try reg 7
00005362  6700 0040               6578                                   BEQ             MOVE_dest_An_indir_reg6_out                       ;if equal go to output MOVEroutine
00005366                          6579  
00005366  B4BC 00000E80           6580  MOVE_dest_An_indir_reg7           CMP.L           #match_MOVE_dest_An_indir_r7,D2              ;check reg is equal to 7
0000536C  6700 003E               6581                                   BEQ             MOVE_dest_An_indir_reg7_out                       ;if equal go to output MOVEroutine
00005370  6600 1BAC               6582                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00005374                          6583  
00005374                          6584  ;--------------------Address Register Indirect Output-----------------------
00005374  227C 00008432           6585  MOVE_dest_An_indir_reg0_out                     MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
0000537A  4E75                    6586                                                  RTS
0000537C                          6587  
0000537C  227C 00008437           6588  MOVE_dest_An_indir_reg1_out                     MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00005382  4E75                    6589                                                  RTS
00005384                          6590  
00005384  227C 0000843C           6591  MOVE_dest_An_indir_reg2_out                     MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
0000538A  4E75                    6592                                                  RTS
0000538C                          6593  
0000538C  227C 00008441           6594  MOVE_dest_An_indir_reg3_out                     MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00005392  4E75                    6595                                                  RTS
00005394                          6596  
00005394  227C 00008446           6597  MOVE_dest_An_indir_reg4_out                     MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
0000539A  4E75                    6598                                                  RTS
0000539C                          6599  
0000539C  227C 0000844B           6600  MOVE_dest_An_indir_reg5_out                     MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
000053A2  4E75                    6601                                                  RTS
000053A4                          6602  
000053A4  227C 00008450           6603  MOVE_dest_An_indir_reg6_out                     MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
000053AA  4E75                    6604                                                  RTS
000053AC                          6605                                          
000053AC  227C 00008455           6606  MOVE_dest_An_indir_reg7_out                     MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
000053B2  4E75                    6607                                                  RTS
000053B4                          6608  
000053B4                          6609  ;------------------Address Register Indirect with Post Increment-----------------------
000053B4  4282                    6610  MOVE_dest_An_indir_pinc_r                   CLR.L       D2
000053B6  3400                    6611                                               MOVE.W     D0,D2
000053B8  C4BC 00000FC0           6612                                              AND.L              #mask_MOVE_dest_ea_reg_and_mode,D2  
000053BE  B4BC 000000C0           6613                                              CMP.L      #match_MOVE_dest_An_indir_pinc_r0,D2        ;check reg is equal to 0
000053C4  6600 0006               6614                                              BNE        MOVE_dest_An_indir_pinc_r1                      ;if not try reg 1
000053C8  6700 0064               6615                                              BEQ        MOVE_dest_An_indir_pinc_r0_out               ;if equal go to output MOVEroutine
000053CC                          6616  
000053CC  B4BC 000002C0           6617  MOVE_dest_An_indir_pinc_r1                   CMP.L      #match_MOVE_dest_An_indir_pinc_r1,D2        ;check reg is equal to 1
000053D2  6600 0006               6618                                              BNE        MOVE_dest_An_indir_pinc_r2                      ;if not try reg 2
000053D6  6700 005E               6619                                              BEQ        MOVE_dest_An_indir_pinc_r1_out               ;if equal go to output MOVEroutine
000053DA                          6620  
000053DA  B4BC 000004C0           6621  MOVE_dest_An_indir_pinc_r2                   CMP.L      #match_MOVE_dest_An_indir_pinc_r2,D2        ;check reg is equal to 2
000053E0  6600 0006               6622                                              BNE        MOVE_dest_An_indir_pinc_r3                      ;if not try reg 3
000053E4  6700 0058               6623                                              BEQ        MOVE_dest_An_indir_pinc_r2_out               ;if equal go to output MOVEroutine
000053E8                          6624  
000053E8  B4BC 000006C0           6625  MOVE_dest_An_indir_pinc_r3                   CMP.L      #match_MOVE_dest_An_indir_pinc_r3,D2        ;check reg is equal to 3
000053EE  6600 0006               6626                                              BNE        MOVE_dest_An_indir_pinc_r4                      ;if not try reg 4
000053F2  6700 0052               6627                                              BEQ        MOVE_dest_An_indir_pinc_r3_out               ;if equal go to output MOVEroutine
000053F6                          6628   
000053F6  B4BC 000008C0           6629  MOVE_dest_An_indir_pinc_r4                   CMP.L      #match_MOVE_dest_An_indir_pinc_r4,D2        ;check reg is equal to 4
000053FC  6600 0006               6630                                              BNE        MOVE_dest_An_indir_pinc_r5                      ;if not try reg 5
00005400  6700 004C               6631                                              BEQ        MOVE_dest_An_indir_pinc_r4_out               ;if equal go to output MOVEroutine
00005404                          6632  
00005404  B4BC 00000AC0           6633  MOVE_dest_An_indir_pinc_r5                   CMP.L      #match_MOVE_dest_An_indir_pinc_r5,D2        ;check reg is equal to 5
0000540A  6600 0006               6634                                              BNE        MOVE_dest_An_indir_pinc_r6                      ;if not try reg 6
0000540E  6700 0046               6635                                              BEQ        MOVE_dest_An_indir_pinc_r5_out               ;if equal go to output MOVEroutine
00005412                          6636      
00005412  B4BC 00000CC0           6637  MOVE_dest_An_indir_pinc_r6                   CMP.L      #match_MOVE_dest_An_indir_pinc_r6,D2         ;check reg is equal to 6
00005418  6600 0006               6638                                              BNE        MOVE_dest_An_indir_pinc_r7                        ;if not try reg 7
0000541C  6700 0040               6639                                              BEQ        MOVE_dest_An_indir_pinc_r6_out                    ;if equal go to output MOVEroutine
00005420                          6640  
00005420  B4BC 00000EC0           6641  MOVE_dest_An_indir_pinc_r7                   CMP.L      #match_MOVE_dest_An_indir_pinc_r7,D2         ;check reg is equal to 7
00005426  6700 003E               6642                                              BEQ        MOVE_dest_An_indir_pinc_r7_out                    ;if equal go to output MOVEroutine
0000542A  6600 1AF2               6643                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
0000542E                          6644  
0000542E                          6645  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000542E  227C 0000845A           6646  MOVE_dest_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00005434  4E75                    6647                                              RTS
00005436                          6648  
00005436  227C 00008460           6649  MOVE_dest_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
0000543C  4E75                    6650                                              RTS
0000543E                          6651  
0000543E  227C 00008466           6652  MOVE_dest_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00005444  4E75                    6653                                              RTS
00005446                          6654  
00005446  227C 0000846C           6655  MOVE_dest_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
0000544C  4E75                    6656                                              RTS
0000544E                          6657  
0000544E  227C 00008472           6658  MOVE_dest_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00005454  4E75                    6659                                              RTS
00005456                          6660  
00005456  227C 00008478           6661  MOVE_dest_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
0000545C  4E75                    6662                                              RTS
0000545E                          6663  
0000545E  227C 0000847E           6664  MOVE_dest_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00005464  4E75                    6665                                              RTS
00005466                          6666  
00005466  227C 00008484           6667  MOVE_dest_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
0000546C  4E75                    6668                                              RTS
0000546E                          6669  
0000546E                          6670  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000546E  4282                    6671  MOVE_dest_An_indir_predec                   CLR.L       D2
00005470  3400                    6672                                              MOVE.W     D0,D2
00005472  C4BC 00000FC0           6673                                              AND.L              #mask_MOVE_dest_ea_reg_and_mode,D2  
00005478  B4BC 00000100           6674                                              CMP.L      #match_MOVE_dest_An_indir_pdec_r0,D2       ;check reg is equal to 0
0000547E  6600 0006               6675                                              BNE        MOVE_dest_An_indir_pdec_r1                      ;if not try reg 1
00005482  6700 0064               6676                                              BEQ        MOVE_dest_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
00005486                          6677  
00005486  B4BC 00000300           6678  MOVE_dest_An_indir_pdec_r1                   CMP.L      #match_MOVE_dest_An_indir_pdec_r1,D2       ;check reg is equal to 1
0000548C  6600 0006               6679                                              BNE        MOVE_dest_An_indir_pdec_r2                      ;if not try reg 2
00005490  6700 005E               6680                                              BEQ        MOVE_dest_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
00005494                          6681  
00005494  B4BC 00000500           6682  MOVE_dest_An_indir_pdec_r2                   CMP.L      #match_MOVE_dest_An_indir_pdec_r2,D2       ;check reg is equal to 2
0000549A  6600 0006               6683                                              BNE        MOVE_dest_An_indir_pdec_r3                      ;if not try reg 3
0000549E  6700 0058               6684                                              BEQ        MOVE_dest_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
000054A2                          6685  
000054A2  B4BC 00000700           6686  MOVE_dest_An_indir_pdec_r3                   CMP.L      #match_MOVE_dest_An_indir_pdec_r3,D2       ;check reg is equal to 3
000054A8  6600 0006               6687                                              BNE        MOVE_dest_An_indir_pdec_r4                      ;if not try reg 4
000054AC  6700 0052               6688                                              BEQ        MOVE_dest_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
000054B0                          6689  
000054B0  B4BC 00000900           6690  MOVE_dest_An_indir_pdec_r4                   CMP.L      #match_MOVE_dest_An_indir_pdec_r4,D2       ;check reg is equal to 4
000054B6  6600 0006               6691                                              BNE        MOVE_dest_An_indir_pdec_r5                      ;if not try reg 5
000054BA  6700 004C               6692                                              BEQ        MOVE_dest_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
000054BE                          6693  
000054BE  B4BC 00000B00           6694  MOVE_dest_An_indir_pdec_r5                   CMP.L      #match_MOVE_dest_An_indir_pdec_r5,D2       ;check reg is equal to 5
000054C4  6600 0006               6695                                              BNE        MOVE_dest_An_indir_pdec_r6                     ;if not try reg 6
000054C8  6700 0046               6696                                              BEQ        MOVE_dest_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
000054CC                          6697  
000054CC  B4BC 00000D00           6698  MOVE_dest_An_indir_pdec_r6                   CMP.L      #match_MOVE_dest_An_indir_pdec_r6,D2       ;check reg is equal to 6
000054D2  6600 0006               6699                                              BNE        MOVE_dest_An_indir_pdec_r7                     ;if not try reg 7
000054D6  6700 0040               6700                                              BEQ        MOVE_dest_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
000054DA                          6701  
000054DA  B4BC 00000F00           6702  MOVE_dest_An_indir_pdec_r7                   CMP.L      #match_MOVE_dest_An_indir_pdec_r7,D2       ;check reg is equal to 7
000054E0  6700 003E               6703                                              BEQ        MOVE_dest_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
000054E4  6600 1A38               6704                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
000054E8                          6705  
000054E8                          6706  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000054E8  227C 0000848A           6707  MOVE_dest_An_indir_pdec_r0_out              MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
000054EE  4E75                    6708                                              RTS
000054F0                          6709                                              
000054F0  227C 00008490           6710  MOVE_dest_An_indir_pdec_r1_out              MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
000054F6  4E75                    6711                                              RTS
000054F8                          6712  
000054F8  227C 00008496           6713  MOVE_dest_An_indir_pdec_r2_out              MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
000054FE  4E75                    6714                                              RTS
00005500                          6715  
00005500  227C 0000849C           6716  MOVE_dest_An_indir_pdec_r3_out              MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
00005506  4E75                    6717                                              RTS
00005508                          6718  
00005508  227C 000084A2           6719  MOVE_dest_An_indir_pdec_r4_out              MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
0000550E  4E75                    6720                                              RTS
00005510                          6721  
00005510  227C 000084A8           6722  MOVE_dest_An_indir_pdec_r5_out              MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
00005516  4E75                    6723                                              RTS
00005518                          6724  
00005518  227C 000084AE           6725  MOVE_dest_An_indir_pdec_r6_out              MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
0000551E  4E75                    6726                                              RTS
00005520                          6727  
00005520  227C 000084B4           6728  MOVE_dest_An_indir_pdec_r7_out              MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00005526  4E75                    6729                                              RTS
00005528                          6730  ;------------------Absolute Addressing Output-----------------------
00005528  22FC 000084C4           6731  MOVE_dest_abs_add_word_out               MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000552E  22C5                    6732                                           MOVE.L      D5,(A1)+                           ;load address                  
00005530  4E75                    6733                                           RTS                                            :return to MOVEroutine
00005532                          6734                                             
00005532                          6735  
00005532  2A18                    6736  MOVE_dest_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00005534  22FC 000084C4           6737                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000553A  22C5                    6738                                           MOVE.L      D5,(A1)+                           ;load address                  
0000553C  4E75                    6739                                           RTS                                            :return to MOVEroutine                                            
0000553E                          6740  ;---------------Immediate Addresing---------------------------
0000553E  2A18                    6741  MOVE_dest_immediate_add_out               MOVE.L        (A0)+,D5                             ;capture the immediate address
00005540  BCBC 000001C0           6742                                           CMP.L       #match_MOVE_dest_imm_add_word,D6               ;check to see if need to pull word
00005546  2A18                    6743                                           MOVE.L      (A0)+,D5                            ;pull the word
00005548  6700 0006               6744                                           BEQ         MOVE_dest_imm_add_w                           ;if equal go pull word    
0000554C  6600 000C               6745                                           BNE         MOVE_dest_imm_add_l                           ;if not equal, go check long
00005550                          6746                                           
00005550  22FC 000084C4           6747  MOVE_dest_imm_add_w                       MOVE.L     #ea_$,(A1)+                          ;load the $
00005556  32C5                    6748                                           MOVE.W     D5,(A1)+                             ;load the word address                           
00005558  4E75                    6749                                           RTS
0000555A                          6750                                           
0000555A  2A18                    6751  MOVE_dest_imm_add_l                       MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
0000555C  22FC 000084C4           6752                                           MOVE.L     #ea_$,(A1)+                          ;load the $
00005562  2245                    6753                                           MOVE.L      D5,A1                               ;move to A1
00005564  4E75                    6754                                           RTS
00005566                          6755  
00005566                          6756  
00005566  =00000038               6757  mask_MOVE_src_ea_mode           EQU         $0038
00005566  =0000003F               6758  mask_MOVE_src_abs_add           EQU         $003F
00005566  =0000003F               6759  mask_MOVE_src_ea_reg_and_mode   EQU         $003F
00005566                          6760  
00005566                          6761  
00005566  =00000000               6762  match_MOVE_src_Dn               EQU         $0000
00005566  =00000008               6763  match_MOVE_src_An               EQU         $0008
00005566  =00000010               6764  match_MOVE_src_An_indir         EQU         $0010
00005566  =00000020               6765  match_MOVE_src_An_indir_predec  EQU         $0020
00005566  =00000018               6766  match_MOVE_src_An_indir_postinc EQU         $0018
00005566  =00000038               6767  match_MOVE_src_abs_add_word     EQU         $0038
00005566  =00000039               6768  match_MOVE_src_abs_add_long     EQU         $0039
00005566                          6769  
00005566  =00000000               6770  match_MOVE_src_D0               EQU         $0000
00005566  =00000001               6771  match_MOVE_src_D1               EQU         $0001
00005566  =00000002               6772  match_MOVE_src_D2               EQU         $0002
00005566  =00000003               6773  match_MOVE_src_D3               EQU         $0003
00005566  =00000004               6774  match_MOVE_src_D4               EQU         $0004
00005566  =00000005               6775  match_MOVE_src_D5               EQU         $0005
00005566  =00000006               6776  match_MOVE_src_D6               EQU         $0006
00005566  =00000007               6777  match_MOVE_src_D7               EQU         $0007
00005566                          6778  
00005566  =00000008               6779  match_MOVE_src_A0               EQU         $0008
00005566  =00000009               6780  match_MOVE_src_A1               EQU         $0009
00005566  =0000000A               6781  match_MOVE_src_A2               EQU         $000A
00005566  =0000000B               6782  match_MOVE_src_A3               EQU         $000B
00005566  =0000000C               6783  match_MOVE_src_A4               EQU         $000C
00005566  =0000000D               6784  match_MOVE_src_A5               EQU         $000D
00005566  =0000000E               6785  match_MOVE_src_A6               EQU         $000E
00005566  =0000000F               6786  match_MOVE_src_A7               EQU         $000F
00005566                          6787  
00005566  =00000010               6788  match_MOVE_src_An_indir_r0      EQU         $0010
00005566  =00000011               6789  match_MOVE_src_An_indir_r1      EQU         $0011
00005566  =00000012               6790  match_MOVE_src_An_indir_r2      EQU         $0012
00005566  =00000013               6791  match_MOVE_src_An_indir_r3      EQU         $0013
00005566  =00000014               6792  match_MOVE_src_An_indir_r4      EQU         $0014
00005566  =00000015               6793  match_MOVE_src_An_indir_r5      EQU         $0015
00005566  =00000016               6794  match_MOVE_src_An_indir_r6      EQU         $0016
00005566  =00000017               6795  match_MOVE_src_An_indir_r7      EQU         $0017
00005566                          6796  
00005566  =00000018               6797  match_MOVE_src_An_indir_pinc_r0     EQU         $0018
00005566  =00000019               6798  match_MOVE_src_An_indir_pinc_r1     EQU         $0019
00005566  =0000001A               6799  match_MOVE_src_An_indir_pinc_r2     EQU         $001A
00005566  =0000001B               6800  match_MOVE_src_An_indir_pinc_r3     EQU         $001B
00005566  =0000001C               6801  match_MOVE_src_An_indir_pinc_r4     EQU         $001C
00005566  =0000001D               6802  match_MOVE_src_An_indir_pinc_r5     EQU         $001D
00005566  =0000001E               6803  match_MOVE_src_An_indir_pinc_r6     EQU         $001E
00005566  =0000001F               6804  match_MOVE_src_An_indir_pinc_r7     EQU         $001F
00005566                          6805  
00005566  =00000020               6806  match_MOVE_src_An_indir_prede_r0            EQU         $0020
00005566  =00000021               6807  match_MOVE_src_An_indir_prede_r1            EQU         $0021
00005566  =00000022               6808  match_MOVE_src_An_indir_prede_r2            EQU         $0022
00005566  =00000023               6809  match_MOVE_src_An_indir_prede_r3            EQU         $0023
00005566  =00000024               6810  match_MOVE_src_An_indir_prede_r4            EQU         $0024
00005566  =00000025               6811  match_MOVE_src_An_indir_prede_r5            EQU         $0025
00005566  =00000026               6812  match_MOVE_src_An_indir_prede_r6            EQU         $0026
00005566  =00000027               6813  match_MOVE_src_An_indir_prede_r7            EQU         $0027
00005566                          6814  
00005566  =0000003C               6815  match_MOVE_src_imm_add                           EQU         $003C
00005566  =000000FC               6816  match_MOVE_src_imm_add_word                      EQU         $00FC
00005566  =000001FC               6817  match_MOVE_src_imm_add_long                      EQU         $01FC
00005566                          6818  
00005566                          6819  
00005566                          6820  
00005566                          6821  
00005566                          6822  
00005566  =000001C0               6823  mask_MOVE_dest_ea_mode          EQU         $01C0
00005566  =000001C0               6824  mask_MOVE_dest_abs_add          EQU         $01C0
00005566  =00000FC0               6825  mask_MOVE_dest_ea_reg_and_mode  EQU         $0FC0
00005566                          6826  
00005566                          6827  
00005566  =00000000               6828  match_MOVE_dest_Dn              EQU         $0000
00005566  =00000040               6829  match_MOVE_dest_An              EQU         $0040
00005566  =00000080               6830  match_MOVE_dest_An_indir            EQU         $0080
00005566  =00000100               6831  match_MOVE_dest_An_indir_predec EQU         $0100
00005566  =000000C0               6832  match_MOVE_dest_An_indir_postinc    EQU         $00C0
00005566  =000001C0               6833  match_MOVE_dest_abs_add_word        EQU         $01C0
00005566  =000009C0               6834  match_MOVE_dest_abs_add_long        EQU         $09C0
00005566                          6835  
00005566  =00000000               6836  match_MOVE_dest_D0              EQU         $0000
00005566  =00000200               6837  match_MOVE_dest_D1              EQU         $0200
00005566  =00000400               6838  match_MOVE_dest_D2              EQU         $0400
00005566  =00000600               6839  match_MOVE_dest_D3              EQU         $0600
00005566  =00000800               6840  match_MOVE_dest_D4              EQU         $0800
00005566  =00000A00               6841  match_MOVE_dest_D5              EQU         $0A00
00005566  =00000C00               6842  match_MOVE_dest_D6              EQU         $0C00
00005566  =00000E00               6843  match_MOVE_dest_D7              EQU         $0E00
00005566                          6844  
00005566  =00000040               6845  match_MOVE_dest_A0              EQU         $0040
00005566  =00000240               6846  match_MOVE_dest_A1              EQU         $0240
00005566  =00000440               6847  match_MOVE_dest_A2              EQU         $0440
00005566  =00000640               6848  match_MOVE_dest_A3              EQU         $0640
00005566  =00000840               6849  match_MOVE_dest_A4              EQU         $0840
00005566  =00000A40               6850  match_MOVE_dest_A5              EQU         $0A40
00005566  =00000C40               6851  match_MOVE_dest_A6              EQU         $0C40
00005566  =00000E40               6852  match_MOVE_dest_A7              EQU         $0E40
00005566                          6853  
00005566  =00000080               6854  match_MOVE_dest_An_indir_r0     EQU         $0080
00005566  =00000280               6855  match_MOVE_dest_An_indir_r1     EQU         $0280
00005566  =00000480               6856  match_MOVE_dest_An_indir_r2     EQU         $0480
00005566  =00000680               6857  match_MOVE_dest_An_indir_r3     EQU         $0680
00005566  =00000880               6858  match_MOVE_dest_An_indir_r4     EQU         $0880
00005566  =00000A80               6859  match_MOVE_dest_An_indir_r5     EQU         $0A80
00005566  =00000C80               6860  match_MOVE_dest_An_indir_r6     EQU         $0C80
00005566  =00000E80               6861  match_MOVE_dest_An_indir_r7     EQU         $0E80
00005566                          6862  
00005566  =000000C0               6863  match_MOVE_dest_An_indir_pinc_r0        EQU         $00C0
00005566  =000002C0               6864  match_MOVE_dest_An_indir_pinc_r1        EQU         $02C0
00005566  =000004C0               6865  match_MOVE_dest_An_indir_pinc_r2        EQU         $04C0
00005566  =000006C0               6866  match_MOVE_dest_An_indir_pinc_r3        EQU         $06C0
00005566  =000008C0               6867  match_MOVE_dest_An_indir_pinc_r4        EQU         $08C0
00005566  =00000AC0               6868  match_MOVE_dest_An_indir_pinc_r5        EQU         $0AC0
00005566  =00000CC0               6869  match_MOVE_dest_An_indir_pinc_r6        EQU         $0CC0
00005566  =00000EC0               6870  match_MOVE_dest_An_indir_pinc_r7        EQU         $0EC0
00005566                          6871  
00005566  =00000100               6872  match_MOVE_dest_An_indir_pdec_r0            EQU         $0100
00005566  =00000300               6873  match_MOVE_dest_An_indir_pdec_r1            EQU         $0300
00005566  =00000500               6874  match_MOVE_dest_An_indir_pdec_r2            EQU         $0500
00005566  =00000700               6875  match_MOVE_dest_An_indir_pdec_r3            EQU         $0700
00005566  =00000900               6876  match_MOVE_dest_An_indir_pdec_r4            EQU         $0900
00005566  =00000B00               6877  match_MOVE_dest_An_indir_pdec_r5            EQU         $0B00
00005566  =00000D00               6878  match_MOVE_dest_An_indir_pdec_r6            EQU         $0D00
00005566  =00000F00               6879  match_MOVE_dest_An_indir_pdec_r7            EQU         $0F00
00005566                          6880  
00005566  =000001C0               6881  match_MOVE_dest_imm_add                           EQU         $01C0
00005566  =000001C0               6882  match_MOVE_dest_imm_add_word                      EQU         $01C0
00005566  =000009C0               6883  match_MOVE_dest_imm_add_long                      EQU         $09C0
00005566                          6884  
00005566                          6885  
00005566                          6886  
00005566                          6887  
00005566                          6888  
00005566                          6889  -------------------- end include --------------------
00005566                          6890              *INCLUDE 'MOVEM Subroutine.x68'
00005566                          6891              INCLUDE 'SUB Subroutine.x68'
00005566                          6892  
00005566                          6893  
00005566                          6894  SUB_sub                                                       ;preserve the registers, 
00005566                          6895  ;-----------------------------ea,Dn-----------------------------------------------------------------------------------------------------
00005566  C2BC 000001C0           6896                                  AND.L              #mask_opmode,D1                       ;load mask to determine the operand order
0000556C                          6897                                  
0000556C  B2BC 00000000           6898  SUB_ea_Dn_match                 CMP.L              #match_SUB_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00005572  6700 004C               6899                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
00005576  6600 0002               6900                                  BNE                SUB_ea_Dn_match_w                     ;if not check word size for same order
0000557A                          6901  
0000557A  B2BC 00000040           6902  SUB_ea_Dn_match_w               CMP.L              #match_SUB_w_Dn_ea,D1                 ;check to see if it's Dn,ea
00005580  6700 003E               6903                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
00005584  6600 0002               6904                                  BNE                SUB_ea_Dn_match_l                     ;if not check long size for same order
00005588                          6905  
00005588  B2BC 00000080           6906  SUB_ea_Dn_match_l               CMP.L              #match_SUB_l_Dn_ea,D1                 ;check to see if it's Dn,ea
0000558E  6700 0030               6907                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
00005592  6600 0002               6908                                  BNE                SUB_Dn_ea_match                       ;if not check other order
00005596                          6909  
00005596  B2BC 00000100           6910  SUB_Dn_ea_match                 CMP.L              #match_SUB_b_ea_Dn,D1                 ;check to see if it's ea,Dn
0000559C  6700 05E2               6911                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
000055A0  6600 0002               6912                                  BNE                SUB_Dn_ea_match_w                     ;if not go check word size for same order
000055A4                          6913  
000055A4  B2BC 00000140           6914  SUB_Dn_ea_match_w               CMP.L              #match_SUB_w_ea_Dn,D1                 ;check to see if it's ea,Dn
000055AA  6700 05D4               6915                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
000055AE  6600 0002               6916                                  BNE                SUB_Dn_ea_match_l                     ;if not go check word size for same order
000055B2                          6917  
000055B2  B2BC 00000180           6918  SUB_Dn_ea_match_l               CMP.L              #match_SUB_l_ea_Dn,D1                 ;check to see if it's ea,Dn
000055B8  6700 05C6               6919                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
000055BC  6600 1960               6920                                  BNE                ERROR                                 ;if not go to error message
000055C0                          6921  
000055C0                          6922  
000055C0                          6923  ;--------------------------------------------------------------------------------------------------------------------------
000055C0                          6924  ;-------------------------------------------------------------------------------------------------------------------------
000055C0  4241                    6925  SUB_ea_Dn                        CLR               D1                                     ;clear D1 to load new mask                                
000055C2  3200                    6926                                   MOVE.W             D0,D1
000055C4  C2BC 00000038           6927                                   AND.L             #mask_SUB_ea_mode,D1                   ;move the mask to D1
000055CA                          6928  
000055CA                          6929  
000055CA                          6930  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
000055CA  B2BC 00000000           6931  SUB_ea_Dn_data_reg_dir             CMP.L           #match_SUB_Dn,D1                       ;check to see if mode is data reg direct
000055D0  6600 0006               6932                                     BNE             SUB_ea_Dn_add_reg_indir                ;if not, go check add reg dir
000055D4  6700 0062               6933                                     BEQ             SUB_ea_Dn_Dn_reg                       ;if equal go figure out the register
000055D8                          6934  
000055D8  B2BC 00000010           6935  SUB_ea_Dn_add_reg_indir            CMP.L           #match_SUB_An_indir,D1                 ;check to see if mode is add reg indir
000055DE  6600 0006               6936                                     BNE             SUB_ea_Dn_add_reg_indir_predec         ;if not, go check add reg indir predec 
000055E2  6700 015E               6937                                     BEQ             SUB_ea_Dn_An_indir_reg                 ;if equal go figure out the register           
000055E6                          6938             
000055E6  B2BC 00000020           6939  SUB_ea_Dn_add_reg_indir_predec     CMP.L           #match_SUB_An_indir_predec,D1          ;check to see if mode is add reg indor w/ postinc
000055EC  6600 0006               6940                                     BNE             SUB_ea_Dn_add_reg_indir_postinc        ;if not go check add reg indir/predec
000055F0  6700 0364               6941                                     BEQ             SUB_ea_Dn_An_indir_predec              ;if equal go figure out the register
000055F4                          6942                        
000055F4  B2BC 00000018           6943  SUB_ea_Dn_add_reg_indir_postinc    CMP.L           #match_SUB_An_indir_postinc,D1         ;check to see if mode is add reg indir w/predec
000055FA  6600 0006               6944                                     BNE             SUB_ea_Dn_abs_add_word                 ;if not go check abs add word
000055FE  6700 024C               6945                                     BEQ             SUB_ea_Dn_An_indir_postinc_reg         ;if equal go figure out the register
00005602                          6946  
00005602  C4BC 0000003F           6947  SUB_ea_Dn_abs_add_word             AND.L           #mask_SUB_abs_add,D2                   ;load mask to determine if abs add word or long
00005608                          6948                                   
00005608  4282                    6949                                      CLR.L       D2
0000560A  3400                    6950                                      MOVE.W      D0,D2
0000560C  B4BC 00000038           6951                                     CMP.L           #match_SUB_abs_add_word,D2             ;check if abs add word
00005612  2A18                    6952                                     MOVE.L          (A0)+,D5                               ;pull the next word instruction that holds the address
00005614  6600 0006               6953                                     BNE             SUB_ea_Dn_abs_add_long                 ;if not go check abs add long
00005618  6700 0446               6954                                     BEQ             SUB_ea_Dn_abs_add_word_out             ;if equal go to output
0000561C                          6955    
0000561C  B4BC 00000039           6956  SUB_ea_Dn_abs_add_long             CMP.L           #match_SUB_abs_add_long,D2             ;check to see if abs add long
00005622  6700 0450               6957                                     BEQ             SUB_ea_Dn_abs_add_long_out             ;if equal go to output
00005626  6600 0002               6958                                       BNE               SUB_ea_Dn_immediate_add
0000562A                          6959                                   
0000562A  B2BC 0000003C           6960  SUB_ea_Dn_immediate_add            CMP.L           #match_SUB_imm_add,D1                  ;check if immediate address
00005630  6700 0458               6961                                     BEQ             SUB_ea_Dn_immediate_add_out            ;if equal go to immediate add sub routine
00005634  6600 18E8               6962                                       BNE             ERROR                                  ;if not equal go to error mesage sub routine
00005638                          6963  
00005638                          6964  
00005638                          6965  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00005638                          6966                                   
00005638                          6967                                   
00005638                          6968  ;-----------------------------------Data Register Direct--------------------------------
00005638  4282                    6969  SUB_ea_Dn_Dn_reg             CLR.L          D2
0000563A  3400                    6970                                  MOVE.W      D0,D2
0000563C  C4BC 0000003F           6971                              AND.L           #mask_SUB_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
00005642  B4BC 00000000           6972                               CMP.L              #match_SUB_D0,D2               ;check to see in the register is 0
00005648  6600 0006               6973                               BNE                SUB_ea_Dn_rD1                  ;if not go check register 1
0000564C  6700 0064               6974                               BEQ                SUB_ea_Dn_D0_out               ;if equal go to output subroutine
00005650                          6975  
00005650  B4BC 00000001           6976  SUB_ea_Dn_rD1                CMP.L              #match_SUB_D1,D2               ;check to see in the register is 1
00005656  6600 0006               6977                               BNE                SUB_ea_Dn_rD2                  ;if not go check register 2
0000565A  6700 0068               6978                               BEQ                SUB_ea_Dn_D1_out               ;if equal go to output subroutine
0000565E                          6979  
0000565E  B4BC 00000002           6980  SUB_ea_Dn_rD2                CMP.L              #match_SUB_D2,D2               ;check to see in the register is 2
00005664  6600 0006               6981                               BNE                SUB_ea_Dn_rD3                  ;if not go check register 3
00005668  6700 006C               6982                               BEQ                SUB_ea_Dn_D2_out               ;if equal go to output subroutine
0000566C                          6983  
0000566C  B4BC 00000003           6984  SUB_ea_Dn_rD3                CMP.L              #match_SUB_D3,D2               ;check to see in the register is 3
00005672  6600 0006               6985                               BNE                SUB_ea_Dn_rD4                  ;if not go check register 4
00005676  6700 0070               6986                               BEQ                SUB_ea_Dn_D3_out               ;if equal go to output subroutine
0000567A                          6987  
0000567A  B4BC 00000004           6988  SUB_ea_Dn_rD4                CMP.L              #match_SUB_D4,D2               ;check to see in the register is 4
00005680  6600 0006               6989                               BNE                SUB_ea_Dn_rD5                  ;if not go check register 5
00005684  6700 0074               6990                               BEQ                SUB_ea_Dn_D4_out               ;if equal go to output subroutine
00005688                          6991  
00005688  B4BC 00000005           6992  SUB_ea_Dn_rD5                CMP.L              #match_SUB_D5,D2               ;check to see in the register is 5
0000568E  6600 0006               6993                               BNE                SUB_ea_Dn_rD6                  ;if not go check register 6
00005692  6700 0078               6994                               BEQ                SUB_ea_Dn_D5_out               ;if equal go to output subroutine
00005696                          6995  
00005696  B4BC 00000006           6996  SUB_ea_Dn_rD6                CMP.L              #match_SUB_D6,D2               ;check to see in the register is 6
0000569C  6600 0006               6997                               BNE                SUB_ea_Dn_rD7                  ;if not go check register 7
000056A0  6700 007C               6998                               BEQ                SUB_ea_Dn_D6_out               ;if equal go to output subroutine
000056A4                          6999  
000056A4  B4BC 00000007           7000  SUB_ea_Dn_rD7                CMP.L              #match_SUB_D7,D2               ;check to see in the register is 7
000056AA  6700 0084               7001                               BEQ                SUB_ea_Dn_D7_out               ;if equal go to output subroutine
000056AE  6600 186E               7002                               BNE                ERROR                          ;if not equal, got to error message
000056B2                          7003  
000056B2                          7004  
000056B2                          7005  ;--------------------Data Register Direct Output-----------------------
000056B2  227C 000083F2           7006  SUB_ea_Dn_D0_out             MOVE.L          #ea_D0,A1              ;load string constant into A1
000056B8  4EB8 140A               7007                               JSR            print_first
000056BC  4EB9 00005AC6           7008                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
000056C2  4E75                    7009                               RTS
000056C4                          7010                               
000056C4  227C 000083F5           7011  SUB_ea_Dn_D1_out             MOVE.L          #ea_D1,A1              ;load string constant into A1
000056CA  4EB8 140A               7012                               JSR            print_first
000056CE  4EB9 00005AC6           7013                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
000056D4  4E75                    7014                               RTS
000056D6                          7015                               
000056D6  227C 000083F8           7016  SUB_ea_Dn_D2_out             MOVE.L          #ea_D2,A1              ;load string constant into A1
000056DC  4EB8 140A               7017                               JSR            print_first
000056E0  4EB9 00005AC6           7018                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
000056E6  4E75                    7019                               RTS
000056E8                          7020                               
000056E8  227C 000083FB           7021  SUB_ea_Dn_D3_out             MOVE.L          #ea_D3,A1              ;load string constant into A1
000056EE  4EB8 140A               7022                               JSR            print_first
000056F2  4EB9 00005AC6           7023                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
000056F8  4E75                    7024                               RTS
000056FA                          7025  
000056FA  227C 000083FE           7026  SUB_ea_Dn_D4_out             MOVE.L          #ea_D4,A1              ;load string constant into A1
00005700  4EB8 140A               7027                               JSR            print_first
00005704  4EB9 00005AC6           7028                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
0000570A  4E75                    7029                               RTS
0000570C                          7030  
0000570C  227C 00008401           7031  SUB_ea_Dn_D5_out             MOVE.L          #ea_D5,A1              ;load string constant into A1
00005712  4EB8 140A               7032                               JSR            print_first
00005716  4EB9 00005AC6           7033                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
0000571C  4E75                    7034                               RTS
0000571E                          7035  
0000571E  227C 00008404           7036  SUB_ea_Dn_D6_out             MOVE.L          #ea_D6,A1              ;load string constant into A1
00005724  4EB8 140A               7037                               JSR            print_first
00005728  4EB9 00005AC6           7038                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
0000572E  4E75                    7039                               RTS
00005730                          7040  
00005730  227C 00008407           7041  SUB_ea_Dn_D7_out             MOVE.L          #ea_D7,A1              ;load string constant into A1
00005736  4EB8 140A               7042                               JSR            print_first
0000573A  4EB9 00005AC6           7043                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005740  4E75                    7044                               RTS
00005742                          7045  
00005742                          7046  ;------------------Address Register Indirect-----------------------
00005742  4282                    7047  SUB_ea_Dn_An_indir_reg           CLR.L      D2
00005744  3400                    7048                                  MOVE.W      D0,D2
00005746  C4BC 0000003F           7049                                  AND.L           #mask_SUB_ea_reg_and_mode,D2
0000574C  B4BC 00000010           7050                                  CMP.L           #match_SUB_An_indir_r0,D2           ;check reg is equal to 0
00005752  6600 0006               7051                                   BNE             SUB_ea_Dn_An_indir_reg1             ;if not try reg 1
00005756  6700 0064               7052                                   BEQ             SUB_ea_Dn_An_indir_reg0_out         ;if equal go to output subroutine
0000575A                          7053  
0000575A  B4BC 00000011           7054  SUB_ea_Dn_An_indir_reg1          CMP.L           #match_SUB_An_indir_r1,D2           ;check reg is equal to 1
00005760  6600 0006               7055                                   BNE             SUB_ea_Dn_An_indir_reg2             ;if not try reg 2
00005764  6700 0068               7056                                   BEQ             SUB_ea_Dn_An_indir_reg1_out         ;if equal go to output subroutine
00005768                          7057  
00005768  B4BC 00000012           7058  SUB_ea_Dn_An_indir_reg2          CMP.L           #match_SUB_An_indir_r2,D2           ;check reg is equal to 2
0000576E  6600 0006               7059                                   BNE             SUB_ea_Dn_An_indir_reg3             ;if not try reg 3
00005772  6700 006C               7060                                   BEQ             SUB_ea_Dn_An_indir_reg2_out         ;if equal go to output subroutine
00005776                          7061  
00005776  B4BC 00000013           7062  SUB_ea_Dn_An_indir_reg3          CMP.L           #match_SUB_An_indir_r3,D2           ;check reg is equal to 3
0000577C  6600 0006               7063                                   BNE             SUB_ea_Dn_An_indir_reg4             ;if not try reg 4
00005780  6700 0070               7064                                   BEQ             SUB_ea_Dn_An_indir_reg3_out         ;if equal go to output subroutine
00005784                          7065      
00005784  B4BC 00000014           7066  SUB_ea_Dn_An_indir_reg4          CMP.L           #match_SUB_An_indir_r4,D2           ;check reg is equal to 4
0000578A  6600 0006               7067                                   BNE             SUB_ea_Dn_An_indir_reg5             ;if not try reg 5
0000578E  6700 0074               7068                                   BEQ             SUB_ea_Dn_An_indir_reg4_out         ;if equal go to output subroutine
00005792                          7069          
00005792  B4BC 00000015           7070  SUB_ea_Dn_An_indir_reg5          CMP.L           #match_SUB_An_indir_r5,D2           ;check reg is equal to 5
00005798  6600 0006               7071                                   BNE             SUB_ea_Dn_An_indir_reg6             ;if not try reg 6
0000579C  6700 0078               7072                                   BEQ             SUB_ea_Dn_An_indir_reg5_out         ;if equal go to output subroutine
000057A0                          7073  
000057A0  B4BC 00000016           7074  SUB_ea_Dn_An_indir_reg6          CMP.L           #match_SUB_An_indir_r6,D2           ;check reg is equal to 6
000057A6  6600 0006               7075                                   BNE             SUB_ea_Dn_An_indir_reg7             ;if not try reg 7
000057AA  6700 007C               7076                                   BEQ             SUB_ea_Dn_An_indir_reg6_out         ;if equal go to output subroutine
000057AE                          7077  
000057AE  B4BC 00000017           7078  SUB_ea_Dn_An_indir_reg7          CMP.L           #match_SUB_An_indir_r7,D2           ;check reg is equal to 7
000057B4  6700 0084               7079                                   BEQ             SUB_ea_Dn_An_indir_reg7_out         ;if equal go to output subroutine
000057B8  6600 1764               7080                                   BNE             ERROR                               ;if not equal to an addresssing mode, pritn error
000057BC                          7081  
000057BC                          7082  
000057BC                          7083  ;--------------------Address Register Indirect Output-----------------------
000057BC  227C 00008432           7084  SUB_ea_Dn_An_indir_reg0_out       MOVE.L         #ea_indir_A0,A1            ;load string constant into A1
000057C2  4EB8 140A               7085                               JSR            print_first
000057C6  4EB9 00005AC6           7086                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
000057CC  4E75                    7087                                    RTS
000057CE                          7088                                    
000057CE  227C 00008437           7089  SUB_ea_Dn_An_indir_reg1_out       MOVE.L         #ea_indir_A1,A1            ;load string constant into A1
000057D4  4EB8 140A               7090                               JSR            print_first
000057D8  4EB9 00005AC6           7091                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
000057DE  4E75                    7092                                    RTS
000057E0                          7093                                    
000057E0  227C 0000843C           7094  SUB_ea_Dn_An_indir_reg2_out       MOVE.L         #ea_indir_A2,A1            ;load string constant into A1
000057E6  4EB8 140A               7095                               JSR            print_first
000057EA  4EB9 00005AC6           7096                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
000057F0  4E75                    7097                                    RTS
000057F2                          7098                                    
000057F2  227C 00008441           7099  SUB_ea_Dn_An_indir_reg3_out       MOVE.L         #ea_indir_A3,A1            ;load string constant into A1
000057F8  4EB8 140A               7100                               JSR            print_first
000057FC  4EB9 00005AC6           7101                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005802  4E75                    7102                                    RTS
00005804                          7103                                    
00005804  227C 00008446           7104  SUB_ea_Dn_An_indir_reg4_out       MOVE.L         #ea_indir_A4,A1            ;load string constant into A1
0000580A  4EB8 140A               7105                               JSR            print_first
0000580E  4EB9 00005AC6           7106                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005814  4E75                    7107                                    RTS
00005816                          7108                                    
00005816  227C 0000844B           7109  SUB_ea_Dn_An_indir_reg5_out       MOVE.L         #ea_indir_A5,A1            ;load string constant into A1
0000581C  4EB8 140A               7110                               JSR            print_first
00005820  4EB9 00005AC6           7111                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005826  4E75                    7112                                    RTS
00005828                          7113                                    
00005828  227C 00008450           7114  SUB_ea_Dn_An_indir_reg6_out       MOVE.L         #ea_indir_A6,A1            ;load string constant into A1
0000582E  4EB8 140A               7115                               JSR            print_first
00005832  4EB9 00005AC6           7116                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005838  4E75                    7117                                    RTS
0000583A                          7118                                          
0000583A  227C 00008455           7119  SUB_ea_Dn_An_indir_reg7_out       MOVE.L         #ea_indir_A7,A1            ;load string constant into A1
00005840  4EB8 140A               7120                               JSR            print_first
00005844  4EB9 00005AC6           7121                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
0000584A  4E75                    7122                                    RTS
0000584C                          7123  
0000584C                          7124  ;------------------Address Register Indirect with Post Increment-----------------------
0000584C  4282                    7125  SUB_ea_Dn_An_indir_postinc_reg         CLR.L      D2
0000584E  3400                    7126                                          MOVE.W      D0,D2
00005850  C4BC 0000003F           7127                                          AND.L           #mask_SUB_ea_reg_and_mode,D2
00005856  B4BC 00000018           7128                                      CMP.L      #match_SUB_An_indir_postinc_r0,D2           ;check reg is equal to 0
0000585C  6600 0006               7129                                         BNE        SUB_ea_Dn_An_indir_pinc_r1             ;if not try reg 1
00005860  6700 0064               7130                                         BEQ        SUB_ea_Dn_An_indir_pinc_r0_out         ;if equal go to output subroutine
00005864                          7131  
00005864  B4BC 00000019           7132  SUB_ea_Dn_An_indir_pinc_r1             CMP.L      #match_SUB_An_indir_postinc_r1,D2           ;check reg is equal to 1
0000586A  6600 0006               7133                                         BNE        SUB_ea_Dn_An_indir_pinc_r2             ;if not try reg 2
0000586E  6700 0068               7134                                         BEQ        SUB_ea_Dn_An_indir_pinc_r1_out         ;if equal go to output subroutine
00005872                          7135  
00005872  B4BC 0000001A           7136  SUB_ea_Dn_An_indir_pinc_r2             CMP.L      #match_SUB_An_indir_postinc_r2,D2           ;check reg is equal to 2
00005878  6600 0006               7137                                         BNE        SUB_ea_Dn_An_indir_pinc_r3             ;if not try reg 3
0000587C  6700 006C               7138                                         BEQ        SUB_ea_Dn_An_indir_pinc_r2_out         ;if equal go to output subroutine
00005880                          7139  
00005880  B4BC 0000001B           7140  SUB_ea_Dn_An_indir_pinc_r3             CMP.L      #match_SUB_An_indir_postinc_r3,D2           ;check reg is equal to 3
00005886  6600 0006               7141                                         BNE        SUB_ea_Dn_An_indir_pinc_r4             ;if not try reg 4
0000588A  6700 0070               7142                                         BEQ        SUB_ea_Dn_An_indir_pinc_r3_out         ;if equal go to output subroutine
0000588E                          7143   
0000588E  B4BC 0000001C           7144  SUB_ea_Dn_An_indir_pinc_r4             CMP.L      #match_SUB_An_indir_postinc_r4,D2           ;check reg is equal to 4
00005894  6600 0006               7145                                         BNE        SUB_ea_Dn_An_indir_pinc_r5             ;if not try reg 5
00005898  6700 0074               7146                                         BEQ        SUB_ea_Dn_An_indir_pinc_r4_out         ;if equal go to output subroutine
0000589C                          7147  
0000589C  B4BC 0000001D           7148  SUB_ea_Dn_An_indir_pinc_r5             CMP.L      #match_SUB_An_indir_postinc_r5,D2           ;check reg is equal to 5
000058A2  6600 0006               7149                                         BNE        SUB_ea_Dn_An_indir_pinc_r6             ;if not try reg 6
000058A6  6700 0078               7150                                         BEQ        SUB_ea_Dn_An_indir_pinc_r5_out         ;if equal go to output subroutine
000058AA                          7151  
000058AA  B4BC 0000001E           7152  SUB_ea_Dn_An_indir_pinc_r6             CMP.L      #match_SUB_An_indir_postinc_r6,D2           ;check reg is equal to 6
000058B0  6600 0006               7153                                         BNE        SUB_ea_Dn_An_indir_pinc_r7             ;if not try reg 7
000058B4  6700 007C               7154                                         BEQ        SUB_ea_Dn_An_indir_pinc_r6_out         ;if equal go to output subroutine
000058B8                          7155  
000058B8  B4BC 0000001F           7156  SUB_ea_Dn_An_indir_pinc_r7             CMP.L      #match_SUB_An_indir_postinc_r7,D2           ;check reg is equal to 7
000058BE  6700 0084               7157                                         BEQ        SUB_ea_Dn_An_indir_pinc_r7_out         ;if equal go to output subroutine
000058C2  6600 165A               7158                                         BNE        ERROR                                       ;if not equal to an addresssing mode, pritn error
000058C6                          7159  
000058C6                          7160  
000058C6                          7161  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000058C6  227C 0000845A           7162  SUB_ea_Dn_An_indir_pinc_r0_out      MOVE.L          #ea_indir_postinc_A0,A1          ;load string constant into A1
000058CC  4EB8 140A               7163                               JSR            print_first
000058D0  4EB9 00005AC6           7164                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
000058D6  4E75                    7165                                      RTS
000058D8                          7166                                      
000058D8  227C 00008460           7167  SUB_ea_Dn_An_indir_pinc_r1_out      MOVE.L          #ea_indir_postinc_A1,A1          ;load string constant into A1
000058DE  4EB8 140A               7168                               JSR            print_first
000058E2  4EB9 00005AC6           7169                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
000058E8  4E75                    7170                                      RTS
000058EA                          7171                                      
000058EA  227C 00008466           7172  SUB_ea_Dn_An_indir_pinc_r2_out      MOVE.L          #ea_indir_postinc_A2,A1          ;load string constant into A1
000058F0  4EB8 140A               7173                               JSR            print_first
000058F4  4EB9 00005AC6           7174                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
000058FA  4E75                    7175                                      RTS
000058FC                          7176                                      
000058FC  227C 0000846C           7177  SUB_ea_Dn_An_indir_pinc_r3_out      MOVE.L          #ea_indir_postinc_A3,A1          ;load string constant into A1
00005902  4EB8 140A               7178                               JSR            print_first
00005906  4EB9 00005AC6           7179                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
0000590C  4E75                    7180                                      RTS
0000590E                          7181                                      
0000590E  227C 00008472           7182  SUB_ea_Dn_An_indir_pinc_r4_out      MOVE.L          #ea_indir_postinc_A4,A1          ;load string constant into A1
00005914  4EB8 140A               7183                               JSR            print_first
00005918  4EB9 00005AC6           7184                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
0000591E  4E75                    7185                                      RTS
00005920                          7186                                      
00005920  227C 00008478           7187  SUB_ea_Dn_An_indir_pinc_r5_out      MOVE.L          #ea_indir_postinc_A5,A1          ;load string constant into A1
00005926  4EB8 140A               7188                               JSR            print_first
0000592A  4EB9 00005AC6           7189                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005930  4E75                    7190                                      RTS
00005932                          7191                                      
00005932  227C 0000847E           7192  SUB_ea_Dn_An_indir_pinc_r6_out      MOVE.L          #ea_indir_postinc_A6,A1          ;load string constant into A1
00005938  4EB8 140A               7193                               JSR            print_first
0000593C  4EB9 00005AC6           7194                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005942  4E75                    7195                                      RTS
00005944                          7196                                      
00005944  227C 00008484           7197  SUB_ea_Dn_An_indir_pinc_r7_out      MOVE.L          #ea_indir_postinc_A7,A1          ;load string constant into A1
0000594A  4EB8 140A               7198                               JSR            print_first
0000594E  4EB9 00005AC6           7199                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005954  4E75                    7200                                      RTS
00005956                          7201  
00005956                          7202  ;------------------Address Register Indirect with Pre Decrement-----------------------
00005956  4282                    7203  SUB_ea_Dn_An_indir_predec                CLR.L      D2
00005958  3400                    7204                                          MOVE.W      D0,D2
0000595A  C4BC 0000003F           7205                                          AND.L           #mask_SUB_ea_reg_and_mode,D2
00005960  B4BC 00000020           7206                                          CMP.L      #match_SUB_An_indir_predec_reg0,D2       ;check reg is equal to 0
00005966  6600 0006               7207                                           BNE        SUB_ea_Dn_An_indir_pdec_r1           ;if not try reg 1
0000596A  6700 0064               7208                                           BEQ        SUB_ea_Dn_An_indir_pdec_r0_out       ;if equal go to output subroutine
0000596E                          7209  
0000596E  B4BC 00000021           7210  SUB_ea_Dn_An_indir_pdec_r1               CMP.L      #match_SUB_An_indir_predec_reg1,D2       ;check reg is equal to 1
00005974  6600 0006               7211                                           BNE        SUB_ea_Dn_An_indir_pdec_r2           ;if not try reg 2
00005978  6700 0068               7212                                           BEQ        SUB_ea_Dn_An_indir_pdec_r1_out       ;if equal go to output subroutine
0000597C                          7213  
0000597C  B4BC 00000022           7214  SUB_ea_Dn_An_indir_pdec_r2               CMP.L      #match_SUB_An_indir_predec_reg2,D2       ;check reg is equal to 2
00005982  6600 0006               7215                                           BNE        SUB_ea_Dn_An_indir_pdec_r3           ;if not try reg 3
00005986  6700 006C               7216                                           BEQ        SUB_ea_Dn_An_indir_pdec_r2_out       ;if equal go to output subroutine
0000598A                          7217  
0000598A  B4BC 00000023           7218  SUB_ea_Dn_An_indir_pdec_r3               CMP.L      #match_SUB_An_indir_predec_reg3,D2       ;check reg is equal to 3
00005990  6600 0006               7219                                           BNE        SUB_ea_Dn_An_indir_pdec_r4           ;if not try reg 4
00005994  6700 0070               7220                                           BEQ        SUB_ea_Dn_An_indir_pdec_r3_out       ;if equal go to output subroutine
00005998                          7221  
00005998  B4BC 00000024           7222  SUB_ea_Dn_An_indir_pdec_r4               CMP.L      #match_SUB_An_indir_predec_reg4,D2       ;check reg is equal to 4
0000599E  6600 0006               7223                                           BNE        SUB_ea_Dn_An_indir_pdec_r5           ;if not try reg 5
000059A2  6700 0074               7224                                           BEQ        SUB_ea_Dn_An_indir_pdec_r4_out       ;if equal go to output subroutine
000059A6                          7225  
000059A6  B4BC 00000025           7226  SUB_ea_Dn_An_indir_pdec_r5               CMP.L      #match_SUB_An_indir_predec_reg5,D2       ;check reg is equal to 5
000059AC  6600 0006               7227                                           BNE        SUB_ea_Dn_An_indir_pdec_r6           ;if not try reg 6
000059B0  6700 0078               7228                                           BEQ        SUB_ea_Dn_An_indir_pdec_r5_out       ;if equal go to output subroutine
000059B4                          7229  
000059B4  B4BC 00000026           7230  SUB_ea_Dn_An_indir_pdec_r6               CMP.L      #match_SUB_An_indir_predec_reg6,D2       ;check reg is equal to 6
000059BA  6600 0006               7231                                           BNE        SUB_ea_Dn_An_indir_pdec_r7           ;if not try reg 7
000059BE  6700 007C               7232                                           BEQ        SUB_ea_Dn_An_indir_pdec_r6_out       ;if equal go to output subroutine
000059C2                          7233  
000059C2  B4BC 00000027           7234  SUB_ea_Dn_An_indir_pdec_r7               CMP.L      #match_SUB_An_indir_predec_reg7,D2       ;check reg is equal to 7
000059C8  6700 0084               7235                                           BEQ        SUB_ea_Dn_An_indir_pdec_r7_out       ;if equal go to output subroutine
000059CC  6600 1550               7236                                           BNE        ERROR                                    ;if not equal to an addresssing mode, pritn error
000059D0                          7237  
000059D0                          7238  
000059D0                          7239  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000059D0  227C 0000848A           7240  SUB_ea_Dn_An_indir_pdec_r0_out            MOVE.L        #ea_indir_predec_A0,A1          ;load string constant into A1
000059D6  4EB8 140A               7241                               JSR            print_first
000059DA  4EB9 00005AC6           7242                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
000059E0  4E75                    7243                                            RTS
000059E2                          7244                                              
000059E2  227C 00008490           7245  SUB_ea_Dn_An_indir_pdec_r1_out            MOVE.L        #ea_indir_predec_A1,A1          ;load string constant into A1
000059E8  4EB8 140A               7246                               JSR            print_first
000059EC  4EB9 00005AC6           7247                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
000059F2  4E75                    7248                                            RTS
000059F4                          7249                                            
000059F4  227C 00008496           7250  SUB_ea_Dn_An_indir_pdec_r2_out            MOVE.L        #ea_indir_predec_A2,A1          ;load string constant into A1
000059FA  4EB8 140A               7251                               JSR            print_first
000059FE  4EB9 00005AC6           7252                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005A04  4E75                    7253                                            RTS
00005A06                          7254                                            
00005A06  227C 0000849C           7255  SUB_ea_Dn_An_indir_pdec_r3_out            MOVE.L        #ea_indir_predec_A3,A1          ;load string constant into A1
00005A0C  4EB8 140A               7256                               JSR            print_first
00005A10  4EB9 00005AC6           7257                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005A16  4E75                    7258                                            RTS
00005A18                          7259                                            
00005A18  227C 000084A2           7260  SUB_ea_Dn_An_indir_pdec_r4_out            MOVE.L        #ea_indir_predec_A4,A1          ;load string constant into A1
00005A1E  4EB8 140A               7261                               JSR            print_first
00005A22  4EB9 00005AC6           7262                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005A28  4E75                    7263                                            RTS
00005A2A                          7264                                            
00005A2A  227C 000084A8           7265  SUB_ea_Dn_An_indir_pdec_r5_out            MOVE.L        #ea_indir_predec_A5,A1          ;load string constant into A1
00005A30  4EB8 140A               7266                               JSR            print_first
00005A34  4EB9 00005AC6           7267                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005A3A  4E75                    7268                                            RTS
00005A3C                          7269                                            
00005A3C  227C 000084AE           7270  SUB_ea_Dn_An_indir_pdec_r6_out            MOVE.L        #ea_indir_predec_A6,A1          ;load string constant into A1
00005A42  4EB8 140A               7271                               JSR            print_first
00005A46  4EB9 00005AC6           7272                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005A4C  4E75                    7273                                            RTS
00005A4E                          7274                                            
00005A4E  227C 000084B4           7275  SUB_ea_Dn_An_indir_pdec_r7_out            MOVE.L        #ea_indir_predec_A7,A1          ;load string constant into A1
00005A54  4EB8 140A               7276                               JSR            print_first
00005A58  4EB9 00005AC6           7277                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005A5E  4E75                    7278                                            RTS
00005A60                          7279  
00005A60                          7280  ;------------------Absolute Addressing Output-----------------------
00005A60  22FC 000084C4           7281  SUB_ea_Dn_abs_add_word_out            MOVE.L      #ea_$,(A1)+             ;load $ for hex and increment A1
00005A66  22C5                    7282                                        MOVE.L      D5,(A1)+                ;load address                  
00005A68  4EB8 140A               7283                                        JSR       print_first
00005A6C  4EB9 00005AC6           7284                                          JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005A72  4E75                    7285                                        RTS                                 ;return to subroutine
00005A74                          7286                                             
00005A74                          7287  
00005A74  2A18                    7288  SUB_ea_Dn_abs_add_long_out            MOVE.L      (A0)+,D5                ;pull the next long instruction that holds the address
00005A76  22FC 000084C4           7289                                        MOVE.L      #ea_$,(A1)+             ;load $ for hex and increment A1
00005A7C  22C5                    7290                                        MOVE.L      D5,(A1)+                ;load address                  
00005A7E  4EB8 140A               7291                                        JSR       print_first
00005A82  4EB9 00005AC6           7292                                      JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005A88  4E75                    7293                                        RTS                                 ;return to subroutine
00005A8A                          7294  
00005A8A                          7295                                              
00005A8A                          7296  ;---------------Immediate Addresing---------------------------
00005A8A  2A18                    7297  SUB_ea_Dn_immediate_add_out           MOVE.L      (A0)+,D5                            ;capture the immediate address
00005A8C  BCBC 000000FC           7298                                        CMP.L       #match_SUB_imm_add_word,D6          ;check to see if need to pull word
00005A92  2A18                    7299                                        MOVE.L      (A0)+,D5                            ;pull the word
00005A94  6700 0006               7300                                        BEQ         SUB_ea_Dn_imm_add_w                 ;if equal go pull word    
00005A98  6600 0016               7301                                        BNE         SUB_ea_Dn_imm_add_l                 ;if not equal, go check long
00005A9C                          7302                                           
00005A9C  22FC 000084C4           7303  SUB_ea_Dn_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
00005AA2  32C5                    7304                                        MOVE.W     D5,(A1)+                             ;load the word address                           
00005AA4  4EB8 140A               7305                                              JSR       print_first                                
00005AA8  4EB9 00005AC6           7306                                          JSR        SUB_determine_second_op              ;jump to subroutine to determine second operand
00005AAE  4E75                    7307                                        RTS
00005AB0                          7308     
00005AB0  2A18                    7309  SUB_ea_Dn_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
00005AB2  22FC 000084C4           7310                                        MOVE.L     #ea_$,(A1)+                          ;load the $
00005AB8  2245                    7311                                        MOVE.L     D5,A1                                ;move to A1
00005ABA  4EB8 140A               7312                                        JSR       print_first      
00005ABE  4EB9 00005AC6           7313                                  JSR        SUB_determine_second_op              ;jump to subroutine to determine second operand
00005AC4  4E75                    7314                                        RTS
00005AC6                          7315  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00005AC6  4282                    7316  SUB_determine_second_op         CLR.L       D2              ;clear D2 
00005AC8  3400                    7317                                  MOVE.W      D0,D2
00005ACA  C4BC 00000E00           7318                                  AND.L       #mask_SUB_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
00005AD0                          7319                                                  
00005AD0  B4BC 00000000           7320  ea_Dn_SUB_reg0                  CMP.L       #match_SUB_reg0,D2      ;check to see if reg equal 0
00005AD6  6600 0006               7321                                  BNE     ea_Dn_SUB_reg1          ;if not equal got check reg 1
00005ADA  6700 0064               7322                                  BEQ     ea_Dn_SUB_reg0_out      ;if equal go to output
00005ADE                          7323                                                  
00005ADE  B4BC 00000200           7324  ea_Dn_SUB_reg1                  CMP.L       #match_SUB_reg1,D2      ;check to see if reg equal 1
00005AE4  6600 0006               7325                                  BNE     ea_Dn_SUB_reg2          ;if not equal got check reg 2
00005AE8  6700 005E               7326                                  BEQ     ea_Dn_SUB_reg1_out      ;if equal go to output
00005AEC                          7327  
00005AEC  B4BC 00000400           7328  ea_Dn_SUB_reg2                  CMP.L       #match_SUB_reg2,D2      ;check to see if reg equal 2
00005AF2  6600 0006               7329                                  BNE     ea_Dn_SUB_reg3          ;if not equal got check reg 3
00005AF6  6700 0058               7330                                  BEQ     ea_Dn_SUB_reg2_out      ;if equal go to output
00005AFA                          7331  
00005AFA  B4BC 00000600           7332  ea_Dn_SUB_reg3                  CMP.L       #match_SUB_reg3,D2      ;check to see if reg equal 3
00005B00  6600 0006               7333                                  BNE     ea_Dn_SUB_reg4          ;if not equal got check reg 4
00005B04  6700 0052               7334                                  BEQ     ea_Dn_SUB_reg3_out      ;if equal go to output
00005B08                          7335                                                  
00005B08  B4BC 00000800           7336  ea_Dn_SUB_reg4                  CMP.L       #match_SUB_reg4,D2      ;check to see if reg equal 4
00005B0E  6600 0006               7337                                  BNE     ea_Dn_SUB_reg5          ;if not equal got check reg 5
00005B12  6700 004C               7338                                  BEQ     ea_Dn_SUB_reg4_out      ;if equal go to output
00005B16                          7339  
00005B16  B4BC 00000A00           7340  ea_Dn_SUB_reg5                  CMP.L       #match_SUB_reg5,D2      ;check to see if reg equal 5
00005B1C  6600 0006               7341                                  BNE     ea_Dn_SUB_reg6          ;if not equal got check reg 6
00005B20  6700 0046               7342                                  BEQ     ea_Dn_SUB_reg5_out      ;if equal go to output
00005B24                          7343  
00005B24  B4BC 00000C00           7344  ea_Dn_SUB_reg6                  CMP.L       #match_SUB_reg6,D2      ;check to see if reg equal 6
00005B2A  6600 0006               7345                                  BNE     ea_Dn_SUB_reg7          ;if not equal got check reg 7
00005B2E  6700 0040               7346                                  BEQ     ea_Dn_SUB_reg6_out      ;if equal go to output          
00005B32                          7347  
00005B32  B4BC 00000E00           7348  ea_Dn_SUB_reg7                  CMP.L       #match_SUB_reg7,D2      ;check to see if reg equal 7
00005B38  6700 003E               7349                                  BEQ     ea_Dn_SUB_reg7_out      ;if equal go to output
00005B3C  6600 13E0               7350                                  BNE             ERROR                           ;if not equal to an addresssing mode, pritn error
00005B40                          7351                                  
00005B40                          7352  
00005B40                          7353  ;--------------------Data Output-----------------------
00005B40  227C 000083F2           7354  ea_Dn_SUB_reg0_out              MOVE.L      #ea_D0,A1           ;load string constant into A1
00005B46  4E75                    7355                                  RTS
00005B48                          7356                                              
00005B48  227C 000083F5           7357  ea_Dn_SUB_reg1_out              MOVE.L      #ea_D1,A1           ;load string constant into A1
00005B4E  4E75                    7358                                  RTS
00005B50                          7359                                              
00005B50  227C 000083F8           7360  ea_Dn_SUB_reg2_out              MOVE.L      #ea_D2,A1       ;load string constant into A1
00005B56  4E75                    7361                                  RTS
00005B58                          7362                                              
00005B58  227C 000083FB           7363  ea_Dn_SUB_reg3_out              MOVE.L      #ea_D3,A1           ;load string constant into A1
00005B5E  4E75                    7364                                  RTS
00005B60                          7365                                              
00005B60  227C 000083FE           7366  ea_Dn_SUB_reg4_out              MOVE.L      #ea_D4,A1       ;load string constant into A1
00005B66  4E75                    7367                                  RTS
00005B68                          7368                                              
00005B68  227C 00008401           7369  ea_Dn_SUB_reg5_out              MOVE.L      #ea_D5,A1           ;load string constant into A1
00005B6E  4E75                    7370                                  RTS
00005B70                          7371                                              
00005B70  227C 00008404           7372  ea_Dn_SUB_reg6_out              MOVE.L      #ea_D6,A1           ;load string constant into A1
00005B76  4E75                    7373                                  RTS
00005B78                          7374                                              
00005B78  227C 00008407           7375  ea_Dn_SUB_reg7_out              MOVE.L      #ea_D7,A1           ;load string constant into A1
00005B7E  4E75                    7376                                  RTS             
00005B80                          7377                                                                
00005B80                          7378                        
00005B80                          7379  ;------------------------------------------------------------------------------------------------------------------------------------------
00005B80                          7380  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
00005B80                          7381  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00005B80  4282                    7382  SUB_Dn_ea                   CLR.L       D2              ;clear D2 
00005B82  3400                    7383                              MOVE.W      D0,D2
00005B84  C4BC 00000E00           7384                              AND.L       #mask_SUB_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
00005B8A                          7385                                                  
00005B8A  B4BC 00000000           7386  Dn_ea_SUB_reg0              CMP.L       #match_SUB_reg0,D2      ;check to see if reg equal 0
00005B90  6600 0006               7387                              BNE     Dn_ea_SUB_reg1          ;if not equal got check reg 1
00005B94  6700 0064               7388                              BEQ     Dn_ea_SUB_reg0_out      ;if equal go to output
00005B98                          7389                                                  
00005B98  B4BC 00000200           7390  Dn_ea_SUB_reg1              CMP.L       #match_SUB_reg1,D2      ;check to see if reg equal 1
00005B9E  6600 0006               7391                              BNE     Dn_ea_SUB_reg2          ;if not equal got check reg 2
00005BA2  6700 0062               7392                              BEQ     Dn_ea_SUB_reg1_out      ;if equal go to output
00005BA6                          7393  
00005BA6  B4BC 00000400           7394  Dn_ea_SUB_reg2              CMP.L       #match_SUB_reg2,D2      ;check to see if reg equal 2
00005BAC  6600 0006               7395                              BNE     Dn_ea_SUB_reg3          ;if not equal got check reg 3
00005BB0  6700 0060               7396                              BEQ     Dn_ea_SUB_reg2_out      ;if equal go to output
00005BB4                          7397  
00005BB4  B4BC 00000600           7398  Dn_ea_SUB_reg3              CMP.L       #match_SUB_reg3,D2      ;check to see if reg equal 3
00005BBA  6600 0006               7399                              BNE     Dn_ea_SUB_reg4          ;if not equal got check reg 4
00005BBE  6700 005E               7400                              BEQ     Dn_ea_SUB_reg3_out      ;if equal go to output
00005BC2                          7401                                                  
00005BC2  B4BC 00000800           7402  Dn_ea_SUB_reg4              CMP.L       #match_SUB_reg4,D2      ;check to see if reg equal 4
00005BC8  6600 0006               7403                              BNE     Dn_ea_SUB_reg5          ;if not equal got check reg 5
00005BCC  6700 005C               7404                              BEQ     Dn_ea_SUB_reg4_out      ;if equal go to output
00005BD0                          7405  
00005BD0  B4BC 00000A00           7406  Dn_ea_SUB_reg5              CMP.L       #match_SUB_reg5,D2      ;check to see if reg equal 5
00005BD6  6600 0006               7407                              BNE     Dn_ea_SUB_reg6          ;if not equal got check reg 6
00005BDA  6700 005A               7408                              BEQ     Dn_ea_SUB_reg5_out      ;if equal go to output
00005BDE                          7409  
00005BDE  B4BC 00000C00           7410  Dn_ea_SUB_reg6              CMP.L       #match_SUB_reg6,D2      ;check to see if reg equal 6
00005BE4  6600 0006               7411                              BNE     Dn_ea_SUB_reg7          ;if not equal got check reg 7
00005BE8  6700 0058               7412                              BEQ     Dn_ea_SUB_reg6_out      ;if equal go to output          
00005BEC                          7413  
00005BEC  B4BC 00000E00           7414  Dn_ea_SUB_reg7              CMP.L       #match_SUB_reg7,D2      ;check to see if reg equal 7
00005BF2  6700 005A               7415                              BEQ     Dn_ea_SUB_reg7_out      ;if equal go to output
00005BF6  6600 1326               7416                              BNE             ERROR                           ;if not equal to an addresssing mode, pritn error
00005BFA                          7417                                  
00005BFA                          7418  
00005BFA                          7419  ;--------------------Data Output-----------------------
00005BFA  227C 000083F2           7420  Dn_ea_SUB_reg0_out          MOVE.L      #ea_D0,A1               ;load string constant into A1
00005C00  4EB9 00005C5A           7421                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005C06                          7422                                              
00005C06  227C 000083F5           7423  Dn_ea_SUB_reg1_out             MOVE.L       #ea_D1,A1               ;load string constant into A1
00005C0C  4EB9 00005C5A           7424                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005C12                          7425                                              
00005C12  227C 000083F8           7426  Dn_ea_SUB_reg2_out            MOVE.L        #ea_D2,A1               ;load string constant into A1
00005C18  4EB9 00005C5A           7427                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005C1E                          7428                                              
00005C1E  227C 000083FB           7429  Dn_ea_SUB_reg3_out            MOVE.L        #ea_D3,A1               ;load string constant into A1
00005C24  4EB9 00005C5A           7430                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005C2A                          7431                                              
00005C2A  227C 000083FE           7432  Dn_ea_SUB_reg4_out            MOVE.L        #ea_D4,A1               ;load string constant into A1
00005C30  4EB9 00005C5A           7433                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005C36                          7434                                              
00005C36  227C 00008401           7435  Dn_ea_SUB_reg5_out            MOVE.L        #ea_D5,A1               ;load string constant into A1
00005C3C  4EB9 00005C5A           7436                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005C42                          7437                                              
00005C42  227C 00008404           7438  Dn_ea_SUB_reg6_out              MOVE.L      #ea_D6,A1               ;load string constant into A1
00005C48  4EB9 00005C5A           7439                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005C4E                          7440                                              
00005C4E  227C 00008407           7441  Dn_ea_SUB_reg7_out            MOVE.L        #ea_D7,A1               ;load string constant into A1
00005C54  4EB9 00005C5A           7442                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005C5A                          7443                                              
00005C5A                          7444  
00005C5A                          7445  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00005C5A  4241                    7446  SUB_determine_second_operand         CLR               D1                             ;clear D1 to load new mask                                
00005C5C  3200                    7447                                      MOVE.W          D0,D1
00005C5E  C2BC 00000038           7448                                       AND.L             #mask_SUB_ea_mode,D1           ;move the mask to D1
00005C64                          7449                                          
00005C64                          7450  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00005C64  4241                    7451  SUB_Dn_ea_add_reg_indir              CLR               D1                             ;clear D1 to load new mask                                
00005C66  3200                    7452                                      MOVE.W          D0,D1
00005C68  C2BC 00000038           7453                                       AND.L             #mask_SUB_ea_mode,D1 
00005C6E  B2BC 00000010           7454                                      CMP.L           #match_SUB_An_indir,D1                ;check to see if mode is add reg indir
00005C74  6600 0006               7455                                       BNE             SUB_Dn_ea_add_reg_indir_predec        ;if not, go check add reg indir predec 
00005C78  6700 0042               7456                                       BEQ             SUB_Dn_ea_An_indir_reg                ;if equal go figure out the register           
00005C7C                          7457             
00005C7C  B2BC 00000020           7458  SUB_Dn_ea_add_reg_indir_predec       CMP.L           #match_SUB_An_indir_predec,D1         ;check to see if mode is add reg indor w/ postinc
00005C82  6600 0006               7459                                       BNE             SUB_Dn_ea_add_reg_indir_postinc       ;if not go check add reg indir/predec
00005C86  6700 01A8               7460                                       BEQ             SUB_Dn_ea_An_indir_predec             ;if equal go figure out the register
00005C8A                          7461                        
00005C8A  B2BC 00000018           7462  SUB_Dn_ea_add_reg_indir_postinc      CMP.L           #match_SUB_An_indir_postinc,D1        ;check to see if mode is add reg indir w/predec
00005C90  6600 0006               7463                                       BNE             SUB_Dn_ea_abs_add_word                ;if not go check abs add word
00005C94  6700 00E0               7464                                       BEQ             SUB_Dn_ea_An_indir_postinc_reg        ;if equal go figure out the register
00005C98                          7465  
00005C98  C4BC 0000003F           7466  SUB_Dn_ea_abs_add_word               AND.L           #mask_SUB_abs_add,D2                  ;load mask to determine if abs add word or long
00005C9E                          7467                                   
00005C9E  B4BC 00000038           7468                                       CMP.L           #match_SUB_abs_add_word,D2            ;check if abs add word
00005CA4  2A18                    7469                                       MOVE.L          (A0)+,D5                              ;pull the next word instruction that holds the address
00005CA6  6600 0006               7470                                       BNE             SUB_Dn_ea_abs_add_long                ;if not go check abs add long
00005CAA  6700 023E               7471                                       BEQ             SUB_Dn_ea_abs_add_word_out            ;if equal go to output
00005CAE                          7472    
00005CAE  B4BC 00000039           7473  SUB_Dn_ea_abs_add_long               CMP.L           #match_SUB_abs_add_long,D2            ;check to see if abs add long
00005CB4  6700 023E               7474                                       BEQ             SUB_Dn_ea_abs_add_long_out            ;if equal go to output
00005CB8  6600 1264               7475                                       BNE             ERROR                                 ;if not equal go to error mesage sub routine
00005CBC                          7476  
00005CBC                          7477  
00005CBC                          7478  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00005CBC                          7479                                   
00005CBC                          7480                                   
00005CBC                          7481  ;------------------Address Register Indirect-----------------------
00005CBC  4242                    7482  SUB_Dn_ea_An_indir_reg           CLR               D2                             ;clear D1 to load new mask                                
00005CBE  3400                    7483                                      MOVE.W          D0,D2
00005CC0  C4BC 0000003F           7484                                  AND.L            #mask_SUB_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
00005CC6  B4BC 00000010           7485                                   CMP.L           #match_SUB_An_indir_r0,D2              ;check reg is equal to 0
00005CCC  6600 0006               7486                                   BNE             SUB_Dn_ea_An_indir_reg1                ;if not try reg 1
00005CD0  6700 0064               7487                                   BEQ             SUB_Dn_ea_An_indir_reg0_out            ;if equal go to output subroutine
00005CD4                          7488  
00005CD4  B4BC 00000011           7489  SUB_Dn_ea_An_indir_reg1          CMP.L           #match_SUB_An_indir_r1,D2              ;check reg is equal to 1
00005CDA  6600 0006               7490                                   BNE             SUB_Dn_ea_An_indir_reg2                ;if not try reg 2
00005CDE  6700 005E               7491                                   BEQ             SUB_Dn_ea_An_indir_reg1_out            ;if equal go to output subroutine
00005CE2                          7492  
00005CE2  B4BC 00000012           7493  SUB_Dn_ea_An_indir_reg2          CMP.L           #match_SUB_An_indir_r2,D2              ;check reg is equal to 2
00005CE8  6600 0006               7494                                   BNE             SUB_Dn_ea_An_indir_reg3                ;if not try reg 3
00005CEC  6700 0058               7495                                   BEQ             SUB_Dn_ea_An_indir_reg2_out            ;if equal go to output subroutine
00005CF0                          7496  
00005CF0  B4BC 00000013           7497  SUB_Dn_ea_An_indir_reg3          CMP.L           #match_SUB_An_indir_r3,D2              ;check reg is equal to 3
00005CF6  6600 0006               7498                                   BNE             SUB_Dn_ea_An_indir_reg4                ;if not try reg 4
00005CFA  6700 0052               7499                                   BEQ             SUB_Dn_ea_An_indir_reg3_out            ;if equal go to output subroutine
00005CFE                          7500      
00005CFE  B4BC 00000014           7501  SUB_Dn_ea_An_indir_reg4          CMP.L           #match_SUB_An_indir_r4,D2              ;check reg is equal to 4
00005D04  6600 0006               7502                                   BNE             SUB_Dn_ea_An_indir_reg5                ;if not try reg 5
00005D08  6700 004C               7503                                   BEQ             SUB_Dn_ea_An_indir_reg4_out            ;if equal go to output subroutine
00005D0C                          7504          
00005D0C  B4BC 00000015           7505  SUB_Dn_ea_An_indir_reg5          CMP.L           #match_SUB_An_indir_r5,D2              ;check reg is equal to 5
00005D12  6600 0006               7506                                   BNE             SUB_Dn_ea_An_indir_reg6                ;if not try reg 6
00005D16  6700 0046               7507                                   BEQ             SUB_Dn_ea_An_indir_reg5_out            ;if equal go to output subroutine
00005D1A                          7508  
00005D1A  B4BC 00000016           7509  SUB_Dn_ea_An_indir_reg6          CMP.L           #match_SUB_An_indir_r6,D2              ;check reg is equal to 6
00005D20  6600 0006               7510                                   BNE             SUB_Dn_ea_An_indir_reg7                ;if not try reg 7
00005D24  6700 0040               7511                                   BEQ             SUB_Dn_ea_An_indir_reg6_out            ;if equal go to output subroutine
00005D28                          7512  
00005D28  B4BC 00000017           7513  SUB_Dn_ea_An_indir_reg7          CMP.L           #match_SUB_An_indir_r7,D2              ;check reg is equal to 7
00005D2E  6700 003E               7514                                   BEQ             SUB_Dn_ea_An_indir_reg7_out            ;if equal go to output subroutine
00005D32  6600 11EA               7515                                   BNE             ERROR                                  ;if not equal to an addresssing mode, pritn error
00005D36                          7516  
00005D36                          7517  ;--------------------Address Register Indirect Output-----------------------
00005D36  227C 00008432           7518  SUB_Dn_ea_An_indir_reg0_out     MOVE.L      #ea_indir_A0,A1             ;load string constant into A1
00005D3C  4E75                    7519                                      RTS
00005D3E                          7520  
00005D3E  227C 00008437           7521  SUB_Dn_ea_An_indir_reg1_out     MOVE.L      #ea_indir_A1,A1             ;load string constant into A1
00005D44  4E75                    7522                                      RTS
00005D46                          7523  
00005D46  227C 0000843C           7524  SUB_Dn_ea_An_indir_reg2_out     MOVE.L      #ea_indir_A2,A1             ;load string constant into A1
00005D4C  4E75                    7525                                      RTS
00005D4E                          7526  
00005D4E  227C 00008441           7527  SUB_Dn_ea_An_indir_reg3_out     MOVE.L      #ea_indir_A3,A1             ;load string constant into A1
00005D54  4E75                    7528                                      RTS
00005D56                          7529  
00005D56  227C 00008446           7530  SUB_Dn_ea_An_indir_reg4_out     MOVE.L      #ea_indir_A4,A1             ;load string constant into A1
00005D5C  4E75                    7531                                          RTS
00005D5E                          7532  
00005D5E  227C 0000844B           7533  SUB_Dn_ea_An_indir_reg5_out     MOVE.L      #ea_indir_A5,A1             ;load string constant into A1
00005D64  4E75                    7534                                      RTS
00005D66                          7535  
00005D66  227C 00008450           7536  SUB_Dn_ea_An_indir_reg6_out     MOVE.L      #ea_indir_A6,A1             ;load string constant into A1
00005D6C  4E75                    7537                                      RTS
00005D6E                          7538                                          
00005D6E  227C 00008455           7539  SUB_Dn_ea_An_indir_reg7_out     MOVE.L      #ea_indir_A7,A1             ;load string constant into A1
00005D74  4E75                    7540                                      RTS
00005D76                          7541  
00005D76                          7542  
00005D76                          7543  ;------------------Address Register Indirect with Post Increment-----------------------
00005D76  4242                    7544  SUB_Dn_ea_An_indir_postinc_reg          CLR               D2                             ;clear D1 to load new mask                                
00005D78  3400                    7545                                          MOVE.W          D0,D2
00005D7A  C4BC 0000003F           7546                                          AND.L            #mask_SUB_ea_reg_and_mode,D2 
00005D80  B4BC 00000018           7547                                          CMP.L      #match_SUB_An_indir_postinc_r0,D2        ;check reg is equal to 0
00005D86  6600 0006               7548                                          BNE        SUB_Dn_ea_An_indir_pinc_r1          ;if not try reg 1
00005D8A  6700 0064               7549                                          BEQ        SUB_Dn_ea_An_indir_pinc_r0_out      ;if equal go to output subroutine
00005D8E                          7550  
00005D8E  B4BC 00000019           7551  SUB_Dn_ea_An_indir_pinc_r1              CMP.L      #match_SUB_An_indir_postinc_r1,D2        ;check reg is equal to 1
00005D94  6600 0006               7552                                          BNE        SUB_Dn_ea_An_indir_pinc_r2          ;if not try reg 2
00005D98  6700 005E               7553                                          BEQ        SUB_Dn_ea_An_indir_pinc_r1_out      ;if equal go to output subroutine
00005D9C                          7554  
00005D9C  B4BC 0000001A           7555  SUB_Dn_ea_An_indir_pinc_r2              CMP.L      #match_SUB_An_indir_postinc_r2,D2        ;check reg is equal to 2
00005DA2  6600 0006               7556                                          BNE        SUB_Dn_ea_An_indir_pinc_r3          ;if not try reg 3
00005DA6  6700 0058               7557                                          BEQ        SUB_Dn_ea_An_indir_pinc_r2_out      ;if equal go to output subroutine
00005DAA                          7558  
00005DAA  B4BC 0000001B           7559  SUB_Dn_ea_An_indir_pinc_r3              CMP.L      #match_SUB_An_indir_postinc_r3,D2        ;check reg is equal to 3
00005DB0  6600 0006               7560                                          BNE        SUB_Dn_ea_An_indir_pinc_r4          ;if not try reg 4
00005DB4  6700 0052               7561                                          BEQ        SUB_Dn_ea_An_indir_pinc_r3_out      ;if equal go to output subroutine
00005DB8                          7562   
00005DB8  B4BC 0000001C           7563  SUB_Dn_ea_An_indir_pinc_r4              CMP.L      #match_SUB_An_indir_postinc_r4,D2        ;check reg is equal to 4
00005DBE  6600 0006               7564                                          BNE        SUB_Dn_ea_An_indir_pinc_r5          ;if not try reg 5
00005DC2  6700 004C               7565                                          BEQ        SUB_Dn_ea_An_indir_pinc_r4_out      ;if equal go to output subroutine
00005DC6                          7566  
00005DC6  B4BC 0000001D           7567  SUB_Dn_ea_An_indir_pinc_r5              CMP.L      #match_SUB_An_indir_postinc_r5,D2        ;check reg is equal to 5
00005DCC  6600 0006               7568                                          BNE        SUB_Dn_ea_An_indir_pinc_r6          ;if not try reg 6
00005DD0  6700 0046               7569                                          BEQ        SUB_Dn_ea_An_indir_pinc_r5_out      ;if equal go to output subroutine
00005DD4                          7570  
00005DD4  B4BC 0000001E           7571  SUB_Dn_ea_An_indir_pinc_r6              CMP.L      #match_SUB_An_indir_postinc_r6,D2         ;check reg is equal to 6
00005DDA  6600 0006               7572                                          BNE        SUB_Dn_ea_An_indir_pinc_r7           ;if not try reg 7
00005DDE  6700 0040               7573                                          BEQ        SUB_Dn_ea_An_indir_pinc_r6_out       ;if equal go to output subroutine
00005DE2                          7574  
00005DE2  B4BC 0000001F           7575  SUB_Dn_ea_An_indir_pinc_r7              CMP.L      #match_SUB_An_indir_postinc_r7,D2         ;check reg is equal to 7
00005DE8  6700 003E               7576                                          BEQ        SUB_Dn_ea_An_indir_pinc_r7_out       ;if equal go to output subroutine
00005DEC  6600 1130               7577                                          BNE        ERROR                                     ;if not equal to an addresssing mode, pritn error
00005DF0                          7578  
00005DF0                          7579  
00005DF0                          7580  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00005DF0  227C 0000845A           7581  SUB_Dn_ea_An_indir_pinc_r0_out              MOVE.L     #ea_indir_postinc_A0,A1       ;load string constant into A1
00005DF6  4E75                    7582                                              RTS
00005DF8                          7583  
00005DF8  227C 00008460           7584  SUB_Dn_ea_An_indir_pinc_r1_out              MOVE.L     #ea_indir_postinc_A1,A1       ;load string constant into A1
00005DFE  4E75                    7585                                              RTS
00005E00                          7586  
00005E00  227C 00008466           7587  SUB_Dn_ea_An_indir_pinc_r2_out              MOVE.L     #ea_indir_postinc_A2,A1       ;load string constant into A1
00005E06  4E75                    7588                                              RTS
00005E08                          7589  
00005E08  227C 0000846C           7590  SUB_Dn_ea_An_indir_pinc_r3_out              MOVE.L     #ea_indir_postinc_A3,A1       ;load string constant into A1
00005E0E  4E75                    7591                                              RTS
00005E10                          7592  
00005E10  227C 00008472           7593  SUB_Dn_ea_An_indir_pinc_r4_out              MOVE.L     #ea_indir_postinc_A4,A1       ;load string constant into A1
00005E16  4E75                    7594                                              RTS
00005E18                          7595  
00005E18  227C 00008478           7596  SUB_Dn_ea_An_indir_pinc_r5_out              MOVE.L     #ea_indir_postinc_A5,A1       ;load string constant into A1
00005E1E  4E75                    7597                                              RTS
00005E20                          7598  
00005E20  227C 0000847E           7599  SUB_Dn_ea_An_indir_pinc_r6_out              MOVE.L     #ea_indir_postinc_A6,A1       ;load string constant into A1
00005E26  4E75                    7600                                              RTS
00005E28                          7601  
00005E28  227C 00008484           7602  SUB_Dn_ea_An_indir_pinc_r7_out              MOVE.L     #ea_indir_postinc_A7,A1       ;load string constant into A1
00005E2E  4E75                    7603                                              RTS
00005E30                          7604  
00005E30                          7605  
00005E30                          7606  ;------------------Address Register Indirect with Pre Decrement-----------------------
00005E30  4242                    7607  SUB_Dn_ea_An_indir_predec                   CLR               D2                             ;clear D1 to load new mask                                
00005E32  3400                    7608                                              MOVE.W          D0,D2
00005E34  C4BC 0000003F           7609                                              AND.L            #mask_SUB_ea_reg_and_mode,D2 
00005E3A  B4BC 00000020           7610                                              CMP.L      #match_SUB_An_indir_predec_reg0,D2       ;check reg is equal to 0
00005E40  6600 0006               7611                                              BNE        SUB_Dn_ea_An_indir_pdec_r1           ;if not try reg 1
00005E44  6700 0064               7612                                              BEQ        SUB_Dn_ea_An_indir_pdec_r0_out       ;if equal go to output subroutine
00005E48                          7613  
00005E48  B4BC 00000021           7614  SUB_Dn_ea_An_indir_pdec_r1                  CMP.L      #match_SUB_An_indir_predec_reg1,D2       ;check reg is equal to 1
00005E4E  6600 0006               7615                                              BNE        SUB_Dn_ea_An_indir_pdec_r2           ;if not try reg 2
00005E52  6700 005E               7616                                              BEQ        SUB_Dn_ea_An_indir_pdec_r1_out       ;if equal go to output subroutine
00005E56                          7617  
00005E56  B4BC 00000022           7618  SUB_Dn_ea_An_indir_pdec_r2                  CMP.L      #match_SUB_An_indir_predec_reg2,D2       ;check reg is equal to 2
00005E5C  6600 0006               7619                                              BNE        SUB_Dn_ea_An_indir_pdec_r3           ;if not try reg 3
00005E60  6700 0058               7620                                              BEQ        SUB_Dn_ea_An_indir_pdec_r2_out       ;if equal go to output subroutine
00005E64                          7621  
00005E64  B4BC 00000023           7622  SUB_Dn_ea_An_indir_pdec_r3                  CMP.L      #match_SUB_An_indir_predec_reg3,D2       ;check reg is equal to 3
00005E6A  6600 0006               7623                                              BNE        SUB_Dn_ea_An_indir_pdec_r4           ;if not try reg 4
00005E6E  6700 0052               7624                                              BEQ        SUB_Dn_ea_An_indir_pdec_r3_out       ;if equal go to output subroutine
00005E72                          7625  
00005E72  B4BC 00000024           7626  SUB_Dn_ea_An_indir_pdec_r4                  CMP.L      #match_SUB_An_indir_predec_reg4,D2       ;check reg is equal to 4
00005E78  6600 0006               7627                                              BNE        SUB_Dn_ea_An_indir_pdec_r5           ;if not try reg 5
00005E7C  6700 004C               7628                                              BEQ        SUB_Dn_ea_An_indir_pdec_r4_out       ;if equal go to output subroutine
00005E80                          7629  
00005E80  B4BC 00000025           7630  SUB_Dn_ea_An_indir_pdec_r5                  CMP.L      #match_SUB_An_indir_predec_reg5,D2       ;check reg is equal to 5
00005E86  6600 0006               7631                                              BNE        SUB_Dn_ea_An_indir_pdec_r6           ;if not try reg 6
00005E8A  6700 0046               7632                                              BEQ        SUB_Dn_ea_An_indir_pdec_r5_out       ;if equal go to output subroutine
00005E8E                          7633  
00005E8E  B4BC 00000026           7634  SUB_Dn_ea_An_indir_pdec_r6                  CMP.L      #match_SUB_An_indir_predec_reg6,D2       ;check reg is equal to 6
00005E94  6600 0006               7635                                              BNE        SUB_Dn_ea_An_indir_pdec_r7           ;if not try reg 7
00005E98  6700 0040               7636                                              BEQ        SUB_Dn_ea_An_indir_pdec_r6_out       ;if equal go to output subroutine
00005E9C                          7637  
00005E9C  B4BC 00000027           7638  SUB_Dn_ea_An_indir_pdec_r7                  CMP.L      #match_SUB_An_indir_predec_reg7,D2       ;check reg is equal to 7
00005EA2  6700 003E               7639                                              BEQ        SUB_Dn_ea_An_indir_pdec_r7_out       ;if equal go to output subroutine
00005EA6  6600 1076               7640                                              BNE        ERROR                                    ;if not equal to an addresssing mode, pritn error
00005EAA                          7641  
00005EAA                          7642  
00005EAA                          7643  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00005EAA  227C 0000848A           7644  SUB_Dn_ea_An_indir_pdec_r0_out              MOVE.L  #ea_indir_predec_A0,A1         ;load string constant into A1
00005EB0  4E75                    7645                                              RTS
00005EB2                          7646                                              
00005EB2  227C 00008490           7647  SUB_Dn_ea_An_indir_pdec_r1_out              MOVE.L  #ea_indir_predec_A1,A1         ;load string constant into A1
00005EB8  4E75                    7648                                              RTS
00005EBA                          7649  
00005EBA  227C 00008496           7650  SUB_Dn_ea_An_indir_pdec_r2_out              MOVE.L  #ea_indir_predec_A2,A1         ;load string constant into A1
00005EC0  4E75                    7651                                              RTS
00005EC2                          7652  
00005EC2  227C 0000849C           7653  SUB_Dn_ea_An_indir_pdec_r3_out              MOVE.L  #ea_indir_predec_A3,A1         ;load string constant into A1
00005EC8  4E75                    7654                                              RTS
00005ECA                          7655  
00005ECA  227C 000084A2           7656  SUB_Dn_ea_An_indir_pdec_r4_out              MOVE.L  #ea_indir_predec_A4,A1         ;load string constant into A1
00005ED0  4E75                    7657                                              RTS
00005ED2                          7658  
00005ED2  227C 000084A8           7659  SUB_Dn_ea_An_indir_pdec_r5_out              MOVE.L  #ea_indir_predec_A5,A1         ;load string constant into A1
00005ED8  4E75                    7660                                              RTS
00005EDA                          7661  
00005EDA  227C 000084AE           7662  SUB_Dn_ea_An_indir_pdec_r6_out              MOVE.L  #ea_indir_predec_A6,A1         ;load string constant into A1
00005EE0  4E75                    7663                                              RTS
00005EE2                          7664  
00005EE2  227C 000084B4           7665  SUB_Dn_ea_An_indir_pdec_r7_out              MOVE.L  #ea_indir_predec_A7,A1         ;load string constant into A1
00005EE8  4E75                    7666                                              RTS
00005EEA                          7667                      
00005EEA                          7668                          
00005EEA                          7669  ;------------------Absolute Addressing Output-----------------------
00005EEA  22FC 000084C4           7670  SUB_Dn_ea_abs_add_word_out        MOVE.L        #ea_$,(A1)+               ;load $ for hex and increment A1
00005EF0  22C5                    7671                                        MOVE.L        D5,(A1)+                  ;load address                  
00005EF2  4E75                    7672                                        RTS                                     ;return to subroutine
00005EF4                          7673                                             
00005EF4                          7674  
00005EF4  2A18                    7675  SUB_Dn_ea_abs_add_long_out            MOVE.L        (A0)+,D5                   ;pull the next long instruction that holds the address
00005EF6  22FC 000084C4           7676                                        MOVE.L        #ea_$,(A1)+                ;load $ for hex and increment A1
00005EFC  22C5                    7677                                        MOVE.L        D5,(A1)+                   ;load address                  
00005EFE  4E75                    7678                                        RTS                                      ;return to subroutine  
00005F00                          7679  
00005F00                          7680                                            
00005F00                          7681  ;---------------Immediate Addresing--------------------------
00005F00  2A18                    7682  SUB_Dn_ea_immediate_add_out           MOVE.L        (A0)+,D5                       ;capture the immediate address
00005F02  BCBC 000000FC           7683                                        CMP.L         #match_SUB_imm_add_word,D6     ;check to see if need to pull word
00005F08  2A18                    7684                                        MOVE.L        (A0)+,D5                       ;pull the word
00005F0A  6700 0006               7685                                        BEQ           SUB_Dn_ea_imm_add_w            ;if equal go pull word    
00005F0E  6600 000C               7686                                        BNE           SUB_Dn_ea_imm_add_l            ;if not equal, go check long
00005F12                          7687                                           
00005F12  22FC 000084C4           7688  SUB_Dn_ea_imm_add_w                   MOVE.L        #ea_$,(A1)+                    ;load the $
00005F18  32C5                    7689                                        MOVE.W        D5,(A1)+                       ;load the word address                           
00005F1A  4E75                    7690                                        RTS
00005F1C                          7691                                           
00005F1C  2A18                    7692  SUB_Dn_ea_imm_add_l                   MOVE.L        (A0)+,D5                       ;pull the long and increase the pointer
00005F1E  22FC 000084C4           7693                                        MOVE.L        #ea_$,(A1)+                    ;load the $
00005F24                          7694   
00005F24  2245                    7695                                       MOVE.L        D5,A1                          ;move to A1
00005F26  4E75                    7696                                        RTS
00005F28                          7697  
00005F28                          7698  
00005F28  =000001C0               7699  mask_opmode                     EQU             $01C0            ;mask for the opmode to determine operand order
00005F28                          7700  
00005F28  =00000038               7701  mask_SUB_ea_mode        EQU     $0038
00005F28  =0000003F               7702  mask_SUB_abs_add        EQU     $003F
00005F28  =0000003F               7703  mask_SUB_ea_reg_and_mode    EQU     $003F
00005F28  =00000E00               7704  mask_SUB_An_reg         EQU     $0E00
00005F28                          7705  
00005F28                          7706  
00005F28  =00000100               7707  match_SUB_b_ea_Dn               EQU             $0100            ;match for ea,Dn byte size
00005F28  =00000140               7708  match_SUB_w_ea_Dn               EQU             $0140            ;match for ea,Dn word size
00005F28  =00000180               7709  match_SUB_l_ea_Dn               EQU             $0180            ;match for ea,Dn long size
00005F28                          7710  
00005F28  =00000000               7711  match_SUB_b_Dn_ea               EQU             $0000            ;match for Dn,ea byte size
00005F28  =00000040               7712  match_SUB_w_Dn_ea               EQU             $0040            ;match for Dn,ea word size
00005F28  =00000080               7713  match_SUB_l_Dn_ea               EQU             $0080            ;match for Dn,ea long size
00005F28                          7714  
00005F28                          7715  
00005F28                          7716  
00005F28  =00000000               7717  match_SUB_Dn            EQU     $0000
00005F28  =00000008               7718  match_SUB_An            EQU     $0008
00005F28  =00000010               7719  match_SUB_An_indir      EQU     $0010
00005F28  =00000020               7720  match_SUB_An_indir_predec   EQU     $0020
00005F28  =00000018               7721  match_SUB_An_indir_postinc  EQU     $0018
00005F28  =00000038               7722  match_SUB_abs_add_word      EQU     $0038
00005F28  =00000039               7723  match_SUB_abs_add_long      EQU     $0039
00005F28                          7724  
00005F28  =00000000               7725  match_SUB_D0            EQU     $0000
00005F28  =00000001               7726  match_SUB_D1            EQU     $0001
00005F28  =00000002               7727  match_SUB_D2            EQU     $0002
00005F28  =00000003               7728  match_SUB_D3            EQU     $0003
00005F28  =00000004               7729  match_SUB_D4            EQU     $0004
00005F28  =00000005               7730  match_SUB_D5            EQU     $0005
00005F28  =00000006               7731  match_SUB_D6            EQU     $0006
00005F28  =00000007               7732  match_SUB_D7            EQU     $0007
00005F28                          7733  
00005F28  =00000008               7734  match_SUB_A0            EQU     $0008
00005F28  =00000009               7735  match_SUB_A1            EQU     $0009
00005F28  =0000000A               7736  match_SUB_A2            EQU     $000A
00005F28  =0000000B               7737  match_SUB_A3            EQU     $000B
00005F28  =0000000C               7738  match_SUB_A4            EQU     $000C
00005F28  =0000000D               7739  match_SUB_A5            EQU     $000D
00005F28  =0000000E               7740  match_SUB_A6            EQU     $000E
00005F28  =0000000F               7741  match_SUB_A7            EQU     $000F
00005F28                          7742  
00005F28  =00000010               7743  match_SUB_An_indir_r0       EQU     $0010
00005F28  =00000011               7744  match_SUB_An_indir_r1       EQU     $0011
00005F28  =00000012               7745  match_SUB_An_indir_r2       EQU     $0012
00005F28  =00000013               7746  match_SUB_An_indir_r3       EQU     $0013
00005F28  =00000014               7747  match_SUB_An_indir_r4       EQU     $0014
00005F28  =00000015               7748  match_SUB_An_indir_r5       EQU     $0015
00005F28  =00000016               7749  match_SUB_An_indir_r6       EQU     $0016
00005F28  =00000017               7750  match_SUB_An_indir_r7       EQU     $0017
00005F28                          7751  
00005F28  =00000018               7752  match_SUB_An_indir_postinc_r0   EQU     $0018
00005F28  =00000019               7753  match_SUB_An_indir_postinc_r1   EQU     $0019
00005F28  =0000001A               7754  match_SUB_An_indir_postinc_r2   EQU     $001A
00005F28  =0000001B               7755  match_SUB_An_indir_postinc_r3   EQU     $001B
00005F28  =0000001C               7756  match_SUB_An_indir_postinc_r4   EQU     $001C
00005F28  =0000001D               7757  match_SUB_An_indir_postinc_r5   EQU     $001D
00005F28  =0000001E               7758  match_SUB_An_indir_postinc_r6   EQU     $001E
00005F28  =0000001F               7759  match_SUB_An_indir_postinc_r7   EQU     $001F
00005F28                          7760  
00005F28  =00000020               7761  match_SUB_An_indir_predec_reg0  EQU     $0020
00005F28  =00000021               7762  match_SUB_An_indir_predec_reg1  EQU     $0021
00005F28  =00000022               7763  match_SUB_An_indir_predec_reg2  EQU     $0022
00005F28  =00000023               7764  match_SUB_An_indir_predec_reg3  EQU     $0023
00005F28  =00000024               7765  match_SUB_An_indir_predec_reg4  EQU     $0024
00005F28  =00000025               7766  match_SUB_An_indir_predec_reg5  EQU     $0025
00005F28  =00000026               7767  match_SUB_An_indir_predec_reg6  EQU     $0026
00005F28  =00000027               7768  match_SUB_An_indir_predec_reg7  EQU     $0027
00005F28                          7769  
00005F28  =0000003C               7770  match_SUB_imm_add               EQU             $003C
00005F28  =000000FC               7771  match_SUB_imm_add_word          EQU             $00FC
00005F28  =000001FC               7772  match_SUB_imm_add_long          EQU             $01FC
00005F28                          7773  
00005F28  =00000000               7774  match_SUB_reg0          EQU     $0000
00005F28  =00000200               7775  match_SUB_reg1          EQU     $0200
00005F28  =00000400               7776  match_SUB_reg2          EQU     $0400
00005F28  =00000600               7777  match_SUB_reg3          EQU     $0600
00005F28  =00000800               7778  match_SUB_reg4          EQU     $0800
00005F28  =00000A00               7779  match_SUB_reg5          EQU     $0A00
00005F28  =00000C00               7780  match_SUB_reg6          EQU     $0C00
00005F28  =00000E00               7781  match_SUB_reg7          EQU     $0E00
00005F28                          7782  
00005F28                          7783  
00005F28                          7784  
00005F28                          7785  
00005F28                          7786  
00005F28                          7787  -------------------- end include --------------------
00005F28                          7788              INCLUDE 'LSD Subroutine.x68'
00005F28                          7789  
00005F28                          7790  LSD_sub                                       
00005F28                          7791  ;------------------------Determine Shift Type-----------------------------------------------------------------
00005F28  4281                    7792  LSD_shift_type                   CLR.L              D1
00005F2A  3200                    7793                                   MOVE.W             D0,D1
00005F2C  C2BC 000000C0           7794                                   AND.L              #mask_LSD_shift_type,D1                 ;load mask into D1
00005F32  B2BC 000000C0           7795                                   CMP.L              #match_LSD_mem_shift,D1                 ;check to see if memory shift
00005F38  6700 0006               7796                                   BEQ                LSD_mem_shift                               ;if equal go to mem shift subroutine
00005F3C  6600 0306               7797                                   BNE                LSD_reg_shift                               ;if LSD mem shift, go to reg shift
00005F40                          7798  
00005F40                          7799  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
00005F40  4241                    7800  LSD_mem_shift                    CLR               D1                                        ;clear shift mask
00005F42  3200                    7801                                   MOVE.W            D0,D1
00005F44  C2BC 00000038           7802                                   AND.L             #mask_LSD_ea_mode,D1                      ;move the mask to D1
00005F4A                          7803  
00005F4A  B2BC 00000010           7804  LSD_An_indir                     CMP.L             #match_LSD_An_indir,D1                    ;check to see if mode is add reg indir
00005F50  6600 0014               7805                                   BNE               LSD_An_indir_predec                           ;if LSD, go check add reg indir predec 
00005F54  6700 0046               7806                                   BEQ               LSD_An_indir_reg                              ;if equal go figure out the register           
00005F58                          7807            
00005F58  B2BC 00000020           7808  LSD_An_indir_postinc             CMP.L             #match_LSD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
00005F5E  6600 0006               7809                                   BNE               LSD_An_indir_predec                           ;if LSD go check add reg indir/predec
00005F62  6700 0112               7810                                   BEQ               LSD_An_indir_postinc_reg                      ;if equal go figure out the register
00005F66                          7811                        
00005F66  B2BC 00000018           7812  LSD_An_indir_predec              CMP.L             #match_LSD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
00005F6C  6600 0006               7813                                   BNE               LSD_abs_add_word                              ;if LSD go check abs add word
00005F70  6700 01DA               7814                                   BEQ               LSD_An_indir_predec_reg                       ;if equal go figure out the register
00005F74                          7815  
00005F74  4282                    7816  LSD_abs_add_word                 CLR.L             D2
00005F76  3400                    7817                                   MOVE.W            D0,D2
00005F78  C4BC 0000003F           7818                                   AND.L             #mask_LSD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
00005F7E                          7819                                   
00005F7E  B4BC 00000039           7820                                   CMP.L             #match_LSD_abs_add_word,D2                ;check if abs add word
00005F84  2A18                    7821                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00005F86  6600 0006               7822                                   BNE               LSD_abs_add_long                              ;if LSD go check abs add long
00005F8A  6700 029A               7823                                   BEQ               LSD_abs_add_word_out                          ;if equal go to output
00005F8E                          7824    
00005F8E  B4BC 0000003C           7825  LSD_abs_add_long                 CMP.L             #match_LSD_abs_add_long,D2                ;check to see if abs add long
00005F94  6700 029E               7826                                   BEQ               LSD_abs_add_long_out                          ;if equal go to output
00005F98  6600 0F84               7827                                   BNE               ERROR                                     ;if LSD equal to an addresssing mode, pritn error
00005F9C                          7828                               
00005F9C                          7829  
00005F9C                          7830  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00005F9C                          7831                                              
00005F9C                          7832  ;------------------Address Register Indirect-----------------------
00005F9C  4242                    7833  LSD_An_indir_reg                            CLR             D2                                      ;make sure D2 is empty
00005F9E  3400                    7834                                              MOVE.W          D0,D2
00005FA0  C4BC 0000003F           7835                                              AND.L           #mask_LSD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00005FA6                          7836  
00005FA6  B4BC 00000010           7837                                              CMP.L           #match_LSD_An_indir_r0,D2              ;check reg is equal to 0
00005FAC  6600 0006               7838                                              BNE             LSD_An_indir_reg1                            ;if LSD try reg 1
00005FB0  6700 0064               7839                                              BEQ             LSD_An_indir_reg0_out                     ;if equal go to output subroutine
00005FB4                          7840  
00005FB4  B4BC 00000011           7841  LSD_An_indir_reg1                           CMP.L           #match_LSD_An_indir_r1,D2              ;check reg is equal to 1
00005FBA  6600 0006               7842                                              BNE             LSD_An_indir_reg2                            ;if LSD try reg 2
00005FBE  6700 0062               7843                                              BEQ             LSD_An_indir_reg1_out                     ;if equal go to output subroutine
00005FC2                          7844  
00005FC2  B4BC 00000012           7845  LSD_An_indir_reg2                           CMP.L           #match_LSD_An_indir_r2,D2              ;check reg is equal to 2
00005FC8  6600 0006               7846                                              BNE             LSD_An_indir_reg3                            ;if LSD try reg 3
00005FCC  6700 0060               7847                                              BEQ             LSD_An_indir_reg2_out                     ;if equal go to output subroutine
00005FD0                          7848  
00005FD0  B4BC 00000013           7849  LSD_An_indir_reg3                           CMP.L           #match_LSD_An_indir_r3,D2              ;check reg is equal to 3
00005FD6  6600 0006               7850                                              BNE             LSD_An_indir_reg4                            ;if LSD try reg 4
00005FDA  6700 005E               7851                                              BEQ             LSD_An_indir_reg3_out                     ;if equal go to output subroutine
00005FDE                          7852  
00005FDE  B4BC 00000014           7853  LSD_An_indir_reg4                           CMP.L           #match_LSD_An_indir_r4,D2              ;check reg is equal to 4
00005FE4  6600 0006               7854                                              BNE             LSD_An_indir_reg5                            ;if LSD try reg 5
00005FE8  6700 005C               7855                                              BEQ             LSD_An_indir_reg4_out                    ;if equal go to output subroutine
00005FEC                          7856  
00005FEC  B4BC 00000015           7857  LSD_An_indir_reg5                           CMP.L           #match_LSD_An_indir_r5,D2              ;check reg is equal to 5
00005FF2  6600 0006               7858                                              BNE             LSD_An_indir_reg6                            ;if LSD try reg 6
00005FF6  6700 005A               7859                                              BEQ             LSD_An_indir_reg5_out                     ;if equal go to output subroutine
00005FFA                          7860  
00005FFA  B4BC 00000016           7861  LSD_An_indir_reg6                           CMP.L           #match_LSD_An_indir_r6,D2              ;check reg is equal to 6
00006000  6700 005C               7862                                              BEQ             LSD_An_indir_reg6_out                     ;if equal go to output subroutine
00006004  6600 0002               7863                                              BNE             LSD_An_indir_reg7
00006008                          7864  
00006008  B4BC 00000017           7865  LSD_An_indir_reg7                           CMP.L           #match_LSD_An_indir_r7,D2              ;check reg is equal to 6
0000600E  6700 005A               7866                                              BEQ             LSD_An_indir_reg7_out                     ;if equal go to output subroutine
00006012  6600 0F0A               7867                                              BNE             ERROR                                        :if LSD equal to an addresssing mode, pritn error
00006016                          7868  
00006016                          7869  ;--------------------Address Register Indirect Output-----------------------
00006016  227C 00008432           7870  LSD_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
0000601C  4EB8 140A               7871                                          JSR             print_first
00006020  4E75                    7872                                          RTS                                                         ;return to subroutine
00006022                          7873                                      
00006022  227C 00008437           7874  LSD_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
00006028  4EB8 140A               7875                                          JSR             print_first                                     
0000602C  4E75                    7876                                          RTS                                                         ;return to subroutine
0000602E                          7877                                              
0000602E  227C 0000843C           7878  LSD_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
00006034  4EB8 140A               7879                                          JSR             print_first
00006038  4E75                    7880                                          RTS                                                     ;return to subroutine
0000603A                          7881  
0000603A  227C 00008441           7882  LSD_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
00006040  4EB8 140A               7883                                          JSR             print_first                                     
00006044  4E75                    7884                                          RTS                                                     ;return to subroutine
00006046                          7885                                              
00006046  227C 00008446           7886  LSD_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
0000604C  4EB8 140A               7887                                          JSR             print_first
00006050  4E75                    7888                                          RTS                                                         ;return to subroutine
00006052                          7889                                          
00006052  227C 0000844B           7890  LSD_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
00006058  4EB8 140A               7891                                          JSR             print_first                                     
0000605C  4E75                    7892                                          RTS                                                     ;return to subroutine
0000605E                          7893  
0000605E  227C 00008450           7894  LSD_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
00006064  4EB8 140A               7895                                          JSR             print_first                                     
00006068  4E75                    7896                                          RTS                                                         ;return to subroutine
0000606A                          7897  
0000606A  227C 00008455           7898  LSD_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
00006070  4EB8 140A               7899                                          JSR             print_first                                     
00006074  4E75                    7900                                          RTS                                                         ;return to subroutine
00006076                          7901  
00006076                          7902  ;------------------Address Register Indirect with Post Increment-----------------------
00006076  4242                    7903  LSD_An_indir_postinc_reg                    CLR        D2                                      ;make sure D2 is empty
00006078  3400                    7904                                              MOVE.W     D0,D2
0000607A  C4BC 0000003F           7905                                              AND.L      #mask_LSD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00006080                          7906                                              
00006080  B4BC 00000020           7907                                              CMP.L      #match_LSD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00006086  6600 0006               7908                                              BNE        LSD_An_indir_pinc_r1                      ;if LSD try reg 1
0000608A  6700 0060               7909                                              BEQ        LSD_An_indir_pinc_r0_out               ;if equal go to output subroutine
0000608E                          7910  
0000608E  B4BC 00000021           7911  LSD_An_indir_pinc_r1                        CMP.L      #match_LSD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00006094  6600 0006               7912                                              BNE        LSD_An_indir_pinc_r2                      ;if LSD try reg 2
00006098  6700 005E               7913                                              BEQ        LSD_An_indir_pinc_r1_out               ;if equal go to output subroutine
0000609C                          7914  
0000609C  B4BC 00000022           7915  LSD_An_indir_pinc_r2                        CMP.L      #match_LSD_An_indir_postinc_r2,D2        ;check reg is equal to 2
000060A2  6600 0006               7916                                              BNE        LSD_An_indir_pinc_r3                      ;if LSD try reg 3
000060A6  6700 005C               7917                                              BEQ        LSD_An_indir_pinc_r2_out               ;if equal go to output subroutine
000060AA                          7918      
000060AA  B4BC 00000023           7919  LSD_An_indir_pinc_r3                        CMP.L      #match_LSD_An_indir_postinc_r3,D2        ;check reg is equal to 3
000060B0  6600 0006               7920                                              BNE        LSD_An_indir_pinc_r4                      ;if LSD try reg 4
000060B4  6700 005A               7921                                              BEQ        LSD_An_indir_pinc_r3_out               ;if equal go to output subroutine
000060B8                          7922   
000060B8  B4BC 00000024           7923  LSD_An_indir_pinc_r4                        CMP.L      #match_LSD_An_indir_postinc_r4,D2        ;check reg is equal to 4
000060BE  6600 0006               7924                                              BNE        LSD_An_indir_pinc_r5                      ;if LSD try reg 5
000060C2  6700 0058               7925                                              BEQ        LSD_An_indir_pinc_r4_out               ;if equal go to output subroutine
000060C6                          7926  
000060C6  B4BC 00000025           7927  LSD_An_indir_pinc_r5                        CMP.L      #match_LSD_An_indir_postinc_r5,D2        ;check reg is equal to 5
000060CC  6600 0006               7928                                              BNE        LSD_An_indir_pinc_r6                      ;if LSD try reg 6
000060D0  6700 0056               7929                                              BEQ        LSD_An_indir_pinc_r5_out               ;if equal go to output subroutine
000060D4                          7930  
000060D4  B4BC 00000026           7931  LSD_An_indir_pinc_r6                        CMP.L      #match_LSD_An_indir_postinc_r6,D2        ;check reg is equal to 6
000060DA  6700 0058               7932                                              BEQ        LSD_An_indir_pinc_r6_out              ;if equal go to output subroutine
000060DE                          7933  
000060DE  B4BC 00000027           7934  LSD_An_indir_pinc_r7                        CMP.L      #match_LSD_An_indir_postinc_r7,D2        ;check reg is equal to 6
000060E4  6700 005A               7935                                              BEQ        LSD_An_indir_pinc_r7_out              ;if equal go to output subroutine
000060E8  6600 0E34               7936                                              BNE        ERROR                                        :if LSD equal to an addresssing mode, pritn error
000060EC                          7937  
000060EC                          7938  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000060EC  227C 00008460           7939  LSD_An_indir_pinc_r0_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1                                     
000060F2  4EB8 140A               7940                                              JSR             print_first
000060F6  4E75                    7941                                              RTS                                             ;return to subroutine
000060F8                          7942  
000060F8  227C 00008460           7943  LSD_An_indir_pinc_r1_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1                                     
000060FE  4EB8 140A               7944                                              JSR             print_first
00006102  4E75                    7945                                              RTS                                             ;return to subroutine
00006104                          7946  
00006104  227C 00008466           7947  LSD_An_indir_pinc_r2_out                    MOVE.L          #ea_indir_postinc_A2,A1                         ;load string constant into A1                                     
0000610A  4EB8 140A               7948                                              JSR             print_first
0000610E  4E75                    7949                                              RTS                                             ;return to subroutine
00006110                          7950  
00006110  227C 0000846C           7951  LSD_An_indir_pinc_r3_out                    MOVE.L          #ea_indir_postinc_A3,A1                         ;load string constant into A1                                     
00006116  4EB8 140A               7952                                              JSR             print_first
0000611A  4E75                    7953                                              RTS                                             ;return to subroutine
0000611C                          7954  
0000611C  227C 00008472           7955  LSD_An_indir_pinc_r4_out                    MOVE.L          #ea_indir_postinc_A4,A1                         ;load string constant into A1                                     
00006122  4EB8 140A               7956                                              JSR             print_first
00006126  4E75                    7957                                              RTS                                             ;return to subroutine
00006128                          7958  
00006128  227C 00008478           7959  LSD_An_indir_pinc_r5_out                    MOVE.L          #ea_indir_postinc_A5,A1                         ;load string constant into A1                                     
0000612E  4EB8 140A               7960                                              JSR             print_first
00006132  4E75                    7961                                              RTS                                             ;return to subroutine
00006134                          7962   
00006134  227C 0000847E           7963  LSD_An_indir_pinc_r6_out                    MOVE.L          #ea_indir_postinc_A6,A1                         ;load string constant into A1                                     
0000613A  4EB8 140A               7964                                              JSR             print_first
0000613E  4E75                    7965                                              RTS                                             ;return to subroutine
00006140                          7966  
00006140  227C 00008484           7967  LSD_An_indir_pinc_r7_out                    MOVE.L          #ea_indir_postinc_A7,A1                         ;load string constant into A1                                     
00006146  4EB8 140A               7968                                              JSR             print_first
0000614A  4E75                    7969                                              RTS                                             ;return to subroutine
0000614C                          7970  
0000614C                          7971                                                      
0000614C                          7972  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000614C  4242                    7973  LSD_An_indir_predec_reg                     CLR        D2                                      ;make sure D2 is empty
0000614E  3400                    7974                                              MOVE.W     D0,D2
00006150  C4BC 0000003F           7975                                              AND.L      #mask_LSD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00006156                          7976                                              
00006156  B4BC 00000018           7977                                              CMP.L      #match_LSD_An_indir_predec_r0,D2         ;check reg is equal to 0
0000615C  6600 0006               7978                                              BNE        LSD_An_indir_pdec_r1                      ;if LSD try reg 1
00006160  6700 0064               7979                                              BEQ        LSD_An_indir_pdec_r0_out               ;if equal go to output subroutine
00006164                          7980  
00006164  B4BC 00000019           7981  LSD_An_indir_pdec_r1                        CMP.L      #match_LSD_An_indir_predec_r1,D2         ;check reg is equal to 1
0000616A  6600 0006               7982                                              BNE        LSD_An_indir_pdec_r2                      ;if LSD try reg 2
0000616E  6700 0062               7983                                              BEQ        LSD_An_indir_pdec_r1_out               ;if equal go to output subroutine
00006172                          7984  
00006172  B4BC 0000001A           7985  LSD_An_indir_pdec_r2                        CMP.L      #match_LSD_An_indir_predec_r2,D2         ;check reg is equal to 2
00006178  6600 0006               7986                                              BNE        LSD_An_indir_pdec_r3                      ;if LSD try reg 3
0000617C  6700 0060               7987                                              BEQ        LSD_An_indir_pdec_r2_out               ;if equal go to output subroutine
00006180                          7988  
00006180  B4BC 0000001B           7989  LSD_An_indir_pdec_r3                        CMP.L      #match_LSD_An_indir_predec_r3,D2         ;check reg is equal to 3
00006186  6600 0006               7990                                              BNE        LSD_An_indir_pdec_r4                      ;if LSD try reg 4
0000618A  6700 005E               7991                                              BEQ        LSD_An_indir_pdec_r3_out               ;if equal go to output subroutine
0000618E                          7992  
0000618E  B4BC 0000001C           7993  LSD_An_indir_pdec_r4                        CMP.L      #match_LSD_An_indir_predec_r4,D2         ;check reg is equal to 4
00006194  6600 0006               7994                                              BNE        LSD_An_indir_pdec_r5                      ;if LSD try reg 5
00006198  6700 005C               7995                                              BEQ        LSD_An_indir_pdec_r4_out               ;if equal go to output subroutine
0000619C                          7996  
0000619C  B4BC 0000001D           7997  LSD_An_indir_pdec_r5                        CMP.L      #match_LSD_An_indir_predec_r5,D2         ;check reg is equal to 5
000061A2  6600 0006               7998                                              BNE        LSD_An_indir_pdec_r6                      ;if LSD try reg 6
000061A6  6700 005A               7999                                              BEQ        LSD_An_indir_pdec_r5_out               ;if equal go to output subroutine
000061AA                          8000  
000061AA  B4BC 0000001E           8001  LSD_An_indir_pdec_r6                        CMP.L      #match_LSD_An_indir_predec_r6,D2         ;check reg is equal to 6
000061B0  6700 005C               8002                                              BEQ        LSD_An_indir_pdec_r6_out               ;if equal go to output subroutine
000061B4  6600 0002               8003                                              BNE        LSD_An_indir_pdec_r7
000061B8                          8004                                              
000061B8  B4BC 00000001           8005  LSD_An_indir_pdec_r7                        CMP.L      #match_LSD_An_indir_predec_r7,D2         ;check reg is equal to 6
000061BE  6700 005A               8006                                              BEQ        LSD_An_indir_pdec_r7_out               ;if equal go to output subroutine
000061C2  6600 0D5A               8007                                              BNE        ERROR                                        :if LSD equal to an addresssing mode, pritn error
000061C6                          8008  
000061C6                          8009  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000061C6  227C 0000848A           8010  LSD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
000061CC  4EB8 140A               8011                                              JSR             print_first                                     
000061D0  4E75                    8012                                              RTS                                                     ;return to subroutine
000061D2                          8013  
000061D2  227C 00008490           8014  LSD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
000061D8  4EB8 140A               8015                                              JSR             print_first                                     
000061DC  4E75                    8016                                              RTS                                                     ;return to subroutine
000061DE                          8017                                                      
000061DE  227C 00008496           8018  LSD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
000061E4  4EB8 140A               8019                                              JSR             print_first                                     
000061E8  4E75                    8020                                              RTS                                                     ;return to subroutine
000061EA                          8021  
000061EA  227C 0000849C           8022  LSD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
000061F0  4EB8 140A               8023                                              JSR             print_first                                     
000061F4  4E75                    8024                                              RTS                                                     ;return to subroutine
000061F6                          8025  
000061F6  227C 000084A2           8026  LSD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
000061FC  4EB8 140A               8027                                              JSR             print_first                                     
00006200  4E75                    8028                                              RTS                                                     ;return to subroutine
00006202                          8029      
00006202  227C 000084A8           8030  LSD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00006208  4EB8 140A               8031                                              JSR             print_first                                     
0000620C  4E75                    8032                                              RTS                                                     ;return to subroutine
0000620E                          8033      
0000620E  227C 000084AE           8034  LSD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
00006214  4EB8 140A               8035                                              JSR             print_first                                     
00006218  4E75                    8036                                              RTS                                                     ;return to subroutine
0000621A                          8037  
0000621A  227C 000084B4           8038  LSD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
00006220  4EB8 140A               8039                                              JSR             print_first                                     
00006224  4E75                    8040                                              RTS                                                     ;return to subroutine
00006226                          8041                                                      
00006226                          8042  ;------------------Absolute Addressing Output-----------------------
00006226  22FC 000084C4           8043  LSD_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000622C  22C5                    8044                                           MOVE.L      D5,(A1)+                           ;load address                  
0000622E  4EB8 140A               8045                                           JSR         print_first
00006232  4E75                    8046                                           RTS                                            :return to subroutine
00006234                          8047                                             
00006234                          8048  
00006234  2A18                    8049  LSD_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00006236  22FC 000084C4           8050                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000623C  22C5                    8051                                           MOVE.L      D5,(A1)+                           ;load address                  
0000623E  4EB8 140A               8052                                           JSR         print_first                                     
00006242  4E75                    8053                                           RTS                                            :return to subroutine                                            
00006244                          8054  
00006244                          8055                                                  
00006244                          8056  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
00006244                          8057  ; determine if the shift is a data register or a immediate value
00006244  4241                    8058  LSD_reg_shift                       CLR         D1                              ;clear D1
00006246  3200                    8059                                      MOVE.W      D0,D1                
00006248  C2BC 00000020           8060                                      AND.L       #mask_LSD_reg_shift_ir,D1           ;load the mask into D1
0000624E                          8061                                      
0000624E  B2BC 00000020           8062                                      CMP.L       #match_LSD_shift_reg,D1             ;check to see if the shift is a data register
00006254  6700 0006               8063                                      BEQ         LSD_shift_reg                       ;if the shift is a register, go to subroutine
00006258  6600 007C               8064                                      BNE         LSD_count_val                       ;if LSD go to immediate value subroutine
0000625C                          8065  
0000625C                          8066  ;i/r = 1, the shift is a Data register                                    
0000625C                          8067  ; this the subroutine for the data register shift
0000625C  4241                    8068  LSD_shift_reg                       CLR         D1                              ;clear D1
0000625E  3200                    8069                                      MOVE.W      D0,D1
00006260  C2BC 00000020           8070                                      AND.L       #mask_LSD_reg_shift,D1              ;load mask into D1 for bits 11-9
00006266                          8071  
00006266  B2BC 00000000           8072  LSD_count_reg0                      CMP.L       #match_LSD_count_reg0,D1            ;check to see if count/shift = 0
0000626C  6600 0006               8073                                      BNE         LSD_count_reg1                    ;if LSD go check 1
00006270  6700 015E               8074                                      BEQ         LSD_count_reg0_out                ;got to output
00006274                          8075                                      
00006274  B2BC 00000200           8076  LSD_count_reg1                      CMP.L       #match_LSD_count_reg1,D1            ;check to see if count/shift = 1
0000627A  6600 0006               8077                                      BNE         LSD_count_reg2                    ;if LSD go check 2
0000627E  6700 0160               8078                                      BEQ         LSD_count_reg1_out                ;got to output
00006282                          8079  
00006282  B2BC 00000400           8080  LSD_count_reg2                      CMP.L       #match_LSD_count_reg2,D1            ;check to see if count/shift = 2
00006288  6600 0006               8081                                      BNE         LSD_count_reg3                    ;if LSD go check 3
0000628C  6700 0162               8082                                      BEQ         LSD_count_reg2_out                ;got to output
00006290                          8083  
00006290  B2BC 00000600           8084  LSD_count_reg3                      CMP.L       #match_LSD_count_reg3,D1            ;check to see if count/shift = 3
00006296  6600 0006               8085                                      BNE         LSD_count_reg4                    ;if LSD go check 4
0000629A  6700 0164               8086                                      BEQ         LSD_count_reg3_out                ;got to output
0000629E                          8087  
0000629E  B2BC 00000800           8088  LSD_count_reg4                      CMP.L       #match_LSD_count_reg4,D1            ;check to see if count/shift = 4
000062A4  6600 0006               8089                                      BNE         LSD_count_reg5                    ;if LSD go check 5
000062A8  6700 0166               8090                                      BEQ         LSD_count_reg4_out                ;got to output
000062AC                          8091  
000062AC  B2BC 00000A00           8092  LSD_count_reg5                      CMP.L       #match_LSD_count_reg5,D1            ;check to see if count/shift = 5
000062B2  6600 0006               8093                                      BNE         LSD_count_reg6                      ;if LSD go check 6
000062B6  6700 0168               8094                                      BEQ         LSD_count_reg5_out                  ;got to output
000062BA                          8095  
000062BA  B2BC 00000C00           8096  LSD_count_reg6                      CMP.L       #match_LSD_count_reg6,D1            ;check to see if count/shift = 6
000062C0  6600 0006               8097                                      BNE         LSD_count_reg7                      ;if LSD go check 7
000062C4  6700 016A               8098                                      BEQ         LSD_count_reg6_out                  ;got to output
000062C8                          8099  
000062C8  B2BC 00000E00           8100  LSD_count_reg7                      CMP.L       #match_LSD_count_reg7,D1            ;check to see if count/shift = 7
000062CE  6600 0C4E               8101                                      BNE         ERROR                           ; if none of the registers, then print error message
000062D2  6700 016C               8102                                      BEQ         LSD_count_reg7_out                  ;got to output
000062D6                          8103  
000062D6                          8104  
000062D6                          8105  
000062D6                          8106  ;i/r = 0, the shift is an immediate value
000062D6                          8107  ;1-7 = 1-7
000062D6                          8108  ;0 = 8
000062D6                          8109  ; this is the subroutine for the immedite value shift
000062D6  4241                    8110  LSD_count_val                       CLR         D1                              ;clear D1
000062D8  3200                    8111                                      MOVE.W      D0,D1
000062DA  C2BC 00000E00           8112                                      AND.L       #mask_LSD_count_shift,D1
000062E0                          8113                                      
000062E0  B2BC 00000000           8114                                      CMP.L       #match_LSD_count_val0,D1          ;check to see if shift count is 0
000062E6  6600 0006               8115                                      BNE         LSD_count_val1                    ;if LSD 0 check 1
000062EA  6700 0064               8116                                      BEQ         LSD_count_val0_out                ;if 0 got to output
000062EE                          8117  
000062EE  B2BC 00000200           8118  LSD_count_val1                      CMP.L       #match_LSD_count_val1,D1          ;check to see if shift count is 0
000062F4  6600 0006               8119                                      BNE         LSD_count_val2                    ;if LSD 0 check 1
000062F8  6700 0066               8120                                      BEQ         LSD_count_val1_out                ;if 0 got to output
000062FC                          8121  
000062FC  B2BC 00000400           8122  LSD_count_val2                      CMP.L       #match_LSD_count_val2,D1          ;check to see if shift count is 0
00006302  6600 0006               8123                                      BNE         LSD_count_val3                    ;if LSD 0 check 1
00006306  6700 0068               8124                                      BEQ         LSD_count_val2_out                ;if 0 got to output
0000630A                          8125  
0000630A  B2BC 00000600           8126  LSD_count_val3                      CMP.L       #match_LSD_count_val3,D1          ;check to see if shift count is 0
00006310  6600 0006               8127                                      BNE         LSD_count_val4                    ;if LSD 0 check 1
00006314  6700 006A               8128                                      BEQ         LSD_count_val3_out                ;if 0 got to output
00006318                          8129  
00006318  B2BC 00000800           8130  LSD_count_val4                      CMP.L       #match_LSD_count_val4,D1          ;check to see if shift count is 0
0000631E  6600 0006               8131                                      BNE         LSD_count_val5                    ;if LSD 0 check 1
00006322  6700 006C               8132                                      BEQ         LSD_count_val4_out                ;if 0 got to output
00006326                          8133  
00006326  B2BC 00000A00           8134  LSD_count_val5                      CMP.L       #match_LSD_count_val5,D1          ;check to see if shift count is 0
0000632C  6600 0006               8135                                      BNE         LSD_count_val6                    ;if LSD 0 check 1
00006330  6700 006E               8136                                      BEQ         LSD_count_val5_out                ;if 0 got to output
00006334                          8137  
00006334  B2BC 00000C00           8138  LSD_count_val6                      CMP.L       #match_LSD_count_val6,D1          ;check to see if shift count is 0
0000633A  6600 0006               8139                                      BNE         LSD_count_val7                    ;if LSD 0 check 1
0000633E  6700 0070               8140                                      BEQ         LSD_count_val6_out                ;if 0 got to output
00006342                          8141  
00006342  B2BC 00000E00           8142  LSD_count_val7                      CMP.L       #match_LSD_count_val7,D1          ;check to see if shift count is 0
00006348  6600 0BD4               8143                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
0000634C  6700 0072               8144                                      BEQ         LSD_count_val7_out                ;if 0 got to output
00006350                          8145  
00006350                          8146  ;-----------------------------------Count Shift Immedite Value Output---------------------------
00006350  227C 00008422           8147  LSD_count_val0_out            MOVE.L            #ea_val0,A1         ;load string constant into A1
00006356  4EB8 140A               8148                                JSR               print_first                           
0000635A  4EB9 00006450           8149                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006360                          8150                                
00006360  227C 00008424           8151  LSD_count_val1_out            MOVE.L            #ea_val1,A1         ;load string constant into A1
00006366  4EB8 140A               8152                                JSR               print_first
0000636A  4EB9 00006450           8153                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006370                          8154  
00006370  227C 00008426           8155  LSD_count_val2_out            MOVE.L            #ea_val2,A1         ;load string constant into A1
00006376  4EB8 140A               8156                                JSR               print_first
0000637A  4EB9 00006450           8157                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006380                          8158  
00006380  227C 00008428           8159  LSD_count_val3_out            MOVE.L            #ea_val3,A1         ;load string constant into A1
00006386  4EB8 140A               8160                                JSR               print_first
0000638A  4EB9 00006450           8161                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006390                          8162  
00006390  227C 0000842A           8163  LSD_count_val4_out            MOVE.L            #ea_val4,A1         ;load string constant into A1
00006396  4EB8 140A               8164                                JSR               print_first
0000639A  4EB9 00006450           8165                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000063A0                          8166  
000063A0  227C 0000842C           8167  LSD_count_val5_out            MOVE.L            #ea_val5,A1         ;load string constant into A1
000063A6  4EB8 140A               8168                                JSR               print_first
000063AA  4EB9 00006450           8169                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000063B0                          8170  
000063B0  227C 0000842E           8171  LSD_count_val6_out            MOVE.L            #ea_val6,A1         ;load string constant into A1
000063B6  4EB8 140A               8172                                JSR               print_first
000063BA  4EB9 00006450           8173                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000063C0                          8174  
000063C0  227C 00008430           8175  LSD_count_val7_out            MOVE.L            #ea_val7,A1         ;load string constant into A1
000063C6  4EB8 140A               8176                                JSR               print_first
000063CA  4EB9 00006450           8177                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000063D0                          8178  
000063D0                          8179  ;-------------------------Count Shift Output (Dn)-----------------------------------------
000063D0  227C 000083F2           8180  LSD_count_reg0_out            MOVE.L            #ea_D0,A1           ;load string constant into A1
000063D6  4EB8 140A               8181                                JSR               print_first
000063DA  4EB9 00006450           8182                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000063E0                          8183                                
000063E0  227C 000083F5           8184  LSD_count_reg1_out            MOVE.L            #ea_D1,A1           ;load string constant into A1
000063E6  4EB8 140A               8185                                JSR               print_first
000063EA  4EB9 00006450           8186                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000063F0                          8187                                
000063F0  227C 000083F8           8188  LSD_count_reg2_out            MOVE.L            #ea_D2,A1           ;load string constant into A1
000063F6  4EB8 140A               8189                                JSR               print_first
000063FA  4EB9 00006450           8190                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006400                          8191                                
00006400  227C 000083FB           8192  LSD_count_reg3_out            MOVE.L            #ea_D3,A1           ;load string constant into A1
00006406  4EB8 140A               8193                                JSR               print_first
0000640A  4EB9 00006450           8194                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006410                          8195                                
00006410  227C 000083FE           8196  LSD_count_reg4_out            MOVE.L            #ea_D4,A1           ;load string constant into A1
00006416  4EB8 140A               8197                                JSR               print_first
0000641A  4EB9 00006450           8198                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006420                          8199                                
00006420  227C 00008401           8200  LSD_count_reg5_out            MOVE.L            #ea_D5,A1           ;load string constant into A1
00006426  4EB8 140A               8201                                JSR               print_first
0000642A  4EB9 00006450           8202                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006430                          8203                                
00006430  227C 00008404           8204  LSD_count_reg6_out            MOVE.L            #ea_D6,A1           ;load string constant into A1
00006436  4EB8 140A               8205                                JSR               print_first
0000643A  4EB9 00006450           8206                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006440                          8207                                
00006440  227C 00008407           8208  LSD_count_reg7_out            MOVE.L            #ea_D7,A1           ;load string constant into A1
00006446  4EB8 140A               8209                                JSR               print_first
0000644A  4EB9 00006450           8210                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand                                    
00006450                          8211                                      
00006450                          8212                                      
00006450                          8213  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
00006450  4241                    8214  LSD_Dn0                         CLR         D1                              ;clear D1
00006452  3200                    8215                                  MOVE.W      D0,D1
00006454  C2BC 00000007           8216                                  AND.L           #mask_LSD_data_reg,D1   ;load data register mask for second operand
0000645A                          8217                                  
0000645A  B2BC 00000000           8218                                  CMP.L           #match_LSD_D_reg0,D1          ;check if data register is D0
00006460  6700 0068               8219                                  BEQ             LSD_D0_out              ;if equal got to output subroutine
00006464  6600 0002               8220                                  BNE             LSD_Dn1                 ;if LSD check D1
00006468                          8221                                  
00006468  B2BC 00000001           8222  LSD_Dn1                         CMP.L           #match_LSD_D_reg1,D1          ;check if data register is D0
0000646E  6700 0062               8223                                  BEQ             LSD_D1_out              ;if equal got to output subroutine
00006472  6600 0002               8224                                  BNE             LSD_Dn2                 ;if LSD check D2
00006476                          8225  
00006476  B2BC 00000002           8226  LSD_Dn2                         CMP.L           #match_LSD_D_reg2,D1          ;check if data register is D0
0000647C  6700 005C               8227                                  BEQ             LSD_D2_out              ;if equal got to output subroutine
00006480  6600 0002               8228                                  BNE             LSD_Dn3                 ;if LSD check D3
00006484                          8229  
00006484  B2BC 00000003           8230  LSD_Dn3                         CMP.L           #match_LSD_D_reg3,D1          ;check if data register is D0
0000648A  6700 0056               8231                                  BEQ             LSD_D3_out              ;if equal got to output subroutine
0000648E  6600 0002               8232                                  BNE             LSD_Dn4                 ;if LSD check D4
00006492                          8233  
00006492  B2BC 00000004           8234  LSD_Dn4                         CMP.L           #match_LSD_D_reg4,D1          ;check if data register is D0
00006498  6700 0050               8235                                  BEQ             LSD_D4_out              ;if equal got to output subroutine
0000649C  6600 0002               8236                                  BNE             LSD_Dn5                 ;if LSD check D5
000064A0                          8237  
000064A0  B2BC 00000005           8238  LSD_Dn5                         CMP.L           #match_LSD_D_reg5,D1          ;check if data register is D0
000064A6  6700 004A               8239                                  BEQ             LSD_D5_out              ;if equal got to output subroutine
000064AA  6600 0002               8240                                  BNE             LSD_Dn6                 ;if LSD check D6
000064AE                          8241  
000064AE  B2BC 00000006           8242  LSD_Dn6                         CMP.L           #match_LSD_D_reg6,D1          ;check if data register is D0
000064B4  6700 0044               8243                                  BEQ             LSD_D6_out              ;if equal got to output subroutine
000064B8  6600 0002               8244                                  BNE             LSD_Dn7                 ;if LSD check D7
000064BC                          8245  
000064BC  B2BC 00000007           8246  LSD_Dn7                         CMP.L           #match_LSD_D_reg7,D1          ;check if data register is D0
000064C2  6700 003E               8247                                  BEQ             LSD_D7_out              ;if equal got to output subroutine
000064C6  6600 0A56               8248                                  BNE             ERROR               :if none of the registers go to error sub routine
000064CA                          8249                                  
000064CA                          8250                                  
000064CA                          8251  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
000064CA  227C 000083F2           8252  LSD_D0_out                    MOVE.L            #ea_D0,A1           ;load string constant into A1
000064D0  4E75                    8253                                RTS                                   ;return to subroutine
000064D2                          8254  
000064D2  227C 000083F5           8255  LSD_D1_out                    MOVE.L            #ea_D1,A1           ;load string constant into A1                                    
000064D8  4E75                    8256                                RTS                                   ;return to subroutine
000064DA                          8257  
000064DA  227C 000083F8           8258  LSD_D2_out                    MOVE.L            #ea_D2,A1           ;load string constant into A1                                     
000064E0  4E75                    8259                                RTS                                   ;return to subroutine
000064E2                          8260              
000064E2  227C 000083FB           8261  LSD_D3_out                    MOVE.L            #ea_D3,A1           ;load string constant into A1                                    
000064E8  4E75                    8262                                RTS                                   ;return to subroutine
000064EA                          8263  
000064EA  227C 000083FE           8264  LSD_D4_out                    MOVE.L            #ea_D4,A1           ;load string constant into A1                                    
000064F0  4E75                    8265                                RTS                                   ;return to subroutine
000064F2                          8266  
000064F2  227C 00008401           8267  LSD_D5_out                    MOVE.L            #ea_D5,A1           ;load string constant into A1                                     
000064F8  4E75                    8268                                RTS                                   ;return to subroutine
000064FA                          8269  
000064FA  227C 00008404           8270  LSD_D6_out                    MOVE.L            #ea_D6,A1           ;load string constant into A1                                     
00006500  4E75                    8271                                RTS                                   ;return to subroutine
00006502                          8272  
00006502  227C 00008407           8273  LSD_D7_out                    MOVE.L            #ea_D7,A1           ;load string constant into A1                                     
00006508  4E75                    8274                                RTS                                   ;return to subroutine
0000650A                          8275  
0000650A                          8276                                      
0000650A                          8277  
0000650A  =000000C0               8278  mask_LSD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
0000650A  =00000038               8279  mask_LSD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
0000650A  =0000003F               8280  mask_LSD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
0000650A  =0000003F               8281  mask_LSD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
0000650A  =00000020               8282  mask_LSD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
0000650A  =00000E00               8283  mask_LSD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
0000650A  =00000020               8284  mask_LSD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
0000650A  =00000007               8285  mask_LSD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
0000650A                          8286  
0000650A  =00000000               8287  match_LSD_D_reg0                                EQU             $0000               ;match for second operand data register 0
0000650A  =00000001               8288  match_LSD_D_reg1                                EQU             $0001               ;match for second operand data register 1
0000650A  =00000002               8289  match_LSD_D_reg2                                EQU             $0002               ;match for second operand data register 2
0000650A  =00000003               8290  match_LSD_D_reg3                                EQU             $0003               ;match for second operand data register 3
0000650A  =00000004               8291  match_LSD_D_reg4                                EQU             $0004               ;match for second operand data register 4
0000650A  =00000005               8292  match_LSD_D_reg5                                EQU             $0005               ;match for second operand data register 5
0000650A  =00000006               8293  match_LSD_D_reg6                                EQU             $0006               ;match for second operand data register 6
0000650A  =00000007               8294  match_LSD_D_reg7                                EQU             $0007               ;match for second operand data register 7
0000650A                          8295  
0000650A  =00000000               8296  match_LSD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
0000650A  =00000200               8297  match_LSD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
0000650A  =00000400               8298  match_LSD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
0000650A  =00000600               8299  match_LSD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
0000650A  =00000800               8300  match_LSD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
0000650A  =00000A00               8301  match_LSD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
0000650A  =00000C00               8302  match_LSD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
0000650A  =00000E00               8303  match_LSD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
0000650A                          8304  
0000650A  =00000020               8305  match_LSD_shift_reg                             EQU             $0020               ;match to for a register shift
0000650A  =00000000               8306  match_LSD_count_val0                            EQU             $0000               ;match for shift reg 0
0000650A  =00000200               8307  match_LSD_count_val1                           EQU             $0200               ;match for shift reg 1
0000650A  =00000400               8308  match_LSD_count_val2                            EQU             $0400               ;match for shift reg 2
0000650A  =00000600               8309  match_LSD_count_val3                            EQU             $0600               ;match for shift reg 3
0000650A  =00000800               8310  match_LSD_count_val4                            EQU             $0800               ;match for shift reg 4
0000650A  =00000A00               8311  match_LSD_count_val5                            EQU             $0A00               ;match for shift reg 5
0000650A  =00000C00               8312  match_LSD_count_val6                            EQU             $0C00               ;match for shift reg 6
0000650A  =00000E00               8313  match_LSD_count_val7                            EQU             $0E00               ;match for shift reg 7
0000650A                          8314  
0000650A  =00000020               8315  match_LSD_shift_count                           EQU             $0020
0000650A  =000000C0               8316  match_LSD_mem_shift                         EQU             $00C0              ;match for memory shift
0000650A  =00000010               8317  match_LSD_An_indir                          EQU             $0010              ;match for add reg indir
0000650A  =00000020               8318  match_LSD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
0000650A  =00000018               8319  match_LSD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
0000650A  =00000039               8320  match_LSD_abs_add_word                      EQU             $0039              ;match for word abs add 
0000650A  =0000003C               8321  match_LSD_abs_add_long                      EQU             $003C              ;match for long abs add
0000650A                          8322  
0000650A                          8323  
0000650A  =00000010               8324  match_LSD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
0000650A  =00000011               8325  match_LSD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
0000650A  =00000012               8326  match_LSD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
0000650A  =00000013               8327  match_LSD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
0000650A  =00000014               8328  match_LSD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
0000650A  =00000015               8329  match_LSD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
0000650A  =00000016               8330  match_LSD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
0000650A  =00000017               8331  match_LSD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
0000650A                          8332  
0000650A  =00000020               8333  match_LSD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
0000650A  =00000021               8334  match_LSD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
0000650A  =00000022               8335  match_LSD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
0000650A  =00000023               8336  match_LSD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
0000650A  =00000024               8337  match_LSD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
0000650A  =00000025               8338  match_LSD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
0000650A  =00000026               8339  match_LSD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
0000650A  =00000027               8340  match_LSD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
0000650A                          8341  
0000650A                          8342  
0000650A  =00000018               8343  match_LSD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
0000650A  =00000019               8344  match_LSD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
0000650A  =0000001A               8345  match_LSD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
0000650A  =0000001B               8346  match_LSD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
0000650A  =0000001C               8347  match_LSD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
0000650A  =0000001D               8348  match_LSD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
0000650A  =0000001E               8349  match_LSD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
0000650A  =00000001               8350  match_LSD_An_indir_predec_r7                EQU             $001              ;match for add reg indir with predec with add reg 7
0000650A                          8351  
0000650A                          8352  
0000650A                          8353  
0000650A                          8354  
0000650A                          8355  
0000650A                          8356  
0000650A                          8357  
0000650A                          8358  
0000650A                          8359  
0000650A                          8360  
0000650A                          8361  -------------------- end include --------------------
0000650A                          8362              INCLUDE 'MOVEA Subroutine.x68'
0000650A                          8363     
0000650A                          8364  MOVEA_sub                                         ;preserve the registers, 
0000650A  4241                    8365                                   CLR                D1
0000650C  C2BC 00000038           8366                                   AND.L             #mask_MOVEA_ea_mode,D1                  ;move the mask to D1
00006512                          8367  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00006512  B2BC 00000000           8368  MOVEA_data_reg_dir               CMP.L             #match_MOVEA_Dn,D1                      ;check to see if mode is data reg direct
00006518  6600 0006               8369                                   BNE               MOVEA_add_reg_dir                       ;if not, go check add reg dir
0000651C  6700 006A               8370                                   BEQ               MOVEA_Dn_reg                            ;if equal go figure out the register
00006520                          8371  
00006520  B2BC 00000008           8372  MOVEA_add_reg_dir                CMP.L             #match_MOVEA_An,D1                      ;check if mode is add reg direct
00006526  6600 0006               8373                                   BNE               MOVEA_add_reg_indir                     ;if not, go check add reg indir
0000652A  6700 0142               8374                                   BEQ               MOVEA_An_reg                            ;if equal go figure out the reg
0000652E                          8375   
0000652E  B2BC 00000010           8376  MOVEA_add_reg_indir              CMP.L             #match_MOVEA_An_indir,D1                ;check to see if mode is add reg indir
00006534  6600 0006               8377                                   BNE               MOVEA_add_reg_indir_predec              ;if not, go check add reg indir predec 
00006538  6700 0214               8378                                   BEQ               MOVEA_An_indir_reg                      ;if equal go figure out the register           
0000653C                          8379             
0000653C  B2BC 00000020           8380  MOVEA_add_reg_indir_predec       CMP.L             #match_MOVEA_An_indir_predec,D1         ;check to see if mode is add reg indor w/ postinc
00006542  6600 0006               8381                                   BNE               MOVEA_add_reg_indir_postinc             ;if not go check add reg indir/predec
00006546  6700 03C6               8382                                   BEQ               MOVEA_An_indir_predec                   ;if equal go figure out the register
0000654A                          8383                        
0000654A  B2BC 00000018           8384  MOVEA_add_reg_indir_postinc      CMP.L             #match_MOVEA_An_indir_postinc,D1        ;check to see if mode is add reg indir w/predec
00006550  6600 0006               8385                                   BNE               MOVEA_abs_add_word                      ;if not go check abs add word
00006554  6700 02D8               8386                                   BEQ               MOVEA_An_indir_postinc_reg              ;if equal go figure out the register
00006558                          8387  
00006558  4242                    8388  MOVEA_abs_add_word               CLR               D2
0000655A  C4BC 0000003F           8389                                   AND.L             #mask_MOVEA_abs_add,D2                  ;load mask to determine if abs add word or long
00006560                          8390                                   
00006560  B4BC 00000038           8391                                   CMP.L             #match_MOVEA_abs_add_word,D2            ;check if abs add word
00006566  2A18                    8392                                   MOVE.L            (A0)+,D5                                ;pull the next word instruction that holds the address
00006568  6600 0006               8393                                   BNE               MOVEA_abs_add_long                      ;if not go check abs add long
0000656C  6700 0480               8394                                   BEQ               MOVEA_abs_add_word_out                  ;if equal go to output
00006570                          8395    
00006570  B4BC 00000039           8396  MOVEA_abs_add_long               CMP.L             #match_MOVEA_abs_add_long,D2            ;check to see if abs add long
00006576  6700 0480               8397                                   BEQ               MOVEA_abs_add_long_out                  ;if equal go to output
0000657A                          8398                                   
0000657A  B2BC 0000003C           8399  MOVEA_immediate_add              CMP.L             #match_MOVEA_imm_add,D1                       ;check if immediate address
00006580  6700 0482               8400                                   BEQ               MOVEA_immediate_add_out                 ;if equal go to immediate add sub routine
00006584  6600 0998               8401                                   BNE               ERROR                                   ;if not equal go to error mesage sub routine
00006588                          8402  
00006588                          8403  
00006588                          8404  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00006588                          8405                                   
00006588                          8406                              
00006588                          8407  ;-----------------------------------Data Register Direct--------------------------------
00006588  C4BC 0000003F           8408  MOVEA_Dn_reg                AND.L              #mask_MOVEA_ea_reg_and_mode,D2     ;load the mask into D2 for the mode and the register
0000658E  B4BC 00000000           8409                              CMP.L              #match_MOVEA_D0,D2              ;check to see in the register is 0
00006594  6600 0006               8410                              BNE                MOVEA_rD1                       ;if not go check register 1
00006598  6700 0064               8411                              BEQ                MOVEA_D0_out                    ;if equal go to output subroutine
0000659C                          8412  
0000659C  B4BC 00000001           8413  MOVEA_rD1                   CMP.L              #match_MOVEA_D1,D2              ;check to see in the register is 1
000065A2  6600 0006               8414                              BNE                MOVEA_rD2                       ;if not go check register 2
000065A6  6700 0064               8415                              BEQ                MOVEA_D1_out                    ;if equal go to output subroutine
000065AA                          8416  
000065AA  B4BC 00000002           8417  MOVEA_rD2                   CMP.L              #match_MOVEA_D2,D2              ;check to see in the register is 2
000065B0  6600 0006               8418                              BNE                MOVEA_rD3                       ;if not go check register 3
000065B4  6700 0064               8419                              BEQ                MOVEA_D2_out                    ;if equal go to output subroutine
000065B8                          8420  
000065B8  B4BC 00000003           8421  MOVEA_rD3                   CMP.L              #match_MOVEA_D3,D2              ;check to see in the register is 3
000065BE  6600 0006               8422                              BNE                MOVEA_rD4                       ;if not go check register 4
000065C2  6700 0064               8423                              BEQ                MOVEA_D3_out                    ;if equal go to output subroutine
000065C6                          8424  
000065C6  B4BC 00000004           8425  MOVEA_rD4                   CMP.L              #match_MOVEA_D4,D2              ;check to see in the register is 4
000065CC  6600 0006               8426                              BNE                MOVEA_rD5                       ;if not go check register 5
000065D0  6700 0064               8427                              BEQ                MOVEA_D4_out                    ;if equal go to output subroutine
000065D4                          8428  
000065D4  B4BC 00000005           8429  MOVEA_rD5                   CMP.L              #match_MOVEA_D5,D2              ;check to see in the register is 5
000065DA  6600 0006               8430                              BNE                MOVEA_rD6                       ;if not go check register 6
000065DE  6700 0064               8431                              BEQ                MOVEA_D5_out                    ;if equal go to output subroutine
000065E2                          8432  
000065E2  B4BC 00000006           8433  MOVEA_rD6                   CMP.L              #match_MOVEA_D6,D2              ;check to see in the register is 6
000065E8  6600 0006               8434                              BNE                MOVEA_rD7                       ;if not go check register 7
000065EC  6700 0064               8435                              BEQ                MOVEA_D6_out                    ;if equal go to output subroutine
000065F0                          8436  
000065F0  B4BC 00000007           8437  MOVEA_rD7                   CMP.L              #match_MOVEA_D7,D2              ;check to see in the register is 7
000065F6  6700 0068               8438                              BEQ                MOVEA_D7_out                    ;if equal go to output subroutine
000065FA  6600 0922               8439                              BNE                ERROR                           ;if not equal, got to error message
000065FE                          8440  
000065FE                          8441  
000065FE                          8442  ;--------------------Data Register Direct Output-----------------------
000065FE  227C 000083F2           8443  MOVEA_D0_out                MOVE.L          #ea_D0,A1                 ;load string constant into A1
00006604  4EB9 00006A38           8444                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000660A  4E75                    8445                              RTS
0000660C                          8446                              
0000660C  227C 000083F5           8447  MOVEA_D1_out                MOVE.L          #ea_D1,A1                 ;load string constant into A1
00006612  4EB9 00006A38           8448                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006618  4E75                    8449                              RTS
0000661A                          8450  
0000661A  227C 000083F8           8451  MOVEA_D2_out                MOVE.L          #ea_D2,A1                 ;load string constant into A1
00006620  4EB9 00006A38           8452                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006626  4E75                    8453                              RTS
00006628                          8454                              
00006628  227C 000083FB           8455  MOVEA_D3_out                MOVE.L          #ea_D3,A1                 ;load string constant into A1
0000662E  4EB9 00006A38           8456                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006634  4E75                    8457                              RTS
00006636                          8458  
00006636  227C 000083FE           8459  MOVEA_D4_out                MOVE.L          #ea_D4,A1                 ;load string constant into A1
0000663C  4EB9 00006A38           8460                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006642  4E75                    8461                              RTS
00006644                          8462  
00006644  227C 00008401           8463  MOVEA_D5_out                MOVE.L          #ea_D5,A1                 ;load string constant into A1
0000664A  4EB9 00006A38           8464                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006650  4E75                    8465                              RTS
00006652                          8466  
00006652  227C 00008404           8467  MOVEA_D6_out                MOVE.L          #ea_D6,A1                 ;load string constant into A1
00006658  4EB9 00006A38           8468                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000665E  4E75                    8469                              RTS
00006660                          8470  
00006660  227C 00008407           8471  MOVEA_D7_out                MOVE.L          #ea_D7,A1                 ;load string constant into A1
00006666  4EB9 00006A38           8472                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000666C  4E75                    8473                              RTS
0000666E                          8474  
0000666E                          8475  ;------------------Address Register Direct-----------------------
0000666E  B4BC 00000008           8476  MOVEA_An_reg                CMP.L           #match_MOVEA_A0,D2                ;check reg is equal to 0
00006674  6600 0006               8477                              BNE             MOVEA_rA1                         ;if not try reg 1
00006678  6700 0144               8478                              BEQ             MOVEA_An_indir_reg0_out           ;if equal go to output subroutine
0000667C                          8479  
0000667C  B4BC 00000009           8480  MOVEA_rA1                   CMP.L           #match_MOVEA_A1,D2                ;check reg is equal to 1
00006682  6600 0006               8481                              BNE             MOVEA_rA2                         ;if not try reg 2
00006686  6700 0144               8482                              BEQ             MOVEA_An_indir_reg1_out           ;if equal go to output subroutine
0000668A                          8483  
0000668A  B4BC 0000000A           8484  MOVEA_rA2                   CMP.L           #match_MOVEA_A2,D2                ;check reg is equal to 2
00006690  6600 0006               8485                              BNE             MOVEA_rA3                         ;if not try reg 3
00006694  6700 0144               8486                              BEQ             MOVEA_An_indir_reg2_out           ;if equal go to output subroutine
00006698                          8487  
00006698  B4BC 0000000B           8488  MOVEA_rA3                   CMP.L           #match_MOVEA_A3,D2                ;check reg is equal to 3
0000669E  6600 0006               8489                              BNE             MOVEA_rA4                         ;if not try reg 4
000066A2  6700 0144               8490                              BEQ             MOVEA_An_indir_reg3_out           ;if equal go to output subroutine
000066A6                          8491  
000066A6  B4BC 0000000C           8492  MOVEA_rA4                   CMP.L           #match_MOVEA_A4,D2                ;check reg is equal to 4
000066AC  6600 0006               8493                              BNE             MOVEA_rA5                         ;if not try reg 5
000066B0  6700 0144               8494                              BEQ             MOVEA_An_indir_reg4_out           ;if equal go to output subroutine
000066B4                          8495              
000066B4  B4BC 0000000D           8496  MOVEA_rA5                   CMP.L           #match_MOVEA_A5,D2                ;check reg is equal to 5
000066BA  6600 0006               8497                              BNE             MOVEA_rA6                         ;if not try reg 6
000066BE  6700 0144               8498                              BEQ             MOVEA_An_indir_reg5_out           ;if equal go to output subroutine
000066C2                          8499  
000066C2  B4BC 0000000E           8500  MOVEA_rA6                   CMP.L           #match_MOVEA_A6,D2                ;check reg is equal to 6
000066C8  6600 0006               8501                              BNE             MOVEA_rA7                         ;if not try reg 7
000066CC  6700 0144               8502                              BEQ             MOVEA_An_indir_reg6_out           ;if equal go to output subroutine
000066D0                          8503  
000066D0  B4BC 0000000F           8504  MOVEA_rA7                   CMP.L           #match_MOVEA_A7,D2                ;check reg is equal to 7
000066D6  6700 0148               8505                              BEQ             MOVEA_An_indir_reg7_out           ;if equal go to output subroutine
000066DA  6600 0842               8506                              BNE             ERROR                             ;if not equal to an addresssing mode, pritn error
000066DE                          8507  
000066DE                          8508  
000066DE                          8509  ;--------------------Address Register Direct Output-----------------------
000066DE  227C 0000840A           8510  MOVEA_A0_out          MOVE.L          #ea_A0,A1             ;load string constant into A1
000066E4  4EB9 00006A38           8511                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000066EA  4E75                    8512                        RTS
000066EC                          8513                                  
000066EC  227C 0000840D           8514  MOVEA_A1_out          MOVE.L          #ea_A1,A1             ;load string constant into A1
000066F2  4EB9 00006A38           8515                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000066F8  4E75                    8516                        RTS
000066FA                          8517                                  
000066FA  227C 00008410           8518  MOVEA_A2_out          MOVE.L          #ea_A2,A1             ;load string constant into A1
00006700  4EB9 00006A38           8519                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006706  4E75                    8520                        RTS
00006708                          8521                                  
00006708  227C 00008413           8522  MOVEA_A3_out          MOVE.L          #ea_A3,A1             ;load string constant into A1
0000670E  4EB9 00006A38           8523                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006714  4E75                    8524                        RTS
00006716                          8525                        
00006716  227C 00008416           8526  MOVEA_A4_out          MOVE.L          #ea_A4,A1             ;load string constant into A1
0000671C  4EB9 00006A38           8527                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006722  4E75                    8528                        RTS
00006724                          8529                        
00006724  227C 00008419           8530  MOVEA_A5_out          MOVE.L          #ea_A5,A1             ;load string constant into A1
0000672A  4EB9 00006A38           8531                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006730  4E75                    8532                        RTS
00006732                          8533                        
00006732  227C 0000841C           8534  MOVEA_A6_out          MOVE.L          #ea_A6,A1             ;load string constant into A1
00006738  4EB9 00006A38           8535                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000673E  4E75                    8536                        RTS
00006740                          8537                        
00006740  227C 0000841F           8538  MOVEA_A7_out          MOVE.L          #ea_A7,A1             ;load string constant into A1
00006746  4EB9 00006A38           8539                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000674C  4E75                    8540                        RTS
0000674E                          8541  
0000674E                          8542  ;------------------Address Register Indirect-----------------------
0000674E  B4BC 00000010           8543  MOVEA_An_indir_reg       CMP.L           #match_MOVEA_An_indir_r0,D2           ;check reg is equal to 0
00006754  6600 0006               8544                           BNE             MOVEA_An_indir_reg1                   ;if not try reg 1
00006758  6700 0064               8545                           BEQ             MOVEA_An_indir_reg0_out               ;if equal go to output subroutine
0000675C                          8546  
0000675C  B4BC 00000011           8547  MOVEA_An_indir_reg1      CMP.L           #match_MOVEA_An_indir_r1,D2           ;check reg is equal to 1
00006762  6600 0006               8548                           BNE             MOVEA_An_indir_reg2                   ;if not try reg 2
00006766  6700 0064               8549                           BEQ             MOVEA_An_indir_reg1_out               ;if equal go to output subroutine
0000676A                          8550  
0000676A  B4BC 00000012           8551  MOVEA_An_indir_reg2      CMP.L           #match_MOVEA_An_indir_r2,D2           ;check reg is equal to 2
00006770  6600 0006               8552                           BNE             MOVEA_An_indir_reg3                   ;if not try reg 3
00006774  6700 0064               8553                           BEQ             MOVEA_An_indir_reg2_out               ;if equal go to output subroutine
00006778                          8554  
00006778  B4BC 00000013           8555  MOVEA_An_indir_reg3      CMP.L           #match_MOVEA_An_indir_r3,D2           ;check reg is equal to 3
0000677E  6600 0006               8556                           BNE             MOVEA_An_indir_reg4                   ;if not try reg 4
00006782  6700 0064               8557                           BEQ             MOVEA_An_indir_reg3_out               ;if equal go to output subroutine
00006786                          8558      
00006786  B4BC 00000014           8559  MOVEA_An_indir_reg4      CMP.L           #match_MOVEA_An_indir_r4,D2           ;check reg is equal to 4
0000678C  6600 0006               8560                           BNE             MOVEA_An_indir_reg5                   ;if not try reg 5
00006790  6700 0064               8561                           BEQ             MOVEA_An_indir_reg4_out               ;if equal go to output subroutine
00006794                          8562          
00006794  B4BC 00000015           8563  MOVEA_An_indir_reg5      CMP.L           #match_MOVEA_An_indir_r5,D2           ;check reg is equal to 5
0000679A  6600 0006               8564                           BNE             MOVEA_An_indir_reg6                   ;if not try reg 6
0000679E  6700 0064               8565                           BEQ             MOVEA_An_indir_reg5_out               ;if equal go to output subroutine
000067A2                          8566  
000067A2  B4BC 00000016           8567  MOVEA_An_indir_reg6      CMP.L           #match_MOVEA_An_indir_r6,D2           ;check reg is equal to 6
000067A8  6600 0006               8568                           BNE             MOVEA_An_indir_reg7                   ;if not try reg 7
000067AC  6700 0064               8569                           BEQ             MOVEA_An_indir_reg6_out               ;if equal go to output subroutine
000067B0                          8570  
000067B0  B4BC 00000017           8571  MOVEA_An_indir_reg7      CMP.L           #match_MOVEA_An_indir_r7,D2           ;check reg is equal to 7
000067B6  6700 0068               8572                           BEQ             MOVEA_An_indir_reg7_out               ;if equal go to output subroutine
000067BA  6600 0762               8573                           BNE             ERROR                                 ;if not equal to an addresssing mode, pritn error
000067BE                          8574  
000067BE                          8575  
000067BE                          8576  ;--------------------Address Register Indirect Output-----------------------
000067BE  227C 00008432           8577  MOVEA_An_indir_reg0_out         MOVE.L      #ea_indir_A0,A1               ;load string constant into A1
000067C4  4EB9 00006A38           8578                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000067CA  4E75                    8579                                  RTS
000067CC                          8580                                  
000067CC  227C 00008437           8581  MOVEA_An_indir_reg1_out         MOVE.L      #ea_indir_A1,A1               ;load string constant into A1
000067D2  4EB9 00006A38           8582                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000067D8  4E75                    8583                                  RTS
000067DA                          8584                                  
000067DA  227C 0000843C           8585  MOVEA_An_indir_reg2_out         MOVE.L      #ea_indir_A2,A1               ;load string constant into A1
000067E0  4EB9 00006A38           8586                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000067E6  4E75                    8587                                  RTS
000067E8                          8588                                  
000067E8  227C 00008441           8589  MOVEA_An_indir_reg3_out         MOVE.L      #ea_indir_A3,A1               ;load string constant into A1
000067EE  4EB9 00006A38           8590                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000067F4  4E75                    8591                                  RTS
000067F6                          8592                                  
000067F6  227C 00008446           8593  MOVEA_An_indir_reg4_out         MOVE.L      #ea_indir_A4,A1               ;load string constant into A1
000067FC  4EB9 00006A38           8594                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006802  4E75                    8595                                  RTS
00006804                          8596                                  
00006804  227C 0000844B           8597  MOVEA_An_indir_reg5_out         MOVE.L      #ea_indir_A5,A1               ;load string constant into A1
0000680A  4EB9 00006A38           8598                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006810  4E75                    8599                                  RTS
00006812                          8600                                  
00006812  227C 00008450           8601  MOVEA_An_indir_reg6_out         MOVE.L      #ea_indir_A6,A1               ;load string constant into A1
00006818  4EB9 00006A38           8602                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000681E  4E75                    8603                                  RTS
00006820                          8604                                          
00006820  227C 00008455           8605  MOVEA_An_indir_reg7_out         MOVE.L      #ea_indir_A7,A1               ;load string constant into A1
00006826  4EB9 00006A38           8606                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000682C  4E75                    8607                                  RTS
0000682E                          8608  
0000682E                          8609  ;------------------Address Register Indirect with Post Increment-----------------------
0000682E  B4BC 00000018           8610  MOVEA_An_indir_postinc_reg        CMP.L      #match_MOVEA_An_indir_postinc_r0,D2        ;check reg is equal to 0
00006834  6600 0006               8611                                    BNE        MOVEA_An_indir_postinc_reg1                ;if not try reg 1
00006838  6700 0064               8612                                    BEQ        MOVEA_An_indir_postinc_reg0_out            ;if equal go to output subroutine
0000683C                          8613  
0000683C  B4BC 00000019           8614  MOVEA_An_indir_postinc_reg1       CMP.L      #match_MOVEA_An_indir_postinc_r1,D2        ;check reg is equal to 1
00006842  6600 0006               8615                                    BNE        MOVEA_An_indir_postinc_reg2                ;if not try reg 2
00006846  6700 0064               8616                                    BEQ        MOVEA_An_indir_postinc_reg1_out            ;if equal go to output subroutine
0000684A                          8617  
0000684A  B4BC 0000001A           8618  MOVEA_An_indir_postinc_reg2       CMP.L      #match_MOVEA_An_indir_postinc_r2,D2        ;check reg is equal to 2
00006850  6600 0006               8619                                    BNE        MOVEA_An_indir_postinc_reg3                ;if not try reg 3
00006854  6700 0064               8620                                    BEQ        MOVEA_An_indir_postinc_reg2_out            ;if equal go to output subroutine
00006858                          8621  
00006858  B4BC 0000001B           8622  MOVEA_An_indir_postinc_reg3       CMP.L      #match_MOVEA_An_indir_postinc_r3,D2        ;check reg is equal to 3
0000685E  6600 0006               8623                                    BNE        MOVEA_An_indir_postinc_reg4                ;if not try reg 4
00006862  6700 0064               8624                                    BEQ        MOVEA_An_indir_postinc_reg3_out            ;if equal go to output subroutine
00006866                          8625   
00006866  B4BC 0000001C           8626  MOVEA_An_indir_postinc_reg4       CMP.L      #match_MOVEA_An_indir_postinc_r4,D2        ;check reg is equal to 4
0000686C  6600 0006               8627                                    BNE        MOVEA_An_indir_postinc_reg5                ;if not try reg 5
00006870  6700 0064               8628                                    BEQ        MOVEA_An_indir_postinc_reg4_out            ;if equal go to output subroutine
00006874                          8629  
00006874  B4BC 0000001D           8630  MOVEA_An_indir_postinc_reg5       CMP.L      #match_MOVEA_An_indir_postinc_r5,D2        ;check reg is equal to 5
0000687A  6600 0006               8631                                    BNE        MOVEA_An_indir_postinc_reg6                ;if not try reg 6
0000687E  6700 0064               8632                                    BEQ        MOVEA_An_indir_postinc_reg5_out            ;if equal go to output subroutine
00006882                          8633  
00006882  B4BC 0000001E           8634  MOVEA_An_indir_postinc_reg6       CMP.L      #match_MOVEA_An_indir_postinc_r6,D2        ;check reg is equal to 6
00006888  6600 0006               8635                                    BNE        MOVEA_An_indir_postinc_reg7                ;if not try reg 7
0000688C  6700 0064               8636                                    BEQ        MOVEA_An_indir_postinc_reg6_out            ;if equal go to output subroutine
00006890                          8637  
00006890  B4BC 0000001F           8638  MOVEA_An_indir_postinc_reg7       CMP.L      #match_MOVEA_An_indir_postinc_r7,D2        ;check reg is equal to 7
00006896  6700 0068               8639                                    BEQ        MOVEA_An_indir_postinc_reg7_out            ;if equal go to output subroutine
0000689A  6600 0682               8640                                    BNE        ERROR                                      ;if not equal to an addresssing mode, pritn error
0000689E                          8641  
0000689E                          8642  
0000689E                          8643  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000689E  227C 0000845A           8644  MOVEA_An_indir_postinc_reg0_out       MOVE.L        #ea_indir_postinc_A0,A1     ;load string constant into A1
000068A4  4EB9 00006A38           8645                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
000068AA  4E75                    8646                                        RTS
000068AC                          8647  
000068AC  227C 00008460           8648  MOVEA_An_indir_postinc_reg1_out       MOVE.L        #ea_indir_postinc_A1,A1     ;load string constant into A1
000068B2  4EB9 00006A38           8649                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
000068B8  4E75                    8650                                        RTS
000068BA                          8651                                        
000068BA  227C 00008466           8652  MOVEA_An_indir_postinc_reg2_out       MOVE.L        #ea_indir_postinc_A2,A1     ;load string constant into A1
000068C0  4EB9 00006A38           8653                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
000068C6  4E75                    8654                                        RTS
000068C8                          8655                                        
000068C8  227C 0000846C           8656  MOVEA_An_indir_postinc_reg3_out       MOVE.L        #ea_indir_postinc_A3,A1     ;load string constant into A1
000068CE  4EB9 00006A38           8657                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
000068D4  4E75                    8658                                        RTS
000068D6                          8659                                        
000068D6  227C 00008472           8660  MOVEA_An_indir_postinc_reg4_out       MOVE.L        #ea_indir_postinc_A4,A1     ;load string constant into A1
000068DC  4EB9 00006A38           8661                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
000068E2  4E75                    8662                                        RTS
000068E4                          8663                                        
000068E4  227C 00008478           8664  MOVEA_An_indir_postinc_reg5_out       MOVE.L        #ea_indir_postinc_A5,A1     ;load string constant into A1
000068EA  4EB9 00006A38           8665                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
000068F0  4E75                    8666                                        RTS
000068F2                          8667                                        
000068F2  227C 0000847E           8668  MOVEA_An_indir_postinc_reg6_out       MOVE.L        #ea_indir_postinc_A6,A1     ;load string constant into A1
000068F8  4EB9 00006A38           8669                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
000068FE  4E75                    8670                                        RTS
00006900                          8671                                        
00006900  227C 00008484           8672  MOVEA_An_indir_postinc_reg7_out       MOVE.L        #ea_indir_postinc_A7,A1     ;load string constant into A1
00006906  4EB9 00006A38           8673                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
0000690C  4E75                    8674                                        RTS
0000690E                          8675  
0000690E                          8676  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000690E  B4BC 00000020           8677  MOVEA_An_indir_predec              CMP.L      #match_MOVEA_An_indir_predec_reg0,D2       ;check reg is equal to 0
00006914  6600 0006               8678                                     BNE        MOVEA_An_indir_predec_reg1                 ;if not try reg 1
00006918  6700 0064               8679                                     BEQ        MOVEA_An_indir_predec_reg0_out             ;if equal go to output subroutine
0000691C                          8680  
0000691C  B4BC 00000021           8681  MOVEA_An_indir_predec_reg1         CMP.L      #match_MOVEA_An_indir_predec_reg1,D2       ;check reg is equal to 1
00006922  6600 0006               8682                                     BNE        MOVEA_An_indir_predec_reg2                 ;if not try reg 2
00006926  6700 0064               8683                                     BEQ        MOVEA_An_indir_predec_reg1_out             ;if equal go to output subroutine
0000692A                          8684  
0000692A  B4BC 00000022           8685  MOVEA_An_indir_predec_reg2         CMP.L      #match_MOVEA_An_indir_predec_reg2,D2       ;check reg is equal to 2
00006930  6600 0006               8686                                     BNE        MOVEA_An_indir_predec_reg3                 ;if not try reg 3
00006934  6700 0064               8687                                     BEQ        MOVEA_An_indir_predec_reg2_out             ;if equal go to output subroutine
00006938                          8688  
00006938  B4BC 00000023           8689  MOVEA_An_indir_predec_reg3         CMP.L      #match_MOVEA_An_indir_predec_reg3,D2       ;check reg is equal to 3
0000693E  6600 0006               8690                                     BNE        MOVEA_An_indir_predec_reg4                 ;if not try reg 4
00006942  6700 0064               8691                                     BEQ        MOVEA_An_indir_predec_reg3_out             ;if equal go to output subroutine
00006946                          8692  
00006946  B4BC 00000024           8693  MOVEA_An_indir_predec_reg4         CMP.L      #match_MOVEA_An_indir_predec_reg4,D2       ;check reg is equal to 4
0000694C  6600 0006               8694                                     BNE        MOVEA_An_indir_predec_reg5                 ;if not try reg 5
00006950  6700 0064               8695                                     BEQ        MOVEA_An_indir_predec_reg4_out             ;if equal go to output subroutine
00006954                          8696  
00006954  B4BC 00000025           8697  MOVEA_An_indir_predec_reg5         CMP.L      #match_MOVEA_An_indir_predec_reg5,D2       ;check reg is equal to 5
0000695A  6600 0006               8698                                     BNE        MOVEA_An_indir_predec_reg6                 ;if not try reg 6
0000695E  6700 0064               8699                                     BEQ        MOVEA_An_indir_predec_reg5_out             ;if equal go to output subroutine
00006962                          8700  
00006962  B4BC 00000026           8701  MOVEA_An_indir_predec_reg6         CMP.L      #match_MOVEA_An_indir_predec_reg6,D2       ;check reg is equal to 6
00006968  6600 0006               8702                                     BNE        MOVEA_An_indir_predec_reg7                 ;if not try reg 7
0000696C  6700 0064               8703                                     BEQ        MOVEA_An_indir_predec_reg6_out             ;if equal go to output subroutine
00006970                          8704  
00006970  B4BC 00000027           8705  MOVEA_An_indir_predec_reg7         CMP.L      #match_MOVEA_An_indir_predec_reg7,D2       ;check reg is equal to 7
00006976  6700 0068               8706                                     BEQ        MOVEA_An_indir_predec_reg7_out             ;if equal go to output subroutine
0000697A  6600 05A2               8707                                     BNE        ERROR                                      ;if not equal to an addresssing mode, pritn error
0000697E                          8708  
0000697E                          8709  
0000697E                          8710  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000697E  227C 0000848A           8711  MOVEA_An_indir_predec_reg0_out          MOVE.L      #ea_indir_predec_A0,A1       ;load string constant into A1
00006984  4EB9 00006A38           8712                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
0000698A  4E75                    8713                                          RTS
0000698C                          8714                                              
0000698C  227C 00008490           8715  MOVEA_An_indir_predec_reg1_out          MOVE.L      #ea_indir_predec_A1,A1       ;load string constant into A1
00006992  4EB9 00006A38           8716                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006998  4E75                    8717                                          RTS
0000699A                          8718                                        
0000699A  227C 00008496           8719  MOVEA_An_indir_predec_reg2_out          MOVE.L      #ea_indir_predec_A2,A1       ;load string constant into A1
000069A0  4EB9 00006A38           8720                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
000069A6  4E75                    8721                                          RTS
000069A8                          8722                                          
000069A8  227C 0000849C           8723  MOVEA_An_indir_predec_reg3_out          MOVE.L      #ea_indir_predec_A3,A1       ;load string constant into A1
000069AE  4EB9 00006A38           8724                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
000069B4  4E75                    8725                                          RTS
000069B6                          8726                                        
000069B6  227C 000084A2           8727  MOVEA_An_indir_predec_reg4_out          MOVE.L      #ea_indir_predec_A4,A1       ;load string constant into A1
000069BC  4EB9 00006A38           8728                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
000069C2  4E75                    8729                                          RTS
000069C4                          8730                                        
000069C4  227C 000084A8           8731  MOVEA_An_indir_predec_reg5_out          MOVE.L      #ea_indir_predec_A5,A1       ;load string constant into A1
000069CA  4EB9 00006A38           8732                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
000069D0  4E75                    8733                                          RTS
000069D2                          8734                                        
000069D2  227C 000084AE           8735  MOVEA_An_indir_predec_reg6_out          MOVE.L      #ea_indir_predec_A6,A1       ;load string constant into A1
000069D8  4EB9 00006A38           8736                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
000069DE  4E75                    8737                                          RTS
000069E0                          8738                                        
000069E0  227C 000084B4           8739  MOVEA_An_indir_predec_reg7_out          MOVE.L      #ea_indir_predec_A7,A1       ;load string constant into A1
000069E6  4EB9 00006A38           8740                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
000069EC  4E75                    8741                                          RTS
000069EE                          8742  ;------------------Absolute Addressing Output-----------------------
000069EE  22FC 000084C4           8743  MOVEA_abs_add_word_out          MOVE.L          #ea_$,(A1)+            ;load $ for hex and increment A1
000069F4  22C5                    8744                                  MOVE.L          D5,(A1)+               ;load address                  
000069F6  4E75                    8745                                  RTS                                    ;return to subroutine
000069F8                          8746                                             
000069F8                          8747  
000069F8  2A18                    8748  MOVEA_abs_add_long_out          MOVE.L          (A0)+,D5               ;pull the next long instruction that holds the address
000069FA  22FC 000084C4           8749                                  MOVE.L          #ea_$,(A1)+            ;load $ for hex and increment A1
00006A00  22C5                    8750                                  MOVE.L          D5,(A1)+               ;load address                  
00006A02  4E75                    8751                                  RTS                                    ;return to subroutine    
00006A04                          8752  
00006A04                          8753                                          
00006A04                          8754  ;---------------Immediate Addresing---------------------------
00006A04  2A18                    8755  MOVEA_immediate_add_out         MOVE.L      (A0)+,D5                        ;capture the immediate address
00006A06  BCBC 000000FC           8756                                  CMP.L       #match_MOVEA_imm_add_word,D6          ;check to see if need to pull word
00006A0C  2A18                    8757                                  MOVE.L      (A0)+,D5                        ;pull the word
00006A0E  6700 0006               8758                                  BEQ         MOVEA_imm_add_w                 ;if equal go pull word    
00006A12  6600 0012               8759                                  BNE         MOVEA_imm_add_l                 ;if not equal, go check long
00006A16                          8760                                           
00006A16  22FC 000084C4           8761  MOVEA_imm_add_w                 MOVE.L      #ea_$,(A1)+                     ;load the $
00006A1C  32C5                    8762                                  MOVE.W      D5,(A1)+                        ;load the word address                           
00006A1E  4EB9 00006A38           8763                                  JSR         MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006A24  4E75                    8764                                  RTS
00006A26                          8765                                           
00006A26  2A18                    8766  MOVEA_imm_add_l                 MOVE.L      (A0)+,D5                        ;pull the long and increase the pointer
00006A28  22FC 000084C4           8767                                  MOVE.L      #ea_$,(A1)+                     ;load the $
00006A2E  2245                    8768                                  MOVE.L      D5,A1                           ;move to A1
00006A30  4EB9 00006A38           8769                                  JSR         MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006A36  4E75                    8770                                  RTS                                              
00006A38                          8771  
00006A38                          8772  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00006A38  4282                    8773  MOVEA_determine_second_op       CLR.L       D2              ;clear D2 
00006A3A  C4BC 00000E00           8774                                  AND.L       #mask_MOVEA_An_reg,D2       ;load the mask for the register into D2, masks bit 11-9
00006A40                          8775                                                  
00006A40  B4BC 00000000           8776  MOVEA_reg0                      CMP.L       #match_MOVEA_reg0,D2        ;check to see if reg equal 0
00006A46  6600 0006               8777                                  BNE         MOVEA_reg1          ;if not equal got check reg 1
00006A4A  6700 0064               8778                                  BEQ         MOVEA_reg0_out          ;if equal go to output
00006A4E                          8779                                                  
00006A4E  B4BC 00000200           8780  MOVEA_reg1                      CMP.L       #match_MOVEA_reg1,D2        ;check to see if reg equal 1
00006A54  6600 0006               8781                                  BNE         MOVEA_reg2          ;if not equal got check reg 2
00006A58  6700 005E               8782                                  BEQ         MOVEA_reg1_out          ;if equal go to output
00006A5C                          8783      
00006A5C  B4BC 00000400           8784  MOVEA_reg2                      CMP.L       #match_MOVEA_reg2,D2        ;check to see if reg equal 2
00006A62  6600 0006               8785                                  BNE         MOVEA_reg3          ;if not equal got check reg 3
00006A66  6700 0058               8786                                  BEQ         MOVEA_reg2_out          ;if equal go to output
00006A6A                          8787  
00006A6A  B4BC 00000600           8788  MOVEA_reg3                      CMP.L       #match_MOVEA_reg3,D2        ;check to see if reg equal 3
00006A70  6600 0006               8789                                  BNE         MOVEA_reg4          ;if not equal got check reg 4
00006A74  6700 0052               8790                                  BEQ         MOVEA_reg3_out          ;if equal go to output
00006A78                          8791                                                  
00006A78  B4BC 00000800           8792  MOVEA_reg4                      CMP.L       #match_MOVEA_reg4,D2        ;check to see if reg equal 4
00006A7E  6600 0006               8793                                  BNE         MOVEA_reg5          ;if not equal got check reg 5
00006A82  6700 004C               8794                                  BEQ         MOVEA_reg4_out          ;if equal go to output
00006A86                          8795  
00006A86  B4BC 00000A00           8796  MOVEA_reg5                      CMP.L       #match_MOVEA_reg5,D2        ;check to see if reg equal 5
00006A8C  6600 0006               8797                                  BNE         MOVEA_reg6          ;if not equal got check reg 6
00006A90  6700 0046               8798                                  BEQ         MOVEA_reg5_out          ;if equal go to output
00006A94                          8799  
00006A94  B4BC 00000C00           8800  MOVEA_reg6                      CMP.L       #match_MOVEA_reg6,D2        ;check to see if reg equal 6
00006A9A  6600 0006               8801                                  BNE         MOVEA_reg7          ;if not equal got check reg 7
00006A9E  6700 0040               8802                                  BEQ         MOVEA_reg6_out          ;if equal go to output          
00006AA2                          8803  
00006AA2  B4BC 00000E00           8804  MOVEA_reg7                      CMP.L       #match_MOVEA_reg7,D2        ;check to see if reg equal 7
00006AA8  6700 003E               8805                                  BEQ         MOVEA_reg7_out          ;if equal go to output
00006AAC  6600 0470               8806                                  BNE         ERROR                           ;if not equal to an addresssing mode, pritn error
00006AB0                          8807                                  
00006AB0                          8808  
00006AB0                          8809  ;--------------------Data Output-----------------------
00006AB0  227C 0000840A           8810  MOVEA_reg0_out                  MOVE.L      #ea_A0,A1       ;load string constant into A1
00006AB6  4E75                    8811                                  RTS
00006AB8                          8812                                              
00006AB8  227C 0000840D           8813  MOVEA_reg1_out                  MOVE.L      #ea_A1,A1       ;load string constant into A1
00006ABE  4E75                    8814                                  RTS
00006AC0                          8815                                              
00006AC0  227C 00008410           8816  MOVEA_reg2_out                  MOVE.L      #ea_A2,A1       ;load string constant into A1
00006AC6  4E75                    8817                                  RTS
00006AC8                          8818                                              
00006AC8  227C 00008413           8819  MOVEA_reg3_out                  MOVE.L      #ea_A3,A1       ;load string constant into A1
00006ACE  4E75                    8820                                  RTS
00006AD0                          8821                                              
00006AD0  227C 00008416           8822  MOVEA_reg4_out                  MOVE.L      #ea_A4,A1       ;load string constant into A1
00006AD6  4E75                    8823                                  RTS
00006AD8                          8824                                              
00006AD8  227C 00008419           8825  MOVEA_reg5_out                  MOVE.L      #ea_A5,A1       ;load string constant into A1
00006ADE  4E75                    8826                                  RTS
00006AE0                          8827                                              
00006AE0  227C 0000841C           8828  MOVEA_reg6_out                  MOVE.L      #ea_A6,A1       ;load string constant into A1
00006AE6  4E75                    8829                                  RTS
00006AE8                          8830                                              
00006AE8  227C 0000841F           8831  MOVEA_reg7_out                  MOVE.L      #ea_A7,A1       ;load string constant into A1
00006AEE  4E75                    8832                                  RTS             
00006AF0                          8833  
00006AF0                          8834  
00006AF0                          8835  
00006AF0                          8836  
00006AF0  =00000038               8837  mask_MOVEA_ea_mode              EQU     $0038
00006AF0  =0000003F               8838  mask_MOVEA_abs_add              EQU     $003F
00006AF0  =0000003F               8839  mask_MOVEA_ea_reg_and_mode      EQU     $003F
00006AF0  =00000E00               8840  mask_MOVEA_An_reg               EQU     $0E00
00006AF0                          8841  
00006AF0  =00000000               8842  match_MOVEA_Dn                  EQU     $0000
00006AF0  =00000008               8843  match_MOVEA_An                  EQU     $0008
00006AF0  =00000010               8844  match_MOVEA_An_indir            EQU     $0010
00006AF0  =00000020               8845  match_MOVEA_An_indir_predec     EQU     $0020
00006AF0  =00000018               8846  match_MOVEA_An_indir_postinc    EQU     $0018
00006AF0  =00000038               8847  match_MOVEA_abs_add_word        EQU     $0038
00006AF0  =00000039               8848  match_MOVEA_abs_add_long        EQU     $0039
00006AF0                          8849  
00006AF0  =00000000               8850  match_MOVEA_D0              EQU     $0000
00006AF0  =00000001               8851  match_MOVEA_D1              EQU     $0001
00006AF0  =00000002               8852  match_MOVEA_D2              EQU     $0002
00006AF0  =00000003               8853  match_MOVEA_D3              EQU     $0003
00006AF0  =00000004               8854  match_MOVEA_D4              EQU     $0004
00006AF0  =00000005               8855  match_MOVEA_D5              EQU     $0005
00006AF0  =00000006               8856  match_MOVEA_D6              EQU     $0006
00006AF0  =00000007               8857  match_MOVEA_D7              EQU     $0007
00006AF0                          8858  
00006AF0  =00000008               8859  match_MOVEA_A0              EQU     $0008
00006AF0  =00000009               8860  match_MOVEA_A1              EQU     $0009
00006AF0  =0000000A               8861  match_MOVEA_A2              EQU     $000A
00006AF0  =0000000B               8862  match_MOVEA_A3              EQU     $000B
00006AF0  =0000000C               8863  match_MOVEA_A4              EQU     $000C
00006AF0  =0000000D               8864  match_MOVEA_A5              EQU     $000D
00006AF0  =0000000E               8865  match_MOVEA_A6              EQU     $000E
00006AF0  =0000000F               8866  match_MOVEA_A7              EQU     $000F
00006AF0                          8867  
00006AF0  =00000010               8868  match_MOVEA_An_indir_r0         EQU     $0010
00006AF0  =00000011               8869  match_MOVEA_An_indir_r1         EQU     $0011
00006AF0  =00000012               8870  match_MOVEA_An_indir_r2         EQU     $0012
00006AF0  =00000013               8871  match_MOVEA_An_indir_r3         EQU     $0013
00006AF0  =00000014               8872  match_MOVEA_An_indir_r4         EQU     $0014
00006AF0  =00000015               8873  match_MOVEA_An_indir_r5         EQU     $0015
00006AF0  =00000016               8874  match_MOVEA_An_indir_r6         EQU     $0016
00006AF0  =00000017               8875  match_MOVEA_An_indir_r7         EQU     $0017
00006AF0                          8876  
00006AF0  =00000018               8877  match_MOVEA_An_indir_postinc_r0     EQU     $0018
00006AF0  =00000019               8878  match_MOVEA_An_indir_postinc_r1     EQU     $0019
00006AF0  =0000001A               8879  match_MOVEA_An_indir_postinc_r2     EQU     $001A
00006AF0  =0000001B               8880  match_MOVEA_An_indir_postinc_r3     EQU     $001B
00006AF0  =0000001C               8881  match_MOVEA_An_indir_postinc_r4     EQU     $001C
00006AF0  =0000001D               8882  match_MOVEA_An_indir_postinc_r5     EQU     $001D
00006AF0  =0000001E               8883  match_MOVEA_An_indir_postinc_r6     EQU     $001E
00006AF0  =0000001F               8884  match_MOVEA_An_indir_postinc_r7     EQU     $001F
00006AF0                          8885  
00006AF0  =00000020               8886  match_MOVEA_An_indir_predec_reg0    EQU     $0020
00006AF0  =00000021               8887  match_MOVEA_An_indir_predec_reg1    EQU     $0021
00006AF0  =00000022               8888  match_MOVEA_An_indir_predec_reg2    EQU     $0022
00006AF0  =00000023               8889  match_MOVEA_An_indir_predec_reg3    EQU     $0023
00006AF0  =00000024               8890  match_MOVEA_An_indir_predec_reg4    EQU     $0024
00006AF0  =00000025               8891  match_MOVEA_An_indir_predec_reg5    EQU     $0025
00006AF0  =00000026               8892  match_MOVEA_An_indir_predec_reg6    EQU     $0026
00006AF0  =00000027               8893  match_MOVEA_An_indir_predec_reg7    EQU     $0027
00006AF0                          8894  
00006AF0  =0000003C               8895  match_MOVEA_imm_add                 EQU     $003C
00006AF0  =000000FC               8896  match_MOVEA_imm_add_word            EQU     $00FC
00006AF0  =000001FC               8897  match_MOVEA_imm_add_long            EQU     $01FC
00006AF0                          8898  
00006AF0  =00000000               8899  match_MOVEA_reg0            EQU     $0000
00006AF0  =00000200               8900  match_MOVEA_reg1            EQU     $0200
00006AF0  =00000400               8901  match_MOVEA_reg2            EQU     $0400
00006AF0  =00000600               8902  match_MOVEA_reg3            EQU     $0600
00006AF0  =00000800               8903  match_MOVEA_reg4            EQU     $0800
00006AF0  =00000A00               8904  match_MOVEA_reg5            EQU     $0A00
00006AF0  =00000C00               8905  match_MOVEA_reg6            EQU     $0C00
00006AF0  =00000E00               8906  match_MOVEA_reg7            EQU     $0E00
00006AF0                          8907  
00006AF0                          8908  
00006AF0                          8909  
00006AF0                          8910  
00006AF0                          8911  -------------------- end include --------------------
00006AF0                          8912              INCLUDE 'MOVEQ Subroutine.x68'
00006AF0                          8913  
00006AF0                          8914  
00006AF0                          8915  MOVEQ_sub                                           ;preserve the registers 
00006AF0                          8916                                   
00006AF0                          8917  ;------------------Determine First Operand Data--------------------------------------------------------------------
00006AF0  C2BC 000000FF           8918  MOVEQ_first_operand             AND.L             #mask_MOVEQ_first_operand,D1                    ;load mask for first operand
00006AF6  2608                    8919                                  MOVE.L            A0,D3                                     ;pull the data
00006AF8  227C 000084C6           8920                                  MOVE.L            #ea_lb,A1                                 ;load the # sign into string register
00006AFE  2243                    8921                                  MOVE.L            D3,A1                                     ;move the data into A1
00006B00  4EB9 00006B06           8922                                  JSR               MOVEQ_second_operand
00006B06                          8923  
00006B06  C2BC 00000E00           8924  MOVEQ_second_operand            AND.L             #mask_MOVEQ_second_op_Dn,D1                     ;move the mask to D1
00006B0C                          8925                                   
00006B0C                          8926  ;-----------------------------------Determine Second Operand Data register--------------------------------
00006B0C  B4BC 00000000           8927  MOVEQ_Dn_reg                    CMP.L              #match_MOVEQ_D0,D2                         ;check to see in the register is 0
00006B12  6600 0006               8928                                  BNE                MOVEQ_rD1                                      ;if MOVEQ go check register 1
00006B16  6700 0064               8929                                  BEQ                MOVEQ_D0_output                                ;if equal go to output subroutine
00006B1A                          8930  
00006B1A  B4BC 00000200           8931  MOVEQ_rD1                       CMP.L              #match_MOVEQ_D1,D2                        ;check to see in the register is 1
00006B20  6600 0006               8932                                  BNE                MOVEQ_rD2                                     ;if MOVEQ go check register 2
00006B24  6700 005E               8933                                  BEQ                MOVEQ_D1_output                               ;if equal go to output subroutine
00006B28                          8934  
00006B28  B4BC 00000400           8935  MOVEQ_rD2                       CMP.L              #match_MOVEQ_D2,D2                        ;check to see in the register is 2
00006B2E  6600 0006               8936                                  BNE                MOVEQ_rD3                                     ;if MOVEQ go check register 3
00006B32  6700 0058               8937                                  BEQ                MOVEQ_D2_output                               ;if equal go to output subroutine
00006B36                          8938  
00006B36  B4BC 00000600           8939  MOVEQ_rD3                       CMP.L              #match_MOVEQ_D3,D2                       ;check to see in the register is 3
00006B3C  6600 0006               8940                                  BNE                MOVEQ_rD4                                     ;if MOVEQ go check register 4
00006B40  6700 0052               8941                                  BEQ                MOVEQ_D3_output                              ;if equal go to output subroutine
00006B44                          8942  
00006B44  B4BC 00000800           8943  MOVEQ_rD4                       CMP.L              #match_MOVEQ_D4,D2                       ;check to see in the register is 4
00006B4A  6600 0006               8944                                  BNE                MOVEQ_rD5                                     ;if MOVEQ go check register 5
00006B4E  6700 004C               8945                                  BEQ                MOVEQ_D4_output                              ;if equal go to output subroutine
00006B52                          8946  
00006B52  B4BC 00000A00           8947  MOVEQ_rD5                       CMP.L              #match_MOVEQ_D5,D2                       ;check to see in the register is 5
00006B58  6600 0006               8948                                  BNE                MOVEQ_rD6                                     ;if MOVEQ go check register 6
00006B5C  6700 0046               8949                                  BEQ                MOVEQ_D5_output                              ;if equal go to output subroutine
00006B60                          8950  
00006B60  B4BC 00000C00           8951  MOVEQ_rD6                       CMP.L              #match_MOVEQ_D6,D2                       ;check to see in the register is 6
00006B66  6600 0006               8952                                  BNE                MOVEQ_rD7                                     ;if MOVEQ go check register 7
00006B6A  6700 0040               8953                                  BEQ                MOVEQ_D6_output                              ;if equal go to output subroutine
00006B6E                          8954  
00006B6E  B4BC 00000E00           8955  MOVEQ_rD7                       CMP.L              #match_MOVEQ_D7,D2                       ;check to see in the register is 7
00006B74  6700 003E               8956                                  BEQ                MOVEQ_D7_output                              ;if equal go to output subroutine
00006B78  6600 03A4               8957                                  BNE                ERROR                                 ;if MOVEQ equal to an addresssing mode, pritn error
00006B7C                          8958                                  
00006B7C                          8959  ;--------------------Second Operand Data Register Output-----------------------
00006B7C  227C 000083F2           8960  MOVEQ_D0_output             MOVE.L          #ea_D0,A1                       ;load string constant into A1
00006B82  4E75                    8961                              RTS                                             ;return to subroutine
00006B84                          8962                                      
00006B84  227C 000083F5           8963  MOVEQ_D1_output             MOVE.L          #ea_D1,A1                       ;load string constant into A1
00006B8A  4E75                    8964                              RTS                                             ;return to subroutine
00006B8C                          8965                                      
00006B8C  227C 000083F8           8966  MOVEQ_D2_output             MOVE.L          #ea_D2,A1                       ;load string constant into A1
00006B92  4E75                    8967                              RTS                                             ;return to subroutine
00006B94                          8968                                      
00006B94  227C 000083FB           8969  MOVEQ_D3_output             MOVE.L          #ea_D3,A1                       ;load string constant into A1
00006B9A  4E75                    8970                              RTS                                             ;return to subroutine
00006B9C                          8971                                      
00006B9C  227C 000083FE           8972  MOVEQ_D4_output             MOVE.L          #ea_D4,A1                       ;load string constant into A1
00006BA2  4E75                    8973                              RTS                                             ;return to subroutine
00006BA4                          8974                                      
00006BA4  227C 00008401           8975  MOVEQ_D5_output             MOVE.L          #ea_D5,A1                       ;load string constant into A1
00006BAA  4E75                    8976                              RTS                                             ;return to subroutine
00006BAC                          8977                                      
00006BAC  227C 00008404           8978  MOVEQ_D6_output             MOVE.L          #ea_D6,A1                       ;load string constant into A1
00006BB2  4E75                    8979                              RTS                                             ;return to subroutine
00006BB4                          8980                                      
00006BB4  227C 00008407           8981  MOVEQ_D7_output             MOVE.L          #ea_D7,A1                       ;load string constant into A1
00006BBA  4E75                    8982                              RTS                                             ;return to subroutine
00006BBC                          8983  
00006BBC                          8984  
00006BBC  =00000E00               8985  mask_MOVEQ_second_op_Dn           EQU             $0E00              ;mask to determine the data register for second operand
00006BBC  =000000FF               8986  mask_MOVEQ_first_operand          EQU             $00FF              ;mask to determine the data to be moved to the data register
00006BBC                          8987  
00006BBC  =00000000               8988  match_MOVEQ_D0              EQU             $0000              ;match for data reg dir with data reg 0
00006BBC  =00000200               8989  match_MOVEQ_D1              EQU             $0200              ;match for data reg dir with data reg 1
00006BBC  =00000400               8990  match_MOVEQ_D2              EQU             $0400              ;match for data reg dir with data reg 2
00006BBC  =00000600               8991  match_MOVEQ_D3              EQU             $0600              ;match for data reg dir with data reg 3
00006BBC  =00000800               8992  match_MOVEQ_D4              EQU             $0800              ;match for data reg dir with data reg 4
00006BBC  =00000A00               8993  match_MOVEQ_D5              EQU             $0A00              ;match for data reg dir with data reg 5
00006BBC  =00000C00               8994  match_MOVEQ_D6              EQU             $0C00              ;match for data reg dir with data reg 6
00006BBC  =00000E00               8995  match_MOVEQ_D7              EQU             $0E00              ;match for data reg dir with data reg 7
00006BBC                          8996  
00006BBC                          8997  
00006BBC                          8998  
00006BBC                          8999  
00006BBC                          9000  
00006BBC                          9001  -------------------- end include --------------------
00006BBC                          9002              INCLUDE 'NOT Subroutine.x68'
00006BBC                          9003  
00006BBC                          9004  
00006BBC                          9005  NOT_sub                                            ;preserve the registers,\ 
00006BBC  C2BC 00000038           9006                                   AND.L             #mask_NOT_ea_mode,D1                      ;move the mask to D1
00006BC2                          9007  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00006BC2  B2BC 00000000           9008  NOT_data_reg_dir                 CMP.L             #match_NOT_Dn,D1                          ;check to see if mode is data reg direct
00006BC8  6600 0006               9009                                   BNE               NOT_An_indir                                  ;if not, go check add reg dir
00006BCC  6700 0054               9010                                   BEQ               NOT_Dn_reg                                    ;if equal go figure out the register
00006BD0                          9011  
00006BD0  B2BC 00000010           9012  NOT_An_indir                     CMP.L             #match_NOT_An_indir,D1                    ;check to see if mode is add reg indir
00006BD6  6600 0014               9013                                   BNE               NOT_An_indir_predec                           ;if not, go check add reg indir predec 
00006BDA  6700 0100               9014                                   BEQ               NOT_An_indir_reg                              ;if equal go figure out the register           
00006BDE                          9015            
00006BDE  B2BC 00000020           9016  NOT_An_indir_postinc             CMP.L             #match_NOT_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
00006BE4  6600 0006               9017                                   BNE               NOT_An_indir_predec                           ;if not go check add reg indir/predec
00006BE8  6700 01AC               9018                                   BEQ               NOT_An_indir_postinc_reg                      ;if equal go figure out the register
00006BEC                          9019                        
00006BEC  B2BC 00000018           9020  NOT_An_indir_predec              CMP.L             #match_NOT_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
00006BF2  6600 0006               9021                                   BNE               NOT_abs_add_word                              ;if not go check abs add word
00006BF6  6700 0256               9022                                   BEQ               NOT_An_indir_predec_reg                       ;if equal go figure out the register
00006BFA                          9023  
00006BFA  4282                    9024  NOT_abs_add_word                 CLR.L          D2
00006BFC  3400                    9025                                  MOVE.W          D0,D2
00006BFE  C4BC 0000003F           9026                                      AND.L             #mask_NOT_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
00006C04                          9027                                   
00006C04  B4BC 00000039           9028                                   CMP.L             #match_NOT_abs_add_word,D2                ;check if abs add word
00006C0A  2A18                    9029                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00006C0C  6600 0006               9030                                   BNE               NOT_abs_add_long                              ;if not go check abs add long
00006C10  6700 02F6               9031                                   BEQ               NOT_abs_add_word_out                          ;if equal go to output
00006C14                          9032    
00006C14  B4BC 0000003C           9033  NOT_abs_add_long                 CMP.L             #match_NOT_abs_add_long,D2                ;check to see if abs add long
00006C1A  6700 02F6               9034                                   BEQ               NOT_abs_add_long_out                          ;if equal go to output
00006C1E  6600 02FE               9035                                   BNE               ERROR                                     ;if not equal to an addresssing mode, pritn error
00006C22                          9036                               
00006C22                          9037  
00006C22                          9038  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00006C22                          9039  ;-----------------------------------Data Register Direct--------------------------------
00006C22  4242                    9040  NOT_Dn_reg                      CLR                D2                                      ;make sure D2 is empty
00006C24  3400                    9041                                  MOVE.W              D0,D2
00006C26  C4BC 0000003F           9042                                  AND.L              #mask_NOT_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00006C2C  B4BC 00000000           9043                                  CMP.L              #match_NOT_D0,D2                         ;check to see in the register is 0
00006C32  6600 0006               9044                                  BNE                NOT_rD1                                      ;if not go check register 1
00006C36  6700 0064               9045                                  BEQ                NOT_D0_output                                ;if equal go to output subroutine
00006C3A                          9046  
00006C3A  B4BC 00000001           9047  NOT_rD1                         CMP.L              #match_NOT_D1,D2                        ;check to see in the register is 1
00006C40  6600 0006               9048                                  BNE                NOT_rD2                                     ;if not go check register 2
00006C44  6700 005E               9049                                  BEQ                NOT_D1_output                               ;if equal go to output subroutine
00006C48                          9050  
00006C48  B4BC 00000002           9051  NOT_rD2                         CMP.L              #match_NOT_D2,D2                        ;check to see in the register is 2
00006C4E  6600 0006               9052                                  BNE                NOT_rD3                                     ;if not go check register 3
00006C52  6700 0058               9053                                  BEQ                NOT_D2_output                               ;if equal go to output subroutine
00006C56                          9054  
00006C56  B4BC 00000003           9055  NOT_rD3                         CMP.L              #match_NOT_D3,D2                       ;check to see in the register is 3
00006C5C  6600 0006               9056                                  BNE                NOT_rD4                                     ;if not go check register 4
00006C60  6700 0052               9057                                  BEQ                NOT_D3_output                              ;if equal go to output subroutine
00006C64                          9058  
00006C64  B4BC 00000004           9059  NOT_rD4                         CMP.L              #match_NOT_D4,D2                       ;check to see in the register is 4
00006C6A  6600 0006               9060                                  BNE                NOT_rD5                                     ;if not go check register 5
00006C6E  6700 004C               9061                                  BEQ                NOT_D4_output                              ;if equal go to output subroutine
00006C72                          9062  
00006C72  B4BC 00000005           9063  NOT_rD5                         CMP.L              #match_NOT_D5,D2                       ;check to see in the register is 5
00006C78  6600 0006               9064                                  BNE                NOT_rD6                                     ;if not go check register 6
00006C7C  6700 0046               9065                                  BEQ                NOT_D5_output                              ;if equal go to output subroutine
00006C80                          9066  
00006C80  B4BC 00000006           9067  NOT_rD6                         CMP.L              #match_NOT_D6,D2                       ;check to see in the register is 6
00006C86  6600 0006               9068                                  BNE                NOT_rD7                                     ;if not go check register 7
00006C8A  6700 0040               9069                                  BEQ                NOT_D6_output                              ;if equal go to output subroutine
00006C8E                          9070  
00006C8E  B4BC 00000007           9071  NOT_rD7                         CMP.L              #match_NOT_D7,D2                       ;check to see in the register is 7
00006C94  6700 003E               9072                                  BEQ                NOT_D7_output                              ;if equal go to output subroutine
00006C98  6600 0284               9073                                  BNE                ERROR                                        :if not equal to an addresssing mode, pritn error
00006C9C                          9074                                  
00006C9C                          9075  ;--------------------Data Register Direct Output-----------------------
00006C9C  227C 000083F2           9076  NOT_D0_output               MOVE.L          #ea_D0,A1                           ;load string constant into A1
00006CA2  4E75                    9077                              RTS                                             ;return to subroutine
00006CA4                          9078                                      
00006CA4  227C 000083F5           9079  NOT_D1_output               MOVE.L          #ea_D1,A1                           ;load string constant into A1
00006CAA  4E75                    9080                              RTS                                             ;return to subroutine
00006CAC                          9081                                      
00006CAC  227C 000083F8           9082  NOT_D2_output               MOVE.L          #ea_D2,A1                           ;load string constant into A1
00006CB2  4E75                    9083                              RTS                                             ;return to subroutine
00006CB4                          9084                                      
00006CB4  227C 000083FB           9085  NOT_D3_output               MOVE.L          #ea_D3,A1                           ;load string constant into A1
00006CBA  4E75                    9086                              RTS                                             ;return to subroutine
00006CBC                          9087                                      
00006CBC  227C 000083FE           9088  NOT_D4_output               MOVE.L          #ea_D4,A1                           ;load string constant into A1
00006CC2  4E75                    9089                              RTS                                             ;return to subroutine
00006CC4                          9090                                      
00006CC4  227C 00008401           9091  NOT_D5_output               MOVE.L          #ea_D5,A1                           ;load string constant into A1
00006CCA  4E75                    9092                              RTS                                             ;return to subroutine
00006CCC                          9093                                      
00006CCC  227C 00008404           9094  NOT_D6_output               MOVE.L          #ea_D6,A1                           ;load string constant into A1
00006CD2  4E75                    9095                              RTS                                             ;return to subroutine
00006CD4                          9096                                      
00006CD4  227C 00008407           9097  NOT_D7_output               MOVE.L          #ea_D7,A1                           ;load string constant into A1
00006CDA  4E75                    9098                              RTS                                             ;return to subroutine
00006CDC                          9099                                      
00006CDC                          9100  ;------------------Address Register Indirect-----------------------
00006CDC  4242                    9101  NOT_An_indir_reg                            CLR                D2                                      ;make sure D2 is empty
00006CDE  3400                    9102                                              MOVE.W              D0,D2
00006CE0  C4BC 0000003F           9103                                              AND.L              #mask_NOT_ea_reg_and_mode,D2 
00006CE6  B4BC 00000010           9104                                              CMP.L           #match_NOT_An_indir_r0,D2              ;check reg is equal to 0
00006CEC  6600 0006               9105                                              BNE             NOT_An_indir_reg1                            ;if not try reg 1
00006CF0  6700 0064               9106                                              BEQ             NOT_An_indir_reg0_out                     ;if equal go to output subroutine
00006CF4                          9107  
00006CF4  B4BC 00000011           9108  NOT_An_indir_reg1                           CMP.L           #match_NOT_An_indir_r1,D2              ;check reg is equal to 1
00006CFA  6600 0006               9109                                              BNE             NOT_An_indir_reg2                            ;if not try reg 2
00006CFE  6700 005E               9110                                              BEQ             NOT_An_indir_reg1_out                     ;if equal go to output subroutine
00006D02                          9111  
00006D02  B4BC 00000012           9112  NOT_An_indir_reg2                           CMP.L           #match_NOT_An_indir_r2,D2              ;check reg is equal to 2
00006D08  6600 0006               9113                                              BNE             NOT_An_indir_reg3                            ;if not try reg 3
00006D0C  6700 0058               9114                                              BEQ             NOT_An_indir_reg2_out                     ;if equal go to output subroutine
00006D10                          9115  
00006D10  B4BC 00000013           9116  NOT_An_indir_reg3                           CMP.L           #match_NOT_An_indir_r3,D2              ;check reg is equal to 3
00006D16  6600 0006               9117                                              BNE             NOT_An_indir_reg4                            ;if not try reg 4
00006D1A  6700 0052               9118                                              BEQ             NOT_An_indir_reg3_out                     ;if equal go to output subroutine
00006D1E                          9119  
00006D1E  B4BC 00000014           9120  NOT_An_indir_reg4                           CMP.L           #match_NOT_An_indir_r4,D2              ;check reg is equal to 4
00006D24  6600 0006               9121                                              BNE             NOT_An_indir_reg5                            ;if not try reg 5
00006D28  6700 004C               9122                                              BEQ             NOT_An_indir_reg4_out                    ;if equal go to output subroutine
00006D2C                          9123  
00006D2C  B4BC 00000015           9124  NOT_An_indir_reg5                           CMP.L           #match_NOT_An_indir_r5,D2              ;check reg is equal to 5
00006D32  6600 0006               9125                                              BNE             NOT_An_indir_reg6                            ;if not try reg 6
00006D36  6700 0046               9126                                              BEQ             NOT_An_indir_reg5_out                     ;if equal go to output subroutine
00006D3A                          9127  
00006D3A  B4BC 00000016           9128  NOT_An_indir_reg6                           CMP.L           #match_NOT_An_indir_r6,D2              ;check reg is equal to 6
00006D40  6700 0044               9129                                              BEQ             NOT_An_indir_reg6_out                     ;if equal go to output subroutine
00006D44  6600 0002               9130                                              BNE             NOT_An_indir_reg7
00006D48                          9131  
00006D48  B4BC 00000017           9132  NOT_An_indir_reg7                           CMP.L           #match_NOT_An_indir_r7,D2              ;check reg is equal to 6
00006D4E  6700 003E               9133                                              BEQ             NOT_An_indir_reg7_out                     ;if equal go to output subroutine
00006D52  6600 01CA               9134                                              BNE              ERROR                                        :if not equal to an addresssing mode, pritn error
00006D56                          9135  
00006D56                          9136  ;--------------------Address Register Indirect Output-----------------------
00006D56  227C 00008432           9137  NOT_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
00006D5C  4E75                    9138                                          RTS                                                         ;return to subroutine
00006D5E                          9139                                      
00006D5E  227C 00008437           9140  NOT_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
00006D64  4E75                    9141                                          RTS                                                         ;return to subroutine
00006D66                          9142                                              
00006D66  227C 0000843C           9143  NOT_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
00006D6C  4E75                    9144                                          RTS                                                     ;return to subroutine
00006D6E                          9145  
00006D6E  227C 00008441           9146  NOT_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
00006D74  4E75                    9147                                          RTS                                                     ;return to subroutine
00006D76                          9148                                              
00006D76  227C 00008446           9149  NOT_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
00006D7C  4E75                    9150                                          RTS                                                         ;return to subroutine
00006D7E                          9151                                          
00006D7E  227C 0000844B           9152  NOT_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
00006D84  4E75                    9153                                          RTS                                                     ;return to subroutine
00006D86                          9154  
00006D86  227C 00008450           9155  NOT_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
00006D8C  4E75                    9156                                          RTS                                                         ;return to subroutine
00006D8E                          9157  
00006D8E  227C 00008455           9158  NOT_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
00006D94  4E75                    9159                                          RTS                                                         ;return to subroutine
00006D96                          9160  
00006D96                          9161  
00006D96                          9162  ;------------------Address Register Indirect with Post Increment-----------------------
00006D96  4242                    9163  NOT_An_indir_postinc_reg                    CLR                D2                                      ;make sure D2 is empty
00006D98  3400                    9164                                              MOVE.W              D0,D2
00006D9A  C4BC 0000003F           9165                                              AND.L              #mask_NOT_ea_reg_and_mode,D2 
00006DA0  B4BC 00000020           9166                                              CMP.L      #match_NOT_An_indir_postinc_r0,D2        ;check reg is equal to 0
00006DA6  6600 0006               9167                                              BNE        NOT_An_indir_pinc_r1                      ;if not try reg 1
00006DAA  6700 0062               9168                                              BEQ        NOT_An_indir_pinc_r0_out               ;if equal go to output subroutine
00006DAE                          9169  
00006DAE  B4BC 00000021           9170  NOT_An_indir_pinc_r1                        CMP.L      #match_NOT_An_indir_postinc_r1,D2        ;check reg is equal to 1
00006DB4  6600 0006               9171                                              BNE        NOT_An_indir_pinc_r2                      ;if not try reg 2
00006DB8  6700 005C               9172                                              BEQ        NOT_An_indir_pinc_r1_out               ;if equal go to output subroutine
00006DBC                          9173  
00006DBC  B4BC 00000022           9174  NOT_An_indir_pinc_r2                        CMP.L      #match_NOT_An_indir_postinc_r2,D2        ;check reg is equal to 2
00006DC2  6600 0006               9175                                              BNE        NOT_An_indir_pinc_r3                      ;if not try reg 3
00006DC6  6700 0056               9176                                              BEQ        NOT_An_indir_pinc_r2_out               ;if equal go to output subroutine
00006DCA                          9177       
00006DCA  B4BC 00000023           9178  NOT_An_indir_pinc_r3                        CMP.L      #match_NOT_An_indir_postinc_r3,D2        ;check reg is equal to 3
00006DD0  6600 0006               9179                                              BNE        NOT_An_indir_pinc_r4                      ;if not try reg 4
00006DD4  6700 0050               9180                                              BEQ        NOT_An_indir_pinc_r3_out               ;if equal go to output subroutine
00006DD8                          9181   
00006DD8  B4BC 00000024           9182  NOT_An_indir_pinc_r4                        CMP.L      #match_NOT_An_indir_postinc_r4,D2        ;check reg is equal to 4
00006DDE  6600 0006               9183                                              BNE        NOT_An_indir_pinc_r5                      ;if not try reg 5
00006DE2  6700 004A               9184                                              BEQ        NOT_An_indir_pinc_r4_out               ;if equal go to output subroutine
00006DE6                          9185  
00006DE6  B4BC 00000025           9186  NOT_An_indir_pinc_r5                        CMP.L      #match_NOT_An_indir_postinc_r5,D2        ;check reg is equal to 5
00006DEC  6600 0006               9187                                              BNE        NOT_An_indir_pinc_r6                      ;if not try reg 6
00006DF0  6700 0044               9188                                              BEQ        NOT_An_indir_pinc_r5_out               ;if equal go to output subroutine
00006DF4                          9189  
00006DF4  B4BC 00000026           9190  NOT_An_indir_pinc_r6                        CMP.L      #match_NOT_An_indir_postinc_r6,D2        ;check reg is equal to 6
00006DFA  6700 0042               9191                                              BEQ        NOT_An_indir_pinc_r6_out              ;if equal go to output subroutine
00006DFE  66F4                    9192                                              BNE        NOT_An_indir_pinc_r6
00006E00                          9193                                              
00006E00  B4BC 00000027           9194  NOT_An_indir_pinc_r7                        CMP.L      #match_NOT_An_indir_postinc_r7,D2        ;check reg is equal to 7
00006E06  6700 003E               9195                                              BEQ        NOT_An_indir_pinc_r7_out              ;if equal go to output subroutine
00006E0A  6600 0112               9196                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
00006E0E                          9197  
00006E0E                          9198  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00006E0E  227C 00008460           9199  NOT_An_indir_pinc_r0_out                    MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
00006E14  4E75                    9200                                              RTS                                             ;return to subroutine
00006E16                          9201  
00006E16  227C 00008460           9202  NOT_An_indir_pinc_r1_out                    MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
00006E1C  4E75                    9203                                              RTS                                             ;return to subroutine
00006E1E                          9204  
00006E1E  227C 00008466           9205  NOT_An_indir_pinc_r2_out                    MOVE.L          #ea_indir_postinc_A2,A1         ;load string constant into A1
00006E24  4E75                    9206                                              RTS                                             ;return to subroutine
00006E26                          9207  
00006E26  227C 0000846C           9208  NOT_An_indir_pinc_r3_out                    MOVE.L          #ea_indir_postinc_A3,A1         ;load string constant into A1
00006E2C  4E75                    9209                                              RTS                                             ;return to subroutine
00006E2E                          9210  
00006E2E  227C 00008472           9211  NOT_An_indir_pinc_r4_out                    MOVE.L          #ea_indir_postinc_A4,A1         ;load string constant into A1
00006E34  4E75                    9212                                              RTS                                             ;return to subroutine
00006E36                          9213  
00006E36  227C 00008478           9214  NOT_An_indir_pinc_r5_out                    MOVE.L          #ea_indir_postinc_A5,A1         ;load string constant into A1
00006E3C  4E75                    9215                                              RTS                                             ;return to subroutine
00006E3E                          9216   
00006E3E  227C 0000847E           9217  NOT_An_indir_pinc_r6_out                    MOVE.L          #ea_indir_postinc_A6,A1         ;load string constant into A1
00006E44  4E75                    9218                                              RTS                                             ;return to subroutine
00006E46                          9219  
00006E46  227C 00008484           9220  NOT_An_indir_pinc_r7_out                    MOVE.L          #ea_indir_postinc_A7,A1         ;load string constant into A1
00006E4C  4E75                    9221                                              RTS                                             ;return to subroutine
00006E4E                          9222                                                      
00006E4E                          9223  ;------------------Address Register Indirect with Pre Decrement-----------------------
00006E4E  4242                    9224  NOT_An_indir_predec_reg                     CLR                D2                                      ;make sure D2 is empty
00006E50  3400                    9225                                              MOVE.W              D0,D2
00006E52  C4BC 0000003F           9226                                              AND.L              #mask_NOT_ea_reg_and_mode,D2 
00006E58  B4BC 00000018           9227                                              CMP.L      #match_NOT_An_indir_predec_r0,D2         ;check reg is equal to 0
00006E5E  6600 0006               9228                                              BNE        NOT_An_indir_pdec_r1                      ;if not try reg 1
00006E62  6700 0064               9229                                              BEQ        NOT_An_indir_pdec_r0_out               ;if equal go to output subroutine
00006E66                          9230  
00006E66  B4BC 00000019           9231  NOT_An_indir_pdec_r1                        CMP.L      #match_NOT_An_indir_predec_r1,D2         ;check reg is equal to 1
00006E6C  6600 0006               9232                                              BNE        NOT_An_indir_pdec_r2                      ;if not try reg 2
00006E70  6700 005E               9233                                              BEQ        NOT_An_indir_pdec_r1_out               ;if equal go to output subroutine
00006E74                          9234  
00006E74  B4BC 0000001A           9235  NOT_An_indir_pdec_r2                        CMP.L      #match_NOT_An_indir_predec_r2,D2         ;check reg is equal to 2
00006E7A  6600 0006               9236                                              BNE        NOT_An_indir_pdec_r3                      ;if not try reg 3
00006E7E  6700 0058               9237                                              BEQ        NOT_An_indir_pdec_r2_out               ;if equal go to output subroutine
00006E82                          9238  
00006E82  B4BC 0000001B           9239  NOT_An_indir_pdec_r3                        CMP.L      #match_NOT_An_indir_predec_r3,D2         ;check reg is equal to 3
00006E88  6600 0006               9240                                              BNE        NOT_An_indir_pdec_r4                      ;if not try reg 4
00006E8C  6700 0052               9241                                              BEQ        NOT_An_indir_pdec_r3_out               ;if equal go to output subroutine
00006E90                          9242  
00006E90  B4BC 0000001C           9243  NOT_An_indir_pdec_r4                        CMP.L      #match_NOT_An_indir_predec_r4,D2         ;check reg is equal to 4
00006E96  6600 0006               9244                                              BNE        NOT_An_indir_pdec_r5                      ;if not try reg 5
00006E9A  6700 004C               9245                                              BEQ        NOT_An_indir_pdec_r4_out               ;if equal go to output subroutine
00006E9E                          9246  
00006E9E  B4BC 0000001D           9247  NOT_An_indir_pdec_r5                        CMP.L      #match_NOT_An_indir_predec_r5,D2         ;check reg is equal to 5
00006EA4  6600 0006               9248                                              BNE        NOT_An_indir_pdec_r6                      ;if not try reg 6
00006EA8  6700 0046               9249                                              BEQ        NOT_An_indir_pdec_r5_out               ;if equal go to output subroutine
00006EAC                          9250  
00006EAC  B4BC 0000001E           9251  NOT_An_indir_pdec_r6                        CMP.L      #match_NOT_An_indir_predec_r6,D2         ;check reg is equal to 6
00006EB2  6700 0044               9252                                              BEQ        NOT_An_indir_pdec_r6_out               ;if equal go to output subroutine
00006EB6  6600 0002               9253                                              BNE        NOT_An_indir_pdec_r7
00006EBA                          9254  
00006EBA  B4BC 0000001E           9255  NOT_An_indir_pdec_r7                        CMP.L      #match_NOT_An_indir_predec_r6,D2         ;check reg is equal to 6
00006EC0  6700 003E               9256                                              BEQ        NOT_An_indir_pdec_r7_out               ;if equal go to output subroutine
00006EC4  6600 0058               9257                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
00006EC8                          9258  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00006EC8  227C 0000848A           9259  NOT_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
00006ECE  4E75                    9260                                              RTS                                                     ;return to subroutine
00006ED0                          9261  
00006ED0  227C 00008490           9262  NOT_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
00006ED6  4E75                    9263                                              RTS                                                     ;return to subroutine
00006ED8                          9264                                                      
00006ED8  227C 00008496           9265  NOT_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
00006EDE  4E75                    9266                                              RTS                                                     ;return to subroutine
00006EE0                          9267  
00006EE0  227C 0000849C           9268  NOT_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
00006EE6  4E75                    9269                                              RTS                                                     ;return to subroutine
00006EE8                          9270  
00006EE8  227C 000084A2           9271  NOT_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
00006EEE  4E75                    9272                                              RTS                                                     ;return to subroutine
00006EF0                          9273      
00006EF0  227C 000084A8           9274  NOT_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00006EF6  4E75                    9275                                              RTS                                                     ;return to subroutine
00006EF8                          9276      
00006EF8  227C 000084AE           9277  NOT_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
00006EFE  4E75                    9278                                              RTS                                                     ;return to subroutine
00006F00                          9279  
00006F00  227C 000084B4           9280  NOT_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
00006F06  4E75                    9281                                              RTS                                                     ;return to subroutine
00006F08                          9282                                                      
00006F08                          9283  ;------------------Absolute Addressing Output-----------------------
00006F08  22FC 000084C4           9284  NOT_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00006F0E  22C5                    9285                                           MOVE.L      D5,(A1)+                           ;load address                  
00006F10  4E75                    9286                                           RTS                                            :return to subroutine
00006F12                          9287                                             
00006F12                          9288  
00006F12  2A18                    9289  NOT_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00006F14  22FC 000084C4           9290                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00006F1A  22C5                    9291                                           MOVE.L      D5,(A1)+                           ;load address                  
00006F1C  4E75                    9292                                           RTS      
00006F1E                          9293  
00006F1E                          9294                                       
00006F1E  43F9 000083DE           9295  ERROR                                   LEA             ERROR_MESSAGE,A1                 ;load error messge into A3
00006F24  4E75                    9296                          RTS
00006F26                          9297                                                  
00006F26                          9298                                                                                             
00006F26                          9299  
00006F26                          9300                                                  
00006F26  =00000038               9301  mask_NOT_ea_mode            EQU             $0038              ;masks bits 5-3 to determine ea mode
00006F26  =0000003F               9302  mask_NOT_ea_reg_and_mode        EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
00006F26  =0000003F               9303  mask_NOT_ea_mode_abs_add        EQU             $003F
00006F26                          9304  
00006F26  =00000000               9305  match_NOT_Dn                EQU             $0000              ;match for data reg dir
00006F26  =00000010               9306  match_NOT_An_indir          EQU             $0010              ;match for add reg indir
00006F26  =00000020               9307  match_NOT_An_indir_postinc      EQU             $0020              ;match for add reg indir with postinc
00006F26  =00000018               9308  match_NOT_An_indir_predec       EQU             $0018              ;match for add reg indir with predec
00006F26  =00000039               9309  match_NOT_abs_add_word          EQU             $0039              ;match for word abs add 
00006F26  =0000003C               9310  match_NOT_abs_add_long          EQU             $003C              ;match for long abs add
00006F26                          9311  
00006F26  =00000000               9312  match_NOT_D0                EQU             $0000              ;match for data reg dir with data reg 0
00006F26  =00000001               9313  match_NOT_D1                EQU             $0001              ;match for data reg dir with data reg 1
00006F26  =00000002               9314  match_NOT_D2                EQU             $0002              ;match for data reg dir with data reg 2
00006F26  =00000003               9315  match_NOT_D3                EQU             $0003              ;match for data reg dir with data reg 3
00006F26  =00000004               9316  match_NOT_D4                EQU             $0004              ;match for data reg dir with data reg 4
00006F26  =00000005               9317  match_NOT_D5                EQU             $0005              ;match for data reg dir with data reg 5
00006F26  =00000006               9318  match_NOT_D6                EQU             $0006              ;match for data reg dir with data reg 6
00006F26  =00000007               9319  match_NOT_D7                EQU             $0007              ;match for data reg dir with data reg 7
00006F26                          9320  
00006F26  =00000010               9321  match_NOT_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
00006F26  =00000011               9322  match_NOT_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
00006F26  =00000012               9323  match_NOT_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
00006F26  =00000013               9324  match_NOT_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
00006F26  =00000014               9325  match_NOT_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
00006F26  =00000015               9326  match_NOT_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
00006F26  =00000016               9327  match_NOT_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
00006F26  =00000017               9328  match_NOT_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
00006F26                          9329  
00006F26                          9330  
00006F26  =00000020               9331  match_NOT_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
00006F26  =00000021               9332  match_NOT_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
00006F26  =00000022               9333  match_NOT_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
00006F26  =00000023               9334  match_NOT_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
00006F26  =00000024               9335  match_NOT_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
00006F26  =00000025               9336  match_NOT_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
00006F26  =00000026               9337  match_NOT_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
00006F26  =00000027               9338  match_NOT_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
00006F26                          9339  
00006F26  =00000018               9340  match_NOT_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
00006F26  =00000019               9341  match_NOT_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
00006F26  =0000001A               9342  match_NOT_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
00006F26  =0000001B               9343  match_NOT_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
00006F26  =0000001C               9344  match_NOT_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
00006F26  =0000001D               9345  match_NOT_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
00006F26  =0000001E               9346  match_NOT_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
00006F26  =0000001F               9347  match_NOT_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
00006F26                          9348  
00006F26                          9349  
00006F26                          9350  
00006F26                          9351  
00006F26                          9352  
00006F26                          9353  
00006F26                          9354  
00006F26                          9355  
00006F26                          9356  
00006F26                          9357  
00006F26                          9358  -------------------- end include --------------------
00006F26                          9359              INCLUDE 'OR Subroutine.x68'
00006F26                          9360  
00006F26                          9361  
00006F26                          9362  
00006F26                          9363     
00006F26                          9364  ;--------------------------------------------------------OR ORroutine-----------------------------------------------------------------------
00006F26                          9365  OR_sub                                                 ;preserve the registers, 
00006F26                          9366                                   
00006F26  C2BC 000001C0           9367                                         AND.L              #mask_OR_opmode,D1                       ;load mask to determine the operOR order
00006F2C                          9368                                  
00006F2C  B2BC 00000000           9369  OR_Dn_ea_match                         CMP.L              #match_OR_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00006F32  6700 06F4               9370                                         BEQ                OR_Dn_ea                                 ;if equal go figure out data register
00006F36  6600 0002               9371                                         BNE                OR_Dn_ea_match_w                         ;if not check word size for same order
00006F3A                          9372  
00006F3A  B2BC 00000040           9373  OR_Dn_ea_match_w                       CMP.L              #match_OR_w_Dn_ea,D1                 ;check to see if it's Dn,ea
00006F40  6700 06E6               9374                                         BEQ                OR_Dn_ea                                 ;if equal go figure out data register
00006F44  6600 0002               9375                                         BNE                OR_Dn_ea_match_l                         ;if not check long size for same order
00006F48                          9376  
00006F48  B2BC 00000080           9377  OR_Dn_ea_match_l                       CMP.L              #match_OR_l_Dn_ea,D1                 ;check to see if it's Dn,ea
00006F4E  6700 06D8               9378                                         BEQ                OR_Dn_ea                                 ;if equal go figure out data register
00006F52  6600 0002               9379                                         BNE                OR_ea_Dn_match                           ;if not check other order
00006F56                          9380  
00006F56  B2BC 00000100           9381  OR_ea_Dn_match                         CMP.L              #match_OR_b_ea_Dn,D1                 ;check to see if it's ea,Dn
00006F5C  6700 0020               9382                                         BEQ                OR_ea_Dn                                 ;if equal go figure out ea mode
00006F60  6600 0002               9383                                         BNE                OR_ea_Dn_match_w                         ;if not go check word size for same order
00006F64                          9384  
00006F64  B2BC 00000140           9385  OR_ea_Dn_match_w                       CMP.L              #match_OR_w_ea_Dn,D1                 ;check to see if it's ea,Dn
00006F6A  6700 0012               9386                                         BEQ                OR_ea_Dn                                 ;if equal go figure out ea mode
00006F6E  6600 0002               9387                                         BNE                OR_ea_Dn_match_l                         ;if not go check word size for same order
00006F72                          9388  
00006F72  B2BC 00000180           9389  OR_ea_Dn_match_l                       CMP.L              #match_OR_l_ea_Dn,D1                 ;check to see if it's ea,Dn
00006F78  6700 0004               9390                                         BEQ                OR_ea_Dn                                 ;if equal go figure out ea mode
00006F7C  66A0                    9391                                         BNE                ERROR                                 ;if not go to error message
00006F7E                          9392  ;--------------------------------------------------------------------------------------------------------------------------
00006F7E                          9393  ;-------------------------------------------------------------------------------------------------------------------------
00006F7E  4241                    9394  OR_ea_Dn                             CLR                D1                                        ;clear D1 to load new mask                                
00006F80  3200                    9395                                       MOVE.W              D0,D1
00006F82  C2BC 00000038           9396                                       AND.L             #mask_OR_ea_mode,D1                       ;move the mask to D1
00006F88                          9397  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00006F88  B2BC 00000010           9398  OR_ea_Dn_add_reg_indir               CMP.L             #match_OR_An_indir,D1                      ;check to see if mode is add reg indir
00006F8E  6600 0006               9399                                       BNE               OR_ea_Dn_add_reg_indir_predec              ;if not, go check add reg indir predec 
00006F92  6700 025A               9400                                       BEQ               OR_ea_Dn_An_indir_reg                      ;if equal go figure out the register           
00006F96                          9401              
00006F96  B2BC 00000020           9402  OR_ea_Dn_add_reg_indir_predec        CMP.L             #match_OR_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00006F9C  6600 0006               9403                                       BNE               OR_ea_Dn_add_reg_indir_postinc             ;if not go check add reg indir/predec
00006FA0  6700 0460               9404                                       BEQ               OR_ea_Dn_An_indir_predec                   ;if equal go figure out the register
00006FA4                          9405                        
00006FA4  B2BC 00000018           9406  OR_ea_Dn_add_reg_indir_postinc       CMP.L             #match_OR_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00006FAA  6600 0006               9407                                       BNE               OR_ea_Dn_abs_add_word                      ;if not go check abs add word
00006FAE  6700 0348               9408                                       BEQ               OR_ea_Dn_An_indir_postinc_reg              ;if equal go figure out the register
00006FB2                          9409  
00006FB2  4282                    9410  OR_ea_Dn_abs_add_word               CLR.L       D2
00006FB4  3400                    9411                                      MOVE.W      D0,D2
00006FB6  C4BC 0000003F           9412                                      AND.L            #mask_OR_abs_add,D2                        ;load mask to determine if abs add word or long
00006FBC                          9413                                   
00006FBC  B4BC 00000038           9414                                       CMP.L             #match_OR_abs_add_word,D2                  ;check if abs add word
00006FC2  2A18                    9415                                       MOVE.L            (A0)+,D5                                   ;pull the next word instruction that holds the address
00006FC4  6600 0006               9416                                       BNE               OR_ea_Dn_abs_add_long                      ;if not go check abs add long
00006FC8  6700 0542               9417                                       BEQ               OR_ea_Dn_abs_add_word_out                  ;if equal go to output
00006FCC                          9418    
00006FCC  B4BC 00000039           9419  OR_ea_Dn_abs_add_long                CMP.L             #match_OR_abs_add_long,D2                  ;check to see if abs add long
00006FD2  6700 054C               9420                                       BEQ               OR_ea_Dn_abs_add_long_out                  ;if equal go to output
00006FD6  6600 FF46               9421                                       BNE               ERROR                                      ;if not equal go to error mesage OR routine
00006FDA                          9422  
00006FDA                          9423  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00006FDA                          9424                                   
00006FDA                          9425                                   
00006FDA                          9426  ;-----------------------------------Data Register Direct--------------------------------
00006FDA  4282                    9427  OR_ea_Dn_Dn_reg                  CLR.L  D2
00006FDC  3400                    9428                                   MOVE.W D0,D2
00006FDE  C4BC 0000003F           9429                                  AND.L             #mask_OR_ea_reg_OR_mode,D2             ;load the mask into D2 for the mode OR the register
00006FE4  B4BC 00000000           9430                                   CMP.L              #match_OR_D0,D2                       ;check to see in the register is 0
00006FEA  6600 0006               9431                                   BNE                OR_ea_Dn_rD1                                     ;if not go check register 1
00006FEE  6700 0064               9432                                   BEQ                OR_ea_Dn_D0_out                              ;if equal go to output ORroutine
00006FF2                          9433  
00006FF2  B4BC 00000001           9434  OR_ea_Dn_rD1                     CMP.L              #match_OR_D1,D2                       ;check to see in the register is 1
00006FF8  6600 0006               9435                                   BNE                OR_ea_Dn_rD2                                     ;if not go check register 2
00006FFC  6700 0068               9436                                   BEQ                OR_ea_Dn_D1_out                              ;if equal go to output ORroutine
00007000                          9437  
00007000  B4BC 00000002           9438  OR_ea_Dn_rD2                     CMP.L              #match_OR_D2,D2                       ;check to see in the register is 2
00007006  6600 0006               9439                                   BNE                OR_ea_Dn_rD3                                     ;if not go check register 3
0000700A  6700 006C               9440                                   BEQ                OR_ea_Dn_D2_out                              ;if equal go to output ORroutine
0000700E                          9441  
0000700E  B4BC 00000003           9442  OR_ea_Dn_rD3                     CMP.L              #match_OR_D3,D2                       ;check to see in the register is 3
00007014  6600 0006               9443                                   BNE                OR_ea_Dn_rD4                                     ;if not go check register 4
00007018  6700 0070               9444                                   BEQ                OR_ea_Dn_D3_out                              ;if equal go to output ORroutine
0000701C                          9445  
0000701C  B4BC 00000004           9446  OR_ea_Dn_rD4                     CMP.L              #match_OR_D4,D2                       ;check to see in the register is 4
00007022  6600 0006               9447                                   BNE                OR_ea_Dn_rD5                                     ;if not go check register 5
00007026  6700 0074               9448                                   BEQ                OR_ea_Dn_D4_out                              ;if equal go to output ORroutine
0000702A                          9449  
0000702A  B4BC 00000005           9450  OR_ea_Dn_rD5                     CMP.L              #match_OR_D5,D2                       ;check to see in the register is 5
00007030  6600 0006               9451                                   BNE                OR_ea_Dn_rD6                                     ;if not go check register 6
00007034  6700 0078               9452                                   BEQ                OR_ea_Dn_D5_out                              ;if equal go to output ORroutine
00007038                          9453  
00007038  B4BC 00000006           9454  OR_ea_Dn_rD6                     CMP.L              #match_OR_D6,D2                       ;check to see in the register is 6
0000703E  6600 0006               9455                                   BNE                OR_ea_Dn_rD7                                     ;if not go check register 7
00007042  6700 007C               9456                                   BEQ                OR_ea_Dn_D6_out                              ;if equal go to output ORroutine
00007046                          9457  
00007046  B4BC 00000007           9458  OR_ea_Dn_rD7                     CMP.L              #match_OR_D7,D2                       ;check to see in the register is 7
0000704C  6700 0084               9459                                   BEQ                OR_ea_Dn_D7_out                              ;if equal go to output ORroutine
00007050  6600 FECC               9460                                   BNE                ERROR                               ;if not equal, got to error message
00007054                          9461  ;--------------------Data Register Direct Output-----------------------
00007054  227C 000083F2           9462  OR_ea_Dn_D0_out                 MOVE.L          #ea_D0,A1                           ;load string constant into A1
0000705A  4EB8 140A               9463                                  JSR     print_first
0000705E  4EB9 0000756E           9464                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007064  4E75                    9465                                  RTS
00007066                          9466      
00007066  227C 000083F5           9467  OR_ea_Dn_D1_out                 MOVE.L          #ea_D1,A1                           ;load string constant into A1
0000706C  4EB8 140A               9468                                  JSR     print_first
00007070  4EB9 0000756E           9469                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007076  4E75                    9470                                  RTS
00007078                          9471  
00007078  227C 000083F8           9472  OR_ea_Dn_D2_out                 MOVE.L          #ea_D2,A1                           ;load string constant into A1
0000707E  4EB8 140A               9473                                  JSR     print_first
00007082  4EB9 0000756E           9474                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007088  4E75                    9475                                  RTS
0000708A                          9476  
0000708A  227C 000083FB           9477  OR_ea_Dn_D3_out                 MOVE.L          #ea_D3,A1                           ;load string constant into A1
00007090  4EB8 140A               9478                                  JSR     print_first
00007094  4EB9 0000756E           9479                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000709A  4E75                    9480                                  RTS
0000709C                          9481  
0000709C                          9482  
0000709C  227C 000083FE           9483  OR_ea_Dn_D4_out                 MOVE.L          #ea_D4,A1                           ;load string constant into A1
000070A2  4EB8 140A               9484                                  JSR     print_first
000070A6  4EB9 0000756E           9485                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000070AC  4E75                    9486                                  RTS
000070AE                          9487  
000070AE                          9488  
000070AE  227C 00008401           9489  OR_ea_Dn_D5_out                 MOVE.L          #ea_D5,A1                           ;load string constant into A1
000070B4  4EB8 140A               9490                                  JSR     print_first
000070B8  4EB9 0000756E           9491                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000070BE  4E75                    9492                                  RTS
000070C0                          9493  
000070C0  227C 00008404           9494  OR_ea_Dn_D6_out                 MOVE.L          #ea_D6,A1                           ;load string constant into A1
000070C6  4EB8 140A               9495                                  JSR     print_first
000070CA  4EB9 0000756E           9496                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000070D0  4E75                    9497                                  RTS
000070D2                          9498  
000070D2  227C 00008407           9499  OR_ea_Dn_D7_out                 MOVE.L          #ea_D7,A1                           ;load string constant into A1
000070D8  4EB8 140A               9500                                  JSR     print_first
000070DC  4EB9 0000756E           9501                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000070E2  4E75                    9502                                  RTS
000070E4                          9503  
000070E4                          9504  ;------------------Address Register Direct-----------------------
000070E4  4282                    9505  OR_ea_Dn_An_reg                  CLR.L  D2
000070E6  3400                    9506                                   MOVE.W D0,D2
000070E8  C4BC 0000003F           9507                                  AND.L             #mask_OR_ea_reg_OR_mode,D2
000070EE  B4BC 00000008           9508                                  CMP.L           #match_OR_A0,D2                      ;check reg is equal to 0
000070F4  6600 0006               9509                                   BNE             OR_ea_Dn_rA1                         ;if not try reg 1
000070F8  6700 016E               9510                                   BEQ             OR_ea_Dn_An_indir_reg0_out           ;if equal go to output ORroutine
000070FC                          9511  
000070FC  B4BC 00000009           9512  OR_ea_Dn_rA1                     CMP.L           #match_OR_A1,D2                      ;check reg is equal to 1
00007102  6600 0006               9513                                   BNE             OR_ea_Dn_rA2                         ;if not try reg 2
00007106  6700 0172               9514                                   BEQ             OR_ea_Dn_An_indir_reg1_out           ;if equal go to output ORroutine
0000710A                          9515  
0000710A  B4BC 0000000A           9516  OR_ea_Dn_rA2                     CMP.L           #match_OR_A2,D2                      ;check reg is equal to 2
00007110  6600 0006               9517                                   BNE             OR_ea_Dn_rA3                         ;if not try reg 3
00007114  6700 0176               9518                                   BEQ             OR_ea_Dn_An_indir_reg2_out           ;if equal go to output ORroutine
00007118                          9519  
00007118  B4BC 0000000B           9520  OR_ea_Dn_rA3                     CMP.L           #match_OR_A3,D2                      ;check reg is equal to 3
0000711E  6600 0006               9521                                   BNE             OR_ea_Dn_rA4                         ;if not try reg 4
00007122  6700 017A               9522                                   BEQ             OR_ea_Dn_An_indir_reg3_out           ;if equal go to output ORroutine
00007126                          9523  
00007126  B4BC 0000000C           9524  OR_ea_Dn_rA4                     CMP.L           #match_OR_A4,D2                      ;check reg is equal to 4
0000712C  6600 0006               9525                                   BNE             OR_ea_Dn_rA5                         ;if not try reg 5
00007130  6700 017E               9526                                   BEQ             OR_ea_Dn_An_indir_reg4_out           ;if equal go to output ORroutine
00007134                          9527              
00007134  B4BC 0000000D           9528  OR_ea_Dn_rA5                     CMP.L           #match_OR_A5,D2                      ;check reg is equal to 5
0000713A  6600 0006               9529                                   BNE             OR_ea_Dn_rA6                         ;if not try reg 6
0000713E  6700 0182               9530                                   BEQ             OR_ea_Dn_An_indir_reg5_out           ;if equal go to output ORroutine
00007142                          9531  
00007142  B4BC 0000000E           9532  OR_ea_Dn_rA6                     CMP.L           #match_OR_A6,D2                      ;check reg is equal to 6
00007148  6600 0006               9533                                   BNE             OR_ea_Dn_rA7                         ;if not try reg 7
0000714C  6700 0186               9534                                   BEQ             OR_ea_Dn_An_indir_reg6_out           ;if equal go to output ORroutine
00007150                          9535  
00007150  B4BC 0000000F           9536  OR_ea_Dn_rA7                     CMP.L           #match_OR_A7,D2                      ;check reg is equal to 7
00007156  6700 018E               9537                                   BEQ             OR_ea_Dn_An_indir_reg7_out           ;if equal go to output ORroutine
0000715A  6600 FDC2               9538                                   BNE             ERROR                                ;if not equal to an addresssing mode, pritn error
0000715E                          9539  
0000715E                          9540  ;--------------------Address Register Direct Output-----------------------
0000715E  227C 0000840A           9541  OR_ea_Dn_A0_out                 MOVE.L          #ea_A0,A1                           ;load string constant into A1
00007164  4EB8 140A               9542                                  JSR     print_first
00007168  4EB9 0000756E           9543                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000716E  4E75                    9544                                  RTS
00007170                          9545                                  
00007170  227C 0000840D           9546  OR_ea_Dn_A1_out                 MOVE.L          #ea_A1,A1                           ;load string constant into A1
00007176  4EB8 140A               9547                                  JSR     print_first
0000717A  4EB9 0000756E           9548                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007180  4E75                    9549                                  RTS
00007182                          9550                                  
00007182  227C 00008410           9551  OR_ea_Dn_A2_out                 MOVE.L          #ea_A2,A1                           ;load string constant into A1
00007188  4EB8 140A               9552                                  JSR     print_first
0000718C  4EB9 0000756E           9553                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007192  4E75                    9554                                  RTS
00007194                          9555                                  
00007194  227C 00008413           9556  OR_ea_Dn_A3_out                 MOVE.L          #ea_A3,A1                           ;load string constant into A1
0000719A  4EB8 140A               9557                                  JSR     print_first
0000719E  4EB9 0000756E           9558                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000071A4  4E75                    9559                                  RTS
000071A6                          9560  
000071A6  227C 00008416           9561  OR_ea_Dn_A4_out                 MOVE.L          #ea_A4,A1                           ;load string constant into A1
000071AC  4EB8 140A               9562                                  JSR     print_first
000071B0  4EB9 0000756E           9563                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000071B6  4E75                    9564                                  RTS
000071B8                          9565  
000071B8  227C 00008419           9566  OR_ea_Dn_A5_out                 MOVE.L          #ea_A5,A1                           ;load string constant into A1
000071BE  4EB8 140A               9567                                  JSR     print_first
000071C2  4EB9 0000756E           9568                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000071C8  4E75                    9569                                  RTS
000071CA                          9570  
000071CA  227C 0000841C           9571  OR_ea_Dn_A6_out                 MOVE.L          #ea_A6,A1                           ;load string constant into A1
000071D0  4EB8 140A               9572                                  JSR     print_first
000071D4  4EB9 0000756E           9573                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000071DA  4E75                    9574                                  RTS
000071DC                          9575  
000071DC  227C 0000841F           9576  OR_ea_Dn_A7_out                 MOVE.L          #ea_A7,A1                           ;load string constant into A1
000071E2  4EB8 140A               9577                                  JSR     print_first
000071E6  4EB9 0000756E           9578                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000071EC  4E75                    9579                                  RTS
000071EE                          9580  
000071EE                          9581  ;------------------Address Register Indirect-----------------------
000071EE  4282                    9582  OR_ea_Dn_An_indir_reg            CLR.L  D2
000071F0  3400                    9583                                   MOVE.W D0,D2
000071F2  C4BC 0000003F           9584                                  AND.L             #mask_OR_ea_reg_OR_mode,D2
000071F8  B4BC 00000010           9585                                  CMP.L          #match_OR_An_indir_r0,D2              ;check reg is equal to 0
000071FE  6600 0006               9586                                   BNE             OR_ea_Dn_An_indir_reg1                           ;if not try reg 1
00007202  6700 0064               9587                                   BEQ             OR_ea_Dn_An_indir_reg0_out                       ;if equal go to output ORroutine
00007206                          9588  
00007206  B4BC 00000011           9589  OR_ea_Dn_An_indir_reg1           CMP.L           #match_OR_An_indir_r1,D2              ;check reg is equal to 1
0000720C  6600 0006               9590                                   BNE             OR_ea_Dn_An_indir_reg2                           ;if not try reg 2
00007210  6700 0068               9591                                   BEQ             OR_ea_Dn_An_indir_reg1_out                       ;if equal go to output ORroutine
00007214                          9592  
00007214  B4BC 00000012           9593  OR_ea_Dn_An_indir_reg2           CMP.L           #match_OR_An_indir_r2,D2              ;check reg is equal to 2
0000721A  6600 0006               9594                                   BNE             OR_ea_Dn_An_indir_reg3                           ;if not try reg 3
0000721E  6700 006C               9595                                   BEQ             OR_ea_Dn_An_indir_reg2_out                       ;if equal go to output ORroutine
00007222                          9596  
00007222  B4BC 00000013           9597  OR_ea_Dn_An_indir_reg3           CMP.L           #match_OR_An_indir_r3,D2              ;check reg is equal to 3
00007228  6600 0006               9598                                   BNE             OR_ea_Dn_An_indir_reg4                           ;if not try reg 4
0000722C  6700 0070               9599                                   BEQ             OR_ea_Dn_An_indir_reg3_out                       ;if equal go to output ORroutine
00007230                          9600      
00007230  B4BC 00000014           9601  OR_ea_Dn_An_indir_reg4           CMP.L           #match_OR_An_indir_r4,D2              ;check reg is equal to 4
00007236  6600 0006               9602                                   BNE             OR_ea_Dn_An_indir_reg5                           ;if not try reg 5
0000723A  6700 0074               9603                                   BEQ             OR_ea_Dn_An_indir_reg4_out                       ;if equal go to output ORroutine
0000723E                          9604          
0000723E  B4BC 00000015           9605  OR_ea_Dn_An_indir_reg5           CMP.L           #match_OR_An_indir_r5,D2              ;check reg is equal to 5
00007244  6600 0006               9606                                   BNE             OR_ea_Dn_An_indir_reg6                           ;if not try reg 6
00007248  6700 0078               9607                                   BEQ             OR_ea_Dn_An_indir_reg5_out                       ;if equal go to output ORroutine
0000724C                          9608  
0000724C  B4BC 00000016           9609  OR_ea_Dn_An_indir_reg6           CMP.L           #match_OR_An_indir_r6,D2              ;check reg is equal to 6
00007252  6600 0006               9610                                   BNE             OR_ea_Dn_An_indir_reg7                           ;if not try reg 7
00007256  6700 007C               9611                                   BEQ             OR_ea_Dn_An_indir_reg6_out                       ;if equal go to output ORroutine
0000725A                          9612  
0000725A  B4BC 00000017           9613  OR_ea_Dn_An_indir_reg7           CMP.L           #match_OR_An_indir_r7,D2              ;check reg is equal to 7
00007260  6700 0084               9614                                   BEQ             OR_ea_Dn_An_indir_reg7_out                       ;if equal go to output ORroutine
00007264  6600 FCB8               9615                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00007268                          9616  
00007268                          9617  ;--------------------Address Register Indirect Output-----------------------
00007268  227C 00008432           9618  OR_ea_Dn_An_indir_reg0_out                  MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
0000726E  4EB8 140A               9619                                  JSR     print_first
00007272  4EB9 0000756E           9620                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007278  4E75                    9621                                  RTS
0000727A                          9622  
0000727A  227C 00008437           9623  OR_ea_Dn_An_indir_reg1_out                  MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00007280  4EB8 140A               9624                                  JSR     print_first
00007284  4EB9 0000756E           9625                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000728A  4E75                    9626                                  RTS
0000728C                          9627  
0000728C  227C 0000843C           9628  OR_ea_Dn_An_indir_reg2_out                  MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00007292  4EB8 140A               9629                                  JSR     print_first
00007296  4EB9 0000756E           9630                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000729C  4E75                    9631                                  RTS
0000729E                          9632  
0000729E  227C 00008441           9633  OR_ea_Dn_An_indir_reg3_out                  MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
000072A4  4EB8 140A               9634                                  JSR     print_first
000072A8  4EB9 0000756E           9635                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000072AE  4E75                    9636                                  RTS
000072B0                          9637  
000072B0  227C 00008446           9638  OR_ea_Dn_An_indir_reg4_out                  MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
000072B6  4EB8 140A               9639                                  JSR     print_first
000072BA  4EB9 0000756E           9640                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000072C0  4E75                    9641                                  RTS
000072C2                          9642  
000072C2  227C 0000844B           9643  OR_ea_Dn_An_indir_reg5_out                  MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
000072C8  4EB8 140A               9644                                  JSR     print_first
000072CC  4EB9 0000756E           9645                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000072D2  4E75                    9646                                  RTS
000072D4                          9647  
000072D4  227C 00008450           9648  OR_ea_Dn_An_indir_reg6_out                  MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
000072DA  4EB8 140A               9649                                  JSR     print_first
000072DE  4EB9 0000756E           9650                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000072E4  4E75                    9651                                  RTS
000072E6                          9652                                          
000072E6  227C 00008455           9653  OR_ea_Dn_An_indir_reg7_out                  MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
000072EC  4EB8 140A               9654                                  JSR     print_first
000072F0  4EB9 0000756E           9655                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000072F6  4E75                    9656                                  RTS
000072F8                          9657  
000072F8                          9658  ;------------------Address Register Indirect with Post Increment-----------------------
000072F8  4282                    9659  OR_ea_Dn_An_indir_postinc_reg               CLR.L  D2
000072FA  3400                    9660                                              MOVE.W D0,D2
000072FC  C4BC 0000003F           9661                                              AND.L             #mask_OR_ea_reg_OR_mode,D2
00007302  B4BC 00000018           9662                                              CMP.L      #match_OR_An_indir_postinc_r0,D2        ;check reg is equal to 0
00007308  6600 0006               9663                                              BNE        OR_ea_Dn_An_indir_pinc_r1               ;if not try reg 1
0000730C  6700 0064               9664                                              BEQ        OR_ea_Dn_An_indir_pinc_r0_out           ;if equal go to output ORroutine
00007310                          9665  
00007310  B4BC 00000019           9666  OR_ea_Dn_An_indir_pinc_r1                   CMP.L      #match_OR_An_indir_postinc_r1,D2        ;check reg is equal to 1
00007316  6600 0006               9667                                              BNE        OR_ea_Dn_An_indir_pinc_r2               ;if not try reg 2
0000731A  6700 0068               9668                                              BEQ        OR_ea_Dn_An_indir_pinc_r1_out           ;if equal go to output ORroutine
0000731E                          9669  
0000731E  B4BC 0000001A           9670  OR_ea_Dn_An_indir_pinc_r2                   CMP.L      #match_OR_An_indir_postinc_r2,D2        ;check reg is equal to 2
00007324  6600 0006               9671                                              BNE        OR_ea_Dn_An_indir_pinc_r3               ;if not try reg 3
00007328  6700 006C               9672                                              BEQ        OR_ea_Dn_An_indir_pinc_r2_out           ;if equal go to output ORroutine
0000732C                          9673  
0000732C  B4BC 0000001B           9674  OR_ea_Dn_An_indir_pinc_r3                   CMP.L      #match_OR_An_indir_postinc_r3,D2        ;check reg is equal to 3
00007332  6600 0006               9675                                              BNE        OR_ea_Dn_An_indir_pinc_r4               ;if not try reg 4
00007336  6700 0070               9676                                              BEQ        OR_ea_Dn_An_indir_pinc_r3_out           ;if equal go to output ORroutine
0000733A                          9677   
0000733A  B4BC 0000001C           9678  OR_ea_Dn_An_indir_pinc_r4                   CMP.L      #match_OR_An_indir_postinc_r4,D2        ;check reg is equal to 4
00007340  6600 0006               9679                                              BNE        OR_ea_Dn_An_indir_pinc_r5               ;if not try reg 5
00007344  6700 0074               9680                                              BEQ        OR_ea_Dn_An_indir_pinc_r4_out           ;if equal go to output ORroutine
00007348                          9681  
00007348  B4BC 0000001D           9682  OR_ea_Dn_An_indir_pinc_r5                   CMP.L      #match_OR_An_indir_postinc_r5,D2        ;check reg is equal to 5
0000734E  6600 0006               9683                                              BNE        OR_ea_Dn_An_indir_pinc_r6               ;if not try reg 6
00007352  6700 0078               9684                                              BEQ        OR_ea_Dn_An_indir_pinc_r5_out           ;if equal go to output ORroutine
00007356                          9685  
00007356  B4BC 0000001E           9686  OR_ea_Dn_An_indir_pinc_r6                   CMP.L      #match_OR_An_indir_postinc_r6,D2        ;check reg is equal to 6
0000735C  6600 0006               9687                                              BNE        OR_ea_Dn_An_indir_pinc_r7               ;if not try reg 7
00007360  6700 007C               9688                                              BEQ        OR_ea_Dn_An_indir_pinc_r6_out           ;if equal go to output ORroutine
00007364                          9689  
00007364  B4BC 0000001F           9690  OR_ea_Dn_An_indir_pinc_r7                   CMP.L      #match_OR_An_indir_postinc_r7,D2        ;check reg is equal to 7
0000736A  6700 0084               9691                                              BEQ        OR_ea_Dn_An_indir_pinc_r7_out           ;if equal go to output ORroutine
0000736E  6600 FBAE               9692                                              BNE        ERROR                                   :if not equal to an addresssing mode, pritn error
00007372                          9693  
00007372                          9694  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00007372  227C 0000845A           9695  OR_ea_Dn_An_indir_pinc_r0_out               MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00007378  4EB8 140A               9696                                  JSR     print_first
0000737C  4EB9 0000756E           9697                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007382  4E75                    9698                                  RTS
00007384                          9699  
00007384  227C 00008460           9700  OR_ea_Dn_An_indir_pinc_r1_out               MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
0000738A  4EB8 140A               9701                                  JSR     print_first
0000738E  4EB9 0000756E           9702                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007394  4E75                    9703                                  RTS
00007396                          9704  
00007396  227C 00008466           9705  OR_ea_Dn_An_indir_pinc_r2_out               MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
0000739C  4EB8 140A               9706                                  JSR     print_first
000073A0  4EB9 0000756E           9707                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operORO
000073A6  4E75                    9708                                  RTS
000073A8                          9709  
000073A8  227C 0000846C           9710  OR_ea_Dn_An_indir_pinc_r3_out               MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
000073AE  4EB8 140A               9711                                  JSR     print_first
000073B2  4EB9 0000756E           9712                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073B8  4E75                    9713                                  RTS
000073BA                          9714  
000073BA  227C 00008472           9715  OR_ea_Dn_An_indir_pinc_r4_out               MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
000073C0  4EB8 140A               9716                                  JSR     print_first
000073C4  4EB9 0000756E           9717                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073CA  4E75                    9718                                  RTS
000073CC                          9719  
000073CC  227C 00008478           9720  OR_ea_Dn_An_indir_pinc_r5_out               MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
000073D2  4EB8 140A               9721                                  JSR     print_first
000073D6  4EB9 0000756E           9722                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073DC  4E75                    9723                                  RTS
000073DE                          9724  
000073DE  227C 0000847E           9725  OR_ea_Dn_An_indir_pinc_r6_out               MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
000073E4  4EB8 140A               9726                                  JSR     print_first
000073E8  4EB9 0000756E           9727                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073EE  4E75                    9728                                  RTS
000073F0                          9729  
000073F0  227C 00008484           9730  OR_ea_Dn_An_indir_pinc_r7_out               MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
000073F6  4EB8 140A               9731                                  JSR     print_first
000073FA  4EB9 0000756E           9732                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007400  4E75                    9733                                  RTS
00007402                          9734  
00007402                          9735  ;------------------Address Register Indirect with Pre Decrement-----------------------
00007402  4282                    9736  OR_ea_Dn_An_indir_predec                    CLR.L  D2
00007404  3400                    9737                                              MOVE.W D0,D2
00007406  C4BC 0000003F           9738                                              AND.L             #mask_OR_ea_reg_OR_mode,D2
0000740C  B4BC 00000020           9739                                              CMP.L      #match_OR_An_indir_predec_reg0,D2       ;check reg is equal to 0
00007412  6600 0006               9740                                              BNE        OR_ea_Dn_An_indir_pdec_r1                      ;if not try reg 1
00007416  6700 0064               9741                                              BEQ        OR_ea_Dn_An_indir_pdec_r0_out               ;if equal go to output ORroutine
0000741A                          9742  
0000741A  B4BC 00000021           9743  OR_ea_Dn_An_indir_pdec_r1                   CMP.L      #match_OR_An_indir_predec_reg1,D2       ;check reg is equal to 1
00007420  6600 0006               9744                                              BNE        OR_ea_Dn_An_indir_pdec_r2                      ;if not try reg 2
00007424  6700 0068               9745                                              BEQ        OR_ea_Dn_An_indir_pdec_r1_out               ;if equal go to output ORroutine
00007428                          9746  
00007428  B4BC 00000022           9747  OR_ea_Dn_An_indir_pdec_r2                   CMP.L      #match_OR_An_indir_predec_reg2,D2       ;check reg is equal to 2
0000742E  6600 0006               9748                                              BNE        OR_ea_Dn_An_indir_pdec_r3                      ;if not try reg 3
00007432  6700 006C               9749                                              BEQ        OR_ea_Dn_An_indir_pdec_r2_out               ;if equal go to output ORroutine
00007436                          9750  
00007436  B4BC 00000023           9751  OR_ea_Dn_An_indir_pdec_r3                   CMP.L      #match_OR_An_indir_predec_reg3,D2       ;check reg is equal to 3
0000743C  6600 0006               9752                                              BNE        OR_ea_Dn_An_indir_pdec_r4                      ;if not try reg 4
00007440  6700 0070               9753                                              BEQ        OR_ea_Dn_An_indir_pdec_r3_out               ;if equal go to output ORroutine
00007444                          9754  
00007444  B4BC 00000024           9755  OR_ea_Dn_An_indir_pdec_r4                   CMP.L      #match_OR_An_indir_predec_reg4,D2       ;check reg is equal to 4
0000744A  6600 0006               9756                                              BNE        OR_ea_Dn_An_indir_pdec_r5                      ;if not try reg 5
0000744E  6700 0074               9757                                              BEQ        OR_ea_Dn_An_indir_pdec_r4_out               ;if equal go to output ORroutine
00007452                          9758  
00007452  B4BC 00000025           9759  OR_ea_Dn_An_indir_pdec_r5                   CMP.L      #match_OR_An_indir_predec_reg5,D2       ;check reg is equal to 5
00007458  6600 0006               9760                                              BNE        OR_ea_Dn_An_indir_pdec_r6                     ;if not try reg 6
0000745C  6700 0078               9761                                              BEQ        OR_ea_Dn_An_indir_pdec_r5_out               ;if equal go to output ORroutine
00007460                          9762  
00007460  B4BC 00000026           9763  OR_ea_Dn_An_indir_pdec_r6                   CMP.L      #match_OR_An_indir_predec_reg6,D2       ;check reg is equal to 6
00007466  6600 0006               9764                                              BNE        OR_ea_Dn_An_indir_pdec_r7                     ;if not try reg 7
0000746A  6700 007C               9765                                              BEQ        OR_ea_Dn_An_indir_pdec_r6_out               ;if equal go to output ORroutine
0000746E                          9766  
0000746E  B4BC 00000027           9767  OR_ea_Dn_An_indir_pdec_r7                   CMP.L      #match_OR_An_indir_predec_reg7,D2       ;check reg is equal to 7
00007474  6700 0084               9768                                              BEQ        OR_ea_Dn_An_indir_pdec_r7_out               ;if equal go to output ORroutine
00007478  6600 FAA4               9769                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
0000747C                          9770  
0000747C                          9771  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000747C  227C 0000848A           9772  OR_ea_Dn_An_indir_pdec_r0_out                   MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
00007482  4EB8 140A               9773                                  JSR     print_first
00007486  4EB9 0000756E           9774                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000748C  4E75                    9775                                  RTS
0000748E                          9776                                              
0000748E  227C 00008490           9777  OR_ea_Dn_An_indir_pdec_r1_out                   MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
00007494  4EB8 140A               9778                                  JSR     print_first
00007498  4EB9 0000756E           9779                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000749E  4E75                    9780                                  RTS
000074A0                          9781  
000074A0  227C 00008496           9782  OR_ea_Dn_An_indir_pdec_r2_out                   MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
000074A6  4EB8 140A               9783                                  JSR     print_first
000074AA  4EB9 0000756E           9784                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074B0  4E75                    9785                                  RTS
000074B2                          9786  
000074B2  227C 0000849C           9787  OR_ea_Dn_An_indir_pdec_r3_out                   MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
000074B8  4EB8 140A               9788                                  JSR     print_first
000074BC  4EB9 0000756E           9789                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074C2  4E75                    9790                                  RTS
000074C4                          9791  
000074C4  227C 000084A2           9792  OR_ea_Dn_An_indir_pdec_r4_out                   MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
000074CA  4EB8 140A               9793                                  JSR     print_first
000074CE  4EB9 0000756E           9794                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074D4  4E75                    9795                                  RTS
000074D6                          9796  
000074D6  227C 000084A8           9797  OR_ea_Dn_An_indir_pdec_r5_out                   MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
000074DC  4EB8 140A               9798                                  JSR     print_first
000074E0  4EB9 0000756E           9799                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074E6  4E75                    9800                                  RTS
000074E8                          9801  
000074E8  227C 000084AE           9802  OR_ea_Dn_An_indir_pdec_r6_out                   MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
000074EE  4EB8 140A               9803                                  JSR     print_first
000074F2  4EB9 0000756E           9804                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074F8  4E75                    9805                                  RTS
000074FA                          9806  
000074FA  227C 000084B4           9807  OR_ea_Dn_An_indir_pdec_r7_out                   MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00007500  4EB8 140A               9808                                  JSR     print_first
00007504  4EB9 0000756E           9809                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000750A  4E75                    9810                                  RTS
0000750C                          9811          
0000750C                          9812  ;------------------Absolute Addressing Output-----------------------
0000750C  22FC 000084C4           9813  OR_ea_Dn_abs_add_word_out                 MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
00007512  22C5                    9814                                            MOVE.L      D5,(A1)+                           ;load address                  
00007514  4EB8 140A               9815                                          JSR  print_first 
00007518  4EB9 0000756E           9816                                           JSR         OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000751E  4E75                    9817                                  RTS                                           
00007520                          9818  
00007520  2A18                    9819  OR_ea_Dn_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00007522  22FC 000084C4           9820                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
00007528  22C5                    9821                                           MOVE.L      D5,(A1)+                           ;load address                  
0000752A  4EB8 140A               9822                                          JSR     print_first
0000752E  4EB9 0000756E           9823                                           JSR         OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007534  4E75                    9824                                  RTS
00007536                          9825  
00007536                          9826  ;---------------Immediate Addresing---------------------------
00007536  2A18                    9827  OR_ea_Dn_immediate_add_out          MOVE.L      (A0)+,D5                             ;capture the immediate address
00007538  BCBC 000000FC           9828                                      CMP.L       #match_OR_imm_add_word,D6               ;check to see if need to pull word
0000753E  2A18                    9829                                      MOVE.L      (A0)+,D5                            ;pull the word
00007540  6700 0006               9830                                      BEQ         OR_ea_Dn_imm_add_w                           ;if equal go pull word    
00007544  6600 0014               9831                                      BNE         OR_ea_Dn_imm_add_l                           ;if not equal, go check long
00007548                          9832                                           
00007548  22FC 000084C4           9833  OR_ea_Dn_imm_add_w                  MOVE.L     #ea_$,(A1)+                          ;load the $
0000754E  32C5                    9834                                      MOVE.W     D5,(A1)+                             ;load the word address                           
00007550  4EB8 140A               9835                                  JSR     print_first
00007554  4EB9 0000756E           9836                                      JSR        OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000755A                          9837                                           
0000755A  2A18                    9838  OR_ea_Dn_imm_add_l                  MOVE.L     (A0)+,D5                             ;pull the long OR increase the pointer
0000755C  22FC 000084C4           9839                                      MOVE.L     #ea_$,(A1)+                          ;load the $
00007562  2245                    9840                                      MOVE.L     D5,A1                               ;move to A1
00007564  4EB8 140A               9841                                  JSR     print_first
00007568  4EB9 0000756E           9842                                      JSR        OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000756E                          9843  
0000756E                          9844  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
0000756E  4282                    9845  OR_determine_second_op                          CLR.L  D2
00007570  3400                    9846                                                  MOVE.W D0,D2
00007572  C4BC 00000E00           9847                                                  AND.L       #mask_OR_An_reg,D2      ;load the mask for the register into D2, masks bit 11-9
00007578                          9848                                                  
00007578  B4BC 00000000           9849  ea_Dn_OR_reg0                                   CMP.L       #match_OR_reg0,D2       ;check to see if reg equal 0
0000757E  6600 0006               9850                                                  BNE         ea_Dn_OR_reg1                   ;if not equal got check reg 1
00007582  6700 0064               9851                                                  BEQ         ea_Dn_OR_reg0_out               ;if equal go to output
00007586                          9852                                                  
00007586  B4BC 00000200           9853  ea_Dn_OR_reg1                                   CMP.L       #match_OR_reg1,D2       ;check to see if reg equal 1
0000758C  6600 0006               9854                                                  BNE         ea_Dn_OR_reg2                   ;if not equal got check reg 2
00007590  6700 005E               9855                                                  BEQ         ea_Dn_OR_reg1_out               ;if equal go to output
00007594                          9856  
00007594  B4BC 00000400           9857  ea_Dn_OR_reg2                                   CMP.L       #match_OR_reg2,D2       ;check to see if reg equal 2
0000759A  6600 0006               9858                                                  BNE         ea_Dn_OR_reg3                   ;if not equal got check reg 3
0000759E  6700 0058               9859                                                  BEQ         ea_Dn_OR_reg2_out               ;if equal go to output
000075A2                          9860  
000075A2  B4BC 00000600           9861  ea_Dn_OR_reg3                                   CMP.L       #match_OR_reg3,D2       ;check to see if reg equal 3
000075A8  6600 0006               9862                                                  BNE         ea_Dn_OR_reg4                   ;if not equal got check reg 4
000075AC  6700 0052               9863                                                  BEQ         ea_Dn_OR_reg3_out               ;if equal go to output
000075B0                          9864                                                  
000075B0  B4BC 00000800           9865  ea_Dn_OR_reg4                                   CMP.L       #match_OR_reg4,D2       ;check to see if reg equal 4
000075B6  6600 0006               9866                                                  BNE         ea_Dn_OR_reg5                   ;if not equal got check reg 5
000075BA  6700 004C               9867                                                  BEQ         ea_Dn_OR_reg4_out               ;if equal go to output
000075BE                          9868  
000075BE  B4BC 00000A00           9869  ea_Dn_OR_reg5                                   CMP.L       #match_OR_reg5,D2       ;check to see if reg equal 5
000075C4  6600 0006               9870                                                  BNE         ea_Dn_OR_reg6                   ;if not equal got check reg 6
000075C8  6700 0046               9871                                                  BEQ         ea_Dn_OR_reg5_out               ;if equal go to output
000075CC                          9872  
000075CC  B4BC 00000C00           9873  ea_Dn_OR_reg6                                   CMP.L       #match_OR_reg6,D2       ;check to see if reg equal 6
000075D2  6600 0006               9874                                                  BNE         ea_Dn_OR_reg7                   ;if not equal got check reg 7
000075D6  6700 0040               9875                                                  BEQ         ea_Dn_OR_reg6_out               ;if equal go to output          
000075DA                          9876  
000075DA  B4BC 00000E00           9877  ea_Dn_OR_reg7                                   CMP.L       #match_OR_reg7,D2       ;check to see if reg equal 7
000075E0  6700 003E               9878                                                  BEQ         ea_Dn_OR_reg7_out               ;if equal go to output
000075E4  6600 F938               9879                                                  BNE         ERROR                         ;if not equal to an addresssing mode, pritn error
000075E8                          9880                                  
000075E8                          9881  
000075E8                          9882  ;--------------------Data Output-----------------------
000075E8  227C 000083F2           9883  ea_Dn_OR_reg0_out                               MOVE.L          #ea_D0,A1                        ;load string constant into A1
000075EE                          9884                                        
000075EE  4E75                    9885                                                  RTS
000075F0                          9886                                              
000075F0  227C 000083F5           9887  ea_Dn_OR_reg1_out                               MOVE.L          #ea_D1,A1                       ;load string constant into A1
000075F6                          9888                                        
000075F6  4E75                    9889                                                  RTS
000075F8                          9890                                              
000075F8  227C 000083F8           9891  ea_Dn_OR_reg2_out                               MOVE.L          #ea_D2,A1                       ;load string constant into A1
000075FE                          9892                                        
000075FE  4E75                    9893                                                  RTS
00007600                          9894                                              
00007600  227C 000083FB           9895  ea_Dn_OR_reg3_out                               MOVE.L          #ea_D3,A1                       ;load string constant into A1
00007606                          9896                                        
00007606  4E75                    9897                                                  RTS
00007608                          9898                                              
00007608  227C 000083FE           9899  ea_Dn_OR_reg4_out                               MOVE.L          #ea_D4,A1                       ;load string constant into A1
0000760E                          9900                                        
0000760E  4E75                    9901                                                  RTS
00007610                          9902                                              
00007610  227C 00008401           9903  ea_Dn_OR_reg5_out                               MOVE.L          #ea_D5,A1                       ;load string constant into A1
00007616                          9904                                        
00007616  4E75                    9905                                                  RTS
00007618                          9906                                              
00007618  227C 00008404           9907  ea_Dn_OR_reg6_out                               MOVE.L          #ea_D6,A1                       ;load string constant into A1
0000761E                          9908                                        
0000761E  4E75                    9909                                                  RTS
00007620                          9910                                              
00007620  227C 00008407           9911  ea_Dn_OR_reg7_out                               MOVE.L          #ea_D7,A1                       ;load string constant into A1
00007626                          9912                                        
00007626  4E75                    9913                                                  RTS             
00007628                          9914                                              
00007628                          9915                      
00007628                          9916  
00007628                          9917  
00007628                          9918  
00007628                          9919  
00007628                          9920  
00007628                          9921  
00007628                          9922  
00007628                          9923  
00007628                          9924  
00007628                          9925  
00007628                          9926  
00007628                          9927  
00007628                          9928  
00007628                          9929  
00007628                          9930  
00007628                          9931  
00007628                          9932  
00007628                          9933  
00007628                          9934  
00007628                          9935  
00007628                          9936  
00007628                          9937  
00007628                          9938  
00007628                          9939  
00007628                          9940  
00007628                          9941  
00007628                          9942  
00007628                          9943  
00007628                          9944  
00007628                          9945  
00007628                          9946                          
00007628                          9947  ;------------------------------------------------------------------------------------------------------------------------------------------
00007628                          9948  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
00007628                          9949  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00007628  4282                    9950  OR_Dn_ea                                        CLR.L       D2                                ;clear D2 
0000762A  3400                    9951                                                  MOVE.W      D0,D2
0000762C  C4BC 00000E00           9952                                                  AND.L       #mask_OR_An_reg,D2            ;load the mask for the register into D2, masks bit 11-9
00007632                          9953                                                  
00007632  B4BC 00000000           9954  Dn_ea_OR_reg0                                   CMP.L       #match_OR_reg0,D2                   ;check to see if reg equal 0
00007638  6600 0006               9955                                                  BNE         Dn_ea_OR_reg1                   ;if not equal got check reg 1
0000763C  6700 0064               9956                                                  BEQ         Dn_ea_OR_reg0_out               ;if equal go to output
00007640                          9957                                                  
00007640  B4BC 00000200           9958  Dn_ea_OR_reg1                                   CMP.L       #match_OR_reg1,D2                   ;check to see if reg equal 1
00007646  6600 0006               9959                                                  BNE         Dn_ea_OR_reg2                   ;if not equal got check reg 2
0000764A  6700 0068               9960                                                  BEQ         Dn_ea_OR_reg1_out               ;if equal go to output
0000764E                          9961  
0000764E  B4BC 00000400           9962  Dn_ea_OR_reg2                                   CMP.L       #match_OR_reg2,D2                   ;check to see if reg equal 2
00007654  6600 0006               9963                                                  BNE         Dn_ea_OR_reg3                   ;if not equal got check reg 3
00007658  6700 006C               9964                                                  BEQ         Dn_ea_OR_reg2_out               ;if equal go to output
0000765C                          9965  
0000765C  B4BC 00000600           9966  Dn_ea_OR_reg3                                   CMP.L       #match_OR_reg3,D2                   ;check to see if reg equal 3
00007662  6600 0006               9967                                                  BNE         Dn_ea_OR_reg4                   ;if not equal got check reg 4
00007666  6700 0070               9968                                                  BEQ         Dn_ea_OR_reg3_out               ;if equal go to output
0000766A                          9969                                                  
0000766A  B4BC 00000800           9970  Dn_ea_OR_reg4                                   CMP.L       #match_OR_reg4,D2                   ;check to see if reg equal 4
00007670  6600 0006               9971                                                  BNE         Dn_ea_OR_reg5                   ;if not equal got check reg 5
00007674  6700 0074               9972                                                  BEQ         Dn_ea_OR_reg4_out               ;if equal go to output
00007678                          9973  
00007678  B4BC 00000A00           9974  Dn_ea_OR_reg5                                   CMP.L       #match_OR_reg5,D2                   ;check to see if reg equal 5
0000767E  6600 0006               9975                                                  BNE         Dn_ea_OR_reg6                   ;if not equal got check reg 6
00007682  6700 0078               9976                                                  BEQ         Dn_ea_OR_reg5_out               ;if equal go to output
00007686                          9977  
00007686  B4BC 00000C00           9978  Dn_ea_OR_reg6                                   CMP.L       #match_OR_reg6,D2                   ;check to see if reg equal 6
0000768C  6600 0006               9979                                                  BNE         Dn_ea_OR_reg7                   ;if not equal got check reg 7
00007690  6700 007C               9980                                                  BEQ         Dn_ea_OR_reg6_out               ;if equal go to output          
00007694                          9981  
00007694  B4BC 00000E00           9982  Dn_ea_OR_reg7                                   CMP.L       #match_OR_reg7,D2                   ;check to see if reg equal 7
0000769A  6700 0084               9983                                                  BEQ         Dn_ea_OR_reg7_out               ;if equal go to output
0000769E  6600 F87E               9984                                                  BNE         ERROR                                ;if not equal to an addresssing mode, pritn error
000076A2                          9985                                  
000076A2                          9986  
000076A2                          9987  ;--------------------Data Output-----------------------
000076A2  227C 000083F2           9988  Dn_ea_OR_reg0_out             MOVE.L            #ea_D0,A1                                          ;load string constant into A1
000076A8  4EB8 140A               9989                                  JSR     print_first
000076AC  4EB9 00007732           9990                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
000076B2  4E75                    9991                                  RTS
000076B4                          9992                                              
000076B4  227C 000083F5           9993  Dn_ea_OR_reg1_out             MOVE.L            #ea_D1,A1                                       ;load string constant into A1
000076BA  4EB8 140A               9994                                  JSR     print_first
000076BE  4EB9 00007732           9995                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
000076C4  4E75                    9996                                  RTS
000076C6                          9997                                              
000076C6  227C 000083F8           9998  Dn_ea_OR_reg2_out             MOVE.L            #ea_D2,A1                                       ;load string constant into A1
000076CC  4EB8 140A               9999                                  JSR     print_first
000076D0  4EB9 00007732          10000                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
000076D6  4E75                   10001                                  RTS
000076D8                         10002                                              
000076D8  227C 000083FB          10003  Dn_ea_OR_reg3_out             MOVE.L            #ea_D3,A1                                           ;load string constant into A1
000076DE  4EB8 140A              10004                                  JSR     print_first
000076E2  4EB9 00007732          10005                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
000076E8  4E75                   10006                                  RTS
000076EA                         10007                                              
000076EA  227C 000083FE          10008  Dn_ea_OR_reg4_out             MOVE.L            #ea_D4,A1                                           ;load string constant into A1
000076F0  4EB8 140A              10009                                  JSR     print_first
000076F4  4EB9 00007732          10010                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
000076FA  4E75                   10011                                  RTS
000076FC                         10012                                                  
000076FC  227C 00008401          10013  Dn_ea_OR_reg5_out             MOVE.L            #ea_D5,A1                                           ;load string constant into A1
00007702  4EB8 140A              10014                                  JSR     print_first
00007706  4EB9 00007732          10015                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
0000770C  4E75                   10016                                  RTS
0000770E                         10017                                              
0000770E  227C 00008404          10018  Dn_ea_OR_reg6_out             MOVE.L            #ea_D6,A1                                           ;load string constant into A1
00007714  4EB8 140A              10019                                  JSR     print_first
00007718  4EB9 00007732          10020                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
0000771E  4E75                   10021                                  RTS
00007720                         10022                                              
00007720  227C 00008407          10023  Dn_ea_OR_reg7_out             MOVE.L            #ea_D7,A1                                           ;load string constant into A1
00007726  4EB8 140A              10024                                  JSR     print_first
0000772A  4EB9 00007732          10025                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007730  4E75                   10026                                  RTS
00007732                         10027                                              
00007732                         10028  ;------------------------------------------------------Determine Second OperOR----------------------------------------------------------------
00007732  4241                   10029  OR_determine_second_operand      CLR               D1                                            ;clear D1 to load new mask                                
00007734  3200                   10030                                   MOVE.W             D0,D1
00007736  223C 00000038          10031                                   MOVE.L             #mask_OR_ea_mode,D1                        ;move the mask to D1
0000773C                         10032  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000773C  B2BC 00000010          10033  OR_Dn_ea_add_reg_indir           CMP.L             #match_OR_An_indir,D1                      ;check to see if mode is add reg indir
00007742  6600 0006              10034                                   BNE               OR_Dn_ea_add_reg_indir_pdec                          ;if not, go check add reg indir predec 
00007746  6700 0042              10035                                   BEQ               OR_Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
0000774A                         10036             
0000774A  B2BC 00000020          10037  OR_Dn_ea_add_reg_indir_pdec      CMP.L             #match_OR_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00007750  6600 0006              10038                                   BNE               OR_Dn_ea_add_reg_indir_pinc                         ;if not go check add reg indir/predec
00007754  6700 01A8              10039                                   BEQ               OR_Dn_ea_An_indir_predec                               ;if equal go figure out the register
00007758                         10040                        
00007758  B2BC 00000018          10041  OR_Dn_ea_add_reg_indir_pinc      CMP.L             #match_OR_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
0000775E  6600 0006              10042                                   BNE               OR_Dn_ea_abs_add_word                                  ;if not go check abs add word
00007762  6700 00E0              10043                                   BEQ               OR_Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
00007766                         10044  
00007766  243C 0000003F          10045  OR_Dn_ea_abs_add_word            MOVE.L             #mask_OR_abs_add,D2                        ;load mask to determine if abs add word or long
0000776C                         10046                                   
0000776C  B4BC 00000038          10047                                   CMP.L             #match_OR_abs_add_word,D2                  ;check if abs add word
00007772  2A18                   10048                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00007774  6600 0006              10049                                   BNE               OR_Dn_ea_abs_add_long                                  ;if not go check abs add long
00007778  6700 023E              10050                                   BEQ               OR_Dn_ea_abs_add_word_out                              ;if equal go to output
0000777C                         10051    
0000777C  B4BC 00000039          10052  OR_Dn_ea_abs_add_long            CMP.L             #match_OR_abs_add_long,D2                  ;check to see if abs add long
00007782  6700 023E              10053                                   BEQ               OR_Dn_ea_abs_add_long_out                              ;if equal go to output
00007786  6600 F796              10054                                   BNE               ERROR                                         ;if not equal go to error mesage OR routine
0000778A                         10055  
0000778A                         10056  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
0000778A                         10057                                   
0000778A                         10058                                   
0000778A                         10059  ;------------------Address Register Indirect-----------------------
0000778A  4282                   10060  OR_Dn_ea_An_indir_reg            CLR.L          D2
0000778C  3400                   10061                                   MOVE.W         D0,D2
0000778E  C4BC 0000003F          10062                                  AND.L          #mask_OR_ea_reg_OR_mode,D2         ;load the mask into D2 for the mode OR the register
00007794  B4BC 00000010          10063                                   CMP.L           #match_OR_An_indir_r0,D2              ;check reg is equal to 0
0000779A  6600 0006              10064                                   BNE             OR_Dn_ea_An_indir_reg1                           ;if not try reg 1
0000779E  6700 0064              10065                                   BEQ             OR_Dn_ea_An_indir_reg0_out                       ;if equal go to output ORroutine
000077A2                         10066  
000077A2  B4BC 00000011          10067  OR_Dn_ea_An_indir_reg1           CMP.L           #match_OR_An_indir_r1,D2              ;check reg is equal to 1
000077A8  6600 0006              10068                                   BNE             OR_Dn_ea_An_indir_reg2                           ;if not try reg 2
000077AC  6700 005E              10069                                   BEQ             OR_Dn_ea_An_indir_reg1_out                       ;if equal go to output ORroutine
000077B0                         10070  
000077B0  B4BC 00000012          10071  OR_Dn_ea_An_indir_reg2           CMP.L           #match_OR_An_indir_r2,D2              ;check reg is equal to 2
000077B6  6600 0006              10072                                   BNE             OR_Dn_ea_An_indir_reg3                           ;if not try reg 3
000077BA  6700 0058              10073                                   BEQ             OR_Dn_ea_An_indir_reg2_out                       ;if equal go to output ORroutine
000077BE                         10074  
000077BE  B4BC 00000013          10075  OR_Dn_ea_An_indir_reg3           CMP.L           #match_OR_An_indir_r3,D2              ;check reg is equal to 3
000077C4  6600 0006              10076                                   BNE             OR_Dn_ea_An_indir_reg4                           ;if not try reg 4
000077C8  6700 0052              10077                                   BEQ             OR_Dn_ea_An_indir_reg3_out                       ;if equal go to output ORroutine
000077CC                         10078      
000077CC  B4BC 00000014          10079  OR_Dn_ea_An_indir_reg4           CMP.L           #match_OR_An_indir_r4,D2              ;check reg is equal to 4
000077D2  6600 0006              10080                                   BNE             OR_Dn_ea_An_indir_reg5                           ;if not try reg 5
000077D6  6700 004C              10081                                   BEQ             OR_Dn_ea_An_indir_reg4_out                       ;if equal go to output ORroutine
000077DA                         10082          
000077DA  B4BC 00000015          10083  OR_Dn_ea_An_indir_reg5           CMP.L           #match_OR_An_indir_r5,D2              ;check reg is equal to 5
000077E0  6600 0006              10084                                   BNE             OR_Dn_ea_An_indir_reg6                           ;if not try reg 6
000077E4  6700 0046              10085                                   BEQ             OR_Dn_ea_An_indir_reg5_out                       ;if equal go to output ORroutine
000077E8                         10086  
000077E8  B4BC 00000016          10087  OR_Dn_ea_An_indir_reg6           CMP.L           #match_OR_An_indir_r6,D2              ;check reg is equal to 6
000077EE  6600 0006              10088                                   BNE             OR_Dn_ea_An_indir_reg7                           ;if not try reg 7
000077F2  6700 0040              10089                                   BEQ             OR_Dn_ea_An_indir_reg6_out                       ;if equal go to output ORroutine
000077F6                         10090  
000077F6  B4BC 00000017          10091  OR_Dn_ea_An_indir_reg7           CMP.L           #match_OR_An_indir_r7,D2              ;check reg is equal to 7
000077FC  6700 003E              10092                                   BEQ             OR_Dn_ea_An_indir_reg7_out                       ;if equal go to output ORroutine
00007800  6600 F71C              10093                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00007804                         10094  
00007804                         10095  ;--------------------Address Register Indirect Output-----------------------
00007804  227C 00008432          10096  OR_Dn_ea_An_indir_reg0_out          MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
0000780A                         10097                                        
0000780A  4E75                   10098                                       RTS
0000780C                         10099  
0000780C  227C 00008437          10100  OR_Dn_ea_An_indir_reg1_out          MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00007812                         10101                                        
00007812  4E75                   10102                                       RTS
00007814                         10103  
00007814  227C 0000843C          10104  OR_Dn_ea_An_indir_reg2_out          MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
0000781A                         10105                                        
0000781A  4E75                   10106                                       RTS
0000781C                         10107  
0000781C  227C 00008441          10108  OR_Dn_ea_An_indir_reg3_out          MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00007822                         10109                                        
00007822  4E75                   10110                                       RTS
00007824                         10111  
00007824  227C 00008446          10112  OR_Dn_ea_An_indir_reg4_out          MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
0000782A                         10113                                        
0000782A  4E75                   10114                                       RTS
0000782C                         10115  
0000782C  227C 0000844B          10116  OR_Dn_ea_An_indir_reg5_out          MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00007832                         10117                                        
00007832  4E75                   10118                                       RTS
00007834                         10119  
00007834  227C 00008450          10120  OR_Dn_ea_An_indir_reg6_out          MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
0000783A                         10121                                        
0000783A  4E75                   10122                                       RTS
0000783C                         10123                                          
0000783C  227C 00008455          10124  OR_Dn_ea_An_indir_reg7_out          MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00007842                         10125                                        
00007842  4E75                   10126                                      RTS
00007844                         10127  
00007844                         10128  ;------------------Address Register Indirect with Post Increment-----------------------
00007844  4282                   10129  OR_Dn_ea_An_indir_postinc_reg               CLR.L          D2
00007846  3400                   10130                                              MOVE.W         D0,D2
00007848  C4BC 0000003F          10131                                              AND.L          #mask_OR_ea_reg_OR_mode,D2 
0000784E  B4BC 00000018          10132                                              CMP.L      #match_OR_An_indir_postinc_r0,D2                 ;check reg is equal to 0
00007854  6600 0006              10133                                              BNE        OR_Dn_ea_An_indir_pinc_r1                      ;if not try reg 1
00007858  6700 0064              10134                                              BEQ        OR_Dn_ea_An_indir_pinc_r0_out                  ;if equal go to output ORroutine
0000785C                         10135  
0000785C  B4BC 00000019          10136  OR_Dn_ea_An_indir_pinc_r1                   CMP.L      #match_OR_An_indir_postinc_r1,D2                 ;check reg is equal to 1
00007862  6600 0006              10137                                              BNE        OR_Dn_ea_An_indir_pinc_r2                      ;if not try reg 2
00007866  6700 005E              10138                                              BEQ        OR_Dn_ea_An_indir_pinc_r1_out                  ;if equal go to output ORroutine
0000786A                         10139  
0000786A  B4BC 0000001A          10140  OR_Dn_ea_An_indir_pinc_r2                   CMP.L      #match_OR_An_indir_postinc_r2,D2                ;check reg is equal to 2
00007870  6600 0006              10141                                              BNE        OR_Dn_ea_An_indir_pinc_r3                      ;if not try reg 3
00007874  6700 0058              10142                                              BEQ        OR_Dn_ea_An_indir_pinc_r2_out                  ;if equal go to output ORroutine
00007878                         10143  
00007878  B4BC 0000001B          10144  OR_Dn_ea_An_indir_pinc_r3                   CMP.L      #match_OR_An_indir_postinc_r3,D2               ;check reg is equal to 3
0000787E  6600 0006              10145                                              BNE        OR_Dn_ea_An_indir_pinc_r4                      ;if not try reg 4
00007882  6700 0052              10146                                              BEQ        OR_Dn_ea_An_indir_pinc_r3_out                  ;if equal go to output ORroutine
00007886                         10147   
00007886  B4BC 0000001C          10148  OR_Dn_ea_An_indir_pinc_r4                   CMP.L      #match_OR_An_indir_postinc_r4,D2               ;check reg is equal to 4
0000788C  6600 0006              10149                                              BNE        OR_Dn_ea_An_indir_pinc_r5                      ;if not try reg 5
00007890  6700 004C              10150                                              BEQ        OR_Dn_ea_An_indir_pinc_r4_out                  ;if equal go to output ORroutine
00007894                         10151  
00007894  B4BC 0000001D          10152  OR_Dn_ea_An_indir_pinc_r5                   CMP.L      #match_OR_An_indir_postinc_r5,D2                 ;check reg is equal to 5
0000789A  6600 0006              10153                                              BNE        OR_Dn_ea_An_indir_pinc_r6                      ;if not try reg 6
0000789E  6700 0046              10154                                              BEQ        OR_Dn_ea_An_indir_pinc_r5_out                  ;if equal go to output ORroutine
000078A2                         10155  
000078A2  B4BC 0000001E          10156  OR_Dn_ea_An_indir_pinc_r6                   CMP.L      #match_OR_An_indir_postinc_r6,D2                 ;check reg is equal to 6
000078A8  6600 0006              10157                                              BNE        OR_Dn_ea_An_indir_pinc_r7                        ;if not try reg 7
000078AC  6700 0040              10158                                              BEQ        OR_Dn_ea_An_indir_pinc_r6_out                    ;if equal go to output ORroutine
000078B0                         10159  
000078B0  B4BC 0000001F          10160  OR_Dn_ea_An_indir_pinc_r7                   CMP.L      #match_OR_An_indir_postinc_r7,D2                 ;check reg is equal to 7
000078B6  6700 003E              10161                                              BEQ        OR_Dn_ea_An_indir_pinc_r7_out                    ;if equal go to output ORroutine
000078BA  6600 F662              10162                                              BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
000078BE                         10163  
000078BE                         10164  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000078BE  227C 0000845A          10165  OR_Dn_ea_An_indir_pinc_r0_out           MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
000078C4                         10166                                        
000078C4  4E75                   10167                                          RTS
000078C6                         10168  
000078C6  227C 00008460          10169  OR_Dn_ea_An_indir_pinc_r1_out           MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
000078CC                         10170                                        
000078CC  4E75                   10171                                          RTS
000078CE                         10172  
000078CE  227C 00008466          10173  OR_Dn_ea_An_indir_pinc_r2_out           MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
000078D4                         10174                                        
000078D4  4E75                   10175                                          RTS
000078D6                         10176  
000078D6  227C 0000846C          10177  OR_Dn_ea_An_indir_pinc_r3_out           MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
000078DC                         10178                                        
000078DC  4E75                   10179                                          RTS
000078DE                         10180  
000078DE  227C 00008472          10181  OR_Dn_ea_An_indir_pinc_r4_out           MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
000078E4                         10182                                        
000078E4  4E75                   10183                                          RTS
000078E6                         10184  
000078E6  227C 00008478          10185  OR_Dn_ea_An_indir_pinc_r5_out           MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
000078EC                         10186                                        
000078EC  4E75                   10187                                          RTS
000078EE                         10188  
000078EE  227C 0000847E          10189  OR_Dn_ea_An_indir_pinc_r6_out           MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
000078F4                         10190                                        
000078F4  4E75                   10191                                          RTS
000078F6                         10192  
000078F6  227C 00008484          10193  OR_Dn_ea_An_indir_pinc_r7_out           MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
000078FC                         10194                                        
000078FC  4E75                   10195                                          RTS
000078FE                         10196  
000078FE                         10197  ;------------------Address Register Indirect with Pre Decrement-----------------------
000078FE  4282                   10198  OR_Dn_ea_An_indir_predec                    CLR.L          D2
00007900  3400                   10199                                              MOVE.W         D0,D2
00007902  C4BC 0000003F          10200                                              AND.L          #mask_OR_ea_reg_OR_mode,D2 
00007908  B4BC 00000020          10201                                              CMP.L      #match_OR_An_indir_predec_reg0,D2       ;check reg is equal to 0
0000790E  6600 0006              10202                                              BNE        OR_Dn_ea_An_indir_pdec_r1                      ;if not try reg 1
00007912  6700 0064              10203                                              BEQ        OR_Dn_ea_An_indir_pdec_r0_out               ;if equal go to output ORroutine
00007916                         10204  
00007916  B4BC 00000021          10205  OR_Dn_ea_An_indir_pdec_r1                   CMP.L      #match_OR_An_indir_predec_reg1,D2       ;check reg is equal to 1
0000791C  6600 0006              10206                                              BNE        OR_Dn_ea_An_indir_pdec_r2                      ;if not try reg 2
00007920  6700 005E              10207                                              BEQ        OR_Dn_ea_An_indir_pdec_r1_out               ;if equal go to output ORroutine
00007924                         10208  
00007924  B4BC 00000022          10209  OR_Dn_ea_An_indir_pdec_r2                   CMP.L      #match_OR_An_indir_predec_reg2,D2       ;check reg is equal to 2
0000792A  6600 0006              10210                                              BNE        OR_Dn_ea_An_indir_pdec_r3                      ;if not try reg 3
0000792E  6700 0058              10211                                              BEQ        OR_Dn_ea_An_indir_pdec_r2_out               ;if equal go to output ORroutine
00007932                         10212  
00007932  B4BC 00000023          10213  OR_Dn_ea_An_indir_pdec_r3                   CMP.L      #match_OR_An_indir_predec_reg3,D2       ;check reg is equal to 3
00007938  6600 0006              10214                                              BNE        OR_Dn_ea_An_indir_pdec_r4                      ;if not try reg 4
0000793C  6700 0052              10215                                              BEQ        OR_Dn_ea_An_indir_pdec_r3_out               ;if equal go to output ORroutine
00007940                         10216  
00007940  B4BC 00000024          10217  OR_Dn_ea_An_indir_pdec_r4                   CMP.L      #match_OR_An_indir_predec_reg4,D2       ;check reg is equal to 4
00007946  6600 0006              10218                                              BNE        OR_Dn_ea_An_indir_pdec_r5                      ;if not try reg 5
0000794A  6700 004C              10219                                              BEQ        OR_Dn_ea_An_indir_pdec_r4_out               ;if equal go to output ORroutine
0000794E                         10220  
0000794E  B4BC 00000025          10221  OR_Dn_ea_An_indir_pdec_r5                   CMP.L      #match_OR_An_indir_predec_reg5,D2       ;check reg is equal to 5
00007954  6600 0006              10222                                              BNE        OR_Dn_ea_An_indir_pdec_r6                     ;if not try reg 6
00007958  6700 0046              10223                                              BEQ        OR_Dn_ea_An_indir_pdec_r5_out               ;if equal go to output ORroutine
0000795C                         10224  
0000795C  B4BC 00000026          10225  OR_Dn_ea_An_indir_pdec_r6                   CMP.L      #match_OR_An_indir_predec_reg6,D2       ;check reg is equal to 6
00007962  6600 0006              10226                                              BNE        OR_Dn_ea_An_indir_pdec_r7                     ;if not try reg 7
00007966  6700 0040              10227                                              BEQ        OR_Dn_ea_An_indir_pdec_r6_out               ;if equal go to output ORroutine
0000796A                         10228  
0000796A  B4BC 00000027          10229  OR_Dn_ea_An_indir_pdec_r7                   CMP.L      #match_OR_An_indir_predec_reg7,D2       ;check reg is equal to 7
00007970  6700 003E              10230                                              BEQ        OR_Dn_ea_An_indir_pdec_r7_out               ;if equal go to output ORroutine
00007974  6600 F5A8              10231                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
00007978                         10232  
00007978                         10233  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00007978  227C 0000848A          10234  OR_Dn_ea_An_indir_pdec_r0_out                  MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
0000797E                         10235                                        
0000797E  4E75                   10236                                                 RTS
00007980                         10237                                              
00007980  227C 00008490          10238  OR_Dn_ea_An_indir_pdec_r1_out                  MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00007986                         10239                                        
00007986  4E75                   10240                                                 RTS
00007988                         10241  
00007988  227C 00008496          10242  OR_Dn_ea_An_indir_pdec_r2_out                  MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
0000798E                         10243                                        
0000798E  4E75                   10244                                                 RTS
00007990                         10245  
00007990  227C 0000849C          10246  OR_Dn_ea_An_indir_pdec_r3_out                  MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00007996                         10247                                        
00007996  4E75                   10248                                                 RTS
00007998                         10249  
00007998  227C 000084A2          10250  OR_Dn_ea_An_indir_pdec_r4_out                  MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
0000799E                         10251                                        
0000799E  4E75                   10252                                                 RTS
000079A0                         10253  
000079A0  227C 000084A8          10254  OR_Dn_ea_An_indir_pdec_r5_out                  MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
000079A6                         10255                                        
000079A6  4E75                   10256                                                 RTS
000079A8                         10257  
000079A8  227C 000084AE          10258  OR_Dn_ea_An_indir_pdec_r6_out                  MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
000079AE                         10259                                        
000079AE  4E75                   10260                                                 RTS
000079B0                         10261  
000079B0  227C 000084B4          10262  OR_Dn_ea_An_indir_pdec_r7_out                  MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
000079B6                         10263                                        
000079B6  4E75                   10264                                                 RTS
000079B8                         10265                                              
000079B8                         10266  ;------------------Absolute Addressing Output-----------------------
000079B8  22FC 000084C4          10267  OR_Dn_ea_abs_add_word_out             MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
000079BE  22C5                   10268                                        MOVE.L      D5,(A1)+                           ;load address                  
000079C0                         10269                                        
000079C0  4E75                   10270                                        RTS                                            :return to ORroutine
000079C2                         10271                                             
000079C2                         10272  
000079C2  2A18                   10273  OR_Dn_ea_abs_add_long_out             MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000079C4  22FC 000084C4          10274                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
000079CA  22C5                   10275                                        MOVE.L      D5,(A1)+                           ;load address                  
000079CC                         10276                                        
000079CC  4E75                   10277                                        RTS                                            :return to ORroutine                                                                             
000079CE                         10278  
000079CE                         10279  
000079CE  =000001C0              10280  mask_OR_opmode                          EQU         $01C0                   ;mask for the opmode to determine operOR order
000079CE                         10281  
000079CE  =00000038              10282  mask_OR_ea_mode                 EQU         $0038
000079CE  =0000003F              10283  mask_OR_abs_add                 EQU         $003F
000079CE  =0000003F              10284  mask_OR_ea_reg_OR_mode          EQU         $003F
000079CE  =00000E00              10285  mask_OR_An_reg                  EQU         $0E00
000079CE                         10286  
000079CE                         10287  
000079CE  =00000100              10288  match_OR_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
000079CE  =00000140              10289  match_OR_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
000079CE  =00000180              10290  match_OR_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
000079CE                         10291  
000079CE  =00000000              10292  match_OR_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
000079CE  =00000040              10293  match_OR_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
000079CE  =00000080              10294  match_OR_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
000079CE                         10295  
000079CE                         10296  
000079CE                         10297  
000079CE  =00000000              10298  match_OR_Dn                     EQU         $0000
000079CE  =00000010              10299  match_OR_An_indir                   EQU         $0010
000079CE  =00000020              10300  match_OR_An_indir_predec            EQU         $0020
000079CE  =00000018              10301  match_OR_An_indir_postinc           EQU         $0018
000079CE  =00000038              10302  match_OR_abs_add_word               EQU         $0038
000079CE  =00000039              10303  match_OR_abs_add_long               EQU         $0039
000079CE                         10304  
000079CE  =00000000              10305  match_OR_D0                         EQU         $0000
000079CE  =00000001              10306  match_OR_D1                         EQU         $0001
000079CE  =00000002              10307  match_OR_D2                         EQU         $0002
000079CE  =00000003              10308  match_OR_D3                         EQU         $0003
000079CE  =00000004              10309  match_OR_D4                         EQU         $0004
000079CE  =00000005              10310  match_OR_D5                         EQU         $0005
000079CE  =00000006              10311  match_OR_D6                         EQU         $0006
000079CE  =00000007              10312  match_OR_D7                         EQU         $0007
000079CE                         10313  
000079CE  =00000008              10314  match_OR_A0                         EQU         $0008
000079CE  =00000009              10315  match_OR_A1                         EQU         $0009
000079CE  =0000000A              10316  match_OR_A2                         EQU         $000A
000079CE  =0000000B              10317  match_OR_A3                         EQU         $000B
000079CE  =0000000C              10318  match_OR_A4                         EQU         $000C
000079CE  =0000000D              10319  match_OR_A5                         EQU         $000D
000079CE  =0000000E              10320  match_OR_A6                         EQU         $000E
000079CE  =0000000F              10321  match_OR_A7                         EQU         $000F
000079CE                         10322  
000079CE  =00000010              10323  match_OR_An_indir_r0                    EQU         $0010
000079CE  =00000011              10324  match_OR_An_indir_r1                    EQU         $0011
000079CE  =00000012              10325  match_OR_An_indir_r2                    EQU         $0012
000079CE  =00000013              10326  match_OR_An_indir_r3                    EQU         $0013
000079CE  =00000014              10327  match_OR_An_indir_r4                    EQU         $0014
000079CE  =00000015              10328  match_OR_An_indir_r5                    EQU         $0015
000079CE  =00000016              10329  match_OR_An_indir_r6                    EQU         $0016
000079CE  =00000017              10330  match_OR_An_indir_r7                    EQU         $0017
000079CE                         10331  
000079CE  =00000018              10332  match_OR_An_indir_postinc_r0        EQU         $0018
000079CE  =00000019              10333  match_OR_An_indir_postinc_r1        EQU         $0019
000079CE  =0000001A              10334  match_OR_An_indir_postinc_r2        EQU         $001A
000079CE  =0000001B              10335  match_OR_An_indir_postinc_r3        EQU         $001B
000079CE  =0000001C              10336  match_OR_An_indir_postinc_r4        EQU         $001C
000079CE  =0000001D              10337  match_OR_An_indir_postinc_r5        EQU         $001D
000079CE  =0000001E              10338  match_OR_An_indir_postinc_r6        EQU         $001E
000079CE  =0000001F              10339  match_OR_An_indir_postinc_r7        EQU         $001F
000079CE                         10340  
000079CE  =00000020              10341  match_OR_An_indir_predec_reg0           EQU         $0020
000079CE  =00000021              10342  match_OR_An_indir_predec_reg1           EQU         $0021
000079CE  =00000022              10343  match_OR_An_indir_predec_reg2           EQU         $0022
000079CE  =00000023              10344  match_OR_An_indir_predec_reg3           EQU         $0023
000079CE  =00000024              10345  match_OR_An_indir_predec_reg4           EQU         $0024
000079CE  =00000025              10346  match_OR_An_indir_predec_reg5           EQU         $0025
000079CE  =00000026              10347  match_OR_An_indir_predec_reg6           EQU         $0026
000079CE  =00000027              10348  match_OR_An_indir_predec_reg7           EQU         $0027
000079CE                         10349  
000079CE  =0000003C              10350  match_OR_imm_add                           EQU         $003C
000079CE  =000000FC              10351  match_OR_imm_add_word                      EQU         $00FC
000079CE  =000001FC              10352  match_OR_imm_add_long                      EQU         $01FC
000079CE                         10353  
000079CE  =00000000              10354  match_OR_reg0                           EQU         $0000
000079CE  =00000200              10355  match_OR_reg1                           EQU         $0200
000079CE  =00000400              10356  match_OR_reg2                           EQU         $0400
000079CE  =00000600              10357  match_OR_reg3                           EQU         $0600
000079CE  =00000800              10358  match_OR_reg4                           EQU         $0800
000079CE  =00000A00              10359  match_OR_reg5                           EQU         $0A00
000079CE  =00000C00              10360  match_OR_reg6                           EQU         $0C00
000079CE  =00000E00              10361  match_OR_reg7                           EQU         $0E00
000079CE                         10362  
000079CE                         10363  
000079CE                         10364  
000079CE                         10365  
000079CE                         10366  
000079CE                         10367  
000079CE                         10368  
000079CE                         10369  -------------------- end include --------------------
000079CE                         10370              INCLUDE 'ROD Subroutine.x68'
000079CE                         10371  
000079CE                         10372  
000079CE                         10373  ROD_sub                                             ;preserve the registers
000079CE                         10374                                   
000079CE                         10375  ;------------------------Determine Shift Type-----------------------------------------------------------------
000079CE  4281                   10376  ROD_shift_type                   CLR.L              D1
000079D0  3200                   10377                                   MOVE.W             D0,D1                
000079D2  C2BC 000000C0          10378                                   AND.L              #mask_ROD_shift_type,D1                 ;load mask into D1
000079D8                         10379  
000079D8  B2BC 000000C0          10380                                   CMP.L              #match_ROD_mem_shift,D1                 ;check to see if memory shift
000079DE  6700 0006              10381                                   BEQ                ROD_mem_shift                               ;if equal go to mem shift subroutine
000079E2  6600 0296              10382                                   BNE                ROD_reg_shift                               ;if ROD mem shift, go to reg shift
000079E6                         10383  
000079E6                         10384  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
000079E6  4281                   10385  ROD_mem_shift                    CLR.L              D1                                        ;clear shift mask
000079E8  3200                   10386                                   MOVE.W             D0,D1                
000079EA  C2BC 00000038          10387                                   AND.L             #mask_ROD_ea_mode,D1                      ;move the mask to D1
000079F0                         10388  
000079F0  B2BC 00000010          10389  ROD_An_indir                     CMP.L             #match_ROD_An_indir,D1                    ;check to see if mode is add reg indir
000079F6  6600 0014              10390                                   BNE               ROD_An_indir_predec                           ;if ROD, go check add reg indir predec 
000079FA  6700 0046              10391                                   BEQ               ROD_An_indir_reg                              ;if equal go figure out the register           
000079FE                         10392            
000079FE  B2BC 00000020          10393  ROD_An_indir_postinc             CMP.L             #match_ROD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
00007A04  6600 0006              10394                                   BNE               ROD_An_indir_predec                           ;if ROD go check add reg indir/predec
00007A08  6700 00F2              10395                                   BEQ               ROD_An_indir_postinc_reg                      ;if equal go figure out the register
00007A0C                         10396                        
00007A0C  B2BC 00000018          10397  ROD_An_indir_predec              CMP.L             #match_ROD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
00007A12  6600 0006              10398                                   BNE               ROD_abs_add_word                              ;if ROD go check abs add word
00007A16  6700 0198              10399                                   BEQ               ROD_An_indir_predec_reg                       ;if equal go figure out the register
00007A1A                         10400  
00007A1A  4282                   10401  ROD_abs_add_word                 CLR.L             D2
00007A1C  3400                   10402                                   MOVE.W            D0,D2
00007A1E  C4BC 0000003F          10403                                   AND.L             #mask_ROD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
00007A24                         10404                                   
00007A24  B4BC 00000039          10405                                   CMP.L             #match_ROD_abs_add_word,D2                ;check if abs add word
00007A2A  2A18                   10406                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00007A2C  6600 0006              10407                                   BNE               ROD_abs_add_long                              ;if ROD go check abs add long
00007A30  6700 0232              10408                                   BEQ               ROD_abs_add_word_out                          ;if equal go to output
00007A34                         10409    
00007A34  B4BC 0000003C          10410  ROD_abs_add_long                 CMP.L             #match_ROD_abs_add_long,D2                ;check to see if abs add long
00007A3A  6700 0232              10411                                   BEQ               ROD_abs_add_long_out                          ;if equal go to output
00007A3E  6600 F4DE              10412                                   BNE               ERROR                                     ;if ROD equal to an addresssing mode, pritn error
00007A42                         10413                               
00007A42                         10414  
00007A42                         10415  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00007A42                         10416  ;------------------Address Register Indirect-----------------------
00007A42  4282                   10417  ROD_An_indir_reg                            CLR.L             D2                                      ;make sure D2 is empty
00007A44  3400                   10418                                              MOVE.W          D0,D2
00007A46  C4BC 0000003F          10419                                              AND.L           #mask_ROD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00007A4C                         10420  
00007A4C  B4BC 00000010          10421                                              CMP.L           #match_ROD_An_indir_r0,D2              ;check reg is equal to 0
00007A52  6600 0006              10422                                              BNE             ROD_An_indir_reg1                            ;if ROD try reg 1
00007A56  6700 0064              10423                                              BEQ             ROD_An_indir_reg0_out                     ;if equal go to output subroutine
00007A5A                         10424  
00007A5A  B4BC 00000011          10425  ROD_An_indir_reg1                           CMP.L           #match_ROD_An_indir_r1,D2              ;check reg is equal to 1
00007A60  6600 0006              10426                                              BNE             ROD_An_indir_reg2                            ;if ROD try reg 2
00007A64  6700 005E              10427                                              BEQ             ROD_An_indir_reg1_out                     ;if equal go to output subroutine
00007A68                         10428  
00007A68  B4BC 00000012          10429  ROD_An_indir_reg2                           CMP.L           #match_ROD_An_indir_r2,D2              ;check reg is equal to 2
00007A6E  6600 0006              10430                                              BNE             ROD_An_indir_reg3                            ;if ROD try reg 3
00007A72  6700 0058              10431                                              BEQ             ROD_An_indir_reg2_out                     ;if equal go to output subroutine
00007A76                         10432  
00007A76  B4BC 00000013          10433  ROD_An_indir_reg3                           CMP.L           #match_ROD_An_indir_r3,D2              ;check reg is equal to 3
00007A7C  6600 0006              10434                                              BNE             ROD_An_indir_reg4                            ;if ROD try reg 4
00007A80  6700 0052              10435                                              BEQ             ROD_An_indir_reg3_out                     ;if equal go to output subroutine
00007A84                         10436  
00007A84  B4BC 00000014          10437  ROD_An_indir_reg4                           CMP.L           #match_ROD_An_indir_r4,D2              ;check reg is equal to 4
00007A8A  6600 0006              10438                                              BNE             ROD_An_indir_reg5                            ;if ROD try reg 5
00007A8E  6700 004C              10439                                              BEQ             ROD_An_indir_reg4_out                    ;if equal go to output subroutine
00007A92                         10440  
00007A92  B4BC 00000015          10441  ROD_An_indir_reg5                           CMP.L           #match_ROD_An_indir_r5,D2              ;check reg is equal to 5
00007A98  6600 0006              10442                                              BNE             ROD_An_indir_reg6                            ;if ROD try reg 6
00007A9C  6700 0046              10443                                              BEQ             ROD_An_indir_reg5_out                     ;if equal go to output subroutine
00007AA0                         10444  
00007AA0  B4BC 00000016          10445  ROD_An_indir_reg6                           CMP.L           #match_ROD_An_indir_r6,D2              ;check reg is equal to 6
00007AA6  6700 0044              10446                                              BEQ             ROD_An_indir_reg6_out                     ;if equal go to output subroutine
00007AAA  6600 0002              10447                                              BNE             ROD_An_indir_reg7
00007AAE                         10448                                              
00007AAE  B4BC 00000016          10449  ROD_An_indir_reg7                           CMP.L           #match_ROD_An_indir_r6,D2              ;check reg is equal to 6
00007AB4  6700 003E              10450                                              BEQ             ROD_An_indir_reg7_out                     ;if equal go to output subroutine
00007AB8  6600 F464              10451                                              BNE             ERROR                                        :if ROD equal to an addresssing mode, pritn error
00007ABC                         10452  
00007ABC                         10453  ;--------------------Address Register Indirect Output-----------------------
00007ABC  227C 00008432          10454  ROD_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
00007AC2  4E75                   10455                                          RTS                                                         ;return to subroutine
00007AC4                         10456                                      
00007AC4  227C 00008437          10457  ROD_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
00007ACA  4E75                   10458                                          RTS                                                         ;return to subroutine
00007ACC                         10459                                              
00007ACC  227C 0000843C          10460  ROD_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
00007AD2  4E75                   10461                                          RTS                                                     ;return to subroutine
00007AD4                         10462  
00007AD4  227C 00008441          10463  ROD_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
00007ADA  4E75                   10464                                          RTS                                                     ;return to subroutine
00007ADC                         10465                                              
00007ADC  227C 00008446          10466  ROD_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
00007AE2  4E75                   10467                                          RTS                                                         ;return to subroutine
00007AE4                         10468                                          
00007AE4  227C 0000844B          10469  ROD_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
00007AEA  4E75                   10470                                          RTS                                                     ;return to subroutine
00007AEC                         10471  
00007AEC  227C 00008450          10472  ROD_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
00007AF2  4E75                   10473                                          RTS                                                         ;return to subroutine
00007AF4                         10474  
00007AF4  227C 00008455          10475  ROD_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
00007AFA  4E75                   10476                                          RTS                                                         ;return to subroutine
00007AFC                         10477  
00007AFC                         10478  ;------------------Address Register Indirect with Post Increment-----------------------
00007AFC  4282                   10479  ROD_An_indir_postinc_reg                    CLR.L             D2                                      ;make sure D2 is empty
00007AFE  3400                   10480                                              MOVE.W          D0,D2
00007B00  B4BC 00000020          10481                                              CMP.L      #match_ROD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00007B06                         10482  
00007B06  6600 0006              10483                                              BNE        ROD_An_indir_pinc_r1                      ;if ROD try reg 1
00007B0A  6700 0064              10484                                              BEQ        ROD_An_indir_pinc_r0_out               ;if equal go to output subroutine
00007B0E                         10485  
00007B0E  B4BC 00000021          10486  ROD_An_indir_pinc_r1                        CMP.L      #match_ROD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00007B14  6600 0006              10487                                              BNE        ROD_An_indir_pinc_r2                      ;if ROD try reg 2
00007B18  6700 005E              10488                                              BEQ        ROD_An_indir_pinc_r1_out               ;if equal go to output subroutine
00007B1C                         10489  
00007B1C  B4BC 00000022          10490  ROD_An_indir_pinc_r2                        CMP.L      #match_ROD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00007B22  6600 0006              10491                                              BNE        ROD_An_indir_pinc_r3                      ;if ROD try reg 3
00007B26  6700 0058              10492                                              BEQ        ROD_An_indir_pinc_r2_out               ;if equal go to output subroutine
00007B2A                         10493      
00007B2A  B4BC 00000023          10494  ROD_An_indir_pinc_r3                        CMP.L      #match_ROD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00007B30  6600 0006              10495                                              BNE        ROD_An_indir_pinc_r4                      ;if ROD try reg 4
00007B34  6700 0052              10496                                              BEQ        ROD_An_indir_pinc_r3_out               ;if equal go to output subroutine
00007B38                         10497   
00007B38  B4BC 00000024          10498  ROD_An_indir_pinc_r4                        CMP.L      #match_ROD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00007B3E  6600 0006              10499                                              BNE        ROD_An_indir_pinc_r5                      ;if ROD try reg 5
00007B42  6700 004C              10500                                              BEQ        ROD_An_indir_pinc_r4_out               ;if equal go to output subroutine
00007B46                         10501  
00007B46  B4BC 00000025          10502  ROD_An_indir_pinc_r5                        CMP.L      #match_ROD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00007B4C  6600 0006              10503                                              BNE        ROD_An_indir_pinc_r6                      ;if ROD try reg 6
00007B50  6700 0046              10504                                              BEQ        ROD_An_indir_pinc_r5_out               ;if equal go to output subroutine
00007B54                         10505  
00007B54  B4BC 00000026          10506  ROD_An_indir_pinc_r6                        CMP.L      #match_ROD_An_indir_postinc_r6,D2        ;check reg is equal to 6
00007B5A  6700 0044              10507                                              BEQ        ROD_An_indir_pinc_r6_out              ;if equal go to output subroutine
00007B5E  6600 0002              10508                                              BNE        ROD_An_indir_pinc_r7
00007B62                         10509  
00007B62  B4BC 00000026          10510  ROD_An_indir_pinc_r7                        CMP.L      #match_ROD_An_indir_postinc_r6,D2        ;check reg is equal to 6
00007B68  6700 003E              10511                                              BEQ        ROD_An_indir_pinc_r7_out              ;if equal go to output subroutine
00007B6C  6600 F3B0              10512                                              BNE        ERROR                                        :if ROD equal to an addresssing mode, pritn error
00007B70                         10513  
00007B70                         10514  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00007B70  227C 00008460          10515  ROD_An_indir_pinc_r0_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
00007B76  4E75                   10516                                              RTS                                             ;return to subroutine
00007B78                         10517  
00007B78  227C 00008460          10518  ROD_An_indir_pinc_r1_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
00007B7E  4E75                   10519                                              RTS                                             ;return to subroutine
00007B80                         10520  
00007B80  227C 00008466          10521  ROD_An_indir_pinc_r2_out                    MOVE.L          #ea_indir_postinc_A2,A1                         ;load string constant into A1
00007B86  4E75                   10522                                              RTS                                             ;return to subroutine
00007B88                         10523  
00007B88  227C 0000846C          10524  ROD_An_indir_pinc_r3_out                    MOVE.L          #ea_indir_postinc_A3,A1                         ;load string constant into A1
00007B8E  4E75                   10525                                              RTS                                             ;return to subroutine
00007B90                         10526  
00007B90  227C 00008472          10527  ROD_An_indir_pinc_r4_out                    MOVE.L          #ea_indir_postinc_A4,A1                         ;load string constant into A1
00007B96  4E75                   10528                                              RTS                                             ;return to subroutine
00007B98                         10529  
00007B98  227C 00008478          10530  ROD_An_indir_pinc_r5_out                    MOVE.L          #ea_indir_postinc_A5,A1                         ;load string constant into A1
00007B9E  4E75                   10531                                              RTS                                             ;return to subroutine
00007BA0                         10532   
00007BA0  227C 0000847E          10533  ROD_An_indir_pinc_r6_out                    MOVE.L          #ea_indir_postinc_A6,A1                         ;load string constant into A1
00007BA6  4E75                   10534                                              RTS                                             ;return to subroutine
00007BA8                         10535  
00007BA8  227C 00008484          10536  ROD_An_indir_pinc_r7_out                    MOVE.L          #ea_indir_postinc_A7,A1                         ;load string constant into A1
00007BAE  4E75                   10537                                              RTS                                             ;return to subroutine
00007BB0                         10538                                                      
00007BB0                         10539  ;------------------Address Register Indirect with Pre Decrement-----------------------
00007BB0  4282                   10540  ROD_An_indir_predec_reg                     CLR.L             D2                                      ;make sure D2 is empty
00007BB2  3400                   10541                                              MOVE.W          D0,D2
00007BB4  B4BC 00000018          10542                                              CMP.L      #match_ROD_An_indir_predec_r0,D2         ;check reg is equal to 0
00007BBA  6600 0006              10543                                              BNE        ROD_An_indir_pdec_r1                      ;if ROD try reg 1
00007BBE  6700 0064              10544                                              BEQ        ROD_An_indir_pdec_r0_out               ;if equal go to output subroutine
00007BC2                         10545  
00007BC2  B4BC 00000019          10546  ROD_An_indir_pdec_r1                         CMP.L      #match_ROD_An_indir_predec_r1,D2         ;check reg is equal to 1
00007BC8  6600 0006              10547                                              BNE        ROD_An_indir_pdec_r2                      ;if ROD try reg 2
00007BCC  6700 005E              10548                                              BEQ        ROD_An_indir_pdec_r1_out              ;if equal go to output subroutine
00007BD0                         10549  
00007BD0  B4BC 0000001A          10550  ROD_An_indir_pdec_r2                        CMP.L      #match_ROD_An_indir_predec_r2,D2         ;check reg is equal to 2
00007BD6  6600 0006              10551                                              BNE        ROD_An_indir_pdec_r3                      ;if ROD try reg 3
00007BDA  6700 0058              10552                                              BEQ        ROD_An_indir_pdec_r2_out               ;if equal go to output subroutine
00007BDE                         10553  
00007BDE  B4BC 0000001B          10554  ROD_An_indir_pdec_r3                        CMP.L      #match_ROD_An_indir_predec_r3,D2         ;check reg is equal to 3
00007BE4  6600 0006              10555                                              BNE        ROD_An_indir_pdec_r4                      ;if ROD try reg 4
00007BE8  6700 0062              10556                                              BEQ        ROD_An_indir_pdec_r5_out               ;if equal go to output subroutine
00007BEC                         10557  
00007BEC  B4BC 0000001C          10558  ROD_An_indir_pdec_r4                        CMP.L      #match_ROD_An_indir_predec_r4,D2         ;check reg is equal to 4
00007BF2  6600 0006              10559                                              BNE        ROD_An_indir_pdec_r5                      ;if ROD try reg 5
00007BF6  6700 004C              10560                                              BEQ        ROD_An_indir_pdec_r4_out               ;if equal go to output subroutine
00007BFA                         10561  
00007BFA  B4BC 0000001D          10562  ROD_An_indir_pdec_r5                        CMP.L      #match_ROD_An_indir_predec_r5,D2         ;check reg is equal to 5
00007C00  6600 0006              10563                                              BNE        ROD_An_indir_pdec_r6                      ;if ROD try reg 6
00007C04  6700 0046              10564                                              BEQ        ROD_An_indir_pdec_r5_out               ;if equal go to output subroutine
00007C08                         10565  
00007C08  B4BC 0000001E          10566  ROD_An_indir_pdec_r6                        CMP.L      #match_ROD_An_indir_predec_r6,D2         ;check reg is equal to 6
00007C0E  6700 0044              10567                                              BEQ        ROD_An_indir_pdec_r6_out               ;if equal go to output subroutine
00007C12  6600 0002              10568                                              BNE        ROD_An_indir_pdec_r7
00007C16                         10569                                              
00007C16  B4BC 0000001F          10570  ROD_An_indir_pdec_r7                        CMP.L      #match_ROD_An_indir_predec_r7,D2         ;check reg is equal to 6
00007C1C  6700 003E              10571                                              BEQ        ROD_An_indir_pdec_r7_out               ;if equal go to output subroutine
00007C20  6600 F2FC              10572                                              BNE        ERROR                                        :if ROD equal to an addresssing mode, pritn error
00007C24                         10573  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00007C24  227C 0000848A          10574  ROD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
00007C2A  4E75                   10575                                              RTS                                                     ;return to subroutine
00007C2C                         10576  
00007C2C  227C 00008490          10577  ROD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
00007C32  4E75                   10578                                              RTS                                                     ;return to subroutine
00007C34                         10579                                                      
00007C34  227C 00008496          10580  ROD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
00007C3A  4E75                   10581                                              RTS                                                     ;return to subroutine
00007C3C                         10582  
00007C3C  227C 0000849C          10583  ROD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
00007C42  4E75                   10584                                              RTS                                                     ;return to subroutine
00007C44                         10585  
00007C44  227C 000084A2          10586  ROD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
00007C4A  4E75                   10587                                              RTS                                                     ;return to subroutine
00007C4C                         10588      
00007C4C  227C 000084A8          10589  ROD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00007C52  4E75                   10590                                              RTS                                                     ;return to subroutine
00007C54                         10591      
00007C54  227C 000084AE          10592  ROD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
00007C5A  4E75                   10593                                              RTS                                                     ;return to subroutine
00007C5C                         10594  
00007C5C  227C 000084B4          10595  ROD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
00007C62  4E75                   10596                                              RTS                                                     ;return to subroutine
00007C64                         10597                                                      
00007C64                         10598  ;------------------Absolute Addressing Output-----------------------
00007C64  22FC 000084C4          10599  ROD_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00007C6A  22C5                   10600                                           MOVE.L      D5,(A1)+                           ;load address                  
00007C6C  4E75                   10601                                           RTS                                            :return to subroutine
00007C6E                         10602                                             
00007C6E                         10603  
00007C6E  2A18                   10604  ROD_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00007C70  22FC 000084C4          10605                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00007C76  22C5                   10606                                           MOVE.L      D5,(A1)+                           ;load address                  
00007C78  4E75                   10607                                           RTS                                            :return to subroutine
00007C7A                         10608                                                  
00007C7A                         10609  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
00007C7A                         10610  ; determine if the shift is a data register or a immediate value
00007C7A  4281                   10611  ROD_reg_shift                       CLR.L         D1                              ;clear D1
00007C7C  3200                   10612                                      MOVE.W      D0,D1
00007C7E  C2BC 00000020          10613                                      AND.L       #mask_ROD_reg_shift_ir,D1           ;load the mask into D1
00007C84  B2BC 00000020          10614                                      CMP.L       #match_ROD_shift_reg,D1             ;check to see if the shift is a data register
00007C8A  6700 0006              10615                                      BEQ         ROD_shift_reg                       ;if the shift is a register, go to subroutine
00007C8E  6600 007C              10616                                      BNE         ROD_count_val                       ;if ROD go to immediate value subroutine
00007C92                         10617  
00007C92                         10618  ;i/r = 1, the shift is a Data register                                    
00007C92                         10619  ; this the subroutine for the data register shift
00007C92  4281                   10620  ROD_shift_reg                       CLR.L       D1                             ;clear D1
00007C94  3200                   10621                                      MOVE.W      D0,D1
00007C96  C2BC 00000020          10622                                      AND.L       #mask_ROD_reg_shift,D1              ;load mask into D1 for bits 11-9
00007C9C                         10623  
00007C9C  B2BC 00000000          10624  ROD_count_reg0                      CMP.L       #match_ROD_count_reg0,D1            ;check to see if count/shift = 0
00007CA2  6600 0006              10625                                      BNE         ROD_count_reg1                    ;if ROD go check 1
00007CA6  6700 016E              10626                                      BEQ         ROD_count_reg0_out                ;got to output
00007CAA                         10627                                      
00007CAA  B2BC 00000200          10628  ROD_count_reg1                      CMP.L       #match_ROD_count_reg1,D1            ;check to see if count/shift = 1
00007CB0  6600 0006              10629                                      BNE         ROD_count_reg2                    ;if ROD go check 2
00007CB4  6700 0172              10630                                      BEQ         ROD_count_reg1_out                ;got to output
00007CB8                         10631  
00007CB8  B2BC 00000400          10632  ROD_count_reg2                      CMP.L       #match_ROD_count_reg2,D1            ;check to see if count/shift = 2
00007CBE  6600 0006              10633                                      BNE         ROD_count_reg3                    ;if ROD go check 3
00007CC2  6700 0176              10634                                      BEQ         ROD_count_reg2_out                ;got to output
00007CC6                         10635  
00007CC6  B2BC 00000600          10636  ROD_count_reg3                      CMP.L       #match_ROD_count_reg3,D1            ;check to see if count/shift = 3
00007CCC  6600 0006              10637                                      BNE         ROD_count_reg4                    ;if ROD go check 4
00007CD0  6700 017A              10638                                      BEQ         ROD_count_reg3_out                ;got to output
00007CD4                         10639  
00007CD4  B2BC 00000800          10640  ROD_count_reg4                      CMP.L       #match_ROD_count_reg4,D1            ;check to see if count/shift = 4
00007CDA  6600 0006              10641                                      BNE         ROD_count_reg5                    ;if ROD go check 5
00007CDE  6700 017E              10642                                      BEQ         ROD_count_reg4_out                ;got to output
00007CE2                         10643  
00007CE2  B2BC 00000A00          10644  ROD_count_reg5                      CMP.L       #match_ROD_count_reg5,D1            ;check to see if count/shift = 5
00007CE8  6600 0006              10645                                      BNE         ROD_count_reg6                      ;if ROD go check 6
00007CEC  6700 0182              10646                                      BEQ         ROD_count_reg5_out                  ;got to output
00007CF0                         10647  
00007CF0  B2BC 00000C00          10648  ROD_count_reg6                      CMP.L       #match_ROD_count_reg6,D1            ;check to see if count/shift = 6
00007CF6  6600 0006              10649                                      BNE         ROD_count_reg7                      ;if ROD go check 7
00007CFA  6700 0186              10650                                      BEQ         ROD_count_reg6_out                  ;got to output
00007CFE                         10651  
00007CFE  B2BC 00000E00          10652  ROD_count_reg7                      CMP.L       #match_ROD_count_reg7,D1            ;check to see if count/shift = 7
00007D04  6600 F218              10653                                      BNE         ERROR                           ; if none of the registers, then print error message
00007D08  6700 018A              10654                                      BEQ         ROD_count_reg7_out                  ;got to output
00007D0C                         10655  
00007D0C                         10656  
00007D0C                         10657  
00007D0C                         10658  ;i/r = 0, the shift is an immediate value
00007D0C                         10659  ;1-7 = 1-7
00007D0C                         10660  ;0 = 8
00007D0C                         10661  ; this is the subroutine for the immedite value shift
00007D0C  4242                   10662  ROD_count_val                       CLR         D2                                      ;make sure D2 is empty
00007D0E  3400                   10663                                      MOVE.W      D0,D2
00007D10  C2BC 00000E00          10664                                      AND.L       #mask_ROD_count_shift,D1
00007D16  B2BC 00000000          10665                                      CMP.L       #match_ROD_count_val0,D1          ;check to see if shift count is 0
00007D1C  6600 0006              10666                                      BNE         ROD_count_val1                    ;if ROD 0 check 1
00007D20  6700 0064              10667                                      BEQ         ROD_count_val0_out                ;if 0 got to output
00007D24                         10668  
00007D24  B2BC 00000200          10669  ROD_count_val1                      CMP.L       #match_ROD_count_val1,D1          ;check to see if shift count is 0
00007D2A  6600 0006              10670                                      BNE         ROD_count_val2                    ;if ROD 0 check 1
00007D2E  6700 0068              10671                                      BEQ         ROD_count_val1_out                ;if 0 got to output
00007D32                         10672  
00007D32  B2BC 00000400          10673  ROD_count_val2                      CMP.L       #match_ROD_count_val2,D1          ;check to see if shift count is 0
00007D38  6600 0006              10674                                      BNE         ROD_count_val3                    ;if ROD 0 check 1
00007D3C  6700 006C              10675                                      BEQ         ROD_count_val2_out                ;if 0 got to output
00007D40                         10676  
00007D40  B2BC 00000600          10677  ROD_count_val3                      CMP.L       #match_ROD_count_val3,D1          ;check to see if shift count is 0
00007D46  6600 0006              10678                                      BNE         ROD_count_val4                    ;if ROD 0 check 1
00007D4A  6700 0070              10679                                      BEQ         ROD_count_val3_out                ;if 0 got to output
00007D4E                         10680  
00007D4E  B2BC 00000800          10681  ROD_count_val4                      CMP.L       #match_ROD_count_val4,D1          ;check to see if shift count is 0
00007D54  6600 0006              10682                                      BNE         ROD_count_val5                    ;if ROD 0 check 1
00007D58  6700 0074              10683                                      BEQ         ROD_count_val4_out                ;if 0 got to output
00007D5C                         10684  
00007D5C  B2BC 00000A00          10685  ROD_count_val5                      CMP.L       #match_ROD_count_val5,D1          ;check to see if shift count is 0
00007D62  6600 0006              10686                                      BNE         ROD_count_val6                    ;if ROD 0 check 1
00007D66  6700 0078              10687                                      BEQ         ROD_count_val5_out                ;if 0 got to output
00007D6A                         10688  
00007D6A  B2BC 00000C00          10689  ROD_count_val6                      CMP.L       #match_ROD_count_val6,D1          ;check to see if shift count is 0
00007D70  6600 0006              10690                                      BNE         ROD_count_val7                    ;if ROD 0 check 1
00007D74  6700 007C              10691                                      BEQ         ROD_count_val6_out                ;if 0 got to output
00007D78                         10692  
00007D78  B2BC 00000E00          10693  ROD_count_val7                      CMP.L       #match_ROD_count_val7,D1          ;check to see if shift count is 0
00007D7E  6600 F19E              10694                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
00007D82  6700 0080              10695                                      BEQ         ROD_count_val7_out                ;if 0 got to output
00007D86                         10696  
00007D86                         10697  ;-----------------------------------Count Shift Immedite Value Output---------------------------
00007D86  227C 00008422          10698  ROD_count_val0_out            MOVE.L            #ea_val0,A1         ;load string constant into A1
00007D8C  4EB8 140A              10699                                JSR               print_first
00007D90  4EB9 00007EA6          10700                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007D96  4E75                   10701                                RTS
00007D98                         10702                                
00007D98  227C 00008424          10703  ROD_count_val1_out            MOVE.L            #ea_val1,A1         ;load string constant into A1
00007D9E  4EB8 140A              10704                                JSR               print_first
00007DA2  4EB9 00007EA6          10705                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007DA8  4E75                   10706                                RTS                             
00007DAA                         10707  
00007DAA  227C 00008426          10708  ROD_count_val2_out            MOVE.L            #ea_val2,A1         ;load string constant into A1
00007DB0  4EB8 140A              10709                                JSR               print_first
00007DB4  4EB9 00007EA6          10710                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007DBA  4E75                   10711                                RTS
00007DBC                         10712                                
00007DBC  227C 00008428          10713  ROD_count_val3_out            MOVE.L            #ea_val3,A1         ;load string constant into A1
00007DC2  4EB8 140A              10714                                JSR               print_first
00007DC6  4EB9 00007EA6          10715                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007DCC  4E75                   10716                                RTS
00007DCE                         10717                                
00007DCE  227C 0000842A          10718  ROD_count_val4_out            MOVE.L            #ea_val4,A1         ;load string constant into A1
00007DD4  4EB8 140A              10719                                JSR               print_first
00007DD8  4EB9 00007EA6          10720                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007DDE  4E75                   10721                                RTS
00007DE0                         10722                                
00007DE0  227C 0000842C          10723  ROD_count_val5_out            MOVE.L            #ea_val5,A1         ;load string constant into A1
00007DE6  4EB8 140A              10724                                JSR               print_first
00007DEA  4EB9 00007EA6          10725                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007DF0  4E75                   10726                                RTS
00007DF2                         10727                                
00007DF2  227C 0000842E          10728  ROD_count_val6_out            MOVE.L            #ea_val6,A1         ;load string constant into A1
00007DF8  4EB8 140A              10729                                JSR               print_first
00007DFC  4EB9 00007EA6          10730                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E02  4E75                   10731                                RTS
00007E04                         10732                                
00007E04  227C 00008430          10733  ROD_count_val7_out            MOVE.L            #ea_val7,A1         ;load string constant into A1
00007E0A  4EB8 140A              10734                                JSR               print_first
00007E0E  4EB9 00007EA6          10735                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E14  4E75                   10736                                RTS
00007E16                         10737                                
00007E16                         10738  ;-------------------------Count Shift Output (Dn)-----------------------------------------
00007E16  227C 000083F2          10739  ROD_count_reg0_out            MOVE.L            #ea_D0,A1           ;load string constant into A1
00007E1C  4EB8 140A              10740                                JSR               print_first
00007E20  4EB9 00007EA6          10741                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E26  4E75                   10742                                RTS
00007E28                         10743                                
00007E28  227C 000083F5          10744  ROD_count_reg1_out            MOVE.L            #ea_D1,A1           ;load string constant into A1
00007E2E  4EB8 140A              10745                                JSR               print_first
00007E32  4EB9 00007EA6          10746                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E38  4E75                   10747                                RTS
00007E3A                         10748                                
00007E3A  227C 000083F8          10749  ROD_count_reg2_out            MOVE.L            #ea_D2,A1           ;load string constant into A1
00007E40  4EB8 140A              10750                                JSR               print_first
00007E44  4EB9 00007EA6          10751                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E4A  4E75                   10752                                RTS
00007E4C                         10753                                
00007E4C  227C 000083FB          10754  ROD_count_reg3_out            MOVE.L            #ea_D3,A1           ;load string constant into A1
00007E52  4EB8 140A              10755                                JSR               print_first
00007E56  4EB9 00007EA6          10756                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E5C  4E75                   10757                                RTS
00007E5E                         10758                                
00007E5E  227C 000083FE          10759  ROD_count_reg4_out            MOVE.L            #ea_D4,A1           ;load string constant into A1
00007E64  4EB8 140A              10760                                JSR               print_first
00007E68  4EB9 00007EA6          10761                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E6E  4E75                   10762                                RTS
00007E70                         10763                                
00007E70  227C 00008401          10764  ROD_count_reg5_out            MOVE.L            #ea_D5,A1           ;load string constant into A1
00007E76  4EB8 140A              10765                                JSR               print_first
00007E7A  4EB9 00007EA6          10766                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E80  4E75                   10767                                RTS
00007E82                         10768                                
00007E82  227C 00008404          10769  ROD_count_reg6_out            MOVE.L            #ea_D6,A1           ;load string constant into A1
00007E88  4EB8 140A              10770                                JSR               print_first
00007E8C  4EB9 00007EA6          10771                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E92  4E75                   10772                                RTS
00007E94                         10773                                
00007E94  227C 00008407          10774  ROD_count_reg7_out            MOVE.L            #ea_D7,A1           ;load string constant into A1
00007E9A  4EB8 140A              10775                                JSR               print_first
00007E9E  4EB9 00007EA6          10776                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand                                    
00007EA4  4E75                   10777                                RTS                                    
00007EA6                         10778                                      
00007EA6                         10779  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
00007EA6  4241                   10780  ROD_Dn0                         CLR             D1                  ;clear D1
00007EA8  3200                   10781                                  MOVE.W          D0,D1
00007EAA  C2BC 00000007          10782                                  AND.L           #mask_ROD_data_reg,D1   ;load data register mask for second operand
00007EB0                         10783                                  
00007EB0  B2BC 00000000          10784                                  CMP.L           #match_ROD_D_reg0,D1          ;check if data register is D0
00007EB6  6700 0068              10785                                  BEQ             ROD_D0_out              ;if equal got to output subroutine
00007EBA  6600 0002              10786                                  BNE             ROD_Dn1                 ;if ROD check D1
00007EBE                         10787                                  
00007EBE  B2BC 00000001          10788  ROD_Dn1                         CMP.L           #match_ROD_D_reg1,D1          ;check if data register is D0
00007EC4  6700 0062              10789                                  BEQ             ROD_D1_out              ;if equal got to output subroutine
00007EC8  6600 0002              10790                                  BNE             ROD_Dn2                 ;if ROD check D2
00007ECC                         10791  
00007ECC  B2BC 00000002          10792  ROD_Dn2                         CMP.L           #match_ROD_D_reg2,D1          ;check if data register is D0
00007ED2  6700 005C              10793                                  BEQ             ROD_D2_out              ;if equal got to output subroutine
00007ED6  6600 0002              10794                                  BNE             ROD_Dn3                 ;if ROD check D3
00007EDA                         10795  
00007EDA  B2BC 00000003          10796  ROD_Dn3                         CMP.L           #match_ROD_D_reg3,D1          ;check if data register is D0
00007EE0  6700 0056              10797                                  BEQ             ROD_D3_out              ;if equal got to output subroutine
00007EE4  6600 0002              10798                                  BNE             ROD_Dn4                 ;if ROD check D4
00007EE8                         10799  
00007EE8  B2BC 00000004          10800  ROD_Dn4                         CMP.L           #match_ROD_D_reg4,D1          ;check if data register is D0
00007EEE  6700 0050              10801                                  BEQ             ROD_D4_out              ;if equal got to output subroutine
00007EF2  6600 0002              10802                                  BNE             ROD_Dn5                 ;if ROD check D5
00007EF6                         10803  
00007EF6  B2BC 00000005          10804  ROD_Dn5                         CMP.L           #match_ROD_D_reg5,D1          ;check if data register is D0
00007EFC  6700 004A              10805                                  BEQ             ROD_D5_out              ;if equal got to output subroutine
00007F00  6600 0002              10806                                  BNE             ROD_Dn6                 ;if ROD check D6
00007F04                         10807  
00007F04  B2BC 00000006          10808  ROD_Dn6                         CMP.L           #match_ROD_D_reg6,D1          ;check if data register is D0
00007F0A  6700 0044              10809                                  BEQ             ROD_D6_out              ;if equal got to output subroutine
00007F0E  6600 0002              10810                                  BNE             ROD_Dn7                 ;if ROD check D7
00007F12                         10811  
00007F12  B2BC 00000007          10812  ROD_Dn7                         CMP.L           #match_ROD_D_reg7,D1          ;check if data register is D0
00007F18  6700 003E              10813                                  BEQ             ROD_D7_out              ;if equal got to output subroutine
00007F1C  6600 F000              10814                                  BNE             ERROR               :if none of the registers go to error sub routine
00007F20                         10815                                  
00007F20                         10816                                  
00007F20                         10817  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
00007F20  227C 000083F2          10818  ROD_D0_out                    MOVE.L            #ea_D0,A1           ;load string constant into A1
00007F26  4E75                   10819                                RTS                                   ;return to subroutine
00007F28                         10820  
00007F28                         10821  
00007F28  227C 000083F5          10822  ROD_D1_out                    MOVE.L            #ea_D1,A1           ;load string constant into A1
00007F2E  4E75                   10823                                RTS                                   ;return to subroutine
00007F30                         10824  
00007F30                         10825  
00007F30  227C 000083F8          10826  ROD_D2_out                    MOVE.L            #ea_D2,A1           ;load string constant into A1
00007F36  4E75                   10827                                RTS                                   ;return to subroutine
00007F38                         10828  
00007F38                         10829              
00007F38  227C 000083FB          10830  ROD_D3_out                    MOVE.L            #ea_D3,A1           ;load string constant into A1
00007F3E  4E75                   10831                                RTS                                   ;return to subroutine
00007F40                         10832  
00007F40                         10833  
00007F40  227C 000083FE          10834  ROD_D4_out                    MOVE.L            #ea_D4,A1           ;load string constant into A1
00007F46  4E75                   10835                                RTS                                   ;return to subroutine
00007F48                         10836  
00007F48                         10837  
00007F48  227C 00008401          10838  ROD_D5_out                    MOVE.L            #ea_D5,A1           ;load string constant into A1
00007F4E  4E75                   10839                                RTS                                   ;return to subroutine
00007F50                         10840  
00007F50                         10841  
00007F50  227C 00008404          10842  ROD_D6_out                    MOVE.L            #ea_D6,A1           ;load string constant into A1
00007F56  4E75                   10843                                RTS                                   ;return to subroutine
00007F58                         10844  
00007F58                         10845  
00007F58  227C 00008407          10846  ROD_D7_out                    MOVE.L            #ea_D7,A1           ;load string constant into A1
00007F5E  4E75                   10847                                RTS                                   ;return to subroutine
00007F60                         10848  
00007F60                         10849  
00007F60                         10850                                      
00007F60  =000000C0              10851  mask_ROD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
00007F60  =00000038              10852  mask_ROD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
00007F60  =0000003F              10853  mask_ROD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
00007F60  =0000003F              10854  mask_ROD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
00007F60  =00000020              10855  mask_ROD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
00007F60  =00000E00              10856  mask_ROD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
00007F60  =00000020              10857  mask_ROD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
00007F60  =00000007              10858  mask_ROD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
00007F60                         10859  
00007F60  =00000000              10860  match_ROD_D_reg0                                EQU             $0000               ;match for second operand data register 0
00007F60  =00000001              10861  match_ROD_D_reg1                                EQU             $0001               ;match for second operand data register 1
00007F60  =00000002              10862  match_ROD_D_reg2                                EQU             $0002               ;match for second operand data register 2
00007F60  =00000003              10863  match_ROD_D_reg3                                EQU             $0003               ;match for second operand data register 3
00007F60  =00000004              10864  match_ROD_D_reg4                                EQU             $0004               ;match for second operand data register 4
00007F60  =00000005              10865  match_ROD_D_reg5                                EQU             $0005               ;match for second operand data register 5
00007F60  =00000006              10866  match_ROD_D_reg6                                EQU             $0006               ;match for second operand data register 6
00007F60  =00000007              10867  match_ROD_D_reg7                                EQU             $0007               ;match for second operand data register 7
00007F60                         10868  
00007F60  =00000000              10869  match_ROD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
00007F60  =00000200              10870  match_ROD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
00007F60  =00000400              10871  match_ROD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
00007F60  =00000600              10872  match_ROD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
00007F60  =00000800              10873  match_ROD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
00007F60  =00000A00              10874  match_ROD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
00007F60  =00000C00              10875  match_ROD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
00007F60  =00000E00              10876  match_ROD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
00007F60                         10877  
00007F60  =00000020              10878  match_ROD_shift_reg                             EQU             $0020               ;match to for a register shift
00007F60  =00000000              10879  match_ROD_count_val0                            EQU             $0000               ;match for shift reg 0
00007F60  =00000200              10880  match_ROD_count_val1                           EQU             $0200               ;match for shift reg 1
00007F60  =00000400              10881  match_ROD_count_val2                            EQU             $0400               ;match for shift reg 2
00007F60  =00000600              10882  match_ROD_count_val3                            EQU             $0600               ;match for shift reg 3
00007F60  =00000800              10883  match_ROD_count_val4                            EQU             $0800               ;match for shift reg 4
00007F60  =00000A00              10884  match_ROD_count_val5                            EQU             $0A00               ;match for shift reg 5
00007F60  =00000C00              10885  match_ROD_count_val6                            EQU             $0C00               ;match for shift reg 6
00007F60  =00000E00              10886  match_ROD_count_val7                            EQU             $0E00               ;match for shift reg 7
00007F60                         10887  
00007F60  =00000020              10888  match_ROD_shift_count                           EQU             $0020
00007F60  =000000C0              10889  match_ROD_mem_shift                         EQU             $00C0              ;match for memory shift
00007F60  =00000010              10890  match_ROD_An_indir                          EQU             $0010              ;match for add reg indir
00007F60  =00000020              10891  match_ROD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
00007F60  =00000018              10892  match_ROD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
00007F60  =00000039              10893  match_ROD_abs_add_word                      EQU             $0039              ;match for word abs add 
00007F60  =0000003C              10894  match_ROD_abs_add_long                      EQU             $003C              ;match for long abs add
00007F60                         10895  
00007F60                         10896  
00007F60  =00000010              10897  match_ROD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
00007F60  =00000011              10898  match_ROD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
00007F60  =00000012              10899  match_ROD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
00007F60  =00000013              10900  match_ROD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
00007F60  =00000014              10901  match_ROD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
00007F60  =00000015              10902  match_ROD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
00007F60  =00000016              10903  match_ROD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
00007F60  =00000017              10904  match_ROD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
00007F60                         10905  
00007F60                         10906  
00007F60  =00000020              10907  match_ROD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
00007F60  =00000021              10908  match_ROD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
00007F60  =00000022              10909  match_ROD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
00007F60  =00000023              10910  match_ROD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
00007F60  =00000024              10911  match_ROD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
00007F60  =00000025              10912  match_ROD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
00007F60  =00000026              10913  match_ROD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
00007F60  =00000027              10914  match_ROD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
00007F60                         10915  
00007F60  =00000018              10916  match_ROD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
00007F60  =00000019              10917  match_ROD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
00007F60  =0000001A              10918  match_ROD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
00007F60  =0000001B              10919  match_ROD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
00007F60  =0000001C              10920  match_ROD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
00007F60  =0000001D              10921  match_ROD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
00007F60  =0000001E              10922  match_ROD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
00007F60  =0000001F              10923  match_ROD_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
00007F60                         10924  
00007F60                         10925  
00007F60                         10926  
00007F60                         10927  
00007F60                         10928  
00007F60                         10929  
00007F60                         10930  
00007F60                         10931  
00007F60                         10932  
00007F60                         10933  -------------------- end include --------------------
00007F60                         10934              INCLUDE 'EA Masks.x68'
00007F60                         10935  
00007F60  =00000FFF              10936  mask_MOVE_EA                EQU     $0FFF
00007F60  =00000E00              10937  mask_MOVE_dst_reg           EQU     $0E00
00007F60  =000001C0              10938  mask_MOVE_dst_mode          EQU     $01C0
00007F60  =00000038              10939  mask_MOVE_src_reg           EQU     $0038
00007F60  =00000007              10940  mask_MOVE_src_mode          EQU     $0007
00007F60                         10941  
00007F60  =00000E3F              10942  mask_MOVEA_EA               EQU     $0E3F
00007F60  =00000E00              10943  mask_MOVEA_dst_reg          EQU     $0E00
00007F60  =00000038              10944  mask_MOVEA_src_mode         EQU     $0038
00007F60  =00000007              10945  mask_MOVEA_src_reg          EQU     $0007
00007F60                         10946  
00007F60  =00000EFF              10947  mask_MOVEQ_EA               EQU     $0EFF
00007F60  =00000E00              10948  mask_MOVEQ_reg              EQU     $0E00
00007F60  =000000FF              10949  mask_MOVEQ_data             EQU     $00FF
00007F60                         10950  
00007F60  =0000047F              10951  mask_MOVEM_EA               EQU     $047F       
00007F60  =00000400              10952  mask_MOVEM_direct           EQU     $0400
00007F60  =00000040              10953  mask_MOVEM_size             EQU     $0040
00007F60                         10954  ;using predecrement bits go from 15-0 15 = D0, 0 = A7
00007F60                         10955  ;using post increment bits ggo from 15-0, 15 = A7, 0 = D0
00007F60                         10956  ;the low order bit is the register transfered first
00007F60  =00000007              10957  mask_MOVEM_ea_reg           EQU     $0007
00007F60                         10958  
00007F60  =00000FFF              10959  mask_ADD_EA                 EQU     $0FFF
00007F60  =00000E00              10960  mask_ADD_reg                EQU     $0E00
00007F60  =000001C0              10961  mask_ADD_opmode             EQU     $01C0
00007F60  =00000007              10962  mask_ADD_ea_reg             EQU     $0007
00007F60                         10963  
00007F60  =00000FFF              10964  mask_ADDA_EA                EQU     $0FFF
00007F60  =00000E00              10965  mask_ADDA_reg               EQU     $0E00
00007F60  =000001C0              10966  mask_ADDA_opmode            EQU     $01C0
00007F60  =00000038              10967  mask_ADDA_ea_mode           EQU     $0038
00007F60  =00000007              10968  mask_ADDA_ea_reg            EQU     $0007
00007F60                         10969  
00007F60  =00000EFF              10970  mask_ADDQ_EA                EQU     $0EFF
00007F60  =00000E00              10971  mask_ADDQ_data              EQU     $0E00
00007F60  =000000C0              10972  mask_ADDQ_size              EQU     $00C0
00007F60  =00000038              10973  mask_ADDQ_ea_mode           EQU     $0038
00007F60  =00000007              10974  mask_ADDQ_ea_reg            EQU     $0007
00007F60                         10975  
00007F60  =00000FFF              10976  mask_SUB_EA                 EQU     $0FFF
00007F60  =00000E00              10977  mask_SUB_reg                EQU     $0E00
00007F60  =000001C0              10978  mask_SUB_opmode             EQU     $01C0
00007F60  =00000038              10979  mask_SUB_ea_mode            EQU     $0038
00007F60  =00000007              10980  mask_SUB_ea_reg             EQU     $0007
00007F60                         10981  
00007F60  =00000E3F              10982  mask_LEA_EA                 EQU     $0E3F
00007F60  =00000E00              10983  mask_LEA_reg                EQU     $0E00
00007F60  =00000038              10984  mask_LEA_ea_mode            EQU     $0038
00007F60  =00000007              10985  mask_LEA_ea_reg             EQU     $0007
00007F60                         10986  
00007F60  =00000FFF              10987  mask_AND_EA                 EQU     $0FFF
00007F60  =00000E00              10988  mask_AND_reg                EQU     $0E00
00007F60  =000001C0              10989  mask_AND_opmode             EQU     $01C0
00007F60  =00000038              10990  mask_AND_ea_mode            EQU     $0038
00007F60  =00000007              10991  mask_AND_ea_reg             EQU     $0007
00007F60                         10992  
00007F60  =00000FFF              10993  mask_OR_EA                  EQU     $0FFF
00007F60  =00000E00              10994  mask_OR_reg                 EQU     $0E00
00007F60  =000001C0              10995  mask_OR_opmode              EQU     $01C0
00007F60  =00000038              10996  mask_OR_ea_mode             EQU     $0038
00007F60  =00000007              10997  mask_OR_ea_reg              EQU     $0007
00007F60                         10998  
00007F60  =000000FF              10999  mask_NOT_EA                 EQU     $00FF
00007F60  =000000C0              11000  mask_NOT_size               EQU     $00C0
00007F60  =00000038              11001  mask_NOT_ea_mode            EQU     $0038
00007F60  =00000007              11002  mask_NOT_ea_reg             EQU     $0007
00007F60                         11003  
00007F60  =0000013F              11004  mask_ASR_mem_shift_EA       EQU     $013F
00007F60  =00000100              11005  mask_ASR_mem_shift_direct   EQU     $0100
00007F60  =00000038              11006  mask_ASR_mem_shift_ea_mode  EQU     $0038
00007F60  =00000007              11007  mask_ASR_mem_shift_ea_reg   EQU     $0007
00007F60                         11008  
00007F60  =0000013F              11009  mask_ASL_mem_shift_EA       EQU     $013F
00007F60  =00000100              11010  mask_ASL_mem_shift_direct   EQU     $0100
00007F60  =00000038              11011  mask_ASL_mem_shift_ea_mode  EQU     $0038
00007F60  =00000007              11012  mask_ASL_mem_shift_ea_reg   EQU     $0007
00007F60                         11013  
00007F60  =00000FE7              11014  mask_ASR_reg_shift_EA       EQU     $0FE7
00007F60  =00000E00              11015  mask_ASR_reg_shift_count    EQU     $0E00
00007F60  =00000100              11016  mask_ASR_reg_shift_direct   EQU     $0100
00007F60  =000000C0              11017  mask_ASR_reg_shift_size     EQU     $00C0
00007F60  =00000020              11018  mask_ASR_reg_shift_ir       EQU     $0020
00007F60  =00000007              11019  mask_ASR_reg_shift_reg      EQU     $0007
00007F60                         11020  
00007F60  =00000FE7              11021  mask_ASL_reg_shift_EA       EQU     $0FE7
00007F60  =00000E00              11022  mask_ASL_reg_shift_count    EQU     $0E00
00007F60  =00000100              11023  mask_ASL_reg_shift_direct   EQU     $0100
00007F60  =000000C0              11024  mask_ASL_reg_shift_size     EQU     $00C0
00007F60  =00000020              11025  mask_ASL_reg_shift_ir       EQU     $0020
00007F60  =00000007              11026  mask_ASL_reg_shift_reg      EQU     $0007
00007F60                         11027  
00007F60  =0000013F              11028  mask_LSR_mem_shift_EA       EQU     $013F
00007F60  =00000100              11029  mask_LSR_mem_shift_direct   EQU     $0100
00007F60  =00000038              11030  mask_LSR_mem_shift_ea_mode  EQU     $0038
00007F60  =00000007              11031  mask_LSR_mem_shift_ea_reg   EQU     $0007
00007F60                         11032  
00007F60  =0000013F              11033  mask_LSL_mem_shift_EA       EQU     $013F
00007F60  =00000100              11034  mask_LSL_mem_shift_direct   EQU     $0100
00007F60  =00000038              11035  mask_LSL_mem_shift_ea_mode  EQU     $0038
00007F60  =00000007              11036  mask_LSL_mem_shift_ea_reg   EQU     $0007
00007F60                         11037  
00007F60  =00000FE7              11038  mask_LSR_reg_shift_EA       EQU     $0FE7
00007F60  =00000E00              11039  mask_LSR_reg_shift_count    EQU     $0E00
00007F60  =00000100              11040  mask_LSR_reg_shift_direct   EQU     $0100
00007F60  =000000C0              11041  mask_LSR_reg_shift_size     EQU     $00C0
00007F60  =00000020              11042  mask_LSR_reg_shift_ir       EQU     $0020
00007F60  =00000007              11043  mask_LSR_reg_shift_reg      EQU     $0007
00007F60                         11044  
00007F60  =00000FE7              11045  mask_LSL_reg_shift_EA       EQU     $0FE7
00007F60  =00000E00              11046  mask_LSL_reg_shift_count    EQU     $0E00
00007F60  =00000100              11047  mask_LSL_reg_shift_direct   EQU     $0100
00007F60  =000000C0              11048  mask_LSL_reg_shift_sIze     EQU     $00C0
00007F60  =00000020              11049  mask_LSL_reg_shift_ir       EQU     $0020
00007F60  =00000007              11050  mask_LSL_reg_shift_reg      EQU     $0007
00007F60                         11051  
00007F60                         11052  
00007F60  =0000013F              11053  mask_ROR_mem_rot_EA         EQU     $013F
00007F60  =00000100              11054  mask_ROR_mem_rot_direct     EQU     $0100
00007F60  =00000038              11055  mask_ROR_mem_rot_ea_mode    EQU     $0038
00007F60  =00000007              11056  mask_ROR_mem_rot_ea_reg     EQU     $0007
00007F60                         11057  
00007F60  =0000013F              11058  mask_ROL_mem_rot_EA         EQU     $013F
00007F60  =00000100              11059  mask_ROL_mem_rot_direct     EQU     $0100
00007F60  =00000038              11060  mask_ROL_mem_rot_ea_mode    EQU     $0038
00007F60  =00000007              11061  mask_ROL_mem_rot_ea_reg     EQU     $0007
00007F60                         11062  
00007F60  =00000FE7              11063  mask_ROR_reg_rot_EA         EQU     $0FE7
00007F60  =00000E00              11064  mask_ROR_reg_rot_count      EQU     $0E00
00007F60  =00000100              11065  mask_ROR_reg_rot_direct     EQU     $0100
00007F60  =000000C0              11066  mask_ROR_reg_rot_size       EQU     $00C0
00007F60  =00000020              11067  mask_ROR_reg_rot_ir         EQU     $0020
00007F60  =00000007              11068  mask_ROR_reg_rot_reg        EQU     $0007
00007F60                         11069  
00007F60  =00000FE7              11070  mask_ROL_reg_rot_EA         EQU     $0FE7
00007F60  =00000E00              11071  mask_ROL_reg_rot_count      EQU     $0E00
00007F60  =00000100              11072  mask_ROL_reg_rot_direct     EQU     $0100
00007F60  =00000C00              11073  mask_ROL_reg_rot_size       EQU     $0C00
00007F60  =00000020              11074  mask_ROL_reg_rot_ir         EQU     $0020
00007F60  =00000007              11075  mask_ROL_reg_rot_reg        EQU     $0007
00007F60                         11076  
00007F60  =00000FFF              11077  mask_Bcc_EA                 EQU     $0FFF
00007F60  =00000E00              11078  mask_Bcc_cond               EQU     $0E00
00007F60  =000000FF              11079  mask_Bcc_displace           EQU     $00FF
00007F60                         11080  
00007F60  =00000F00              11081  mask_BLE_EA                 EQU     $0F00       ;code for LE condition is 1111
00007F60  =000000FF              11082  mask_BLE_displace           EQU     $00FF
00007F60                         11083  
00007F60  =00000F00              11084  mask_BGT_EA                 EQU     $0F00       ;code for GT condition is 1110
00007F60  =000000FF              11085  mask_BGT_displace           EQU     $00FF
00007F60                         11086  
00007F60  =0000003F              11087  mask_JSR_EA                 EQU     $003F
00007F60  =00000038              11088  mask_JSR_ea_mode            EQU     $0038
00007F60  =00000007              11089  mask_JSR_ea_reg             EQU     $0007
00007F60                         11090  
00007F60  =000000FF              11091  mask_BRA_EA                 EQU     $00FF
00007F60                         11092  
00007F60                         11093  
00007F60                         11094  -------------------- end include --------------------
00007F60                         11095              INCLUDE 'variables.X68'
00007F60  =0000F000              11096  mask_opcode     EQU     $F000
00007F60  =0000C000              11097  mask_MOVE       EQU     $C000
00007F60  =000001C0              11098  mask_MOVE_A     EQU     $01C0
00007F60  =0000F1C0              11099  mask_LEA        EQU     $F1C0
00007F60  =0000FFC0              11100  mask_JSR        EQU     $FFC0
00007F60  =0000FF00              11101  mask_NOT        EQU     $FF00
00007F60  =0000F0C0              11102  mask_ADDA       EQU     $F0C0
00007F60  =0000FF00              11103  mask_BCC        EQU     $FF00
00007F60  =0000FFC0              11104  mask_SHFT_M     EQU     $FFC0
00007F60  =0000F118              11105  mask_SHFT_R     EQU     $F118
00007F60  =000000FF              11106  mask_BCC_size   EQU     $00FF
00007F60  =0000FF80              11107  mask_MOVEM      EQU     $FF80
00007F60  =00000000              11108  match_MOVE       EQU     $0000
00007F60  =00001000              11109  match_MOVEB      EQU     $1000
00007F60  =00003000              11110  match_MOVEW      EQU     $3000
00007F60  =00002000              11111  match_MOVEL      EQU     $2000
00007F60  =00000040              11112  match_MOVEA      EQU     $0040
00007F60  =00007000              11113  match_MOVEQ      EQU     $7000
00007F60  =00004000              11114  match_G0100      EQU     $4000
00007F60  =00004E71              11115  match_NOP        EQU     $4E71
00007F60  =00004E75              11116  match_RTS        EQU     $4E75
00007F60  =000041C0              11117  match_LEA        EQU     $41C0
00007F60  =00004E80              11118  match_JSR        EQU     $4E80
00007F60  =00004600              11119  match_NOT        EQU     $4600
00007F60  =0000D000              11120  match_G1101      EQU     $D000
00007F60  =0000D0C0              11121  match_ADDA       EQU     $D0C0
00007F60  =00006000              11122  match_G0110      EQU     $6000
00007F60  =00006E00              11123  match_BGT        EQU     $6E00
00007F60  =00006700              11124  match_BEQ        EQU     $6700
00007F60  =00006F00              11125  match_BLE        EQU     $6F00
00007F60  =00006000              11126  match_BRA        EQU     $6000
00007F60  =0000E000              11127  match_G1110      EQU     $E000
00007F60  =0000E3C0              11128  match_LSL_M      EQU     $E3C0
00007F60  =0000E2C0              11129  match_LSR_M      EQU     $E2C0
00007F60  =0000E1C0              11130  match_ASL_M      EQU     $E1C0
00007F60  =0000E0C0              11131  match_ASR_M      EQU     $E0C0
00007F60  =0000E7C0              11132  match_ROL_M      EQU     $E7C0
00007F60  =0000E6C0              11133  match_ROR_M      EQU     $E6C0
00007F60  =0000E108              11134  match_LSL_R      EQU     $E108
00007F60  =0000E008              11135  match_LSR_R      EQU     $E008
00007F60  =0000E100              11136  match_ASL_R      EQU     $E100
00007F60  =0000E000              11137  match_ASR_R      EQU     $E000
00007F60  =0000E118              11138  match_ROL_R      EQU     $E118
00007F60  =0000E018              11139  match_ROR_R      EQU     $E018
00007F60  =00005000              11140  match_ADDQ       EQU     $5000
00007F60  =00009000              11141  match_SUB        EQU     $9000
00007F60  =0000C000              11142  match_AND        EQU     $C000
00007F60  =00008000              11143  match_OR         EQU     $8000
00007F60  =00004880              11144  match_MOVEM_RM   EQU     $4880
00007F60  =00004C80              11145  match_MOVEM_MR   EQU     $4C80
00007F60  =00003000              11146  mask_size_MOVES     EQU     $3000
00007F60  =000000C0              11147  mask_size_NOT       EQU     $00C0
00007F60  =00000100              11148  mask_size_ADDA      EQU     $0100
00007F60  =000000C0              11149  mask_size_ADD       EQU     $00C0
00007F60  =000000C0              11150  mask_size_shifts    EQU     $00C0
00007F60  =000000C0              11151  mask_size_SUB       EQU     $00C0
00007F60  =000000C0              11152  mask_size_logic     EQU     $00C0
00007F60  =00000040              11153  mask_size_MOVEM     EQU     $0040
00007F60  =0000F100              11154  mask_size_MOVEQ     EQU     $F100
00007F60  =00001000              11155  m_size_B_MOVES      EQU     $1000
00007F60  =00003000              11156  m_size_W_MOVES      EQU     $3000
00007F60  =00002000              11157  m_size_L_MOVES      EQU     $2000
00007F60  =00000000              11158  m_size_B_NOT        EQU     $0000
00007F60  =00000040              11159  m_size_W_NOT        EQU     $0040
00007F60  =00000080              11160  m_size_L_NOT        EQU     $0080
00007F60  =00000000              11161  m_size_W_ADDA       EQU     $0000
00007F60  =00000100              11162  m_size_L_ADDA       EQU     $0100
00007F60  =00000000              11163  m_size_B_ADD        EQU     $0000
00007F60  =00000040              11164  m_size_W_ADD        EQU     $0040
00007F60  =00000080              11165  m_size_L_ADD        EQU     $0080
00007F60  =00000000              11166  m_size_B_shfts      EQU     $0000
00007F60  =00000040              11167  m_size_W_shfts      EQU     $0040
00007F60  =00000080              11168  m_size_L_shfts      EQU     $0080
00007F60  =00000000              11169  m_size_B_SUB        EQU     $0000
00007F60  =00000040              11170  m_size_W_SUB        EQU     $0040
00007F60  =00000080              11171  m_size_L_SUB        EQU     $0080
00007F60  =00000000              11172  m_size_B_logic      EQU     $0000
00007F60  =00000040              11173  m_size_W_logic      EQU     $0040
00007F60  =00000080              11174  m_size_L_logic      EQU     $0080
00007F60  =000000FF              11175  m_size_L_bcc        EQU     $00FF
00007F60  =00000000              11176  m_size_W_bcc        EQU     $0000
00007F60  =00000000              11177  m_size_W_MOVEM      EQU     $0000
00007F60  =00000040              11178  m_size_L_MOVEM      EQU     $0040
00007F60  =00007000              11179  m_size_L_MOVEQ      EQU     $7000
00007F60  =00000001              11180  byte_size           EQU     1
00007F60  =00000002              11181  word_size           EQU     2
00007F60  =00000003              11182  long_size           EQU     3
00007F60  =00000000              11183  no_size             EQU     0
00007F60  =FFFFFFFF              11184  not_hex             EQU     $FFFFFFFF
00007F60  =00000000              11185  hex_clear           EQU     $00000000
00007F60  =00007000              11186  start_Adr           EQU     $00007000
00007F60  =000073BA              11187  end_Adr             EQU     $000073BA
00007F60  =00000038              11188  mask_ADDA_ea_mode                       EQU         $0038
00007F60  =0000003F              11189  mask_ADDA_abs_add                       EQU         $003F
00007F60  =0000003F              11190  mask_ADDA_ea_reg_and_mode               EQU         $003F
00007F60  =00000E00              11191  mask_ADDA_An_reg                        EQU         $0E00
00007F60                         11192  
00007F60  =00000000              11193  match_ADDA_Dn                           EQU         $0000
00007F60  =00000008              11194  match_ADDA_An                           EQU         $0008
00007F60  =00000010              11195  match_ADDA_An_indir                     EQU         $0010
00007F60  =00000020              11196  match_ADDA_An_indir_predec              EQU         $0020
00007F60  =00000018              11197  match_ADDA_An_indir_postinc             EQU         $0018
00007F60  =00000038              11198  match_ADDA_abs_add_word                 EQU         $0038
00007F60  =00000039              11199  match_ADDA_abs_add_long                 EQU         $0039
00007F60                         11200  
00007F60  =00000000              11201  match_ADDA_D0                           EQU         $0000
00007F60  =00000001              11202  match_ADDA_D1                           EQU         $0001
00007F60  =00000002              11203  match_ADDA_D2                           EQU         $0002
00007F60  =00000003              11204  match_ADDA_D3                           EQU         $0003
00007F60  =00000004              11205  match_ADDA_D4                           EQU         $0004
00007F60  =00000005              11206  match_ADDA_D5                           EQU         $0005
00007F60  =00000006              11207  match_ADDA_D6                           EQU         $0006
00007F60  =00000007              11208  match_ADDA_D7                           EQU         $0007
00007F60                         11209  
00007F60  =00000008              11210  match_ADDA_A0                           EQU         $0008
00007F60  =00000009              11211  match_ADDA_A1                           EQU         $0009
00007F60  =0000000A              11212  match_ADDA_A2                           EQU         $000A
00007F60  =0000000B              11213  match_ADDA_A3                           EQU         $000B
00007F60  =0000000C              11214  match_ADDA_A4                           EQU         $000C
00007F60  =0000000D              11215  match_ADDA_A5                           EQU         $000D
00007F60  =0000000E              11216  match_ADDA_A6                           EQU         $000E
00007F60  =0000000F              11217  match_ADDA_A7                           EQU         $000F
00007F60                         11218  
00007F60  =00000010              11219  match_ADDA_An_indir_r0                  EQU         $0010
00007F60  =00000011              11220  match_ADDA_An_indir_r1                  EQU         $0011
00007F60  =00000012              11221  match_ADDA_An_indir_r2                  EQU         $0012
00007F60  =00000013              11222  match_ADDA_An_indir_r3                  EQU         $0013
00007F60  =00000014              11223  match_ADDA_An_indir_r4                  EQU         $0014
00007F60  =00000015              11224  match_ADDA_An_indir_r5                  EQU         $0015
00007F60  =00000016              11225  match_ADDA_An_indir_r6                  EQU         $0016
00007F60  =00000017              11226  match_ADDA_An_indir_r7                  EQU         $0017
00007F60                         11227  
00007F60  =00000018              11228  match_ADDA_An_indir_postinc_reg0        EQU         $0018
00007F60  =00000019              11229  match_ADDA_An_indir_postinc_reg1        EQU         $0019
00007F60  =0000001A              11230  match_ADDA_An_indir_postinc_reg2        EQU         $001A
00007F60  =0000001B              11231  match_ADDA_An_indir_postinc_reg3        EQU         $001B
00007F60  =0000001C              11232  match_ADDA_An_indir_postinc_reg4        EQU         $001C
00007F60  =0000001D              11233  match_ADDA_An_indir_postinc_reg5        EQU         $001D
00007F60  =0000001E              11234  match_ADDA_An_indir_postinc_reg6        EQU         $001E
00007F60  =0000001F              11235  match_ADDA_An_indir_postinc_reg7        EQU         $001F
00007F60                         11236  
00007F60  =00000020              11237  match_ADDA_An_indir_predec_reg0         EQU         $0020
00007F60  =00000021              11238  match_ADDA_An_indir_predec_reg1         EQU         $0021
00007F60  =00000022              11239  match_ADDA_An_indir_predec_reg2         EQU         $0022
00007F60  =00000023              11240  match_ADDA_An_indir_predec_reg3         EQU         $0023
00007F60  =00000024              11241  match_ADDA_An_indir_predec_reg4         EQU         $0024
00007F60  =00000025              11242  match_ADDA_An_indir_predec_reg5         EQU         $0025
00007F60  =00000026              11243  match_ADDA_An_indir_predec_reg6         EQU         $0026
00007F60  =00000027              11244  match_ADDA_An_indir_predec_reg7         EQU         $0027
00007F60                         11245  
00007F60  =0000003C              11246  match_imm_add                           EQU         $003C
00007F60  =000000FC              11247  match_imm_add_word                      EQU         $00FC
00007F60  =000001FC              11248  match_imm_add_long                      EQU         $01FC
00007F60                         11249  
00007F60  =00000000              11250  match_ADDA_reg0                         EQU         $0000
00007F60  =00000200              11251  match_ADDA_reg1                         EQU         $0200
00007F60  =00000400              11252  match_ADDA_reg2                         EQU         $0400
00007F60  =00000600              11253  match_ADDA_reg3                         EQU         $0600
00007F60  =00000800              11254  match_ADDA_reg4                         EQU         $0800
00007F60  =00000A00              11255  match_ADDA_reg5                         EQU         $0A00
00007F60  =00000C00              11256  match_ADDA_reg6                         EQU         $0C00
00007F60  =00000E00              11257  match_ADDA_reg7                         EQU         $0E00
00007F60                         11258  
00007F60  =00000038              11259  mask_ADDQ_ea_mode           EQU         $0038
00007F60  =0000003F              11260  mask_ADDQ_abs_add           EQU         $003F
00007F60  =0000003F              11261  mask_ADDQ_ea_reg_and_mode   EQU         $003F
00007F60  =00000E00              11262  mask_ADDQ_reg               EQU         $0E00
00007F60                         11263  
00007F60  =00000000              11264  match_ADDQ_Dn               EQU         $0000
00007F60  =00000008              11265  match_ADDQ_An               EQU         $0008
00007F60  =00000010              11266  match_ADDQ_An_indir         EQU         $0010
00007F60  =00000020              11267  match_ADDQ_An_indir_predec  EQU         $0020
00007F60  =00000018              11268  match_ADDQ_An_indir_postinc EQU         $0018
00007F60  =00000038              11269  match_ADDQ_abs_add_word     EQU         $0038
00007F60  =00000039              11270  match_ADDQ_abs_add_long     EQU         $0039
00007F60                         11271  
00007F60  =00000000              11272  match_ADDQ_D0               EQU         $0000
00007F60  =00000001              11273  match_ADDQ_D1               EQU         $0001
00007F60  =00000002              11274  match_ADDQ_D2               EQU         $0002
00007F60  =00000003              11275  match_ADDQ_D3               EQU         $0003
00007F60  =00000004              11276  match_ADDQ_D4               EQU         $0004
00007F60  =00000005              11277  match_ADDQ_D5               EQU         $0005
00007F60  =00000006              11278  match_ADDQ_D6               EQU         $0006
00007F60  =00000007              11279  match_ADDQ_D7               EQU         $0007
00007F60                         11280  
00007F60  =00000008              11281  match_ADDQ_A0               EQU         $0008
00007F60  =00000009              11282  match_ADDQ_A1               EQU         $0009
00007F60  =0000000A              11283  match_ADDQ_A2               EQU         $000A
00007F60  =0000000B              11284  match_ADDQ_A3               EQU         $000B
00007F60  =0000000C              11285  match_ADDQ_A4               EQU         $000C
00007F60  =0000000D              11286  match_ADDQ_A5               EQU         $000D
00007F60  =0000000E              11287  match_ADDQ_A6               EQU         $000E
00007F60  =0000000F              11288  match_ADDQ_A7               EQU         $000F
00007F60                         11289  
00007F60  =00000010              11290  match_ADDQ_An_indir_r0      EQU         $0010
00007F60  =00000011              11291  match_ADDQ_An_indir_r1      EQU         $0011
00007F60  =00000012              11292  match_ADDQ_An_indir_r2      EQU         $0012
00007F60  =00000013              11293  match_ADDQ_An_indir_r3      EQU         $0013
00007F60  =00000014              11294  match_ADDQ_An_indir_r4      EQU         $0014
00007F60  =00000015              11295  match_ADDQ_An_indir_r5      EQU         $0015
00007F60  =00000016              11296  match_ADDQ_An_indir_r6      EQU         $0016
00007F60  =00000017              11297  match_ADDQ_An_indir_r7      EQU         $0017
00007F60                         11298  
00007F60  =00000018              11299  match_ADDQ_An_indir_postinc_reg0        EQU         $0018
00007F60  =00000019              11300  match_ADDQ_An_indir_postinc_reg1        EQU         $0019
00007F60  =0000001A              11301  match_ADDQ_An_indir_postinc_reg2        EQU         $001A
00007F60  =0000001B              11302  match_ADDQ_An_indir_postinc_reg3        EQU         $001B
00007F60  =0000001C              11303  match_ADDQ_An_indir_postinc_reg4        EQU         $001C
00007F60  =0000001D              11304  match_ADDQ_An_indir_postinc_reg5        EQU         $001D
00007F60  =0000001E              11305  match_ADDQ_An_indir_postinc_reg6        EQU         $001E
00007F60  =0000001F              11306  match_ADDQ_An_indir_postinc_reg7        EQU         $001F
00007F60                         11307  
00007F60  =00000020              11308  match_ADDQ_An_indir_predec_reg0         EQU         $0020
00007F60  =00000021              11309  match_ADDQ_An_indir_predec_reg1         EQU         $0021
00007F60  =00000022              11310  match_ADDQ_An_indir_predec_reg2         EQU         $0022
00007F60  =00000023              11311  match_ADDQ_An_indir_predec_reg3         EQU         $0023
00007F60  =00000024              11312  match_ADDQ_An_indir_predec_reg4         EQU         $0024
00007F60  =00000025              11313  match_ADDQ_An_indir_predec_reg5         EQU         $0025
00007F60  =00000026              11314  match_ADDQ_An_indir_predec_reg6         EQU         $0026
00007F60  =00000027              11315  match_ADDQ_An_indir_predec_reg7         EQU         $0027
00007F60                         11316  
00007F60                         11317  
00007F60  =00000000              11318  match_ADDQ_reg0                         EQU         $0000
00007F60  =00000200              11319  match_ADDQ_reg1                         EQU         $0200
00007F60  =00000400              11320  match_ADDQ_reg2                         EQU         $0400
00007F60  =00000600              11321  match_ADDQ_reg3                         EQU         $0600
00007F60  =00000800              11322  match_ADDQ_reg4                         EQU         $0800
00007F60  =00000A00              11323  match_ADDQ_reg5                         EQU         $0A00
00007F60  =00000C00              11324  match_ADDQ_reg6                         EQU         $0C00
00007F60  =00000E00              11325  match_ADDQ_reg7                         EQU         $0E00
00007F60                         11326  
00007F60                         11327  
00007F60                         11328  
00007F60                         11329  
00007F60                         11330  
00007F60                         11331  
00007F60                         11332  
00007F60                         11333  
00007F60                         11334  -------------------- end include --------------------
00007F60                         11335              INCLUDE 'strings.x68'
00007F60= 4D 4F 56 45 2E 42 00   11336  opcode_MOVEB    DC.B    'MOVE.B',0
00007F67= 4D 4F 56 45 2E 57 00   11337  opcode_MOVEW    DC.B    'MOVE.W',0
00007F6E= 4D 4F 56 45 2E 4C 00   11338  opcode_MOVEL    DC.B    'MOVE.L',0
00007F75= 4D 4F 56 45 4D 00      11339  opcode_MOVEM    DC.B    'MOVEM',0
00007F7B= 4D 4F 56 45 51 00      11340  opcode_MOVEQ    DC.B    'MOVEQ',0
00007F81= 4D 4F 56 45 41 2E ...  11341  opcode_MOVEAB   DC.B    'MOVEA.B',0
00007F89= 4D 4F 56 45 41 2E ...  11342  opcode_MOVEAW   DC.B    'MOVEA.W',0
00007F91= 4D 4F 56 45 41 2E ...  11343  opcode_MOVEAL   DC.B    'MOVEA.L',0
00007F99= 4E 4F 50 00            11344  opcode_NOP      DC.B    'NOP',0
00007F9D= 41 44 44 2E 42 00      11345  opcode_ADDB     DC.B    'ADD.B',0
00007FA3= 41 44 44 2E 57 00      11346  opcode_ADDW     DC.B    'ADD.W',0
00007FA9= 41 44 44 2E 4C 00      11347  opcode_ADDL     DC.B    'ADD.L',0
00007FAF= 41 44 44 41 2E 57 00   11348  opcode_ADDAW    DC.B    'ADDA.W',0
00007FB6= 41 44 44 41 2E 4C 00   11349  opcode_ADDAL    DC.B    'ADDA.L',0
00007FBD= 41 44 44 51 2E 42 00   11350  opcode_ADDQB    DC.B    'ADDQ.B',0
00007FC4= 41 44 44 51 2E 57 00   11351  opcode_ADDQW    DC.B    'ADDQ.W',0
00007FCB= 41 44 44 51 2E 4C 00   11352  opcode_ADDQL    DC.B    'ADDQ.L',0
00007FD2= 53 55 42 2E 42 00      11353  opcode_SUBB     DC.B    'SUB.B',0
00007FD8= 53 55 42 2E 57 00      11354  opcode_SUBW     DC.B    'SUB.W',0
00007FDE= 53 55 42 2E 4C 00      11355  opcode_SUBL     DC.B    'SUB.L',0
00007FE4= 4C 45 41 00            11356  opcode_LEA      DC.B    'LEA',0
00007FE8= 41 4E 44 2E 42 00      11357  opcode_ANDB     DC.B    'AND.B',0
00007FEE= 41 4E 44 2E 57 00      11358  opcode_ANDW     DC.B    'AND.W',0
00007FF4= 41 4E 44 2E 4C 00      11359  opcode_ANDL     DC.B    'AND.L',0
00007FFA= 4F 52 2E 42 00         11360  opcode_ORB      DC.B    'OR.B',0
00007FFF= 4F 52 2E 57 00         11361  opcode_ORW      DC.B    'OR.W',0
00008004= 4F 52 2E 4C 00         11362  opcode_ORL      DC.B    'OR.L',0
00008009= 4E 4F 54 2E 42 00      11363  opcode_NOTB     DC.B    'NOT.B',0
0000800F= 4E 4F 54 2E 57 00      11364  opcode_NOTW     DC.B    'NOT.W',0
00008015= 4E 4F 54 2E 4C 00      11365  opcode_NOTL     DC.B    'NOT.L',0
0000801B= 4C 53 4C 2E 42 00      11366  opcode_LSLB     DC.B    'LSL.B',0
00008021= 4C 53 4C 2E 57 00      11367  opcode_LSLW     DC.B    'LSL.W',0
00008027= 4C 53 4C 2E 4C 00      11368  opcode_LSLL     DC.B    'LSL.L',0
0000802D= 4C 53 52 2E 42 00      11369  opcode_LSRB     DC.B    'LSR.B',0
00008033= 4C 53 52 2E 57 00      11370  opcode_LSRW     DC.B    'LSR.W',0
00008039= 4C 53 52 2E 4C 00      11371  opcode_LSRL     DC.B    'LSR.L',0
0000803F= 41 53 4C 2E 42 00      11372  opcode_ASLB     DC.B    'ASL.B',0
00008045= 41 53 4C 2E 57 00      11373  opcode_ASLW     DC.B    'ASL.W',0
0000804B= 41 53 4C 2E 4C 00      11374  opcode_ASLL     DC.B    'ASL.L',0
00008051= 41 53 52 2E 42 00      11375  opcode_ASRB     DC.B    'ASR.B',0
00008057= 41 53 52 2E 57 00      11376  opcode_ASRW     DC.B    'ASR.W',0
0000805D= 41 53 52 2E 4C 00      11377  opcode_ASRL     DC.B    'ASR.L',0
00008063= 52 4F 4C 2E 42 00      11378  opcode_ROLB     DC.B    'ROL.B',0
00008069= 52 4F 4C 2E 57 00      11379  opcode_ROLW     DC.B    'ROL.W',0
0000806F= 52 4F 4C 2E 4C 00      11380  opcode_ROLL     DC.B    'ROL.L',0
00008075= 52 4F 52 2E 42 00      11381  opcode_RORB     DC.B    'ROR.B',0
0000807B= 52 4F 52 2E 57 00      11382  opcode_RORW     DC.B    'ROR.W',0
00008081= 52 4F 52 2E 4C 00      11383  opcode_RORL     DC.B    'ROR.L',0
00008087= 42 47 54 00            11384  opcode_BGT      DC.B    'BGT',0
0000808B= 42 47 54 2E 42 00      11385  opcode_BGTB     DC.B    'BGT.B',0
00008091= 42 47 54 2E 57 00      11386  opcode_BGTW     DC.B    'BGT.W',0
00008097= 42 4C 45 00            11387  opcode_BLE      DC.B    'BLE',0
0000809B= 42 4C 45 2E 42 00      11388  opcode_BLEB     DC.B    'BLE.B',0
000080A1= 42 4C 45 2E 57 00      11389  opcode_BLEW     DC.B    'BLE.W',0
000080A7= 42 45 51 00            11390  opcode_BEQ      DC.B    'BEQ',0
000080AB= 42 45 51 2E 42 00      11391  opcode_BEQB     DC.B    'BEQ.B',0
000080B1= 42 45 51 2E 57 00      11392  opcode_BEQW     DC.B    'BEQ.W',0
000080B7= 4A 53 52 00            11393  opcode_JSR      DC.B    'JSR',0
000080BB= 52 54 53 00            11394  opcode_RTS      DC.B    'RTS',0
000080BF= 42 52 41 00            11395  opcode_BRA      DC.B    'BRA',0
000080C3= 42 52 41 2E 42 00      11396  opcode_BRAB     DC.B    'BRA.B',0
000080C9= 42 52 41 2E 57 00      11397  opcode_BRAW     DC.B    'BRA.W',0
000080CF= 4D 4F 56 45 4D 2E ...  11398  opcode_MOVEMW   DC.B    'MOVEM.W',0
000080D7= 4D 4F 56 45 4D 2E ...  11399  opcode_MOVEML   DC.B    'MOVEM.L',0
000080DF= 44 41 54 41 00         11400  opcode_DATA     DC.B    'DATA',0
000080E4  =0000000D              11401  CR          EQU     $0D *ASCII code for carriage return
000080E4  =0000000A              11402  LF          EQU     $0A *ASCII code for line feed
000080E4  =00000009              11403  HT          EQU     $09 *ASCII code for horizontal tab
000080E4  =00000071              11404  QT          EQU     $71 *ascii for lowercase q
000080E4  =00000072              11405  RT          EQU     $72 *ascii for lowercase r
000080E4                         11406  
000080E4= 57 65 6C 63 6F 6D ...  11407  LOAD_MESSAGE    DC.B    'Welcome to The Disassemblers CSS 422 project',CR,LF,'Select "demo_test.s68" or another file in File->Open Data for test data',CR,LF,0
0000815C= 49 66 20 79 6F 75 ...  11408  LOAD2_MESSAGE   DC.B    'If you got to this page without loading a test file,',CR,LF,'please exit and follow the directions above.',CR,LF,0
000081C1= 49 6E 70 75 74 20 ...  11409  START_REQUEST   DC.B    'Input starting hexadecimal memory location in the format ',CR,LF,'"########" Ex 00009000: ',0
00008215= 49 6E 70 75 74 20 ...  11410  END_REQUEST     DC.B    'Input ending hexadecimal memory location in the format ',CR,LF,'"########" Ex. Ex 000093BA: ',0
0000826B= 49 6E 70 75 74 20 ...  11411  NOT_HEX_MSG     DC.B    'Input was not in the hexadecimal range 0-F',0
00008296= 49 6E 70 75 74 20 ...  11412  BAD_RANGE       DC.B    'Input is not in the range between $00009000 and $000093BA',CR,LF,0
000082D2= 45 6E 64 69 6E 67 ...  11413  BAD_END         DC.B    'Ending location is less than or equal to the starting location, ',CR,LF,'please switch the inputs.',CR,LF,0
00008330= 49 6E 70 75 74 20 ...  11414  BAD_BOUND       DC.B    'Input is not on an input boundary, please enter address divisible by 2.',CR,LF,0
0000837A= 0D 0A 00               11415  SPACE           DC.B    CR,LF,0
0000837D= 50 72 65 73 73 20 ...  11416  PRESS_ENTER     DC.B    'Press ENTER to continue.',CR,LF,0
00008398= 09 00                  11417  TAB             DC.B    HT,0
0000839A= 57 6F 75 6C 64 20 ...  11418  RESTART_Q       DC.B    'Would you like to test again?',CR,LF,'Press r to restart or q to quit.',CR,LF,0
000083DC= 2C 00                  11419  COMMA           DC.B    ',',0
000083DE                         11420  
000083DE= 49 6E 63 6F 72 72 ...  11421  ERROR_MESSAGE                   DC.B            'Incorrect EA Format',0
000083F2= 44 30 00               11422  ea_D0                       DC.B        'D0',0
000083F5= 44 31 00               11423  ea_D1                       DC.B        'D1',0
000083F8= 44 32 00               11424  ea_D2                       DC.B        'D2',0
000083FB= 44 33 00               11425  ea_D3                       DC.B        'D3',0
000083FE= 44 34 00               11426  ea_D4                       DC.B        'D4',0
00008401= 44 35 00               11427  ea_D5                       DC.B        'D5',0
00008404= 44 36 00               11428  ea_D6                       DC.B        'D6',0
00008407= 44 37 00               11429  ea_D7                       DC.B        'D7',0
0000840A                         11430  
0000840A= 41 30 00               11431  ea_A0                       DC.B        'A0',0
0000840D= 41 31 00               11432  ea_A1                       DC.B        'A1',0
00008410= 41 32 00               11433  ea_A2                       DC.B        'A2',0
00008413= 41 33 00               11434  ea_A3                       DC.B        'A3',0
00008416= 41 34 00               11435  ea_A4                       DC.B        'A4',0
00008419= 41 35 00               11436  ea_A5                       DC.B        'A5',0
0000841C= 41 36 00               11437  ea_A6                       DC.B        'A6',0
0000841F= 41 37 00               11438  ea_A7                       DC.B        'A7',0
00008422                         11439  
00008422= 38 00                  11440  ea_val0                     DC.B        '8',0
00008424= 31 00                  11441  ea_val1                     DC.B        '1',0
00008426= 32 00                  11442  ea_val2                     DC.B        '2',0
00008428= 33 00                  11443  ea_val3                     DC.B        '3',0
0000842A= 34 00                  11444  ea_val4                     DC.B        '4',0
0000842C= 35 00                  11445  ea_val5                     DC.B        '5',0
0000842E= 36 00                  11446  ea_val6                     DC.B        '6',0
00008430= 37 00                  11447  ea_val7                     DC.B        '7',0
00008432                         11448  
00008432= 28 41 30 29 00         11449  ea_indir_A0                 DC.B        '(A0)',0
00008437= 28 41 31 29 00         11450  ea_indir_A1                 DC.B        '(A1)',0
0000843C= 28 41 32 29 00         11451  ea_indir_A2                 DC.B        '(A2)',0
00008441= 28 41 33 29 00         11452  ea_indir_A3                 DC.B        '(A3)',0
00008446= 28 41 34 29 00         11453  ea_indir_A4                 DC.B        '(A4)',0
0000844B= 28 41 35 29 00         11454  ea_indir_A5                 DC.B        '(A5)',0
00008450= 28 41 36 29 00         11455  ea_indir_A6                 DC.B        '(A6)',0
00008455= 28 41 37 29 00         11456  ea_indir_A7                 DC.B        '(A7)',0
0000845A                         11457  
0000845A= 28 41 30 29 2B 00      11458  ea_indir_postinc_A0         DC.B        '(A0)+',0
00008460= 28 41 31 29 2B 00      11459  ea_indir_postinc_A1         DC.B        '(A1)+',0
00008466= 28 41 32 29 2B 00      11460  ea_indir_postinc_A2         DC.B        '(A2)+',0
0000846C= 28 41 33 29 2B 00      11461  ea_indir_postinc_A3         DC.B        '(A3)+',0
00008472= 28 41 34 29 2B 00      11462  ea_indir_postinc_A4         DC.B        '(A4)+',0
00008478= 28 41 35 29 2B 00      11463  ea_indir_postinc_A5         DC.B        '(A5)+',0
0000847E= 28 41 36 29 2B 00      11464  ea_indir_postinc_A6         DC.B        '(A6)+',0
00008484= 28 41 37 29 2B 00      11465  ea_indir_postinc_A7         DC.B        '(A7)+',0
0000848A                         11466  
0000848A                         11467  
0000848A= 2D 28 41 30 29 00      11468  ea_indir_predec_A0          DC.B        '-(A0)',0
00008490= 2D 28 41 31 29 00      11469  ea_indir_predec_A1          DC.B        '-(A1)',0
00008496= 2D 28 41 32 29 00      11470  ea_indir_predec_A2          DC.B        '-(A2)',0
0000849C= 2D 28 41 33 29 00      11471  ea_indir_predec_A3          DC.B        '-(A3)',0
000084A2= 2D 28 41 34 29 00      11472  ea_indir_predec_A4          DC.B        '-(A4)',0
000084A8= 2D 28 41 35 29 00      11473  ea_indir_predec_A5          DC.B        '-(A5)',0
000084AE= 2D 28 41 36 29 00      11474  ea_indir_predec_A6          DC.B        '-(A6)',0
000084B4= 2D 28 41 37 29 00      11475  ea_indir_predec_A7          DC.B        '-(A7)',0
000084BA                         11476  
000084BA= 28 00                  11477  ea_paren_open               DC.B        '(',0
000084BC= 29 00                  11478  ea_paren_closed             DC.B        ')',0
000084BE= 2E 57 00               11479  ea_abs_word_string          DC.B        '.W',0
000084C1= 2E 4C 00               11480  ea_abs_long_string          DC.B        '.L',0
000084C4= 24 00                  11481  ea_$                        DC.B        '$',0
000084C6= 23 00                  11482  ea_lb                       DC.B            '#',0   
000084C8                         11483  
000084C8= 23 30 00               11484  ea_data0                    DC.B      '#0',0
000084CB= 23 31 00               11485  ea_data1                    DC.B      '#1',0
000084CE= 23 32 00               11486  ea_data2                    DC.B      '#2',0
000084D1= 23 33 00               11487  ea_data3                    DC.B      '#3',0
000084D4= 23 34 00               11488  ea_data4                    DC.B      '#4',0
000084D7= 23 35 00               11489  ea_data5                    DC.B      '#5',0
000084DA= 23 36 00               11490  ea_data6                    DC.B      '#6',0
000084DD= 23 37 00               11491  ea_data7                    DC.B      '#7',0
000084E0                         11492  
000084E0                         11493  
000084E0                         11494  
000084E0                         11495  
000084E0                         11496  
000084E0                         11497  
000084E0                         11498  
000084E0                         11499  
000084E0                         11500  
000084E0                         11501  
000084E0                         11502  
000084E0                         11503  
000084E0                         11504  
000084E0                         11505  
000084E0                         11506  
000084E0                         11507  
000084E0                         11508  -------------------- end include --------------------
000084E0                         11509      
000084E0                         11510  
000084E0                         11511  STOP:
000084E0                         11512      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_A0_OUT         3A0A
ADDA_A1_OUT         3A1C
ADDA_A2_OUT         3A2E
ADDA_A3_OUT         3A40
ADDA_A4_OUT         3A52
ADDA_A5_OUT         3A64
ADDA_A6_OUT         3A76
ADDA_A7_OUT         3A88
ADDA_ABS_ADD_LONG   386E
ADDA_ABS_ADD_LONG_OUT  3DC8
ADDA_ABS_ADD_WORD   3856
ADDA_ABS_ADD_WORD_OUT  3DB8
ADDA_ADD_REG_DIR    381E
ADDA_ADD_REG_INDIR  382C
ADDA_ADD_REG_INDIR_POSTINC  3848
ADDA_ADD_REG_INDIR_PREDEC  383A
ADDA_AN_INDIR_POSTINC_REG  3BA4
ADDA_AN_INDIR_POSTINC_REG0_OUT  3C1E
ADDA_AN_INDIR_POSTINC_REG1  3BBC
ADDA_AN_INDIR_POSTINC_REG1_OUT  3C30
ADDA_AN_INDIR_POSTINC_REG2  3BCA
ADDA_AN_INDIR_POSTINC_REG2_OUT  3C42
ADDA_AN_INDIR_POSTINC_REG3  3BD8
ADDA_AN_INDIR_POSTINC_REG3_OUT  3C54
ADDA_AN_INDIR_POSTINC_REG4  3BE6
ADDA_AN_INDIR_POSTINC_REG4_OUT  3C66
ADDA_AN_INDIR_POSTINC_REG5  3BF4
ADDA_AN_INDIR_POSTINC_REG5_OUT  3C78
ADDA_AN_INDIR_POSTINC_REG6  3C02
ADDA_AN_INDIR_POSTINC_REG6_OUT  3C8A
ADDA_AN_INDIR_POSTINC_REG7  3C10
ADDA_AN_INDIR_POSTINC_REG7_OUT  3C9C
ADDA_AN_INDIR_PREDEC  3CAE
ADDA_AN_INDIR_PREDEC_REG0_OUT  3D28
ADDA_AN_INDIR_PREDEC_REG1  3CC6
ADDA_AN_INDIR_PREDEC_REG1_OUT  3D3A
ADDA_AN_INDIR_PREDEC_REG2  3CD4
ADDA_AN_INDIR_PREDEC_REG2_OUT  3D4C
ADDA_AN_INDIR_PREDEC_REG3  3CE2
ADDA_AN_INDIR_PREDEC_REG3_OUT  3D5E
ADDA_AN_INDIR_PREDEC_REG4  3CF0
ADDA_AN_INDIR_PREDEC_REG4_OUT  3D70
ADDA_AN_INDIR_PREDEC_REG5  3CFE
ADDA_AN_INDIR_PREDEC_REG5_OUT  3D82
ADDA_AN_INDIR_PREDEC_REG6  3D0C
ADDA_AN_INDIR_PREDEC_REG6_OUT  3D94
ADDA_AN_INDIR_PREDEC_REG7  3D1A
ADDA_AN_INDIR_PREDEC_REG7_OUT  3DA6
ADDA_AN_INDIR_REG   3A9A
ADDA_AN_INDIR_REG0_OUT  3B14
ADDA_AN_INDIR_REG1  3AB2
ADDA_AN_INDIR_REG1_OUT  3B26
ADDA_AN_INDIR_REG2  3AC0
ADDA_AN_INDIR_REG2_OUT  3B38
ADDA_AN_INDIR_REG3  3ACE
ADDA_AN_INDIR_REG3_OUT  3B4A
ADDA_AN_INDIR_REG4  3ADC
ADDA_AN_INDIR_REG4_OUT  3B5C
ADDA_AN_INDIR_REG5  3AEA
ADDA_AN_INDIR_REG5_OUT  3B6E
ADDA_AN_INDIR_REG6  3AF8
ADDA_AN_INDIR_REG6_OUT  3B80
ADDA_AN_INDIR_REG7  3B06
ADDA_AN_INDIR_REG7_OUT  3B92
ADDA_AN_REG         3990
ADDA_D0_OUT         3900
ADDA_D1_OUT         3912
ADDA_D2_OUT         3924
ADDA_D3_OUT         3936
ADDA_D4_OUT         3948
ADDA_D5_OUT         395A
ADDA_D6_OUT         396C
ADDA_D7_OUT         397E
ADDA_DATA_REG_DIR   3810
ADDA_DETERMINE_SECOND_OP  3E0E
ADDA_DN_REG         3886
ADDA_END            1730
ADDA_FAIL           172A
ADDA_IMMEDIATE_ADD  3878
ADDA_IMMEDIATE_ADD_OUT  3DDA
ADDA_IMM_ADD_L      3DFC
ADDA_IMM_ADD_W      3DEC
ADDA_L              1704
ADDA_RA1            39A8
ADDA_RA2            39B6
ADDA_RA3            39C4
ADDA_RA4            39D2
ADDA_RA5            39E0
ADDA_RA6            39EE
ADDA_RA7            39FC
ADDA_RD1            389E
ADDA_RD2            38AC
ADDA_RD3            38BA
ADDA_RD4            38C8
ADDA_RD5            38D6
ADDA_RD6            38E4
ADDA_RD7            38F2
ADDA_REG0           3E18
ADDA_REG0_OUT       3E88
ADDA_REG1           3E26
ADDA_REG1_OUT       3E90
ADDA_REG2           3E34
ADDA_REG2_OUT       3E98
ADDA_REG3           3E42
ADDA_REG3_OUT       3EA0
ADDA_REG4           3E50
ADDA_REG4_OUT       3EA8
ADDA_REG5           3E5E
ADDA_REG5_OUT       3EB0
ADDA_REG6           3E6C
ADDA_REG6_OUT       3EB8
ADDA_REG7           3E7A
ADDA_REG7_OUT       3EC0
ADDA_SIZE           16D4
ADDA_SUB            380A
ADDQ_A0_OUT         4166
ADDQ_A1_OUT         416E
ADDQ_A2_OUT         4176
ADDQ_A3_OUT         417E
ADDQ_A4_OUT         4186
ADDQ_A5_OUT         418E
ADDQ_A6_OUT         4196
ADDQ_A7_OUT         419E
ADDQ_ABS_ADD_LONG   4024
ADDQ_ABS_ADD_LONG_OUT  43DE
ADDQ_ABS_ADD_WORD   400E
ADDQ_ABS_ADD_WORD_OUT  43D4
ADDQ_ADD_REG_DIR    3FD6
ADDQ_ADD_REG_INDIR  3FE4
ADDQ_ADD_REG_INDIR_POSTINC  4000
ADDQ_ADD_REG_INDIR_PREDEC  3FF2
ADDQ_AN_INDIR_PDEC_R0_OUT  4394
ADDQ_AN_INDIR_PDEC_R1  4332
ADDQ_AN_INDIR_PDEC_R1_OUT  439C
ADDQ_AN_INDIR_PDEC_R2  4340
ADDQ_AN_INDIR_PDEC_R2_OUT  43A4
ADDQ_AN_INDIR_PDEC_R3  434E
ADDQ_AN_INDIR_PDEC_R3_OUT  43AC
ADDQ_AN_INDIR_PDEC_R4  435C
ADDQ_AN_INDIR_PDEC_R4_OUT  43B4
ADDQ_AN_INDIR_PDEC_R5  436A
ADDQ_AN_INDIR_PDEC_R5_OUT  43BC
ADDQ_AN_INDIR_PDEC_R6  4378
ADDQ_AN_INDIR_PDEC_R6_OUT  43C4
ADDQ_AN_INDIR_PDEC_R7  4386
ADDQ_AN_INDIR_PDEC_R7_OUT  43CC
ADDQ_AN_INDIR_PINC_R0_OUT  42DA
ADDQ_AN_INDIR_PINC_R1  4278
ADDQ_AN_INDIR_PINC_R1_OUT  42E2
ADDQ_AN_INDIR_PINC_R2  4286
ADDQ_AN_INDIR_PINC_R2_OUT  42EA
ADDQ_AN_INDIR_PINC_R3  4294
ADDQ_AN_INDIR_PINC_R3_OUT  42F2
ADDQ_AN_INDIR_PINC_R4  42A2
ADDQ_AN_INDIR_PINC_R4_OUT  42FA
ADDQ_AN_INDIR_PINC_R5  42B0
ADDQ_AN_INDIR_PINC_R5_OUT  4302
ADDQ_AN_INDIR_PINC_R6  42BE
ADDQ_AN_INDIR_PINC_R6_OUT  430A
ADDQ_AN_INDIR_PINC_R7  42CC
ADDQ_AN_INDIR_PINC_R7_OUT  4312
ADDQ_AN_INDIR_PINC_REG  4260
ADDQ_AN_INDIR_PREDEC  431A
ADDQ_AN_INDIR_REG   41A6
ADDQ_AN_INDIR_REG0_OUT  4220
ADDQ_AN_INDIR_REG1  41BE
ADDQ_AN_INDIR_REG1_OUT  4228
ADDQ_AN_INDIR_REG2  41CC
ADDQ_AN_INDIR_REG2_OUT  4230
ADDQ_AN_INDIR_REG3  41DA
ADDQ_AN_INDIR_REG3_OUT  4238
ADDQ_AN_INDIR_REG4  41E8
ADDQ_AN_INDIR_REG4_OUT  4240
ADDQ_AN_INDIR_REG5  41F6
ADDQ_AN_INDIR_REG5_OUT  4248
ADDQ_AN_INDIR_REG6  4204
ADDQ_AN_INDIR_REG6_OUT  4250
ADDQ_AN_INDIR_REG7  4212
ADDQ_AN_INDIR_REG7_OUT  4258
ADDQ_AN_REG         40EC
ADDQ_D0_OUT         40AC
ADDQ_D1_OUT         40B4
ADDQ_D2_OUT         40BC
ADDQ_D3_OUT         40C4
ADDQ_D4_OUT         40CC
ADDQ_D5_OUT         40D4
ADDQ_D6_OUT         40DC
ADDQ_D7_OUT         40E4
ADDQ_DATA_REG_DIR   3FC8
ADDQ_DETERMINE_SECOND_OPERAND  3FC2
ADDQ_DN_REG         4032
ADDQ_END            1EA6
ADDQ_FAIL           1EA0
ADDQ_L              1E7A
ADDQ_RA1            4104
ADDQ_RA2            4112
ADDQ_RA3            4120
ADDQ_RA4            412E
ADDQ_RA5            413C
ADDQ_RA6            414A
ADDQ_RA7            4158
ADDQ_RD1            404A
ADDQ_RD2            4058
ADDQ_RD3            4066
ADDQ_RD4            4074
ADDQ_RD5            4082
ADDQ_RD6            4090
ADDQ_RD7            409E
ADDQ_REG0           3ED2
ADDQ_REG0_OUT       3F42
ADDQ_REG1           3EE0
ADDQ_REG1_OUT       3F52
ADDQ_REG2           3EEE
ADDQ_REG2_OUT       3F62
ADDQ_REG3           3EFC
ADDQ_REG3_OUT       3F72
ADDQ_REG4           3F0A
ADDQ_REG4_OUT       3F82
ADDQ_REG5           3F18
ADDQ_REG5_OUT       3F92
ADDQ_REG6           3F26
ADDQ_REG6_OUT       3FA2
ADDQ_REG7           3F34
ADDQ_REG7_OUT       3FB2
ADDQ_SIZE           1E24
ADDQ_SUB            3EC8
ADDQ_W              1E54
ADD_ADD             2388
ADD_DETERMINE_SECOND_OP  28D4
ADD_DETERMINE_SECOND_OPERAND  2A98
ADD_DN_EA           298E
ADD_DN_EA_ABS_ADD_LONG  2AE6
ADD_DN_EA_ABS_ADD_LONG_OUT  2D20
ADD_DN_EA_ABS_ADD_WORD  2ACC
ADD_DN_EA_ABS_ADD_WORD_OUT  2D16
ADD_DN_EA_ADD_REG_INDIR  2AA2
ADD_DN_EA_ADD_REG_INDIR_POSTINC  2ABE
ADD_DN_EA_ADD_REG_INDIR_PREDEC  2AB0
ADD_DN_EA_AN_INDIR_POSTINC_REG  2BAE
ADD_DN_EA_AN_INDIR_POSTINC_REG1  2BC0
ADD_DN_EA_AN_INDIR_POSTINC_REG2  2BCE
ADD_DN_EA_AN_INDIR_POSTINC_REG3  2BDC
ADD_DN_EA_AN_INDIR_POSTINC_REG4  2BEA
ADD_DN_EA_AN_INDIR_POSTINC_REG5  2BF8
ADD_DN_EA_AN_INDIR_POSTINC_REG6  2C06
ADD_DN_EA_AN_INDIR_POSTINC_REG7  2C14
ADD_DN_EA_AN_INDIR_POSTIN_R0_OUT  2C22
ADD_DN_EA_AN_INDIR_POSTIN_R1_OUT  2C2A
ADD_DN_EA_AN_INDIR_POSTIN_R2_OUT  2C32
ADD_DN_EA_AN_INDIR_POSTIN_R3_OUT  2C3A
ADD_DN_EA_AN_INDIR_POSTIN_R4_OUT  2C42
ADD_DN_EA_AN_INDIR_POSTIN_R5_OUT  2C4A
ADD_DN_EA_AN_INDIR_POSTIN_R6_OUT  2C52
ADD_DN_EA_AN_INDIR_POSTIN_R7_OUT  2C5A
ADD_DN_EA_AN_INDIR_PREDEC  2C62
ADD_DN_EA_AN_INDIR_PREDEC_REG1  2C74
ADD_DN_EA_AN_INDIR_PREDEC_REG2  2C82
ADD_DN_EA_AN_INDIR_PREDEC_REG3  2C90
ADD_DN_EA_AN_INDIR_PREDEC_REG4  2C9E
ADD_DN_EA_AN_INDIR_PREDEC_REG5  2CAC
ADD_DN_EA_AN_INDIR_PREDEC_REG6  2CBA
ADD_DN_EA_AN_INDIR_PREDEC_REG7  2CC8
ADD_DN_EA_AN_INDIR_PREDE_R0_OUT  2CD6
ADD_DN_EA_AN_INDIR_PREDE_R1_OUT  2CDE
ADD_DN_EA_AN_INDIR_PREDE_R2_OUT  2CE6
ADD_DN_EA_AN_INDIR_PREDE_R3_OUT  2CEE
ADD_DN_EA_AN_INDIR_PREDE_R4_OUT  2CF6
ADD_DN_EA_AN_INDIR_PREDE_R5_OUT  2CFE
ADD_DN_EA_AN_INDIR_PREDE_R6_OUT  2D06
ADD_DN_EA_AN_INDIR_PREDE_R7_OUT  2D0E
ADD_DN_EA_AN_INDIR_REG  2AF4
ADD_DN_EA_AN_INDIR_REG0_OUT  2B6E
ADD_DN_EA_AN_INDIR_REG1  2B0C
ADD_DN_EA_AN_INDIR_REG1_OUT  2B76
ADD_DN_EA_AN_INDIR_REG2  2B1A
ADD_DN_EA_AN_INDIR_REG2_OUT  2B7E
ADD_DN_EA_AN_INDIR_REG3  2B28
ADD_DN_EA_AN_INDIR_REG3_OUT  2B86
ADD_DN_EA_AN_INDIR_REG4  2B36
ADD_DN_EA_AN_INDIR_REG4_OUT  2B8E
ADD_DN_EA_AN_INDIR_REG5  2B44
ADD_DN_EA_AN_INDIR_REG5_OUT  2B96
ADD_DN_EA_AN_INDIR_REG6  2B52
ADD_DN_EA_AN_INDIR_REG6_OUT  2B9E
ADD_DN_EA_AN_INDIR_REG7  2B60
ADD_DN_EA_AN_INDIR_REG7_OUT  2BA6
ADD_DN_EA_IMMEDIATE_ADD_OUT  2D2C
ADD_DN_EA_IMM_ADD_L  2D48
ADD_DN_EA_IMM_ADD_W  2D3E
ADD_DN_EA_MATCH     23BC
ADD_DN_EA_MATCH_L   23D8
ADD_DN_EA_MATCH_W   23CA
ADD_EA_DN           23E6
ADD_EA_DN_ABS_ADD_LONG  243E
ADD_EA_DN_ABS_ADD_LONG_OUT  288C
ADD_EA_DN_ABS_ADD_WORD  2428
ADD_EA_DN_ABS_ADD_WORD_OUT  287E
ADD_EA_DN_ADD_REG_INDIR  23FE
ADD_EA_DN_ADD_REG_INDIR_POSTINC  241A
ADD_EA_DN_ADD_REG_INDIR_PREDEC  240C
ADD_EA_DN_AN_INDIR_POSTINC_REG  266A
ADD_EA_DN_AN_INDIR_POSTINC_REG1  2682
ADD_EA_DN_AN_INDIR_POSTINC_REG2  2690
ADD_EA_DN_AN_INDIR_POSTINC_REG3  269E
ADD_EA_DN_AN_INDIR_POSTINC_REG4  26AC
ADD_EA_DN_AN_INDIR_POSTINC_REG5  26BA
ADD_EA_DN_AN_INDIR_POSTINC_REG6  26C8
ADD_EA_DN_AN_INDIR_POSTINC_REG7  26D6
ADD_EA_DN_AN_INDIR_POSTIN_R0_OUT  26E4
ADD_EA_DN_AN_INDIR_POSTIN_R1_OUT  26F6
ADD_EA_DN_AN_INDIR_POSTIN_R2_OUT  2708
ADD_EA_DN_AN_INDIR_POSTIN_R3_OUT  271A
ADD_EA_DN_AN_INDIR_POSTIN_R4_OUT  272C
ADD_EA_DN_AN_INDIR_POSTIN_R5_OUT  273E
ADD_EA_DN_AN_INDIR_POSTIN_R6_OUT  2750
ADD_EA_DN_AN_INDIR_POSTIN_R7_OUT  2762
ADD_EA_DN_AN_INDIR_PREDEC  2774
ADD_EA_DN_AN_INDIR_PREDEC_REG1  278C
ADD_EA_DN_AN_INDIR_PREDEC_REG2  279A
ADD_EA_DN_AN_INDIR_PREDEC_REG3  27A8
ADD_EA_DN_AN_INDIR_PREDEC_REG4  27B6
ADD_EA_DN_AN_INDIR_PREDEC_REG5  27C4
ADD_EA_DN_AN_INDIR_PREDEC_REG6  27D2
ADD_EA_DN_AN_INDIR_PREDEC_REG7  27E0
ADD_EA_DN_AN_INDIR_PREDE_R0_OUT  27EE
ADD_EA_DN_AN_INDIR_PREDE_R1_OUT  2800
ADD_EA_DN_AN_INDIR_PREDE_R2_OUT  2812
ADD_EA_DN_AN_INDIR_PREDE_R3_OUT  2824
ADD_EA_DN_AN_INDIR_PREDE_R4_OUT  2836
ADD_EA_DN_AN_INDIR_PREDE_R5_OUT  2848
ADD_EA_DN_AN_INDIR_PREDE_R6_OUT  285A
ADD_EA_DN_AN_INDIR_PREDE_R7_OUT  286C
ADD_EA_DN_AN_INDIR_REG  2560
ADD_EA_DN_AN_INDIR_REG0_OUT  25DA
ADD_EA_DN_AN_INDIR_REG1  2578
ADD_EA_DN_AN_INDIR_REG1_OUT  25EC
ADD_EA_DN_AN_INDIR_REG2  2586
ADD_EA_DN_AN_INDIR_REG2_OUT  25FE
ADD_EA_DN_AN_INDIR_REG3  2594
ADD_EA_DN_AN_INDIR_REG3_OUT  2610
ADD_EA_DN_AN_INDIR_REG4  25A2
ADD_EA_DN_AN_INDIR_REG4_OUT  2622
ADD_EA_DN_AN_INDIR_REG5  25B0
ADD_EA_DN_AN_INDIR_REG5_OUT  2634
ADD_EA_DN_AN_INDIR_REG6  25BE
ADD_EA_DN_AN_INDIR_REG6_OUT  2646
ADD_EA_DN_AN_INDIR_REG7  25CC
ADD_EA_DN_AN_INDIR_REG7_OUT  2658
ADD_EA_DN_D0_OUT    24D0
ADD_EA_DN_D1_OUT    24E2
ADD_EA_DN_D2_OUT    24F4
ADD_EA_DN_D3_OUT    2506
ADD_EA_DN_D4_OUT    2518
ADD_EA_DN_D5_OUT    252A
ADD_EA_DN_D6_OUT    253C
ADD_EA_DN_D7_OUT    254E
ADD_EA_DN_DATA_REG_DIR  23F0
ADD_EA_DN_DN_REG    2456
ADD_EA_DN_IMMEDIATE_ADD  2448
ADD_EA_DN_IMMEDIATE_ADD_OUT  289C
ADD_EA_DN_IMM_ADD_L  28C0
ADD_EA_DN_IMM_ADD_W  28AE
ADD_EA_DN_MATCH     2392
ADD_EA_DN_MATCH_L   23AE
ADD_EA_DN_MATCH_W   23A0
ADD_EA_DN_RD1       246E
ADD_EA_DN_RD2       247C
ADD_EA_DN_RD3       248A
ADD_EA_DN_RD4       2498
ADD_EA_DN_RD5       24A6
ADD_EA_DN_RD6       24B4
ADD_EA_DN_RD7       24C2
ADD_END             17B8
ADD_ERROR           2D54
ADD_FAIL            17B2
ADD_L               178C
ADD_SIZE            1736
ADD_W               1766
AND_DETERMINE_SECOND_OP  33A6
AND_DETERMINE_SECOND_OPERAND  356A
AND_DN_EA           3460
AND_DN_EA_MATCH     2D62
AND_DN_EA_MATCH_L   2D7E
AND_DN_EA_MATCH_W   2D70
AND_EA_DN           2DB6
AND_EA_DN_A0_OUT    2F92
AND_EA_DN_A1_OUT    2FA4
AND_EA_DN_A2_OUT    2FB6
AND_EA_DN_A3_OUT    2FC8
AND_EA_DN_A4_OUT    2FDA
AND_EA_DN_A5_OUT    2FEC
AND_EA_DN_A6_OUT    2FFE
AND_EA_DN_A7_OUT    3010
AND_EA_DN_ABS_ADD_LONG  2E00
AND_EA_DN_ABS_ADD_LONG_OUT  3354
AND_EA_DN_ABS_ADD_WORD  2DEA
AND_EA_DN_ABS_ADD_WORD_OUT  3340
AND_EA_DN_ADD_REG_INDIR  2DC0
AND_EA_DN_ADD_REG_INDIR_PDEC  2DCE
AND_EA_DN_ADD_REG_INDIR_PINC  2DDC
AND_EA_DN_AN_INDIR_PDEC_R0_OUT  32B0
AND_EA_DN_AN_INDIR_PDEC_R1  324E
AND_EA_DN_AN_INDIR_PDEC_R1_OUT  32C2
AND_EA_DN_AN_INDIR_PDEC_R2  325C
AND_EA_DN_AN_INDIR_PDEC_R2_OUT  32D4
AND_EA_DN_AN_INDIR_PDEC_R3  326A
AND_EA_DN_AN_INDIR_PDEC_R3_OUT  32E6
AND_EA_DN_AN_INDIR_PDEC_R4  3278
AND_EA_DN_AN_INDIR_PDEC_R4_OUT  32F8
AND_EA_DN_AN_INDIR_PDEC_R5  3286
AND_EA_DN_AN_INDIR_PDEC_R5_OUT  330A
AND_EA_DN_AN_INDIR_PDEC_R6  3294
AND_EA_DN_AN_INDIR_PDEC_R6_OUT  331C
AND_EA_DN_AN_INDIR_PDEC_R7  32A2
AND_EA_DN_AN_INDIR_PDEC_R7_OUT  332E
AND_EA_DN_AN_INDIR_PINC_R0_OUT  31A6
AND_EA_DN_AN_INDIR_PINC_R1  3144
AND_EA_DN_AN_INDIR_PINC_R1_OUT  31B8
AND_EA_DN_AN_INDIR_PINC_R2  3152
AND_EA_DN_AN_INDIR_PINC_R2_OUT  31CA
AND_EA_DN_AN_INDIR_PINC_R3  3160
AND_EA_DN_AN_INDIR_PINC_R3_OUT  31DC
AND_EA_DN_AN_INDIR_PINC_R4  316E
AND_EA_DN_AN_INDIR_PINC_R4_OUT  31EE
AND_EA_DN_AN_INDIR_PINC_R5  317C
AND_EA_DN_AN_INDIR_PINC_R5_OUT  3200
AND_EA_DN_AN_INDIR_PINC_R6  318A
AND_EA_DN_AN_INDIR_PINC_R6_OUT  3212
AND_EA_DN_AN_INDIR_PINC_R7  3198
AND_EA_DN_AN_INDIR_PINC_R7_OUT  3224
AND_EA_DN_AN_INDIR_PINC_REG  312C
AND_EA_DN_AN_INDIR_PREDEC  3236
AND_EA_DN_AN_INDIR_REG  3022
AND_EA_DN_AN_INDIR_REG0_OUT  309C
AND_EA_DN_AN_INDIR_REG1  303A
AND_EA_DN_AN_INDIR_REG1_OUT  30AE
AND_EA_DN_AN_INDIR_REG2  3048
AND_EA_DN_AN_INDIR_REG2_OUT  30C0
AND_EA_DN_AN_INDIR_REG3  3056
AND_EA_DN_AN_INDIR_REG3_OUT  30D2
AND_EA_DN_AN_INDIR_REG4  3064
AND_EA_DN_AN_INDIR_REG4_OUT  30E4
AND_EA_DN_AN_INDIR_REG5  3072
AND_EA_DN_AN_INDIR_REG5_OUT  30F6
AND_EA_DN_AN_INDIR_REG6  3080
AND_EA_DN_AN_INDIR_REG6_OUT  3108
AND_EA_DN_AN_INDIR_REG7  308E
AND_EA_DN_AN_INDIR_REG7_OUT  311A
AND_EA_DN_AN_REG    2F18
AND_EA_DN_D0_OUT    2E88
AND_EA_DN_D1_OUT    2E9A
AND_EA_DN_D2_OUT    2EAC
AND_EA_DN_D3_OUT    2EBE
AND_EA_DN_D4_OUT    2ED0
AND_EA_DN_D5_OUT    2EE2
AND_EA_DN_D6_OUT    2EF4
AND_EA_DN_D7_OUT    2F06
AND_EA_DN_DN_REG    2E0E
AND_EA_DN_IMMEDIATE_ADD_OUT  336A
AND_EA_DN_IMM_ADD_L  3390
AND_EA_DN_IMM_ADD_W  337C
AND_EA_DN_MATCH     2D8C
AND_EA_DN_MATCH_L   2DA8
AND_EA_DN_MATCH_W   2D9A
AND_EA_DN_RA1       2F30
AND_EA_DN_RA2       2F3E
AND_EA_DN_RA3       2F4C
AND_EA_DN_RA4       2F5A
AND_EA_DN_RA5       2F68
AND_EA_DN_RA6       2F76
AND_EA_DN_RA7       2F84
AND_EA_DN_RD1       2E26
AND_EA_DN_RD2       2E34
AND_EA_DN_RD3       2E42
AND_EA_DN_RD4       2E50
AND_EA_DN_RD5       2E5E
AND_EA_DN_RD6       2E6C
AND_EA_DN_RD7       2E7A
AND_END             1FB6
AND_FAIL            1FB0
AND_L               1F8A
AND_SIZE            1F34
AND_SUB             2D5C
AND_W               1F64
ASD_ABS_ADD_LONG    444C
ASD_ABS_ADD_LONG_OUT  468C
ASD_ABS_ADD_WORD    4432
ASD_ABS_ADD_WORD_OUT  4682
ASD_AN_INDIR        4408
ASD_AN_INDIR_PDEC_R0_OUT  4642
ASD_AN_INDIR_PDEC_R1  45E0
ASD_AN_INDIR_PDEC_R1_OUT  464A
ASD_AN_INDIR_PDEC_R2  45EE
ASD_AN_INDIR_PDEC_R2_OUT  4652
ASD_AN_INDIR_PDEC_R3  45FC
ASD_AN_INDIR_PDEC_R3_OUT  465A
ASD_AN_INDIR_PDEC_R4  460A
ASD_AN_INDIR_PDEC_R4_OUT  4662
ASD_AN_INDIR_PDEC_R5  4618
ASD_AN_INDIR_PDEC_R5_OUT  466A
ASD_AN_INDIR_PDEC_R6  4626
ASD_AN_INDIR_PDEC_R6_OUT  4672
ASD_AN_INDIR_PDEC_R7  4634
ASD_AN_INDIR_PDEC_R7_OUT  467A
ASD_AN_INDIR_PINC_R0_OUT  458E
ASD_AN_INDIR_PINC_R1  452C
ASD_AN_INDIR_PINC_R1_OUT  4596
ASD_AN_INDIR_PINC_R2  453A
ASD_AN_INDIR_PINC_R2_OUT  459E
ASD_AN_INDIR_PINC_R3  4548
ASD_AN_INDIR_PINC_R3_OUT  45A6
ASD_AN_INDIR_PINC_R4  4556
ASD_AN_INDIR_PINC_R4_OUT  45AE
ASD_AN_INDIR_PINC_R5  4564
ASD_AN_INDIR_PINC_R5_OUT  45B6
ASD_AN_INDIR_PINC_R6  4572
ASD_AN_INDIR_PINC_R6_OUT  45BE
ASD_AN_INDIR_PINC_R7  4580
ASD_AN_INDIR_PINC_R7_OUT  45C6
ASD_AN_INDIR_POSTINC  4416
ASD_AN_INDIR_POSTINC_REG  4514
ASD_AN_INDIR_PREDEC  4424
ASD_AN_INDIR_PREDEC_REG  45CE
ASD_AN_INDIR_REG    445A
ASD_AN_INDIR_REG0_OUT  44D4
ASD_AN_INDIR_REG1   4472
ASD_AN_INDIR_REG1_OUT  44DC
ASD_AN_INDIR_REG2   4480
ASD_AN_INDIR_REG2_OUT  44E4
ASD_AN_INDIR_REG3   448E
ASD_AN_INDIR_REG3_OUT  44EC
ASD_AN_INDIR_REG4   449C
ASD_AN_INDIR_REG4_OUT  44F4
ASD_AN_INDIR_REG5   44AA
ASD_AN_INDIR_REG5_OUT  44FC
ASD_AN_INDIR_REG6   44B8
ASD_AN_INDIR_REG6_OUT  4504
ASD_AN_INDIR_REG7   44C6
ASD_AN_INDIR_REG7_OUT  450C
ASD_COUNT_REG0      46BA
ASD_COUNT_REG0_OUT  4824
ASD_COUNT_REG1      46C8
ASD_COUNT_REG1_OUT  4834
ASD_COUNT_REG2      46D6
ASD_COUNT_REG2_OUT  4844
ASD_COUNT_REG3      46E4
ASD_COUNT_REG3_OUT  4854
ASD_COUNT_REG4      46F2
ASD_COUNT_REG4_OUT  4864
ASD_COUNT_REG5      4700
ASD_COUNT_REG5_OUT  4874
ASD_COUNT_REG6      470E
ASD_COUNT_REG6_OUT  4884
ASD_COUNT_REG7      471C
ASD_COUNT_REG7_OUT  4894
ASD_COUNT_VAL       472A
ASD_COUNT_VAL0_OUT  47A4
ASD_COUNT_VAL1      4742
ASD_COUNT_VAL1_OUT  47B4
ASD_COUNT_VAL2      4750
ASD_COUNT_VAL2_OUT  47C4
ASD_COUNT_VAL3      475E
ASD_COUNT_VAL3_OUT  47D4
ASD_COUNT_VAL4      476C
ASD_COUNT_VAL4_OUT  47E4
ASD_COUNT_VAL5      477A
ASD_COUNT_VAL5_OUT  47F4
ASD_COUNT_VAL6      4788
ASD_COUNT_VAL6_OUT  4804
ASD_COUNT_VAL7      4796
ASD_COUNT_VAL7_OUT  4814
ASD_D0_OUT          491E
ASD_D1_OUT          4926
ASD_D2_OUT          492E
ASD_D3_OUT          4936
ASD_D4_OUT          493E
ASD_D5_OUT          4946
ASD_D6_OUT          494E
ASD_D7_OUT          4956
ASD_DN0             48A4
ASD_DN1             48BC
ASD_DN2             48CA
ASD_DN3             48D8
ASD_DN4             48E6
ASD_DN5             48F4
ASD_DN6             4902
ASD_DN7             4910
ASD_MEM_SHIFT       43FE
ASD_REG_SHIFT       4698
ASD_SHIFT_REG       46B0
ASD_SUB             43EA
ASLM_END            1C08
ASLR_END            1BDE
ASLR_FAIL           1BD8
ASLR_L              1BB2
ASLR_W              1B8C
ASL_M_SIZE          1BE4
ASL_R_SIZE          1B5C
ASRM_END            1CBA
ASRR_END            1C90
ASRR_FAIL           1C8A
ASRR_L              1C64
ASRR_W              1C3E
ASR_M_SIZE          1C96
ASR_R_SIZE          1C0E
BAD_BOUND           8330
BAD_END             82D2
BAD_RANGE           8296
BCC_ADDRESS         19D6
BCC_ADD_END         19F2
BCC_B               17F0
BCC_END             17F8
BCC_L               17C8
BCC_NEGATIVE        19EA
BCC_SIZE            17BE
BCC_W               17DC
BEQ_B               18C6
BEQ_END             18E4
BEQ_L               187E
BEQ_SIZE            1874
BEQ_W               18A2
BGT_B               1850
BGT_END             186E
BGT_L               1808
BGT_SIZE            17FE
BGT_W               182C
BLE_B               193C
BLE_END             195A
BLE_L               18F4
BLE_SIZE            18EA
BLE_W               1918
BOUNDARY1           10C8
BOUNDARY2           1144
BRA_B               19B2
BRA_END             19D0
BRA_L               196A
BRA_SIZE            1960
BRA_W               198E
BYTE_SIZE           1
COMMA               83DC
CONT                1098
CONT2               1114
CR                  D
DATA                2144
DISP_DONE           13AE
DISP_LOOP           139A
DN_EA_ABS_ADD_LONG  35B8
DN_EA_ABS_ADD_LONG_OUT  37FE
DN_EA_ABS_ADD_WORD  359E
DN_EA_ABS_ADD_WORD_OUT  37F4
DN_EA_ADD_REG0      2998
DN_EA_ADD_REG0_OUT  2A08
DN_EA_ADD_REG1      29A6
DN_EA_ADD_REG1_OUT  2A1A
DN_EA_ADD_REG2      29B4
DN_EA_ADD_REG2_OUT  2A2C
DN_EA_ADD_REG3      29C2
DN_EA_ADD_REG3_OUT  2A3E
DN_EA_ADD_REG4      29D0
DN_EA_ADD_REG4_OUT  2A50
DN_EA_ADD_REG5      29DE
DN_EA_ADD_REG5_OUT  2A62
DN_EA_ADD_REG6      29EC
DN_EA_ADD_REG6_OUT  2A74
DN_EA_ADD_REG7      29FA
DN_EA_ADD_REG7_OUT  2A86
DN_EA_ADD_REG_INDIR  3574
DN_EA_ADD_REG_INDIR_POSTINC  3590
DN_EA_ADD_REG_INDIR_PREDEC  3582
DN_EA_AND_REG0      346A
DN_EA_AND_REG0_OUT  34DA
DN_EA_AND_REG1      3478
DN_EA_AND_REG1_OUT  34EC
DN_EA_AND_REG2      3486
DN_EA_AND_REG2_OUT  34FE
DN_EA_AND_REG3      3494
DN_EA_AND_REG3_OUT  3510
DN_EA_AND_REG4      34A2
DN_EA_AND_REG4_OUT  3522
DN_EA_AND_REG5      34B0
DN_EA_AND_REG5_OUT  3534
DN_EA_AND_REG6      34BE
DN_EA_AND_REG6_OUT  3546
DN_EA_AND_REG7      34CC
DN_EA_AND_REG7_OUT  3558
DN_EA_AN_INDIR_POSTINC_REG  3680
DN_EA_AN_INDIR_POSTINC_REG0_OUT  36FA
DN_EA_AN_INDIR_POSTINC_REG1  3698
DN_EA_AN_INDIR_POSTINC_REG1_OUT  3702
DN_EA_AN_INDIR_POSTINC_REG2  36A6
DN_EA_AN_INDIR_POSTINC_REG2_OUT  370A
DN_EA_AN_INDIR_POSTINC_REG3  36B4
DN_EA_AN_INDIR_POSTINC_REG3_OUT  3712
DN_EA_AN_INDIR_POSTINC_REG4  36C2
DN_EA_AN_INDIR_POSTINC_REG4_OUT  371A
DN_EA_AN_INDIR_POSTINC_REG5  36D0
DN_EA_AN_INDIR_POSTINC_REG5_OUT  3722
DN_EA_AN_INDIR_POSTINC_REG6  36DE
DN_EA_AN_INDIR_POSTINC_REG6_OUT  372A
DN_EA_AN_INDIR_POSTINC_REG7  36EC
DN_EA_AN_INDIR_POSTINC_REG7_OUT  3732
DN_EA_AN_INDIR_PREDEC  373A
DN_EA_AN_INDIR_PREDEC_REG0_OUT  37B4
DN_EA_AN_INDIR_PREDEC_REG1  3752
DN_EA_AN_INDIR_PREDEC_REG1_OUT  37BC
DN_EA_AN_INDIR_PREDEC_REG2  3760
DN_EA_AN_INDIR_PREDEC_REG2_OUT  37C4
DN_EA_AN_INDIR_PREDEC_REG3  376E
DN_EA_AN_INDIR_PREDEC_REG3_OUT  37CC
DN_EA_AN_INDIR_PREDEC_REG4  377C
DN_EA_AN_INDIR_PREDEC_REG4_OUT  37D4
DN_EA_AN_INDIR_PREDEC_REG5  378A
DN_EA_AN_INDIR_PREDEC_REG5_OUT  37DC
DN_EA_AN_INDIR_PREDEC_REG6  3798
DN_EA_AN_INDIR_PREDEC_REG6_OUT  37E4
DN_EA_AN_INDIR_PREDEC_REG7  37A6
DN_EA_AN_INDIR_PREDEC_REG7_OUT  37EC
DN_EA_AN_INDIR_REG  35C6
DN_EA_AN_INDIR_REG0_OUT  3640
DN_EA_AN_INDIR_REG1  35DE
DN_EA_AN_INDIR_REG1_OUT  3648
DN_EA_AN_INDIR_REG2  35EC
DN_EA_AN_INDIR_REG2_OUT  3650
DN_EA_AN_INDIR_REG3  35FA
DN_EA_AN_INDIR_REG3_OUT  3658
DN_EA_AN_INDIR_REG4  3608
DN_EA_AN_INDIR_REG4_OUT  3660
DN_EA_AN_INDIR_REG5  3616
DN_EA_AN_INDIR_REG5_OUT  3668
DN_EA_AN_INDIR_REG6  3624
DN_EA_AN_INDIR_REG6_OUT  3670
DN_EA_AN_INDIR_REG7  3632
DN_EA_AN_INDIR_REG7_OUT  3678
DN_EA_OR_REG0       7632
DN_EA_OR_REG0_OUT   76A2
DN_EA_OR_REG1       7640
DN_EA_OR_REG1_OUT   76B4
DN_EA_OR_REG2       764E
DN_EA_OR_REG2_OUT   76C6
DN_EA_OR_REG3       765C
DN_EA_OR_REG3_OUT   76D8
DN_EA_OR_REG4       766A
DN_EA_OR_REG4_OUT   76EA
DN_EA_OR_REG5       7678
DN_EA_OR_REG5_OUT   76FC
DN_EA_OR_REG6       7686
DN_EA_OR_REG6_OUT   770E
DN_EA_OR_REG7       7694
DN_EA_OR_REG7_OUT   7720
DN_EA_SUB_REG0      5B8A
DN_EA_SUB_REG0_OUT  5BFA
DN_EA_SUB_REG1      5B98
DN_EA_SUB_REG1_OUT  5C06
DN_EA_SUB_REG2      5BA6
DN_EA_SUB_REG2_OUT  5C12
DN_EA_SUB_REG3      5BB4
DN_EA_SUB_REG3_OUT  5C1E
DN_EA_SUB_REG4      5BC2
DN_EA_SUB_REG4_OUT  5C2A
DN_EA_SUB_REG5      5BD0
DN_EA_SUB_REG5_OUT  5C36
DN_EA_SUB_REG6      5BDE
DN_EA_SUB_REG6_OUT  5C42
DN_EA_SUB_REG7      5BEC
DN_EA_SUB_REG7_OUT  5C4E
EA_$                84C4
EA_A0               840A
EA_A1               840D
EA_A2               8410
EA_A3               8413
EA_A4               8416
EA_A5               8419
EA_A6               841C
EA_A7               841F
EA_ABS_LONG_STRING  84C1
EA_ABS_WORD_STRING  84BE
EA_D0               83F2
EA_D1               83F5
EA_D2               83F8
EA_D3               83FB
EA_D4               83FE
EA_D5               8401
EA_D6               8404
EA_D7               8407
EA_DATA0            84C8
EA_DATA1            84CB
EA_DATA2            84CE
EA_DATA3            84D1
EA_DATA4            84D4
EA_DATA5            84D7
EA_DATA6            84DA
EA_DATA7            84DD
EA_DN_ADD_REG0      28DE
EA_DN_ADD_REG0_OUT  294E
EA_DN_ADD_REG1      28EC
EA_DN_ADD_REG1_OUT  2956
EA_DN_ADD_REG2      28FA
EA_DN_ADD_REG2_OUT  295E
EA_DN_ADD_REG3      2908
EA_DN_ADD_REG3_OUT  2966
EA_DN_ADD_REG4      2916
EA_DN_ADD_REG4_OUT  296E
EA_DN_ADD_REG5      2924
EA_DN_ADD_REG5_OUT  2976
EA_DN_ADD_REG6      2932
EA_DN_ADD_REG6_OUT  297E
EA_DN_ADD_REG7      2940
EA_DN_ADD_REG7_OUT  2986
EA_DN_AND_REG0      33B0
EA_DN_AND_REG0_OUT  3420
EA_DN_AND_REG1      33BE
EA_DN_AND_REG1_OUT  3428
EA_DN_AND_REG2      33CC
EA_DN_AND_REG2_OUT  3430
EA_DN_AND_REG3      33DA
EA_DN_AND_REG3_OUT  3438
EA_DN_AND_REG4      33E8
EA_DN_AND_REG4_OUT  3440
EA_DN_AND_REG5      33F6
EA_DN_AND_REG5_OUT  3448
EA_DN_AND_REG6      3404
EA_DN_AND_REG6_OUT  3450
EA_DN_AND_REG7      3412
EA_DN_AND_REG7_OUT  3458
EA_DN_OR_REG0       7578
EA_DN_OR_REG0_OUT   75E8
EA_DN_OR_REG1       7586
EA_DN_OR_REG1_OUT   75F0
EA_DN_OR_REG2       7594
EA_DN_OR_REG2_OUT   75F8
EA_DN_OR_REG3       75A2
EA_DN_OR_REG3_OUT   7600
EA_DN_OR_REG4       75B0
EA_DN_OR_REG4_OUT   7608
EA_DN_OR_REG5       75BE
EA_DN_OR_REG5_OUT   7610
EA_DN_OR_REG6       75CC
EA_DN_OR_REG6_OUT   7618
EA_DN_OR_REG7       75DA
EA_DN_OR_REG7_OUT   7620
EA_DN_SUB_REG0      5AD0
EA_DN_SUB_REG0_OUT  5B40
EA_DN_SUB_REG1      5ADE
EA_DN_SUB_REG1_OUT  5B48
EA_DN_SUB_REG2      5AEC
EA_DN_SUB_REG2_OUT  5B50
EA_DN_SUB_REG3      5AFA
EA_DN_SUB_REG3_OUT  5B58
EA_DN_SUB_REG4      5B08
EA_DN_SUB_REG4_OUT  5B60
EA_DN_SUB_REG5      5B16
EA_DN_SUB_REG5_OUT  5B68
EA_DN_SUB_REG6      5B24
EA_DN_SUB_REG6_OUT  5B70
EA_DN_SUB_REG7      5B32
EA_DN_SUB_REG7_OUT  5B78
EA_INDIR_A0         8432
EA_INDIR_A1         8437
EA_INDIR_A2         843C
EA_INDIR_A3         8441
EA_INDIR_A4         8446
EA_INDIR_A5         844B
EA_INDIR_A6         8450
EA_INDIR_A7         8455
EA_INDIR_POSTINC_A0  845A
EA_INDIR_POSTINC_A1  8460
EA_INDIR_POSTINC_A2  8466
EA_INDIR_POSTINC_A3  846C
EA_INDIR_POSTINC_A4  8472
EA_INDIR_POSTINC_A5  8478
EA_INDIR_POSTINC_A6  847E
EA_INDIR_POSTINC_A7  8484
EA_INDIR_PREDEC_A0  848A
EA_INDIR_PREDEC_A1  8490
EA_INDIR_PREDEC_A2  8496
EA_INDIR_PREDEC_A3  849C
EA_INDIR_PREDEC_A4  84A2
EA_INDIR_PREDEC_A5  84A8
EA_INDIR_PREDEC_A6  84AE
EA_INDIR_PREDEC_A7  84B4
EA_LB               84C6
EA_PAREN_CLOSED     84BC
EA_PAREN_OPEN       84BA
EA_VAL0             8422
EA_VAL1             8424
EA_VAL2             8426
EA_VAL3             8428
EA_VAL4             842A
EA_VAL5             842C
EA_VAL6             842E
EA_VAL7             8430
END_ADR             73BA
END_AN              2350
END_AQ              2334
END_BAD             1172
END_DATA            2382
END_G1              21CC
END_G2              2212
END_G3              2250
END_G4              22DE
END_MOVEQ           236C
END_MV              2166
END_OP              214A
END_OR              235E
END_REQUEST         8215
END_SB              2342
ENTR_LP             11A8
ERR                 1030
ERROR               6F1E
ERROR_MESSAGE       83DE
EXIT_LOOP           1216
GROUP1_DECODE       2178
GROUP2_DECODE       21FC
GROUP3_DECODE       2226
GROUP4_DECODE       226E
HEX_CLEAR           0
HT                  9
INPUT1              106E
INPUT1PASS          10C6
INPUT2              10EA
INPUT2PASS          1142
INPUT_LOOP          1082
INPUT_LOOP2         10FE
IO_SUBROUTINE       1052
IPT_DONE            109C
IPT_DONE2           1118
JSR_ABS_ADD_LONG    498C
JSR_ABS_ADD_LONG_OUT  4A5E
JSR_ABS_ADD_WORD    4972
JSR_ABS_ADD_WORD_OUT  4A54
JSR_ADD_REG_INDIR   4964
JSR_AN_INDIR_REG    499A
JSR_AN_INDIR_REG0_OUT  4A14
JSR_AN_INDIR_REG1   49B2
JSR_AN_INDIR_REG1_OUT  4A1C
JSR_AN_INDIR_REG2   49C0
JSR_AN_INDIR_REG2_OUT  4A24
JSR_AN_INDIR_REG3   49CE
JSR_AN_INDIR_REG3_OUT  4A2C
JSR_AN_INDIR_REG4   49DC
JSR_AN_INDIR_REG4_OUT  4A34
JSR_AN_INDIR_REG5   49EA
JSR_AN_INDIR_REG5_OUT  4A3C
JSR_AN_INDIR_REG6   49F8
JSR_AN_INDIR_REG6_OUT  4A44
JSR_AN_INDIR_REG7   4A06
JSR_AN_INDIR_REG7_OUT  4A4C
JSR_SIZE            1628
JSR_SUB             495E
LEA_ABS_ADD_LONG    4A98
LEA_ABS_ADD_LONG_OUT  4B9E
LEA_ABS_ADD_WORD    4A7E
LEA_ABS_ADD_WORD_OUT  4B90
LEA_ADD_REG_INDIR   4A70
LEA_AN_INDIR_REG    4AA6
LEA_AN_INDIR_REG0_OUT  4B20
LEA_AN_INDIR_REG1   4ABE
LEA_AN_INDIR_REG1_OUT  4B2E
LEA_AN_INDIR_REG2   4ACC
LEA_AN_INDIR_REG2_OUT  4B3C
LEA_AN_INDIR_REG3   4ADA
LEA_AN_INDIR_REG3_OUT  4B4A
LEA_AN_INDIR_REG4   4AE8
LEA_AN_INDIR_REG4_OUT  4B58
LEA_AN_INDIR_REG5   4AF6
LEA_AN_INDIR_REG5_OUT  4B66
LEA_AN_INDIR_REG6   4B04
LEA_AN_INDIR_REG6_OUT  4B74
LEA_AN_INDIR_REG7   4B12
LEA_AN_INDIR_REG7_OUT  4B82
LEA_DETERMINE_SECOND_OP  4BAE
LEA_REG0            4BB8
LEA_REG0_OUT        4C28
LEA_REG1            4BC6
LEA_REG1_OUT        4C30
LEA_REG2            4BD4
LEA_REG2_OUT        4C38
LEA_REG3            4BE2
LEA_REG3_OUT        4C40
LEA_REG4            4BF0
LEA_REG4_OUT        4C48
LEA_REG5            4BFE
LEA_REG5_OUT        4C50
LEA_REG6            4C0C
LEA_REG6_OUT        4C58
LEA_REG7            4C1A
LEA_REG7_OUT        4C60
LEA_SIZE            1604
LEA_SUB             4A6A
LETTER              103C
LF                  A
LINE_DONE           13D8
LINE_LOOP           13C4
LOAD2_MESSAGE       815C
LOAD_MESSAGE        80E4
LONG_SIZE           3
LOOPM               1190
LOOPM_CONT          11D0
LOOPM_DONE          11DE
LSD_ABS_ADD_LONG    5F8E
LSD_ABS_ADD_LONG_OUT  6234
LSD_ABS_ADD_WORD    5F74
LSD_ABS_ADD_WORD_OUT  6226
LSD_AN_INDIR        5F4A
LSD_AN_INDIR_PDEC_R0_OUT  61C6
LSD_AN_INDIR_PDEC_R1  6164
LSD_AN_INDIR_PDEC_R1_OUT  61D2
LSD_AN_INDIR_PDEC_R2  6172
LSD_AN_INDIR_PDEC_R2_OUT  61DE
LSD_AN_INDIR_PDEC_R3  6180
LSD_AN_INDIR_PDEC_R3_OUT  61EA
LSD_AN_INDIR_PDEC_R4  618E
LSD_AN_INDIR_PDEC_R4_OUT  61F6
LSD_AN_INDIR_PDEC_R5  619C
LSD_AN_INDIR_PDEC_R5_OUT  6202
LSD_AN_INDIR_PDEC_R6  61AA
LSD_AN_INDIR_PDEC_R6_OUT  620E
LSD_AN_INDIR_PDEC_R7  61B8
LSD_AN_INDIR_PDEC_R7_OUT  621A
LSD_AN_INDIR_PINC_R0_OUT  60EC
LSD_AN_INDIR_PINC_R1  608E
LSD_AN_INDIR_PINC_R1_OUT  60F8
LSD_AN_INDIR_PINC_R2  609C
LSD_AN_INDIR_PINC_R2_OUT  6104
LSD_AN_INDIR_PINC_R3  60AA
LSD_AN_INDIR_PINC_R3_OUT  6110
LSD_AN_INDIR_PINC_R4  60B8
LSD_AN_INDIR_PINC_R4_OUT  611C
LSD_AN_INDIR_PINC_R5  60C6
LSD_AN_INDIR_PINC_R5_OUT  6128
LSD_AN_INDIR_PINC_R6  60D4
LSD_AN_INDIR_PINC_R6_OUT  6134
LSD_AN_INDIR_PINC_R7  60DE
LSD_AN_INDIR_PINC_R7_OUT  6140
LSD_AN_INDIR_POSTINC  5F58
LSD_AN_INDIR_POSTINC_REG  6076
LSD_AN_INDIR_PREDEC  5F66
LSD_AN_INDIR_PREDEC_REG  614C
LSD_AN_INDIR_REG    5F9C
LSD_AN_INDIR_REG0_OUT  6016
LSD_AN_INDIR_REG1   5FB4
LSD_AN_INDIR_REG1_OUT  6022
LSD_AN_INDIR_REG2   5FC2
LSD_AN_INDIR_REG2_OUT  602E
LSD_AN_INDIR_REG3   5FD0
LSD_AN_INDIR_REG3_OUT  603A
LSD_AN_INDIR_REG4   5FDE
LSD_AN_INDIR_REG4_OUT  6046
LSD_AN_INDIR_REG5   5FEC
LSD_AN_INDIR_REG5_OUT  6052
LSD_AN_INDIR_REG6   5FFA
LSD_AN_INDIR_REG6_OUT  605E
LSD_AN_INDIR_REG7   6008
LSD_AN_INDIR_REG7_OUT  606A
LSD_COUNT_REG0      6266
LSD_COUNT_REG0_OUT  63D0
LSD_COUNT_REG1      6274
LSD_COUNT_REG1_OUT  63E0
LSD_COUNT_REG2      6282
LSD_COUNT_REG2_OUT  63F0
LSD_COUNT_REG3      6290
LSD_COUNT_REG3_OUT  6400
LSD_COUNT_REG4      629E
LSD_COUNT_REG4_OUT  6410
LSD_COUNT_REG5      62AC
LSD_COUNT_REG5_OUT  6420
LSD_COUNT_REG6      62BA
LSD_COUNT_REG6_OUT  6430
LSD_COUNT_REG7      62C8
LSD_COUNT_REG7_OUT  6440
LSD_COUNT_VAL       62D6
LSD_COUNT_VAL0_OUT  6350
LSD_COUNT_VAL1      62EE
LSD_COUNT_VAL1_OUT  6360
LSD_COUNT_VAL2      62FC
LSD_COUNT_VAL2_OUT  6370
LSD_COUNT_VAL3      630A
LSD_COUNT_VAL3_OUT  6380
LSD_COUNT_VAL4      6318
LSD_COUNT_VAL4_OUT  6390
LSD_COUNT_VAL5      6326
LSD_COUNT_VAL5_OUT  63A0
LSD_COUNT_VAL6      6334
LSD_COUNT_VAL6_OUT  63B0
LSD_COUNT_VAL7      6342
LSD_COUNT_VAL7_OUT  63C0
LSD_D0_OUT          64CA
LSD_D1_OUT          64D2
LSD_D2_OUT          64DA
LSD_D3_OUT          64E2
LSD_D4_OUT          64EA
LSD_D5_OUT          64F2
LSD_D6_OUT          64FA
LSD_D7_OUT          6502
LSD_DN0             6450
LSD_DN1             6468
LSD_DN2             6476
LSD_DN3             6484
LSD_DN4             6492
LSD_DN5             64A0
LSD_DN6             64AE
LSD_DN7             64BC
LSD_MEM_SHIFT       5F40
LSD_REG_SHIFT       6244
LSD_SHIFT_REG       625C
LSD_SHIFT_TYPE      5F28
LSD_SUB             5F28
LSLM_END            1AA4
LSLR_END            1A7A
LSLR_FAIL           1A74
LSLR_L              1A4E
LSLR_W              1A28
LSL_M_SIZE          1A80
LSL_R_SIZE          19F8
LSRM_END            1B56
LSRR_END            1B2C
LSRR_FAIL           1B26
LSRR_L              1B00
LSRR_W              1ADA
LSR_M_SIZE          1B32
LSR_R_SIZE          1AAA
MAIN                1000
MAIN_LOOP           1182
MASK_ADDA           F0C0
MASK_ADDA_ABS_ADD   3F
MASK_ADDA_AN_REG    E00
MASK_ADDA_EA        FFF
MASK_ADDA_EA_MODE   38
MASK_ADDA_EA_REG    7
MASK_ADDA_EA_REG_AND_MODE  3F
MASK_ADDA_OPMODE    1C0
MASK_ADDA_REG       E00
MASK_ADDQ_ABS_ADD   3F
MASK_ADDQ_DATA      E00
MASK_ADDQ_EA        EFF
MASK_ADDQ_EA_MODE   38
MASK_ADDQ_EA_REG    7
MASK_ADDQ_EA_REG_AND_MODE  3F
MASK_ADDQ_REG       E00
MASK_ADDQ_SIZE      C0
MASK_ADD_ABS_ADD    3F
MASK_ADD_AN_REG     E00
MASK_ADD_EA         FFF
MASK_ADD_EA_MODE    38
MASK_ADD_EA_REG     7
MASK_ADD_EA_REG_AND_MODE  3F
MASK_ADD_OPMODE     1C0
MASK_ADD_REG        E00
MASK_AND_ABS_ADD    3F
MASK_AND_AN_REG     E00
MASK_AND_EA         FFF
MASK_AND_EA_MODE    38
MASK_AND_EA_REG     7
MASK_AND_EA_REG_AND_MODE  3F
MASK_AND_OPMODE     1C0
MASK_AND_REG        E00
MASK_ASD_COUNT_SHIFT  E00
MASK_ASD_DATA_REG   7
MASK_ASD_EA_MODE    38
MASK_ASD_EA_MODE_ABS_ADD  3F
MASK_ASD_EA_REG_AND_MODE  3F
MASK_ASD_REG_SHIFT  20
MASK_ASD_REG_SHIFT_IR  20
MASK_ASD_SHIFT_TYPE  C0
MASK_ASL_MEM_SHIFT_DIRECT  100
MASK_ASL_MEM_SHIFT_EA  13F
MASK_ASL_MEM_SHIFT_EA_MODE  38
MASK_ASL_MEM_SHIFT_EA_REG  7
MASK_ASL_REG_SHIFT_COUNT  E00
MASK_ASL_REG_SHIFT_DIRECT  100
MASK_ASL_REG_SHIFT_EA  FE7
MASK_ASL_REG_SHIFT_IR  20
MASK_ASL_REG_SHIFT_REG  7
MASK_ASL_REG_SHIFT_SIZE  C0
MASK_ASR_MEM_SHIFT_DIRECT  100
MASK_ASR_MEM_SHIFT_EA  13F
MASK_ASR_MEM_SHIFT_EA_MODE  38
MASK_ASR_MEM_SHIFT_EA_REG  7
MASK_ASR_REG_SHIFT_COUNT  E00
MASK_ASR_REG_SHIFT_DIRECT  100
MASK_ASR_REG_SHIFT_EA  FE7
MASK_ASR_REG_SHIFT_IR  20
MASK_ASR_REG_SHIFT_REG  7
MASK_ASR_REG_SHIFT_SIZE  C0
MASK_BCC            FF00
MASK_BCC_COND       E00
MASK_BCC_DISPLACE   FF
MASK_BCC_EA         FFF
MASK_BCC_SIZE       FF
MASK_BGT_DISPLACE   FF
MASK_BGT_EA         F00
MASK_BLE_DISPLACE   FF
MASK_BLE_EA         F00
MASK_BRA_EA         FF
MASK_JSR            FFC0
MASK_JSR_ABS_ADD    3F
MASK_JSR_AN_REG     E00
MASK_JSR_EA         3F
MASK_JSR_EA_MODE    38
MASK_JSR_EA_REG     7
MASK_JSR_EA_REG_AND_MODE  3F
MASK_LEA            F1C0
MASK_LEA_ABS_ADD    3F
MASK_LEA_AN_REG     E00
MASK_LEA_EA         E3F
MASK_LEA_EA_MODE    38
MASK_LEA_EA_REG     7
MASK_LEA_EA_REG_AND_MODE  3F
MASK_LEA_REG        E00
MASK_LSD_COUNT_SHIFT  E00
MASK_LSD_DATA_REG   7
MASK_LSD_EA_MODE    38
MASK_LSD_EA_MODE_ABS_ADD  3F
MASK_LSD_EA_REG_AND_MODE  3F
MASK_LSD_REG_SHIFT  20
MASK_LSD_REG_SHIFT_IR  20
MASK_LSD_SHIFT_TYPE  C0
MASK_LSL_MEM_SHIFT_DIRECT  100
MASK_LSL_MEM_SHIFT_EA  13F
MASK_LSL_MEM_SHIFT_EA_MODE  38
MASK_LSL_MEM_SHIFT_EA_REG  7
MASK_LSL_REG_SHIFT_COUNT  E00
MASK_LSL_REG_SHIFT_DIRECT  100
MASK_LSL_REG_SHIFT_EA  FE7
MASK_LSL_REG_SHIFT_IR  20
MASK_LSL_REG_SHIFT_REG  7
MASK_LSL_REG_SHIFT_SIZE  C0
MASK_LSR_MEM_SHIFT_DIRECT  100
MASK_LSR_MEM_SHIFT_EA  13F
MASK_LSR_MEM_SHIFT_EA_MODE  38
MASK_LSR_MEM_SHIFT_EA_REG  7
MASK_LSR_REG_SHIFT_COUNT  E00
MASK_LSR_REG_SHIFT_DIRECT  100
MASK_LSR_REG_SHIFT_EA  FE7
MASK_LSR_REG_SHIFT_IR  20
MASK_LSR_REG_SHIFT_REG  7
MASK_LSR_REG_SHIFT_SIZE  C0
MASK_MOVE           C000
MASK_MOVEA_ABS_ADD  3F
MASK_MOVEA_AN_REG   E00
MASK_MOVEA_DST_REG  E00
MASK_MOVEA_EA       E3F
MASK_MOVEA_EA_MODE  38
MASK_MOVEA_EA_REG_AND_MODE  3F
MASK_MOVEA_SRC_MODE  38
MASK_MOVEA_SRC_REG  7
MASK_MOVEM          FF80
MASK_MOVEM_DIRECT   400
MASK_MOVEM_EA       47F
MASK_MOVEM_EA_REG   7
MASK_MOVEM_SIZE     40
MASK_MOVEQ_DATA     FF
MASK_MOVEQ_EA       EFF
MASK_MOVEQ_FIRST_OPERAND  FF
MASK_MOVEQ_REG      E00
MASK_MOVEQ_SECOND_OP_DN  E00
MASK_MOVE_A         1C0
MASK_MOVE_DEST_ABS_ADD  1C0
MASK_MOVE_DEST_EA_MODE  1C0
MASK_MOVE_DEST_EA_REG_AND_MODE  FC0
MASK_MOVE_DST_MODE  1C0
MASK_MOVE_DST_REG   E00
MASK_MOVE_EA        FFF
MASK_MOVE_SRC_ABS_ADD  3F
MASK_MOVE_SRC_EA_MODE  38
MASK_MOVE_SRC_EA_REG_AND_MODE  3F
MASK_MOVE_SRC_MODE  7
MASK_MOVE_SRC_REG   38
MASK_NOT            FF00
MASK_NOT_EA         FF
MASK_NOT_EA_MODE    38
MASK_NOT_EA_MODE_ABS_ADD  3F
MASK_NOT_EA_REG     7
MASK_NOT_EA_REG_AND_MODE  3F
MASK_NOT_SIZE       C0
MASK_OPCODE         F000
MASK_OPMODE         1C0
MASK_OR_ABS_ADD     3F
MASK_OR_AN_REG      E00
MASK_OR_EA          FFF
MASK_OR_EA_MODE     38
MASK_OR_EA_REG      7
MASK_OR_EA_REG_OR_MODE  3F
MASK_OR_OPMODE      1C0
MASK_OR_REG         E00
MASK_ROD_COUNT_SHIFT  E00
MASK_ROD_DATA_REG   7
MASK_ROD_EA_MODE    38
MASK_ROD_EA_MODE_ABS_ADD  3F
MASK_ROD_EA_REG_AND_MODE  3F
MASK_ROD_REG_SHIFT  20
MASK_ROD_REG_SHIFT_IR  20
MASK_ROD_SHIFT_TYPE  C0
MASK_ROL_MEM_ROT_DIRECT  100
MASK_ROL_MEM_ROT_EA  13F
MASK_ROL_MEM_ROT_EA_MODE  38
MASK_ROL_MEM_ROT_EA_REG  7
MASK_ROL_REG_ROT_COUNT  E00
MASK_ROL_REG_ROT_DIRECT  100
MASK_ROL_REG_ROT_EA  FE7
MASK_ROL_REG_ROT_IR  20
MASK_ROL_REG_ROT_REG  7
MASK_ROL_REG_ROT_SIZE  C00
MASK_ROR_MEM_ROT_DIRECT  100
MASK_ROR_MEM_ROT_EA  13F
MASK_ROR_MEM_ROT_EA_MODE  38
MASK_ROR_MEM_ROT_EA_REG  7
MASK_ROR_REG_ROT_COUNT  E00
MASK_ROR_REG_ROT_DIRECT  100
MASK_ROR_REG_ROT_EA  FE7
MASK_ROR_REG_ROT_IR  20
MASK_ROR_REG_ROT_REG  7
MASK_ROR_REG_ROT_SIZE  C0
MASK_SHFT_M         FFC0
MASK_SHFT_R         F118
MASK_SIZE_ADD       C0
MASK_SIZE_ADDA      100
MASK_SIZE_LOGIC     C0
MASK_SIZE_MOVEM     40
MASK_SIZE_MOVEQ     F100
MASK_SIZE_MOVES     3000
MASK_SIZE_NOT       C0
MASK_SIZE_SHIFTS    C0
MASK_SIZE_SUB       C0
MASK_SUB_ABS_ADD    3F
MASK_SUB_AN_REG     E00
MASK_SUB_EA         FFF
MASK_SUB_EA_MODE    38
MASK_SUB_EA_REG     7
MASK_SUB_EA_REG_AND_MODE  3F
MASK_SUB_OPMODE     1C0
MASK_SUB_REG        E00
MATCH_ADDA          D0C0
MATCH_ADDA_A0       8
MATCH_ADDA_A1       9
MATCH_ADDA_A2       A
MATCH_ADDA_A3       B
MATCH_ADDA_A4       C
MATCH_ADDA_A5       D
MATCH_ADDA_A6       E
MATCH_ADDA_A7       F
MATCH_ADDA_ABS_ADD_LONG  39
MATCH_ADDA_ABS_ADD_WORD  38
MATCH_ADDA_AN       8
MATCH_ADDA_AN_INDIR  10
MATCH_ADDA_AN_INDIR_POSTINC  18
MATCH_ADDA_AN_INDIR_POSTINC_REG0  18
MATCH_ADDA_AN_INDIR_POSTINC_REG1  19
MATCH_ADDA_AN_INDIR_POSTINC_REG2  1A
MATCH_ADDA_AN_INDIR_POSTINC_REG3  1B
MATCH_ADDA_AN_INDIR_POSTINC_REG4  1C
MATCH_ADDA_AN_INDIR_POSTINC_REG5  1D
MATCH_ADDA_AN_INDIR_POSTINC_REG6  1E
MATCH_ADDA_AN_INDIR_POSTINC_REG7  1F
MATCH_ADDA_AN_INDIR_PREDEC  20
MATCH_ADDA_AN_INDIR_PREDEC_REG0  20
MATCH_ADDA_AN_INDIR_PREDEC_REG1  21
MATCH_ADDA_AN_INDIR_PREDEC_REG2  22
MATCH_ADDA_AN_INDIR_PREDEC_REG3  23
MATCH_ADDA_AN_INDIR_PREDEC_REG4  24
MATCH_ADDA_AN_INDIR_PREDEC_REG5  25
MATCH_ADDA_AN_INDIR_PREDEC_REG6  26
MATCH_ADDA_AN_INDIR_PREDEC_REG7  27
MATCH_ADDA_AN_INDIR_R0  10
MATCH_ADDA_AN_INDIR_R1  11
MATCH_ADDA_AN_INDIR_R2  12
MATCH_ADDA_AN_INDIR_R3  13
MATCH_ADDA_AN_INDIR_R4  14
MATCH_ADDA_AN_INDIR_R5  15
MATCH_ADDA_AN_INDIR_R6  16
MATCH_ADDA_AN_INDIR_R7  17
MATCH_ADDA_D0       0
MATCH_ADDA_D1       1
MATCH_ADDA_D2       2
MATCH_ADDA_D3       3
MATCH_ADDA_D4       4
MATCH_ADDA_D5       5
MATCH_ADDA_D6       6
MATCH_ADDA_D7       7
MATCH_ADDA_DN       0
MATCH_ADDA_IMM_ADD  3C
MATCH_ADDA_IMM_ADD_LONG  1FC
MATCH_ADDA_IMM_ADD_WORD  FC
MATCH_ADDA_REG0     0
MATCH_ADDA_REG1     200
MATCH_ADDA_REG2     400
MATCH_ADDA_REG3     600
MATCH_ADDA_REG4     800
MATCH_ADDA_REG5     A00
MATCH_ADDA_REG6     C00
MATCH_ADDA_REG7     E00
MATCH_ADDQ          5000
MATCH_ADDQ_A0       8
MATCH_ADDQ_A1       9
MATCH_ADDQ_A2       A
MATCH_ADDQ_A3       B
MATCH_ADDQ_A4       C
MATCH_ADDQ_A5       D
MATCH_ADDQ_A6       E
MATCH_ADDQ_A7       F
MATCH_ADDQ_ABS_ADD_LONG  39
MATCH_ADDQ_ABS_ADD_WORD  38
MATCH_ADDQ_AN       8
MATCH_ADDQ_AN_INDIR  10
MATCH_ADDQ_AN_INDIR_POSTINC  18
MATCH_ADDQ_AN_INDIR_POSTINC_REG0  18
MATCH_ADDQ_AN_INDIR_POSTINC_REG1  19
MATCH_ADDQ_AN_INDIR_POSTINC_REG2  1A
MATCH_ADDQ_AN_INDIR_POSTINC_REG3  1B
MATCH_ADDQ_AN_INDIR_POSTINC_REG4  1C
MATCH_ADDQ_AN_INDIR_POSTINC_REG5  1D
MATCH_ADDQ_AN_INDIR_POSTINC_REG6  1E
MATCH_ADDQ_AN_INDIR_POSTINC_REG7  1F
MATCH_ADDQ_AN_INDIR_PREDEC  20
MATCH_ADDQ_AN_INDIR_PREDEC_REG0  20
MATCH_ADDQ_AN_INDIR_PREDEC_REG1  21
MATCH_ADDQ_AN_INDIR_PREDEC_REG2  22
MATCH_ADDQ_AN_INDIR_PREDEC_REG3  23
MATCH_ADDQ_AN_INDIR_PREDEC_REG4  24
MATCH_ADDQ_AN_INDIR_PREDEC_REG5  25
MATCH_ADDQ_AN_INDIR_PREDEC_REG6  26
MATCH_ADDQ_AN_INDIR_PREDEC_REG7  27
MATCH_ADDQ_AN_INDIR_R0  10
MATCH_ADDQ_AN_INDIR_R1  11
MATCH_ADDQ_AN_INDIR_R2  12
MATCH_ADDQ_AN_INDIR_R3  13
MATCH_ADDQ_AN_INDIR_R4  14
MATCH_ADDQ_AN_INDIR_R5  15
MATCH_ADDQ_AN_INDIR_R6  16
MATCH_ADDQ_AN_INDIR_R7  17
MATCH_ADDQ_D0       0
MATCH_ADDQ_D1       1
MATCH_ADDQ_D2       2
MATCH_ADDQ_D3       3
MATCH_ADDQ_D4       4
MATCH_ADDQ_D5       5
MATCH_ADDQ_D6       6
MATCH_ADDQ_D7       7
MATCH_ADDQ_DN       0
MATCH_ADDQ_REG0     0
MATCH_ADDQ_REG1     200
MATCH_ADDQ_REG2     400
MATCH_ADDQ_REG3     600
MATCH_ADDQ_REG4     800
MATCH_ADDQ_REG5     A00
MATCH_ADDQ_REG6     C00
MATCH_ADDQ_REG7     E00
MATCH_ADD_A0        8
MATCH_ADD_A1        9
MATCH_ADD_A2        A
MATCH_ADD_A3        B
MATCH_ADD_A4        C
MATCH_ADD_A5        D
MATCH_ADD_A6        E
MATCH_ADD_A7        F
MATCH_ADD_ABS_ADD_LONG  39
MATCH_ADD_ABS_ADD_WORD  38
MATCH_ADD_AN        8
MATCH_ADD_AN_INDIR  10
MATCH_ADD_AN_INDIR_POSTINC  18
MATCH_ADD_AN_INDIR_POSTINC_R0  18
MATCH_ADD_AN_INDIR_POSTINC_R1  19
MATCH_ADD_AN_INDIR_POSTINC_R2  1A
MATCH_ADD_AN_INDIR_POSTINC_R3  1B
MATCH_ADD_AN_INDIR_POSTINC_R4  1C
MATCH_ADD_AN_INDIR_POSTINC_R5  1D
MATCH_ADD_AN_INDIR_POSTINC_R6  1E
MATCH_ADD_AN_INDIR_POSTINC_R7  1F
MATCH_ADD_AN_INDIR_PREDEC  20
MATCH_ADD_AN_INDIR_PREDEC_REG0  20
MATCH_ADD_AN_INDIR_PREDEC_REG1  21
MATCH_ADD_AN_INDIR_PREDEC_REG2  22
MATCH_ADD_AN_INDIR_PREDEC_REG3  23
MATCH_ADD_AN_INDIR_PREDEC_REG4  24
MATCH_ADD_AN_INDIR_PREDEC_REG5  25
MATCH_ADD_AN_INDIR_PREDEC_REG6  26
MATCH_ADD_AN_INDIR_PREDEC_REG7  27
MATCH_ADD_AN_INDIR_R0  10
MATCH_ADD_AN_INDIR_R1  11
MATCH_ADD_AN_INDIR_R2  12
MATCH_ADD_AN_INDIR_R3  13
MATCH_ADD_AN_INDIR_R4  14
MATCH_ADD_AN_INDIR_R5  15
MATCH_ADD_AN_INDIR_R6  16
MATCH_ADD_AN_INDIR_R7  17
MATCH_ADD_B_DN_EA   0
MATCH_ADD_B_EA_DN   100
MATCH_ADD_D0        0
MATCH_ADD_D1        1
MATCH_ADD_D2        2
MATCH_ADD_D3        3
MATCH_ADD_D4        4
MATCH_ADD_D5        5
MATCH_ADD_D6        6
MATCH_ADD_D7        7
MATCH_ADD_DN        0
MATCH_ADD_L_DN_EA   80
MATCH_ADD_L_EA_DN   180
MATCH_ADD_REG0      0
MATCH_ADD_REG1      200
MATCH_ADD_REG2      400
MATCH_ADD_REG3      600
MATCH_ADD_REG4      800
MATCH_ADD_REG5      A00
MATCH_ADD_REG6      C00
MATCH_ADD_REG7      E00
MATCH_ADD_W_DN_EA   40
MATCH_ADD_W_EA_DN   140
MATCH_AND           C000
MATCH_AND_A0        8
MATCH_AND_A1        9
MATCH_AND_A2        A
MATCH_AND_A3        B
MATCH_AND_A4        C
MATCH_AND_A5        D
MATCH_AND_A6        E
MATCH_AND_A7        F
MATCH_AND_ABS_ADD_LONG  39
MATCH_AND_ABS_ADD_WORD  38
MATCH_AND_AN_INDIR  10
MATCH_AND_AN_INDIR_POSTINC  18
MATCH_AND_AN_INDIR_POSTINC_R0  18
MATCH_AND_AN_INDIR_POSTINC_R1  19
MATCH_AND_AN_INDIR_POSTINC_R2  1A
MATCH_AND_AN_INDIR_POSTINC_R3  1B
MATCH_AND_AN_INDIR_POSTINC_R4  1C
MATCH_AND_AN_INDIR_POSTINC_R5  1D
MATCH_AND_AN_INDIR_POSTINC_R6  1E
MATCH_AND_AN_INDIR_POSTINC_R7  1F
MATCH_AND_AN_INDIR_PREDEC  20
MATCH_AND_AN_INDIR_PREDEC_REG0  20
MATCH_AND_AN_INDIR_PREDEC_REG1  21
MATCH_AND_AN_INDIR_PREDEC_REG2  22
MATCH_AND_AN_INDIR_PREDEC_REG3  23
MATCH_AND_AN_INDIR_PREDEC_REG4  24
MATCH_AND_AN_INDIR_PREDEC_REG5  25
MATCH_AND_AN_INDIR_PREDEC_REG6  26
MATCH_AND_AN_INDIR_PREDEC_REG7  27
MATCH_AND_AN_INDIR_R0  10
MATCH_AND_AN_INDIR_R1  11
MATCH_AND_AN_INDIR_R2  12
MATCH_AND_AN_INDIR_R3  13
MATCH_AND_AN_INDIR_R4  14
MATCH_AND_AN_INDIR_R5  15
MATCH_AND_AN_INDIR_R6  16
MATCH_AND_AN_INDIR_R7  17
MATCH_AND_B_DN_EA   0
MATCH_AND_B_EA_DN   100
MATCH_AND_D0        0
MATCH_AND_D1        1
MATCH_AND_D2        2
MATCH_AND_D3        3
MATCH_AND_D4        4
MATCH_AND_D5        5
MATCH_AND_D6        6
MATCH_AND_D7        7
MATCH_AND_DN        0
MATCH_AND_IMM_ADD   3C
MATCH_AND_IMM_ADD_LONG  1FC
MATCH_AND_IMM_ADD_WORD  FC
MATCH_AND_L_DN_EA   80
MATCH_AND_L_EA_DN   180
MATCH_AND_REG0      0
MATCH_AND_REG1      200
MATCH_AND_REG2      400
MATCH_AND_REG3      600
MATCH_AND_REG4      800
MATCH_AND_REG5      A00
MATCH_AND_REG6      C00
MATCH_AND_REG7      E00
MATCH_AND_W_DN_EA   40
MATCH_AND_W_EA_DN   140
MATCH_ASD_ABS_ADD_LONG  3C
MATCH_ASD_ABS_ADD_WORD  39
MATCH_ASD_AN_INDIR  10
MATCH_ASD_AN_INDIR_POSTINC  20
MATCH_ASD_AN_INDIR_POSTINC_R0  20
MATCH_ASD_AN_INDIR_POSTINC_R1  21
MATCH_ASD_AN_INDIR_POSTINC_R2  22
MATCH_ASD_AN_INDIR_POSTINC_R3  23
MATCH_ASD_AN_INDIR_POSTINC_R4  24
MATCH_ASD_AN_INDIR_POSTINC_R5  25
MATCH_ASD_AN_INDIR_POSTINC_R6  26
MATCH_ASD_AN_INDIR_POSTINC_R7  27
MATCH_ASD_AN_INDIR_PREDEC  18
MATCH_ASD_AN_INDIR_PREDEC_R0  18
MATCH_ASD_AN_INDIR_PREDEC_R1  19
MATCH_ASD_AN_INDIR_PREDEC_R2  1A
MATCH_ASD_AN_INDIR_PREDEC_R3  1B
MATCH_ASD_AN_INDIR_PREDEC_R4  1C
MATCH_ASD_AN_INDIR_PREDEC_R5  1D
MATCH_ASD_AN_INDIR_PREDEC_R6  1E
MATCH_ASD_AN_INDIR_PREDEC_R7  1F
MATCH_ASD_AN_INDIR_R0  10
MATCH_ASD_AN_INDIR_R1  11
MATCH_ASD_AN_INDIR_R2  12
MATCH_ASD_AN_INDIR_R3  13
MATCH_ASD_AN_INDIR_R4  14
MATCH_ASD_AN_INDIR_R5  15
MATCH_ASD_AN_INDIR_R6  16
MATCH_ASD_AN_INDIR_R7  17
MATCH_ASD_COUNT_REG0  0
MATCH_ASD_COUNT_REG1  200
MATCH_ASD_COUNT_REG2  400
MATCH_ASD_COUNT_REG3  600
MATCH_ASD_COUNT_REG4  800
MATCH_ASD_COUNT_REG5  A00
MATCH_ASD_COUNT_REG6  C00
MATCH_ASD_COUNT_REG7  E00
MATCH_ASD_COUNT_VAL0  0
MATCH_ASD_COUNT_VAL1  200
MATCH_ASD_COUNT_VAL2  400
MATCH_ASD_COUNT_VAL3  600
MATCH_ASD_COUNT_VAL4  800
MATCH_ASD_COUNT_VAL5  A00
MATCH_ASD_COUNT_VAL6  C00
MATCH_ASD_COUNT_VAL7  E00
MATCH_ASD_D_REG0    0
MATCH_ASD_D_REG1    1
MATCH_ASD_D_REG2    2
MATCH_ASD_D_REG3    3
MATCH_ASD_D_REG4    4
MATCH_ASD_D_REG5    5
MATCH_ASD_D_REG6    6
MATCH_ASD_D_REG7    7
MATCH_ASD_MEM_SHIFT  C0
MATCH_ASD_SHIFT_COUNT  20
MATCH_ASD_SHIFT_REG  20
MATCH_ASL_M         E1C0
MATCH_ASL_R         E100
MATCH_ASR_M         E0C0
MATCH_ASR_R         E000
MATCH_BEQ           6700
MATCH_BGT           6E00
MATCH_BLE           6F00
MATCH_BRA           6000
MATCH_G0100         4000
MATCH_G0110         6000
MATCH_G1101         D000
MATCH_G1110         E000
MATCH_IMM_ADD       3C
MATCH_IMM_ADD_LONG  1FC
MATCH_IMM_ADD_WORD  FC
MATCH_JSR           4E80
MATCH_JSR_ABS_ADD_LONG  39
MATCH_JSR_ABS_ADD_WORD  38
MATCH_JSR_AN_INDIR  10
MATCH_JSR_AN_INDIR_R0  10
MATCH_JSR_AN_INDIR_R1  11
MATCH_JSR_AN_INDIR_R2  12
MATCH_JSR_AN_INDIR_R3  13
MATCH_JSR_AN_INDIR_R4  14
MATCH_JSR_AN_INDIR_R5  15
MATCH_JSR_AN_INDIR_R6  16
MATCH_JSR_AN_INDIR_R7  17
MATCH_JSR_D0        0
MATCH_JSR_D1        1
MATCH_JSR_D2        2
MATCH_JSR_D3        3
MATCH_JSR_D4        4
MATCH_JSR_D5        5
MATCH_JSR_D6        6
MATCH_JSR_D7        7
MATCH_JSR_DN        0
MATCH_LEA           41C0
MATCH_LEA_ABS_ADD_LONG  39
MATCH_LEA_ABS_ADD_WORD  38
MATCH_LEA_AN_INDIR  10
MATCH_LEA_AN_INDIR_R0  10
MATCH_LEA_AN_INDIR_R1  11
MATCH_LEA_AN_INDIR_R2  12
MATCH_LEA_AN_INDIR_R3  13
MATCH_LEA_AN_INDIR_R4  14
MATCH_LEA_AN_INDIR_R5  15
MATCH_LEA_AN_INDIR_R6  16
MATCH_LEA_AN_INDIR_R7  17
MATCH_LEA_REG0      0
MATCH_LEA_REG1      200
MATCH_LEA_REG2      400
MATCH_LEA_REG3      600
MATCH_LEA_REG4      800
MATCH_LEA_REG5      A00
MATCH_LEA_REG6      C00
MATCH_LEA_REG7      E00
MATCH_LSD_ABS_ADD_LONG  3C
MATCH_LSD_ABS_ADD_WORD  39
MATCH_LSD_AN_INDIR  10
MATCH_LSD_AN_INDIR_POSTINC  20
MATCH_LSD_AN_INDIR_POSTINC_R0  20
MATCH_LSD_AN_INDIR_POSTINC_R1  21
MATCH_LSD_AN_INDIR_POSTINC_R2  22
MATCH_LSD_AN_INDIR_POSTINC_R3  23
MATCH_LSD_AN_INDIR_POSTINC_R4  24
MATCH_LSD_AN_INDIR_POSTINC_R5  25
MATCH_LSD_AN_INDIR_POSTINC_R6  26
MATCH_LSD_AN_INDIR_POSTINC_R7  27
MATCH_LSD_AN_INDIR_PREDEC  18
MATCH_LSD_AN_INDIR_PREDEC_R0  18
MATCH_LSD_AN_INDIR_PREDEC_R1  19
MATCH_LSD_AN_INDIR_PREDEC_R2  1A
MATCH_LSD_AN_INDIR_PREDEC_R3  1B
MATCH_LSD_AN_INDIR_PREDEC_R4  1C
MATCH_LSD_AN_INDIR_PREDEC_R5  1D
MATCH_LSD_AN_INDIR_PREDEC_R6  1E
MATCH_LSD_AN_INDIR_PREDEC_R7  1
MATCH_LSD_AN_INDIR_R0  10
MATCH_LSD_AN_INDIR_R1  11
MATCH_LSD_AN_INDIR_R2  12
MATCH_LSD_AN_INDIR_R3  13
MATCH_LSD_AN_INDIR_R4  14
MATCH_LSD_AN_INDIR_R5  15
MATCH_LSD_AN_INDIR_R6  16
MATCH_LSD_AN_INDIR_R7  17
MATCH_LSD_COUNT_REG0  0
MATCH_LSD_COUNT_REG1  200
MATCH_LSD_COUNT_REG2  400
MATCH_LSD_COUNT_REG3  600
MATCH_LSD_COUNT_REG4  800
MATCH_LSD_COUNT_REG5  A00
MATCH_LSD_COUNT_REG6  C00
MATCH_LSD_COUNT_REG7  E00
MATCH_LSD_COUNT_VAL0  0
MATCH_LSD_COUNT_VAL1  200
MATCH_LSD_COUNT_VAL2  400
MATCH_LSD_COUNT_VAL3  600
MATCH_LSD_COUNT_VAL4  800
MATCH_LSD_COUNT_VAL5  A00
MATCH_LSD_COUNT_VAL6  C00
MATCH_LSD_COUNT_VAL7  E00
MATCH_LSD_D_REG0    0
MATCH_LSD_D_REG1    1
MATCH_LSD_D_REG2    2
MATCH_LSD_D_REG3    3
MATCH_LSD_D_REG4    4
MATCH_LSD_D_REG5    5
MATCH_LSD_D_REG6    6
MATCH_LSD_D_REG7    7
MATCH_LSD_MEM_SHIFT  C0
MATCH_LSD_SHIFT_COUNT  20
MATCH_LSD_SHIFT_REG  20
MATCH_LSL_M         E3C0
MATCH_LSL_R         E108
MATCH_LSR_M         E2C0
MATCH_LSR_R         E008
MATCH_MOVE          0
MATCH_MOVEA         40
MATCH_MOVEA_A0      8
MATCH_MOVEA_A1      9
MATCH_MOVEA_A2      A
MATCH_MOVEA_A3      B
MATCH_MOVEA_A4      C
MATCH_MOVEA_A5      D
MATCH_MOVEA_A6      E
MATCH_MOVEA_A7      F
MATCH_MOVEA_ABS_ADD_LONG  39
MATCH_MOVEA_ABS_ADD_WORD  38
MATCH_MOVEA_AN      8
MATCH_MOVEA_AN_INDIR  10
MATCH_MOVEA_AN_INDIR_POSTINC  18
MATCH_MOVEA_AN_INDIR_POSTINC_R0  18
MATCH_MOVEA_AN_INDIR_POSTINC_R1  19
MATCH_MOVEA_AN_INDIR_POSTINC_R2  1A
MATCH_MOVEA_AN_INDIR_POSTINC_R3  1B
MATCH_MOVEA_AN_INDIR_POSTINC_R4  1C
MATCH_MOVEA_AN_INDIR_POSTINC_R5  1D
MATCH_MOVEA_AN_INDIR_POSTINC_R6  1E
MATCH_MOVEA_AN_INDIR_POSTINC_R7  1F
MATCH_MOVEA_AN_INDIR_PREDEC  20
MATCH_MOVEA_AN_INDIR_PREDEC_REG0  20
MATCH_MOVEA_AN_INDIR_PREDEC_REG1  21
MATCH_MOVEA_AN_INDIR_PREDEC_REG2  22
MATCH_MOVEA_AN_INDIR_PREDEC_REG3  23
MATCH_MOVEA_AN_INDIR_PREDEC_REG4  24
MATCH_MOVEA_AN_INDIR_PREDEC_REG5  25
MATCH_MOVEA_AN_INDIR_PREDEC_REG6  26
MATCH_MOVEA_AN_INDIR_PREDEC_REG7  27
MATCH_MOVEA_AN_INDIR_R0  10
MATCH_MOVEA_AN_INDIR_R1  11
MATCH_MOVEA_AN_INDIR_R2  12
MATCH_MOVEA_AN_INDIR_R3  13
MATCH_MOVEA_AN_INDIR_R4  14
MATCH_MOVEA_AN_INDIR_R5  15
MATCH_MOVEA_AN_INDIR_R6  16
MATCH_MOVEA_AN_INDIR_R7  17
MATCH_MOVEA_D0      0
MATCH_MOVEA_D1      1
MATCH_MOVEA_D2      2
MATCH_MOVEA_D3      3
MATCH_MOVEA_D4      4
MATCH_MOVEA_D5      5
MATCH_MOVEA_D6      6
MATCH_MOVEA_D7      7
MATCH_MOVEA_DN      0
MATCH_MOVEA_IMM_ADD  3C
MATCH_MOVEA_IMM_ADD_LONG  1FC
MATCH_MOVEA_IMM_ADD_WORD  FC
MATCH_MOVEA_REG0    0
MATCH_MOVEA_REG1    200
MATCH_MOVEA_REG2    400
MATCH_MOVEA_REG3    600
MATCH_MOVEA_REG4    800
MATCH_MOVEA_REG5    A00
MATCH_MOVEA_REG6    C00
MATCH_MOVEA_REG7    E00
MATCH_MOVEB         1000
MATCH_MOVEL         2000
MATCH_MOVEM_MR      4C80
MATCH_MOVEM_RM      4880
MATCH_MOVEQ         7000
MATCH_MOVEQ_D0      0
MATCH_MOVEQ_D1      200
MATCH_MOVEQ_D2      400
MATCH_MOVEQ_D3      600
MATCH_MOVEQ_D4      800
MATCH_MOVEQ_D5      A00
MATCH_MOVEQ_D6      C00
MATCH_MOVEQ_D7      E00
MATCH_MOVEW         3000
MATCH_MOVE_DEST_A0  40
MATCH_MOVE_DEST_A1  240
MATCH_MOVE_DEST_A2  440
MATCH_MOVE_DEST_A3  640
MATCH_MOVE_DEST_A4  840
MATCH_MOVE_DEST_A5  A40
MATCH_MOVE_DEST_A6  C40
MATCH_MOVE_DEST_A7  E40
MATCH_MOVE_DEST_ABS_ADD_LONG  9C0
MATCH_MOVE_DEST_ABS_ADD_WORD  1C0
MATCH_MOVE_DEST_AN  40
MATCH_MOVE_DEST_AN_INDIR  80
MATCH_MOVE_DEST_AN_INDIR_PDEC_R0  100
MATCH_MOVE_DEST_AN_INDIR_PDEC_R1  300
MATCH_MOVE_DEST_AN_INDIR_PDEC_R2  500
MATCH_MOVE_DEST_AN_INDIR_PDEC_R3  700
MATCH_MOVE_DEST_AN_INDIR_PDEC_R4  900
MATCH_MOVE_DEST_AN_INDIR_PDEC_R5  B00
MATCH_MOVE_DEST_AN_INDIR_PDEC_R6  D00
MATCH_MOVE_DEST_AN_INDIR_PDEC_R7  F00
MATCH_MOVE_DEST_AN_INDIR_PINC_R0  C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R1  2C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R2  4C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R3  6C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R4  8C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R5  AC0
MATCH_MOVE_DEST_AN_INDIR_PINC_R6  CC0
MATCH_MOVE_DEST_AN_INDIR_PINC_R7  EC0
MATCH_MOVE_DEST_AN_INDIR_POSTINC  C0
MATCH_MOVE_DEST_AN_INDIR_PREDEC  100
MATCH_MOVE_DEST_AN_INDIR_R0  80
MATCH_MOVE_DEST_AN_INDIR_R1  280
MATCH_MOVE_DEST_AN_INDIR_R2  480
MATCH_MOVE_DEST_AN_INDIR_R3  680
MATCH_MOVE_DEST_AN_INDIR_R4  880
MATCH_MOVE_DEST_AN_INDIR_R5  A80
MATCH_MOVE_DEST_AN_INDIR_R6  C80
MATCH_MOVE_DEST_AN_INDIR_R7  E80
MATCH_MOVE_DEST_D0  0
MATCH_MOVE_DEST_D1  200
MATCH_MOVE_DEST_D2  400
MATCH_MOVE_DEST_D3  600
MATCH_MOVE_DEST_D4  800
MATCH_MOVE_DEST_D5  A00
MATCH_MOVE_DEST_D6  C00
MATCH_MOVE_DEST_D7  E00
MATCH_MOVE_DEST_DN  0
MATCH_MOVE_DEST_IMM_ADD  1C0
MATCH_MOVE_DEST_IMM_ADD_LONG  9C0
MATCH_MOVE_DEST_IMM_ADD_WORD  1C0
MATCH_MOVE_SRC_A0   8
MATCH_MOVE_SRC_A1   9
MATCH_MOVE_SRC_A2   A
MATCH_MOVE_SRC_A3   B
MATCH_MOVE_SRC_A4   C
MATCH_MOVE_SRC_A5   D
MATCH_MOVE_SRC_A6   E
MATCH_MOVE_SRC_A7   F
MATCH_MOVE_SRC_ABS_ADD_LONG  39
MATCH_MOVE_SRC_ABS_ADD_WORD  38
MATCH_MOVE_SRC_AN   8
MATCH_MOVE_SRC_AN_INDIR  10
MATCH_MOVE_SRC_AN_INDIR_PINC_R0  18
MATCH_MOVE_SRC_AN_INDIR_PINC_R1  19
MATCH_MOVE_SRC_AN_INDIR_PINC_R2  1A
MATCH_MOVE_SRC_AN_INDIR_PINC_R3  1B
MATCH_MOVE_SRC_AN_INDIR_PINC_R4  1C
MATCH_MOVE_SRC_AN_INDIR_PINC_R5  1D
MATCH_MOVE_SRC_AN_INDIR_PINC_R6  1E
MATCH_MOVE_SRC_AN_INDIR_PINC_R7  1F
MATCH_MOVE_SRC_AN_INDIR_POSTINC  18
MATCH_MOVE_SRC_AN_INDIR_PREDEC  20
MATCH_MOVE_SRC_AN_INDIR_PREDE_R0  20
MATCH_MOVE_SRC_AN_INDIR_PREDE_R1  21
MATCH_MOVE_SRC_AN_INDIR_PREDE_R2  22
MATCH_MOVE_SRC_AN_INDIR_PREDE_R3  23
MATCH_MOVE_SRC_AN_INDIR_PREDE_R4  24
MATCH_MOVE_SRC_AN_INDIR_PREDE_R5  25
MATCH_MOVE_SRC_AN_INDIR_PREDE_R6  26
MATCH_MOVE_SRC_AN_INDIR_PREDE_R7  27
MATCH_MOVE_SRC_AN_INDIR_R0  10
MATCH_MOVE_SRC_AN_INDIR_R1  11
MATCH_MOVE_SRC_AN_INDIR_R2  12
MATCH_MOVE_SRC_AN_INDIR_R3  13
MATCH_MOVE_SRC_AN_INDIR_R4  14
MATCH_MOVE_SRC_AN_INDIR_R5  15
MATCH_MOVE_SRC_AN_INDIR_R6  16
MATCH_MOVE_SRC_AN_INDIR_R7  17
MATCH_MOVE_SRC_D0   0
MATCH_MOVE_SRC_D1   1
MATCH_MOVE_SRC_D2   2
MATCH_MOVE_SRC_D3   3
MATCH_MOVE_SRC_D4   4
MATCH_MOVE_SRC_D5   5
MATCH_MOVE_SRC_D6   6
MATCH_MOVE_SRC_D7   7
MATCH_MOVE_SRC_DN   0
MATCH_MOVE_SRC_IMM_ADD  3C
MATCH_MOVE_SRC_IMM_ADD_LONG  1FC
MATCH_MOVE_SRC_IMM_ADD_WORD  FC
MATCH_NOP           4E71
MATCH_NOT           4600
MATCH_NOT_ABS_ADD_LONG  3C
MATCH_NOT_ABS_ADD_WORD  39
MATCH_NOT_AN_INDIR  10
MATCH_NOT_AN_INDIR_POSTINC  20
MATCH_NOT_AN_INDIR_POSTINC_R0  20
MATCH_NOT_AN_INDIR_POSTINC_R1  21
MATCH_NOT_AN_INDIR_POSTINC_R2  22
MATCH_NOT_AN_INDIR_POSTINC_R3  23
MATCH_NOT_AN_INDIR_POSTINC_R4  24
MATCH_NOT_AN_INDIR_POSTINC_R5  25
MATCH_NOT_AN_INDIR_POSTINC_R6  26
MATCH_NOT_AN_INDIR_POSTINC_R7  27
MATCH_NOT_AN_INDIR_PREDEC  18
MATCH_NOT_AN_INDIR_PREDEC_R0  18
MATCH_NOT_AN_INDIR_PREDEC_R1  19
MATCH_NOT_AN_INDIR_PREDEC_R2  1A
MATCH_NOT_AN_INDIR_PREDEC_R3  1B
MATCH_NOT_AN_INDIR_PREDEC_R4  1C
MATCH_NOT_AN_INDIR_PREDEC_R5  1D
MATCH_NOT_AN_INDIR_PREDEC_R6  1E
MATCH_NOT_AN_INDIR_PREDEC_R7  1F
MATCH_NOT_AN_INDIR_R0  10
MATCH_NOT_AN_INDIR_R1  11
MATCH_NOT_AN_INDIR_R2  12
MATCH_NOT_AN_INDIR_R3  13
MATCH_NOT_AN_INDIR_R4  14
MATCH_NOT_AN_INDIR_R5  15
MATCH_NOT_AN_INDIR_R6  16
MATCH_NOT_AN_INDIR_R7  17
MATCH_NOT_D0        0
MATCH_NOT_D1        1
MATCH_NOT_D2        2
MATCH_NOT_D3        3
MATCH_NOT_D4        4
MATCH_NOT_D5        5
MATCH_NOT_D6        6
MATCH_NOT_D7        7
MATCH_NOT_DN        0
MATCH_OR            8000
MATCH_OR_A0         8
MATCH_OR_A1         9
MATCH_OR_A2         A
MATCH_OR_A3         B
MATCH_OR_A4         C
MATCH_OR_A5         D
MATCH_OR_A6         E
MATCH_OR_A7         F
MATCH_OR_ABS_ADD_LONG  39
MATCH_OR_ABS_ADD_WORD  38
MATCH_OR_AN_INDIR   10
MATCH_OR_AN_INDIR_POSTINC  18
MATCH_OR_AN_INDIR_POSTINC_R0  18
MATCH_OR_AN_INDIR_POSTINC_R1  19
MATCH_OR_AN_INDIR_POSTINC_R2  1A
MATCH_OR_AN_INDIR_POSTINC_R3  1B
MATCH_OR_AN_INDIR_POSTINC_R4  1C
MATCH_OR_AN_INDIR_POSTINC_R5  1D
MATCH_OR_AN_INDIR_POSTINC_R6  1E
MATCH_OR_AN_INDIR_POSTINC_R7  1F
MATCH_OR_AN_INDIR_PREDEC  20
MATCH_OR_AN_INDIR_PREDEC_REG0  20
MATCH_OR_AN_INDIR_PREDEC_REG1  21
MATCH_OR_AN_INDIR_PREDEC_REG2  22
MATCH_OR_AN_INDIR_PREDEC_REG3  23
MATCH_OR_AN_INDIR_PREDEC_REG4  24
MATCH_OR_AN_INDIR_PREDEC_REG5  25
MATCH_OR_AN_INDIR_PREDEC_REG6  26
MATCH_OR_AN_INDIR_PREDEC_REG7  27
MATCH_OR_AN_INDIR_R0  10
MATCH_OR_AN_INDIR_R1  11
MATCH_OR_AN_INDIR_R2  12
MATCH_OR_AN_INDIR_R3  13
MATCH_OR_AN_INDIR_R4  14
MATCH_OR_AN_INDIR_R5  15
MATCH_OR_AN_INDIR_R6  16
MATCH_OR_AN_INDIR_R7  17
MATCH_OR_B_DN_EA    0
MATCH_OR_B_EA_DN    100
MATCH_OR_D0         0
MATCH_OR_D1         1
MATCH_OR_D2         2
MATCH_OR_D3         3
MATCH_OR_D4         4
MATCH_OR_D5         5
MATCH_OR_D6         6
MATCH_OR_D7         7
MATCH_OR_DN         0
MATCH_OR_IMM_ADD    3C
MATCH_OR_IMM_ADD_LONG  1FC
MATCH_OR_IMM_ADD_WORD  FC
MATCH_OR_L_DN_EA    80
MATCH_OR_L_EA_DN    180
MATCH_OR_REG0       0
MATCH_OR_REG1       200
MATCH_OR_REG2       400
MATCH_OR_REG3       600
MATCH_OR_REG4       800
MATCH_OR_REG5       A00
MATCH_OR_REG6       C00
MATCH_OR_REG7       E00
MATCH_OR_W_DN_EA    40
MATCH_OR_W_EA_DN    140
MATCH_ROD_ABS_ADD_LONG  3C
MATCH_ROD_ABS_ADD_WORD  39
MATCH_ROD_AN_INDIR  10
MATCH_ROD_AN_INDIR_POSTINC  20
MATCH_ROD_AN_INDIR_POSTINC_R0  20
MATCH_ROD_AN_INDIR_POSTINC_R1  21
MATCH_ROD_AN_INDIR_POSTINC_R2  22
MATCH_ROD_AN_INDIR_POSTINC_R3  23
MATCH_ROD_AN_INDIR_POSTINC_R4  24
MATCH_ROD_AN_INDIR_POSTINC_R5  25
MATCH_ROD_AN_INDIR_POSTINC_R6  26
MATCH_ROD_AN_INDIR_POSTINC_R7  27
MATCH_ROD_AN_INDIR_PREDEC  18
MATCH_ROD_AN_INDIR_PREDEC_R0  18
MATCH_ROD_AN_INDIR_PREDEC_R1  19
MATCH_ROD_AN_INDIR_PREDEC_R2  1A
MATCH_ROD_AN_INDIR_PREDEC_R3  1B
MATCH_ROD_AN_INDIR_PREDEC_R4  1C
MATCH_ROD_AN_INDIR_PREDEC_R5  1D
MATCH_ROD_AN_INDIR_PREDEC_R6  1E
MATCH_ROD_AN_INDIR_PREDEC_R7  1F
MATCH_ROD_AN_INDIR_R0  10
MATCH_ROD_AN_INDIR_R1  11
MATCH_ROD_AN_INDIR_R2  12
MATCH_ROD_AN_INDIR_R3  13
MATCH_ROD_AN_INDIR_R4  14
MATCH_ROD_AN_INDIR_R5  15
MATCH_ROD_AN_INDIR_R6  16
MATCH_ROD_AN_INDIR_R7  17
MATCH_ROD_COUNT_REG0  0
MATCH_ROD_COUNT_REG1  200
MATCH_ROD_COUNT_REG2  400
MATCH_ROD_COUNT_REG3  600
MATCH_ROD_COUNT_REG4  800
MATCH_ROD_COUNT_REG5  A00
MATCH_ROD_COUNT_REG6  C00
MATCH_ROD_COUNT_REG7  E00
MATCH_ROD_COUNT_VAL0  0
MATCH_ROD_COUNT_VAL1  200
MATCH_ROD_COUNT_VAL2  400
MATCH_ROD_COUNT_VAL3  600
MATCH_ROD_COUNT_VAL4  800
MATCH_ROD_COUNT_VAL5  A00
MATCH_ROD_COUNT_VAL6  C00
MATCH_ROD_COUNT_VAL7  E00
MATCH_ROD_D_REG0    0
MATCH_ROD_D_REG1    1
MATCH_ROD_D_REG2    2
MATCH_ROD_D_REG3    3
MATCH_ROD_D_REG4    4
MATCH_ROD_D_REG5    5
MATCH_ROD_D_REG6    6
MATCH_ROD_D_REG7    7
MATCH_ROD_MEM_SHIFT  C0
MATCH_ROD_SHIFT_COUNT  20
MATCH_ROD_SHIFT_REG  20
MATCH_ROL_M         E7C0
MATCH_ROL_R         E118
MATCH_ROR_M         E6C0
MATCH_ROR_R         E018
MATCH_RTS           4E75
MATCH_SUB           9000
MATCH_SUB_A0        8
MATCH_SUB_A1        9
MATCH_SUB_A2        A
MATCH_SUB_A3        B
MATCH_SUB_A4        C
MATCH_SUB_A5        D
MATCH_SUB_A6        E
MATCH_SUB_A7        F
MATCH_SUB_ABS_ADD_LONG  39
MATCH_SUB_ABS_ADD_WORD  38
MATCH_SUB_AN        8
MATCH_SUB_AN_INDIR  10
MATCH_SUB_AN_INDIR_POSTINC  18
MATCH_SUB_AN_INDIR_POSTINC_R0  18
MATCH_SUB_AN_INDIR_POSTINC_R1  19
MATCH_SUB_AN_INDIR_POSTINC_R2  1A
MATCH_SUB_AN_INDIR_POSTINC_R3  1B
MATCH_SUB_AN_INDIR_POSTINC_R4  1C
MATCH_SUB_AN_INDIR_POSTINC_R5  1D
MATCH_SUB_AN_INDIR_POSTINC_R6  1E
MATCH_SUB_AN_INDIR_POSTINC_R7  1F
MATCH_SUB_AN_INDIR_PREDEC  20
MATCH_SUB_AN_INDIR_PREDEC_REG0  20
MATCH_SUB_AN_INDIR_PREDEC_REG1  21
MATCH_SUB_AN_INDIR_PREDEC_REG2  22
MATCH_SUB_AN_INDIR_PREDEC_REG3  23
MATCH_SUB_AN_INDIR_PREDEC_REG4  24
MATCH_SUB_AN_INDIR_PREDEC_REG5  25
MATCH_SUB_AN_INDIR_PREDEC_REG6  26
MATCH_SUB_AN_INDIR_PREDEC_REG7  27
MATCH_SUB_AN_INDIR_R0  10
MATCH_SUB_AN_INDIR_R1  11
MATCH_SUB_AN_INDIR_R2  12
MATCH_SUB_AN_INDIR_R3  13
MATCH_SUB_AN_INDIR_R4  14
MATCH_SUB_AN_INDIR_R5  15
MATCH_SUB_AN_INDIR_R6  16
MATCH_SUB_AN_INDIR_R7  17
MATCH_SUB_B_DN_EA   0
MATCH_SUB_B_EA_DN   100
MATCH_SUB_D0        0
MATCH_SUB_D1        1
MATCH_SUB_D2        2
MATCH_SUB_D3        3
MATCH_SUB_D4        4
MATCH_SUB_D5        5
MATCH_SUB_D6        6
MATCH_SUB_D7        7
MATCH_SUB_DN        0
MATCH_SUB_IMM_ADD   3C
MATCH_SUB_IMM_ADD_LONG  1FC
MATCH_SUB_IMM_ADD_WORD  FC
MATCH_SUB_L_DN_EA   80
MATCH_SUB_L_EA_DN   180
MATCH_SUB_REG0      0
MATCH_SUB_REG1      200
MATCH_SUB_REG2      400
MATCH_SUB_REG3      600
MATCH_SUB_REG4      800
MATCH_SUB_REG5      A00
MATCH_SUB_REG6      C00
MATCH_SUB_REG7      E00
MATCH_SUB_W_DN_EA   40
MATCH_SUB_W_EA_DN   140
MA_END              14AA
MA_FAIL             14A4
MA_L                147E
MA_W                1458
MOVEA_A0_OUT        66DE
MOVEA_A1_OUT        66EC
MOVEA_A2_OUT        66FA
MOVEA_A3_OUT        6708
MOVEA_A4_OUT        6716
MOVEA_A5_OUT        6724
MOVEA_A6_OUT        6732
MOVEA_A7_OUT        6740
MOVEA_ABS_ADD_LONG  6570
MOVEA_ABS_ADD_LONG_OUT  69F8
MOVEA_ABS_ADD_WORD  6558
MOVEA_ABS_ADD_WORD_OUT  69EE
MOVEA_ADD_REG_DIR   6520
MOVEA_ADD_REG_INDIR  652E
MOVEA_ADD_REG_INDIR_POSTINC  654A
MOVEA_ADD_REG_INDIR_PREDEC  653C
MOVEA_AN_INDIR_POSTINC_REG  682E
MOVEA_AN_INDIR_POSTINC_REG0_OUT  689E
MOVEA_AN_INDIR_POSTINC_REG1  683C
MOVEA_AN_INDIR_POSTINC_REG1_OUT  68AC
MOVEA_AN_INDIR_POSTINC_REG2  684A
MOVEA_AN_INDIR_POSTINC_REG2_OUT  68BA
MOVEA_AN_INDIR_POSTINC_REG3  6858
MOVEA_AN_INDIR_POSTINC_REG3_OUT  68C8
MOVEA_AN_INDIR_POSTINC_REG4  6866
MOVEA_AN_INDIR_POSTINC_REG4_OUT  68D6
MOVEA_AN_INDIR_POSTINC_REG5  6874
MOVEA_AN_INDIR_POSTINC_REG5_OUT  68E4
MOVEA_AN_INDIR_POSTINC_REG6  6882
MOVEA_AN_INDIR_POSTINC_REG6_OUT  68F2
MOVEA_AN_INDIR_POSTINC_REG7  6890
MOVEA_AN_INDIR_POSTINC_REG7_OUT  6900
MOVEA_AN_INDIR_PREDEC  690E
MOVEA_AN_INDIR_PREDEC_REG0_OUT  697E
MOVEA_AN_INDIR_PREDEC_REG1  691C
MOVEA_AN_INDIR_PREDEC_REG1_OUT  698C
MOVEA_AN_INDIR_PREDEC_REG2  692A
MOVEA_AN_INDIR_PREDEC_REG2_OUT  699A
MOVEA_AN_INDIR_PREDEC_REG3  6938
MOVEA_AN_INDIR_PREDEC_REG3_OUT  69A8
MOVEA_AN_INDIR_PREDEC_REG4  6946
MOVEA_AN_INDIR_PREDEC_REG4_OUT  69B6
MOVEA_AN_INDIR_PREDEC_REG5  6954
MOVEA_AN_INDIR_PREDEC_REG5_OUT  69C4
MOVEA_AN_INDIR_PREDEC_REG6  6962
MOVEA_AN_INDIR_PREDEC_REG6_OUT  69D2
MOVEA_AN_INDIR_PREDEC_REG7  6970
MOVEA_AN_INDIR_PREDEC_REG7_OUT  69E0
MOVEA_AN_INDIR_REG  674E
MOVEA_AN_INDIR_REG0_OUT  67BE
MOVEA_AN_INDIR_REG1  675C
MOVEA_AN_INDIR_REG1_OUT  67CC
MOVEA_AN_INDIR_REG2  676A
MOVEA_AN_INDIR_REG2_OUT  67DA
MOVEA_AN_INDIR_REG3  6778
MOVEA_AN_INDIR_REG3_OUT  67E8
MOVEA_AN_INDIR_REG4  6786
MOVEA_AN_INDIR_REG4_OUT  67F6
MOVEA_AN_INDIR_REG5  6794
MOVEA_AN_INDIR_REG5_OUT  6804
MOVEA_AN_INDIR_REG6  67A2
MOVEA_AN_INDIR_REG6_OUT  6812
MOVEA_AN_INDIR_REG7  67B0
MOVEA_AN_INDIR_REG7_OUT  6820
MOVEA_AN_REG        666E
MOVEA_D0_OUT        65FE
MOVEA_D1_OUT        660C
MOVEA_D2_OUT        661A
MOVEA_D3_OUT        6628
MOVEA_D4_OUT        6636
MOVEA_D5_OUT        6644
MOVEA_D6_OUT        6652
MOVEA_D7_OUT        6660
MOVEA_DATA_REG_DIR  6512
MOVEA_DETERMINE_SECOND_OP  6A38
MOVEA_DN_REG        6588
MOVEA_IMMEDIATE_ADD  657A
MOVEA_IMMEDIATE_ADD_OUT  6A04
MOVEA_IMM_ADD_L     6A26
MOVEA_IMM_ADD_W     6A16
MOVEA_RA1           667C
MOVEA_RA2           668A
MOVEA_RA3           6698
MOVEA_RA4           66A6
MOVEA_RA5           66B4
MOVEA_RA6           66C2
MOVEA_RA7           66D0
MOVEA_RD1           659C
MOVEA_RD2           65AA
MOVEA_RD3           65B8
MOVEA_RD4           65C6
MOVEA_RD5           65D4
MOVEA_RD6           65E2
MOVEA_RD7           65F0
MOVEA_REG0          6A40
MOVEA_REG0_OUT      6AB0
MOVEA_REG1          6A4E
MOVEA_REG1_OUT      6AB8
MOVEA_REG2          6A5C
MOVEA_REG2_OUT      6AC0
MOVEA_REG3          6A6A
MOVEA_REG3_OUT      6AC8
MOVEA_REG4          6A78
MOVEA_REG4_OUT      6AD0
MOVEA_REG5          6A86
MOVEA_REG5_OUT      6AD8
MOVEA_REG6          6A94
MOVEA_REG6_OUT      6AE0
MOVEA_REG7          6AA2
MOVEA_REG7_OUT      6AE8
MOVEA_SIZE          144E
MOVEA_SUB           650A
MOVEM_MR_END        15CE
MOVEM_MR_FAIL       15C8
MOVEM_MR_L          15AC
MOVEM_MR_SIZE       1586
MOVEM_RM_END        1580
MOVEM_RM_FAIL       157A
MOVEM_RM_L          155E
MOVEM_RM_SIZE       1538
MOVEQ_D0_OUTPUT     6B7C
MOVEQ_D1_OUTPUT     6B84
MOVEQ_D2_OUTPUT     6B8C
MOVEQ_D3_OUTPUT     6B94
MOVEQ_D4_OUTPUT     6B9C
MOVEQ_D5_OUTPUT     6BA4
MOVEQ_D6_OUTPUT     6BAC
MOVEQ_D7_OUTPUT     6BB4
MOVEQ_DN_REG        6B0C
MOVEQ_END           207A
MOVEQ_FAIL          2074
MOVEQ_FIRST_OPERAND  6AF0
MOVEQ_RD1           6B1A
MOVEQ_RD2           6B28
MOVEQ_RD3           6B36
MOVEQ_RD4           6B44
MOVEQ_RD5           6B52
MOVEQ_RD6           6B60
MOVEQ_RD7           6B6E
MOVEQ_SECOND_OPERAND  6B06
MOVEQ_SIZE          2044
MOVEQ_SUB           6AF0
MOVE_ABS_ADD_LONG   4CBC
MOVE_ABS_ADD_LONG_OUT  50FC
MOVE_ABS_ADD_WORD   4CA6
MOVE_ABS_ADD_WORD_OUT  50F2
MOVE_ADD_REG_INDIR  4C7C
MOVE_ADD_REG_INDIR_POSTINC  4C98
MOVE_ADD_REG_INDIR_PREDEC  4C8A
MOVE_AN_INDIR_POSTINC_REG  4EDE
MOVE_AN_INDIR_POSTINC_REG0_OUT  4F58
MOVE_AN_INDIR_POSTINC_REG1  4EF6
MOVE_AN_INDIR_POSTINC_REG1_OUT  4F6A
MOVE_AN_INDIR_POSTINC_REG2  4F04
MOVE_AN_INDIR_POSTINC_REG2_OUT  4F7C
MOVE_AN_INDIR_POSTINC_REG3  4F12
MOVE_AN_INDIR_POSTINC_REG3_OUT  4F8E
MOVE_AN_INDIR_POSTINC_REG4  4F20
MOVE_AN_INDIR_POSTINC_REG4_OUT  4FA0
MOVE_AN_INDIR_POSTINC_REG5  4F2E
MOVE_AN_INDIR_POSTINC_REG5_OUT  4FB2
MOVE_AN_INDIR_POSTINC_REG6  4F3C
MOVE_AN_INDIR_POSTINC_REG6_OUT  4FC4
MOVE_AN_INDIR_POSTINC_REG7  4F4A
MOVE_AN_INDIR_POSTINC_REG7_OUT  4FD6
MOVE_AN_INDIR_PREDEC  4FE8
MOVE_AN_INDIR_PREDEC_REG0_OUT  5062
MOVE_AN_INDIR_PREDEC_REG1  5000
MOVE_AN_INDIR_PREDEC_REG1_OUT  5074
MOVE_AN_INDIR_PREDEC_REG2  500E
MOVE_AN_INDIR_PREDEC_REG2_OUT  5086
MOVE_AN_INDIR_PREDEC_REG3  501C
MOVE_AN_INDIR_PREDEC_REG3_OUT  5098
MOVE_AN_INDIR_PREDEC_REG4  502A
MOVE_AN_INDIR_PREDEC_REG4_OUT  50AA
MOVE_AN_INDIR_PREDEC_REG5  5038
MOVE_AN_INDIR_PREDEC_REG5_OUT  50BC
MOVE_AN_INDIR_PREDEC_REG6  5046
MOVE_AN_INDIR_PREDEC_REG6_OUT  50CE
MOVE_AN_INDIR_PREDEC_REG7  5054
MOVE_AN_INDIR_PREDEC_REG7_OUT  50E0
MOVE_AN_INDIR_REG   4DD4
MOVE_AN_INDIR_REG0_OUT  4E4E
MOVE_AN_INDIR_REG1  4DEC
MOVE_AN_INDIR_REG1_OUT  4E60
MOVE_AN_INDIR_REG2  4DFA
MOVE_AN_INDIR_REG2_OUT  4E72
MOVE_AN_INDIR_REG3  4E08
MOVE_AN_INDIR_REG3_OUT  4E84
MOVE_AN_INDIR_REG4  4E16
MOVE_AN_INDIR_REG4_OUT  4E96
MOVE_AN_INDIR_REG5  4E24
MOVE_AN_INDIR_REG5_OUT  4EA8
MOVE_AN_INDIR_REG6  4E32
MOVE_AN_INDIR_REG6_OUT  4EBA
MOVE_AN_INDIR_REG7  4E40
MOVE_AN_INDIR_REG7_OUT  4ECC
MOVE_D0_OUT         4D44
MOVE_D1_OUT         4D56
MOVE_D2_OUT         4D68
MOVE_D3_OUT         4D7A
MOVE_D4_OUT         4D8C
MOVE_D5_OUT         4D9E
MOVE_D6_OUT         4DB0
MOVE_D7_OUT         4DC2
MOVE_DATA_REG_DIR   4C6E
MOVE_DECODE         2150
MOVE_DEST_A0_OUT    52BA
MOVE_DEST_A1_OUT    52C2
MOVE_DEST_A2_OUT    52CA
MOVE_DEST_A3_OUT    52D2
MOVE_DEST_A4_OUT    52DA
MOVE_DEST_A5_OUT    52E2
MOVE_DEST_A6_OUT    52EA
MOVE_DEST_A7_OUT    52F2
MOVE_DEST_ABS_ADD_LONG  516E
MOVE_DEST_ABS_ADD_LONG_OUT  5532
MOVE_DEST_ABS_ADD_WORD  5158
MOVE_DEST_ABS_ADD_WORD_OUT  5528
MOVE_DEST_ADD_REG_DIR  5120
MOVE_DEST_ADD_REG_INDIR  512E
MOVE_DEST_ADD_REG_INDIR_POSTINC  514A
MOVE_DEST_ADD_REG_INDIR_PREDEC  513C
MOVE_DEST_AN_INDIR_PDEC_R0_OUT  54E8
MOVE_DEST_AN_INDIR_PDEC_R1  5486
MOVE_DEST_AN_INDIR_PDEC_R1_OUT  54F0
MOVE_DEST_AN_INDIR_PDEC_R2  5494
MOVE_DEST_AN_INDIR_PDEC_R2_OUT  54F8
MOVE_DEST_AN_INDIR_PDEC_R3  54A2
MOVE_DEST_AN_INDIR_PDEC_R3_OUT  5500
MOVE_DEST_AN_INDIR_PDEC_R4  54B0
MOVE_DEST_AN_INDIR_PDEC_R4_OUT  5508
MOVE_DEST_AN_INDIR_PDEC_R5  54BE
MOVE_DEST_AN_INDIR_PDEC_R5_OUT  5510
MOVE_DEST_AN_INDIR_PDEC_R6  54CC
MOVE_DEST_AN_INDIR_PDEC_R6_OUT  5518
MOVE_DEST_AN_INDIR_PDEC_R7  54DA
MOVE_DEST_AN_INDIR_PDEC_R7_OUT  5520
MOVE_DEST_AN_INDIR_PINC_R  53B4
MOVE_DEST_AN_INDIR_PINC_R0_OUT  542E
MOVE_DEST_AN_INDIR_PINC_R1  53CC
MOVE_DEST_AN_INDIR_PINC_R1_OUT  5436
MOVE_DEST_AN_INDIR_PINC_R2  53DA
MOVE_DEST_AN_INDIR_PINC_R2_OUT  543E
MOVE_DEST_AN_INDIR_PINC_R3  53E8
MOVE_DEST_AN_INDIR_PINC_R3_OUT  5446
MOVE_DEST_AN_INDIR_PINC_R4  53F6
MOVE_DEST_AN_INDIR_PINC_R4_OUT  544E
MOVE_DEST_AN_INDIR_PINC_R5  5404
MOVE_DEST_AN_INDIR_PINC_R5_OUT  5456
MOVE_DEST_AN_INDIR_PINC_R6  5412
MOVE_DEST_AN_INDIR_PINC_R6_OUT  545E
MOVE_DEST_AN_INDIR_PINC_R7  5420
MOVE_DEST_AN_INDIR_PINC_R7_OUT  5466
MOVE_DEST_AN_INDIR_PREDEC  546E
MOVE_DEST_AN_INDIR_REG  52FA
MOVE_DEST_AN_INDIR_REG0_OUT  5374
MOVE_DEST_AN_INDIR_REG1  5312
MOVE_DEST_AN_INDIR_REG1_OUT  537C
MOVE_DEST_AN_INDIR_REG2  5320
MOVE_DEST_AN_INDIR_REG2_OUT  5384
MOVE_DEST_AN_INDIR_REG3  532E
MOVE_DEST_AN_INDIR_REG3_OUT  538C
MOVE_DEST_AN_INDIR_REG4  533C
MOVE_DEST_AN_INDIR_REG4_OUT  5394
MOVE_DEST_AN_INDIR_REG5  534A
MOVE_DEST_AN_INDIR_REG5_OUT  539C
MOVE_DEST_AN_INDIR_REG6  5358
MOVE_DEST_AN_INDIR_REG6_OUT  53A4
MOVE_DEST_AN_INDIR_REG7  5366
MOVE_DEST_AN_INDIR_REG7_OUT  53AC
MOVE_DEST_AN_REG    5240
MOVE_DEST_D0_OUT    5200
MOVE_DEST_D1_OUT    5208
MOVE_DEST_D2_OUT    5210
MOVE_DEST_D3_OUT    5218
MOVE_DEST_D4_OUT    5220
MOVE_DEST_D5_OUT    5228
MOVE_DEST_D6_OUT    5230
MOVE_DEST_D7_OUT    5238
MOVE_DEST_DATA_REG_DIR  510A
MOVE_DEST_DN_REG    5186
MOVE_DEST_IMMEDIATE_ADD  5178
MOVE_DEST_IMMEDIATE_ADD_OUT  553E
MOVE_DEST_IMM_ADD_L  555A
MOVE_DEST_IMM_ADD_W  5550
MOVE_DEST_RA1       5258
MOVE_DEST_RA2       5266
MOVE_DEST_RA3       5274
MOVE_DEST_RA4       5282
MOVE_DEST_RA5       5290
MOVE_DEST_RA6       529E
MOVE_DEST_RA7       52AC
MOVE_DEST_RD1       519E
MOVE_DEST_RD2       51AC
MOVE_DEST_RD3       51BA
MOVE_DEST_RD4       51C8
MOVE_DEST_RD5       51D6
MOVE_DEST_RD6       51E4
MOVE_DEST_RD7       51F2
MOVE_DETERMINE_SECOND_OP  5108
MOVE_DN_REG         4CCA
MOVE_RD1            4CE2
MOVE_RD2            4CF0
MOVE_RD3            4CFE
MOVE_RD4            4D0C
MOVE_RD5            4D1A
MOVE_RD6            4D28
MOVE_RD7            4D36
MOVE_SIZE           14B0
MOVE_SUB            4C68
M_END               1532
M_FAIL              152C
M_L                 1506
M_SIZE_B_ADD        0
M_SIZE_B_LOGIC      0
M_SIZE_B_MOVES      1000
M_SIZE_B_NOT        0
M_SIZE_B_SHFTS      0
M_SIZE_B_SUB        0
M_SIZE_L_ADD        80
M_SIZE_L_ADDA       100
M_SIZE_L_BCC        FF
M_SIZE_L_LOGIC      80
M_SIZE_L_MOVEM      40
M_SIZE_L_MOVEQ      7000
M_SIZE_L_MOVES      2000
M_SIZE_L_NOT        80
M_SIZE_L_SHFTS      80
M_SIZE_L_SUB        80
M_SIZE_W_ADD        40
M_SIZE_W_ADDA       0
M_SIZE_W_BCC        0
M_SIZE_W_LOGIC      40
M_SIZE_W_MOVEM      0
M_SIZE_W_MOVES      3000
M_SIZE_W_NOT        40
M_SIZE_W_SHFTS      40
M_SIZE_W_SUB        40
M_W                 14E0
NOP_SIZE            15D4
NOT_ABS_ADD_LONG    6C14
NOT_ABS_ADD_LONG_OUT  6F12
NOT_ABS_ADD_WORD    6BFA
NOT_ABS_ADD_WORD_OUT  6F08
NOT_AN_INDIR        6BD0
NOT_AN_INDIR_PDEC_R0_OUT  6EC8
NOT_AN_INDIR_PDEC_R1  6E66
NOT_AN_INDIR_PDEC_R1_OUT  6ED0
NOT_AN_INDIR_PDEC_R2  6E74
NOT_AN_INDIR_PDEC_R2_OUT  6ED8
NOT_AN_INDIR_PDEC_R3  6E82
NOT_AN_INDIR_PDEC_R3_OUT  6EE0
NOT_AN_INDIR_PDEC_R4  6E90
NOT_AN_INDIR_PDEC_R4_OUT  6EE8
NOT_AN_INDIR_PDEC_R5  6E9E
NOT_AN_INDIR_PDEC_R5_OUT  6EF0
NOT_AN_INDIR_PDEC_R6  6EAC
NOT_AN_INDIR_PDEC_R6_OUT  6EF8
NOT_AN_INDIR_PDEC_R7  6EBA
NOT_AN_INDIR_PDEC_R7_OUT  6F00
NOT_AN_INDIR_PINC_R0_OUT  6E0E
NOT_AN_INDIR_PINC_R1  6DAE
NOT_AN_INDIR_PINC_R1_OUT  6E16
NOT_AN_INDIR_PINC_R2  6DBC
NOT_AN_INDIR_PINC_R2_OUT  6E1E
NOT_AN_INDIR_PINC_R3  6DCA
NOT_AN_INDIR_PINC_R3_OUT  6E26
NOT_AN_INDIR_PINC_R4  6DD8
NOT_AN_INDIR_PINC_R4_OUT  6E2E
NOT_AN_INDIR_PINC_R5  6DE6
NOT_AN_INDIR_PINC_R5_OUT  6E36
NOT_AN_INDIR_PINC_R6  6DF4
NOT_AN_INDIR_PINC_R6_OUT  6E3E
NOT_AN_INDIR_PINC_R7  6E00
NOT_AN_INDIR_PINC_R7_OUT  6E46
NOT_AN_INDIR_POSTINC  6BDE
NOT_AN_INDIR_POSTINC_REG  6D96
NOT_AN_INDIR_PREDEC  6BEC
NOT_AN_INDIR_PREDEC_REG  6E4E
NOT_AN_INDIR_REG    6CDC
NOT_AN_INDIR_REG0_OUT  6D56
NOT_AN_INDIR_REG1   6CF4
NOT_AN_INDIR_REG1_OUT  6D5E
NOT_AN_INDIR_REG2   6D02
NOT_AN_INDIR_REG2_OUT  6D66
NOT_AN_INDIR_REG3   6D10
NOT_AN_INDIR_REG3_OUT  6D6E
NOT_AN_INDIR_REG4   6D1E
NOT_AN_INDIR_REG4_OUT  6D76
NOT_AN_INDIR_REG5   6D2C
NOT_AN_INDIR_REG5_OUT  6D7E
NOT_AN_INDIR_REG6   6D3A
NOT_AN_INDIR_REG6_OUT  6D86
NOT_AN_INDIR_REG7   6D48
NOT_AN_INDIR_REG7_OUT  6D8E
NOT_D0_OUTPUT       6C9C
NOT_D1_OUTPUT       6CA4
NOT_D2_OUTPUT       6CAC
NOT_D3_OUTPUT       6CB4
NOT_D4_OUTPUT       6CBC
NOT_D5_OUTPUT       6CC4
NOT_D6_OUTPUT       6CCC
NOT_D7_OUTPUT       6CD4
NOT_DATA_REG_DIR    6BC2
NOT_DN_REG          6C22
NOT_END             16CE
NOT_FAIL            16C8
NOT_HEX             FFFFFFFF
NOT_HEX_MSG         826B
NOT_L               16A2
NOT_RD1             6C3A
NOT_RD2             6C48
NOT_RD3             6C56
NOT_RD4             6C64
NOT_RD5             6C72
NOT_RD6             6C80
NOT_RD7             6C8E
NOT_SIZE            164C
NOT_SUB             6BBC
NOT_W               167C
NO_SIZE             0
OPCODE_ADDAL        7FB6
OPCODE_ADDAW        7FAF
OPCODE_ADDB         7F9D
OPCODE_ADDL         7FA9
OPCODE_ADDQB        7FBD
OPCODE_ADDQL        7FCB
OPCODE_ADDQW        7FC4
OPCODE_ADDW         7FA3
OPCODE_ANDB         7FE8
OPCODE_ANDL         7FF4
OPCODE_ANDW         7FEE
OPCODE_ASLB         803F
OPCODE_ASLL         804B
OPCODE_ASLW         8045
OPCODE_ASRB         8051
OPCODE_ASRL         805D
OPCODE_ASRW         8057
OPCODE_BEQ          80A7
OPCODE_BEQB         80AB
OPCODE_BEQW         80B1
OPCODE_BGT          8087
OPCODE_BGTB         808B
OPCODE_BGTW         8091
OPCODE_BLE          8097
OPCODE_BLEB         809B
OPCODE_BLEW         80A1
OPCODE_BRA          80BF
OPCODE_BRAB         80C3
OPCODE_BRAW         80C9
OPCODE_DATA         80DF
OPCODE_JSR          80B7
OPCODE_LEA          7FE4
OPCODE_LSLB         801B
OPCODE_LSLL         8027
OPCODE_LSLW         8021
OPCODE_LSRB         802D
OPCODE_LSRL         8039
OPCODE_LSRW         8033
OPCODE_MOVEAB       7F81
OPCODE_MOVEAL       7F91
OPCODE_MOVEAW       7F89
OPCODE_MOVEB        7F60
OPCODE_MOVEL        7F6E
OPCODE_MOVEM        7F75
OPCODE_MOVEML       80D7
OPCODE_MOVEMW       80CF
OPCODE_MOVEQ        7F7B
OPCODE_MOVEW        7F67
OPCODE_NOP          7F99
OPCODE_NOTB         8009
OPCODE_NOTL         8015
OPCODE_NOTW         800F
OPCODE_ORB          7FFA
OPCODE_ORL          8004
OPCODE_ORW          7FFF
OPCODE_ROLB         8063
OPCODE_ROLL         806F
OPCODE_ROLW         8069
OPCODE_RORB         8075
OPCODE_RORL         8081
OPCODE_RORW         807B
OPCODE_RTS          80BB
OPCODE_SUBB         7FD2
OPCODE_SUBL         7FDE
OPCODE_SUBROUTINE   2080
OPCODE_SUBW         7FD8
OPWD_DONE           1448
OPWD_LOOP           1434
OP_ADD              2220
OP_ADDA             2218
OP_ADDQ             232C
OP_AND              2348
OP_ASL_M            22F0
OP_ASL_R            2314
OP_ASR_M            22F6
OP_ASR_R            231A
OP_BEQ              225C
OP_BGT              2256
OP_BLE              2262
OP_BRA              2268
OP_DATA             2372
OP_JSR              21F0
OP_LEA              21DE
OP_LSL_M            22E4
OP_LSL_R            2308
OP_LSR_M            22EA
OP_LSR_R            230E
OP_MOVE             2172
OP_MOVEA            216C
OP_MOVEM_MR         21EA
OP_MOVEM_RM         21E4
OP_MOVEQ            2364
OP_NOP              21D2
OP_NOT              21F6
OP_OR               2356
OP_ROL_M            22FC
OP_ROL_R            2320
OP_ROR_M            2302
OP_ROR_R            2326
OP_RTS              21D8
OP_SUB              233A
OR_DETERMINE_SECOND_OP  756E
OR_DETERMINE_SECOND_OPERAND  7732
OR_DN_EA            7628
OR_DN_EA_ABS_ADD_LONG  777C
OR_DN_EA_ABS_ADD_LONG_OUT  79C2
OR_DN_EA_ABS_ADD_WORD  7766
OR_DN_EA_ABS_ADD_WORD_OUT  79B8
OR_DN_EA_ADD_REG_INDIR  773C
OR_DN_EA_ADD_REG_INDIR_PDEC  774A
OR_DN_EA_ADD_REG_INDIR_PINC  7758
OR_DN_EA_AN_INDIR_PDEC_R0_OUT  7978
OR_DN_EA_AN_INDIR_PDEC_R1  7916
OR_DN_EA_AN_INDIR_PDEC_R1_OUT  7980
OR_DN_EA_AN_INDIR_PDEC_R2  7924
OR_DN_EA_AN_INDIR_PDEC_R2_OUT  7988
OR_DN_EA_AN_INDIR_PDEC_R3  7932
OR_DN_EA_AN_INDIR_PDEC_R3_OUT  7990
OR_DN_EA_AN_INDIR_PDEC_R4  7940
OR_DN_EA_AN_INDIR_PDEC_R4_OUT  7998
OR_DN_EA_AN_INDIR_PDEC_R5  794E
OR_DN_EA_AN_INDIR_PDEC_R5_OUT  79A0
OR_DN_EA_AN_INDIR_PDEC_R6  795C
OR_DN_EA_AN_INDIR_PDEC_R6_OUT  79A8
OR_DN_EA_AN_INDIR_PDEC_R7  796A
OR_DN_EA_AN_INDIR_PDEC_R7_OUT  79B0
OR_DN_EA_AN_INDIR_PINC_R0_OUT  78BE
OR_DN_EA_AN_INDIR_PINC_R1  785C
OR_DN_EA_AN_INDIR_PINC_R1_OUT  78C6
OR_DN_EA_AN_INDIR_PINC_R2  786A
OR_DN_EA_AN_INDIR_PINC_R2_OUT  78CE
OR_DN_EA_AN_INDIR_PINC_R3  7878
OR_DN_EA_AN_INDIR_PINC_R3_OUT  78D6
OR_DN_EA_AN_INDIR_PINC_R4  7886
OR_DN_EA_AN_INDIR_PINC_R4_OUT  78DE
OR_DN_EA_AN_INDIR_PINC_R5  7894
OR_DN_EA_AN_INDIR_PINC_R5_OUT  78E6
OR_DN_EA_AN_INDIR_PINC_R6  78A2
OR_DN_EA_AN_INDIR_PINC_R6_OUT  78EE
OR_DN_EA_AN_INDIR_PINC_R7  78B0
OR_DN_EA_AN_INDIR_PINC_R7_OUT  78F6
OR_DN_EA_AN_INDIR_POSTINC_REG  7844
OR_DN_EA_AN_INDIR_PREDEC  78FE
OR_DN_EA_AN_INDIR_REG  778A
OR_DN_EA_AN_INDIR_REG0_OUT  7804
OR_DN_EA_AN_INDIR_REG1  77A2
OR_DN_EA_AN_INDIR_REG1_OUT  780C
OR_DN_EA_AN_INDIR_REG2  77B0
OR_DN_EA_AN_INDIR_REG2_OUT  7814
OR_DN_EA_AN_INDIR_REG3  77BE
OR_DN_EA_AN_INDIR_REG3_OUT  781C
OR_DN_EA_AN_INDIR_REG4  77CC
OR_DN_EA_AN_INDIR_REG4_OUT  7824
OR_DN_EA_AN_INDIR_REG5  77DA
OR_DN_EA_AN_INDIR_REG5_OUT  782C
OR_DN_EA_AN_INDIR_REG6  77E8
OR_DN_EA_AN_INDIR_REG6_OUT  7834
OR_DN_EA_AN_INDIR_REG7  77F6
OR_DN_EA_AN_INDIR_REG7_OUT  783C
OR_DN_EA_MATCH      6F2C
OR_DN_EA_MATCH_L    6F48
OR_DN_EA_MATCH_W    6F3A
OR_EA_DN            6F7E
OR_EA_DN_A0_OUT     715E
OR_EA_DN_A1_OUT     7170
OR_EA_DN_A2_OUT     7182
OR_EA_DN_A3_OUT     7194
OR_EA_DN_A4_OUT     71A6
OR_EA_DN_A5_OUT     71B8
OR_EA_DN_A6_OUT     71CA
OR_EA_DN_A7_OUT     71DC
OR_EA_DN_ABS_ADD_LONG  6FCC
OR_EA_DN_ABS_ADD_LONG_OUT  7520
OR_EA_DN_ABS_ADD_WORD  6FB2
OR_EA_DN_ABS_ADD_WORD_OUT  750C
OR_EA_DN_ADD_REG_INDIR  6F88
OR_EA_DN_ADD_REG_INDIR_POSTINC  6FA4
OR_EA_DN_ADD_REG_INDIR_PREDEC  6F96
OR_EA_DN_AN_INDIR_PDEC_R0_OUT  747C
OR_EA_DN_AN_INDIR_PDEC_R1  741A
OR_EA_DN_AN_INDIR_PDEC_R1_OUT  748E
OR_EA_DN_AN_INDIR_PDEC_R2  7428
OR_EA_DN_AN_INDIR_PDEC_R2_OUT  74A0
OR_EA_DN_AN_INDIR_PDEC_R3  7436
OR_EA_DN_AN_INDIR_PDEC_R3_OUT  74B2
OR_EA_DN_AN_INDIR_PDEC_R4  7444
OR_EA_DN_AN_INDIR_PDEC_R4_OUT  74C4
OR_EA_DN_AN_INDIR_PDEC_R5  7452
OR_EA_DN_AN_INDIR_PDEC_R5_OUT  74D6
OR_EA_DN_AN_INDIR_PDEC_R6  7460
OR_EA_DN_AN_INDIR_PDEC_R6_OUT  74E8
OR_EA_DN_AN_INDIR_PDEC_R7  746E
OR_EA_DN_AN_INDIR_PDEC_R7_OUT  74FA
OR_EA_DN_AN_INDIR_PINC_R0_OUT  7372
OR_EA_DN_AN_INDIR_PINC_R1  7310
OR_EA_DN_AN_INDIR_PINC_R1_OUT  7384
OR_EA_DN_AN_INDIR_PINC_R2  731E
OR_EA_DN_AN_INDIR_PINC_R2_OUT  7396
OR_EA_DN_AN_INDIR_PINC_R3  732C
OR_EA_DN_AN_INDIR_PINC_R3_OUT  73A8
OR_EA_DN_AN_INDIR_PINC_R4  733A
OR_EA_DN_AN_INDIR_PINC_R4_OUT  73BA
OR_EA_DN_AN_INDIR_PINC_R5  7348
OR_EA_DN_AN_INDIR_PINC_R5_OUT  73CC
OR_EA_DN_AN_INDIR_PINC_R6  7356
OR_EA_DN_AN_INDIR_PINC_R6_OUT  73DE
OR_EA_DN_AN_INDIR_PINC_R7  7364
OR_EA_DN_AN_INDIR_PINC_R7_OUT  73F0
OR_EA_DN_AN_INDIR_POSTINC_REG  72F8
OR_EA_DN_AN_INDIR_PREDEC  7402
OR_EA_DN_AN_INDIR_REG  71EE
OR_EA_DN_AN_INDIR_REG0_OUT  7268
OR_EA_DN_AN_INDIR_REG1  7206
OR_EA_DN_AN_INDIR_REG1_OUT  727A
OR_EA_DN_AN_INDIR_REG2  7214
OR_EA_DN_AN_INDIR_REG2_OUT  728C
OR_EA_DN_AN_INDIR_REG3  7222
OR_EA_DN_AN_INDIR_REG3_OUT  729E
OR_EA_DN_AN_INDIR_REG4  7230
OR_EA_DN_AN_INDIR_REG4_OUT  72B0
OR_EA_DN_AN_INDIR_REG5  723E
OR_EA_DN_AN_INDIR_REG5_OUT  72C2
OR_EA_DN_AN_INDIR_REG6  724C
OR_EA_DN_AN_INDIR_REG6_OUT  72D4
OR_EA_DN_AN_INDIR_REG7  725A
OR_EA_DN_AN_INDIR_REG7_OUT  72E6
OR_EA_DN_AN_REG     70E4
OR_EA_DN_D0_OUT     7054
OR_EA_DN_D1_OUT     7066
OR_EA_DN_D2_OUT     7078
OR_EA_DN_D3_OUT     708A
OR_EA_DN_D4_OUT     709C
OR_EA_DN_D5_OUT     70AE
OR_EA_DN_D6_OUT     70C0
OR_EA_DN_D7_OUT     70D2
OR_EA_DN_DN_REG     6FDA
OR_EA_DN_IMMEDIATE_ADD_OUT  7536
OR_EA_DN_IMM_ADD_L  755A
OR_EA_DN_IMM_ADD_W  7548
OR_EA_DN_MATCH      6F56
OR_EA_DN_MATCH_L    6F72
OR_EA_DN_MATCH_W    6F64
OR_EA_DN_RA1        70FC
OR_EA_DN_RA2        710A
OR_EA_DN_RA3        7118
OR_EA_DN_RA4        7126
OR_EA_DN_RA5        7134
OR_EA_DN_RA6        7142
OR_EA_DN_RA7        7150
OR_EA_DN_RD1        6FF2
OR_EA_DN_RD2        7000
OR_EA_DN_RD3        700E
OR_EA_DN_RD4        701C
OR_EA_DN_RD5        702A
OR_EA_DN_RD6        7038
OR_EA_DN_RD7        7046
OR_END              203E
OR_FAIL             2038
OR_L                2012
OR_SIZE             1FBC
OR_SUB              6F26
OR_W                1FEC
PRESS_ENTER         837D
PRINT_BCC           1342
PRINT_DATA          12F0
PRINT_DISPLACEDADDRESS  138C
PRINT_EA            13EE
PRINT_EAT           13DE
PRINT_FIRST         140A
PRINT_HEX           1228
PRINT_LINE_NUMBER   13B4
PRINT_OPCODE_WORD   1426
PRINT_STRING        1218
PRINT_STRING_OP_NL  1270
PRINT_STRING_OP_NN  123C
PRINT_STRING_SIZED  12A4
QT                  71
RESTART_Q           839A
ROD_ABS_ADD_LONG    7A34
ROD_ABS_ADD_LONG_OUT  7C6E
ROD_ABS_ADD_WORD    7A1A
ROD_ABS_ADD_WORD_OUT  7C64
ROD_AN_INDIR        79F0
ROD_AN_INDIR_PDEC_R0_OUT  7C24
ROD_AN_INDIR_PDEC_R1  7BC2
ROD_AN_INDIR_PDEC_R1_OUT  7C2C
ROD_AN_INDIR_PDEC_R2  7BD0
ROD_AN_INDIR_PDEC_R2_OUT  7C34
ROD_AN_INDIR_PDEC_R3  7BDE
ROD_AN_INDIR_PDEC_R3_OUT  7C3C
ROD_AN_INDIR_PDEC_R4  7BEC
ROD_AN_INDIR_PDEC_R4_OUT  7C44
ROD_AN_INDIR_PDEC_R5  7BFA
ROD_AN_INDIR_PDEC_R5_OUT  7C4C
ROD_AN_INDIR_PDEC_R6  7C08
ROD_AN_INDIR_PDEC_R6_OUT  7C54
ROD_AN_INDIR_PDEC_R7  7C16
ROD_AN_INDIR_PDEC_R7_OUT  7C5C
ROD_AN_INDIR_PINC_R0_OUT  7B70
ROD_AN_INDIR_PINC_R1  7B0E
ROD_AN_INDIR_PINC_R1_OUT  7B78
ROD_AN_INDIR_PINC_R2  7B1C
ROD_AN_INDIR_PINC_R2_OUT  7B80
ROD_AN_INDIR_PINC_R3  7B2A
ROD_AN_INDIR_PINC_R3_OUT  7B88
ROD_AN_INDIR_PINC_R4  7B38
ROD_AN_INDIR_PINC_R4_OUT  7B90
ROD_AN_INDIR_PINC_R5  7B46
ROD_AN_INDIR_PINC_R5_OUT  7B98
ROD_AN_INDIR_PINC_R6  7B54
ROD_AN_INDIR_PINC_R6_OUT  7BA0
ROD_AN_INDIR_PINC_R7  7B62
ROD_AN_INDIR_PINC_R7_OUT  7BA8
ROD_AN_INDIR_POSTINC  79FE
ROD_AN_INDIR_POSTINC_REG  7AFC
ROD_AN_INDIR_PREDEC  7A0C
ROD_AN_INDIR_PREDEC_REG  7BB0
ROD_AN_INDIR_REG    7A42
ROD_AN_INDIR_REG0_OUT  7ABC
ROD_AN_INDIR_REG1   7A5A
ROD_AN_INDIR_REG1_OUT  7AC4
ROD_AN_INDIR_REG2   7A68
ROD_AN_INDIR_REG2_OUT  7ACC
ROD_AN_INDIR_REG3   7A76
ROD_AN_INDIR_REG3_OUT  7AD4
ROD_AN_INDIR_REG4   7A84
ROD_AN_INDIR_REG4_OUT  7ADC
ROD_AN_INDIR_REG5   7A92
ROD_AN_INDIR_REG5_OUT  7AE4
ROD_AN_INDIR_REG6   7AA0
ROD_AN_INDIR_REG6_OUT  7AEC
ROD_AN_INDIR_REG7   7AAE
ROD_AN_INDIR_REG7_OUT  7AF4
ROD_COUNT_REG0      7C9C
ROD_COUNT_REG0_OUT  7E16
ROD_COUNT_REG1      7CAA
ROD_COUNT_REG1_OUT  7E28
ROD_COUNT_REG2      7CB8
ROD_COUNT_REG2_OUT  7E3A
ROD_COUNT_REG3      7CC6
ROD_COUNT_REG3_OUT  7E4C
ROD_COUNT_REG4      7CD4
ROD_COUNT_REG4_OUT  7E5E
ROD_COUNT_REG5      7CE2
ROD_COUNT_REG5_OUT  7E70
ROD_COUNT_REG6      7CF0
ROD_COUNT_REG6_OUT  7E82
ROD_COUNT_REG7      7CFE
ROD_COUNT_REG7_OUT  7E94
ROD_COUNT_VAL       7D0C
ROD_COUNT_VAL0_OUT  7D86
ROD_COUNT_VAL1      7D24
ROD_COUNT_VAL1_OUT  7D98
ROD_COUNT_VAL2      7D32
ROD_COUNT_VAL2_OUT  7DAA
ROD_COUNT_VAL3      7D40
ROD_COUNT_VAL3_OUT  7DBC
ROD_COUNT_VAL4      7D4E
ROD_COUNT_VAL4_OUT  7DCE
ROD_COUNT_VAL5      7D5C
ROD_COUNT_VAL5_OUT  7DE0
ROD_COUNT_VAL6      7D6A
ROD_COUNT_VAL6_OUT  7DF2
ROD_COUNT_VAL7      7D78
ROD_COUNT_VAL7_OUT  7E04
ROD_D0_OUT          7F20
ROD_D1_OUT          7F28
ROD_D2_OUT          7F30
ROD_D3_OUT          7F38
ROD_D4_OUT          7F40
ROD_D5_OUT          7F48
ROD_D6_OUT          7F50
ROD_D7_OUT          7F58
ROD_DN0             7EA6
ROD_DN1             7EBE
ROD_DN2             7ECC
ROD_DN3             7EDA
ROD_DN4             7EE8
ROD_DN5             7EF6
ROD_DN6             7F04
ROD_DN7             7F12
ROD_MEM_SHIFT       79E6
ROD_REG_SHIFT       7C7A
ROD_SHIFT_REG       7C92
ROD_SHIFT_TYPE      79CE
ROD_SUB             79CE
ROLM_END            1D6C
ROLR_END            1D42
ROLR_FAIL           1D3C
ROLR_L              1D16
ROLR_W              1CF0
ROL_M_SIZE          1D48
ROL_R_SIZE          1CC0
RORM_END            1E1E
RORR_END            1DF4
RORR_FAIL           1DEE
RORR_L              1DC8
RORR_W              1DA2
ROR_M_SIZE          1DFA
ROR_R_SIZE          1D72
RT                  72
RTS_SIZE            15EC
RUN_AGAIN           1206
RUN_PROG            1006
SHIFT_TYPE          43EA
SKIP1               209C
SKIP2               20B4
SKIP3               20C6
SKIP4               20D8
SKIP5               20EA
SKIP6               20FC
SKIP7               210E
SKIP8               2120
SKIP9               2132
SPACE               837A
START_ADR           7000
START_REQUEST       81C1
STOP                84E0
SUB_DETERMINE_SECOND_OP  5AC6
SUB_DETERMINE_SECOND_OPERAND  5C5A
SUB_DN_EA           5B80
SUB_DN_EA_ABS_ADD_LONG  5CAE
SUB_DN_EA_ABS_ADD_LONG_OUT  5EF4
SUB_DN_EA_ABS_ADD_WORD  5C98
SUB_DN_EA_ABS_ADD_WORD_OUT  5EEA
SUB_DN_EA_ADD_REG_INDIR  5C64
SUB_DN_EA_ADD_REG_INDIR_POSTINC  5C8A
SUB_DN_EA_ADD_REG_INDIR_PREDEC  5C7C
SUB_DN_EA_AN_INDIR_PDEC_R0_OUT  5EAA
SUB_DN_EA_AN_INDIR_PDEC_R1  5E48
SUB_DN_EA_AN_INDIR_PDEC_R1_OUT  5EB2
SUB_DN_EA_AN_INDIR_PDEC_R2  5E56
SUB_DN_EA_AN_INDIR_PDEC_R2_OUT  5EBA
SUB_DN_EA_AN_INDIR_PDEC_R3  5E64
SUB_DN_EA_AN_INDIR_PDEC_R3_OUT  5EC2
SUB_DN_EA_AN_INDIR_PDEC_R4  5E72
SUB_DN_EA_AN_INDIR_PDEC_R4_OUT  5ECA
SUB_DN_EA_AN_INDIR_PDEC_R5  5E80
SUB_DN_EA_AN_INDIR_PDEC_R5_OUT  5ED2
SUB_DN_EA_AN_INDIR_PDEC_R6  5E8E
SUB_DN_EA_AN_INDIR_PDEC_R6_OUT  5EDA
SUB_DN_EA_AN_INDIR_PDEC_R7  5E9C
SUB_DN_EA_AN_INDIR_PDEC_R7_OUT  5EE2
SUB_DN_EA_AN_INDIR_PINC_R0_OUT  5DF0
SUB_DN_EA_AN_INDIR_PINC_R1  5D8E
SUB_DN_EA_AN_INDIR_PINC_R1_OUT  5DF8
SUB_DN_EA_AN_INDIR_PINC_R2  5D9C
SUB_DN_EA_AN_INDIR_PINC_R2_OUT  5E00
SUB_DN_EA_AN_INDIR_PINC_R3  5DAA
SUB_DN_EA_AN_INDIR_PINC_R3_OUT  5E08
SUB_DN_EA_AN_INDIR_PINC_R4  5DB8
SUB_DN_EA_AN_INDIR_PINC_R4_OUT  5E10
SUB_DN_EA_AN_INDIR_PINC_R5  5DC6
SUB_DN_EA_AN_INDIR_PINC_R5_OUT  5E18
SUB_DN_EA_AN_INDIR_PINC_R6  5DD4
SUB_DN_EA_AN_INDIR_PINC_R6_OUT  5E20
SUB_DN_EA_AN_INDIR_PINC_R7  5DE2
SUB_DN_EA_AN_INDIR_PINC_R7_OUT  5E28
SUB_DN_EA_AN_INDIR_POSTINC_REG  5D76
SUB_DN_EA_AN_INDIR_PREDEC  5E30
SUB_DN_EA_AN_INDIR_REG  5CBC
SUB_DN_EA_AN_INDIR_REG0_OUT  5D36
SUB_DN_EA_AN_INDIR_REG1  5CD4
SUB_DN_EA_AN_INDIR_REG1_OUT  5D3E
SUB_DN_EA_AN_INDIR_REG2  5CE2
SUB_DN_EA_AN_INDIR_REG2_OUT  5D46
SUB_DN_EA_AN_INDIR_REG3  5CF0
SUB_DN_EA_AN_INDIR_REG3_OUT  5D4E
SUB_DN_EA_AN_INDIR_REG4  5CFE
SUB_DN_EA_AN_INDIR_REG4_OUT  5D56
SUB_DN_EA_AN_INDIR_REG5  5D0C
SUB_DN_EA_AN_INDIR_REG5_OUT  5D5E
SUB_DN_EA_AN_INDIR_REG6  5D1A
SUB_DN_EA_AN_INDIR_REG6_OUT  5D66
SUB_DN_EA_AN_INDIR_REG7  5D28
SUB_DN_EA_AN_INDIR_REG7_OUT  5D6E
SUB_DN_EA_IMMEDIATE_ADD_OUT  5F00
SUB_DN_EA_IMM_ADD_L  5F1C
SUB_DN_EA_IMM_ADD_W  5F12
SUB_DN_EA_MATCH     5596
SUB_DN_EA_MATCH_L   55B2
SUB_DN_EA_MATCH_W   55A4
SUB_EA_DN           55C0
SUB_EA_DN_ABS_ADD_LONG  561C
SUB_EA_DN_ABS_ADD_LONG_OUT  5A74
SUB_EA_DN_ABS_ADD_WORD  5602
SUB_EA_DN_ABS_ADD_WORD_OUT  5A60
SUB_EA_DN_ADD_REG_INDIR  55D8
SUB_EA_DN_ADD_REG_INDIR_POSTINC  55F4
SUB_EA_DN_ADD_REG_INDIR_PREDEC  55E6
SUB_EA_DN_AN_INDIR_PDEC_R0_OUT  59D0
SUB_EA_DN_AN_INDIR_PDEC_R1  596E
SUB_EA_DN_AN_INDIR_PDEC_R1_OUT  59E2
SUB_EA_DN_AN_INDIR_PDEC_R2  597C
SUB_EA_DN_AN_INDIR_PDEC_R2_OUT  59F4
SUB_EA_DN_AN_INDIR_PDEC_R3  598A
SUB_EA_DN_AN_INDIR_PDEC_R3_OUT  5A06
SUB_EA_DN_AN_INDIR_PDEC_R4  5998
SUB_EA_DN_AN_INDIR_PDEC_R4_OUT  5A18
SUB_EA_DN_AN_INDIR_PDEC_R5  59A6
SUB_EA_DN_AN_INDIR_PDEC_R5_OUT  5A2A
SUB_EA_DN_AN_INDIR_PDEC_R6  59B4
SUB_EA_DN_AN_INDIR_PDEC_R6_OUT  5A3C
SUB_EA_DN_AN_INDIR_PDEC_R7  59C2
SUB_EA_DN_AN_INDIR_PDEC_R7_OUT  5A4E
SUB_EA_DN_AN_INDIR_PINC_R0_OUT  58C6
SUB_EA_DN_AN_INDIR_PINC_R1  5864
SUB_EA_DN_AN_INDIR_PINC_R1_OUT  58D8
SUB_EA_DN_AN_INDIR_PINC_R2  5872
SUB_EA_DN_AN_INDIR_PINC_R2_OUT  58EA
SUB_EA_DN_AN_INDIR_PINC_R3  5880
SUB_EA_DN_AN_INDIR_PINC_R3_OUT  58FC
SUB_EA_DN_AN_INDIR_PINC_R4  588E
SUB_EA_DN_AN_INDIR_PINC_R4_OUT  590E
SUB_EA_DN_AN_INDIR_PINC_R5  589C
SUB_EA_DN_AN_INDIR_PINC_R5_OUT  5920
SUB_EA_DN_AN_INDIR_PINC_R6  58AA
SUB_EA_DN_AN_INDIR_PINC_R6_OUT  5932
SUB_EA_DN_AN_INDIR_PINC_R7  58B8
SUB_EA_DN_AN_INDIR_PINC_R7_OUT  5944
SUB_EA_DN_AN_INDIR_POSTINC_REG  584C
SUB_EA_DN_AN_INDIR_PREDEC  5956
SUB_EA_DN_AN_INDIR_REG  5742
SUB_EA_DN_AN_INDIR_REG0_OUT  57BC
SUB_EA_DN_AN_INDIR_REG1  575A
SUB_EA_DN_AN_INDIR_REG1_OUT  57CE
SUB_EA_DN_AN_INDIR_REG2  5768
SUB_EA_DN_AN_INDIR_REG2_OUT  57E0
SUB_EA_DN_AN_INDIR_REG3  5776
SUB_EA_DN_AN_INDIR_REG3_OUT  57F2
SUB_EA_DN_AN_INDIR_REG4  5784
SUB_EA_DN_AN_INDIR_REG4_OUT  5804
SUB_EA_DN_AN_INDIR_REG5  5792
SUB_EA_DN_AN_INDIR_REG5_OUT  5816
SUB_EA_DN_AN_INDIR_REG6  57A0
SUB_EA_DN_AN_INDIR_REG6_OUT  5828
SUB_EA_DN_AN_INDIR_REG7  57AE
SUB_EA_DN_AN_INDIR_REG7_OUT  583A
SUB_EA_DN_D0_OUT    56B2
SUB_EA_DN_D1_OUT    56C4
SUB_EA_DN_D2_OUT    56D6
SUB_EA_DN_D3_OUT    56E8
SUB_EA_DN_D4_OUT    56FA
SUB_EA_DN_D5_OUT    570C
SUB_EA_DN_D6_OUT    571E
SUB_EA_DN_D7_OUT    5730
SUB_EA_DN_DATA_REG_DIR  55CA
SUB_EA_DN_DN_REG    5638
SUB_EA_DN_IMMEDIATE_ADD  562A
SUB_EA_DN_IMMEDIATE_ADD_OUT  5A8A
SUB_EA_DN_IMM_ADD_L  5AB0
SUB_EA_DN_IMM_ADD_W  5A9C
SUB_EA_DN_MATCH     556C
SUB_EA_DN_MATCH_L   5588
SUB_EA_DN_MATCH_W   557A
SUB_EA_DN_RD1       5650
SUB_EA_DN_RD2       565E
SUB_EA_DN_RD3       566C
SUB_EA_DN_RD4       567A
SUB_EA_DN_RD5       5688
SUB_EA_DN_RD6       5696
SUB_EA_DN_RD7       56A4
SUB_END             1F2E
SUB_FAIL            1F28
SUB_L               1F02
SUB_SIZE            1EAC
SUB_SUB             5566
SUB_W               1EDC
TAB                 8398
TEST_ENDS           1166
TOHEX               1016
WORD_SIZE           2
