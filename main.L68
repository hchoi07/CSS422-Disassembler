00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/10/2020 3:42:14 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main File
00000000                             3  *-----------------------------------------------------------
00001000                             4              ORG $1000
00001000                             5  MAIN:
00001000  2E7C 00100000              6              MOVEA.L #$00100000,SP
00001006                             7      
00001006  4EB9 00001052              8  run_prog    JSR     io_subroutine
0000100C  4EB9 00001182              9              JSR     main_loop
00001012                            10  
00001012  FFFF FFFF                 11              SIMHALT             ; halt simulator   
00001016                            12          
00001016                            13              INCLUDE 'toHex.x68'
00001016                            14  toHex:
00001016  48E7 DDFE                 15              MOVEM.L     A0-A6/D0-D1/D3-D5/D7,-(SP)
0000101A  0C06 0030                 16              CMPI.B      #$30,D6
0000101E  6D10                      17              BLT.B       ERR
00001020  BC3C 0039                 18              CMP.B       #$39,D6
00001024  6E16                      19              BGT.B       letter
00001026  0406 0030                 20              SUBI.B      #$30,D6
0000102A  4CDF 7FBB                 21              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
0000102E  4E75                      22              RTS
00001030                            23        
00001030  243C FFFFFFFF             24  ERR         MOVE.L      #not_hex,D2
00001036  4CDF 7FBB                 25              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
0000103A  4E75                      26              RTS
0000103C                            27          
0000103C  0C06 0041                 28  letter      CMPI.B      #$41,D6
00001040  6DEE                      29              BLT.B       ERR
00001042  0C06 0046                 30              CMPI.B      #$46,D6
00001046  6EE8                      31              BGT.B       ERR
00001048  0406 0037                 32              SUBI.B      #$37,D6
0000104C  4CDF 7FBB                 33              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
00001050  4E75                      34              RTS
00001052                            35  
00001052                            36  
00001052                            37  
00001052                            38  
00001052                            39  
00001052                            40  
00001052                            41  -------------------- end include --------------------
00001052                            42              INCLUDE 'io_subroutine.x68'
00001052                            43  
00001052                            44  io_subroutine:
00001052  48E7 CFFE                 45              MOVEM.L      D0-D1/D4-D7/A0-A6,-(SP)
00001056                            46              *display the intro message to the user
00001056  43F9 00008188             47              LEA         LOAD_MESSAGE, A1
0000105C  103C 000D                 48              MOVE.B      #13, D0
00001060  4E4F                      49              TRAP        #15
00001062                            50              *display the intro message to the user
00001062  43F9 00008200             51              LEA         LOAD2_MESSAGE, A1
00001068  103C 000D                 52              MOVE.B      #13, D0
0000106C  4E4F                      53              TRAP        #15
0000106E                            54  
0000106E  43F9 00008265             55  INPUT1      LEA         START_REQUEST, A1
00001074  103C 000E                 56              MOVE.B      #14, D0
00001078  4E4F                      57              TRAP        #15
0000107A                            58  
0000107A                            59              *------Code for input-----
0000107A  183C 0000                 60              MOVE.B      #0,D4           *counter 
0000107E  1A3C 0008                 61              MOVE.B      #8,D5
00001082  BA04                      62  input_loop  CMP.B       D4,D5           *loop 8 time for a long info
00001084  6700 0016                 63              BEQ         ipt_done
00001088                            64              *inside loop code
00001088  103C 0005                 65              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
0000108C  4E4F                      66              TRAP        #15
0000108E  1C01                      67              MOVE.B      D1,D6
00001090  4EB8 1016                 68              JSR         toHex           *convert the value to hex
00001094  E98F                      69              LSL.L       #4,D7           *Move the hex value one byte left
00001096  DE86                      70              ADD.L       D6,D7           *append the character to the input
00001098                            71              *loop code done
00001098  5204                      72  cont        ADDQ.B      #1,D4           *increment the counter
0000109A  60E6                      73              BRA         input_loop
0000109C                            74              
0000109C                            75              
0000109C                            76  ipt_done    *provide a new line
0000109C  43F9 0000841E             77              LEA         SPACE, A1
000010A2  103C 000E                 78              MOVE.B      #14, D0
000010A6  4E4F                      79              TRAP        #15
000010A8                            80              *test if there was a non hex value inputted
000010A8  B4BC FFFFFFFF             81              CMP.L       #not_hex,D2
000010AE  6600 0016                 82              BNE         input1pass
000010B2                            83              *else, display message
000010B2  43F9 0000830F             84              LEA         NOT_HEX_MSG, A1
000010B8  103C 000D                 85              MOVE.B      #13, D0
000010BC  4E4F                      86              TRAP        #15
000010BE  243C 00000000             87              MOVE.L      #hex_clear,D2
000010C4  60A8                      88              BRA         INPUT1
000010C6                            89              
000010C6  2607                      90  input1pass  MOVE.L      D7,D3   *move the hex value to D3
000010C8                            91       
000010C8                            92  boundary1:
000010C8                            93              *test if input is on the word boundary
000010C8  2803                      94              MOVE.L      D3,D4
000010CA  88FC 0002                 95              DIVU        #2,D4
000010CE  4244                      96              CLR.W       D4
000010D0  4844                      97              SWAP        D4
000010D2                            98              
000010D2  B8BC 00000000             99              CMP.L       #hex_clear,D4
000010D8  6700 0010                100              BEQ         INPUT2
000010DC                           101              *else, not on boundary
000010DC  43F9 000083D4            102              LEA         BAD_BOUND, A1
000010E2  103C 000D                103              MOVE.B      #13, D0
000010E6  4E4F                     104              TRAP        #15   
000010E8                           105              *go back to start
000010E8  6084                     106              BRA         INPUT1  
000010EA                           107              
000010EA  43F9 000082B9            108  INPUT2      LEA         END_REQUEST, A1
000010F0  103C 000E                109              MOVE.B      #14, D0
000010F4  4E4F                     110              TRAP        #15
000010F6                           111  
000010F6                           112              *------Code for input-----
000010F6  183C 0000                113              MOVE.B      #0,D4           *counter 
000010FA  1A3C 0008                114              MOVE.B      #8,D5
000010FE  BA04                     115  input_loop2 CMP.B       D4,D5           *loop 8 time for a long info
00001100  6700 0016                116              BEQ         ipt_done2
00001104                           117              *inside loop code
00001104  103C 0005                118              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
00001108  4E4F                     119              TRAP        #15
0000110A  1C01                     120              MOVE.B      D1,D6
0000110C  4EB8 1016                121              JSR         toHex           *convert the value to hex
00001110  E98F                     122              LSL.L       #4,D7           *Move the hex value one byte left
00001112  DE86                     123              ADD.L       D6,D7           *append the character to the input
00001114                           124              *loop code done
00001114  5204                     125  cont2       ADDQ.B      #1,D4           *increment the counter
00001116  60E6                     126              BRA         input_loop2
00001118                           127              
00001118                           128              
00001118                           129  ipt_done2   *provide a new line
00001118  43F9 0000841E            130              LEA         SPACE, A1
0000111E  103C 000E                131              MOVE.B      #14, D0
00001122  4E4F                     132              TRAP        #15
00001124                           133              *test if there was a non hex value inputted
00001124  B4BC FFFFFFFF            134              CMP.L       #not_hex,D2
0000112A  6600 0016                135              BNE         input2pass
0000112E                           136              *else, display message
0000112E  43F9 0000830F            137              LEA         NOT_HEX_MSG, A1
00001134  103C 000D                138              MOVE.B      #13, D0
00001138  4E4F                     139              TRAP        #15
0000113A  243C 00000000            140              MOVE.L      #hex_clear,D2
00001140  60A8                     141              BRA         INPUT2
00001142                           142              
00001142  2407                     143  input2pass  MOVE.L      D7,D2   *move the hex value to D2
00001144                           144                          
00001144                           145  boundary2:
00001144                           146              *test if input is on the word boundary
00001144  2802                     147              MOVE.L      D2,D4
00001146  88FC 0002                148              DIVU        #2,D4
0000114A  4244                     149              CLR.W       D4
0000114C  4844                     150              SWAP        D4
0000114E                           151              
0000114E  B8BC 00000000            152              CMP.L       #hex_clear,D4
00001154  6700 0010                153              BEQ         test_ends
00001158                           154              *else, not on boundary
00001158  43F9 000083D4            155              LEA         BAD_BOUND, A1
0000115E  103C 000D                156              MOVE.B      #13, D0
00001162  4E4F                     157              TRAP        #15   
00001164                           158              *go back to start
00001164  6084                     159              BRA         INPUT2  
00001166                           160  
00001166                           161  test_ends:  
00001166                           162              *test if the starting address is less than the ending address
00001166  B483                     163              CMP.L       D3,D2
00001168  6F00 0008                164              BLE         end_bad
0000116C  4CDF 7FF3                165              MOVEM.L      (SP)+,D0-D1/D4-D7/A0-A6
00001170  4E75                     166              RTS
00001172                           167  
00001172                           168  end_bad:    
00001172                           169              *not in correct range
00001172  43F9 00008376            170              LEA         BAD_END, A1
00001178  103C 000D                171              MOVE.B      #13, D0
0000117C  4E4F                     172              TRAP        #15   
0000117E                           173              *go back to start
0000117E  6000 FEEE                174              BRA         INPUT1  
00001182                           175  
00001182                           176      
00001182                           177  
00001182                           178  
00001182                           179  
00001182                           180  
00001182                           181  -------------------- end include --------------------
00001182                           182              INCLUDE 'main_loop.x68'
00001182                           183  main_loop:
00001182  183C 0000                184              MOVE.B      #0,D4           *counter 
00001186  1A3C 001E                185              MOVE.B      #30,D5
0000118A                           186  
0000118A  2043                     187              MOVE.L      D3,A0   *move the starting address to A0
0000118C  5482                     188              ADDQ.L      #2,D2   *add 1 word to ending address so it gets covered
0000118E  2442                     189              MOVE.L      D2,A2   *move the ending address to A2
00001190  B5C8                     190  loopM       CMP.L       A0,A2
00001192  6700 004A                191              BEQ         loopM_done
00001196                           192              *inside loop code
00001196  88FC 001D                193              DIVU        #29,D4      *test if full page has been reached
0000119A  4244                     194              CLR.W       D4
0000119C  4844                     195              SWAP        D4
0000119E  B8BC 00000000            196              CMP.L       #hex_clear,D4
000011A4  6600 002A                197              BNE         loopM_Cont
000011A8                           198              *pause till enter inputted
000011A8                           199              *display the prompt message to the user
000011A8  43F9 00008421            200  entr_lp     LEA         PRESS_ENTER, A1
000011AE  103C 000E                201              MOVE.B      #14, D0
000011B2  4E4F                     202              TRAP        #15
000011B4                           203              *look for enter key
000011B4  103C 0005                204              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
000011B8  4E4F                     205              TRAP        #15
000011BA  B2BC 0000000D            206              CMP.L       #CR,D1          
000011C0  6700 000E                207              BEQ         loopM_Cont      *continue if enter pressed
000011C4  B2BC 0000000A            208              CMP.L       #LF,D1
000011CA  6700 0004                209              BEQ         loopM_Cont
000011CE  60D8                     210              BRA         entr_lp
000011D0                           211              *resume
000011D0  3010                     212  loopM_Cont  MOVE.W      (A0),D0 *move the opcode into D0 for testing
000011D2  4EB9 0000208C            213              JSR         opcode_subroutine
000011D8                           214              *loop code end
000011D8  5448                     215              ADDQ        #2,A0   *move the pointer one word
000011DA  5244                     216              ADDQ        #1,D4   *add one to the output counter
000011DC  60B2                     217              BRA         loopM   
000011DE                           218                
000011DE                           219              *ask if the user wants to test again  
000011DE  43F9 0000843E            220  loopM_done  LEA         RESTART_Q, A1
000011E4  103C 000D                221              MOVE.B      #13, D0
000011E8  4E4F                     222              TRAP        #15
000011EA                           223              *look for q or r key
000011EA  103C 0005                224              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
000011EE  4E4F                     225              TRAP        #15
000011F0  B2BC 00000072            226              CMP.L       #RT,D1          
000011F6  6700 000E                227              BEQ         run_again       *r pressed, restart
000011FA  B2BC 00000071            228              CMP.L       #QT,D1
00001200  6700 0014                229              BEQ         exit_loop       *q pressed, exit
00001204  60D8                     230              BRA         loopM_done      *neither, ask again
00001206                           231             
00001206                           232  run_again   *print new line
00001206  43F9 0000841E            233              LEA         SPACE,A1
0000120C  103C 000E                234              MOVE.B      #14,D0              *move number 14 into d0 for string
00001210  4E4F                     235              TRAP        #15                 *print the data
00001212  4EB8 1006                236              JSR         run_prog   *go back for input
00001216                           237              
00001216  4E75                     238  exit_loop   RTS
00001218                           239  
00001218                           240  
00001218                           241  
00001218                           242  
00001218                           243  -------------------- end include --------------------
00001218                           244              INCLUDE 'output.x68'
00001218                           245  print_string:
00001218  48E7 FFFE                246      MOVEM.L     D0-D7/A0-A6, -(SP)
0000121C  103C 000E                247      MOVE.B      #14,D0              *move number 14 into d0 for string plus
00001220  4E4F                     248      TRAP        #15
00001222  4CDF 7FFF                249      MOVEM.L     (SP)+, D0-D7/A0-A6
00001226  4E75                     250      RTS
00001228                           251      
00001228                           252  print_hex:
00001228  48E7 FFFE                253      MOVEM.L     D0-D7/A0-A6, -(SP)
0000122C  103C 000F                254      MOVE.B      #15,D0
00001230  143C 0010                255      MOVE.B      #16,D2          *display in base 16 (hex)
00001234  4E4F                     256      TRAP        #15
00001236  4CDF 7FFF                257      MOVEM.L     (SP)+, D0-D7/A0-A6
0000123A  4E75                     258      RTS
0000123C                           259  
0000123C                           260  print_string_op_nn:
0000123C  48E7 FFFE                261      MOVEM.L     D0-D7/A0-A6, -(SP)
00001240  3600                     262      MOVE.W      D0,D3           *move full opcode to D2 temporarily
00001242  2449                     263      MOVEA.L     A1,A2           *move string into A2 temp
00001244                           264      *print the line number
00001244  4EB9 000013B4            265      JSR         print_line_number
0000124A                           266      *print a tab
0000124A  43F9 0000843C            267      LEA         TAB,A1
00001250  103C 000E                268      MOVE.B      #14,D0              *move number 14 into d0 for string
00001254  4E4F                     269      TRAP        #15                 *print the data
00001256                           270      *print data
00001256  224A                     271      MOVE.L      A2,A1
00001258  103C 000E                272      MOVE.B      #14,D0              *move number 14 into d0 for string
0000125C  4E4F                     273      TRAP        #15                 *print the data
0000125E                           274      *print a tab
0000125E  43F9 0000843C            275      LEA         TAB,A1
00001264  103C 000E                276      MOVE.B      #14,D0              *move number 14 into d0 for string
00001268  4E4F                     277      TRAP        #15                 *print the data
0000126A                           278      
0000126A  4CDF 7FFF                279      MOVEM.L     (SP)+, D0-D7/A0-A6
0000126E  4E75                     280      RTS
00001270                           281  
00001270                           282  
00001270                           283  print_string_op_nl:
00001270  48E7 FFFE                284      MOVEM.L     D0-D7/A0-A6, -(SP)
00001274  3600                     285      MOVE.W      D0,D3           *move full opcode to D2 temporarily
00001276  2449                     286      MOVEA.L     A1,A2           *move string into A2 temp
00001278                           287      *print the line number
00001278  4EB9 000013B4            288      JSR         print_line_number
0000127E                           289      *print a tab
0000127E  43F9 0000843C            290      LEA         TAB,A1
00001284  103C 000E                291      MOVE.B      #14,D0              *move number 14 into d0 for string
00001288  4E4F                     292      TRAP        #15                 *print the data
0000128A                           293      *print data
0000128A  224A                     294      MOVE.L      A2,A1
0000128C  103C 000E                295      MOVE.B      #14,D0              *move number 14 into d0 for string
00001290  4E4F                     296      TRAP        #15                 *print the data
00001292                           297      *print new line
00001292  43F9 0000841E            298      LEA         SPACE,A1
00001298  103C 000E                299      MOVE.B      #14,D0              *move number 14 into d0 for string
0000129C  4E4F                     300      TRAP        #15                 *print the data
0000129E                           301      
0000129E  4CDF 7FFF                302      MOVEM.L     (SP)+, D0-D7/A0-A6
000012A2  4E75                     303      RTS
000012A4                           304  
000012A4                           305  print_string_sized:
000012A4  48E7 FFFE                306      MOVEM.L     D0-D7/A0-A6, -(SP)
000012A8  2601                     307      MOVE.L      D1,D3           *move full opcode to D2 temporarily
000012AA  2449                     308      MOVEA.L     A1,A2           *move string into A2 temp
000012AC                           309      *print the line number
000012AC  4EB9 000013B4            310      JSR         print_line_number
000012B2                           311      *print a tab
000012B2  43F9 0000843C            312      LEA         TAB,A1
000012B8  103C 000E                313      MOVE.B      #14,D0              *move number 14 into d0 for string
000012BC  4E4F                     314      TRAP        #15                 *print the data
000012BE                           315      *print data
000012BE  224A                     316      MOVE.L      A2,A1
000012C0  103C 000E                317      MOVE.B      #14,D0              *move number 14 into d0 for string
000012C4  4E4F                     318      TRAP        #15                 *print the data
000012C6                           319      *print a tab
000012C6  43F9 0000843C            320      LEA         TAB,A1
000012CC  103C 000E                321      MOVE.B      #14,D0              *move number 14 into d0 for string
000012D0  4E4F                     322      TRAP        #15                 *print the data
000012D2                           323      *print opcode
000012D2  2201                     324      MOVE.L      D1,D1
000012D4  103C 000F                325      MOVE.B      #15,D0
000012D8  143C 0010                326      MOVE.B      #16,D2          *display in base 16 (hex)
000012DC  4E4F                     327      TRAP        #15
000012DE                           328      *print new line
000012DE  43F9 0000841E            329      LEA         SPACE,A1
000012E4  103C 000E                330      MOVE.B      #14,D0              *move number 14 into d0 for string
000012E8  4E4F                     331      TRAP        #15                 *print the data
000012EA                           332      
000012EA  4CDF 7FFF                333      MOVEM.L     (SP)+, D0-D7/A0-A6
000012EE  4E75                     334      RTS
000012F0                           335  
000012F0                           336  print_data:
000012F0  48E7 FFFE                337      MOVEM.L     D0-D7/A0-A6, -(SP)
000012F4  3600                     338      MOVE.W      D0,D3           *move full opcode to D2 temporarily
000012F6  2449                     339      MOVEA.L     A1,A2           *move string into A2 temp
000012F8                           340      *print the line number
000012F8  4EB9 000013B4            341      JSR         print_line_number
000012FE                           342      *print a tab
000012FE  43F9 0000843C            343      LEA         TAB,A1
00001304  103C 000E                344      MOVE.B      #14,D0              *move number 14 into d0 for string
00001308  4E4F                     345      TRAP        #15                 *print the data
0000130A                           346      *print data
0000130A  224A                     347      MOVE.L      A2,A1
0000130C  103C 000E                348      MOVE.B      #14,D0              *move number 14 into d0 for string
00001310  4E4F                     349      TRAP        #15                 *print the data
00001312                           350      *print a tab
00001312  43F9 0000843C            351      LEA         TAB,A1
00001318  103C 000E                352      MOVE.B      #14,D0              *move number 14 into d0 for string
0000131C  4E4F                     353      TRAP        #15                 *print the data
0000131E                           354      *print $
0000131E  43F9 00008566            355      LEA         ea_$,A1
00001324  103C 000E                356      MOVE.B      #14,D0              *move number 14 into d0 for string
00001328  4E4F                     357      TRAP        #15                 *print the data
0000132A                           358      *print opcode
0000132A  4EB9 0000140A            359      JSR         print_opcode_word   *print the opcode in 4 digits
00001330                           360      *print new line
00001330  43F9 0000841E            361      LEA         SPACE,A1
00001336  103C 000E                362      MOVE.B      #14,D0              *move number 14 into d0 for string
0000133A  4E4F                     363      TRAP        #15                 *print the data
0000133C                           364      
0000133C  4CDF 7FFF                365      MOVEM.L     (SP)+, D0-D7/A0-A6
00001340  4E75                     366      RTS
00001342                           367  
00001342                           368  print_bcc:
00001342  48E7 FFFE                369      MOVEM.L     D0-D7/A0-A6, -(SP)
00001346  2803                     370      MOVE.L      D3,D4
00001348  3600                     371      MOVE.W      D0,D3           *move full opcode to D2 temporarily
0000134A  2449                     372      MOVEA.L     A1,A2           *move string into A2 temp
0000134C                           373      *print the line number
0000134C  4EB9 000013B4            374      JSR         print_line_number
00001352                           375      *print a tab
00001352  43F9 0000843C            376      LEA         TAB,A1
00001358  103C 000E                377      MOVE.B      #14,D0              *move number 14 into d0 for string
0000135C  4E4F                     378      TRAP        #15                 *print the data
0000135E                           379      *print data
0000135E  224A                     380      MOVE.L      A2,A1
00001360  103C 000E                381      MOVE.B      #14,D0              *move number 14 into d0 for string
00001364  4E4F                     382      TRAP        #15                 *print the data
00001366                           383      *print a tab
00001366  43F9 0000843C            384      LEA         TAB,A1
0000136C  103C 000E                385      MOVE.B      #14,D0              *move number 14 into d0 for string
00001370  4E4F                     386      TRAP        #15                 *print the data
00001372                           387      *print displaced address
00001372  2604                     388      MOVE.L      D4,D3
00001374  4EB9 0000138C            389      JSR         print_displacedAddress
0000137A                           390      *print new line
0000137A  43F9 0000841E            391      LEA         SPACE,A1
00001380  103C 000E                392      MOVE.B      #14,D0              *move number 14 into d0 for string
00001384  4E4F                     393      TRAP        #15                 *print the data
00001386                           394      
00001386  4CDF 7FFF                395      MOVEM.L     (SP)+, D0-D7/A0-A6
0000138A  4E75                     396      RTS
0000138C                           397  
0000138C                           398  print_displacedAddress:
0000138C  48E7 FFFE                399              MOVEM.L     D0-D7/A0-A6, -(SP)
00001390  7800                     400              MOVE.L      #0,D4           *counter 
00001392  7A08                     401              MOVE.L      #8,D5
00001394  4281                     402              CLR.L       D1
00001396  700F                     403              MOVE.L      #15,D0
00001398  7410                     404              MOVE.L      #16,D2          *display in base 16 (hex)
0000139A  BA04                     405  disp_loop   CMP.B       D4,D5           *loop 8 time for a long of info
0000139C  6700 0010                406              BEQ         disp_done
000013A0                           407              *inside loop code
000013A0  E99B                     408              ROL.L       #4,D3          *rotate bits so last is first
000013A2  1203                     409              MOVE.B      D3,D1
000013A4  E909                     410              LSL.B       #4,D1           *rotate left then right to get rid 
000013A6  E809                     411              LSR.B       #4,D1           *of the other character
000013A8  4E4F                     412              TRAP        #15             *print 1 hex character
000013AA                           413              
000013AA                           414              *loop code done
000013AA  5204                     415              ADDQ.B  #1,D4           *increment the counter
000013AC  60EC                     416              BRA     disp_loop
000013AE                           417              
000013AE  4CDF 7FFF                418  disp_done   MOVEM.L     (SP)+, D0-D7/A0-A6
000013B2  4E75                     419              RTS
000013B4                           420  
000013B4                           421  print_line_number:
000013B4  48E7 FFFE                422              MOVEM.L     D0-D7/A0-A6, -(SP)
000013B8  2608                     423              MOVE.L      A0,D3
000013BA  7800                     424              MOVE.L      #0,D4           *counter 
000013BC  7A08                     425              MOVE.L      #8,D5
000013BE  4281                     426              CLR.L       D1
000013C0  700F                     427              MOVE.L      #15,D0
000013C2  7410                     428              MOVE.L      #16,D2          *display in base 16 (hex)
000013C4  BA04                     429  line_loop   CMP.B       D4,D5           *loop 2 time for a byte of info
000013C6  6700 0010                430              BEQ         line_done
000013CA                           431              *inside loop code
000013CA  E99B                     432              ROL.L       #4,D3          *rotate bits so last is first
000013CC  1203                     433              MOVE.B      D3,D1
000013CE  E909                     434              LSL.B       #4,D1           *rotate left then right to get rid 
000013D0  E809                     435              LSR.B       #4,D1           *of the other character
000013D2  4E4F                     436              TRAP        #15             *print 1 hex character
000013D4                           437              
000013D4                           438              *loop code done
000013D4  5204                     439              ADDQ.B  #1,D4           *increment the counter
000013D6  60EC                     440              BRA     line_loop
000013D8                           441              
000013D8  4CDF 7FFF                442  line_done   MOVEM.L     (SP)+, D0-D7/A0-A6
000013DC  4E75                     443              RTS
000013DE                           444              
000013DE                           445  print_eat:
000013DE  48E7 FFFE                446      MOVEM.L     D0-D7/A0-A6, -(SP)
000013E2                           447      *print data
000013E2  103C 000E                448      MOVE.B      #14,D0              *move number 14 into d0 for string
000013E6  4E4F                     449      TRAP        #15                 *print the data
000013E8  4CDF 7FFF                450      MOVEM.L     (SP)+, D0-D7/A0-A6
000013EC  4E75                     451      RTS
000013EE                           452      
000013EE                           453  print_ea:
000013EE  48E7 FFFE                454      MOVEM.L     D0-D7/A0-A6, -(SP)
000013F2                           455      *print data
000013F2  103C 000E                456      MOVE.B      #14,D0              *move number 14 into d0 for string
000013F6  4E4F                     457      TRAP        #15                 *print the data in A1
000013F8                           458      *print new line
000013F8  43F9 0000841E            459      LEA         SPACE,A1
000013FE  103C 000E                460      MOVE.B      #14,D0              *move number 14 into d0 for string
00001402  4E4F                     461      TRAP        #15                 *print the data
00001404  4CDF 7FFF                462      MOVEM.L     (SP)+, D0-D7/A0-A6
00001408  4E75                     463      RTS
0000140A                           464  
0000140A                           465  print_opcode_word:
0000140A  48E7 FFFE                466              MOVEM.L     D0-D7/A0-A6, -(SP)
0000140E                           467              *MOVE.L      A0,D3
0000140E  7800                     468              MOVE.L      #0,D4           *counter 
00001410  7A04                     469              MOVE.L      #4,D5
00001412  4281                     470              CLR.L       D1
00001414  700F                     471              MOVE.L      #15,D0
00001416  7410                     472              MOVE.L      #16,D2          *display in base 16 (hex)
00001418  BA04                     473  opWd_loop   CMP.B       D4,D5           *loop 4 time for a word of info
0000141A  6700 0010                474              BEQ         opWd_done
0000141E                           475              *inside loop code
0000141E  E95B                     476              ROL.W       #4,D3          *rotate bits so last is first
00001420  1203                     477              MOVE.B      D3,D1
00001422  E909                     478              LSL.B       #4,D1           *rotate left then right to get rid 
00001424  E809                     479              LSR.B       #4,D1           *of the other character
00001426  4E4F                     480              TRAP        #15             *print 1 hex character
00001428                           481              
00001428                           482              *loop code done
00001428  5204                     483              ADDQ.B      #1,D4           *increment the counter
0000142A  60EC                     484              BRA         opWd_loop
0000142C                           485              
0000142C  4CDF 7FFF                486  opWd_done   MOVEM.L     (SP)+, D0-D7/A0-A6
00001430  4E75                     487              RTS
00001432                           488  
00001432                           489  
00001432                           490  
00001432                           491  
00001432                           492  
00001432                           493  
00001432                           494  
00001432                           495  
00001432                           496  -------------------- end include --------------------
00001432                           497              INCLUDE 'opcode_size.X68'
00001432                           498  movea_size:
00001432  48E7 FDFE                499          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001436  3200                     500          MOVE.W      D0,D1           *put the full opcode into D1
00001438  C27C 3000                501          AND.W       #mask_size_MOVES,D1 *mask to only see the size bits
0000143C                           502          
0000143C                           503          *test for word size
0000143C  B27C 3000                504  MA_W    CMP.W       #m_size_W_MOVES,D1
00001440  6600 0020                505          BNE         MA_L
00001444  43F9 0000802D            506          LEA         opcode_MOVEAW,A1
0000144A  1C3C 0002                507          MOVE.B      #word_size,D6
0000144E  4EB8 123C                508          JSR         print_string_op_nn  *print the opcode
00001452  3200                     509          MOVE.W      D0,D1               *reload the opcode into D1
00001454  4EB9 000067BA            510          JSR         MOVEA_sub
0000145A  4EB8 13EE                511          JSR         print_ea
0000145E  6000 002E                512          BRA         MA_END
00001462                           513          
00001462                           514          *test for long size
00001462  B27C 2000                515  MA_L    CMP.W       #m_size_L_MOVES,D1
00001466  6600 0020                516          BNE         MA_FAIL
0000146A  43F9 00008035            517          LEA         opcode_MOVEAL,A1
00001470  1C3C 0003                518          MOVE.B      #long_size,D6
00001474  4EB8 123C                519          JSR         print_string_op_nn  *print the opcode
00001478  3200                     520          MOVE.W      D0,D1               *reload the opcode into D1
0000147A  4EB9 000067BA            521          JSR         MOVEA_sub
00001480  4EB8 13EE                522          JSR         print_ea
00001484  6000 0008                523          BRA         MA_END
00001488                           524          
00001488                           525          *did not match, its data
00001488  4EB9 0000237E            526  MA_FAIL JSR         op_DATA
0000148E                           527          
0000148E  4CDF 7FBF                528  MA_END  MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001492  4E75                     529          RTS
00001494                           530  
00001494                           531  move_size:
00001494  48E7 FDFE                532          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001498  3200                     533          MOVE.W      D0,D1           *put the full opcode into D1
0000149A  C27C 3000                534          AND.W       #mask_size_MOVES,D1 *mask to only see the size bits
0000149E                           535          
0000149E                           536          *test for byte size
0000149E  B27C 1000                537          CMP.W       #m_size_B_MOVES,D1
000014A2  6600 0020                538          BNE         M_W
000014A6  43F9 00008004            539          LEA         opcode_MOVEB,A1    *move the value for printing
000014AC  1C3C 0001                540          MOVE.B      #byte_size,D6
000014B0  4EB8 123C                541          JSR         print_string_op_nn  *print the opcode
000014B4  3200                     542          MOVE.W      D0,D1               *reload full address
000014B6  4EB9 00004878            543          JSR         MOVE_sub
000014BC  4EB8 13EE                544          JSR         print_ea
000014C0  6000 0054                545          BRA         M_END
000014C4                           546          
000014C4                           547          *test for word size
000014C4  B27C 3000                548  M_W     CMP.W       #m_size_W_MOVES,D1
000014C8  6600 0020                549          BNE         M_L
000014CC  43F9 0000800B            550          LEA         opcode_MOVEW,A1
000014D2  1C3C 0002                551          MOVE.B      #word_size,D6
000014D6  4EB8 123C                552          JSR         print_string_op_nn  *print the opcode
000014DA  3200                     553          MOVE.W      D0,D1               *reload full address
000014DC  4EB9 00004878            554          JSR         MOVE_sub
000014E2  4EB8 13EE                555          JSR         print_ea
000014E6  6000 002E                556          BRA         M_END
000014EA                           557          
000014EA                           558          *test for long size
000014EA  B27C 2000                559  M_L     CMP.W       #m_size_L_MOVES,D1
000014EE  6600 0020                560          BNE         M_FAIL
000014F2  43F9 00008012            561          LEA         opcode_MOVEL,A1
000014F8  1C3C 0003                562          MOVE.B      #long_size,D6
000014FC  4EB8 123C                563          JSR         print_string_op_nn  *print the opcode
00001500  3200                     564          MOVE.W      D0,D1               *reload full address
00001502  4EB9 00004878            565          JSR         MOVE_sub
00001508  4EB8 13EE                566          JSR         print_ea
0000150C  6000 0008                567          BRA         M_END
00001510                           568          
00001510  4EB9 0000237E            569  M_FAIL  JSR         op_DATA
00001516                           570          
00001516  4CDF 7FBF                571  M_END   MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000151A  4E75                     572          RTS
0000151C                           573          
0000151C                           574  movem_rm_size:
0000151C  48E7 FDFE                575          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001520  3200                     576          MOVE.W      D0,D1           *put the full opcode into D1
00001522  C27C 0040                577          AND.W       #mask_size_MOVEM,D1 *mask to only see the size bits
00001526                           578          
00001526                           579          *test for word size
00001526  B27C 0000                580          CMP.W       #m_size_W_MOVEM,D1
0000152A  6600 0020                581          BNE         MOVEM_rm_L 
0000152E  43F9 00008173            582          LEA         opcode_MOVEMW,A1    *move the value for printing
00001534  1C3C 0002                583          MOVE.B      #word_size,D6
00001538  4EB8 123C                584          JSR         print_string_op_nn  *print the opcode
0000153C  3200                     585          MOVE.W      D0,D1               *reload the opcode into D1
0000153E  4EB9 000050A6            586          JSR         MOVEM_sub
00001544  4EB8 13EE                587          JSR         print_ea
00001548  6000 002E                588          BRA         MOVEM_rm_END
0000154C                           589          
0000154C                           590          *test for long size
0000154C                           591  MOVEM_rm_L  
0000154C  B27C 0040                592          CMP.W       #m_size_L_MOVEM,D1
00001550  6600 0020                593          BNE         MOVEM_rm_FAIL
00001554  43F9 0000817B            594          LEA         opcode_MOVEML,A1
0000155A  1C3C 0003                595          MOVE.B      #long_size,D6
0000155E  4EB8 123C                596          JSR         print_string_op_nn  *print the opcode
00001562  3200                     597          MOVE.W      D0,D1               *reload the opcode into D1
00001564  4EB9 000050A6            598          JSR         MOVEM_sub
0000156A  4EB8 13EE                599          JSR         print_ea
0000156E  6000 0008                600          BRA         MOVEM_rm_END
00001572                           601          
00001572                           602  MOVEM_rm_FAIL 
00001572  4EB9 0000237E            603          JSR         op_DATA
00001578                           604  
00001578                           605  MOVEM_rm_END 
00001578  4CDF 7FBF                606          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000157C  4E75                     607          RTS
0000157E                           608  
0000157E                           609  movem_mr_size:
0000157E  48E7 FDFE                610          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001582  3200                     611          MOVE.W      D0,D1           *put the full opcode into D1
00001584  C27C 0040                612          AND.W       #mask_size_MOVEM,D1 *mask to only see the size bits
00001588                           613          
00001588                           614          *test for word size
00001588  B27C 0000                615          CMP.W       #m_size_W_MOVEM,D1
0000158C  6600 0020                616          BNE         MOVEM_mr_L
00001590  43F9 00008173            617          LEA         opcode_MOVEMW,A1    *move the value for printing
00001596  1C3C 0002                618          MOVE.B      #word_size,D6
0000159A  4EB8 123C                619          JSR         print_string_op_nn  *print the opcode
0000159E  3200                     620          MOVE.W      D0,D1               *reload the opcode into D1
000015A0  4EB9 000050A6            621          JSR         MOVEM_sub
000015A6  4EB8 13EE                622          JSR         print_ea
000015AA  6000 002E                623          BRA         MOVEM_mr_END
000015AE                           624          
000015AE                           625          *test for long size
000015AE                           626  MOVEM_mr_L  
000015AE  B27C 0040                627          CMP.W       #m_size_L_MOVEM,D1
000015B2  6600 0020                628          BNE         MOVEM_mr_FAIL
000015B6  43F9 0000817B            629          LEA         opcode_MOVEML,A1
000015BC  1C3C 0003                630          MOVE.B      #long_size,D6
000015C0  4EB8 123C                631          JSR         print_string_op_nn  *print the opcode
000015C4  3200                     632          MOVE.W      D0,D1               *reload the opcode into D1
000015C6  4EB9 000050A6            633          JSR         MOVEM_sub
000015CC  4EB8 13EE                634          JSR         print_ea
000015D0  6000 0008                635          BRA         MOVEM_mr_END
000015D4                           636          
000015D4                           637  MOVEM_mr_FAIL 
000015D4  4EB9 0000237E            638          JSR         op_DATA
000015DA                           639  
000015DA                           640  MOVEM_mr_END 
000015DA  4CDF 7FBF                641          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000015DE  4E75                     642          RTS
000015E0                           643  
000015E0                           644          
000015E0                           645  nop_size:
000015E0  48E7 FDFE                646          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000015E4  43F9 0000803D            647          LEA         opcode_NOP,A1
000015EA  1C3C 0000                648          MOVE.B      #no_size,D6
000015EE  4EB8 1270                649          JSR         print_string_op_nl  *print the opcode
000015F2  4CDF 7FBF                650          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000015F6  4E75                     651          RTS
000015F8                           652          
000015F8                           653  rts_size:
000015F8  48E7 FDFE                654          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000015FC  43F9 0000815F            655          LEA         opcode_RTS,A1
00001602  1C3C 0000                656          MOVE.B      #no_size,D6
00001606  4EB8 1270                657          JSR         print_string_op_nl  *print the opcode
0000160A  4CDF 7FBF                658          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000160E  4E75                     659          RTS
00001610                           660          
00001610                           661          
00001610                           662  lea_size:
00001610  48E7 FDFE                663          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001614  43F9 00008088            664          LEA         opcode_LEA,A1
0000161A  1C3C 0003                665          MOVE.B      #long_size,D6
0000161E  4EB8 123C                666          JSR         print_string_op_nn  *print the opcode
00001622  3200                     667          MOVE.W      D0,D1               *reload the opcode into D1
00001624  4EB9 00004694            668          JSR         LEA_sub
0000162A  4EB8 13EE                669          JSR         print_ea
0000162E  4CDF 7FBF                670          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001632  4E75                     671          RTS
00001634                           672          
00001634                           673  jsr_size:
00001634  48E7 FDFE                674          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001638  43F9 0000815B            675          LEA         opcode_JSR,A1
0000163E  1C3C 0000                676          MOVE.B      #no_size,D6
00001642  4EB8 123C                677          JSR         print_string_op_nn  *print the opcode
00001646  3200                     678          MOVE.W      D0,D1               *reload the opcode into D1
00001648  4EB9 00004590            679          JSR         JSR_sub
0000164E  4EB8 13EE                680          JSR         print_ea
00001652  4CDF 7FBF                681          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001656  4E75                     682          RTS
00001658                           683          
00001658                           684  not_size:
00001658  48E7 FDFE                685          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000165C  3200                     686          MOVE.W      D0,D1           *put the full opcode into D1
0000165E  C27C 00C0                687          AND.W       #mask_size_NOT,D1 *mask to only see the size bits
00001662                           688          
00001662                           689          *test for byte size
00001662  B27C 0000                690          CMP.W       #m_size_B_NOT,D1
00001666  6600 0020                691          BNE         NOT_W
0000166A  43F9 000080AD            692          LEA         opcode_NOTB,A1    *move the value for printing
00001670  1C3C 0001                693          MOVE.B      #byte_size,D6
00001674  4EB8 123C                694          JSR         print_string_op_nn  *print the opcode
00001678  3200                     695          MOVE.W      D0,D1               *reload the opcode into D1
0000167A  4EB9 00006E6C            696          JSR         NOT_sub
00001680  4EB8 13EE                697          JSR         print_ea
00001684  6000 0054                698          BRA         NOT_END
00001688                           699          
00001688                           700          *test for word size
00001688  B27C 0040                701  NOT_W   CMP.W       #m_size_W_NOT,D1
0000168C  6600 0020                702          BNE         NOT_L
00001690  43F9 000080B3            703          LEA         opcode_NOTW,A1
00001696  1C3C 0002                704          MOVE.B      #word_size,D6
0000169A  4EB8 123C                705          JSR         print_string_op_nn  *print the opcode
0000169E  3200                     706          MOVE.W      D0,D1               *reload the opcode into D1
000016A0  4EB9 00006E6C            707          JSR         NOT_sub
000016A6  4EB8 13EE                708          JSR         print_ea
000016AA  6000 002E                709          BRA         NOT_END
000016AE                           710          
000016AE                           711          *test for long size
000016AE  B27C 0080                712  NOT_L   CMP.W       #m_size_L_NOT,D1
000016B2  6600 0020                713          BNE         NOT_FAIL
000016B6  43F9 000080B9            714          LEA         opcode_NOTL,A1
000016BC  1C3C 0003                715          MOVE.B      #long_size,D6
000016C0  4EB8 123C                716          JSR         print_string_op_nn  *print the opcode
000016C4  3200                     717          MOVE.W      D0,D1               *reload the opcode into D1
000016C6  4EB9 00006E6C            718          JSR         NOT_sub
000016CC  4EB8 13EE                719          JSR         print_ea
000016D0  6000 0008                720          BRA         NOT_END
000016D4                           721          
000016D4                           722          *does not match any
000016D4  4EB9 0000237E            723  NOT_FAIL JSR         op_DATA
000016DA                           724          
000016DA  4CDF 7FBF                725  NOT_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000016DE  4E75                     726          RTS
000016E0                           727  
000016E0                           728  
000016E0                           729  adda_size:
000016E0  48E7 FDFE                730          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000016E4  3200                     731          MOVE.W      D0,D1           *put the full opcode into D1
000016E6  C27C 0100                732          AND.W       #mask_size_ADDA,D1 *mask to only see the size bits
000016EA                           733          
000016EA                           734          *test for word size
000016EA  B27C 0000                735          CMP.W       #m_size_W_ADDA,D1
000016EE  6600 0020                736          BNE         ADDA_L
000016F2  43F9 00008053            737          LEA         opcode_ADDAW,A1    *move the value for printing
000016F8  1C3C 0002                738          MOVE.B      #word_size,D6
000016FC  4EB8 123C                739          JSR         print_string_op_nn  *print the opcode
00001700  3200                     740          MOVE.W      D0,D1               *reload the opcode into D1
00001702  4EB9 000035B8            741          JSR         ADDA_sub
00001708  4EB8 13EE                742          JSR         print_ea
0000170C  6000 002E                743          BRA         ADDA_END
00001710                           744          
00001710                           745          *test for long size
00001710  B27C 0100                746  ADDA_L  CMP.W       #m_size_L_ADDA,D1
00001714  6600 0020                747          BNE         ADDA_FAIL
00001718  43F9 0000805A            748          LEA         opcode_ADDAL,A1
0000171E  1C3C 0003                749          MOVE.B      #long_size,D6
00001722  4EB8 123C                750          JSR         print_string_op_nn  *print the opcode
00001726  3200                     751          MOVE.W      D0,D1               *reload the opcode into D1
00001728  4EB9 000035B8            752          JSR         ADDA_sub
0000172E  4EB8 13EE                753          JSR         print_ea
00001732  6000 0008                754          BRA         ADDA_END
00001736                           755          
00001736  4EB9 0000237E            756  ADDA_FAIL JSR         op_DATA
0000173C                           757  
0000173C  4CDF 7FBF                758  ADDA_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001740  4E75                     759          RTS
00001742                           760          
00001742                           761  add_size:
00001742  48E7 FDFE                762          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001746  3200                     763          MOVE.W      D0,D1           *put the full opcode into D1
00001748  C27C 00C0                764          AND.W       #mask_size_ADD,D1 *mask to only see the size bits
0000174C                           765          
0000174C                           766          *test for byte size
0000174C  B27C 0000                767          CMP.W       #m_size_B_ADD,D1
00001750  6600 0020                768          BNE         ADD_W
00001754  43F9 00008041            769          LEA         opcode_ADDB,A1    *move the value for printing
0000175A  1C3C 0001                770          MOVE.B      #byte_size,D6
0000175E  4EB8 123C                771          JSR         print_string_op_nn  *print the opcode
00001762  3200                     772          MOVE.W      D0,D1               *reload the opcode into D1
00001764  4EB9 00002394            773          JSR         ADD_ADD             *calculate ea and print
0000176A  4EB8 13EE                774          JSR         print_ea
0000176E  6000 0054                775          BRA         ADD_END
00001772                           776          
00001772                           777          *test for word size
00001772  B27C 0040                778  ADD_W   CMP.W       #m_size_W_ADD,D1
00001776  6600 0020                779          BNE         ADD_L
0000177A  43F9 00008047            780          LEA         opcode_ADDW,A1
00001780  1C3C 0002                781          MOVE.B      #word_size,D6
00001784  4EB8 123C                782          JSR         print_string_op_nn  *print the opcode
00001788  3200                     783          MOVE.W      D0,D1               *reload the opcode into D1
0000178A  4EB9 00002394            784          JSR         ADD_ADD             *calculate ea and print
00001790  4EB8 13EE                785          JSR         print_ea
00001794  6000 002E                786          BRA         ADD_END
00001798                           787          
00001798                           788          *test for long size
00001798  B27C 0080                789  ADD_L   CMP.W       #m_size_L_ADD,D1
0000179C  6600 0020                790          BNE         ADD_FAIL
000017A0  43F9 0000804D            791          LEA         opcode_ADDL,A1
000017A6  1C3C 0003                792          MOVE.B      #long_size,D6
000017AA  4EB8 123C                793          JSR         print_string_op_nn  *print the opcode
000017AE  3200                     794          MOVE.W      D0,D1               *reload the opcode into D1
000017B0  4EB9 00002394            795          JSR         ADD_ADD             *calculate ea and print
000017B6  4EB8 13EE                796          JSR         print_ea
000017BA  6000 0008                797          BRA         ADD_END
000017BE                           798          
000017BE  4EB9 0000237E            799  ADD_FAIL JSR         op_DATA
000017C4                           800          
000017C4  4CDF 7FBF                801  ADD_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000017C8  4E75                     802          RTS
000017CA                           803  
000017CA                           804  bcc_size:
000017CA  48E7 FDFE                805          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000017CE  3200                     806          MOVE.W      D0,D1           *refresh the entire opcode into D1
000017D0  C27C 00FF                807          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
000017D4                           808          
000017D4                           809          *test for long displacement size
000017D4  B27C 00FF                810  BCC_L   CMP.W       #m_size_L_bcc,D1
000017D8  6600 000E                811          BNE         BCC_W
000017DC                           812          *grab the next 32 bits
000017DC  2210                     813          MOVE.L      (A0),D1         *move the long value into D1
000017DE  5848                     814          ADDQ        #4,A0           *increment the pointer by 1 long
000017E0  4EB8 12A4                815          JSR         print_string_sized  *print the output
000017E4  6000 001E                816          BRA         BCC_END
000017E8                           817          
000017E8                           818          *test for word displacement size
000017E8  B27C 0000                819  BCC_W   CMP.W       #m_size_W_bcc,D1
000017EC  6600 000E                820          BNE         BCC_B
000017F0                           821          *grab the next 16 bits
000017F0  3210                     822          MOVE.W      (A0),D1         *move the long value into D1
000017F2  5448                     823          ADDQ        #2,A0           *increment the pointer by 1 word
000017F4  4EB8 12A4                824          JSR         print_string_sized  *print the output
000017F8  6000 000A                825          BRA         BCC_END
000017FC                           826          
000017FC                           827          *neither so it is byte size, print byte
000017FC  4EB8 1270                828  BCC_B   JSR         print_string_op_nl
00001800  6000 0002                829          BRA         BCC_END
00001804                           830          
00001804  4CDF 7FBF                831  BCC_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001808  4E75                     832          RTS
0000180A                           833  
0000180A                           834  
0000180A                           835  bgt_size:
0000180A  48E7 FDFE                836          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000180E  3200                     837          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001810  C27C 00FF                838          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001814                           839          
00001814                           840          *test for long displacement size
00001814  B27C 00FF                841  BGT_L   CMP.W       #m_size_L_bcc,D1
00001818  6600 001E                842          BNE         BGT_W
0000181C  43F9 0000812B            843          LEA         opcode_BGT,A1
00001822                           844          *grab the next 32 bits
00001822  5448                     845          ADDQ        #2,A0           *increment the pointer by 1 word
00001824  2610                     846          MOVE.L      (A0),D3         *move the data to D3
00001826  2408                     847          MOVE.L      A0,D2           *move the address location to D2
00001828  5448                     848          ADDQ        #2,A0           *increment the pointer by another 1 word
0000182A  4EB9 000019E2            849          JSR         bcc_address
00001830  4EB8 1342                850          JSR         print_bcc       *print the output
00001834  6000 0044                851          BRA         BGT_END
00001838                           852          
00001838                           853          *test for word displacement size
00001838  B27C 0000                854  BGT_W   CMP.W       #m_size_W_bcc,D1
0000183C  6600 001E                855          BNE         BGT_B
00001840  43F9 00008135            856          LEA         opcode_BGTW,A1
00001846                           857          *grab the next 16 bits
00001846  5448                     858          ADDQ        #2,A0           *increment the pointer by 1 word
00001848  3610                     859          MOVE.W      (A0),D3         *move the data to D3
0000184A  2408                     860          MOVE.L      A0,D2           *move the address location to D2
0000184C  48C3                     861          EXT.L       D3              *make the word into long
0000184E  4EB9 000019E2            862          JSR         bcc_address
00001854  4EB8 1342                863          JSR         print_bcc       *print the output
00001858  6000 0020                864          BRA         BGT_END
0000185C                           865          
0000185C                           866          *neither so it is byte size, print byte
0000185C  43F9 0000812F            867  BGT_B   LEA         opcode_BGTB,A1
00001862  3610                     868          MOVE.W      (A0),D3         *move the data to D3
00001864  E14B                     869          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
00001866  E04B                     870          LSR.W       #8,D3
00001868  2408                     871          MOVE.L      A0,D2           *move the address location to D2
0000186A  48C3                     872          EXT.L       D3              *make the word into long
0000186C  4EB9 000019E2            873          JSR         bcc_address
00001872  4EB8 1342                874          JSR         print_bcc       *print the output
00001876  6000 0002                875          BRA         BGT_END
0000187A                           876          
0000187A  4CDF 7FBF                877  BGT_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000187E  4E75                     878          RTS
00001880                           879          
00001880                           880  beq_size:
00001880  48E7 FDFE                881          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001884  3200                     882          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001886  C27C 00FF                883          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
0000188A                           884          
0000188A                           885          *test for long displacement size
0000188A  B27C 00FF                886  BEQ_L   CMP.W       #m_size_L_bcc,D1
0000188E  6600 001E                887          BNE         BEQ_W
00001892  43F9 0000814B            888          LEA         opcode_BEQ,A1
00001898                           889          *grab the next 32 bits
00001898  5448                     890          ADDQ        #2,A0           *increment the pointer by 1 word
0000189A  2610                     891          MOVE.L      (A0),D3         *move the data to D3
0000189C  2408                     892          MOVE.L      A0,D2           *move the address location to D2
0000189E  5448                     893          ADDQ        #2,A0           *increment the pointer by another 1 word
000018A0  4EB9 000019E2            894          JSR         bcc_address
000018A6  4EB8 1342                895          JSR         print_bcc       *print the output
000018AA  6000 0044                896          BRA         BEQ_END
000018AE                           897          
000018AE                           898          *test for word displacement size
000018AE  B27C 0000                899  BEQ_W   CMP.W       #m_size_W_bcc,D1
000018B2  6600 001E                900          BNE         BEQ_B
000018B6  43F9 00008155            901          LEA         opcode_BEQW,A1
000018BC                           902          *grab the next 16 bits
000018BC  5448                     903          ADDQ        #2,A0           *increment the pointer by 1 word
000018BE  3610                     904          MOVE.W      (A0),D3         *move the data to D3
000018C0  2408                     905          MOVE.L      A0,D2           *move the address location to D2
000018C2  48C3                     906          EXT.L       D3              *make the word into long
000018C4  4EB9 000019E2            907          JSR         bcc_address
000018CA  4EB8 1342                908          JSR         print_bcc       *print the output
000018CE  6000 0020                909          BRA         BEQ_END
000018D2                           910          
000018D2                           911          *neither so it is byte size, print byte
000018D2  43F9 0000814F            912  BEQ_B   LEA         opcode_BEQB,A1
000018D8  3610                     913          MOVE.W      (A0),D3         *move the data to D3
000018DA  E14B                     914          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
000018DC  E04B                     915          LSR.W       #8,D3
000018DE  2408                     916          MOVE.L      A0,D2           *move the address location to D2
000018E0  48C3                     917          EXT.L       D3              *make the word into long
000018E2  4EB9 000019E2            918          JSR         bcc_address
000018E8  4EB8 1342                919          JSR         print_bcc       *print the output
000018EC  6000 0002                920          BRA         BEQ_END
000018F0                           921          
000018F0  4CDF 7FBF                922  BEQ_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000018F4  4E75                     923          RTS
000018F6                           924          
000018F6                           925  ble_size:
000018F6  48E7 FDFE                926          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000018FA  3200                     927          MOVE.W      D0,D1           *refresh the entire opcode into D1
000018FC  C27C 00FF                928          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001900                           929          
00001900                           930          *test for long displacement size
00001900  B27C 00FF                931  BLE_L   CMP.W       #m_size_L_bcc,D1
00001904  6600 001E                932          BNE         BLE_W
00001908  43F9 0000813B            933          LEA         opcode_BLE,A1
0000190E                           934          *grab the next 32 bits
0000190E  5448                     935          ADDQ        #2,A0           *increment the pointer by 1 word
00001910  2610                     936          MOVE.L      (A0),D3         *move the data to D3
00001912  2408                     937          MOVE.L      A0,D2           *move the address location to D2
00001914  5448                     938          ADDQ        #2,A0           *increment the pointer by another 1 word
00001916  4EB9 000019E2            939          JSR         bcc_address
0000191C  4EB8 1342                940          JSR         print_bcc       *print the output
00001920  6000 0044                941          BRA         BLE_END
00001924                           942          
00001924                           943          *test for word displacement size
00001924  B27C 0000                944  BLE_W   CMP.W       #m_size_W_bcc,D1
00001928  6600 001E                945          BNE         BLE_B
0000192C  43F9 00008145            946          LEA         opcode_BLEW,A1
00001932                           947          *grab the next 16 bits
00001932  5448                     948          ADDQ        #2,A0           *increment the pointer by 1 word
00001934  3610                     949          MOVE.W      (A0),D3         *move the data to D3
00001936  2408                     950          MOVE.L      A0,D2           *move the address location to D2
00001938  48C3                     951          EXT.L       D3              *make the word into long
0000193A  4EB9 000019E2            952          JSR         bcc_address
00001940  4EB8 1342                953          JSR         print_bcc       *print the output
00001944  6000 0020                954          BRA         BLE_END
00001948                           955          
00001948                           956          *neither so it is byte size, print byte
00001948  43F9 0000813F            957  BLE_B   LEA         opcode_BLEB,A1
0000194E  3610                     958          MOVE.W      (A0),D3         *move the data to D3
00001950  E14B                     959          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
00001952  E04B                     960          LSR.W       #8,D3
00001954  2408                     961          MOVE.L      A0,D2           *move the address location to D2
00001956  48C3                     962          EXT.L       D3              *make the word into long
00001958  4EB9 000019E2            963          JSR         bcc_address
0000195E  4EB8 1342                964          JSR         print_bcc       *print the output
00001962  6000 0002                965          BRA         BLE_END
00001966                           966          
00001966  4CDF 7FBF                967  BLE_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000196A  4E75                     968          RTS
0000196C                           969  
0000196C                           970  
0000196C                           971          
0000196C                           972  bra_size:
0000196C  48E7 FDFE                973          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001970  3200                     974          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001972  C27C 00FF                975          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001976                           976          
00001976                           977          *test for long displacement size
00001976  B27C 00FF                978  BRA_L   CMP.W       #m_size_L_bcc,D1
0000197A  6600 001E                979          BNE         BRA_W
0000197E  43F9 00008163            980          LEA         opcode_BRA,A1
00001984                           981          *grab the next 32 bits
00001984  5448                     982          ADDQ        #2,A0           *increment the pointer by 1 word
00001986  2610                     983          MOVE.L      (A0),D3         *move the data to D3
00001988  2408                     984          MOVE.L      A0,D2           *move the address location to D2
0000198A  5448                     985          ADDQ        #2,A0           *increment the pointer by another 1 word
0000198C  4EB9 000019E2            986          JSR         bcc_address
00001992  4EB8 1342                987          JSR         print_bcc       *print the output
00001996  6000 0044                988          BRA         BRA_END
0000199A                           989          
0000199A                           990          *test for word displacement size
0000199A  B27C 0000                991  BRA_W   CMP.W       #m_size_W_bcc,D1
0000199E  6600 001E                992          BNE         BRA_B
000019A2  43F9 0000816D            993          LEA         opcode_BRAW,A1
000019A8                           994          *grab the next 16 bits
000019A8  5448                     995          ADDQ        #2,A0           *increment the pointer by 1 word
000019AA  3610                     996          MOVE.W      (A0),D3         *move the data to D3
000019AC  2408                     997          MOVE.L      A0,D2           *move the address location to D2
000019AE  48C3                     998          EXT.L       D3              *make the word into long
000019B0  4EB9 000019E2            999          JSR         bcc_address
000019B6  4EB8 1342               1000          JSR         print_bcc       *print the output
000019BA  6000 0020               1001          BRA         BRA_END
000019BE                          1002          
000019BE                          1003          *neither so it is byte size, print byte
000019BE  43F9 00008167           1004  BRA_B   LEA         opcode_BRAB,A1
000019C4  3610                    1005          MOVE.W      (A0),D3         *move the data to D3
000019C6  E14B                    1006          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
000019C8  E04B                    1007          LSR.W       #8,D3
000019CA  2408                    1008          MOVE.L      A0,D2           *move the address location to D2
000019CC  48C3                    1009          EXT.L       D3              *make the word into long
000019CE  4EB9 000019E2           1010          JSR         bcc_address
000019D4  4EB8 1342               1011          JSR         print_bcc       *print the output
000019D8  6000 0002               1012          BRA         BRA_END
000019DC                          1013          
000019DC  4CDF 7FBF               1014  BRA_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000019E0  4E75                    1015          RTS
000019E2                          1016  
000019E2                          1017  bcc_address:
000019E2  48E7 EFFE               1018          MOVEM.L     D0-D2/D4-D7/A0-A6, -(SP)
000019E6  B6BC 00000000           1019          CMP.L       #0,D3           *compare against 0
000019EC  6D00 0008               1020          BLT         bcc_negative    *branch if the value is negative
000019F0                          1021          *else
000019F0  D682                    1022          ADD.L       D2,D3           *add address by displacement
000019F2  6000 000A               1023          BRA         bcc_add_end     *return for printing
000019F6                          1024  bcc_negative
000019F6  7800                    1025          MOVE.L      #0,D4
000019F8  9883                    1026          SUB.L       D3,D4           *flip the bits
000019FA  9484                    1027          SUB.L       D4,D2           *get the address of displacemnt
000019FC  2602                    1028          MOVE.L      D2,D3           *move back for printing
000019FE                          1029  bcc_add_end  
000019FE  4CDF 7FF7               1030          MOVEM.L     (SP)+, D0-D2/D4-D7/A0-A6
00001A02  4E75                    1031          RTS
00001A04                          1032                  
00001A04                          1033  lsl_r_size:
00001A04  48E7 FDFE               1034          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001A08  3200                    1035          MOVE.W      D0,D1           *put the full opcode into D1
00001A0A  C27C 00C0               1036          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001A0E                          1037          
00001A0E                          1038          *test for byte size
00001A0E  B27C 0000               1039          CMP.W       #m_size_B_shfts,D1
00001A12  6600 0020               1040          BNE         LSLR_W
00001A16  43F9 000080BF           1041          LEA         opcode_LSLB,A1    *move the value for printing
00001A1C  1C3C 0001               1042          MOVE.B      #byte_size,D6
00001A20  4EB8 123C               1043          JSR         print_string_op_nn  *print the opcode
00001A24  3200                    1044          MOVE.W      D0,D1               *reload the opcode into D1
00001A26  4EB9 000062B0           1045          JSR         LSD_sub
00001A2C  4EB8 13EE               1046          JSR         print_ea
00001A30  6000 0054               1047          BRA         LSLR_END
00001A34                          1048          
00001A34                          1049          *test for word size
00001A34  B27C 0040               1050  LSLR_W  CMP.W       #m_size_W_shfts,D1
00001A38  6600 0020               1051          BNE         LSLR_L
00001A3C  43F9 000080C5           1052          LEA         opcode_LSLW,A1
00001A42  1C3C 0002               1053          MOVE.B      #word_size,D6
00001A46  4EB8 123C               1054          JSR         print_string_op_nn  *print the opcode
00001A4A  3200                    1055          MOVE.W      D0,D1               *reload the opcode into D1
00001A4C  4EB9 000062B0           1056          JSR         LSD_sub
00001A52  4EB8 13EE               1057          JSR         print_ea
00001A56  6000 002E               1058          BRA         LSLR_END
00001A5A                          1059          
00001A5A                          1060          *test for long size
00001A5A  B27C 0080               1061  LSLR_L  CMP.W       #m_size_L_shfts,D1
00001A5E  6600 0020               1062          BNE         LSLR_FAIL
00001A62  43F9 000080CB           1063          LEA         opcode_LSLL,A1
00001A68  1C3C 0003               1064          MOVE.B      #long_size,D6
00001A6C  4EB8 123C               1065          JSR         print_string_op_nn  *print the opcode
00001A70  3200                    1066          MOVE.W      D0,D1               *reload the opcode into D1
00001A72  4EB9 000062B0           1067          JSR         LSD_sub
00001A78  4EB8 13EE               1068          JSR         print_ea
00001A7C  6000 0008               1069          BRA         LSLR_END
00001A80                          1070          
00001A80                          1071          *did not match any
00001A80  4EB9 0000237E           1072  LSLR_FAIL JSR         op_DATA
00001A86                          1073          
00001A86  4CDF 7FBF               1074  LSLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001A8A  4E75                    1075          RTS
00001A8C                          1076  
00001A8C                          1077  lsl_m_size:
00001A8C  48E7 FDFE               1078          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001A90  3200                    1079          MOVE.W      D0,D1           *put the full opcode into D1
00001A92                          1080          *memory only works on word size
00001A92  43F9 000080C5           1081          LEA         opcode_LSLW,A1
00001A98  1C3C 0002               1082          MOVE.B      #word_size,D6
00001A9C  4EB8 123C               1083          JSR         print_string_op_nn  *print the opcode
00001AA0  3200                    1084          MOVE.W      D0,D1               *reload the opcode into D1
00001AA2  4EB9 000062B0           1085          JSR         LSD_sub
00001AA8  4EB8 13EE               1086          JSR         print_ea
00001AAC  6000 0002               1087          BRA         LSLM_END
00001AB0                          1088          
00001AB0  4CDF 7FBF               1089  LSLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001AB4  4E75                    1090          RTS
00001AB6                          1091  
00001AB6                          1092  
00001AB6                          1093  lsr_r_size:
00001AB6  48E7 FDFE               1094          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001ABA  3200                    1095          MOVE.W      D0,D1           *put the full opcode into D1
00001ABC  C27C 00C0               1096          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001AC0                          1097          
00001AC0                          1098          *test for byte size
00001AC0  B27C 0000               1099          CMP.W       #m_size_B_shfts,D1
00001AC4  6600 0020               1100          BNE         LSRR_W
00001AC8  43F9 000080D1           1101          LEA         opcode_LSRB,A1    *move the value for printing
00001ACE  1C3C 0001               1102          MOVE.B      #byte_size,D6
00001AD2  4EB8 123C               1103          JSR         print_string_op_nn  *print the opcode
00001AD6  3200                    1104          MOVE.W      D0,D1               *reload the opcode into D1
00001AD8  4EB9 000062B0           1105          JSR         LSD_sub
00001ADE  4EB8 13EE               1106          JSR         print_ea
00001AE2  6000 0054               1107          BRA         LSRR_END
00001AE6                          1108          
00001AE6                          1109          *test for word size
00001AE6  B27C 0040               1110  LSRR_W  CMP.W       #m_size_W_shfts,D1
00001AEA  6600 0020               1111          BNE         LSRR_L
00001AEE  43F9 000080D7           1112          LEA         opcode_LSRW,A1
00001AF4  1C3C 0002               1113          MOVE.B      #word_size,D6
00001AF8  4EB8 123C               1114          JSR         print_string_op_nn  *print the opcode
00001AFC  3200                    1115          MOVE.W      D0,D1               *reload the opcode into D1
00001AFE  4EB9 000062B0           1116          JSR         LSD_sub
00001B04  4EB8 13EE               1117          JSR         print_ea
00001B08  6000 002E               1118          BRA         LSRR_END
00001B0C                          1119          
00001B0C                          1120          *test for long size
00001B0C  B27C 0080               1121  LSRR_L  CMP.W       #m_size_L_shfts,D1
00001B10  6600 0020               1122          BNE         LSRR_FAIL
00001B14  43F9 000080DD           1123          LEA         opcode_LSRL,A1
00001B1A  1C3C 0003               1124          MOVE.B      #long_size,D6
00001B1E  4EB8 123C               1125          JSR         print_string_op_nn  *print the opcode
00001B22  3200                    1126          MOVE.W      D0,D1               *reload the opcode into D1
00001B24  4EB9 000062B0           1127          JSR         LSD_sub
00001B2A  4EB8 13EE               1128          JSR         print_ea
00001B2E  6000 0008               1129          BRA         LSRR_END
00001B32                          1130          
00001B32  4EB9 0000237E           1131  LSRR_FAIL JSR         op_DATA
00001B38                          1132          
00001B38  4CDF 7FBF               1133  LSRR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001B3C  4E75                    1134          RTS
00001B3E                          1135          
00001B3E                          1136  lsr_m_size:
00001B3E  48E7 FDFE               1137          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001B42  3200                    1138          MOVE.W      D0,D1           *put the full opcode into D1
00001B44                          1139          *memory only works on word size
00001B44  43F9 000080D7           1140          LEA         opcode_LSRW,A1
00001B4A  1C3C 0002               1141          MOVE.B      #word_size,D6
00001B4E  4EB8 123C               1142          JSR         print_string_op_nn  *print the opcode
00001B52  3200                    1143          MOVE.W      D0,D1               *reload the opcode into D1
00001B54  4EB9 000062B0           1144          JSR         LSD_sub
00001B5A  4EB8 13EE               1145          JSR         print_ea
00001B5E  6000 0002               1146          BRA         LSRM_END
00001B62                          1147          
00001B62  4CDF 7FBF               1148  LSRM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001B66  4E75                    1149          RTS
00001B68                          1150  
00001B68                          1151  asl_r_size:
00001B68  48E7 FDFE               1152          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001B6C  3200                    1153          MOVE.W      D0,D1           *put the full opcode into D1
00001B6E  C27C 00C0               1154          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001B72                          1155          
00001B72                          1156          *test for byte size
00001B72  B27C 0000               1157          CMP.W       #m_size_B_shfts,D1
00001B76  6600 0020               1158          BNE         ASLR_W
00001B7A  43F9 000080E3           1159          LEA         opcode_ASLB,A1    *move the value for printing
00001B80  1C3C 0001               1160          MOVE.B      #byte_size,D6
00001B84  4EB8 123C               1161          JSR         print_string_op_nn  *print the opcode
00001B88  3200                    1162          MOVE.W      D0,D1               *reload the opcode into D1
00001B8A  4EB9 0000407A           1163          JSR         ASD_sub
00001B90  4EB8 13EE               1164          JSR         print_ea
00001B94  6000 0054               1165          BRA         ASLR_END
00001B98                          1166          
00001B98                          1167          *test for word size
00001B98  B27C 0040               1168  ASLR_W  CMP.W       #m_size_W_shfts,D1
00001B9C  6600 0020               1169          BNE         ASLR_L
00001BA0  43F9 000080E9           1170          LEA         opcode_ASLW,A1
00001BA6  1C3C 0002               1171          MOVE.B      #word_size,D6
00001BAA  4EB8 123C               1172          JSR         print_string_op_nn  *print the opcode
00001BAE  3200                    1173          MOVE.W      D0,D1               *reload the opcode into D1
00001BB0  4EB9 0000407A           1174          JSR         ASD_sub
00001BB6  4EB8 13EE               1175          JSR         print_ea
00001BBA  6000 002E               1176          BRA         ASLR_END
00001BBE                          1177          
00001BBE                          1178          *test for long size
00001BBE  B27C 0080               1179  ASLR_L  CMP.W       #m_size_L_shfts,D1
00001BC2  6600 0020               1180          BNE         ASLR_FAIL
00001BC6  43F9 000080EF           1181          LEA         opcode_ASLL,A1
00001BCC  1C3C 0003               1182          MOVE.B      #long_size,D6
00001BD0  4EB8 123C               1183          JSR         print_string_op_nn  *print the opcode
00001BD4  3200                    1184          MOVE.W      D0,D1               *reload the opcode into D1
00001BD6  4EB9 0000407A           1185          JSR         ASD_sub
00001BDC  4EB8 13EE               1186          JSR         print_ea
00001BE0  6000 0008               1187          BRA         ASLR_END
00001BE4                          1188         
00001BE4  4EB9 0000237E           1189  ASLR_FAIL JSR         op_DATA
00001BEA                          1190          
00001BEA  4CDF 7FBF               1191  ASLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001BEE  4E75                    1192          RTS
00001BF0                          1193          
00001BF0                          1194  asl_m_size:
00001BF0  48E7 FDFE               1195          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001BF4  3200                    1196          MOVE.W      D0,D1           *put the full opcode into D1
00001BF6                          1197          *memory only works on word size
00001BF6  43F9 000080E9           1198          LEA         opcode_ASLW,A1
00001BFC  1C3C 0002               1199          MOVE.B      #word_size,D6
00001C00  4EB8 123C               1200          JSR         print_string_op_nn  *print the opcode
00001C04  3200                    1201          MOVE.W      D0,D1               *reload the opcode into D1
00001C06  4EB9 0000407A           1202          JSR         ASD_sub
00001C0C  4EB8 13EE               1203          JSR         print_ea
00001C10  6000 0002               1204          BRA         ASLM_END
00001C14                          1205          
00001C14  4CDF 7FBF               1206  ASLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001C18  4E75                    1207          RTS
00001C1A                          1208          
00001C1A                          1209  
00001C1A                          1210  asr_r_size:
00001C1A  48E7 FDFE               1211          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001C1E  3200                    1212          MOVE.W      D0,D1           *put the full opcode into D1
00001C20  C27C 00C0               1213          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001C24                          1214          
00001C24                          1215          *test for byte size
00001C24  B27C 0000               1216          CMP.W       #m_size_B_shfts,D1
00001C28  6600 0020               1217          BNE         ASRR_W
00001C2C  43F9 000080F5           1218          LEA         opcode_ASRB,A1    *move the value for printing
00001C32  1C3C 0001               1219          MOVE.B      #byte_size,D6
00001C36  4EB8 123C               1220          JSR         print_string_op_nn  *print the opcode
00001C3A  3200                    1221          MOVE.W      D0,D1               *reload the opcode into D1
00001C3C  4EB9 0000407A           1222          JSR         ASD_sub
00001C42  4EB8 13EE               1223          JSR         print_ea
00001C46  6000 0054               1224          BRA         ASRR_END
00001C4A                          1225          
00001C4A                          1226          *test for word size
00001C4A  B27C 0040               1227  ASRR_W  CMP.W       #m_size_W_shfts,D1
00001C4E  6600 0020               1228          BNE         ASRR_L
00001C52  43F9 000080FB           1229          LEA         opcode_ASRW,A1
00001C58  1C3C 0002               1230          MOVE.B      #word_size,D6
00001C5C  4EB8 123C               1231          JSR         print_string_op_nn  *print the opcode
00001C60  3200                    1232          MOVE.W      D0,D1               *reload the opcode into D1
00001C62  4EB9 0000407A           1233          JSR         ASD_sub
00001C68  4EB8 13EE               1234          JSR         print_ea
00001C6C  6000 002E               1235          BRA         ASRR_END
00001C70                          1236          
00001C70                          1237          *test for long size
00001C70  B27C 0080               1238  ASRR_L  CMP.W       #m_size_L_shfts,D1
00001C74  6600 0020               1239          BNE         ASRR_FAIL
00001C78  43F9 00008101           1240          LEA         opcode_ASRL,A1
00001C7E  1C3C 0003               1241          MOVE.B      #long_size,D6
00001C82  4EB8 123C               1242          JSR         print_string_op_nn  *print the opcode
00001C86  3200                    1243          MOVE.W      D0,D1               *reload the opcode into D1
00001C88  4EB9 0000407A           1244          JSR         ASD_sub
00001C8E  4EB8 13EE               1245          JSR         print_ea
00001C92  6000 0008               1246          BRA         ASRR_END
00001C96                          1247          
00001C96  4EB9 0000237E           1248  ASRR_FAIL JSR         op_DATA
00001C9C                          1249          
00001C9C  4CDF 7FBF               1250  ASRR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001CA0  4E75                    1251          RTS
00001CA2                          1252  
00001CA2                          1253  asr_m_size:
00001CA2  48E7 FDFE               1254          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001CA6  3200                    1255          MOVE.W      D0,D1           *put the full opcode into D1
00001CA8                          1256          *memory only works on word size
00001CA8  43F9 000080FB           1257          LEA         opcode_ASRW,A1
00001CAE  1C3C 0002               1258          MOVE.B      #word_size,D6
00001CB2  4EB8 123C               1259          JSR         print_string_op_nn  *print the opcode
00001CB6  3200                    1260          MOVE.W      D0,D1               *reload the opcode into D1
00001CB8  4EB9 0000407A           1261          JSR         ASD_sub
00001CBE  4EB8 13EE               1262          JSR         print_ea
00001CC2  6000 0002               1263          BRA         ASRM_END
00001CC6                          1264          
00001CC6  4CDF 7FBF               1265  ASRM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001CCA  4E75                    1266          RTS
00001CCC                          1267          
00001CCC                          1268  
00001CCC                          1269  rol_r_size:
00001CCC  48E7 FDFE               1270          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001CD0  3200                    1271          MOVE.W      D0,D1           *put the full opcode into D1
00001CD2  C27C 00C0               1272          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001CD6                          1273          
00001CD6                          1274          *test for byte size
00001CD6  B27C 0000               1275          CMP.W       #m_size_B_shfts,D1
00001CDA  6600 0020               1276          BNE         ROLR_W
00001CDE  43F9 00008107           1277          LEA         opcode_ROLB,A1    *move the value for printing
00001CE4  1C3C 0001               1278          MOVE.B      #byte_size,D6
00001CE8  4EB8 123C               1279          JSR         print_string_op_nn  *print the opcode
00001CEC  3200                    1280          MOVE.W      D0,D1               *reload the opcode into D1
00001CEE  4EB9 00007AD6           1281          JSR         ROD_sub
00001CF4  4EB8 13EE               1282          JSR         print_ea
00001CF8  6000 0054               1283          BRA         ROLR_END
00001CFC                          1284          
00001CFC                          1285          *test for word size
00001CFC  B27C 0040               1286  ROLR_W  CMP.W       #m_size_W_shfts,D1
00001D00  6600 0020               1287          BNE         ROLR_L
00001D04  43F9 0000810D           1288          LEA         opcode_ROLW,A1
00001D0A  1C3C 0002               1289          MOVE.B      #word_size,D6
00001D0E  4EB8 123C               1290          JSR         print_string_op_nn  *print the opcode
00001D12  3200                    1291          MOVE.W      D0,D1               *reload the opcode into D1
00001D14  4EB9 00007AD6           1292          JSR         ROD_sub
00001D1A  4EB8 13EE               1293          JSR         print_ea
00001D1E  6000 002E               1294          BRA         ROLR_END
00001D22                          1295          
00001D22                          1296          *test for long size
00001D22  B27C 0080               1297  ROLR_L  CMP.W       #m_size_L_shfts,D1
00001D26  6600 0020               1298          BNE         ROLR_FAIL
00001D2A  43F9 00008113           1299          LEA         opcode_ROLL,A1
00001D30  1C3C 0003               1300          MOVE.B      #long_size,D6
00001D34  4EB8 123C               1301          JSR         print_string_op_nn  *print the opcode
00001D38  3200                    1302          MOVE.W      D0,D1               *reload the opcode into D1
00001D3A  4EB9 00007AD6           1303          JSR         ROD_sub
00001D40  4EB8 13EE               1304          JSR         print_ea
00001D44  6000 0008               1305          BRA         ROLR_END
00001D48                          1306          
00001D48  4EB9 0000237E           1307  ROLR_FAIL JSR         op_DATA
00001D4E                          1308          
00001D4E  4CDF 7FBF               1309  ROLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001D52  4E75                    1310          RTS
00001D54                          1311  
00001D54                          1312  rol_m_size:
00001D54  48E7 FDFE               1313          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001D58  3200                    1314          MOVE.W      D0,D1           *put the full opcode into D1
00001D5A                          1315          *memory only works on word size
00001D5A  43F9 0000810D           1316          LEA         opcode_ROLW,A1
00001D60  1C3C 0002               1317          MOVE.B      #word_size,D6
00001D64  4EB8 123C               1318          JSR         print_string_op_nn  *print the opcode
00001D68  3200                    1319          MOVE.W      D0,D1               *reload the opcode into D1
00001D6A  4EB9 00007AD6           1320          JSR         ROD_sub
00001D70  4EB8 13EE               1321          JSR         print_ea
00001D74  6000 0002               1322          BRA         ROLM_END
00001D78                          1323          
00001D78  4CDF 7FBF               1324  ROLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001D7C  4E75                    1325          RTS
00001D7E                          1326          
00001D7E                          1327  
00001D7E                          1328  ror_r_size:
00001D7E  48E7 FDFE               1329          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001D82  3200                    1330          MOVE.W      D0,D1           *put the full opcode into D1
00001D84  C27C 00C0               1331          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001D88                          1332          
00001D88                          1333          *test for byte size
00001D88  B27C 0000               1334          CMP.W       #m_size_B_shfts,D1
00001D8C  6600 0020               1335          BNE         RORR_W
00001D90  43F9 00008119           1336          LEA         opcode_RORB,A1    *move the value for printing
00001D96  1C3C 0001               1337          MOVE.B      #byte_size,D6
00001D9A  4EB8 123C               1338          JSR         print_string_op_nn  *print the opcode
00001D9E  3200                    1339          MOVE.W      D0,D1               *reload the opcode into D1
00001DA0  4EB9 00007AD6           1340          JSR         ROD_sub
00001DA6  4EB8 13EE               1341          JSR         print_ea
00001DAA  6000 0054               1342          BRA         RORR_END
00001DAE                          1343          
00001DAE                          1344          *test for word size
00001DAE  B27C 0040               1345  RORR_W  CMP.W       #m_size_W_shfts,D1
00001DB2  6600 0020               1346          BNE         RORR_L
00001DB6  43F9 0000811F           1347          LEA         opcode_RORW,A1
00001DBC  1C3C 0002               1348          MOVE.B      #word_size,D6
00001DC0  4EB8 123C               1349          JSR         print_string_op_nn  *print the opcode
00001DC4  3200                    1350          MOVE.W      D0,D1               *reload the opcode into D1
00001DC6  4EB9 00007AD6           1351          JSR         ROD_sub
00001DCC  4EB8 13EE               1352          JSR         print_ea
00001DD0  6000 002E               1353          BRA         RORR_END
00001DD4                          1354          
00001DD4                          1355          *test for long size
00001DD4  B27C 0080               1356  RORR_L  CMP.W       #m_size_L_shfts,D1
00001DD8  6600 0020               1357          BNE         RORR_FAIL
00001DDC  43F9 00008125           1358          LEA         opcode_RORL,A1
00001DE2  1C3C 0003               1359          MOVE.B      #long_size,D6
00001DE6  4EB8 123C               1360          JSR         print_string_op_nn  *print the opcode
00001DEA  3200                    1361          MOVE.W      D0,D1               *reload the opcode into D1
00001DEC  4EB9 00007AD6           1362          JSR         ROD_sub
00001DF2  4EB8 13EE               1363          JSR         print_ea
00001DF6  6000 0008               1364          BRA         RORR_END
00001DFA                          1365          
00001DFA  4EB9 0000237E           1366  RORR_FAIL JSR         op_DATA
00001E00                          1367          
00001E00  4CDF 7FBF               1368  RORR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001E04  4E75                    1369          RTS
00001E06                          1370  
00001E06                          1371  ror_m_size:
00001E06  48E7 FDFE               1372          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001E0A  3200                    1373          MOVE.W      D0,D1           *put the full opcode into D1
00001E0C                          1374          *memory only works on word size
00001E0C  43F9 0000811F           1375          LEA         opcode_RORW,A1
00001E12  1C3C 0002               1376          MOVE.B      #word_size,D6
00001E16  4EB8 123C               1377          JSR         print_string_op_nn  *print the opcode
00001E1A  3200                    1378          MOVE.W      D0,D1               *reload the opcode into D1
00001E1C  4EB9 00007AD6           1379          JSR         ROD_sub
00001E22  4EB8 13EE               1380          JSR         print_ea
00001E26  6000 0002               1381          BRA         RORM_END
00001E2A                          1382          
00001E2A  4CDF 7FBF               1383  RORM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001E2E  4E75                    1384          RTS
00001E30                          1385          
00001E30                          1386  
00001E30                          1387  addq_size:
00001E30  48E7 FDFE               1388          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001E34  3200                    1389          MOVE.W      D0,D1           *put the full opcode into D1
00001E36  C27C 00C0               1390          AND.W       #mask_size_ADD,D1 *mask to only see the size bits
00001E3A                          1391          
00001E3A                          1392          *test for byte size
00001E3A  B27C 0000               1393          CMP.W       #m_size_B_ADD,D1
00001E3E  6600 0020               1394          BNE         ADDQ_W
00001E42  43F9 00008061           1395          LEA         opcode_ADDQB,A1    *move the value for printing
00001E48  1C3C 0001               1396          MOVE.B      #byte_size,D6
00001E4C  4EB8 123C               1397          JSR         print_string_op_nn  *print the opcode
00001E50  3200                    1398          MOVE.W      D0,D1               *reload the opcode into D1
00001E52  4EB9 00003BA6           1399          JSR         ADDQ_sub
00001E58  4EB8 13EE               1400          JSR         print_ea
00001E5C  6000 0054               1401          BRA         ADDQ_END
00001E60                          1402          
00001E60                          1403          *test for word size
00001E60  B27C 0040               1404  ADDQ_W  CMP.W       #m_size_W_ADD,D1
00001E64  6600 0020               1405          BNE         ADDQ_L
00001E68  43F9 00008068           1406          LEA         opcode_ADDQW,A1
00001E6E  1C3C 0002               1407          MOVE.B      #word_size,D6
00001E72  4EB8 123C               1408          JSR         print_string_op_nn  *print the opcode
00001E76  3200                    1409          MOVE.W      D0,D1               *reload the opcode into D1
00001E78  4EB9 00003BA6           1410          JSR         ADDQ_sub
00001E7E  4EB8 13EE               1411          JSR         print_ea
00001E82  6000 002E               1412          BRA         ADDQ_END
00001E86                          1413          
00001E86                          1414          *test for long size
00001E86  B27C 0080               1415  ADDQ_L  CMP.W       #m_size_L_ADD,D1
00001E8A  6600 0020               1416          BNE         ADDQ_FAIL
00001E8E  43F9 0000806F           1417          LEA         opcode_ADDQL,A1
00001E94  1C3C 0003               1418          MOVE.B      #long_size,D6
00001E98  4EB8 123C               1419          JSR         print_string_op_nn  *print the opcode
00001E9C  3200                    1420          MOVE.W      D0,D1               *reload the opcode into D1
00001E9E  4EB9 00003BA6           1421          JSR         ADDQ_sub
00001EA4  4EB8 13EE               1422          JSR         print_ea
00001EA8  6000 0008               1423          BRA         ADDQ_END
00001EAC                          1424          
00001EAC  4EB9 0000237E           1425  ADDQ_FAIL JSR         op_DATA
00001EB2                          1426          
00001EB2  4CDF 7FBF               1427  ADDQ_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001EB6  4E75                    1428          RTS
00001EB8                          1429  
00001EB8                          1430  
00001EB8                          1431  sub_size:
00001EB8  48E7 FDFE               1432          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001EBC  3200                    1433          MOVE.W      D0,D1           *put the full opcode into D1
00001EBE  C27C 00C0               1434          AND.W       #mask_size_SUB,D1 *mask to only see the size bits
00001EC2                          1435          
00001EC2                          1436          *test for byte size
00001EC2  B27C 0000               1437          CMP.W       #m_size_B_SUB,D1
00001EC6  6600 0020               1438          BNE         SUB_W
00001ECA  43F9 00008076           1439          LEA         opcode_SUBB,A1    *move the value for printing
00001ED0  1C3C 0001               1440          MOVE.B      #byte_size,D6
00001ED4  4EB8 123C               1441          JSR         print_string_op_nn  *print the opcode
00001ED8  3200                    1442          MOVE.W      D0,D1               *reload the opcode into D1
00001EDA  4EB9 000059D0           1443          JSR         SUB_sub
00001EE0  4EB8 13EE               1444          JSR         print_ea
00001EE4  6000 0054               1445          BRA         SUB_END
00001EE8                          1446          
00001EE8                          1447          *test for word size
00001EE8  B27C 0040               1448  SUB_W   CMP.W       #m_size_W_SUB,D1
00001EEC  6600 0020               1449          BNE         SUB_L
00001EF0  43F9 0000807C           1450          LEA         opcode_SUBW,A1
00001EF6  1C3C 0002               1451          MOVE.B      #word_size,D6
00001EFA  4EB8 123C               1452          JSR         print_string_op_nn  *print the opcode
00001EFE  3200                    1453          MOVE.W      D0,D1               *reload the opcode into D1
00001F00  4EB9 000059D0           1454          JSR         SUB_sub
00001F06  4EB8 13EE               1455          JSR         print_ea
00001F0A  6000 002E               1456          BRA         SUB_END
00001F0E                          1457          
00001F0E                          1458          *test for long size
00001F0E  B27C 0080               1459  SUB_L   CMP.W       #m_size_L_SUB,D1
00001F12  6600 0020               1460          BNE         SUB_FAIL
00001F16  43F9 00008082           1461          LEA         opcode_SUBL,A1
00001F1C  1C3C 0003               1462          MOVE.B      #long_size,D6
00001F20  4EB8 123C               1463          JSR         print_string_op_nn  *print the opcode
00001F24  3200                    1464          MOVE.W      D0,D1               *reload the opcode into D1
00001F26  4EB9 000059D0           1465          JSR         SUB_sub
00001F2C  4EB8 13EE               1466          JSR         print_ea
00001F30  6000 0008               1467          BRA         SUB_END
00001F34                          1468          
00001F34  4EB9 0000237E           1469  SUB_FAIL JSR         op_DATA
00001F3A                          1470          
00001F3A  4CDF 7FBF               1471  SUB_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001F3E  4E75                    1472          RTS
00001F40                          1473  
00001F40                          1474  and_size:
00001F40  48E7 FDFE               1475          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001F44  3200                    1476          MOVE.W      D0,D1           *put the full opcode into D1
00001F46  C27C 00C0               1477          AND.W       #mask_size_logic,D1 *mask to only see the size bits
00001F4A                          1478          
00001F4A                          1479          *test for byte size
00001F4A  B27C 0000               1480          CMP.W       #m_size_B_logic,D1
00001F4E  6600 0020               1481          BNE         AND_W
00001F52  43F9 0000808C           1482          LEA         opcode_ANDB,A1    *move the value for printing
00001F58  1C3C 0001               1483          MOVE.B      #byte_size,D6
00001F5C  4EB8 123C               1484          JSR         print_string_op_nn  *print the opcode
00001F60  3200                    1485          MOVE.W      D0,D1               *reload the opcode into D1
00001F62  4EB9 00002C2A           1486          JSR         AND_sub
00001F68  4EB8 13EE               1487          JSR         print_ea
00001F6C  6000 0054               1488          BRA         AND_END
00001F70                          1489          
00001F70                          1490          *test for word size
00001F70  B27C 0040               1491  AND_W   CMP.W       #m_size_W_logic,D1
00001F74  6600 0020               1492          BNE         AND_L
00001F78  43F9 00008092           1493          LEA         opcode_ANDW,A1
00001F7E  1C3C 0002               1494          MOVE.B      #word_size,D6
00001F82  4EB8 123C               1495          JSR         print_string_op_nn  *print the opcode
00001F86  3200                    1496          MOVE.W      D0,D1               *reload the opcode into D1
00001F88  4EB9 00002C2A           1497          JSR         AND_sub
00001F8E  4EB8 13EE               1498          JSR         print_ea
00001F92  6000 002E               1499          BRA         AND_END
00001F96                          1500          
00001F96                          1501          *test for long size
00001F96  B27C 0080               1502  AND_L   CMP.W       #m_size_L_logic,D1
00001F9A  6600 0020               1503          BNE         AND_FAIL
00001F9E  43F9 00008098           1504          LEA         opcode_ANDL,A1
00001FA4  1C3C 0003               1505          MOVE.B      #long_size,D6
00001FA8  4EB8 123C               1506          JSR         print_string_op_nn  *print the opcode
00001FAC  3200                    1507          MOVE.W      D0,D1               *reload the opcode into D1
00001FAE  4EB9 00002C2A           1508          JSR         AND_sub
00001FB4  4EB8 13EE               1509          JSR         print_ea
00001FB8  6000 0008               1510          BRA         AND_END
00001FBC                          1511          
00001FBC  4EB9 0000237E           1512  AND_FAIL JSR         op_DATA
00001FC2                          1513          
00001FC2  4CDF 7FBF               1514  AND_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001FC6  4E75                    1515          RTS
00001FC8                          1516          
00001FC8                          1517  or_size:
00001FC8  48E7 FDFE               1518          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001FCC  3200                    1519          MOVE.W      D0,D1           *put the full opcode into D1
00001FCE  C27C 00C0               1520          AND.W       #mask_size_logic,D1 *mask to only see the size bits
00001FD2                          1521          
00001FD2                          1522          *test for byte size
00001FD2  B27C 0000               1523          CMP.W       #m_size_B_logic,D1
00001FD6  6600 0020               1524          BNE         OR_W
00001FDA  43F9 0000809E           1525          LEA         opcode_ORB,A1    *move the value for printing
00001FE0  1C3C 0001               1526          MOVE.B      #byte_size,D6
00001FE4  4EB8 123C               1527          JSR         print_string_op_nn  *print the opcode
00001FE8  3200                    1528          MOVE.W      D0,D1               *reload the opcode into D1
00001FEA  4EB9 000071B2           1529          JSR         OR_sub
00001FF0  4EB8 13EE               1530          JSR         print_ea
00001FF4  6000 0054               1531          BRA         OR_END
00001FF8                          1532          
00001FF8                          1533          *test for word size
00001FF8  B27C 0040               1534  OR_W    CMP.W       #m_size_W_logic,D1
00001FFC  6600 0020               1535          BNE         OR_L
00002000  43F9 000080A3           1536          LEA         opcode_ORW,A1
00002006  1C3C 0002               1537          MOVE.B      #word_size,D6
0000200A  4EB8 123C               1538          JSR         print_string_op_nn  *print the opcode
0000200E  3200                    1539          MOVE.W      D0,D1               *reload the opcode into D1
00002010  4EB9 000071B2           1540          JSR         OR_sub
00002016  4EB8 13EE               1541          JSR         print_ea
0000201A  6000 002E               1542          BRA         OR_END
0000201E                          1543          
0000201E                          1544          *test for long size
0000201E  B27C 0080               1545  OR_L    CMP.W       #m_size_L_logic,D1
00002022  6600 0020               1546          BNE         OR_FAIL
00002026  43F9 000080A8           1547          LEA         opcode_ORL,A1
0000202C  1C3C 0003               1548          MOVE.B      #long_size,D6
00002030  4EB8 123C               1549          JSR         print_string_op_nn  *print the opcode
00002034  3200                    1550          MOVE.W      D0,D1               *reload the opcode into D1
00002036  4EB9 000071B2           1551          JSR         OR_sub
0000203C  4EB8 13EE               1552          JSR         print_ea
00002040  6000 0008               1553          BRA         OR_END
00002044                          1554          
00002044  4EB9 0000237E           1555  OR_FAIL JSR         op_DATA
0000204A                          1556          
0000204A  4CDF 7FBF               1557  OR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000204E  4E75                    1558          RTS
00002050                          1559  
00002050                          1560  moveq_size:
00002050  48E7 FDFE               1561          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00002054  3200                    1562          MOVE.W      D0,D1           *put the full opcode into D1
00002056  C27C F100               1563          AND.W       #mask_size_MOVEQ,D1 *mask to only see the size bits
0000205A                          1564          
0000205A                          1565          *test for long size (only)
0000205A  B27C 7000               1566          CMP.W       #m_size_L_MOVEQ,D1
0000205E  6600 0020               1567          BNE         MOVEQ_FAIL
00002062  43F9 0000801F           1568          LEA         opcode_MOVEQ,A1    *move the value for printing
00002068  1C3C 0003               1569          MOVE.B      #long_size,D6
0000206C  4EB8 123C               1570          JSR         print_string_op_nn  *print the opcode
00002070  3200                    1571          MOVE.W      D0,D1               *reload the opcode into D1
00002072  4EB9 00006DA0           1572          JSR         MOVEQ_sub
00002078  4EB8 13EE               1573          JSR         print_ea
0000207C  6000 0008               1574          BRA         MOVEQ_END
00002080                          1575          
00002080                          1576  MOVEQ_FAIL 
00002080  4EB9 0000237E           1577          JSR         op_DATA
00002086                          1578          
00002086                          1579  MOVEQ_END 
00002086  4CDF 7FBF               1580          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000208A  4E75                    1581          RTS
0000208C                          1582  
0000208C                          1583  
0000208C                          1584  
0000208C                          1585  
0000208C                          1586  
0000208C                          1587  
0000208C                          1588  
0000208C                          1589  
0000208C                          1590  
0000208C                          1591  
0000208C                          1592  
0000208C                          1593  
0000208C                          1594  
0000208C                          1595  
0000208C                          1596  
0000208C                          1597  
0000208C                          1598  -------------------- end include --------------------
0000208C                          1599              INCLUDE 'opcode_subroutine.x68'
0000208C                          1600  opcode_subroutine:
0000208C  48E7 FFFE               1601          MOVEM.L     D0-D7/A0-A6, -(SP)
00002090  3200                    1602          MOVE.W      D0,D1
00002092                          1603          *MOVE.W      #mask_opcode,D2      *move the mask into D2
00002092  C27C C000               1604          AND.W       #mask_MOVE,D1               *mask to only see the first 2 bits
00002096                          1605          
00002096                          1606          *test the move operations (00SS)
00002096  B27C 0000               1607          CMP.W       #match_MOVE,D1
0000209A  6600 000C               1608          BNE         skip1
0000209E  4EB9 0000215C           1609          JSR         move_decode
000020A4  6000 00B0               1610          BRA         end_op
000020A8                          1611          
000020A8                          1612          *test the 0100 clump and jump to subroutine (nop,lea,not,jsr,rts,movem)
000020A8  3200                    1613  skip1   MOVE.W      D0,D1
000020AA  C27C F000               1614          AND.W       #mask_opcode,D1               *mask the full machine code by the opcode mask
000020AE  B27C 4000               1615          CMP.W       #match_G0100,D1
000020B2  6600 000C               1616          BNE         skip2       
000020B6  4EB9 00002184           1617          JSR         group1_decode   *opcode matches group starting with 0100
000020BC  6000 0098               1618          BRA         end_op
000020C0                          1619  
000020C0                          1620          *test the 1101 clump and jump to subroutine (add,adda)
000020C0  B27C D000               1621  skip2   CMP.W       #match_G1101,D1
000020C4  6600 000C               1622          BNE         skip3
000020C8  4EB9 00002208           1623          JSR         group2_decode
000020CE  6000 0086               1624          BRA         end_op
000020D2                          1625          
000020D2                          1626          *test the 0110 clump and jump to subroutine (bra,bgt,beq)
000020D2  B27C 6000               1627  skip3   CMP.W       #match_G0110,D1
000020D6  6600 000C               1628          BNE         skip4
000020DA  4EB9 00002232           1629          JSR         group3_decode
000020E0  6000 0074               1630          BRA         end_op
000020E4                          1631          
000020E4                          1632          *test the 1110 clump and jump to subroutine (lsl/lsr,asl/asr,rol/ror)
000020E4  B27C E000               1633  skip4   CMP.W       #match_G1110,D1
000020E8  6600 000C               1634          BNE         skip5
000020EC  4EB9 0000227A           1635          JSR         group4_decode
000020F2  6000 0062               1636          BRA         end_op
000020F6                          1637  
000020F6                          1638          *test addq
000020F6  B27C 5000               1639  skip5   CMP.W       #match_ADDQ,D1
000020FA  6600 000C               1640          BNE         skip6
000020FE  4EB9 00002338           1641          JSR         op_ADDQ
00002104  6000 0050               1642          BRA         end_op
00002108                          1643          
00002108                          1644          *test sub
00002108  B27C 9000               1645  skip6   CMP.W       #match_SUB,D1
0000210C  6600 000C               1646          BNE         skip7
00002110  4EB9 00002346           1647          JSR         op_SUB
00002116  6000 003E               1648          BRA         end_op
0000211A                          1649          
0000211A                          1650          *test and
0000211A  B27C C000               1651  skip7   CMP.W       #match_AND,D1
0000211E  6600 000C               1652          BNE         skip8
00002122  4EB9 00002354           1653          JSR         op_AND
00002128  6000 002C               1654          BRA         end_op
0000212C                          1655          
0000212C                          1656          *test or
0000212C  B27C 8000               1657  skip8   CMP.W       #match_OR,D1
00002130  6600 000C               1658          BNE         skip9
00002134  4EB9 00002362           1659          JSR         op_OR
0000213A  6000 001A               1660          BRA         end_op
0000213E                          1661          
0000213E  B27C 7000               1662  skip9   CMP.W       #match_MOVEQ,D1
00002142  6600 000C               1663          BNE         data
00002146  4EB9 00002370           1664          JSR         op_MOVEQ
0000214C  6000 0008               1665          BRA         end_op
00002150                          1666          
00002150  4EB9 0000237E           1667  data    JSR         op_DATA
00002156                          1668          
00002156  4CDF 7FFF               1669  end_op  MOVEM.L     (SP)+, D0-D7/A0-A6
0000215A  4E75                    1670          RTS
0000215C                          1671          
0000215C                          1672  move_decode:
0000215C  48E7 FFFE               1673          MOVEM.L     D0-D7/A0-A6, -(SP)
00002160  3200                    1674          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002162  C27C 01C0               1675          AND.W       #mask_MOVE_A,D1  *get only the differentiating bits of move/movea
00002166                          1676          
00002166  B27C 0040               1677          CMP.W       #match_MOVEA,D1
0000216A  6700 000C               1678          BEQ         op_MOVEA
0000216E                          1679          
0000216E  6000 000E               1680          BRA         op_MOVE
00002172                          1681          
00002172  4CDF 7FFF               1682  end_MV  MOVEM.L     (SP)+, D0-D7/A0-A6
00002176  4E75                    1683          RTS
00002178                          1684          
00002178                          1685  op_MOVEA:
00002178  4EB8 1432               1686          JSR         movea_size  *find the size of the operation
0000217C  60F4                    1687          BRA         end_MV
0000217E                          1688  
0000217E                          1689  op_MOVE:
0000217E  4EB8 1494               1690          JSR         move_size
00002182  60EE                    1691          BRA         end_MV
00002184                          1692  
00002184                          1693  group1_decode:
00002184  48E7 FFFE               1694          MOVEM.L     D0-D7/A0-A6, -(SP)
00002188  3200                    1695          MOVE.W      D0,D1           *put the full opcode back into D1
0000218A                          1696          
0000218A  B27C 4E71               1697          CMP.W       #match_NOP,D1   *test the full opcode against NOP
0000218E  6700 004E               1698          BEQ         op_NOP
00002192                          1699          
00002192  B27C 4E75               1700          CMP.W       #match_RTS,D1   *test the full opcode against RTS
00002196  6700 004C               1701          BEQ         op_RTS
0000219A                          1702          
0000219A  C27C F1C0               1703          AND.W       #mask_LEA,D1    *test the masked opcode against LEA
0000219E  B27C 41C0               1704          CMP.W       #match_LEA,D1   *look for 0100 xxx1 11xx
000021A2  6700 0046               1705          BEQ         op_LEA
000021A6                          1706          
000021A6  3200                    1707          MOVE.W      D0,D1           *refresh D1 back into the full opcode
000021A8  C27C FF80               1708          AND.W       #mask_MOVEM,D1    *test the masked opcode against movem
000021AC  B27C 4880               1709          CMP.W       #match_MOVEM_RM,D1   *look for 0100 1000 1000
000021B0  6700 003E               1710          BEQ         op_MOVEM_RM
000021B4  B27C 4C80               1711          CMP.W       #match_MOVEM_MR,D1   *look for 0100 1100 1000
000021B8  6700 003C               1712          BEQ         op_MOVEM_MR
000021BC                          1713          
000021BC  3200                    1714          MOVE.W      D0,D1           *refresh D1 back into the full opcode
000021BE  C27C FFC0               1715          AND.W       #mask_JSR,D1    *test the masked opcode against JSR
000021C2  B27C 4E80               1716          CMP.W       #match_JSR,D1   *look for 0100 1110 10xx
000021C6  6700 0034               1717          BEQ         op_JSR
000021CA                          1718          
000021CA  3200                    1719          MOVE.W      D0,D1           *refresh D1 back into the full opcode
000021CC  C27C FF00               1720          AND.W       #mask_NOT,D1    *test the masked opcode against NOT
000021D0  B27C 4600               1721          CMP.W       #match_NOT,D1   *look for 0100 0110
000021D4  6700 002C               1722          BEQ         op_NOT
000021D8                          1723          
000021D8  4CDF 7FFF               1724  end_G1  MOVEM.L     (SP)+, D0-D7/A0-A6
000021DC  4E75                    1725          RTS
000021DE                          1726          
000021DE                          1727  op_NOP:
000021DE  4EB8 15E0               1728          JSR         nop_size
000021E2  60F4                    1729          BRA         end_G1
000021E4                          1730  
000021E4                          1731  op_RTS:
000021E4  4EB8 15F8               1732          JSR         rts_size
000021E8  60EE                    1733          BRA         end_G1
000021EA                          1734  
000021EA                          1735  op_LEA:
000021EA  4EB8 1610               1736          JSR         lea_size
000021EE  60E8                    1737          BRA         end_G1
000021F0                          1738          
000021F0                          1739  op_MOVEM_RM:
000021F0  4EB8 151C               1740          JSR         movem_rm_size
000021F4  60E2                    1741          BRA         end_G1
000021F6                          1742          
000021F6                          1743  op_MOVEM_MR:
000021F6  4EB8 157E               1744          JSR         movem_mr_size
000021FA  60DC                    1745          BRA         end_G1
000021FC                          1746          
000021FC                          1747  op_JSR:
000021FC  4EB8 1634               1748          JSR         jsr_size
00002200  60D6                    1749          BRA         end_G1
00002202                          1750  
00002202                          1751  op_NOT:
00002202  4EB8 1658               1752          JSR         not_size
00002206  60D0                    1753          BRA         end_G1
00002208                          1754  
00002208                          1755  group2_decode:
00002208  48E7 FFFE               1756          MOVEM.L     D0-D7/A0-A6, -(SP)
0000220C  3200                    1757          MOVE.W      D0,D1       *refresh the entire opcode into D1
0000220E                          1758          
0000220E  C27C F0C0               1759          AND.W       #mask_ADDA,D1   *test the masked opcode against the 
00002212  B27C D0C0               1760          CMP.W       #match_ADDA,D1  *difference between add/adda
00002216  6700 000C               1761          BEQ         op_ADDA         
0000221A                          1762          
0000221A  6000 0010               1763          BRA         op_ADD          *if its not adda, it is add
0000221E                          1764          
0000221E  4CDF 7FFF               1765  end_G2  MOVEM.L     (SP)+, D0-D7/A0-A6
00002222  4E75                    1766          RTS
00002224                          1767  
00002224                          1768  op_ADDA:
00002224  4EB8 16E0               1769          JSR         adda_size
00002228  3200                    1770          MOVE.W      D0,D1
0000222A                          1771          *JSR         ADDA_sub
0000222A                          1772          *JSR         print_ea
0000222A  60F2                    1773          BRA         end_G2
0000222C                          1774  
0000222C                          1775  op_ADD:
0000222C  4EB8 1742               1776          JSR         add_size
00002230  60EC                    1777          BRA         end_G2
00002232                          1778  
00002232                          1779  group3_decode:
00002232  48E7 FFFE               1780          MOVEM.L     D0-D7/A0-A6, -(SP)
00002236  3200                    1781          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002238  C27C FF00               1782          AND.W       #mask_BCC,D1
0000223C                          1783          
0000223C  B27C 6E00               1784          CMP.W       #match_BGT,D1   *test the first 8 bits against the BGT cond
00002240  6700 0020               1785          BEQ         op_BGT
00002244                          1786          
00002244  B27C 6700               1787          CMP.W       #match_BEQ,D1   *test the first 8 bits against the BEQ cond
00002248  6700 001E               1788          BEQ         op_BEQ
0000224C                          1789          
0000224C  B27C 6F00               1790          CMP.W       #match_BLE,D1
00002250  6700 001C               1791          BEQ         op_BLE
00002254                          1792          
00002254  B27C 6000               1793          CMP.W       #match_BRA,D1   *test the first 8 bits against the BRA cond
00002258  6700 001A               1794          BEQ         op_BRA
0000225C                          1795          
0000225C                          1796          
0000225C                          1797          
0000225C  4CDF 7FFF               1798  end_G3  MOVEM.L     (SP)+, D0-D7/A0-A6
00002260  4E75                    1799          RTS
00002262                          1800          
00002262                          1801  op_BGT:
00002262  4EB8 180A               1802          JSR         bgt_size
00002266  60F4                    1803          BRA         end_G3
00002268                          1804  
00002268                          1805  op_BEQ:
00002268  4EB8 1880               1806          JSR         beq_size
0000226C  60EE                    1807          BRA         end_G3
0000226E                          1808          
0000226E                          1809  op_BLE:
0000226E  4EB8 18F6               1810          JSR         ble_size
00002272  60E8                    1811          BRA         end_G3
00002274                          1812  
00002274                          1813  op_BRA:
00002274  4EB8 196C               1814          JSR         bra_size
00002278  60E2                    1815          BRA         end_G3
0000227A                          1816  
0000227A                          1817  group4_decode:
0000227A  48E7 FFFE               1818          MOVEM.L     D0-D7/A0-A6, -(SP)
0000227E  3200                    1819          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002280  C27C FFC0               1820          AND.W       #mask_SHFT_M,D1   *look at the first 10 bits for memory shift
00002284                          1821          
00002284                          1822          *test memory shift left
00002284  B27C E3C0               1823          CMP.W       #match_LSL_M,D1  
00002288  6700 0066               1824          BEQ         op_LSL_M      
0000228C                          1825          
0000228C                          1826          *test memory shift right
0000228C  B27C E2C0               1827          CMP.W       #match_LSR_M,D1  
00002290  6700 0064               1828          BEQ         op_LSR_M    
00002294                          1829          
00002294                          1830          *test memory shift left
00002294  B27C E1C0               1831          CMP.W       #match_ASL_M,D1  
00002298  6700 0062               1832          BEQ         op_ASL_M      
0000229C                          1833          
0000229C                          1834          *test memory shift right
0000229C  B27C E0C0               1835          CMP.W       #match_ASR_M,D1  
000022A0  6700 0060               1836          BEQ         op_ASR_M  
000022A4                          1837          
000022A4                          1838          *test memory rotate left
000022A4  B27C E7C0               1839          CMP.W       #match_ROL_M,D1  
000022A8  6700 005E               1840          BEQ         op_ROL_M      
000022AC                          1841  
000022AC                          1842          *test memory rotate right
000022AC  B27C E6C0               1843          CMP.W       #match_ROR_M,D1  
000022B0  6700 005C               1844          BEQ         op_ROR_M  
000022B4                          1845          
000022B4                          1846          *look at select bits for the register shifts
000022B4  3200                    1847          MOVE.W      D0,D1       *refresh the entire opcode into D1
000022B6  C27C F118               1848          AND.W       #mask_SHFT_R,D1
000022BA                          1849          
000022BA  B27C E108               1850          CMP.W       #match_LSL_R,D1
000022BE  6700 0054               1851          BEQ         op_LSL_R
000022C2                          1852          
000022C2  B27C E008               1853          CMP.W       #match_LSR_R,D1
000022C6  6700 0052               1854          BEQ         op_LSR_R
000022CA                          1855          
000022CA  B27C E100               1856          CMP.W       #match_ASL_R,D1
000022CE  6700 0050               1857          BEQ         op_ASL_R
000022D2                          1858          
000022D2  B27C E000               1859          CMP.W       #match_ASR_R,D1
000022D6  6700 004E               1860          BEQ         op_ASR_R
000022DA                          1861          
000022DA  B27C E118               1862          CMP.W       #match_ROL_R,D1
000022DE  6700 004C               1863          BEQ         op_ROL_R
000022E2                          1864          
000022E2  B27C E018               1865          CMP.W       #match_ROR_R,D1
000022E6  6700 004A               1866          BEQ         op_ROR_R
000022EA                          1867          
000022EA  4CDF 7FFF               1868  end_G4  MOVEM.L     (SP)+, D0-D7/A0-A6
000022EE  4E75                    1869          RTS
000022F0                          1870          
000022F0                          1871  op_LSL_M:
000022F0  4EB8 1A8C               1872          JSR     lsl_m_size
000022F4  60F4                    1873          BRA     end_G4
000022F6                          1874          
000022F6                          1875  op_LSR_M:
000022F6  4EB8 1B3E               1876          JSR     lsr_m_size
000022FA  60EE                    1877          BRA     end_G4
000022FC                          1878          
000022FC                          1879  op_ASL_M:
000022FC  4EB8 1BF0               1880          JSR     asl_m_size
00002300  60E8                    1881          BRA     end_G4
00002302                          1882          
00002302                          1883  op_ASR_M:
00002302  4EB8 1CA2               1884          JSR     asr_m_size
00002306  60E2                    1885          BRA     end_G4
00002308                          1886  
00002308                          1887  op_ROL_M:
00002308  4EB8 1D54               1888          JSR     rol_m_size
0000230C  60DC                    1889          BRA     end_G4
0000230E                          1890  
0000230E                          1891  op_ROR_M:
0000230E  4EB8 1E06               1892          JSR     ror_m_size
00002312  60D6                    1893          BRA     end_G4
00002314                          1894          
00002314                          1895  op_LSL_R:
00002314  4EB8 1A04               1896          JSR     lsl_r_size
00002318  60D0                    1897          BRA     end_G4
0000231A                          1898  
0000231A                          1899  op_LSR_R:
0000231A  4EB8 1AB6               1900          JSR     lsr_r_size
0000231E  60CA                    1901          BRA     end_G4
00002320                          1902  
00002320                          1903  op_ASL_R:
00002320  4EB8 1B68               1904          JSR     asl_r_size
00002324  60C4                    1905          BRA     end_G4
00002326                          1906  
00002326                          1907  op_ASR_R:
00002326  4EB8 1C1A               1908          JSR     asr_r_size
0000232A  60BE                    1909          BRA     end_G4
0000232C                          1910  
0000232C                          1911  op_ROL_R:
0000232C  4EB8 1CCC               1912          JSR     rol_r_size
00002330  60B8                    1913          BRA     end_G4
00002332                          1914  
00002332                          1915  op_ROR_R:
00002332  4EB8 1D7E               1916          JSR     ror_r_size
00002336  60B2                    1917          BRA     end_G4
00002338                          1918  
00002338                          1919  op_ADDQ:
00002338  48E7 FFFE               1920          MOVEM.L     D0-D7/A0-A6, -(SP)
0000233C                          1921          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000233C  4EB8 1E30               1922          JSR         addq_size
00002340                          1923          
00002340  4CDF 7FFF               1924  end_AQ  MOVEM.L     (SP)+, D0-D7/A0-A6
00002344  4E75                    1925          RTS
00002346                          1926  
00002346                          1927          
00002346                          1928  op_SUB:
00002346  48E7 FFFE               1929          MOVEM.L     D0-D7/A0-A6, -(SP)
0000234A                          1930          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000234A  4EB8 1EB8               1931          JSR         sub_size
0000234E                          1932          
0000234E  4CDF 7FFF               1933  end_SB  MOVEM.L     (SP)+, D0-D7/A0-A6
00002352  4E75                    1934          RTS
00002354                          1935        
00002354                          1936  
00002354                          1937  op_AND:
00002354  48E7 FFFE               1938          MOVEM.L     D0-D7/A0-A6, -(SP)
00002358                          1939          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002358  4EB8 1F40               1940          JSR         and_size
0000235C                          1941          
0000235C  4CDF 7FFF               1942  end_AN  MOVEM.L     (SP)+, D0-D7/A0-A6
00002360  4E75                    1943          RTS
00002362                          1944          
00002362                          1945  op_OR:
00002362  48E7 FFFE               1946          MOVEM.L     D0-D7/A0-A6, -(SP)
00002366                          1947          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002366  4EB8 1FC8               1948          JSR         or_size
0000236A                          1949          
0000236A  4CDF 7FFF               1950  end_OR  MOVEM.L     (SP)+, D0-D7/A0-A6
0000236E  4E75                    1951          RTS
00002370                          1952          
00002370                          1953  op_MOVEQ:
00002370  48E7 FFFE               1954          MOVEM.L     D0-D7/A0-A6, -(SP)
00002374                          1955          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002374  4EB8 2050               1956          JSR         moveq_size
00002378                          1957          
00002378                          1958  end_MOVEQ  
00002378  4CDF 7FFF               1959          MOVEM.L     (SP)+, D0-D7/A0-A6
0000237C  4E75                    1960          RTS
0000237E                          1961  
0000237E                          1962  op_DATA:
0000237E  48E7 FFFE               1963          MOVEM.L     D0-D7/A0-A6, -(SP)
00002382  43F9 00008183           1964          LEA         opcode_DATA,A1  *move data string into 
00002388  3200                    1965          MOVE.W      D0,D1           *move the full data into D1 for printing
0000238A  4EB8 12F0               1966          JSR         print_data
0000238E                          1967          
0000238E  4CDF 7FFF               1968  end_DATA MOVEM.L     (SP)+, D0-D7/A0-A6
00002392  4E75                    1969          RTS
00002394                          1970  
00002394                          1971  
00002394                          1972  
00002394                          1973  
00002394                          1974  
00002394                          1975  
00002394                          1976  
00002394                          1977  
00002394                          1978  
00002394                          1979  
00002394                          1980  -------------------- end include --------------------
00002394                          1981              INCLUDE 'ADD Subroutine.x68'
00002394                          1982  
00002394                          1983  
00002394                          1984  ADD_ADD                                                  ;preserve the registers, 
00002394                          1985  ;-----------------------------ea,Dn-----------------------------------------------------------------------------------------------------
00002394  C2BC 000001C0           1986                                         AND.L              #mask_opmode,D1                              ;load mask to determine the operand order
0000239A                          1987                                  
0000239A  B2BC 00000000           1988  ADD_ea_Dn_match                        CMP.L              #match_ADD_b_Dn_ea,D1                 ;check to see if it's Dn,ea
000023A0  6700 004C               1989                                         BEQ                ADD_ea_Dn                                 ;if equal go figure out data register
000023A4  6600 0002               1990                                         BNE                ADD_ea_Dn_match_w                         ;if not check word size for same order
000023A8                          1991  
000023A8  B2BC 00000040           1992  ADD_ea_Dn_match_w                      CMP.L              #match_ADD_w_Dn_ea,D1                 ;check to see if it's Dn,ea
000023AE  6700 003E               1993                                         BEQ                ADD_ea_Dn                                 ;if equal go figure out data register
000023B2  6600 0002               1994                                         BNE                ADD_ea_Dn_match_l                         ;if not check long size for same order
000023B6                          1995  
000023B6  B2BC 00000080           1996  ADD_ea_Dn_match_l                      CMP.L              #match_ADD_l_Dn_ea,D1                 ;check to see if it's Dn,ea
000023BC  6700 04E2               1997                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out data register
000023C0  6600 0002               1998                                         BNE                ADD_Dn_ea_match                           ;if not check other order
000023C4                          1999  
000023C4  B2BC 00000100           2000  ADD_Dn_ea_match                        CMP.L              #match_ADD_b_ea_Dn,D1                 ;check to see if it's ea,Dn
000023CA  6700 04D4               2001                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000023CE  6600 0002               2002                                         BNE                ADD_Dn_ea_match_w                         ;if not go check word size for same order
000023D2                          2003  
000023D2  B2BC 00000140           2004  ADD_Dn_ea_match_w                      CMP.L              #match_ADD_w_ea_Dn,D1                 ;check to see if it's ea,Dn
000023D8  6700 04C6               2005                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000023DC  6600 0002               2006                                         BNE                ADD_Dn_ea_match_l                         ;if not go check word size for same order
000023E0                          2007  
000023E0  B2BC 00000180           2008  ADD_Dn_ea_match_l                      CMP.L              #match_ADD_l_ea_Dn,D1                 ;check to see if it's ea,Dn
000023E6  6700 04B8               2009                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000023EA  6600 0836               2010                                         BNE                ADD_ERROR                                 ;if not go to error message
000023EE                          2011  ;--------------------------------------------------------------------------------------------------------------------------
000023EE                          2012  ;-------------------------------------------------------------------------------------------------------------------------
000023EE  4241                    2013  ADD_ea_Dn                            CLR               D1                                            ;clear D1 to load new mask                                
000023F0  C2BC 00000038           2014                                   AND.L             #mask_ADD_ea_mode,D1                          ;move the mask to D1
000023F6                          2015  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
000023F6  B2BC 00000000           2016  ADD_ea_Dn_data_reg_dir           CMP.L             #match_ADD_Dn,D1                              ;check to see if mode is data reg direct
000023FC  6600 0006               2017                                   BNE               ADD_ea_Dn_add_reg_indir                             ;if not, go check add reg dir
00002400  6700 005A               2018                                   BEQ               ADD_ea_Dn_Dn_reg                                  ;if equal go figure out the register
00002404                          2019  
00002404  B2BC 00000010           2020  ADD_ea_Dn_add_reg_indir          CMP.L             #match_ADD_An_indir,D1                        ;check to see if mode is add reg indir
0000240A  6600 0006               2021                                   BNE               ADD_ea_Dn_add_reg_indir_predec                    ;if not, go check add reg indir predec 
0000240E  6700 0122               2022                                   BEQ               ADD_ea_Dn_An_indir_reg                            ;if equal go figure out the register           
00002412                          2023             
00002412  B2BC 00000020           2024  ADD_ea_Dn_add_reg_indir_predec   CMP.L             #match_ADD_An_indir_predec,D1                  ;check to see if mode is add reg indor w/ postinc
00002418  6600 0006               2025                                   BNE               ADD_ea_Dn_add_reg_indir_postinc                    ;if not go check add reg indir/predec
0000241C  6700 02B4               2026                                   BEQ               ADD_ea_Dn_An_indir_predec                          ;if equal go figure out the register
00002420                          2027                        
00002420  B2BC 00000018           2028  ADD_ea_Dn_add_reg_indir_postinc  CMP.L             #match_ADD_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00002426  6600 0006               2029                                   BNE               ADD_ea_Dn_abs_add_word                                  ;if not go check abs add word
0000242A  6700 01D6               2030                                   BEQ               ADD_ea_Dn_An_indir_postinc_reg                          ;if equal go figure out the register
0000242E                          2031  
0000242E  C4BC 0000003F           2032  ADD_ea_Dn_abs_add_word           AND.L             #mask_ADD_abs_add,D2                        ;load mask to determine if abs add word or long
00002434                          2033                                   
00002434  B4BC 00000038           2034                                   CMP.L             #match_ADD_abs_add_word,D2                  ;check if abs add word
0000243A  2A18                    2035                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
0000243C  6600 0006               2036                                   BNE               ADD_ea_Dn_abs_add_long                                  ;if not go check abs add long
00002440  6700 0360               2037                                   BEQ               ADD_ea_Dn_abs_add_word_out                              ;if equal go to output
00002444                          2038    
00002444  B4BC 00000039           2039  ADD_ea_Dn_abs_add_long           CMP.L             #match_ADD_abs_add_long,D2                  ;check to see if abs add long
0000244A  6700 0360               2040                                   BEQ               ADD_ea_Dn_abs_add_long_out                              ;if equal go to output
0000244E                          2041                                   
0000244E  B2BC 0000003C           2042  ADD_ea_Dn_immediate_add          CMP.L             #match_imm_add,D1                             ;check if immediate address
00002454  6700 0362               2043                                   BEQ               ADD_ea_Dn_immediate_add_out                             ;if equal go to immediate add ADD routine
00002458  6600 07C8               2044                                   BNE               ADD_ERROR                                         ;if not equal go to error mesage ADD routine
0000245C                          2045  
0000245C                          2046  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
0000245C                          2047                                   
0000245C                          2048                                   
0000245C                          2049  ;-----------------------------------Data Register Direct--------------------------------
0000245C  C4BC 0000003F           2050  ADD_ea_Dn_Dn_reg                 AND.L              #mask_ADD_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00002462  B4BC 00000000           2051                                   CMP.L              #match_ADD_D0,D2                       ;check to see in the register is 0
00002468  6600 0006               2052                                   BNE                ADD_ea_Dn_rD1                                     ;if not go check register 1
0000246C  6700 0064               2053                                   BEQ                ADD_ea_Dn_D0_out                              ;if equal go to output ADDroutine
00002470                          2054  
00002470  B4BC 00000001           2055  ADD_ea_Dn_rD1                    CMP.L              #match_ADD_D1,D2                       ;check to see in the register is 1
00002476  6600 0006               2056                                   BNE                ADD_ea_Dn_rD2                                     ;if not go check register 2
0000247A  6700 0062               2057                                   BEQ                ADD_ea_Dn_D1_out                              ;if equal go to output ADDroutine
0000247E                          2058  
0000247E  B4BC 00000002           2059  ADD_ea_Dn_rD2                    CMP.L              #match_ADD_D2,D2                       ;check to see in the register is 2
00002484  6600 0006               2060                                   BNE                ADD_ea_Dn_rD3                                     ;if not go check register 3
00002488  6700 0060               2061                                   BEQ                ADD_ea_Dn_D2_out                              ;if equal go to output ADDroutine
0000248C                          2062  
0000248C  B4BC 00000003           2063  ADD_ea_Dn_rD3                    CMP.L              #match_ADD_D3,D2                       ;check to see in the register is 3
00002492  6600 0006               2064                                   BNE                ADD_ea_Dn_rD4                                     ;if not go check register 4
00002496  6700 005E               2065                                   BEQ                ADD_ea_Dn_D3_out                              ;if equal go to output ADDroutine
0000249A                          2066  
0000249A  B4BC 00000004           2067  ADD_ea_Dn_rD4                    CMP.L              #match_ADD_D4,D2                       ;check to see in the register is 4
000024A0  6600 0006               2068                                   BNE                ADD_ea_Dn_rD5                                     ;if not go check register 5
000024A4  6700 005C               2069                                   BEQ                ADD_ea_Dn_D4_out                              ;if equal go to output ADDroutine
000024A8                          2070  
000024A8  B4BC 00000005           2071  ADD_ea_Dn_rD5                    CMP.L              #match_ADD_D5,D2                       ;check to see in the register is 5
000024AE  6600 0006               2072                                   BNE                ADD_ea_Dn_rD6                                     ;if not go check register 6
000024B2  6700 005A               2073                                   BEQ                ADD_ea_Dn_D5_out                              ;if equal go to output ADDroutine
000024B6                          2074  
000024B6  B4BC 00000006           2075  ADD_ea_Dn_rD6                    CMP.L              #match_ADD_D6,D2                       ;check to see in the register is 6
000024BC  6600 0006               2076                                   BNE                ADD_ea_Dn_rD7                                     ;if not go check register 7
000024C0  6700 0058               2077                                   BEQ                ADD_ea_Dn_D6_out                              ;if equal go to output ADDroutine
000024C4                          2078  
000024C4  B4BC 00000007           2079  ADD_ea_Dn_rD7                    CMP.L              #match_ADD_D7,D2                       ;check to see in the register is 7
000024CA  6700 005A               2080                                   BEQ                ADD_ea_Dn_D7_out                              ;if equal go to output ADDroutine
000024CE  6600 0752               2081                                   BNE                ADD_ERROR                               ;if not equal, got to error message
000024D2                          2082  ;--------------------Data Register Direct Output-----------------------
000024D2  227C 00008494           2083  ADD_ea_Dn_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
000024D8  4EB9 000027E8           2084                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024DE                          2085  
000024DE  227C 00008497           2086  ADD_ea_Dn_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
000024E4  4EB9 000027E8           2087                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024EA                          2088  
000024EA                          2089  
000024EA  227C 0000849A           2090  ADD_ea_Dn_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
000024F0  4EB9 000027E8           2091                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024F6                          2092  
000024F6  227C 0000849D           2093  ADD_ea_Dn_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
000024FC  4EB9 000027E8           2094                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002502                          2095  
00002502                          2096  
00002502  227C 000084A0           2097  ADD_ea_Dn_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
00002508  4EB9 000027E8           2098                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000250E                          2099  
0000250E                          2100  
0000250E  227C 000084A3           2101  ADD_ea_Dn_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00002514  4EB9 000027E8           2102                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000251A                          2103  
0000251A                          2104  
0000251A  227C 000084A6           2105  ADD_ea_Dn_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00002520  4EB9 000027E8           2106                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002526                          2107  
00002526                          2108  
00002526  227C 000084A9           2109  ADD_ea_Dn_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
0000252C  4EB9 000027E8           2110                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002532                          2111  
00002532                          2112  ;------------------Address Register Indirect-----------------------
00002532  B4BC 00000010           2113  ADD_ea_Dn_An_indir_reg           CMP.L          #match_ADD_An_indir_r0,D2              ;check reg is equal to 0
00002538  6600 0006               2114                                   BNE             ADD_ea_Dn_An_indir_reg1                           ;if not try reg 1
0000253C  6700 0064               2115                                   BEQ             ADD_ea_Dn_An_indir_reg0_out                       ;if equal go to output ADDroutine
00002540                          2116  
00002540  B4BC 00000011           2117  ADD_ea_Dn_An_indir_reg1          CMP.L           #match_ADD_An_indir_r1,D2              ;check reg is equal to 1
00002546  6600 0006               2118                                   BNE             ADD_ea_Dn_An_indir_reg2                           ;if not try reg 2
0000254A  6700 0062               2119                                   BEQ             ADD_ea_Dn_An_indir_reg1_out                       ;if equal go to output ADDroutine
0000254E                          2120  
0000254E  B4BC 00000012           2121  ADD_ea_Dn_An_indir_reg2          CMP.L           #match_ADD_An_indir_r2,D2              ;check reg is equal to 2
00002554  6600 0006               2122                                   BNE             ADD_ea_Dn_An_indir_reg3                           ;if not try reg 3
00002558  6700 0060               2123                                   BEQ             ADD_ea_Dn_An_indir_reg2_out                       ;if equal go to output ADDroutine
0000255C                          2124  
0000255C  B4BC 00000013           2125  ADD_ea_Dn_An_indir_reg3          CMP.L           #match_ADD_An_indir_r3,D2              ;check reg is equal to 3
00002562  6600 0006               2126                                   BNE             ADD_ea_Dn_An_indir_reg4                           ;if not try reg 4
00002566  6700 005E               2127                                   BEQ             ADD_ea_Dn_An_indir_reg3_out                       ;if equal go to output ADDroutine
0000256A                          2128      
0000256A  B4BC 00000014           2129  ADD_ea_Dn_An_indir_reg4          CMP.L           #match_ADD_An_indir_r4,D2              ;check reg is equal to 4
00002570  6600 0006               2130                                   BNE             ADD_ea_Dn_An_indir_reg5                           ;if not try reg 5
00002574  6700 005C               2131                                   BEQ             ADD_ea_Dn_An_indir_reg4_out                       ;if equal go to output ADDroutine
00002578                          2132          
00002578  B4BC 00000015           2133  ADD_ea_Dn_An_indir_reg5          CMP.L           #match_ADD_An_indir_r5,D2              ;check reg is equal to 5
0000257E  6600 0006               2134                                   BNE             ADD_ea_Dn_An_indir_reg6                           ;if not try reg 6
00002582  6700 005A               2135                                   BEQ             ADD_ea_Dn_An_indir_reg5_out                       ;if equal go to output ADDroutine
00002586                          2136  
00002586  B4BC 00000016           2137  ADD_ea_Dn_An_indir_reg6          CMP.L           #match_ADD_An_indir_r6,D2              ;check reg is equal to 6
0000258C  6600 0006               2138                                   BNE             ADD_ea_Dn_An_indir_reg7                           ;if not try reg 7
00002590  6700 0058               2139                                   BEQ             ADD_ea_Dn_An_indir_reg6_out                       ;if equal go to output ADDroutine
00002594                          2140  
00002594  B4BC 00000017           2141  ADD_ea_Dn_An_indir_reg7          CMP.L           #match_ADD_An_indir_r7,D2              ;check reg is equal to 7
0000259A  6700 005A               2142                                   BEQ             ADD_ea_Dn_An_indir_reg7_out                       ;if equal go to output ADDroutine
0000259E  6600 0682               2143                                   BNE             ADD_ERROR                                   :if not equal to an addresssing mode, pritn error
000025A2                          2144  
000025A2                          2145  ;--------------------Address Register Indirect Output-----------------------
000025A2  227C 000084D4           2146  ADD_ea_Dn_An_indir_reg0_out             MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
000025A8  4EB9 000027E8           2147                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025AE                          2148  
000025AE  227C 000084D9           2149  ADD_ea_Dn_An_indir_reg1_out             MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
000025B4  4EB9 000027E8           2150                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025BA                          2151  
000025BA  227C 000084DE           2152  ADD_ea_Dn_An_indir_reg2_out             MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
000025C0  4EB9 000027E8           2153                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025C6                          2154  
000025C6  227C 000084E3           2155  ADD_ea_Dn_An_indir_reg3_out             MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
000025CC  4EB9 000027E8           2156                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025D2                          2157  
000025D2  227C 000084E8           2158  ADD_ea_Dn_An_indir_reg4_out             MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
000025D8  4EB9 000027E8           2159                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025DE                          2160  
000025DE  227C 000084ED           2161  ADD_ea_Dn_An_indir_reg5_out             MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
000025E4  4EB9 000027E8           2162                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025EA                          2163  
000025EA  227C 000084F2           2164  ADD_ea_Dn_An_indir_reg6_out             MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
000025F0  4EB9 000027E8           2165                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025F6                          2166                                          
000025F6  227C 000084F7           2167  ADD_ea_Dn_An_indir_reg7_out             MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
000025FC  4EB9 000027E8           2168                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002602                          2169  
00002602                          2170  ;------------------Address Register Indirect with Post Increment-----------------------
00002602  B4BC 00000018           2171  ADD_ea_Dn_An_indir_postinc_reg              CMP.L      #match_ADD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00002608  6600 0006               2172                                              BNE        ADD_ea_Dn_An_indir_postinc_reg1                      ;if not try reg 1
0000260C  6700 0064               2173                                              BEQ        ADD_ea_Dn_An_indir_postin_r0_out               ;if equal go to output ADDroutine
00002610                          2174  
00002610  B4BC 00000019           2175  ADD_ea_Dn_An_indir_postinc_reg1             CMP.L      #match_ADD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00002616  6600 0006               2176                                              BNE        ADD_ea_Dn_An_indir_postinc_reg2                      ;if not try reg 2
0000261A  6700 0062               2177                                              BEQ        ADD_ea_Dn_An_indir_postin_r1_out               ;if equal go to output ADDroutine
0000261E                          2178  
0000261E  B4BC 0000001A           2179  ADD_ea_Dn_An_indir_postinc_reg2             CMP.L      #match_ADD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00002624  6600 0006               2180                                              BNE        ADD_ea_Dn_An_indir_postinc_reg3                      ;if not try reg 3
00002628  6700 0060               2181                                              BEQ        ADD_ea_Dn_An_indir_postin_r2_out               ;if equal go to output ADDroutine
0000262C                          2182  
0000262C  B4BC 0000001B           2183  ADD_ea_Dn_An_indir_postinc_reg3             CMP.L      #match_ADD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00002632  6600 0006               2184                                              BNE        ADD_ea_Dn_An_indir_postinc_reg4                      ;if not try reg 4
00002636  6700 005E               2185                                              BEQ        ADD_ea_Dn_An_indir_postin_r3_out               ;if equal go to output ADDroutine
0000263A                          2186   
0000263A  B4BC 0000001C           2187  ADD_ea_Dn_An_indir_postinc_reg4             CMP.L      #match_ADD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00002640  6600 0006               2188                                              BNE        ADD_ea_Dn_An_indir_postinc_reg5                      ;if not try reg 5
00002644  6700 005C               2189                                              BEQ        ADD_ea_Dn_An_indir_postin_r4_out               ;if equal go to output ADDroutine
00002648                          2190  
00002648  B4BC 0000001D           2191  ADD_ea_Dn_An_indir_postinc_reg5             CMP.L      #match_ADD_An_indir_postinc_r5,D2        ;check reg is equal to 5
0000264E  6600 0006               2192                                              BNE        ADD_ea_Dn_An_indir_postinc_reg6                      ;if not try reg 6
00002652  6700 005A               2193                                              BEQ        ADD_ea_Dn_An_indir_postin_r5_out               ;if equal go to output ADDroutine
00002656                          2194  
00002656  B4BC 0000001E           2195  ADD_ea_Dn_An_indir_postinc_reg6             CMP.L      #match_ADD_An_indir_postinc_r6,D2         ;check reg is equal to 6
0000265C  6600 0006               2196                                              BNE        ADD_ea_Dn_An_indir_postinc_reg7                        ;if not try reg 7
00002660  6700 0058               2197                                              BEQ        ADD_ea_Dn_An_indir_postin_r6_out                    ;if equal go to output ADDroutine
00002664                          2198  
00002664  B4BC 0000001F           2199  ADD_ea_Dn_An_indir_postinc_reg7             CMP.L      #match_ADD_An_indir_postinc_r7,D2         ;check reg is equal to 7
0000266A  6700 005A               2200                                              BEQ        ADD_ea_Dn_An_indir_postin_r7_out                    ;if equal go to output ADDroutine
0000266E  6600 05B2               2201                                              BNE        ADD_ERROR                                        :if not equal to an addresssing mode, pritn error
00002672                          2202  
00002672                          2203  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00002672  227C 000084FC           2204  ADD_ea_Dn_An_indir_postin_r0_out                MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00002678  4EB9 000027E8           2205                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000267E                          2206  
0000267E  227C 00008502           2207  ADD_ea_Dn_An_indir_postin_r1_out                MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00002684  4EB9 000027E8           2208                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000268A                          2209  
0000268A  227C 00008508           2210  ADD_ea_Dn_An_indir_postin_r2_out                MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00002690  4EB9 000027E8           2211                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002696                          2212  
00002696  227C 0000850E           2213  ADD_ea_Dn_An_indir_postin_r3_out                MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
0000269C  4EB9 000027E8           2214                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026A2                          2215  
000026A2  227C 00008514           2216  ADD_ea_Dn_An_indir_postin_r4_out                MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
000026A8  4EB9 000027E8           2217                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026AE                          2218  
000026AE  227C 0000851A           2219  ADD_ea_Dn_An_indir_postin_r5_out                MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
000026B4  4EB9 000027E8           2220                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026BA                          2221  
000026BA  227C 00008520           2222  ADD_ea_Dn_An_indir_postin_r6_out                MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
000026C0  4EB9 000027E8           2223                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026C6                          2224  
000026C6  227C 00008526           2225  ADD_ea_Dn_An_indir_postin_r7_out                MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
000026CC  4EB9 000027E8           2226                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026D2                          2227  
000026D2                          2228  ;------------------Address Register Indirect with Pre Decrement-----------------------
000026D2  B4BC 00000020           2229  ADD_ea_Dn_An_indir_predec                   CMP.L      #match_ADD_An_indir_predec_reg0,D2       ;check reg is equal to 0
000026D8  6600 0006               2230                                              BNE        ADD_ea_Dn_An_indir_predec_reg1                      ;if not try reg 1
000026DC  6700 0064               2231                                              BEQ        ADD_ea_Dn_An_indir_prede_r0_out               ;if equal go to output ADDroutine
000026E0                          2232  
000026E0  B4BC 00000021           2233  ADD_ea_Dn_An_indir_predec_reg1              CMP.L      #match_ADD_An_indir_predec_reg1,D2       ;check reg is equal to 1
000026E6  6600 0006               2234                                              BNE        ADD_ea_Dn_An_indir_predec_reg2                      ;if not try reg 2
000026EA  6700 0062               2235                                              BEQ        ADD_ea_Dn_An_indir_prede_r1_out               ;if equal go to output ADDroutine
000026EE                          2236  
000026EE  B4BC 00000022           2237  ADD_ea_Dn_An_indir_predec_reg2              CMP.L      #match_ADD_An_indir_predec_reg2,D2       ;check reg is equal to 2
000026F4  6600 0006               2238                                              BNE        ADD_ea_Dn_An_indir_predec_reg3                      ;if not try reg 3
000026F8  6700 0060               2239                                              BEQ        ADD_ea_Dn_An_indir_prede_r2_out               ;if equal go to output ADDroutine
000026FC                          2240  
000026FC  B4BC 00000023           2241  ADD_ea_Dn_An_indir_predec_reg3              CMP.L      #match_ADD_An_indir_predec_reg3,D2       ;check reg is equal to 3
00002702  6600 0006               2242                                              BNE        ADD_ea_Dn_An_indir_predec_reg4                      ;if not try reg 4
00002706  6700 005E               2243                                              BEQ        ADD_ea_Dn_An_indir_prede_r3_out               ;if equal go to output ADDroutine
0000270A                          2244  
0000270A  B4BC 00000024           2245  ADD_ea_Dn_An_indir_predec_reg4              CMP.L      #match_ADD_An_indir_predec_reg4,D2       ;check reg is equal to 4
00002710  6600 0006               2246                                              BNE        ADD_ea_Dn_An_indir_predec_reg5                      ;if not try reg 5
00002714  6700 005C               2247                                              BEQ        ADD_ea_Dn_An_indir_prede_r4_out               ;if equal go to output ADDroutine
00002718                          2248  
00002718  B4BC 00000025           2249  ADD_ea_Dn_An_indir_predec_reg5              CMP.L      #match_ADD_An_indir_predec_reg5,D2       ;check reg is equal to 5
0000271E  6600 0006               2250                                              BNE        ADD_ea_Dn_An_indir_predec_reg6                     ;if not try reg 6
00002722  6700 005A               2251                                              BEQ        ADD_ea_Dn_An_indir_prede_r5_out               ;if equal go to output ADDroutine
00002726                          2252  
00002726  B4BC 00000026           2253  ADD_ea_Dn_An_indir_predec_reg6              CMP.L      #match_ADD_An_indir_predec_reg6,D2       ;check reg is equal to 6
0000272C  6600 0006               2254                                              BNE        ADD_ea_Dn_An_indir_predec_reg7                     ;if not try reg 7
00002730  6700 0058               2255                                              BEQ        ADD_ea_Dn_An_indir_prede_r6_out               ;if equal go to output ADDroutine
00002734                          2256  
00002734  B4BC 00000027           2257  ADD_ea_Dn_An_indir_predec_reg7              CMP.L      #match_ADD_An_indir_predec_reg7,D2       ;check reg is equal to 7
0000273A  6700 005A               2258                                              BEQ        ADD_ea_Dn_An_indir_prede_r7_out               ;if equal go to output ADDroutine
0000273E  6600 04E2               2259                                              BNE        ADD_ERROR                                    :if not equal to an addresssing mode, pritn error
00002742                          2260  
00002742                          2261  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00002742  227C 0000852C           2262  ADD_ea_Dn_An_indir_prede_r0_out         MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
00002748  4EB9 000027E8           2263                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000274E                          2264                                              
0000274E  227C 00008532           2265  ADD_ea_Dn_An_indir_prede_r1_out         MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
00002754  4EB9 000027E8           2266                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000275A                          2267  
0000275A  227C 00008538           2268  ADD_ea_Dn_An_indir_prede_r2_out         MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
00002760  4EB9 000027E8           2269                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002766                          2270  
00002766  227C 0000853E           2271  ADD_ea_Dn_An_indir_prede_r3_out         MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
0000276C  4EB9 000027E8           2272                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002772                          2273  
00002772  227C 00008544           2274  ADD_ea_Dn_An_indir_prede_r4_out         MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
00002778  4EB9 000027E8           2275                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000277E                          2276  
0000277E  227C 0000854A           2277  ADD_ea_Dn_An_indir_prede_r5_out         MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
00002784  4EB9 000027E8           2278                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000278A                          2279  
0000278A  227C 00008550           2280  ADD_ea_Dn_An_indir_prede_r6_out         MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
00002790  4EB9 000027E8           2281                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002796                          2282  
00002796  227C 00008556           2283  ADD_ea_Dn_An_indir_prede_r7_out         MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
0000279C  4EB9 000027E8           2284                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000027A2                          2285          
000027A2                          2286  ;------------------Absolute Addressing Output-----------------------
000027A2  22FC 00008566           2287  ADD_ea_Dn_abs_add_word_out               MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000027A8  22C5                    2288                                        MOVE.L      D5,(A1)+                           ;load address                  
000027AA  4E75                    2289                                        RTS                                            :return to ADDroutine
000027AC                          2290                                             
000027AC                          2291  
000027AC  2A18                    2292  ADD_ea_Dn_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000027AE  22FC 00008566           2293                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000027B4  22C5                    2294                                        MOVE.L      D5,(A1)+                           ;load address                  
000027B6  4E75                    2295                                        RTS                                            :return to ADDroutine                                            
000027B8                          2296  ;---------------Immediate Addresing---------------------------
000027B8  2A18                    2297  ADD_ea_Dn_immediate_add_out          MOVE.L     (A0)+,D5                             ;capture the immediate address
000027BA  BCBC 000000FC           2298                                       CMP.L       #match_imm_add_word,D6               ;check to see if need to pull word
000027C0  2A18                    2299                                       MOVE.L      (A0)+,D5                            ;pull the word
000027C2  6700 0006               2300                                       BEQ         ADD_ea_Dn_imm_add_w                           ;if equal go pull word    
000027C6  6600 0010               2301                                       BNE         ADD_ea_Dn_imm_add_l                           ;if not equal, go check long
000027CA                          2302                                           
000027CA  22FC 00008566           2303  ADD_ea_Dn_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
000027D0  32C5                    2304                                        MOVE.W     D5,(A1)+                             ;load the word address                           
000027D2  4EB9 000027E8           2305                                        JSR        ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000027D8                          2306                                           
000027D8  2A18                    2307  ADD_ea_Dn_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
000027DA  22FC 00008566           2308                                        MOVE.L     #ea_$,(A1)+                          ;load the $
000027E0  2245                    2309                                        MOVE.L     D5,A1                               ;move to A1
000027E2  4EB9 000027E8           2310                                        JSR        ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000027E8                          2311  
000027E8                          2312  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000027E8  4282                    2313  ADD_determine_second_op                         CLR.L       D2                          ;clear D2 
000027EA  C4BC 00000E00           2314                                                  AND.L       #mask_ADD_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
000027F0                          2315                                                  
000027F0  B4BC 00000000           2316  ea_Dn_ADD_reg0                                  CMP.L       #match_ADD_reg0,D2      ;check to see if reg equal 0
000027F6  6600 0006               2317                                                  BNE         ea_Dn_ADD_reg1                  ;if not equal got check reg 1
000027FA  6700 0064               2318                                                  BEQ         ea_Dn_ADD_reg0_out              ;if equal go to output
000027FE                          2319                                                  
000027FE  B4BC 00000200           2320  ea_Dn_ADD_reg1                                  CMP.L       #match_ADD_reg1,D2      ;check to see if reg equal 1
00002804  6600 0006               2321                                                  BNE         ea_Dn_ADD_reg2                  ;if not equal got check reg 2
00002808  6700 005E               2322                                                  BEQ         ea_Dn_ADD_reg1_out              ;if equal go to output
0000280C                          2323  
0000280C  B4BC 00000400           2324  ea_Dn_ADD_reg2                                  CMP.L       #match_ADD_reg2,D2      ;check to see if reg equal 2
00002812  6600 0006               2325                                                  BNE         ea_Dn_ADD_reg3                  ;if not equal got check reg 3
00002816  6700 0058               2326                                                  BEQ         ea_Dn_ADD_reg2_out              ;if equal go to output
0000281A                          2327  
0000281A  B4BC 00000600           2328  ea_Dn_ADD_reg3                                  CMP.L       #match_ADD_reg3,D2      ;check to see if reg equal 3
00002820  6600 0006               2329                                                  BNE         ea_Dn_ADD_reg4                  ;if not equal got check reg 4
00002824  6700 0052               2330                                                  BEQ         ea_Dn_ADD_reg3_out              ;if equal go to output
00002828                          2331                                                  
00002828  B4BC 00000800           2332  ea_Dn_ADD_reg4                                  CMP.L       #match_ADD_reg4,D2      ;check to see if reg equal 4
0000282E  6600 0006               2333                                                  BNE         ea_Dn_ADD_reg5                  ;if not equal got check reg 5
00002832  6700 004C               2334                                                  BEQ         ea_Dn_ADD_reg4_out              ;if equal go to output
00002836                          2335  
00002836  B4BC 00000A00           2336  ea_Dn_ADD_reg5                                  CMP.L       #match_ADD_reg5,D2      ;check to see if reg equal 5
0000283C  6600 0006               2337                                                  BNE         ea_Dn_ADD_reg6                  ;if not equal got check reg 6
00002840  6700 0046               2338                                                  BEQ         ea_Dn_ADD_reg5_out              ;if equal go to output
00002844                          2339  
00002844  B4BC 00000C00           2340  ea_Dn_ADD_reg6                                  CMP.L       #match_ADD_reg6,D2      ;check to see if reg equal 6
0000284A  6600 0006               2341                                                  BNE         ea_Dn_ADD_reg7                  ;if not equal got check reg 7
0000284E  6700 0040               2342                                                  BEQ         ea_Dn_ADD_reg6_out              ;if equal go to output          
00002852                          2343  
00002852  B4BC 00000E00           2344  ea_Dn_ADD_reg7                                  CMP.L       #match_ADD_reg7,D2      ;check to see if reg equal 7
00002858  6700 003E               2345                                                  BEQ         ea_Dn_ADD_reg7_out              ;if equal go to output
0000285C  6600 03C4               2346                                                  BNE         ADD_ERROR                         ;if not equal to an addresssing mode, pritn error
00002860                          2347                                  
00002860                          2348  
00002860                          2349  ;--------------------Data Output-----------------------
00002860  227C 00008494           2350  ea_Dn_ADD_reg0_out                         MOVE.L           #ea_D0,A1                                          ;load string constant into A1
00002866  4E75                    2351                                              RTS
00002868                          2352                                              
00002868  227C 00008497           2353  ea_Dn_ADD_reg1_out                         MOVE.L           #ea_D1,A1                                       ;load string constant into A1
0000286E  4E75                    2354                                              RTS
00002870                          2355                                              
00002870  227C 0000849A           2356  ea_Dn_ADD_reg2_out                         MOVE.L           #ea_D2,A1                                       ;load string constant into A1
00002876  4E75                    2357                                              RTS
00002878                          2358                                              
00002878  227C 0000849D           2359  ea_Dn_ADD_reg3_out                         MOVE.L           #ea_D3,A1                                           ;load string constant into A1
0000287E  4E75                    2360                                              RTS
00002880                          2361                                              
00002880  227C 000084A0           2362  ea_Dn_ADD_reg4_out                         MOVE.L           #ea_D4,A1                                           ;load string constant into A1
00002886  4E75                    2363                                              RTS
00002888                          2364                                              
00002888  227C 000084A3           2365  ea_Dn_ADD_reg5_out                         MOVE.L           #ea_D5,A1                                           ;load string constant into A1
0000288E  4E75                    2366                                              RTS
00002890                          2367                                              
00002890  227C 000084A6           2368  ea_Dn_ADD_reg6_out                         MOVE.L           #ea_D6,A1                                           ;load string constant into A1
00002896  4E75                    2369                                              RTS
00002898                          2370                                              
00002898  227C 000084A9           2371  ea_Dn_ADD_reg7_out                         MOVE.L           #ea_D7,A1                                           ;load string constant into A1
0000289E  4E75                    2372                                              RTS             
000028A0                          2373                                              
000028A0                          2374                      
000028A0                          2375  
000028A0                          2376  
000028A0                          2377  
000028A0                          2378  
000028A0                          2379  
000028A0                          2380  
000028A0                          2381  
000028A0                          2382  
000028A0                          2383  
000028A0                          2384  
000028A0                          2385  
000028A0                          2386  
000028A0                          2387  
000028A0                          2388  
000028A0                          2389  
000028A0                          2390  
000028A0                          2391  
000028A0                          2392  
000028A0                          2393  
000028A0                          2394  
000028A0                          2395  
000028A0                          2396  
000028A0                          2397  
000028A0                          2398  
000028A0                          2399  
000028A0                          2400  
000028A0                          2401  
000028A0                          2402  
000028A0                          2403  
000028A0                          2404  
000028A0                          2405                          
000028A0                          2406  ;------------------------------------------------------------------------------------------------------------------------------------------
000028A0                          2407  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
000028A0                          2408  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000028A0  4282                    2409  ADD_Dn_ea                                               CLR.L       D2                                ;clear D2 
000028A2  C4BC 00000E00           2410                                                  AND.L       #mask_ADD_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
000028A8                          2411                                                  
000028A8  B4BC 00000000           2412  Dn_ea_ADD_reg0                                  CMP.L       #match_ADD_reg0,D2                  ;check to see if reg equal 0
000028AE  6600 0006               2413                                                  BNE         Dn_ea_ADD_reg1                  ;if not equal got check reg 1
000028B2  6700 0064               2414                                                  BEQ         Dn_ea_ADD_reg0_out              ;if equal go to output
000028B6                          2415                                                  
000028B6  B4BC 00000200           2416  Dn_ea_ADD_reg1                                  CMP.L       #match_ADD_reg1,D2                  ;check to see if reg equal 1
000028BC  6600 0006               2417                                                  BNE         Dn_ea_ADD_reg2                  ;if not equal got check reg 2
000028C0  6700 0062               2418                                                  BEQ         Dn_ea_ADD_reg1_out              ;if equal go to output
000028C4                          2419  
000028C4  B4BC 00000400           2420  Dn_ea_ADD_reg2                                  CMP.L       #match_ADD_reg2,D2                  ;check to see if reg equal 2
000028CA  6600 0006               2421                                                  BNE         Dn_ea_ADD_reg3                  ;if not equal got check reg 3
000028CE  6700 0060               2422                                                  BEQ         Dn_ea_ADD_reg2_out              ;if equal go to output
000028D2                          2423  
000028D2  B4BC 00000600           2424  Dn_ea_ADD_reg3                                  CMP.L       #match_ADD_reg3,D2                  ;check to see if reg equal 3
000028D8  6600 0006               2425                                                  BNE         Dn_ea_ADD_reg4                  ;if not equal got check reg 4
000028DC  6700 005E               2426                                                  BEQ         Dn_ea_ADD_reg3_out              ;if equal go to output
000028E0                          2427                                                  
000028E0  B4BC 00000800           2428  Dn_ea_ADD_reg4                                  CMP.L       #match_ADD_reg4,D2                  ;check to see if reg equal 4
000028E6  6600 0006               2429                                                  BNE         Dn_ea_ADD_reg5                  ;if not equal got check reg 5
000028EA  6700 005C               2430                                                  BEQ         Dn_ea_ADD_reg4_out              ;if equal go to output
000028EE                          2431  
000028EE  B4BC 00000A00           2432  Dn_ea_ADD_reg5                                  CMP.L       #match_ADD_reg5,D2                  ;check to see if reg equal 5
000028F4  6600 0006               2433                                                  BNE         Dn_ea_ADD_reg6                  ;if not equal got check reg 6
000028F8  6700 005A               2434                                                  BEQ         Dn_ea_ADD_reg5_out              ;if equal go to output
000028FC                          2435  
000028FC  B4BC 00000C00           2436  Dn_ea_ADD_reg6                                  CMP.L       #match_ADD_reg6,D2                  ;check to see if reg equal 6
00002902  6600 0006               2437                                                  BNE         Dn_ea_ADD_reg7                  ;if not equal got check reg 7
00002906  6700 0058               2438                                                  BEQ         Dn_ea_ADD_reg6_out              ;if equal go to output          
0000290A                          2439  
0000290A  B4BC 00000E00           2440  Dn_ea_ADD_reg7                                  CMP.L       #match_ADD_reg7,D2                  ;check to see if reg equal 7
00002910  6700 005A               2441                                                  BEQ         Dn_ea_ADD_reg7_out              ;if equal go to output
00002914  6600 030C               2442                                                  BNE         ADD_ERROR                                ;if not equal to an addresssing mode, pritn error
00002918                          2443                                  
00002918                          2444  
00002918                          2445  ;--------------------Data Output-----------------------
00002918  227C 00008494           2446  Dn_ea_ADD_reg0_out               MOVE.L         #ea_D0,A1                                          ;load string constant into A1
0000291E  4EB9 00002978           2447                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002924                          2448  
00002924                          2449                                              
00002924  227C 00008497           2450  Dn_ea_ADD_reg1_out               MOVE.L         #ea_D1,A1                                       ;load string constant into A1
0000292A  4EB9 00002978           2451                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002930                          2452                                              
00002930  227C 0000849A           2453  Dn_ea_ADD_reg2_out               MOVE.L         #ea_D2,A1                                       ;load string constant into A1
00002936  4EB9 00002978           2454                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
0000293C                          2455                                              
0000293C  227C 0000849D           2456  Dn_ea_ADD_reg3_out               MOVE.L         #ea_D3,A1                                           ;load string constant into A1
00002942  4EB9 00002978           2457                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002948                          2458                                              
00002948  227C 000084A0           2459  Dn_ea_ADD_reg4_out               MOVE.L         #ea_D4,A1                                           ;load string constant into A1
0000294E  4EB9 00002978           2460                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002954                          2461                                              
00002954  227C 000084A3           2462  Dn_ea_ADD_reg5_out               MOVE.L         #ea_D5,A1                                           ;load string constant into A1
0000295A  4EB9 00002978           2463                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002960                          2464                                              
00002960  227C 000084A6           2465  Dn_ea_ADD_reg6_out               MOVE.L         #ea_D6,A1                                           ;load string constant into A1
00002966  4EB9 00002978           2466                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
0000296C                          2467                                              
0000296C  227C 000084A9           2468  Dn_ea_ADD_reg7_out               MOVE.L         #ea_D7,A1                                           ;load string constant into A1
00002972  4EB9 00002978           2469                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002978                          2470                                              
00002978                          2471  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00002978  4241                    2472  ADD_determine_second_operand     CLR               D1                                            ;clear D1 to load new mask                                
0000297A  C2BC 00000038           2473                                   AND.L             #mask_ADD_ea_mode,D1                        ;move the mask to D1
00002980                          2474  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00002980  B2BC 00000010           2475  ADD_Dn_ea_add_reg_indir          CMP.L             #match_ADD_An_indir,D1                      ;check to see if mode is add reg indir
00002986  6600 0006               2476                                   BNE               ADD_Dn_ea_add_reg_indir_predec                          ;if not, go check add reg indir predec 
0000298A  6700 0042               2477                                   BEQ               ADD_Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
0000298E                          2478             
0000298E  B2BC 00000020           2479  ADD_Dn_ea_add_reg_indir_predec   CMP.L             #match_ADD_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00002994  6600 0006               2480                                   BNE               ADD_Dn_ea_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00002998  6700 019A               2481                                   BEQ               ADD_Dn_ea_An_indir_predec                               ;if equal go figure out the register
0000299C                          2482                        
0000299C  B2BC 00000018           2483  ADD_Dn_ea_add_reg_indir_postinc  CMP.L             #match_ADD_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
000029A2  6600 0006               2484                                   BNE               ADD_Dn_ea_abs_add_word                                  ;if not go check abs add word
000029A6  6700 00DC               2485                                   BEQ               ADD_Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
000029AA                          2486  
000029AA  C4BC 0000003F           2487  ADD_Dn_ea_abs_add_word           AND.L             #mask_ADD_abs_add,D2                        ;load mask to determine if abs add word or long
000029B0                          2488                                   
000029B0  B4BC 00000038           2489                                   CMP.L             #match_ADD_abs_add_word,D2                  ;check if abs add word
000029B6  2A18                    2490                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000029B8  6600 0006               2491                                   BNE               ADD_Dn_ea_abs_add_long                                  ;if not go check abs add long
000029BC  6700 0226               2492                                   BEQ               ADD_Dn_ea_abs_add_word_out                              ;if equal go to output
000029C0                          2493    
000029C0  B4BC 00000039           2494  ADD_Dn_ea_abs_add_long           CMP.L             #match_ADD_abs_add_long,D2                  ;check to see if abs add long
000029C6  6700 0226               2495                                   BEQ               ADD_Dn_ea_abs_add_long_out                              ;if equal go to output
000029CA  6600 0256               2496                                   BNE               ADD_ERROR                                         ;if not equal go to error mesage ADD routine
000029CE                          2497  
000029CE                          2498  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000029CE                          2499                                   
000029CE                          2500                                   
000029CE                          2501  ;------------------Address Register Indirect-----------------------
000029CE  C4BC 0000003F           2502  ADD_Dn_ea_An_indir_reg           AND.L              #mask_ADD_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
000029D4  B4BC 00000010           2503                                   CMP.L          #match_ADD_An_indir_r0,D2              ;check reg is equal to 0
000029DA  6600 0006               2504                                   BNE             ADD_Dn_ea_An_indir_reg1                           ;if not try reg 1
000029DE  6700 0064               2505                                   BEQ             ADD_Dn_ea_An_indir_reg0_out                       ;if equal go to output ADDroutine
000029E2                          2506  
000029E2  B4BC 00000011           2507  ADD_Dn_ea_An_indir_reg1          CMP.L           #match_ADD_An_indir_r1,D2              ;check reg is equal to 1
000029E8  6600 0006               2508                                   BNE             ADD_Dn_ea_An_indir_reg2                           ;if not try reg 2
000029EC  6700 005E               2509                                   BEQ             ADD_Dn_ea_An_indir_reg1_out                       ;if equal go to output ADDroutine
000029F0                          2510  
000029F0  B4BC 00000012           2511  ADD_Dn_ea_An_indir_reg2          CMP.L           #match_ADD_An_indir_r2,D2              ;check reg is equal to 2
000029F6  6600 0006               2512                                   BNE             ADD_Dn_ea_An_indir_reg3                           ;if not try reg 3
000029FA  6700 0058               2513                                   BEQ             ADD_Dn_ea_An_indir_reg2_out                       ;if equal go to output ADDroutine
000029FE                          2514  
000029FE  B4BC 00000013           2515  ADD_Dn_ea_An_indir_reg3          CMP.L           #match_ADD_An_indir_r3,D2              ;check reg is equal to 3
00002A04  6600 0006               2516                                   BNE             ADD_Dn_ea_An_indir_reg4                           ;if not try reg 4
00002A08  6700 0052               2517                                   BEQ             ADD_Dn_ea_An_indir_reg3_out                       ;if equal go to output ADDroutine
00002A0C                          2518      
00002A0C  B4BC 00000014           2519  ADD_Dn_ea_An_indir_reg4          CMP.L           #match_ADD_An_indir_r4,D2              ;check reg is equal to 4
00002A12  6600 0006               2520                                   BNE             ADD_Dn_ea_An_indir_reg5                           ;if not try reg 5
00002A16  6700 004C               2521                                   BEQ             ADD_Dn_ea_An_indir_reg4_out                       ;if equal go to output ADDroutine
00002A1A                          2522          
00002A1A  B4BC 00000015           2523  ADD_Dn_ea_An_indir_reg5          CMP.L           #match_ADD_An_indir_r5,D2              ;check reg is equal to 5
00002A20  6600 0006               2524                                   BNE             ADD_Dn_ea_An_indir_reg6                           ;if not try reg 6
00002A24  6700 0046               2525                                   BEQ             ADD_Dn_ea_An_indir_reg5_out                       ;if equal go to output ADDroutine
00002A28                          2526  
00002A28  B4BC 00000016           2527  ADD_Dn_ea_An_indir_reg6          CMP.L           #match_ADD_An_indir_r6,D2              ;check reg is equal to 6
00002A2E  6600 0006               2528                                   BNE             ADD_Dn_ea_An_indir_reg7                           ;if not try reg 7
00002A32  6700 0040               2529                                   BEQ             ADD_Dn_ea_An_indir_reg6_out                       ;if equal go to output ADDroutine
00002A36                          2530  
00002A36  B4BC 00000017           2531  ADD_Dn_ea_An_indir_reg7          CMP.L           #match_ADD_An_indir_r7,D2              ;check reg is equal to 7
00002A3C  6700 003E               2532                                   BEQ             ADD_Dn_ea_An_indir_reg7_out                       ;if equal go to output ADDroutine
00002A40  6600 01E0               2533                                   BNE             ADD_ERROR                                   :if not equal to an addresssing mode, pritn error
00002A44                          2534  
00002A44                          2535  ;--------------------Address Register Indirect Output-----------------------
00002A44  227C 000084D4           2536  ADD_Dn_ea_An_indir_reg0_out         MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00002A4A  4E75                    2537                                       RTS
00002A4C                          2538  
00002A4C  227C 000084D9           2539  ADD_Dn_ea_An_indir_reg1_out         MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00002A52  4E75                    2540                                       RTS
00002A54                          2541  
00002A54  227C 000084DE           2542  ADD_Dn_ea_An_indir_reg2_out         MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00002A5A  4E75                    2543                                       RTS
00002A5C                          2544  
00002A5C  227C 000084E3           2545  ADD_Dn_ea_An_indir_reg3_out         MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00002A62  4E75                    2546                                       RTS
00002A64                          2547  
00002A64  227C 000084E8           2548  ADD_Dn_ea_An_indir_reg4_out         MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00002A6A  4E75                    2549                                       RTS
00002A6C                          2550  
00002A6C  227C 000084ED           2551  ADD_Dn_ea_An_indir_reg5_out         MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00002A72  4E75                    2552                                       RTS
00002A74                          2553  
00002A74  227C 000084F2           2554  ADD_Dn_ea_An_indir_reg6_out         MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00002A7A  4E75                    2555                                       RTS
00002A7C                          2556                                          
00002A7C  227C 000084F7           2557  ADD_Dn_ea_An_indir_reg7_out         MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00002A82  4E75                    2558                                       RTS
00002A84                          2559  
00002A84                          2560  ;------------------Address Register Indirect with Post Increment-----------------------
00002A84  B4BC 00000018           2561  ADD_Dn_ea_An_indir_postinc_reg              CMP.L      #match_ADD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00002A8A  6600 0006               2562                                              BNE        ADD_Dn_ea_An_indir_postinc_reg1                      ;if not try reg 1
00002A8E  6700 0064               2563                                              BEQ        ADD_Dn_ea_An_indir_postin_r0_out                  ;if equal go to output ADDroutine
00002A92                          2564  
00002A92  B4BC 00000019           2565  ADD_Dn_ea_An_indir_postinc_reg1             CMP.L      #match_ADD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00002A98  6600 0006               2566                                              BNE        ADD_Dn_ea_An_indir_postinc_reg2                      ;if not try reg 2
00002A9C  6700 005E               2567                                              BEQ        ADD_Dn_ea_An_indir_postin_r1_out                  ;if equal go to output ADDroutine
00002AA0                          2568  
00002AA0  B4BC 0000001A           2569  ADD_Dn_ea_An_indir_postinc_reg2             CMP.L      #match_ADD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00002AA6  6600 0006               2570                                              BNE        ADD_Dn_ea_An_indir_postinc_reg3                      ;if not try reg 3
00002AAA  6700 0058               2571                                              BEQ        ADD_Dn_ea_An_indir_postin_r2_out                  ;if equal go to output ADDroutine
00002AAE                          2572  
00002AAE  B4BC 0000001B           2573  ADD_Dn_ea_An_indir_postinc_reg3             CMP.L      #match_ADD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00002AB4  6600 0006               2574                                              BNE        ADD_Dn_ea_An_indir_postinc_reg4                      ;if not try reg 4
00002AB8  6700 0052               2575                                              BEQ        ADD_Dn_ea_An_indir_postin_r3_out                  ;if equal go to output ADDroutine
00002ABC                          2576   
00002ABC  B4BC 0000001C           2577  ADD_Dn_ea_An_indir_postinc_reg4             CMP.L      #match_ADD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00002AC2  6600 0006               2578                                              BNE        ADD_Dn_ea_An_indir_postinc_reg5                      ;if not try reg 5
00002AC6  6700 004C               2579                                              BEQ        ADD_Dn_ea_An_indir_postin_r4_out                  ;if equal go to output ADDroutine
00002ACA                          2580  
00002ACA  B4BC 0000001D           2581  ADD_Dn_ea_An_indir_postinc_reg5             CMP.L      #match_ADD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00002AD0  6600 0006               2582                                              BNE        ADD_Dn_ea_An_indir_postinc_reg6                      ;if not try reg 6
00002AD4  6700 0046               2583                                              BEQ        ADD_Dn_ea_An_indir_postin_r5_out                  ;if equal go to output ADDroutine
00002AD8                          2584  
00002AD8  B4BC 0000001E           2585  ADD_Dn_ea_An_indir_postinc_reg6             CMP.L      #match_ADD_An_indir_postinc_r6,D2         ;check reg is equal to 6
00002ADE  6600 0006               2586                                              BNE        ADD_Dn_ea_An_indir_postinc_reg7                        ;if not try reg 7
00002AE2  6700 0040               2587                                              BEQ        ADD_Dn_ea_An_indir_postin_r6_out                    ;if equal go to output ADDroutine
00002AE6                          2588  
00002AE6  B4BC 0000001F           2589  ADD_Dn_ea_An_indir_postinc_reg7             CMP.L      #match_ADD_An_indir_postinc_r7,D2         ;check reg is equal to 7
00002AEC  6700 003E               2590                                              BEQ        ADD_Dn_ea_An_indir_postin_r7_out                    ;if equal go to output ADDroutine
00002AF0  6600 0130               2591                                              BNE        ADD_ERROR                                        :if not equal to an addresssing mode, pritn error
00002AF4                          2592  
00002AF4                          2593  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00002AF4  227C 000084FC           2594  ADD_Dn_ea_An_indir_postin_r0_out                MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00002AFA  4E75                    2595                                                  RTS
00002AFC                          2596  
00002AFC  227C 00008502           2597  ADD_Dn_ea_An_indir_postin_r1_out                MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00002B02  4E75                    2598                                                  RTS
00002B04                          2599  
00002B04  227C 00008508           2600  ADD_Dn_ea_An_indir_postin_r2_out                MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00002B0A  4E75                    2601                                                  RTS
00002B0C                          2602  
00002B0C  227C 0000850E           2603  ADD_Dn_ea_An_indir_postin_r3_out                MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00002B12  4E75                    2604                                                  RTS
00002B14                          2605  
00002B14  227C 00008514           2606  ADD_Dn_ea_An_indir_postin_r4_out                MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00002B1A  4E75                    2607                                                  RTS
00002B1C                          2608  
00002B1C  227C 0000851A           2609  ADD_Dn_ea_An_indir_postin_r5_out                MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00002B22  4E75                    2610                                                  RTS
00002B24                          2611  
00002B24  227C 00008520           2612  ADD_Dn_ea_An_indir_postin_r6_out                MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00002B2A  4E75                    2613                                                  RTS
00002B2C                          2614  
00002B2C  227C 00008526           2615  ADD_Dn_ea_An_indir_postin_r7_out                MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00002B32  4E75                    2616                                                  RTS
00002B34                          2617  
00002B34                          2618  ;------------------Address Register Indirect with Pre Decrement-----------------------
00002B34  B4BC 00000020           2619  ADD_Dn_ea_An_indir_predec                   CMP.L      #match_ADD_An_indir_predec_reg0,D2       ;check reg is equal to 0
00002B3A  6600 0006               2620                                              BNE        ADD_Dn_ea_An_indir_predec_reg1                      ;if not try reg 1
00002B3E  6700 0064               2621                                              BEQ        ADD_Dn_ea_An_indir_prede_r0_out               ;if equal go to output ADDroutine
00002B42                          2622  
00002B42  B4BC 00000021           2623  ADD_Dn_ea_An_indir_predec_reg1              CMP.L      #match_ADD_An_indir_predec_reg1,D2       ;check reg is equal to 1
00002B48  6600 0006               2624                                              BNE        ADD_Dn_ea_An_indir_predec_reg2                      ;if not try reg 2
00002B4C  6700 005E               2625                                              BEQ        ADD_Dn_ea_An_indir_prede_r1_out               ;if equal go to output ADDroutine
00002B50                          2626  
00002B50  B4BC 00000022           2627  ADD_Dn_ea_An_indir_predec_reg2              CMP.L      #match_ADD_An_indir_predec_reg2,D2       ;check reg is equal to 2
00002B56  6600 0006               2628                                              BNE        ADD_Dn_ea_An_indir_predec_reg3                      ;if not try reg 3
00002B5A  6700 0058               2629                                              BEQ        ADD_Dn_ea_An_indir_prede_r2_out               ;if equal go to output ADDroutine
00002B5E                          2630  
00002B5E  B4BC 00000023           2631  ADD_Dn_ea_An_indir_predec_reg3              CMP.L      #match_ADD_An_indir_predec_reg3,D2       ;check reg is equal to 3
00002B64  6600 0006               2632                                              BNE        ADD_Dn_ea_An_indir_predec_reg4                      ;if not try reg 4
00002B68  6700 0052               2633                                              BEQ        ADD_Dn_ea_An_indir_prede_r3_out               ;if equal go to output ADDroutine
00002B6C                          2634  
00002B6C  B4BC 00000024           2635  ADD_Dn_ea_An_indir_predec_reg4              CMP.L      #match_ADD_An_indir_predec_reg4,D2       ;check reg is equal to 4
00002B72  6600 0006               2636                                              BNE        ADD_Dn_ea_An_indir_predec_reg5                      ;if not try reg 5
00002B76  6700 004C               2637                                              BEQ        ADD_Dn_ea_An_indir_prede_r4_out               ;if equal go to output ADDroutine
00002B7A                          2638  
00002B7A  B4BC 00000025           2639  ADD_Dn_ea_An_indir_predec_reg5              CMP.L      #match_ADD_An_indir_predec_reg5,D2       ;check reg is equal to 5
00002B80  6600 0006               2640                                              BNE        ADD_Dn_ea_An_indir_predec_reg6                     ;if not try reg 6
00002B84  6700 0046               2641                                              BEQ        ADD_Dn_ea_An_indir_prede_r5_out               ;if equal go to output ADDroutine
00002B88                          2642  
00002B88  B4BC 00000026           2643  ADD_Dn_ea_An_indir_predec_reg6              CMP.L      #match_ADD_An_indir_predec_reg6,D2       ;check reg is equal to 6
00002B8E  6600 0006               2644                                              BNE        ADD_Dn_ea_An_indir_predec_reg7                     ;if not try reg 7
00002B92  6700 0040               2645                                              BEQ        ADD_Dn_ea_An_indir_prede_r6_out               ;if equal go to output ADDroutine
00002B96                          2646  
00002B96  B4BC 00000027           2647  ADD_Dn_ea_An_indir_predec_reg7              CMP.L      #match_ADD_An_indir_predec_reg7,D2       ;check reg is equal to 7
00002B9C  6700 003E               2648                                              BEQ        ADD_Dn_ea_An_indir_prede_r7_out               ;if equal go to output ADDroutine
00002BA0  6600 0080               2649                                              BNE        ADD_ERROR                                    :if not equal to an addresssing mode, pritn error
00002BA4                          2650  
00002BA4                          2651  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00002BA4  227C 0000852C           2652  ADD_Dn_ea_An_indir_prede_r0_out            MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00002BAA  4E75                    2653                                                 RTS
00002BAC                          2654                                              
00002BAC  227C 00008532           2655  ADD_Dn_ea_An_indir_prede_r1_out            MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00002BB2  4E75                    2656                                                 RTS
00002BB4                          2657  
00002BB4  227C 00008538           2658  ADD_Dn_ea_An_indir_prede_r2_out            MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00002BBA  4E75                    2659                                                 RTS
00002BBC                          2660  
00002BBC  227C 0000853E           2661  ADD_Dn_ea_An_indir_prede_r3_out            MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00002BC2  4E75                    2662                                                 RTS
00002BC4                          2663  
00002BC4  227C 00008544           2664  ADD_Dn_ea_An_indir_prede_r4_out            MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00002BCA  4E75                    2665                                                 RTS
00002BCC                          2666  
00002BCC  227C 0000854A           2667  ADD_Dn_ea_An_indir_prede_r5_out            MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00002BD2  4E75                    2668                                                 RTS
00002BD4                          2669  
00002BD4  227C 00008550           2670  ADD_Dn_ea_An_indir_prede_r6_out            MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00002BDA  4E75                    2671                                                 RTS
00002BDC                          2672  
00002BDC  227C 00008556           2673  ADD_Dn_ea_An_indir_prede_r7_out            MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00002BE2  4E75                    2674                                                 RTS
00002BE4                          2675                                              
00002BE4                          2676  ;------------------Absolute Addressing Output-----------------------
00002BE4  22FC 00008566           2677  ADD_Dn_ea_abs_add_word_out            MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002BEA  22C5                    2678                                        MOVE.L      D5,(A1)+                           ;load address                  
00002BEC  4E75                    2679                                        RTS                                            :return to ADDroutine
00002BEE                          2680                                             
00002BEE                          2681  
00002BEE                          2682  
00002BEE  2A18                    2683  ADD_Dn_ea_abs_add_long_out            MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00002BF0  22FC 00008566           2684                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002BF6  22C5                    2685                                        MOVE.L      D5,(A1)+                           ;load address                  
00002BF8  4E75                    2686                                        RTS                                            :return to ADDroutine                                            
00002BFA                          2687  ;---------------Immediate Addresing--------------------------
00002BFA  2A18                    2688  ADD_Dn_ea_immediate_add_out           MOVE.L        (A0)+,D5                             ;capture the immediate address
00002BFC  BCBC 000000FC           2689                                        CMP.L       #match_imm_add_word,D6               ;check to see if need to pull word
00002C02  2A18                    2690                                        MOVE.L      (A0)+,D5                            ;pull the word
00002C04  6700 0006               2691                                        BEQ         ADD_Dn_ea_imm_add_w                           ;if equal go pull word    
00002C08  6600 000C               2692                                        BNE         ADD_Dn_ea_imm_add_l                           ;if not equal, go check long
00002C0C                          2693                                           
00002C0C  22FC 00008566           2694  ADD_Dn_ea_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
00002C12  32C5                    2695                                        MOVE.W     D5,(A1)+                             ;load the word address                           
00002C14  4E75                    2696                                        RTS
00002C16                          2697                                           
00002C16  2A18                    2698  ADD_Dn_ea_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
00002C18  22FC 00008566           2699                                        MOVE.L     #ea_$,(A1)+                          ;load the $
00002C1E  2245                    2700                                        MOVE.L     D5,A1                               ;move to A1
00002C20  4E75                    2701                                        RTS
00002C22                          2702  
00002C22                          2703  
00002C22                          2704  
00002C22                          2705  
00002C22                          2706  
00002C22                          2707  
00002C22                          2708  
00002C22                          2709  
00002C22                          2710  
00002C22                          2711  
00002C22                          2712  
00002C22                          2713                                   
00002C22                          2714  ;----------------------Error Handling----------------------------------------
00002C22  43F9 00008480           2715  ADD_ERROR                                           LEA     ERROR_MESSAGE,A1                                         ;load error messge into A3
00002C28  4E75                    2716                                                  RTS
00002C2A                          2717                                                  
00002C2A                          2718                                                  
00002C2A  =000001C0               2719  mask_opmode                          EQU         $01C0                   ;mask for the opmode to determine operand order
00002C2A                          2720  
00002C2A  =00000038               2721  mask_ADD_ea_mode                    EQU         $0038
00002C2A  =0000003F               2722  mask_ADD_abs_add                    EQU         $003F
00002C2A  =0000003F               2723  mask_ADD_ea_reg_and_mode            EQU         $003F
00002C2A  =00000E00               2724  mask_ADD_An_reg                 EQU         $0E00
00002C2A                          2725  
00002C2A                          2726  
00002C2A  =00000100               2727  match_ADD_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
00002C2A  =00000140               2728  match_ADD_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
00002C2A  =00000180               2729  match_ADD_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
00002C2A                          2730  
00002C2A  =00000000               2731  match_ADD_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
00002C2A  =00000040               2732  match_ADD_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
00002C2A  =00000080               2733  match_ADD_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
00002C2A                          2734  
00002C2A                          2735  
00002C2A                          2736  
00002C2A  =00000000               2737  match_ADD_Dn                        EQU         $0000
00002C2A  =00000008               2738  match_ADD_An                        EQU         $0008
00002C2A  =00000010               2739  match_ADD_An_indir                  EQU         $0010
00002C2A  =00000020               2740  match_ADD_An_indir_predec           EQU         $0020
00002C2A  =00000018               2741  match_ADD_An_indir_postinc          EQU         $0018
00002C2A  =00000038               2742  match_ADD_abs_add_word              EQU         $0038
00002C2A  =00000039               2743  match_ADD_abs_add_long              EQU         $0039
00002C2A                          2744  
00002C2A  =00000000               2745  match_ADD_D0                            EQU         $0000
00002C2A  =00000001               2746  match_ADD_D1                            EQU         $0001
00002C2A  =00000002               2747  match_ADD_D2                            EQU         $0002
00002C2A  =00000003               2748  match_ADD_D3                            EQU         $0003
00002C2A  =00000004               2749  match_ADD_D4                            EQU         $0004
00002C2A  =00000005               2750  match_ADD_D5                            EQU         $0005
00002C2A  =00000006               2751  match_ADD_D6                            EQU         $0006
00002C2A  =00000007               2752  match_ADD_D7                            EQU         $0007
00002C2A                          2753  
00002C2A  =00000008               2754  match_ADD_A0                            EQU         $0008
00002C2A  =00000009               2755  match_ADD_A1                            EQU         $0009
00002C2A  =0000000A               2756  match_ADD_A2                            EQU         $000A
00002C2A  =0000000B               2757  match_ADD_A3                            EQU         $000B
00002C2A  =0000000C               2758  match_ADD_A4                            EQU         $000C
00002C2A  =0000000D               2759  match_ADD_A5                            EQU         $000D
00002C2A  =0000000E               2760  match_ADD_A6                            EQU         $000E
00002C2A  =0000000F               2761  match_ADD_A7                            EQU         $000F
00002C2A                          2762  
00002C2A  =00000010               2763  match_ADD_An_indir_r0                   EQU         $0010
00002C2A  =00000011               2764  match_ADD_An_indir_r1                   EQU         $0011
00002C2A  =00000012               2765  match_ADD_An_indir_r2                   EQU         $0012
00002C2A  =00000013               2766  match_ADD_An_indir_r3                   EQU         $0013
00002C2A  =00000014               2767  match_ADD_An_indir_r4                   EQU         $0014
00002C2A  =00000015               2768  match_ADD_An_indir_r5                   EQU         $0015
00002C2A  =00000016               2769  match_ADD_An_indir_r6                   EQU         $0016
00002C2A  =00000017               2770  match_ADD_An_indir_r7                   EQU         $0017
00002C2A                          2771  
00002C2A  =00000018               2772  match_ADD_An_indir_postinc_r0       EQU         $0018
00002C2A  =00000019               2773  match_ADD_An_indir_postinc_r1       EQU         $0019
00002C2A  =0000001A               2774  match_ADD_An_indir_postinc_r2       EQU         $001A
00002C2A  =0000001B               2775  match_ADD_An_indir_postinc_r3       EQU         $001B
00002C2A  =0000001C               2776  match_ADD_An_indir_postinc_r4       EQU         $001C
00002C2A  =0000001D               2777  match_ADD_An_indir_postinc_r5       EQU         $001D
00002C2A  =0000001E               2778  match_ADD_An_indir_postinc_r6       EQU         $001E
00002C2A  =0000001F               2779  match_ADD_An_indir_postinc_r7       EQU         $001F
00002C2A                          2780  
00002C2A  =00000020               2781  match_ADD_An_indir_predec_reg0          EQU         $0020
00002C2A  =00000021               2782  match_ADD_An_indir_predec_reg1          EQU         $0021
00002C2A  =00000022               2783  match_ADD_An_indir_predec_reg2          EQU         $0022
00002C2A  =00000023               2784  match_ADD_An_indir_predec_reg3          EQU         $0023
00002C2A  =00000024               2785  match_ADD_An_indir_predec_reg4          EQU         $0024
00002C2A  =00000025               2786  match_ADD_An_indir_predec_reg5          EQU         $0025
00002C2A  =00000026               2787  match_ADD_An_indir_predec_reg6          EQU         $0026
00002C2A  =00000027               2788  match_ADD_An_indir_predec_reg7          EQU         $0027
00002C2A                          2789  
00002C2A  =0000003C               2790  match_imm_add                           EQU         $003C
00002C2A  =000000FC               2791  match_imm_add_word                      EQU         $00FC
00002C2A  =000001FC               2792  match_imm_add_long                      EQU         $01FC
00002C2A                          2793  
00002C2A  =00000000               2794  match_ADD_reg0                          EQU         $0000
00002C2A  =00000200               2795  match_ADD_reg1                          EQU         $0200
00002C2A  =00000400               2796  match_ADD_reg2                          EQU         $0400
00002C2A  =00000600               2797  match_ADD_reg3                          EQU         $0600
00002C2A  =00000800               2798  match_ADD_reg4                          EQU         $0800
00002C2A  =00000A00               2799  match_ADD_reg5                          EQU         $0A00
00002C2A  =00000C00               2800  match_ADD_reg6                          EQU         $0C00
00002C2A  =00000E00               2801  match_ADD_reg7                          EQU         $0E00
00002C2A                          2802  
00002C2A                          2803  
00002C2A                          2804  
00002C2A                          2805  
00002C2A                          2806  
00002C2A                          2807  
00002C2A                          2808  
00002C2A                          2809  
00002C2A                          2810  -------------------- end include --------------------
00002C2A                          2811              INCLUDE 'AND Subroutine.x68'
00002C2A                          2812     
00002C2A                          2813  ;--------------------------------------------------------AND ANDroutine-----------------------------------------------------------------------
00002C2A                          2814  AND_sub                                                ;preserve the registers, 
00002C2A                          2815                                   
00002C2A  C2BC 000001C0           2816                                         AND.L              #mask_opmode,D1                       ;load mask to determine the operand order
00002C30                          2817                                  
00002C30  B2BC 00000000           2818  AND_Dn_ea_match                        CMP.L              #match_AND_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00002C36  6700 0616               2819                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002C3A  6600 0002               2820                                         BNE                AND_Dn_ea_match_w                     ;if not check word size for same order
00002C3E                          2821  
00002C3E  B2BC 00000040           2822  AND_Dn_ea_match_w                      CMP.L              #match_AND_w_Dn_ea,D1                 ;check to see if it's Dn,ea
00002C44  6700 0608               2823                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002C48  6600 0002               2824                                         BNE                AND_Dn_ea_match_l                     ;if not check long size for same order
00002C4C                          2825  
00002C4C  B2BC 00000080           2826  AND_Dn_ea_match_l                      CMP.L              #match_AND_l_Dn_ea,D1                 ;check to see if it's Dn,ea
00002C52  6700 05FA               2827                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002C56  6600 0002               2828                                         BNE                AND_ea_Dn_match                           ;if not check other order
00002C5A                          2829  
00002C5A  B2BC 00000100           2830  AND_ea_Dn_match                        CMP.L              #match_AND_b_ea_Dn,D1                 ;check to see if it's ea,Dn
00002C60  6700 0022               2831                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002C64  6600 0002               2832                                         BNE                AND_ea_Dn_match_w                     ;if not go check word size for same order
00002C68                          2833  
00002C68  B2BC 00000140           2834  AND_ea_Dn_match_w                      CMP.L              #match_AND_w_ea_Dn,D1                 ;check to see if it's ea,Dn
00002C6E  6700 0014               2835                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002C72  6600 0002               2836                                         BNE                AND_ea_Dn_match_l                     ;if not go check word size for same order
00002C76                          2837  
00002C76  B2BC 00000180           2838  AND_ea_Dn_match_l                      CMP.L              #match_AND_l_ea_Dn,D1                 ;check to see if it's ea,Dn
00002C7C  6700 0006               2839                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002C80  6600 4528               2840                                         BNE                ERROR                                 ;if not go to error message
00002C84                          2841  ;--------------------------------------------------------------------------------------------------------------------------
00002C84                          2842  ;-------------------------------------------------------------------------------------------------------------------------
00002C84  4241                    2843  AND_ea_Dn                            CLR               D1                                          ;clear D1 to load new mask                                
00002C86  C2BC 00000038           2844                                       AND.L             #mask_AND_ea_mode,D1                        ;move the mask to D1
00002C8C                          2845  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00002C8C  B2BC 00000010           2846  AND_ea_Dn_add_reg_indir              CMP.L             #match_AND_An_indir,D1                       ;check to see if mode is add reg indir
00002C92  6600 0006               2847                                       BNE               AND_ea_Dn_add_reg_indir_pdec                 ;if not, go check add reg indir predec 
00002C96  6700 0208               2848                                       BEQ               AND_ea_Dn_An_indir_reg                       ;if equal go figure out the register           
00002C9A                          2849             
00002C9A  B2BC 00000020           2850  AND_ea_Dn_add_reg_indir_pdec         CMP.L             #match_AND_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00002CA0  6600 0006               2851                                       BNE               AND_ea_Dn_add_reg_indir_pinc                 ;if not go check add reg indir/predec
00002CA4  6700 03BA               2852                                       BEQ               AND_ea_Dn_An_indir_predec                      ;if equal go figure out the register
00002CA8                          2853                        
00002CA8  B2BC 00000018           2854  AND_ea_Dn_add_reg_indir_pinc         CMP.L             #match_AND_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00002CAE  6600 0006               2855                                       BNE               AND_ea_Dn_abs_add_word                       ;if not go check abs add word
00002CB2  6700 02CC               2856                                       BEQ               AND_ea_Dn_An_indir_pinc_reg                    ;if equal go figure out the register
00002CB6                          2857  
00002CB6  C4BC 0000003F           2858  AND_ea_Dn_abs_add_word               AND.L             #mask_AND_abs_add,D2                         ;load mask to determine if abs add word or long
00002CBC                          2859                                   
00002CBC  B4BC 00000038           2860                                       CMP.L             #match_AND_abs_add_word,D2                   ;check if abs add word
00002CC2  2A18                    2861                                       MOVE.L            (A0)+,D5                                     ;pull the next word instruction that holds the address
00002CC4  6600 0006               2862                                       BNE               AND_ea_Dn_abs_add_long                       ;if not go check abs add long
00002CC8  6700 0476               2863                                       BEQ               AND_ea_Dn_abs_add_word_out                   ;if equal go to output
00002CCC                          2864    
00002CCC  B4BC 00000039           2865  AND_ea_Dn_abs_add_long               CMP.L             #match_AND_abs_add_long,D2                   ;check to see if abs add long
00002CD2  6700 047C               2866                                       BEQ               AND_ea_Dn_abs_add_long_out                   ;if equal go to output
00002CD6  6600 44D2               2867                                       BNE               ERROR                                        ;if not equal go to error mesage AND routine
00002CDA                          2868  
00002CDA                          2869  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00002CDA                          2870                                   
00002CDA                          2871                                   
00002CDA                          2872  ;-----------------------------------Data Register Direct--------------------------------
00002CDA  C4BC 0000003F           2873  AND_ea_Dn_Dn_reg                 AND.L              #mask_AND_ea_reg_and_mode,D2             ;load the mask into D2 for the mode and the register
00002CE0  B4BC 00000000           2874                                   CMP.L              #match_AND_D0,D2                         ;check to see in the register is 0
00002CE6  6600 0006               2875                                   BNE                AND_ea_Dn_rD1                            ;if not go check register 1
00002CEA  6700 0064               2876                                   BEQ                AND_ea_Dn_D0_out                         ;if equal go to output ANDroutine
00002CEE                          2877  
00002CEE  B4BC 00000001           2878  AND_ea_Dn_rD1                    CMP.L              #match_AND_D1,D2                          ;check to see in the register is 1
00002CF4  6600 0006               2879                                   BNE                AND_ea_Dn_rD2                             ;if not go check register 2
00002CF8  6700 0064               2880                                   BEQ                AND_ea_Dn_D1_out                          ;if equal go to output ANDroutine
00002CFC                          2881  
00002CFC  B4BC 00000002           2882  AND_ea_Dn_rD2                    CMP.L              #match_AND_D2,D2                          ;check to see in the register is 2
00002D02  6600 0006               2883                                   BNE                AND_ea_Dn_rD3                             ;if not go check register 3
00002D06  6700 0064               2884                                   BEQ                AND_ea_Dn_D2_out                          ;if equal go to output ANDroutine
00002D0A                          2885  
00002D0A  B4BC 00000003           2886  AND_ea_Dn_rD3                    CMP.L              #match_AND_D3,D2                          ;check to see in the register is 3
00002D10  6600 0006               2887                                   BNE                AND_ea_Dn_rD4                             ;if not go check register 4
00002D14  6700 0064               2888                                   BEQ                AND_ea_Dn_D3_out                          ;if equal go to output ANDroutine
00002D18                          2889  
00002D18  B4BC 00000004           2890  AND_ea_Dn_rD4                    CMP.L              #match_AND_D4,D2                          ;check to see in the register is 4
00002D1E  6600 0006               2891                                   BNE                AND_ea_Dn_rD5                             ;if not go check register 5
00002D22  6700 0064               2892                                   BEQ                AND_ea_Dn_D4_out                          ;if equal go to output ANDroutine
00002D26                          2893  
00002D26  B4BC 00000005           2894  AND_ea_Dn_rD5                    CMP.L              #match_AND_D5,D2                          ;check to see in the register is 5
00002D2C  6600 0006               2895                                   BNE                AND_ea_Dn_rD6                             ;if not go check register 6
00002D30  6700 0064               2896                                   BEQ                AND_ea_Dn_D5_out                          ;if equal go to output ANDroutine
00002D34                          2897  
00002D34  B4BC 00000006           2898  AND_ea_Dn_rD6                    CMP.L              #match_AND_D6,D2                          ;check to see in the register is 6
00002D3A  6600 0006               2899                                   BNE                AND_ea_Dn_rD7                             ;if not go check register 7
00002D3E  6700 0064               2900                                   BEQ                AND_ea_Dn_D6_out                          ;if equal go to output ANDroutine
00002D42                          2901  
00002D42  B4BC 00000007           2902  AND_ea_Dn_rD7                    CMP.L              #match_AND_D7,D2                          ;check to see in the register is 7
00002D48  6700 0068               2903                                   BEQ                AND_ea_Dn_D7_out                          ;if equal go to output ANDroutine
00002D4C  6600 445C               2904                                   BNE                ERROR                                     ;if not equal, got to error message
00002D50                          2905  ;--------------------Data Register Direct Output-----------------------
00002D50  227C 00008494           2906  AND_ea_Dn_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
00002D56  4EB9 00003196           2907                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D5C  4E75                    2908                                  RTS
00002D5E                          2909                                  
00002D5E  227C 00008497           2910  AND_ea_Dn_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
00002D64  4EB9 00003196           2911                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D6A  4E75                    2912                                  RTS
00002D6C                          2913                                  
00002D6C  227C 0000849A           2914  AND_ea_Dn_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
00002D72  4EB9 00003196           2915                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D78  4E75                    2916                                  RTS
00002D7A                          2917                                  
00002D7A  227C 0000849D           2918  AND_ea_Dn_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
00002D80  4EB9 00003196           2919                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D86  4E75                    2920                                  RTS
00002D88                          2921                                  
00002D88  227C 000084A0           2922  AND_ea_Dn_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
00002D8E  4EB9 00003196           2923                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D94  4E75                    2924                                  RTS
00002D96                          2925                                  
00002D96  227C 000084A3           2926  AND_ea_Dn_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00002D9C  4EB9 00003196           2927                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DA2  4E75                    2928                                  RTS
00002DA4                          2929                                  
00002DA4  227C 000084A6           2930  AND_ea_Dn_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00002DAA  4EB9 00003196           2931                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DB0  4E75                    2932                                  RTS
00002DB2                          2933                                  
00002DB2  227C 000084A9           2934  AND_ea_Dn_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00002DB8  4EB9 00003196           2935                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DBE  4E75                    2936                                  RTS
00002DC0                          2937                                  
00002DC0                          2938  ;------------------Address Register Direct-----------------------
00002DC0  B4BC 00000008           2939  AND_ea_Dn_An_reg                 CMP.L           #match_AND_A0,D2                        ;check reg is equal to 0
00002DC6  6600 0006               2940                                   BNE             AND_ea_Dn_rA1                           ;if not try reg 1
00002DCA  6700 0144               2941                                   BEQ             AND_ea_Dn_An_indir_reg0_out             ;if equal go to output ANDroutine
00002DCE                          2942  
00002DCE  B4BC 00000009           2943  AND_ea_Dn_rA1                    CMP.L           #match_AND_A1,D2                        ;check reg is equal to 1
00002DD4  6600 0006               2944                                   BNE             AND_ea_Dn_rA2                           ;if not try reg 2
00002DD8  6700 0144               2945                                   BEQ             AND_ea_Dn_An_indir_reg1_out             ;if equal go to output ANDroutine
00002DDC                          2946  
00002DDC  B4BC 0000000A           2947  AND_ea_Dn_rA2                    CMP.L           #match_AND_A2,D2                        ;check reg is equal to 2
00002DE2  6600 0006               2948                                   BNE             AND_ea_Dn_rA3                           ;if not try reg 3
00002DE6  6700 0144               2949                                   BEQ             AND_ea_Dn_An_indir_reg2_out             ;if equal go to output ANDroutine
00002DEA                          2950  
00002DEA  B4BC 0000000B           2951  AND_ea_Dn_rA3                    CMP.L           #match_AND_A3,D2                        ;check reg is equal to 3
00002DF0  6600 0006               2952                                   BNE             AND_ea_Dn_rA4                           ;if not try reg 4
00002DF4  6700 0144               2953                                   BEQ             AND_ea_Dn_An_indir_reg3_out             ;if equal go to output ANDroutine
00002DF8                          2954  
00002DF8  B4BC 0000000C           2955  AND_ea_Dn_rA4                    CMP.L           #match_AND_A4,D2                        ;check reg is equal to 4
00002DFE  6600 0006               2956                                   BNE             AND_ea_Dn_rA5                           ;if not try reg 5
00002E02  6700 0144               2957                                   BEQ             AND_ea_Dn_An_indir_reg4_out             ;if equal go to output ANDroutine
00002E06                          2958              
00002E06  B4BC 0000000D           2959  AND_ea_Dn_rA5                    CMP.L           #match_AND_A5,D2                        ;check reg is equal to 5
00002E0C  6600 0006               2960                                   BNE             AND_ea_Dn_rA6                           ;if not try reg 6
00002E10  6700 0144               2961                                   BEQ             AND_ea_Dn_An_indir_reg5_out             ;if equal go to output ANDroutine
00002E14                          2962  
00002E14  B4BC 0000000E           2963  AND_ea_Dn_rA6                    CMP.L           #match_AND_A6,D2                        ;check reg is equal to 6
00002E1A  6600 0006               2964                                   BNE             AND_ea_Dn_rA7                           ;if not try reg 7
00002E1E  6700 0144               2965                                   BEQ             AND_ea_Dn_An_indir_reg6_out             ;if equal go to output ANDroutine
00002E22                          2966  
00002E22  B4BC 0000000F           2967  AND_ea_Dn_rA7                    CMP.L           #match_AND_A7,D2                        ;check reg is equal to 7
00002E28  6700 0148               2968                                   BEQ             AND_ea_Dn_An_indir_reg7_out             ;if equal go to output ANDroutine
00002E2C  6600 437C               2969                                   BNE             ERROR                                   ;if not equal to an addresssing mode, pritn error
00002E30                          2970  
00002E30                          2971  ;--------------------Address Register Direct Output-----------------------
00002E30  227C 000084AC           2972  AND_ea_Dn_A0_out                MOVE.L          #ea_A0,A1                               ;load string constant into A1
00002E36  4EB9 00003196           2973                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E3C  4E75                    2974                                  RTS
00002E3E                          2975                                  
00002E3E  227C 000084AF           2976  AND_ea_Dn_A1_out                MOVE.L          #ea_A1,A1                               ;load string constant into A1
00002E44  4EB9 00003196           2977                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E4A  4E75                    2978                                  RTS
00002E4C                          2979                                  
00002E4C  227C 000084B2           2980  AND_ea_Dn_A2_out                MOVE.L          #ea_A2,A1                               ;load string constant into A1
00002E52  4EB9 00003196           2981                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E58  4E75                    2982                                  RTS
00002E5A                          2983                                  
00002E5A  227C 000084B5           2984  AND_ea_Dn_A3_out                MOVE.L          #ea_A3,A1                               ;load string constant into A1
00002E60  4EB9 00003196           2985                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E66  4E75                    2986                                  RTS
00002E68                          2987                                  
00002E68  227C 000084B8           2988  AND_ea_Dn_A4_out                MOVE.L          #ea_A4,A1                               ;load string constant into A1
00002E6E  4EB9 00003196           2989                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E74  4E75                    2990                                  RTS
00002E76                          2991                                  
00002E76  227C 000084BB           2992  AND_ea_Dn_A5_out                MOVE.L          #ea_A5,A1                               ;load string constant into A1
00002E7C  4EB9 00003196           2993                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E82  4E75                    2994                                  RTS
00002E84                          2995                                  
00002E84  227C 000084BE           2996  AND_ea_Dn_A6_out                MOVE.L          #ea_A6,A1                               ;load string constant into A1
00002E8A  4EB9 00003196           2997                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E90  4E75                    2998                                  RTS
00002E92                          2999                                  
00002E92  227C 000084C1           3000  AND_ea_Dn_A7_out                MOVE.L          #ea_A7,A1                               ;load string constant into A1
00002E98  4EB9 00003196           3001                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E9E  4E75                    3002                                  RTS
00002EA0                          3003                                  
00002EA0                          3004  ;------------------Address Register Indirect-----------------------
00002EA0  B4BC 00000010           3005  AND_ea_Dn_An_indir_reg           CMP.L          #match_AND_An_indir_r0,D2              ;check reg is equal to 0
00002EA6  6600 0006               3006                                   BNE             AND_ea_Dn_An_indir_reg1               ;if not try reg 1
00002EAA  6700 0064               3007                                   BEQ             AND_ea_Dn_An_indir_reg0_out           ;if equal go to output ANDroutine
00002EAE                          3008  
00002EAE  B4BC 00000011           3009  AND_ea_Dn_An_indir_reg1          CMP.L           #match_AND_An_indir_r1,D2             ;check reg is equal to 1
00002EB4  6600 0006               3010                                   BNE             AND_ea_Dn_An_indir_reg2               ;if not try reg 2
00002EB8  6700 0064               3011                                   BEQ             AND_ea_Dn_An_indir_reg1_out           ;if equal go to output ANDroutine
00002EBC                          3012  
00002EBC  B4BC 00000012           3013  AND_ea_Dn_An_indir_reg2          CMP.L           #match_AND_An_indir_r2,D2             ;check reg is equal to 2
00002EC2  6600 0006               3014                                   BNE             AND_ea_Dn_An_indir_reg3               ;if not try reg 3
00002EC6  6700 0064               3015                                   BEQ             AND_ea_Dn_An_indir_reg2_out           ;if equal go to output ANDroutine
00002ECA                          3016  
00002ECA  B4BC 00000013           3017  AND_ea_Dn_An_indir_reg3          CMP.L           #match_AND_An_indir_r3,D2             ;check reg is equal to 3
00002ED0  6600 0006               3018                                   BNE             AND_ea_Dn_An_indir_reg4               ;if not try reg 4
00002ED4  6700 0064               3019                                   BEQ             AND_ea_Dn_An_indir_reg3_out           ;if equal go to output ANDroutine
00002ED8                          3020      
00002ED8  B4BC 00000014           3021  AND_ea_Dn_An_indir_reg4          CMP.L           #match_AND_An_indir_r4,D2             ;check reg is equal to 4
00002EDE  6600 0006               3022                                   BNE             AND_ea_Dn_An_indir_reg5               ;if not try reg 5
00002EE2  6700 0064               3023                                   BEQ             AND_ea_Dn_An_indir_reg4_out           ;if equal go to output ANDroutine
00002EE6                          3024          
00002EE6  B4BC 00000015           3025  AND_ea_Dn_An_indir_reg5          CMP.L           #match_AND_An_indir_r5,D2             ;check reg is equal to 5
00002EEC  6600 0006               3026                                   BNE             AND_ea_Dn_An_indir_reg6               ;if not try reg 6
00002EF0  6700 0064               3027                                   BEQ             AND_ea_Dn_An_indir_reg5_out           ;if equal go to output ANDroutine
00002EF4                          3028  
00002EF4  B4BC 00000016           3029  AND_ea_Dn_An_indir_reg6          CMP.L           #match_AND_An_indir_r6,D2             ;check reg is equal to 6
00002EFA  6600 0006               3030                                   BNE             AND_ea_Dn_An_indir_reg7               ;if not try reg 7
00002EFE  6700 0064               3031                                   BEQ             AND_ea_Dn_An_indir_reg6_out           ;if equal go to output ANDroutine
00002F02                          3032  
00002F02  B4BC 00000017           3033  AND_ea_Dn_An_indir_reg7          CMP.L           #match_AND_An_indir_r7,D2             ;check reg is equal to 7
00002F08  6700 0068               3034                                   BEQ             AND_ea_Dn_An_indir_reg7_out           ;if equal go to output ANDroutine
00002F0C  6600 429C               3035                                   BNE             ERROR                                 ;if not equal to an addresssing mode, pritn error
00002F10                          3036  
00002F10                          3037  ;--------------------Address Register Indirect Output-----------------------
00002F10  227C 000084D4           3038  AND_ea_Dn_An_indir_reg0_out                 MOVE.L          #ea_indir_A0,A1                       ;load string constant into A1
00002F16  4EB9 00003196           3039                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F1C  4E75                    3040                                              RTS
00002F1E                          3041                                              
00002F1E  227C 000084D9           3042  AND_ea_Dn_An_indir_reg1_out                 MOVE.L          #ea_indir_A1,A1                     ;load string constant into A1
00002F24  4EB9 00003196           3043                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F2A  4E75                    3044                                              RTS
00002F2C                          3045                                              
00002F2C  227C 000084DE           3046  AND_ea_Dn_An_indir_reg2_out                 MOVE.L          #ea_indir_A2,A1                     ;load string constant into A1
00002F32  4EB9 00003196           3047                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F38  4E75                    3048                                              RTS
00002F3A                          3049                                              
00002F3A  227C 000084E3           3050  AND_ea_Dn_An_indir_reg3_out                 MOVE.L          #ea_indir_A3,A1                     ;load string constant into A1
00002F40  4EB9 00003196           3051                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F46  4E75                    3052                                              RTS
00002F48                          3053                                              
00002F48  227C 000084E8           3054  AND_ea_Dn_An_indir_reg4_out                 MOVE.L          #ea_indir_A4,A1                     ;load string constant into A1
00002F4E  4EB9 00003196           3055                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F54  4E75                    3056                                              RTS
00002F56                          3057                                              
00002F56  227C 000084ED           3058  AND_ea_Dn_An_indir_reg5_out                 MOVE.L          #ea_indir_A5,A1                     ;load string constant into A1
00002F5C  4EB9 00003196           3059                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F62  4E75                    3060                                              RTS
00002F64                          3061                                              
00002F64  227C 000084F2           3062  AND_ea_Dn_An_indir_reg6_out                 MOVE.L          #ea_indir_A6,A1                     ;load string constant into A1
00002F6A  4EB9 00003196           3063                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F70  4E75                    3064                                              RTS
00002F72                          3065                                          
00002F72  227C 000084F7           3066  AND_ea_Dn_An_indir_reg7_out                 MOVE.L          #ea_indir_A7,A1                     ;load string constant into A1
00002F78  4EB9 00003196           3067                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F7E  4E75                    3068                                              RTS
00002F80                          3069                                              
00002F80                          3070  ;------------------Address Register Indirect with Post Increment-----------------------
00002F80  B4BC 00000018           3071  AND_ea_Dn_An_indir_pinc_reg                 CMP.L      #match_AND_An_indir_postinc_r0,D2                    ;check reg is equal to 0
00002F86  6600 0006               3072                                              BNE        AND_ea_Dn_An_indir_pinc_r1                      ;if not try reg 1
00002F8A  6700 0064               3073                                              BEQ        AND_ea_Dn_An_indir_pinc_r0_out                  ;if equal go to output ANDroutine
00002F8E                          3074  
00002F8E  B4BC 00000019           3075  AND_ea_Dn_An_indir_pinc_r1                  CMP.L      #match_AND_An_indir_postinc_r1,D2                    ;check reg is equal to 1
00002F94  6600 0006               3076                                              BNE        AND_ea_Dn_An_indir_pinc_r2                      ;if not try reg 2
00002F98  6700 0064               3077                                              BEQ        AND_ea_Dn_An_indir_pinc_r1_out                  ;if equal go to output ANDroutine
00002F9C                          3078  
00002F9C  B4BC 0000001A           3079  AND_ea_Dn_An_indir_pinc_r2                  CMP.L      #match_AND_An_indir_postinc_r2,D2                    ;check reg is equal to 2
00002FA2  6600 0006               3080                                              BNE        AND_ea_Dn_An_indir_pinc_r3                      ;if not try reg 3
00002FA6  6700 0064               3081                                              BEQ        AND_ea_Dn_An_indir_pinc_r2_out                  ;if equal go to output ANDroutine
00002FAA                          3082  
00002FAA  B4BC 0000001B           3083  AND_ea_Dn_An_indir_pinc_r3                  CMP.L      #match_AND_An_indir_postinc_r3,D2                    ;check reg is equal to 3
00002FB0  6600 0006               3084                                              BNE        AND_ea_Dn_An_indir_pinc_r4                      ;if not try reg 4
00002FB4  6700 0064               3085                                              BEQ        AND_ea_Dn_An_indir_pinc_r3_out                  ;if equal go to output ANDroutine
00002FB8                          3086   
00002FB8  B4BC 0000001C           3087  AND_ea_Dn_An_indir_pinc_r4                  CMP.L      #match_AND_An_indir_postinc_r4,D2                    ;check reg is equal to 4
00002FBE  6600 0006               3088                                              BNE        AND_ea_Dn_An_indir_pinc_r5                      ;if not try reg 5
00002FC2  6700 0064               3089                                              BEQ        AND_ea_Dn_An_indir_pinc_r4_out                  ;if equal go to output ANDroutine
00002FC6                          3090  
00002FC6  B4BC 0000001D           3091  AND_ea_Dn_An_indir_pinc_r5                  CMP.L      #match_AND_An_indir_postinc_r5,D2                    ;check reg is equal to 5
00002FCC  6600 0006               3092                                              BNE        AND_ea_Dn_An_indir_pinc_r6                      ;if not try reg 6
00002FD0  6700 0064               3093                                              BEQ        AND_ea_Dn_An_indir_pinc_r5_out                  ;if equal go to output ANDroutine
00002FD4                          3094  
00002FD4  B4BC 0000001E           3095  AND_ea_Dn_An_indir_pinc_r6                  CMP.L      #match_AND_An_indir_postinc_r6,D2                      ;check reg is equal to 6
00002FDA  6600 0006               3096                                              BNE        AND_ea_Dn_An_indir_pinc_r7                        ;if not try reg 7
00002FDE  6700 0064               3097                                              BEQ        AND_ea_Dn_An_indir_pinc_r6_out                    ;if equal go to output ANDroutine
00002FE2                          3098  
00002FE2  B4BC 0000001F           3099  AND_ea_Dn_An_indir_pinc_r7                  CMP.L      #match_AND_An_indir_postinc_r7,D2                      ;check reg is equal to 7
00002FE8  6700 0068               3100                                              BEQ        AND_ea_Dn_An_indir_pinc_r7_out                    ;if equal go to output ANDroutine
00002FEC  6600 41BC               3101                                              BNE        ERROR                                                  ;if not equal to an addresssing mode, pritn error
00002FF0                          3102  
00002FF0                          3103  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00002FF0  227C 000084FC           3104  AND_ea_Dn_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1               ;load string constant into A1
00002FF6  4EB9 00003196           3105                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FFC  4E75                    3106                                              RTS
00002FFE                          3107                                              
00002FFE  227C 00008502           3108  AND_ea_Dn_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1               ;load string constant into A1
00003004  4EB9 00003196           3109                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000300A  4E75                    3110                                              RTS
0000300C                          3111                                              
0000300C  227C 00008508           3112  AND_ea_Dn_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1               ;load string constant into A1
00003012  4EB9 00003196           3113                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003018  4E75                    3114                                              RTS
0000301A                          3115                                              
0000301A  227C 0000850E           3116  AND_ea_Dn_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1               ;load string constant into A1
00003020  4EB9 00003196           3117                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003026  4E75                    3118                                              RTS
00003028                          3119                                              
00003028  227C 00008514           3120  AND_ea_Dn_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1               ;load string constant into A1
0000302E  4EB9 00003196           3121                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003034  4E75                    3122                                              RTS
00003036                          3123                                              
00003036  227C 0000851A           3124  AND_ea_Dn_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1               ;load string constant into A1
0000303C  4EB9 00003196           3125                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003042  4E75                    3126                                              RTS
00003044                          3127                                              
00003044  227C 00008520           3128  AND_ea_Dn_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1               ;load string constant into A1
0000304A  4EB9 00003196           3129                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003050  4E75                    3130                                              RTS
00003052                          3131                                              
00003052  227C 00008526           3132  AND_ea_Dn_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1               ;load string constant into A1
00003058  4EB9 00003196           3133                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000305E  4E75                    3134                                              RTS
00003060                          3135                                              
00003060                          3136  ;------------------Address Register Indirect with Pre Decrement-----------------------
00003060  B4BC 00000020           3137  AND_ea_Dn_An_indir_predec                       CMP.L      #match_AND_An_indir_predec_reg0,D2               ;check reg is equal to 0
00003066  6600 0006               3138                                                  BNE        AND_ea_Dn_An_indir_pdec_r1                   ;if not try reg 1
0000306A  6700 0064               3139                                                  BEQ        AND_ea_Dn_An_indir_pdec_r0_out               ;if equal go to output ANDroutine
0000306E                          3140  
0000306E  B4BC 00000021           3141  AND_ea_Dn_An_indir_pdec_r1                      CMP.L      #match_AND_An_indir_predec_reg1,D2               ;check reg is equal to 1
00003074  6600 0006               3142                                                  BNE        AND_ea_Dn_An_indir_pdec_r2                   ;if not try reg 2
00003078  6700 0064               3143                                                  BEQ        AND_ea_Dn_An_indir_pdec_r1_out               ;if equal go to output ANDroutine
0000307C                          3144  
0000307C  B4BC 00000022           3145  AND_ea_Dn_An_indir_pdec_r2                      CMP.L      #match_AND_An_indir_predec_reg2,D2               ;check reg is equal to 2
00003082  6600 0006               3146                                                  BNE        AND_ea_Dn_An_indir_pdec_r3                   ;if not try reg 3
00003086  6700 0064               3147                                                  BEQ        AND_ea_Dn_An_indir_pdec_r2_out               ;if equal go to output ANDroutine
0000308A                          3148  
0000308A  B4BC 00000023           3149  AND_ea_Dn_An_indir_pdec_r3                      CMP.L      #match_AND_An_indir_predec_reg3,D2               ;check reg is equal to 3
00003090  6600 0006               3150                                                  BNE        AND_ea_Dn_An_indir_pdec_r4                   ;if not try reg 4
00003094  6700 0064               3151                                                  BEQ        AND_ea_Dn_An_indir_pdec_r3_out               ;if equal go to output ANDroutine
00003098                          3152  
00003098  B4BC 00000024           3153  AND_ea_Dn_An_indir_pdec_r4                      CMP.L      #match_AND_An_indir_predec_reg4,D2               ;check reg is equal to 4
0000309E  6600 0006               3154                                                  BNE        AND_ea_Dn_An_indir_pdec_r5                   ;if not try reg 5
000030A2  6700 0064               3155                                                  BEQ        AND_ea_Dn_An_indir_pdec_r4_out               ;if equal go to output ANDroutine
000030A6                          3156  
000030A6  B4BC 00000025           3157  AND_ea_Dn_An_indir_pdec_r5                      CMP.L      #match_AND_An_indir_predec_reg5,D2               ;check reg is equal to 5
000030AC  6600 0006               3158                                                  BNE        AND_ea_Dn_An_indir_pdec_r6                   ;if not try reg 6
000030B0  6700 0064               3159                                                  BEQ        AND_ea_Dn_An_indir_pdec_r5_out               ;if equal go to output ANDroutine
000030B4                          3160  
000030B4  B4BC 00000026           3161  AND_ea_Dn_An_indir_pdec_r6                      CMP.L      #match_AND_An_indir_predec_reg6,D2               ;check reg is equal to 6
000030BA  6600 0006               3162                                                  BNE        AND_ea_Dn_An_indir_pdec_r7                   ;if not try reg 7
000030BE  6700 0064               3163                                                  BEQ        AND_ea_Dn_An_indir_pdec_r6_out               ;if equal go to output ANDroutine
000030C2                          3164  
000030C2  B4BC 00000027           3165  AND_ea_Dn_An_indir_pdec_r7                      CMP.L      #match_AND_An_indir_predec_reg7,D2               ;check reg is equal to 7
000030C8  6700 0068               3166                                                  BEQ        AND_ea_Dn_An_indir_pdec_r7_out               ;if equal go to output ANDroutine
000030CC  6600 40DC               3167                                                  BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
000030D0                          3168  
000030D0                          3169  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000030D0  227C 0000852C           3170  AND_ea_Dn_An_indir_pdec_r0_out                  MOVE.L          #ea_indir_predec_A0,A1           ;load string constant into A1
000030D6  4EB9 00003196           3171                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
000030DC  4E75                    3172                                                  RTS                                         
000030DE                          3173                                                  
000030DE  227C 00008532           3174  AND_ea_Dn_An_indir_pdec_r1_out                  MOVE.L          #ea_indir_predec_A1,A1           ;load string constant into A1
000030E4  4EB9 00003196           3175                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
000030EA  4E75                    3176                                                  RTS                                         
000030EC                          3177                                                  
000030EC  227C 00008538           3178  AND_ea_Dn_An_indir_pdec_r2_out                  MOVE.L          #ea_indir_predec_A2,A1           ;load string constant into A1
000030F2  4EB9 00003196           3179                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
000030F8  4E75                    3180                                                  RTS                                         
000030FA                          3181                                                  
000030FA  227C 0000853E           3182  AND_ea_Dn_An_indir_pdec_r3_out                  MOVE.L          #ea_indir_predec_A3,A1           ;load string constant into A1
00003100  4EB9 00003196           3183                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003106  4E75                    3184                                                  RTS                                         
00003108                          3185                                              
00003108  227C 00008544           3186  AND_ea_Dn_An_indir_pdec_r4_out                  MOVE.L          #ea_indir_predec_A4,A1           ;load string constant into A1
0000310E  4EB9 00003196           3187                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003114  4E75                    3188                                                  RTS                                         
00003116                          3189                                                  
00003116  227C 0000854A           3190  AND_ea_Dn_An_indir_pdec_r5_out                  MOVE.L          #ea_indir_predec_A5,A1           ;load string constant into A1
0000311C  4EB9 00003196           3191                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003122  4E75                    3192                                                  RTS                                         
00003124                          3193                                                  
00003124  227C 00008550           3194  AND_ea_Dn_An_indir_pdec_r6_out                  MOVE.L          #ea_indir_predec_A6,A1           ;load string constant into A1
0000312A  4EB9 00003196           3195                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003130  4E75                    3196                                                  RTS                                         
00003132                          3197                                                  
00003132  227C 00008556           3198  AND_ea_Dn_An_indir_pdec_r7_out                  MOVE.L          #ea_indir_predec_A7,A1           ;load string constant into A1
00003138  4EB9 00003196           3199                                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
0000313E  4E75                    3200                                                  RTS                                         
00003140                          3201  ;------------------Absolute Addressing Output-----------------------
00003140  22FC 00008566           3202  AND_ea_Dn_abs_add_word_out                MOVE.L      #ea_$,(A1)+                       ;load $ for hex and increment A1
00003146  22C5                    3203                                            MOVE.L      D5,(A1)+                          ;load address                  
00003148  4EB9 00003196           3204                                            JSR         AND_determine_second_op           ;jump to ANDroutine to determine second operand
0000314E  4E75                    3205                                            RTS                                                                                      
00003150                          3206  
00003150  2A18                    3207  AND_ea_Dn_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00003152  22FC 00008566           3208                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003158  22C5                    3209                                           MOVE.L      D5,(A1)+                           ;load address                  
0000315A  4EB9 00003196           3210                                           JSR         AND_determine_second_op            ;jump to ANDroutine to determine second operand
00003160  4E75                    3211                                           RTS                                            
00003162                          3212  ;---------------Immediate Addresing---------------------------
00003162  2A18                    3213  AND_ea_Dn_immediate_add_out         MOVE.L      (A0)+,D5                           ;capture the immediate address
00003164  BCBC 000000FC           3214                                      CMP.L       #match_AND_imm_add_word,D6         ;check to see if need to pull word
0000316A  2A18                    3215                                      MOVE.L      (A0)+,D5                           ;pull the word
0000316C  6700 0006               3216                                      BEQ         AND_ea_Dn_imm_add_w                ;if equal go pull word    
00003170  6600 0012               3217                                      BNE         AND_ea_Dn_imm_add_l                ;if not equal, go check long
00003174                          3218                                           
00003174  22FC 00008566           3219  AND_ea_Dn_imm_add_w                 MOVE.L     #ea_$,(A1)+                         ;load the $
0000317A  32C5                    3220                                      MOVE.W     D5,(A1)+                            ;load the word address                           
0000317C  4EB9 00003196           3221                                      JSR        AND_determine_second_op             ;jump to ANDroutine to determine second operand
00003182  4E75                    3222                                      RTS
00003184                          3223                                                                                       
00003184  2A18                    3224  AND_ea_Dn_imm_add_l                 MOVE.L     (A0)+,D5                            ;pull the long and increase the pointer
00003186  22FC 00008566           3225                                      MOVE.L     #ea_$,(A1)+                         ;load the $
0000318C  2245                    3226                                      MOVE.L     D5,A1                               ;move to A1
0000318E  4EB9 00003196           3227                                      JSR        AND_determine_second_op             ;jump to ANDroutine to determine second operand
00003194  4E75                    3228                                      RTS                                         
00003196                          3229                                                  
00003196                          3230  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003196  4282                    3231  AND_determine_second_op                         CLR.L       D2                          ;clear D2 
00003198  C4BC 00000E00           3232                                                  AND.L       #mask_AND_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
0000319E                          3233                                                  
0000319E  B4BC 00000000           3234  ea_Dn_AND_reg0                                  CMP.L       #match_AND_reg0,D2            ;check to see if reg equal 0
000031A4  6600 0006               3235                                                  BNE         ea_Dn_AND_reg1              ;if not equal got check reg 1
000031A8  6700 0064               3236                                                  BEQ         ea_Dn_AND_reg0_out          ;if equal go to output
000031AC                          3237                                                  
000031AC  B4BC 00000200           3238  ea_Dn_AND_reg1                                  CMP.L       #match_AND_reg1,D2             ;check to see if reg equal 1
000031B2  6600 0006               3239                                                  BNE         ea_Dn_AND_reg2               ;if not equal got check reg 2
000031B6  6700 005E               3240                                                  BEQ         ea_Dn_AND_reg1_out           ;if equal go to output
000031BA                          3241  
000031BA  B4BC 00000400           3242  ea_Dn_AND_reg2                                  CMP.L       #match_AND_reg2,D2             ;check to see if reg equal 2
000031C0  6600 0006               3243                                                  BNE         ea_Dn_AND_reg3               ;if not equal got check reg 3
000031C4  6700 0058               3244                                                  BEQ         ea_Dn_AND_reg2_out           ;if equal go to output
000031C8                          3245  
000031C8  B4BC 00000600           3246  ea_Dn_AND_reg3                                  CMP.L       #match_AND_reg3,D2             ;check to see if reg equal 3
000031CE  6600 0006               3247                                                  BNE         ea_Dn_AND_reg4               ;if not equal got check reg 4
000031D2  6700 0052               3248                                                  BEQ         ea_Dn_AND_reg3_out           ;if equal go to output
000031D6                          3249                                                  
000031D6  B4BC 00000800           3250  ea_Dn_AND_reg4                                  CMP.L       #match_AND_reg4,D2             ;check to see if reg equal 4
000031DC  6600 0006               3251                                                  BNE         ea_Dn_AND_reg5               ;if not equal got check reg 5
000031E0  6700 004C               3252                                                  BEQ         ea_Dn_AND_reg4_out           ;if equal go to output
000031E4                          3253  
000031E4  B4BC 00000A00           3254  ea_Dn_AND_reg5                                  CMP.L       #match_AND_reg5,D2             ;check to see if reg equal 5
000031EA  6600 0006               3255                                                  BNE         ea_Dn_AND_reg6               ;if not equal got check reg 6
000031EE  6700 0046               3256                                                  BEQ         ea_Dn_AND_reg5_out           ;if equal go to output
000031F2                          3257  
000031F2  B4BC 00000C00           3258  ea_Dn_AND_reg6                                  CMP.L       #match_AND_reg6,D2             ;check to see if reg equal 6
000031F8  6600 0006               3259                                                  BNE         ea_Dn_AND_reg7               ;if not equal got check reg 7
000031FC  6700 0040               3260                                                  BEQ         ea_Dn_AND_reg6_out           ;if equal go to output         
00003200                          3261  
00003200  B4BC 00000E00           3262  ea_Dn_AND_reg7                                  CMP.L       #match_AND_reg7,D2             ;check to see if reg equal 7
00003206  6700 003E               3263                                                  BEQ         ea_Dn_AND_reg7_out           ;if equal go to output
0000320A  6600 3F9E               3264                                                  BNE         ERROR                          ;if not equal to an addresssing mode, pritn error
0000320E                          3265                                  
0000320E                          3266  
0000320E                          3267  ;--------------------Data Output-----------------------
0000320E  227C 00008494           3268  ea_Dn_AND_reg0_out                              MOVE.L          #ea_D0,A1                        ;load string constant into A1
00003214  4E75                    3269                                                  RTS
00003216                          3270                                              
00003216  227C 00008497           3271  ea_Dn_AND_reg1_out                              MOVE.L          #ea_D1,A1                       ;load string constant into A1
0000321C  4E75                    3272                                                  RTS
0000321E                          3273                                              
0000321E  227C 0000849A           3274  ea_Dn_AND_reg2_out                              MOVE.L          #ea_D2,A1                       ;load string constant into A1
00003224  4E75                    3275                                                  RTS
00003226                          3276                                              
00003226  227C 0000849D           3277  ea_Dn_AND_reg3_out                              MOVE.L          #ea_D3,A1                       ;load string constant into A1
0000322C  4E75                    3278                                                  RTS
0000322E                          3279                                              
0000322E  227C 000084A0           3280  ea_Dn_AND_reg4_out                              MOVE.L          #ea_D4,A1                       ;load string constant into A1
00003234  4E75                    3281                                                  RTS
00003236                          3282                                              
00003236  227C 000084A3           3283  ea_Dn_AND_reg5_out                              MOVE.L          #ea_D5,A1                       ;load string constant into A1
0000323C  4E75                    3284                                                  RTS
0000323E                          3285                                              
0000323E  227C 000084A6           3286  ea_Dn_AND_reg6_out                              MOVE.L          #ea_D6,A1                       ;load string constant into A1
00003244  4E75                    3287                                                  RTS
00003246                          3288                                              
00003246  227C 000084A9           3289  ea_Dn_AND_reg7_out                              MOVE.L          #ea_D7,A1                       ;load string constant into A1
0000324C  4E75                    3290                                                  RTS             
0000324E                          3291                                              
0000324E                          3292                      
0000324E                          3293  
0000324E                          3294  
0000324E                          3295  
0000324E                          3296  
0000324E                          3297  
0000324E                          3298  
0000324E                          3299  
0000324E                          3300  
0000324E                          3301  
0000324E                          3302  
0000324E                          3303  
0000324E                          3304  
0000324E                          3305  
0000324E                          3306  
0000324E                          3307  
0000324E                          3308  
0000324E                          3309  
0000324E                          3310  
0000324E                          3311  
0000324E                          3312  
0000324E                          3313  
0000324E                          3314  
0000324E                          3315  
0000324E                          3316  
0000324E                          3317  
0000324E                          3318  
0000324E                          3319  
0000324E                          3320  
0000324E                          3321  
0000324E                          3322  
0000324E                          3323                          
0000324E                          3324  ;------------------------------------------------------------------------------------------------------------------------------------------
0000324E                          3325  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
0000324E                          3326  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
0000324E  4282                    3327  AND_Dn_ea                                       CLR.L       D2                                ;clear D2 
00003250  C4BC 00000E00           3328                                                  AND.L       #mask_AND_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
00003256                          3329                                                  
00003256  B4BC 00000000           3330  Dn_ea_AND_reg0                                  CMP.L       #match_AND_reg0,D2                  ;check to see if reg equal 0
0000325C  6600 0006               3331                                                  BNE         Dn_ea_AND_reg1                  ;if not equal got check reg 1
00003260  6700 0064               3332                                                  BEQ         Dn_ea_AND_reg0_out              ;if equal go to output
00003264                          3333                                                  
00003264  B4BC 00000200           3334  Dn_ea_AND_reg1                                  CMP.L       #match_AND_reg1,D2                  ;check to see if reg equal 1
0000326A  6600 0006               3335                                                  BNE         Dn_ea_AND_reg2                  ;if not equal got check reg 2
0000326E  6700 0064               3336                                                  BEQ         Dn_ea_AND_reg1_out              ;if equal go to output
00003272                          3337  
00003272  B4BC 00000400           3338  Dn_ea_AND_reg2                                  CMP.L       #match_AND_reg2,D2                  ;check to see if reg equal 2
00003278  6600 0006               3339                                                  BNE         Dn_ea_AND_reg3                  ;if not equal got check reg 3
0000327C  6700 0064               3340                                                  BEQ         Dn_ea_AND_reg2_out              ;if equal go to output
00003280                          3341  
00003280  B4BC 00000600           3342  Dn_ea_AND_reg3                                  CMP.L       #match_AND_reg3,D2                  ;check to see if reg equal 3
00003286  6600 0006               3343                                                  BNE         Dn_ea_AND_reg4                  ;if not equal got check reg 4
0000328A  6700 0064               3344                                                  BEQ         Dn_ea_AND_reg3_out              ;if equal go to output
0000328E                          3345                                                  
0000328E  B4BC 00000800           3346  Dn_ea_AND_reg4                                  CMP.L       #match_AND_reg4,D2                  ;check to see if reg equal 4
00003294  6600 0006               3347                                                  BNE         Dn_ea_AND_reg5                  ;if not equal got check reg 5
00003298  6700 0064               3348                                                  BEQ         Dn_ea_AND_reg4_out              ;if equal go to output
0000329C                          3349  
0000329C  B4BC 00000A00           3350  Dn_ea_AND_reg5                                  CMP.L       #match_AND_reg5,D2                  ;check to see if reg equal 5
000032A2  6600 0006               3351                                                  BNE         Dn_ea_AND_reg6                  ;if not equal got check reg 6
000032A6  6700 0064               3352                                                  BEQ         Dn_ea_AND_reg5_out              ;if equal go to output
000032AA                          3353  
000032AA  B4BC 00000C00           3354  Dn_ea_AND_reg6                                  CMP.L       #match_AND_reg6,D2                  ;check to see if reg equal 6
000032B0  6600 0006               3355                                                  BNE         Dn_ea_AND_reg7                  ;if not equal got check reg 7
000032B4  6700 0064               3356                                                  BEQ         Dn_ea_AND_reg6_out              ;if equal go to output          
000032B8                          3357  
000032B8  B4BC 00000E00           3358  Dn_ea_AND_reg7                                  CMP.L       #match_AND_reg7,D2                  ;check to see if reg equal 7
000032BE  6700 0068               3359                                                  BEQ         Dn_ea_AND_reg7_out              ;if equal go to output
000032C2  6600 3EE6               3360                                                  BNE          ERROR                                ;if not equal to an addresssing mode, pritn error
000032C6                          3361                                  
000032C6                          3362  
000032C6                          3363  ;--------------------Data Output-----------------------
000032C6  227C 00008494           3364  Dn_ea_AND_reg0_out               MOVE.L         #ea_D0,A1                                          ;load string constant into A1
000032CC  4EB9 00003336           3365                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
000032D2  4E75                    3366                                   RTS
000032D4                          3367                                                                                          
000032D4  227C 00008497           3368  Dn_ea_AND_reg1_out               MOVE.L         #ea_D1,A1                                       ;load string constant into A1
000032DA  4EB9 00003336           3369                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
000032E0  4E75                    3370                                   RTS
000032E2                          3371                                              
000032E2  227C 0000849A           3372  Dn_ea_AND_reg2_out               MOVE.L         #ea_D2,A1                                       ;load string constant into A1
000032E8  4EB9 00003336           3373                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
000032EE  4E75                    3374                                   RTS
000032F0                          3375                                              
000032F0  227C 0000849D           3376  Dn_ea_AND_reg3_out               MOVE.L         #ea_D3,A1                                           ;load string constant into A1
000032F6  4EB9 00003336           3377                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
000032FC  4E75                    3378                                   RTS
000032FE                          3379                                              
000032FE  227C 000084A0           3380  Dn_ea_AND_reg4_out               MOVE.L         #ea_D4,A1                                           ;load string constant into A1
00003304  4EB9 00003336           3381                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
0000330A  4E75                    3382                                   RTS
0000330C                          3383                                              
0000330C  227C 000084A3           3384  Dn_ea_AND_reg5_out               MOVE.L         #ea_D5,A1                                           ;load string constant into A1
00003312  4EB9 00003336           3385                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003318  4E75                    3386                                   RTS
0000331A                          3387                                              
0000331A  227C 000084A6           3388  Dn_ea_AND_reg6_out               MOVE.L         #ea_D6,A1                                           ;load string constant into A1
00003320  4EB9 00003336           3389                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003326  4E75                    3390                                   RTS
00003328                          3391                                              
00003328  227C 000084A9           3392  Dn_ea_AND_reg7_out               MOVE.L         #ea_D7,A1                                           ;load string constant into A1
0000332E  4EB9 00003336           3393                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003334  4E75                    3394                                   RTS                                            
00003336                          3395  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00003336  4241                    3396  AND_determine_second_operand      CLR               D1                                            ;clear D1 to load new mask                                
00003338  C2BC 00000038           3397                                   AND.L             #mask_AND_ea_mode,D1                        ;move the mask to D1
0000333E                          3398  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000333E  B2BC 00000010           3399  Dn_ea_add_reg_indir              CMP.L             #match_AND_An_indir,D1                      ;check to see if mode is add reg indir
00003344  6600 0006               3400                                   BNE               Dn_ea_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00003348  6700 0042               3401                                   BEQ               Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
0000334C                          3402             
0000334C  B2BC 00000020           3403  Dn_ea_add_reg_indir_predec       CMP.L             #match_AND_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00003352  6600 0006               3404                                   BNE               Dn_ea_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00003356  6700 019A               3405                                   BEQ               Dn_ea_An_indir_predec                               ;if equal go figure out the register
0000335A                          3406                        
0000335A  B2BC 00000018           3407  Dn_ea_add_reg_indir_postinc      CMP.L             #match_AND_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00003360  6600 0006               3408                                   BNE               Dn_ea_abs_add_word                                  ;if not go check abs add word
00003364  6700 00DC               3409                                   BEQ               Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
00003368                          3410  
00003368  C4BC 0000003F           3411  Dn_ea_abs_add_word               AND.L             #mask_AND_abs_add,D2                        ;load mask to determine if abs add word or long
0000336E                          3412                                   
0000336E  B4BC 00000038           3413                                   CMP.L             #match_AND_abs_add_word,D2                  ;check if abs add word
00003374  2A18                    3414                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00003376  6600 0006               3415                                   BNE               Dn_ea_abs_add_long                                  ;if not go check abs add long
0000337A  6700 0226               3416                                   BEQ               Dn_ea_abs_add_word_out                              ;if equal go to output
0000337E                          3417    
0000337E  B4BC 00000039           3418  Dn_ea_abs_add_long               CMP.L             #match_AND_abs_add_long,D2                  ;check to see if abs add long
00003384  6700 0226               3419                                   BEQ               Dn_ea_abs_add_long_out                              ;if equal go to output
00003388  6600 3E20               3420                                   BNE               ERROR                                         ;if not equal go to error mesage AND routine
0000338C                          3421  
0000338C                          3422  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
0000338C                          3423                                   
0000338C                          3424                                   
0000338C                          3425  ;------------------Address Register Indirect-----------------------
0000338C  C4BC 0000003F           3426  Dn_ea_An_indir_reg               AND.L              #mask_AND_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
00003392  B4BC 00000010           3427                                   CMP.L          #match_AND_An_indir_r0,D2              ;check reg is equal to 0
00003398  6600 0006               3428                                   BNE             Dn_ea_An_indir_reg1                           ;if not try reg 1
0000339C  6700 0064               3429                                   BEQ             Dn_ea_An_indir_reg0_out                       ;if equal go to output ANDroutine
000033A0                          3430  
000033A0  B4BC 00000011           3431  Dn_ea_An_indir_reg1              CMP.L           #match_AND_An_indir_r1,D2              ;check reg is equal to 1
000033A6  6600 0006               3432                                   BNE             Dn_ea_An_indir_reg2                           ;if not try reg 2
000033AA  6700 005E               3433                                   BEQ             Dn_ea_An_indir_reg1_out                       ;if equal go to output ANDroutine
000033AE                          3434  
000033AE  B4BC 00000012           3435  Dn_ea_An_indir_reg2              CMP.L           #match_AND_An_indir_r2,D2              ;check reg is equal to 2
000033B4  6600 0006               3436                                   BNE             Dn_ea_An_indir_reg3                           ;if not try reg 3
000033B8  6700 0058               3437                                   BEQ             Dn_ea_An_indir_reg2_out                       ;if equal go to output ANDroutine
000033BC                          3438  
000033BC  B4BC 00000013           3439  Dn_ea_An_indir_reg3              CMP.L           #match_AND_An_indir_r3,D2              ;check reg is equal to 3
000033C2  6600 0006               3440                                   BNE             Dn_ea_An_indir_reg4                           ;if not try reg 4
000033C6  6700 0052               3441                                   BEQ             Dn_ea_An_indir_reg3_out                       ;if equal go to output ANDroutine
000033CA                          3442      
000033CA  B4BC 00000014           3443  Dn_ea_An_indir_reg4              CMP.L           #match_AND_An_indir_r4,D2              ;check reg is equal to 4
000033D0  6600 0006               3444                                   BNE             Dn_ea_An_indir_reg5                           ;if not try reg 5
000033D4  6700 004C               3445                                   BEQ             Dn_ea_An_indir_reg4_out                       ;if equal go to output ANDroutine
000033D8                          3446          
000033D8  B4BC 00000015           3447  Dn_ea_An_indir_reg5              CMP.L           #match_AND_An_indir_r5,D2              ;check reg is equal to 5
000033DE  6600 0006               3448                                   BNE             Dn_ea_An_indir_reg6                           ;if not try reg 6
000033E2  6700 0046               3449                                   BEQ             Dn_ea_An_indir_reg5_out                       ;if equal go to output ANDroutine
000033E6                          3450  
000033E6  B4BC 00000016           3451  Dn_ea_An_indir_reg6              CMP.L           #match_AND_An_indir_r6,D2              ;check reg is equal to 6
000033EC  6600 0006               3452                                   BNE             Dn_ea_An_indir_reg7                           ;if not try reg 7
000033F0  6700 0040               3453                                   BEQ             Dn_ea_An_indir_reg6_out                       ;if equal go to output ANDroutine
000033F4                          3454  
000033F4  B4BC 00000017           3455  Dn_ea_An_indir_reg7              CMP.L           #match_AND_An_indir_r7,D2              ;check reg is equal to 7
000033FA  6700 003E               3456                                   BEQ             Dn_ea_An_indir_reg7_out                       ;if equal go to output ANDroutine
000033FE  6600 3DAA               3457                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00003402                          3458  
00003402                          3459  ;--------------------Address Register Indirect Output-----------------------
00003402  227C 000084D4           3460  Dn_ea_An_indir_reg0_out         MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00003408  4E75                    3461                                   RTS
0000340A                          3462  
0000340A  227C 000084D9           3463  Dn_ea_An_indir_reg1_out         MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00003410  4E75                    3464                                   RTS
00003412                          3465  
00003412  227C 000084DE           3466  Dn_ea_An_indir_reg2_out         MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00003418  4E75                    3467                                   RTS
0000341A                          3468  
0000341A  227C 000084E3           3469  Dn_ea_An_indir_reg3_out         MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00003420  4E75                    3470                                   RTS
00003422                          3471  
00003422  227C 000084E8           3472  Dn_ea_An_indir_reg4_out         MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00003428  4E75                    3473                                   RTS
0000342A                          3474  
0000342A  227C 000084ED           3475  Dn_ea_An_indir_reg5_out         MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00003430  4E75                    3476                                   RTS
00003432                          3477  
00003432  227C 000084F2           3478  Dn_ea_An_indir_reg6_out         MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00003438  4E75                    3479                                   RTS
0000343A                          3480                                          
0000343A  227C 000084F7           3481  Dn_ea_An_indir_reg7_out         MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00003440  4E75                    3482                                   RTS
00003442                          3483  
00003442                          3484  ;------------------Address Register Indirect with Post Increment-----------------------
00003442  B4BC 00000018           3485  Dn_ea_An_indir_postinc_reg                  CMP.L      #match_AND_An_indir_postinc_r0,D2        ;check reg is equal to 0
00003448  6600 0006               3486                                              BNE        Dn_ea_An_indir_postinc_reg1                      ;if not try reg 1
0000344C  6700 0064               3487                                              BEQ        Dn_ea_An_indir_postinc_reg0_out                  ;if equal go to output ANDroutine
00003450                          3488  
00003450  B4BC 00000019           3489  Dn_ea_An_indir_postinc_reg1                 CMP.L      #match_AND_An_indir_postinc_r1,D2        ;check reg is equal to 1
00003456  6600 0006               3490                                              BNE        Dn_ea_An_indir_postinc_reg2                      ;if not try reg 2
0000345A  6700 005E               3491                                              BEQ        Dn_ea_An_indir_postinc_reg1_out                  ;if equal go to output ANDroutine
0000345E                          3492  
0000345E  B4BC 0000001A           3493  Dn_ea_An_indir_postinc_reg2                 CMP.L      #match_AND_An_indir_postinc_r2,D2        ;check reg is equal to 2
00003464  6600 0006               3494                                              BNE        Dn_ea_An_indir_postinc_reg3                      ;if not try reg 3
00003468  6700 0058               3495                                              BEQ        Dn_ea_An_indir_postinc_reg2_out                  ;if equal go to output ANDroutine
0000346C                          3496  
0000346C  B4BC 0000001B           3497  Dn_ea_An_indir_postinc_reg3                 CMP.L      #match_AND_An_indir_postinc_r3,D2        ;check reg is equal to 3
00003472  6600 0006               3498                                              BNE        Dn_ea_An_indir_postinc_reg4                      ;if not try reg 4
00003476  6700 0052               3499                                              BEQ        Dn_ea_An_indir_postinc_reg3_out                  ;if equal go to output ANDroutine
0000347A                          3500   
0000347A  B4BC 0000001C           3501  Dn_ea_An_indir_postinc_reg4                 CMP.L      #match_AND_An_indir_postinc_r4,D2        ;check reg is equal to 4
00003480  6600 0006               3502                                              BNE        Dn_ea_An_indir_postinc_reg5                      ;if not try reg 5
00003484  6700 004C               3503                                              BEQ        Dn_ea_An_indir_postinc_reg4_out                  ;if equal go to output ANDroutine
00003488                          3504  
00003488  B4BC 0000001D           3505  Dn_ea_An_indir_postinc_reg5                 CMP.L      #match_AND_An_indir_postinc_r5,D2        ;check reg is equal to 5
0000348E  6600 0006               3506                                              BNE        Dn_ea_An_indir_postinc_reg6                      ;if not try reg 6
00003492  6700 0046               3507                                              BEQ        Dn_ea_An_indir_postinc_reg5_out                  ;if equal go to output ANDroutine
00003496                          3508  
00003496  B4BC 0000001E           3509  Dn_ea_An_indir_postinc_reg6                 CMP.L      #match_AND_An_indir_postinc_r6,D2         ;check reg is equal to 6
0000349C  6600 0006               3510                                              BNE        Dn_ea_An_indir_postinc_reg7                        ;if not try reg 7
000034A0  6700 0040               3511                                              BEQ        Dn_ea_An_indir_postinc_reg6_out                    ;if equal go to output ANDroutine
000034A4                          3512  
000034A4  B4BC 0000001F           3513  Dn_ea_An_indir_postinc_reg7                 CMP.L      #match_AND_An_indir_postinc_r7,D2         ;check reg is equal to 7
000034AA  6700 003E               3514                                              BEQ        Dn_ea_An_indir_postinc_reg7_out                    ;if equal go to output ANDroutine
000034AE  6600 3CFA               3515                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
000034B2                          3516  
000034B2                          3517  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000034B2  227C 000084FC           3518  Dn_ea_An_indir_postinc_reg0_out             MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
000034B8  4E75                    3519                                          RTS
000034BA                          3520  
000034BA  227C 00008502           3521  Dn_ea_An_indir_postinc_reg1_out             MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
000034C0  4E75                    3522                                          RTS
000034C2                          3523  
000034C2  227C 00008508           3524  Dn_ea_An_indir_postinc_reg2_out             MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
000034C8  4E75                    3525                                          RTS
000034CA                          3526  
000034CA  227C 0000850E           3527  Dn_ea_An_indir_postinc_reg3_out             MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
000034D0  4E75                    3528                                          RTS
000034D2                          3529  
000034D2  227C 00008514           3530  Dn_ea_An_indir_postinc_reg4_out             MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
000034D8  4E75                    3531                                          RTS
000034DA                          3532  
000034DA  227C 0000851A           3533  Dn_ea_An_indir_postinc_reg5_out             MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
000034E0  4E75                    3534                                          RTS
000034E2                          3535  
000034E2  227C 00008520           3536  Dn_ea_An_indir_postinc_reg6_out             MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
000034E8  4E75                    3537                                          RTS
000034EA                          3538  
000034EA  227C 00008526           3539  Dn_ea_An_indir_postinc_reg7_out             MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
000034F0  4E75                    3540                                          RTS
000034F2                          3541  
000034F2                          3542  ;------------------Address Register Indirect with Pre Decrement-----------------------
000034F2  B4BC 00000020           3543  Dn_ea_An_indir_predec                       CMP.L      #match_AND_An_indir_predec_reg0,D2       ;check reg is equal to 0
000034F8  6600 0006               3544                                              BNE        Dn_ea_An_indir_predec_reg1                      ;if not try reg 1
000034FC  6700 0064               3545                                              BEQ        Dn_ea_An_indir_predec_reg0_out               ;if equal go to output ANDroutine
00003500                          3546  
00003500  B4BC 00000021           3547  Dn_ea_An_indir_predec_reg1                  CMP.L      #match_AND_An_indir_predec_reg1,D2       ;check reg is equal to 1
00003506  6600 0006               3548                                              BNE        Dn_ea_An_indir_predec_reg2                      ;if not try reg 2
0000350A  6700 005E               3549                                              BEQ        Dn_ea_An_indir_predec_reg1_out               ;if equal go to output ANDroutine
0000350E                          3550  
0000350E  B4BC 00000022           3551  Dn_ea_An_indir_predec_reg2                  CMP.L      #match_AND_An_indir_predec_reg2,D2       ;check reg is equal to 2
00003514  6600 0006               3552                                              BNE        Dn_ea_An_indir_predec_reg3                      ;if not try reg 3
00003518  6700 0058               3553                                              BEQ        Dn_ea_An_indir_predec_reg2_out               ;if equal go to output ANDroutine
0000351C                          3554  
0000351C  B4BC 00000023           3555  Dn_ea_An_indir_predec_reg3                  CMP.L      #match_AND_An_indir_predec_reg3,D2       ;check reg is equal to 3
00003522  6600 0006               3556                                              BNE        Dn_ea_An_indir_predec_reg4                      ;if not try reg 4
00003526  6700 0052               3557                                              BEQ        Dn_ea_An_indir_predec_reg3_out               ;if equal go to output ANDroutine
0000352A                          3558  
0000352A  B4BC 00000024           3559  Dn_ea_An_indir_predec_reg4                  CMP.L      #match_AND_An_indir_predec_reg4,D2       ;check reg is equal to 4
00003530  6600 0006               3560                                              BNE        Dn_ea_An_indir_predec_reg5                      ;if not try reg 5
00003534  6700 004C               3561                                              BEQ        Dn_ea_An_indir_predec_reg4_out               ;if equal go to output ANDroutine
00003538                          3562  
00003538  B4BC 00000025           3563  Dn_ea_An_indir_predec_reg5                  CMP.L      #match_AND_An_indir_predec_reg5,D2       ;check reg is equal to 5
0000353E  6600 0006               3564                                              BNE        Dn_ea_An_indir_predec_reg6                     ;if not try reg 6
00003542  6700 0046               3565                                              BEQ        Dn_ea_An_indir_predec_reg5_out               ;if equal go to output ANDroutine
00003546                          3566  
00003546  B4BC 00000026           3567  Dn_ea_An_indir_predec_reg6                  CMP.L      #match_AND_An_indir_predec_reg6,D2       ;check reg is equal to 6
0000354C  6600 0006               3568                                              BNE        Dn_ea_An_indir_predec_reg7                     ;if not try reg 7
00003550  6700 0040               3569                                              BEQ        Dn_ea_An_indir_predec_reg6_out               ;if equal go to output ANDroutine
00003554                          3570  
00003554  B4BC 00000027           3571  Dn_ea_An_indir_predec_reg7                  CMP.L      #match_AND_An_indir_predec_reg7,D2       ;check reg is equal to 7
0000355A  6700 003E               3572                                              BEQ        Dn_ea_An_indir_predec_reg7_out               ;if equal go to output ANDroutine
0000355E  6600 3C4A               3573                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
00003562                          3574  
00003562                          3575  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00003562  227C 0000852C           3576  Dn_ea_An_indir_predec_reg0_out             MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00003568  4E75                    3577                                              RTS
0000356A                          3578                                              
0000356A  227C 00008532           3579  Dn_ea_An_indir_predec_reg1_out             MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00003570  4E75                    3580                                              RTS
00003572                          3581  
00003572  227C 00008538           3582  Dn_ea_An_indir_predec_reg2_out             MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00003578  4E75                    3583                                              RTS
0000357A                          3584  
0000357A  227C 0000853E           3585  Dn_ea_An_indir_predec_reg3_out             MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00003580  4E75                    3586                                              RTS
00003582                          3587  
00003582  227C 00008544           3588  Dn_ea_An_indir_predec_reg4_out             MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00003588  4E75                    3589                                              RTS
0000358A                          3590  
0000358A  227C 0000854A           3591  Dn_ea_An_indir_predec_reg5_out             MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00003590  4E75                    3592                                              RTS
00003592                          3593  
00003592  227C 00008550           3594  Dn_ea_An_indir_predec_reg6_out             MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00003598  4E75                    3595                                              RTS
0000359A                          3596  
0000359A  227C 00008556           3597  Dn_ea_An_indir_predec_reg7_out             MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
000035A0  4E75                    3598                                              RTS
000035A2                          3599                                              
000035A2                          3600  ;------------------Absolute Addressing Output-----------------------
000035A2  22FC 00008566           3601  Dn_ea_abs_add_word_out                MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000035A8  22C5                    3602                                        MOVE.L      D5,(A1)+                           ;load address                  
000035AA  4E75                    3603                                        RTS                                            :return to ANDroutine
000035AC                          3604                                             
000035AC                          3605  
000035AC  2A18                    3606  Dn_ea_abs_add_long_out                       MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000035AE  22FC 00008566           3607                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000035B4  22C5                    3608                                        MOVE.L      D5,(A1)+                           ;load address                  
000035B6  4E75                    3609                                        RTS                                            :return to ANDroutine                                                                             
000035B8                          3610  ;----------------------Error Handling----------------------------------------
000035B8                          3611  
000035B8  =000001C0               3612  mask_opmode                          EQU         $01C0                   ;mask for the opmode to determine operand order
000035B8                          3613  
000035B8  =00000038               3614  mask_AND_ea_mode                    EQU         $0038
000035B8  =0000003F               3615  mask_AND_abs_add                    EQU         $003F
000035B8  =0000003F               3616  mask_AND_ea_reg_and_mode            EQU         $003F
000035B8  =00000E00               3617  mask_AND_An_reg                 EQU         $0E00
000035B8                          3618  
000035B8                          3619  
000035B8  =00000100               3620  match_AND_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
000035B8  =00000140               3621  match_AND_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
000035B8  =00000180               3622  match_AND_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
000035B8                          3623  
000035B8  =00000000               3624  match_AND_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
000035B8  =00000040               3625  match_AND_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
000035B8  =00000080               3626  match_AND_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
000035B8                          3627  
000035B8                          3628  
000035B8                          3629  
000035B8  =00000000               3630  match_AND_Dn                        EQU         $0000
000035B8  =00000010               3631  match_AND_An_indir                  EQU         $0010
000035B8  =00000020               3632  match_AND_An_indir_predec           EQU         $0020
000035B8  =00000018               3633  match_AND_An_indir_postinc          EQU         $0018
000035B8  =00000038               3634  match_AND_abs_add_word              EQU         $0038
000035B8  =00000039               3635  match_AND_abs_add_long              EQU         $0039
000035B8                          3636  
000035B8  =00000000               3637  match_AND_D0                            EQU         $0000
000035B8  =00000001               3638  match_AND_D1                            EQU         $0001
000035B8  =00000002               3639  match_AND_D2                            EQU         $0002
000035B8  =00000003               3640  match_AND_D3                            EQU         $0003
000035B8  =00000004               3641  match_AND_D4                            EQU         $0004
000035B8  =00000005               3642  match_AND_D5                            EQU         $0005
000035B8  =00000006               3643  match_AND_D6                            EQU         $0006
000035B8  =00000007               3644  match_AND_D7                            EQU         $0007
000035B8                          3645  
000035B8  =00000008               3646  match_AND_A0                            EQU         $0008
000035B8  =00000009               3647  match_AND_A1                            EQU         $0009
000035B8  =0000000A               3648  match_AND_A2                            EQU         $000A
000035B8  =0000000B               3649  match_AND_A3                            EQU         $000B
000035B8  =0000000C               3650  match_AND_A4                            EQU         $000C
000035B8  =0000000D               3651  match_AND_A5                            EQU         $000D
000035B8  =0000000E               3652  match_AND_A6                            EQU         $000E
000035B8  =0000000F               3653  match_AND_A7                            EQU         $000F
000035B8                          3654  
000035B8  =00000010               3655  match_AND_An_indir_r0                   EQU         $0010
000035B8  =00000011               3656  match_AND_An_indir_r1                   EQU         $0011
000035B8  =00000012               3657  match_AND_An_indir_r2                   EQU         $0012
000035B8  =00000013               3658  match_AND_An_indir_r3                   EQU         $0013
000035B8  =00000014               3659  match_AND_An_indir_r4                   EQU         $0014
000035B8  =00000015               3660  match_AND_An_indir_r5                   EQU         $0015
000035B8  =00000016               3661  match_AND_An_indir_r6                   EQU         $0016
000035B8  =00000017               3662  match_AND_An_indir_r7                   EQU         $0017
000035B8                          3663  
000035B8  =00000018               3664  match_AND_An_indir_postinc_r0       EQU         $0018
000035B8  =00000019               3665  match_AND_An_indir_postinc_r1       EQU         $0019
000035B8  =0000001A               3666  match_AND_An_indir_postinc_r2       EQU         $001A
000035B8  =0000001B               3667  match_AND_An_indir_postinc_r3       EQU         $001B
000035B8  =0000001C               3668  match_AND_An_indir_postinc_r4       EQU         $001C
000035B8  =0000001D               3669  match_AND_An_indir_postinc_r5       EQU         $001D
000035B8  =0000001E               3670  match_AND_An_indir_postinc_r6       EQU         $001E
000035B8  =0000001F               3671  match_AND_An_indir_postinc_r7       EQU         $001F
000035B8                          3672  
000035B8  =00000020               3673  match_AND_An_indir_predec_reg0          EQU         $0020
000035B8  =00000021               3674  match_AND_An_indir_predec_reg1          EQU         $0021
000035B8  =00000022               3675  match_AND_An_indir_predec_reg2          EQU         $0022
000035B8  =00000023               3676  match_AND_An_indir_predec_reg3          EQU         $0023
000035B8  =00000024               3677  match_AND_An_indir_predec_reg4          EQU         $0024
000035B8  =00000025               3678  match_AND_An_indir_predec_reg5          EQU         $0025
000035B8  =00000026               3679  match_AND_An_indir_predec_reg6          EQU         $0026
000035B8  =00000027               3680  match_AND_An_indir_predec_reg7          EQU         $0027
000035B8                          3681  
000035B8  =0000003C               3682  match_AND_imm_add                           EQU         $003C
000035B8  =000000FC               3683  match_AND_imm_add_word                      EQU         $00FC
000035B8  =000001FC               3684  match_AND_imm_add_long                      EQU         $01FC
000035B8                          3685  
000035B8  =00000000               3686  match_AND_reg0                          EQU         $0000
000035B8  =00000200               3687  match_AND_reg1                          EQU         $0200
000035B8  =00000400               3688  match_AND_reg2                          EQU         $0400
000035B8  =00000600               3689  match_AND_reg3                          EQU         $0600
000035B8  =00000800               3690  match_AND_reg4                          EQU         $0800
000035B8  =00000A00               3691  match_AND_reg5                          EQU         $0A00
000035B8  =00000C00               3692  match_AND_reg6                          EQU         $0C00
000035B8  =00000E00               3693  match_AND_reg7                          EQU         $0E00
000035B8                          3694  
000035B8                          3695  
000035B8                          3696  
000035B8                          3697  
000035B8                          3698  
000035B8                          3699  
000035B8                          3700  
000035B8                          3701  
000035B8                          3702  
000035B8                          3703  -------------------- end include --------------------
000035B8                          3704              INCLUDE 'ADDA Subroutine.x68'
000035B8                          3705     
000035B8                          3706  ADDA_sub                                                 ;preserve the registers, 
000035B8  C2BC 00000038           3707                                   AND.L             #mask_ADDA_ea_mode,D1                         ;move the mask to D1
000035BE                          3708  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
000035BE  B2BC 00000000           3709  ADDA_data_reg_dir                CMP.L             #match_ADDA_Dn,D1                             ;check to see if mode is data reg direct
000035C4  6600 0006               3710                                   BNE               ADDA_add_reg_dir                              ;if not, go check add reg dir
000035C8  6700 0068               3711                                   BEQ               ADDA_Dn_reg                                   ;if equal go figure out the register
000035CC                          3712  
000035CC  B2BC 00000008           3713  ADDA_add_reg_dir                 CMP.L             #match_ADDA_An,D1                             ;check if mode is add reg direct
000035D2  6600 0006               3714                                   BNE               ADDA_add_reg_indir                            ;if not, go check add reg indir
000035D6  6700 0140               3715                                   BEQ               ADDA_An_reg                                   ;if equal go figure out the reg
000035DA                          3716   
000035DA  B2BC 00000010           3717  ADDA_add_reg_indir               CMP.L             #match_ADDA_An_indir,D1                       ;check to see if mode is add reg indir
000035E0  6600 0006               3718                                   BNE               ADDA_add_reg_indir_predec                     ;if not, go check add reg indir predec 
000035E4  6700 0212               3719                                   BEQ               ADDA_An_indir_reg                             ;if equal go figure out the register           
000035E8                          3720             
000035E8  B2BC 00000020           3721  ADDA_add_reg_indir_predec        CMP.L             #match_ADDA_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
000035EE  6600 0006               3722                                   BNE               ADDA_add_reg_indir_postinc                    ;if not go check add reg indir/predec
000035F2  6700 03C4               3723                                   BEQ               ADDA_An_indir_predec                          ;if equal go figure out the register
000035F6                          3724                        
000035F6  B2BC 00000018           3725  ADDA_add_reg_indir_postinc       CMP.L             #match_ADDA_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
000035FC  6600 0006               3726                                   BNE               ADDA_abs_add_word                             ;if not go check abs add word
00003600  6700 02D6               3727                                   BEQ               ADDA_An_indir_postinc_reg                     ;if equal go figure out the register
00003604                          3728  
00003604  C4BC 0000003F           3729  ADDA_abs_add_word                AND.L             #mask_ADDA_abs_add,D2                         ;load mask to determine if abs add word or long
0000360A                          3730                                   
0000360A  B4BC 00000038           3731                                   CMP.L             #match_ADDA_abs_add_word,D2                   ;check if abs add word
00003610  2A18                    3732                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00003612  6600 0006               3733                                   BNE               ADDA_abs_add_long                             ;if not go check abs add long
00003616  6700 0480               3734                                   BEQ               ADDA_abs_add_word_out                         ;if equal go to output
0000361A                          3735    
0000361A  B4BC 00000039           3736  ADDA_abs_add_long                CMP.L             #match_ADDA_abs_add_long,D2                   ;check to see if abs add long
00003620  6700 0486               3737                                   BEQ               ADDA_abs_add_long_out                         ;if equal go to output
00003624                          3738                                   
00003624  B2BC 0000003C           3739  ADDA_immediate_add               CMP.L             #match_ADDA_imm_add,D1                             ;check if immediate address
0000362A  6700 048E               3740                                   BEQ               ADDA_immediate_add_out                        ;if equal go to immediate add sub routine
0000362E  6600 3B7A               3741                                   BNE               ERROR                                         ;if not equal go to error mesage sub routine
00003632                          3742  
00003632                          3743  
00003632                          3744  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00003632                          3745                                   
00003632                          3746                                   
00003632                          3747  ;-----------------------------------Data Register Direct--------------------------------
00003632  C4BC 0000003F           3748  ADDA_Dn_reg                      AND.L              #mask_ADDA_ea_reg_and_mode,D2                ;load the mask into D2 for the mode and the register
00003638  B4BC 00000000           3749                                   CMP.L              #match_ADDA_D0,D2                            ;check to see in the register is 0
0000363E  6600 0006               3750                                   BNE                ADDA_rD1                                     ;if not go check register 1
00003642  6700 0064               3751                                   BEQ                ADDA_D0_out                                  ;if equal go to output subroutine
00003646                          3752  
00003646  B4BC 00000001           3753  ADDA_rD1                         CMP.L              #match_ADDA_D1,D2                            ;check to see in the register is 1
0000364C  6600 0006               3754                                   BNE                ADDA_rD2                                     ;if not go check register 2
00003650  6700 0064               3755                                   BEQ                ADDA_D1_out                                  ;if equal go to output subroutine
00003654                          3756  
00003654  B4BC 00000002           3757  ADDA_rD2                         CMP.L              #match_ADDA_D2,D2                            ;check to see in the register is 2
0000365A  6600 0006               3758                                   BNE                ADDA_rD3                                     ;if not go check register 3
0000365E  6700 0064               3759                                   BEQ                ADDA_D2_out                                  ;if equal go to output subroutine
00003662                          3760  
00003662  B4BC 00000003           3761  ADDA_rD3                         CMP.L              #match_ADDA_D3,D2                            ;check to see in the register is 3
00003668  6600 0006               3762                                   BNE                ADDA_rD4                                     ;if not go check register 4
0000366C  6700 0064               3763                                   BEQ                ADDA_D3_out                                  ;if equal go to output subroutine
00003670                          3764  
00003670  B4BC 00000004           3765  ADDA_rD4                         CMP.L              #match_ADDA_D4,D2                            ;check to see in the register is 4
00003676  6600 0006               3766                                   BNE                ADDA_rD5                                     ;if not go check register 5
0000367A  6700 0064               3767                                   BEQ                ADDA_D4_out                                  ;if equal go to output subroutine
0000367E                          3768  
0000367E  B4BC 00000005           3769  ADDA_rD5                         CMP.L              #match_ADDA_D5,D2                            ;check to see in the register is 5
00003684  6600 0006               3770                                   BNE                ADDA_rD6                                     ;if not go check register 6
00003688  6700 0064               3771                                   BEQ                ADDA_D5_out                                  ;if equal go to output subroutine
0000368C                          3772  
0000368C  B4BC 00000006           3773  ADDA_rD6                         CMP.L              #match_ADDA_D6,D2                            ;check to see in the register is 6
00003692  6600 0006               3774                                   BNE                ADDA_rD7                                     ;if not go check register 7
00003696  6700 0064               3775                                   BEQ                ADDA_D6_out                                  ;if equal go to output subroutine
0000369A                          3776  
0000369A  B4BC 00000007           3777  ADDA_rD7                         CMP.L              #match_ADDA_D7,D2                            ;check to see in the register is 7
000036A0  6700 0068               3778                                   BEQ                ADDA_D7_out                                  ;if equal go to output subroutine
000036A4  6600 3B04               3779                                   BNE                ERROR                                        ;if not equal, got to error message
000036A8                          3780  
000036A8                          3781  
000036A8                          3782  ;--------------------Data Register Direct Output-----------------------
000036A8  227C 00008494           3783  ADDA_D0_out                     MOVE.L              #ea_D0,A1                                    ;load string constant into A1
000036AE  4EB9 00003AEE           3784                                  JSR                 ADDA_determine_second_op                                
000036B4  4E75                    3785                                  RTS
000036B6                          3786  
000036B6  227C 00008497           3787  ADDA_D1_out                     MOVE.L              #ea_D1,A1                                    ;load string constant into A1
000036BC  4EB9 00003AEE           3788                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000036C2  4E75                    3789                                  RTS
000036C4                          3790                                  
000036C4  227C 0000849A           3791  ADDA_D2_out                     MOVE.L              #ea_D2,A1                                    ;load string constant into A1
000036CA  4EB9 00003AEE           3792                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000036D0  4E75                    3793                                  RTS
000036D2                          3794                                  
000036D2  227C 0000849D           3795  ADDA_D3_out                     MOVE.L              #ea_D3,A1                                    ;load string constant into A1
000036D8  4EB9 00003AEE           3796                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000036DE  4E75                    3797                                  RTS
000036E0                          3798                                  
000036E0  227C 000084A0           3799  ADDA_D4_out                     MOVE.L              #ea_D4,A1                                    ;load string constant into A1
000036E6  4EB9 00003AEE           3800                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000036EC  4E75                    3801                                  RTS
000036EE                          3802                                  
000036EE  227C 000084A3           3803  ADDA_D5_out                     MOVE.L              #ea_D5,A1                                    ;load string constant into A1
000036F4  4EB9 00003AEE           3804                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000036FA  4E75                    3805                                  RTS
000036FC                          3806  
000036FC  227C 000084A6           3807  ADDA_D6_out                     MOVE.L              #ea_D6,A1                                ;load string constant into A1
00003702  4EB9 00003AEE           3808                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003708  4E75                    3809                                  RTS
0000370A                          3810                                  
0000370A  227C 000084A9           3811  ADDA_D7_out                     MOVE.L              #ea_D7,A1                                    ;load string constant into A1
00003710  4EB9 00003AEE           3812                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003716  4E75                    3813                                  RTS
00003718                          3814                                  
00003718                          3815  ;------------------Address Register Direct-----------------------
00003718  B4BC 00000008           3816  ADDA_An_reg                      CMP.L           #match_ADDA_A0,D2                               ;check reg is equal to 0
0000371E  6600 0006               3817                                   BNE             ADDA_rA1                                        ;if not try reg 1
00003722  6700 0144               3818                                   BEQ             ADDA_An_indir_reg0_out                          ;if equal go to output subroutine
00003726                          3819  
00003726  B4BC 00000009           3820  ADDA_rA1                         CMP.L           #match_ADDA_A1,D2                               ;check reg is equal to 1
0000372C  6600 0006               3821                                   BNE             ADDA_rA2                                        ;if not try reg 2
00003730  6700 0144               3822                                   BEQ             ADDA_An_indir_reg1_out                          ;if equal go to output subroutine
00003734                          3823  
00003734  B4BC 0000000A           3824  ADDA_rA2                         CMP.L           #match_ADDA_A2,D2                               ;check reg is equal to 2
0000373A  6600 0006               3825                                   BNE             ADDA_rA3                                        ;if not try reg 3
0000373E  6700 0144               3826                                   BEQ             ADDA_An_indir_reg2_out                          ;if equal go to output subroutine
00003742                          3827  
00003742  B4BC 0000000B           3828  ADDA_rA3                         CMP.L           #match_ADDA_A3,D2                               ;check reg is equal to 3
00003748  6600 0006               3829                                   BNE             ADDA_rA4                                        ;if not try reg 4
0000374C  6700 0144               3830                                   BEQ             ADDA_An_indir_reg3_out                          ;if equal go to output subroutine
00003750                          3831  
00003750  B4BC 0000000C           3832  ADDA_rA4                         CMP.L           #match_ADDA_A4,D2                               ;check reg is equal to 4
00003756  6600 0006               3833                                   BNE             ADDA_rA5                                        ;if not try reg 5
0000375A  6700 0144               3834                                   BEQ             ADDA_An_indir_reg4_out                          ;if equal go to output subroutine
0000375E                          3835              
0000375E  B4BC 0000000D           3836  ADDA_rA5                         CMP.L           #match_ADDA_A5,D2                               ;check reg is equal to 5
00003764  6600 0006               3837                                   BNE             ADDA_rA6                                        ;if not try reg 6
00003768  6700 0144               3838                                   BEQ             ADDA_An_indir_reg5_out                          ;if equal go to output subroutine
0000376C                          3839  
0000376C  B4BC 0000000E           3840  ADDA_rA6                         CMP.L           #match_ADDA_A6,D2                               ;check reg is equal to 6
00003772  6600 0006               3841                                   BNE             ADDA_rA7                                        ;if not try reg 7
00003776  6700 0144               3842                                   BEQ             ADDA_An_indir_reg6_out                          ;if equal go to output subroutine
0000377A                          3843  
0000377A  B4BC 0000000F           3844  ADDA_rA7                         CMP.L           #match_ADDA_A7,D2                               ;check reg is equal to 7
00003780  6700 0148               3845                                   BEQ             ADDA_An_indir_reg7_out                          ;if equal go to output subroutine
00003784  6600 3A24               3846                                   BNE             ERROR                                           ;if not equal to an addresssing mode, pritn error
00003788                          3847  
00003788                          3848  
00003788                          3849  ;--------------------Address Register Direct Output-----------------------
00003788  227C 000084AC           3850  ADDA_A0_out                      MOVE.L              #ea_A0,A1                                       ;load string constant into A1
0000378E  4EB9 00003AEE           3851                                   JSR                ADDA_determine_second_op                         ;jump to subroutine to determine second operand
00003794  4E75                    3852                                   RTS                                
00003796                          3853                                   
00003796  227C 000084AF           3854  ADDA_A1_out                      MOVE.L             #ea_A1,A1                                    ;load string constant into A1
0000379C  4EB9 00003AEE           3855                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037A2  4E75                    3856                                   RTS
000037A4                          3857                                  
000037A4  227C 000084B2           3858  ADDA_A2_out                      MOVE.L             #ea_A2,A1                                    ;load string constant into A1
000037AA  4EB9 00003AEE           3859                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037B0  4E75                    3860                                   RTS
000037B2                          3861                              
000037B2  227C 000084B5           3862  ADDA_A3_out                      MOVE.L             #ea_A3,A1                                    ;load string constant into A1
000037B8  4EB9 00003AEE           3863                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037BE  4E75                    3864                                   RTS
000037C0                          3865                                  
000037C0  227C 000084B8           3866  ADDA_A4_out                      MOVE.L             #ea_A4,A1                                    ;load string constant into A1
000037C6  4EB9 00003AEE           3867                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037CC  4E75                    3868                                   RTS
000037CE                          3869                                  
000037CE  227C 000084BB           3870  ADDA_A5_out                      MOVE.L             #ea_A5,A1                                     ;load string constant into A1
000037D4  4EB9 00003AEE           3871                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037DA  4E75                    3872                                   RTS
000037DC                          3873                                  
000037DC  227C 000084BE           3874  ADDA_A6_out                      MOVE.L             #ea_A6,A1                                    ;load string constant into A1
000037E2  4EB9 00003AEE           3875                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037E8  4E75                    3876                                   RTS
000037EA                          3877                                  
000037EA  227C 000084C1           3878  ADDA_A7_out                      MOVE.L             #ea_A7,A1                                    ;load string constant into A1
000037F0  4EB9 00003AEE           3879                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000037F6  4E75                    3880                                   RTS
000037F8                          3881  
000037F8                          3882  ;------------------Address Register Indirect-----------------------
000037F8  B4BC 00000010           3883  ADDA_An_indir_reg                CMP.L              #match_ADDA_An_indir_r0,D2                   ;check reg is equal to 0
000037FE  6600 0006               3884                                   BNE                ADDA_An_indir_reg1                           ;if not try reg 1
00003802  6700 0064               3885                                   BEQ                ADDA_An_indir_reg0_out                       ;if equal go to output subroutine
00003806                          3886  
00003806  B4BC 00000011           3887  ADDA_An_indir_reg1               CMP.L              #match_ADDA_An_indir_r1,D2                   ;check reg is equal to 1
0000380C  6600 0006               3888                                   BNE                ADDA_An_indir_reg2                           ;if not try reg 2
00003810  6700 0064               3889                                   BEQ                ADDA_An_indir_reg1_out                       ;if equal go to output subroutine
00003814                          3890  
00003814  B4BC 00000012           3891  ADDA_An_indir_reg2               CMP.L              #match_ADDA_An_indir_r2,D2                   ;check reg is equal to 2
0000381A  6600 0006               3892                                   BNE                ADDA_An_indir_reg3                           ;if not try reg 3
0000381E  6700 0064               3893                                   BEQ                ADDA_An_indir_reg2_out                       ;if equal go to output subroutine
00003822                          3894  
00003822  B4BC 00000013           3895  ADDA_An_indir_reg3               CMP.L              #match_ADDA_An_indir_r3,D2                   ;check reg is equal to 3
00003828  6600 0006               3896                                   BNE                ADDA_An_indir_reg4                           ;if not try reg 4
0000382C  6700 0064               3897                                   BEQ                ADDA_An_indir_reg3_out                       ;if equal go to output subroutine
00003830                          3898      
00003830  B4BC 00000014           3899  ADDA_An_indir_reg4               CMP.L              #match_ADDA_An_indir_r4,D2                   ;check reg is equal to 4
00003836  6600 0006               3900                                   BNE                ADDA_An_indir_reg5                           ;if not try reg 5
0000383A  6700 0064               3901                                   BEQ                ADDA_An_indir_reg4_out                       ;if equal go to output subroutine
0000383E                          3902          
0000383E  B4BC 00000015           3903  ADDA_An_indir_reg5               CMP.L              #match_ADDA_An_indir_r5,D2                   ;check reg is equal to 5
00003844  6600 0006               3904                                   BNE                ADDA_An_indir_reg6                           ;if not try reg 6
00003848  6700 0064               3905                                   BEQ                ADDA_An_indir_reg5_out                       ;if equal go to output subroutine
0000384C                          3906  
0000384C  B4BC 00000016           3907  ADDA_An_indir_reg6               CMP.L              #match_ADDA_An_indir_r6,D2                   ;check reg is equal to 6
00003852  6600 0006               3908                                   BNE                ADDA_An_indir_reg7                           ;if not try reg 7
00003856  6700 0064               3909                                   BEQ                ADDA_An_indir_reg6_out                       ;if equal go to output subroutine
0000385A                          3910  
0000385A  B4BC 00000017           3911  ADDA_An_indir_reg7               CMP.L              #match_ADDA_An_indir_r7,D2                   ;check reg is equal to 7
00003860  6700 0068               3912                                   BEQ                ADDA_An_indir_reg7_out                       ;if equal go to output subroutine
00003864  6600 3944               3913                                   BNE                ERROR                                        ;if not equal to an addresssing mode, pritn error
00003868                          3914  
00003868                          3915  
00003868                          3916  ;--------------------Address Register Indirect Output-----------------------
00003868  227C 000084D4           3917  ADDA_An_indir_reg0_out           MOVE.L         #ea_indir_A0,A1                             ;load string constant into A1
0000386E  4EB9 00003AEE           3918                                   JSR            ADDA_determine_second_op                    ;jump to subroutine to determine second operand
00003874  4E75                    3919                                   RTS
00003876                          3920                                  
00003876  227C 000084D9           3921  ADDA_An_indir_reg1_out           MOVE.L         #ea_indir_A1,A1                             ;load string constant into A1
0000387C  4EB9 00003AEE           3922                                   JSR            ADDA_determine_second_op                    ;jump to subroutine to determine second operand
00003882  4E75                    3923                                   RTS
00003884                          3924                                  
00003884  227C 000084DE           3925  ADDA_An_indir_reg2_out           MOVE.L         #ea_indir_A2,A1                              ;load string constant into A1
0000388A  4EB9 00003AEE           3926                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003890  4E75                    3927                                   RTS
00003892                          3928                                  
00003892  227C 000084E3           3929  ADDA_An_indir_reg3_out           MOVE.L         #ea_indir_A3,A1                              ;load string constant into A1
00003898  4EB9 00003AEE           3930                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000389E  4E75                    3931                                   RTS
000038A0                          3932                                  
000038A0  227C 000084E8           3933  ADDA_An_indir_reg4_out           MOVE.L         #ea_indir_A4,A1                            ;load string constant into A1
000038A6  4EB9 00003AEE           3934                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000038AC  4E75                    3935                                   RTS
000038AE                          3936                                  
000038AE  227C 000084ED           3937  ADDA_An_indir_reg5_out           MOVE.L         #ea_indir_A5,A1                             ;load string constant into A1
000038B4  4EB9 00003AEE           3938                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
000038BA  4E75                    3939                                   RTS
000038BC                          3940                                  
000038BC  227C 000084F2           3941  ADDA_An_indir_reg6_out           MOVE.L         #ea_indir_A6,A1                             ;load string constant into A1
000038C2  4EB9 00003AEE           3942                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
000038C8  4E75                    3943                                   RTS
000038CA                          3944                                          
000038CA  227C 000084F7           3945  ADDA_An_indir_reg7_out           MOVE.L         #ea_indir_A7,A1                             ;load string constant into A1
000038D0  4EB9 00003AEE           3946                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
000038D6  4E75                    3947                                   RTS
000038D8                          3948  
000038D8                          3949  ;------------------Address Register Indirect with Post Increment-----------------------
000038D8  B4BC 00000018           3950  ADDA_An_indir_postinc_reg        CMP.L              #match_ADDA_An_indir_postinc_reg0,D2         ;check reg is equal to 0
000038DE  6600 0006               3951                                   BNE                ADDA_An_indir_postinc_reg1                   ;if not try reg 1
000038E2  6700 0064               3952                                   BEQ                ADDA_An_indir_postinc_reg0_out               ;if equal go to output subroutine
000038E6                          3953  
000038E6  B4BC 00000019           3954  ADDA_An_indir_postinc_reg1       CMP.L              #match_ADDA_An_indir_postinc_reg1,D2         ;check reg is equal to 1
000038EC  6600 0006               3955                                   BNE            ADDA_An_indir_postinc_reg2                   ;if not try reg 2
000038F0  6700 0064               3956                                   BEQ            ADDA_An_indir_postinc_reg1_out               ;if equal go to output subroutine
000038F4                          3957  
000038F4  B4BC 0000001A           3958  ADDA_An_indir_postinc_reg2       CMP.L          #match_ADDA_An_indir_postinc_reg2,D2         ;check reg is equal to 2
000038FA  6600 0006               3959                                   BNE            ADDA_An_indir_postinc_reg3                   ;if not try reg 3
000038FE  6700 0064               3960                                   BEQ            ADDA_An_indir_postinc_reg2_out               ;if equal go to output subroutine
00003902                          3961  
00003902  B4BC 0000001B           3962  ADDA_An_indir_postinc_reg3       CMP.L          #match_ADDA_An_indir_postinc_reg3,D2         ;check reg is equal to 3
00003908  6600 0006               3963                                   BNE            ADDA_An_indir_postinc_reg4                   ;if not try reg 4
0000390C  6700 0064               3964                                   BEQ            ADDA_An_indir_postinc_reg3_out               ;if equal go to output subroutine
00003910                          3965   
00003910  B4BC 0000001C           3966  ADDA_An_indir_postinc_reg4       CMP.L          #match_ADDA_An_indir_postinc_reg4,D2         ;check reg is equal to 4
00003916  6600 0006               3967                                   BNE            ADDA_An_indir_postinc_reg5                   ;if not try reg 5
0000391A  6700 0064               3968                                   BEQ            ADDA_An_indir_postinc_reg4_out               ;if equal go to output subroutine
0000391E                          3969  
0000391E  B4BC 0000001D           3970  ADDA_An_indir_postinc_reg5       CMP.L          #match_ADDA_An_indir_postinc_reg5,D2         ;check reg is equal to 5
00003924  6600 0006               3971                                   BNE            ADDA_An_indir_postinc_reg6                   ;if not try reg 6
00003928  6700 0064               3972                                   BEQ            ADDA_An_indir_postinc_reg5_out               ;if equal go to output subroutine
0000392C                          3973  
0000392C  B4BC 0000001E           3974  ADDA_An_indir_postinc_reg6       CMP.L          #match_ADDA_An_indir_postinc_reg6,D2         ;check reg is equal to 6
00003932  6600 0006               3975                                   BNE            ADDA_An_indir_postinc_reg7                   ;if not try reg 7
00003936  6700 0064               3976                                   BEQ            ADDA_An_indir_postinc_reg6_out               ;if equal go to output subroutine
0000393A                          3977  
0000393A  B4BC 0000001F           3978  ADDA_An_indir_postinc_reg7       CMP.L          #match_ADDA_An_indir_postinc_reg7,D2         ;check reg is equal to 7
00003940  6700 0068               3979                                   BEQ            ADDA_An_indir_postinc_reg7_out               ;if equal go to output subroutine
00003944  6600 3864               3980                                   BNE                ERROR                                        ;if not equal to an addresssing mode, pritn error
00003948                          3981  
00003948                          3982  
00003948                          3983  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00003948  227C 000084FC           3984  ADDA_An_indir_postinc_reg0_out        MOVE.L            #ea_indir_postinc_A0,A1              ;load string constant into A1
0000394E  4EB9 00003AEE           3985                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003954  4E75                    3986                                        RTS
00003956                          3987                                        
00003956  227C 00008502           3988  ADDA_An_indir_postinc_reg1_out        MOVE.L            #ea_indir_postinc_A1,A1              ;load string constant into A1
0000395C  4EB9 00003AEE           3989                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003962  4E75                    3990                                        RTS
00003964                          3991                                        
00003964  227C 00008508           3992  ADDA_An_indir_postinc_reg2_out        MOVE.L            #ea_indir_postinc_A2,A1              ;load string constant into A1
0000396A  4EB9 00003AEE           3993                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003970  4E75                    3994                                        RTS
00003972                          3995                                        
00003972  227C 0000850E           3996  ADDA_An_indir_postinc_reg3_out        MOVE.L            #ea_indir_postinc_A3,A1              ;load string constant into A1
00003978  4EB9 00003AEE           3997                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
0000397E  4E75                    3998                                        RTS
00003980                          3999                                        
00003980  227C 00008514           4000  ADDA_An_indir_postinc_reg4_out        MOVE.L            #ea_indir_postinc_A4,A1          ;load string constant into A1
00003986  4EB9 00003AEE           4001                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
0000398C  4E75                    4002                                        RTS
0000398E                          4003                                        
0000398E  227C 0000851A           4004  ADDA_An_indir_postinc_reg5_out        MOVE.L            #ea_indir_postinc_A5,A1              ;load string constant into A1
00003994  4EB9 00003AEE           4005                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
0000399A  4E75                    4006                                        RTS
0000399C                          4007                                        
0000399C  227C 00008520           4008  ADDA_An_indir_postinc_reg6_out        MOVE.L            #ea_indir_postinc_A6,A1              ;load string constant into A1
000039A2  4EB9 00003AEE           4009                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
000039A8  4E75                    4010                                        RTS
000039AA                          4011                                        
000039AA  227C 00008526           4012  ADDA_An_indir_postinc_reg7_out        MOVE.L            #ea_indir_postinc_A7,A1              ;load string constant into A1
000039B0  4EB9 00003AEE           4013                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
000039B6  4E75                    4014                                        RTS
000039B8                          4015  
000039B8                          4016  ;------------------Address Register Indirect with Pre Decrement-----------------------
000039B8  B4BC 00000020           4017  ADDA_An_indir_predec                  CMP.L             #match_ADDA_An_indir_predec_reg0,D2        ;check reg is equal to 0
000039BE  6600 0006               4018                                        BNE               ADDA_An_indir_predec_reg1                  ;if not try reg 1
000039C2  6700 0064               4019                                        BEQ               ADDA_An_indir_predec_reg0_out              ;if equal go to output subroutine
000039C6                          4020  
000039C6  B4BC 00000021           4021  ADDA_An_indir_predec_reg1             CMP.L             #match_ADDA_An_indir_predec_reg1,D2        ;check reg is equal to 1
000039CC  6600 0006               4022                                        BNE               ADDA_An_indir_predec_reg2                  ;if not try reg 2
000039D0  6700 0064               4023                                        BEQ               ADDA_An_indir_predec_reg1_out              ;if equal go to output subroutine
000039D4                          4024  
000039D4  B4BC 00000022           4025  ADDA_An_indir_predec_reg2             CMP.L             #match_ADDA_An_indir_predec_reg2,D2        ;check reg is equal to 2
000039DA  6600 0006               4026                                        BNE               ADDA_An_indir_predec_reg3                  ;if not try reg 3
000039DE  6700 0064               4027                                        BEQ               ADDA_An_indir_predec_reg2_out              ;if equal go to output subroutine
000039E2                          4028  
000039E2  B4BC 00000023           4029  ADDA_An_indir_predec_reg3             CMP.L             #match_ADDA_An_indir_predec_reg3,D2        ;check reg is equal to 3
000039E8  6600 0006               4030                                        BNE               ADDA_An_indir_predec_reg4                  ;if not try reg 4
000039EC  6700 0064               4031                                        BEQ               ADDA_An_indir_predec_reg3_out              ;if equal go to output subroutine
000039F0                          4032  
000039F0  B4BC 00000024           4033  ADDA_An_indir_predec_reg4             CMP.L             #match_ADDA_An_indir_predec_reg4,D2        ;check reg is equal to 4
000039F6  6600 0006               4034                                        BNE               ADDA_An_indir_predec_reg5                  ;if not try reg 5
000039FA  6700 0064               4035                                        BEQ               ADDA_An_indir_predec_reg4_out              ;if equal go to output subroutine
000039FE                          4036  
000039FE  B4BC 00000025           4037  ADDA_An_indir_predec_reg5             CMP.L             #match_ADDA_An_indir_predec_reg5,D2        ;check reg is equal to 5
00003A04  6600 0006               4038                                        BNE               ADDA_An_indir_predec_reg6                  ;if not try reg 6
00003A08  6700 0064               4039                                        BEQ               ADDA_An_indir_predec_reg5_out              ;if equal go to output subroutine
00003A0C                          4040  
00003A0C  B4BC 00000026           4041  ADDA_An_indir_predec_reg6             CMP.L             #match_ADDA_An_indir_predec_reg6,D2        ;check reg is equal to 6
00003A12  6600 0006               4042                                        BNE               ADDA_An_indir_predec_reg7                  ;if not try reg 7
00003A16  6700 0064               4043                                        BEQ               ADDA_An_indir_predec_reg6_out              ;if equal go to output subroutine
00003A1A                          4044  
00003A1A  B4BC 00000027           4045  ADDA_An_indir_predec_reg7             CMP.L             #match_ADDA_An_indir_predec_reg7,D2        ;check reg is equal to 7
00003A20  6700 0068               4046                                        BEQ               ADDA_An_indir_predec_reg7_out              ;if equal go to output subroutine
00003A24  6600 3784               4047                                        BNE               ERROR                                      ;if not equal to an addresssing mode, pritn error
00003A28                          4048  
00003A28                          4049  
00003A28                          4050  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00003A28  227C 0000852C           4051  ADDA_An_indir_predec_reg0_out         MOVE.L        #ea_indir_predec_A0,A1             ;load string constant into A1
00003A2E  4EB9 00003AEE           4052                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A34  4E75                    4053                                        RTS
00003A36                          4054                                              
00003A36  227C 00008532           4055  ADDA_An_indir_predec_reg1_out         MOVE.L        #ea_indir_predec_A1,A1             ;load string constant into A1
00003A3C  4EB9 00003AEE           4056                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A42  4E75                    4057                                        RTS
00003A44                          4058                                        
00003A44  227C 00008538           4059  ADDA_An_indir_predec_reg2_out         MOVE.L        #ea_indir_predec_A2,A1             ;load string constant into A1
00003A4A  4EB9 00003AEE           4060                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A50  4E75                    4061                                        RTS
00003A52                          4062                                        
00003A52  227C 0000853E           4063  ADDA_An_indir_predec_reg3_out         MOVE.L        #ea_indir_predec_A3,A1             ;load string constant into A1
00003A58  4EB9 00003AEE           4064                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A5E  4E75                    4065                                        RTS
00003A60                          4066                                        
00003A60  227C 00008544           4067  ADDA_An_indir_predec_reg4_out         MOVE.L        #ea_indir_predec_A4,A1             ;load string constant into A1
00003A66  4EB9 00003AEE           4068                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A6C  4E75                    4069                                        RTS
00003A6E                          4070                                        
00003A6E  227C 0000854A           4071  ADDA_An_indir_predec_reg5_out         MOVE.L        #ea_indir_predec_A5,A1             ;load string constant into A1
00003A74  4EB9 00003AEE           4072                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A7A  4E75                    4073                                        RTS
00003A7C                          4074                                        
00003A7C  227C 00008550           4075  ADDA_An_indir_predec_reg6_out         MOVE.L        #ea_indir_predec_A6,A1             ;load string constant into A1
00003A82  4EB9 00003AEE           4076                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A88  4E75                    4077                                        RTS
00003A8A                          4078                                        
00003A8A  227C 00008556           4079  ADDA_An_indir_predec_reg7_out         MOVE.L        #ea_indir_predec_A7,A1             ;load string constant into A1
00003A90  4EB9 00003AEE           4080                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A96  4E75                    4081                                        RTS        
00003A98                          4082  
00003A98                          4083  ;------------------Absolute Addressing Output-----------------------
00003A98  22FC 00008566           4084  ADDA_abs_add_word_out                    MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003A9E  22C5                    4085                                           MOVE.L      D5,(A1)+                           ;load address                  
00003AA0  4EB9 00003AEE           4086                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003AA6  4E75                    4087                                           RTS                                           
00003AA8                          4088  
00003AA8  2A18                    4089  ADDA_abs_add_long_out                    MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00003AAA  22FC 00008566           4090                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003AB0  22C5                    4091                                           MOVE.L      D5,(A1)+                           ;load address                  
00003AB2  4EB9 00003AEE           4092                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003AB8  4E75                    4093                                           RTS                                            
00003ABA                          4094  ;---------------Immediate Addresing---------------------------
00003ABA  2A18                    4095  ADDA_immediate_add_out                  MOVE.L       (A0)+,D5                           ;capture the immediate address
00003ABC  BCBC 000000FC           4096                                          CMP.L       #match_ADDA_imm_add_word,D6             ;check to see if need to pull word
00003AC2  2A18                    4097                                          MOVE.L      (A0)+,D5                           ;pull the word
00003AC4  6700 0006               4098                                          BEQ         ADDA_imm_add_w                     ;if equal go pull word    
00003AC8  6600 0012               4099                                          BNE         ADDA_imm_add_l                     ;if not equal, go check long
00003ACC                          4100                                           
00003ACC  22FC 00008566           4101  ADDA_imm_add_w                           MOVE.L      #ea_$,(A1)+                        ;load the $
00003AD2  32C5                    4102                                           MOVE.W      D5,(A1)+                           ;load the word address                           
00003AD4  4EB9 00003AEE           4103                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003ADA  4E75                    4104                                           RTS
00003ADC                          4105                                           
00003ADC  2A18                    4106  ADDA_imm_add_l                           MOVE.L      (A0)+,D5                           ;pull the long and increase the pointer
00003ADE  22FC 00008566           4107                                           MOVE.L      #ea_$,(A1)+                        ;load the $
00003AE4  2245                    4108                                           MOVE.L      D5,A1                              ;move to A1
00003AE6  4EB9 00003AEE           4109                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003AEC  4E75                    4110                                           RTS                                              
00003AEE                          4111                                                
00003AEE                          4112                                                
00003AEE                          4113  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003AEE  4282                    4114  ADDA_determine_second_op        CLR.L       D2                          ;clear D2 
00003AF0  C4BC 00000E00           4115                                  AND.L       #mask_ADDA_An_reg,D2        ;load the mask for the register into D2, masks bit 11-9
00003AF6                          4116                                                  
00003AF6  B4BC 00000000           4117  ADDA_reg0                       CMP.L       #match_ADDA_reg0,D2     ;check to see if reg equal 0
00003AFC  6600 0006               4118                                  BNE         ADDA_reg1               ;if not equal got check reg 1
00003B00  6700 0064               4119                                  BEQ         ADDA_reg0_out           ;if equal go to output
00003B04                          4120                                                  
00003B04  B4BC 00000200           4121  ADDA_reg1                       CMP.L       #match_ADDA_reg1,D2     ;check to see if reg equal 1
00003B0A  6600 0006               4122                                  BNE         ADDA_reg2               ;if not equal got check reg 2
00003B0E  6700 005E               4123                                  BEQ         ADDA_reg1_out           ;if equal go to output
00003B12                          4124  
00003B12  B4BC 00000400           4125  ADDA_reg2                       CMP.L       #match_ADDA_reg2,D2     ;check to see if reg equal 2
00003B18  6600 0006               4126                                  BNE         ADDA_reg3               ;if not equal got check reg 3
00003B1C  6700 0058               4127                                  BEQ         ADDA_reg2_out           ;if equal go to output
00003B20                          4128  
00003B20  B4BC 00000600           4129  ADDA_reg3                       CMP.L       #match_ADDA_reg3,D2     ;check to see if reg equal 3
00003B26  6600 0006               4130                                  BNE         ADDA_reg4               ;if not equal got check reg 4
00003B2A  6700 0052               4131                                  BEQ         ADDA_reg3_out           ;if equal go to output
00003B2E                          4132                                                  
00003B2E  B4BC 00000800           4133  ADDA_reg4                       CMP.L       #match_ADDA_reg4,D2     ;check to see if reg equal 4
00003B34  6600 0006               4134                                  BNE         ADDA_reg5               ;if not equal got check reg 5
00003B38  6700 004C               4135                                  BEQ         ADDA_reg4_out           ;if equal go to output
00003B3C                          4136  
00003B3C  B4BC 00000A00           4137  ADDA_reg5                       CMP.L       #match_ADDA_reg5,D2     ;check to see if reg equal 5
00003B42  6600 0006               4138                                  BNE         ADDA_reg6               ;if not equal got check reg 6
00003B46  6700 0046               4139                                  BEQ         ADDA_reg5_out           ;if equal go to output
00003B4A                          4140  
00003B4A  B4BC 00000C00           4141  ADDA_reg6                       CMP.L       #match_ADDA_reg6,D2     ;check to see if reg equal 6
00003B50  6600 0006               4142                                  BNE         ADDA_reg7               ;if not equal got check reg 7
00003B54  6700 0040               4143                                  BEQ         ADDA_reg6_out           ;if equal go to output          
00003B58                          4144  
00003B58  B4BC 00000E00           4145  ADDA_reg7                       CMP.L       #match_ADDA_reg7,D2     ;check to see if reg equal 7
00003B5E  6700 003E               4146                                  BEQ         ADDA_reg7_out           ;if equal go to output
00003B62  6600 3646               4147                                  BNE         ERROR                           ;if not equal to an addresssing mode, pritn error
00003B66                          4148                                  
00003B66                          4149  
00003B66                          4150  ;--------------------Data Output-----------------------
00003B66  227C 000084AC           4151  ADDA_reg0_out                   MOVE.L      #ea_A0,A1               ;load string constant into A1
00003B6C  4E75                    4152                                  RTS
00003B6E                          4153                                              
00003B6E  227C 000084AF           4154  ADDA_reg1_out                   MOVE.L      #ea_A1,A1           ;load string constant into A1
00003B74  4E75                    4155                                  RTS
00003B76                          4156                                              
00003B76  227C 000084B2           4157  ADDA_reg2_out                   MOVE.L      #ea_A2,A1           ;load string constant into A1
00003B7C  4E75                    4158                                  RTS
00003B7E                          4159                                              
00003B7E  227C 000084B5           4160  ADDA_reg3_out                   MOVE.L      #ea_A3,A1           ;load string constant into A1
00003B84  4E75                    4161                                  RTS
00003B86                          4162                                              
00003B86  227C 000084B8           4163  ADDA_reg4_out                   MOVE.L      #ea_A4,A1           ;load string constant into A1
00003B8C  4E75                    4164                                  RTS
00003B8E                          4165                                              
00003B8E  227C 000084BB           4166  ADDA_reg5_out                   MOVE.L      #ea_A5,A1           ;load string constant into A1
00003B94  4E75                    4167                                  RTS
00003B96                          4168                                              
00003B96  227C 000084BE           4169  ADDA_reg6_out                   MOVE.L      #ea_A6,A1           ;load string constant into A1
00003B9C  4E75                    4170                                  RTS
00003B9E                          4171                                              
00003B9E  227C 000084C1           4172  ADDA_reg7_out                   MOVE.L      #ea_A7,A1           ;load string constant into A1
00003BA4  4E75                    4173                                  RTS
00003BA6                          4174                                  
00003BA6                          4175  
00003BA6                          4176  ;----------------------Error Handling----------------------------------------
00003BA6                          4177  
00003BA6                          4178                                                  
00003BA6                          4179                                                  
00003BA6                          4180  
00003BA6                          4181  
00003BA6                          4182  
00003BA6  =00000038               4183  mask_ADDA_ea_mode               EQU         $0038
00003BA6  =0000003F               4184  mask_ADDA_abs_add               EQU         $003F
00003BA6  =0000003F               4185  mask_ADDA_ea_reg_and_mode       EQU         $003F
00003BA6  =00000E00               4186  mask_ADDA_An_reg                EQU         $0E00
00003BA6                          4187  
00003BA6  =00000000               4188  match_ADDA_Dn                   EQU         $0000
00003BA6  =00000008               4189  match_ADDA_An                   EQU         $0008
00003BA6  =00000010               4190  match_ADDA_An_indir             EQU         $0010
00003BA6  =00000020               4191  match_ADDA_An_indir_predec      EQU         $0020
00003BA6  =00000018               4192  match_ADDA_An_indir_postinc     EQU         $0018
00003BA6  =00000038               4193  match_ADDA_abs_add_word         EQU         $0038
00003BA6  =00000039               4194  match_ADDA_abs_add_long         EQU         $0039
00003BA6                          4195  
00003BA6  =00000000               4196  match_ADDA_D0               EQU         $0000
00003BA6  =00000001               4197  match_ADDA_D1               EQU         $0001
00003BA6  =00000002               4198  match_ADDA_D2               EQU         $0002
00003BA6  =00000003               4199  match_ADDA_D3               EQU         $0003
00003BA6  =00000004               4200  match_ADDA_D4               EQU         $0004
00003BA6  =00000005               4201  match_ADDA_D5               EQU         $0005
00003BA6  =00000006               4202  match_ADDA_D6               EQU         $0006
00003BA6  =00000007               4203  match_ADDA_D7               EQU         $0007
00003BA6                          4204  
00003BA6  =00000008               4205  match_ADDA_A0               EQU         $0008
00003BA6  =00000009               4206  match_ADDA_A1               EQU         $0009
00003BA6  =0000000A               4207  match_ADDA_A2               EQU         $000A
00003BA6  =0000000B               4208  match_ADDA_A3               EQU         $000B
00003BA6  =0000000C               4209  match_ADDA_A4               EQU         $000C
00003BA6  =0000000D               4210  match_ADDA_A5               EQU         $000D
00003BA6  =0000000E               4211  match_ADDA_A6               EQU         $000E
00003BA6  =0000000F               4212  match_ADDA_A7               EQU         $000F
00003BA6                          4213  
00003BA6  =00000010               4214  match_ADDA_An_indir_r0          EQU         $0010
00003BA6  =00000011               4215  match_ADDA_An_indir_r1          EQU         $0011
00003BA6  =00000012               4216  match_ADDA_An_indir_r2          EQU         $0012
00003BA6  =00000013               4217  match_ADDA_An_indir_r3          EQU         $0013
00003BA6  =00000014               4218  match_ADDA_An_indir_r4          EQU         $0014
00003BA6  =00000015               4219  match_ADDA_An_indir_r5          EQU         $0015
00003BA6  =00000016               4220  match_ADDA_An_indir_r6          EQU         $0016
00003BA6  =00000017               4221  match_ADDA_An_indir_r7          EQU         $0017
00003BA6                          4222  
00003BA6  =00000018               4223  match_ADDA_An_indir_postinc_reg0    EQU         $0018
00003BA6  =00000019               4224  match_ADDA_An_indir_postinc_reg1    EQU         $0019
00003BA6  =0000001A               4225  match_ADDA_An_indir_postinc_reg2    EQU         $001A
00003BA6  =0000001B               4226  match_ADDA_An_indir_postinc_reg3    EQU         $001B
00003BA6  =0000001C               4227  match_ADDA_An_indir_postinc_reg4    EQU         $001C
00003BA6  =0000001D               4228  match_ADDA_An_indir_postinc_reg5    EQU         $001D
00003BA6  =0000001E               4229  match_ADDA_An_indir_postinc_reg6    EQU         $001E
00003BA6  =0000001F               4230  match_ADDA_An_indir_postinc_reg7    EQU         $001F
00003BA6                          4231  
00003BA6  =00000020               4232  match_ADDA_An_indir_predec_reg0     EQU         $0020
00003BA6  =00000021               4233  match_ADDA_An_indir_predec_reg1     EQU         $0021
00003BA6  =00000022               4234  match_ADDA_An_indir_predec_reg2     EQU         $0022
00003BA6  =00000023               4235  match_ADDA_An_indir_predec_reg3     EQU         $0023
00003BA6  =00000024               4236  match_ADDA_An_indir_predec_reg4     EQU         $0024
00003BA6  =00000025               4237  match_ADDA_An_indir_predec_reg5     EQU         $0025
00003BA6  =00000026               4238  match_ADDA_An_indir_predec_reg6     EQU         $0026
00003BA6  =00000027               4239  match_ADDA_An_indir_predec_reg7     EQU         $0027
00003BA6                          4240  
00003BA6  =0000003C               4241  match_ADDA_imm_add                      EQU                 $003C
00003BA6  =000000FC               4242  match_ADDA_imm_add_word                 EQU                 $00FC
00003BA6  =000001FC               4243  match_ADDA_imm_add_long                 EQU                 $01FC
00003BA6                          4244  
00003BA6  =00000000               4245  match_ADDA_reg0             EQU         $0000
00003BA6  =00000200               4246  match_ADDA_reg1             EQU         $0200
00003BA6  =00000400               4247  match_ADDA_reg2             EQU         $0400
00003BA6  =00000600               4248  match_ADDA_reg3             EQU         $0600
00003BA6  =00000800               4249  match_ADDA_reg4             EQU         $0800
00003BA6  =00000A00               4250  match_ADDA_reg5             EQU         $0A00
00003BA6  =00000C00               4251  match_ADDA_reg6             EQU         $0C00
00003BA6  =00000E00               4252  match_ADDA_reg7             EQU         $0E00
00003BA6                          4253  
00003BA6                          4254  
00003BA6                          4255  
00003BA6                          4256  
00003BA6                          4257  
00003BA6                          4258  
00003BA6                          4259  
00003BA6                          4260  
00003BA6                          4261  -------------------- end include --------------------
00003BA6                          4262              INCLUDE 'ADDQ Subroutine.x68'
00003BA6                          4263  ADDQ_sub                                                       ;preserve the registers, 
00003BA6  C2BC 00000038           4264                                   AND.L             #mask_ADDQ_ea_mode,D1                                   ;move the mask to D1
00003BAC                          4265                                   
00003BAC                          4266  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003BAC  4282                    4267                                  CLR.L       D2                                              ;clear D2 
00003BAE  C4BC 00000E00           4268                                  AND.L       #mask_ADDQ_reg,D2                               ;load the mask for the register into D2, masks bit 11-9
00003BB4                          4269                                                  
00003BB4  B4BC 00000000           4270  ADDQ_reg0                       CMP.L       #match_ADDQ_reg0,D2                             ;check to see if reg equal 0
00003BBA  6600 0006               4271                                  BNE         ADDQ_reg1                                       ;if not equal got check reg 1
00003BBE  6700 0064               4272                                  BEQ         ADDQ_reg0_out                                   ;if equal go to output
00003BC2                          4273                                              
00003BC2  B4BC 00000200           4274  ADDQ_reg1                       CMP.L       #match_ADDQ_reg1,D2                             ;check to see if reg equal 1
00003BC8  6600 0006               4275                                  BNE         ADDQ_reg2                                       ;if not equal got check reg 2
00003BCC  6700 0062               4276                                  BEQ         ADDQ_reg1_out                                   ;if equal go to output
00003BD0                          4277  
00003BD0  B4BC 00000400           4278  ADDQ_reg2                       CMP.L       #match_ADDQ_reg2,D2                             ;check to see if reg equal 2
00003BD6  6600 0006               4279                                  BNE         ADDQ_reg3                                       ;if not equal got check reg 3
00003BDA  6700 0060               4280                                  BEQ         ADDQ_reg2_out                                   ;if equal go to output
00003BDE                          4281  
00003BDE  B4BC 00000600           4282  ADDQ_reg3                       CMP.L       #match_ADDQ_reg3,D2                             ;check to see if reg equal 3
00003BE4  6600 0006               4283                                  BNE         ADDQ_reg4                                       ;if not equal got check reg 4
00003BE8  6700 005E               4284                                  BEQ         ADDQ_reg3_out                                   ;if equal go to output
00003BEC                          4285                                                  
00003BEC  B4BC 00000800           4286  ADDQ_reg4                       CMP.L       #match_ADDQ_reg4,D2                             ;check to see if reg equal 4
00003BF2  6600 0006               4287                                  BNE         ADDQ_reg5                                       ;if not equal got check reg 5
00003BF6  6700 005C               4288                                  BEQ         ADDQ_reg4_out                                   ;if equal go to output
00003BFA                          4289  
00003BFA  B4BC 00000A00           4290  ADDQ_reg5                       CMP.L       #match_ADDQ_reg5,D2                             ;check to see if reg equal 5
00003C00  6600 0006               4291                                  BNE         ADDQ_reg6                                       ;if not equal got check reg 6
00003C04  6700 005A               4292                                  BEQ         ADDQ_reg5_out                                   ;if equal go to output
00003C08                          4293  
00003C08  B4BC 00000C00           4294  ADDQ_reg6                       CMP.L       #match_ADDQ_reg6,D2                             ;check to see if reg equal 6
00003C0E  6600 0006               4295                                  BNE         ADDQ_reg7                                       ;if not equal got check reg 7
00003C12  6700 0058               4296                                  BEQ         ADDQ_reg6_out                                   ;if equal go to output          
00003C16                          4297  
00003C16  B4BC 00000E00           4298  ADDQ_reg7                       CMP.L       #match_ADDQ_reg7,D2                             ;check to see if reg equal 7
00003C1C  6700 005A               4299                                  BEQ         ADDQ_reg7_out                                   ;if equal go to output
00003C20  6600 3588               4300                                  BNE         ERROR                                                ;if not equal to an addresssing mode, pritn error
00003C24                          4301                                  
00003C24                          4302  
00003C24                          4303  ;--------------------Data Output-----------------------
00003C24  227C 0000856A           4304  ADDQ_reg0_out                               MOVE.L      #ea_data0,A1                               ;load string constant into A1
00003C2A  4EB9 00003C84           4305                                              JSR         ADDQ_determine_second_operand                ;jump to subroutine to determine the second operand
00003C30                          4306                                              
00003C30  227C 0000856D           4307  ADDQ_reg1_out                               MOVE.L      #ea_data1,A1                            ;load string constant into A1
00003C36  4EB9 00003C84           4308                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003C3C                          4309  
00003C3C  227C 00008570           4310  ADDQ_reg2_out                               MOVE.L      #ea_data2,A1                                ;load string constant into A1
00003C42  4EB9 00003C84           4311                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003C48                          4312  
00003C48  227C 00008573           4313  ADDQ_reg3_out                               MOVE.L      #ea_data3,A1                                    ;load string constant into A1
00003C4E  4EB9 00003C84           4314                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003C54                          4315   
00003C54  227C 00008576           4316  ADDQ_reg4_out                               MOVE.L      #ea_data4,A1                            ;load string constant into A1
00003C5A  4EB9 00003C84           4317                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003C60                          4318  
00003C60  227C 00008579           4319  ADDQ_reg5_out                               MOVE.L      #ea_data5,A1                            ;load string constant into A1
00003C66  4EB9 00003C84           4320                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003C6C                          4321  
00003C6C  227C 0000857C           4322  ADDQ_reg6_out                               MOVE.L      #ea_data6,A1                            ;load string constant into A1
00003C72  4EB9 00003C84           4323                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003C78                          4324  
00003C78  227C 0000857F           4325  ADDQ_reg7_out                               MOVE.L      #ea_data7,A1                            ;load string constant into A1
00003C7E  4EB9 00003C84           4326                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003C84                          4327                  
00003C84                          4328  
00003C84                          4329  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00003C84                          4330  ADDQ_determine_second_operand
00003C84  B2BC 00000000           4331  ADDQ_data_reg_dir                CMP.L             #match_ADDQ_Dn,D1                             ;check to see if mode is data reg direct
00003C8A  6600 0006               4332                                   BNE               ADDQ_add_reg_dir                                   ;if not, go check add reg dir
00003C8E  6700 005E               4333                                   BEQ               ADDQ_Dn_reg                                        ;if equal go figure out the register
00003C92                          4334  
00003C92  B2BC 00000008           4335  ADDQ_add_reg_dir                 CMP.L             #match_ADDQ_An,D1                             ;check if mode is add reg direct
00003C98  6600 0006               4336                                   BNE               ADDQ_add_reg_indir                                 ;if not, go check add reg indir
00003C9C  6700 0106               4337                                   BEQ               ADDQ_An_reg                                        ;if equal go figure out the reg
00003CA0                          4338   
00003CA0  B2BC 00000010           4339  ADDQ_add_reg_indir               CMP.L             #match_ADDQ_An_indir,D1                       ;check to see if mode is add reg indir
00003CA6  6600 0006               4340                                   BNE               ADDQ_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00003CAA  6700 01A8               4341                                   BEQ               ADDQ_An_indir_reg                                  ;if equal go figure out the register           
00003CAE                          4342             
00003CAE  B2BC 00000020           4343  ADDQ_add_reg_indir_predec        CMP.L             #match_ADDQ_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00003CB4  6600 0006               4344                                   BNE               ADDQ_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00003CB8  6700 02FA               4345                                   BEQ               ADDQ_An_indir_predec                               ;if equal go figure out the register
00003CBC                          4346                        
00003CBC  B2BC 00000018           4347  ADDQ_add_reg_indir_postinc       CMP.L             #match_ADDQ_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00003CC2  6600 0006               4348                                   BNE               ADDQ_abs_add_word                                  ;if not go check abs add word
00003CC6  6700 023C               4349                                   BEQ               ADDQ_An_indir_pinc_reg                          ;if equal go figure out the register
00003CCA                          4350  
00003CCA  C4BC 0000003F           4351  ADDQ_abs_add_word                AND.L             #mask_ADDQ_abs_add,D2                         ;load mask to determine if abs add word or long
00003CD0                          4352                                   
00003CD0  B4BC 00000038           4353                                   CMP.L             #match_ADDQ_abs_add_word,D2                   ;check if abs add word
00003CD6  2A18                    4354                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00003CD8  6600 0006               4355                                   BNE               ADDQ_abs_add_long                                  ;if not go check abs add long
00003CDC  6700 0386               4356                                   BEQ               ADDQ_abs_add_word_out                              ;if equal go to output
00003CE0                          4357    
00003CE0  B4BC 00000039           4358  ADDQ_abs_add_long                CMP.L             #match_ADDQ_abs_add_long,D2                    ;check to see if abs add long
00003CE6  6700 0386               4359                                   BEQ               ADDQ_abs_add_long_out                               ;if equal go to output
00003CEA  6600 34BE               4360                                   BNE               ERROR
00003CEE                          4361  
00003CEE                          4362  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00003CEE                          4363                                   
00003CEE                          4364                                   
00003CEE                          4365  ;-----------------------------------Data Register Direct--------------------------------
00003CEE  C4BC 0000003F           4366  ADDQ_Dn_reg                      AND.L              #mask_ADDQ_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00003CF4  B4BC 00000000           4367                                   CMP.L              #match_ADDQ_D0,D2                       ;check to see in the register is 0
00003CFA  6600 0006               4368                                   BNE                ADDQ_rD1                                     ;if not go check register 1
00003CFE  6700 0064               4369                                   BEQ                ADDQ_D0_out                              ;if equal go to output subroutine
00003D02                          4370  
00003D02  B4BC 00000001           4371  ADDQ_rD1                         CMP.L              #match_ADDQ_D1,D2                       ;check to see in the register is 1
00003D08  6600 0006               4372                                   BNE                ADDQ_rD2                                     ;if not go check register 2
00003D0C  6700 005E               4373                                   BEQ                ADDQ_D1_out                              ;if equal go to output subroutine
00003D10                          4374  
00003D10  B4BC 00000002           4375  ADDQ_rD2                         CMP.L              #match_ADDQ_D2,D2                       ;check to see in the register is 2
00003D16  6600 0006               4376                                   BNE                ADDQ_rD3                                     ;if not go check register 3
00003D1A  6700 0058               4377                                   BEQ                ADDQ_D2_out                              ;if equal go to output subroutine
00003D1E                          4378  
00003D1E  B4BC 00000003           4379  ADDQ_rD3                         CMP.L              #match_ADDQ_D3,D2                       ;check to see in the register is 3
00003D24  6600 0006               4380                                   BNE                ADDQ_rD4                                     ;if not go check register 4
00003D28  6700 0052               4381                                   BEQ                ADDQ_D3_out                              ;if equal go to output subroutine
00003D2C                          4382  
00003D2C  B4BC 00000004           4383  ADDQ_rD4                         CMP.L              #match_ADDQ_D4,D2                       ;check to see in the register is 4
00003D32  6600 0006               4384                                   BNE                ADDQ_rD5                                     ;if not go check register 5
00003D36  6700 004C               4385                                   BEQ                ADDQ_D4_out                              ;if equal go to output subroutine
00003D3A                          4386  
00003D3A  B4BC 00000005           4387  ADDQ_rD5                         CMP.L              #match_ADDQ_D5,D2                       ;check to see in the register is 5
00003D40  6600 0006               4388                                   BNE                ADDQ_rD6                                     ;if not go check register 6
00003D44  6700 0046               4389                                   BEQ                ADDQ_D5_out                              ;if equal go to output subroutine
00003D48                          4390  
00003D48  B4BC 00000006           4391  ADDQ_rD6                         CMP.L              #match_ADDQ_D6,D2                       ;check to see in the register is 6
00003D4E  6600 0006               4392                                   BNE                ADDQ_rD7                                     ;if not go check register 7
00003D52  6700 0040               4393                                   BEQ                ADDQ_D6_out                              ;if equal go to output subroutine
00003D56                          4394  
00003D56  B4BC 00000007           4395  ADDQ_rD7                         CMP.L              #match_ADDQ_D7,D2                       ;check to see in the register is 7
00003D5C  6700 003E               4396                                   BEQ                ADDQ_D7_out                              ;if equal go to output subroutine
00003D60  6600 3448               4397                                   BNE                ERROR                                   ;if not equal, got to error message
00003D64                          4398  ;--------------------Data Register Direct Output-----------------------
00003D64  227C 00008494           4399  ADDQ_D0_out                     MOVE.L              #ea_D0,A1                           ;load string constant into A1
00003D6A                          4400                                  
00003D6A  4E75                    4401                                  RTS                                                     ;return to subroutine
00003D6C                          4402  
00003D6C  227C 00008497           4403  ADDQ_D1_out                     MOVE.L              #ea_D1,A1                           ;load string constant into A1
00003D72                          4404                                  
00003D72  4E75                    4405                                  RTS                                                     ;return to subroutine
00003D74                          4406  
00003D74                          4407  
00003D74  227C 0000849A           4408  ADDQ_D2_out                     MOVE.L              #ea_D2,A1                           ;load string constant into A1
00003D7A                          4409                                  
00003D7A  4E75                    4410                                  RTS                                                     ;return to subroutine
00003D7C                          4411  
00003D7C  227C 0000849D           4412  ADDQ_D3_out                     MOVE.L              #ea_D3,A1                           ;load string constant into A1
00003D82                          4413                                  
00003D82  4E75                    4414                                  RTS                                                     ;return to subroutine
00003D84                          4415  
00003D84                          4416  
00003D84  227C 000084A0           4417  ADDQ_D4_out                     MOVE.L              #ea_D4,A1                           ;load string constant into A1
00003D8A                          4418                                  
00003D8A  4E75                    4419                                  RTS                                                     ;return to subroutine
00003D8C                          4420      
00003D8C                          4421  
00003D8C  227C 000084A3           4422  ADDQ_D5_out                     MOVE.L              #ea_D5,A1                           ;load string constant into A1
00003D92                          4423                                  
00003D92  4E75                    4424                                  RTS                                                     ;return to subroutine
00003D94                          4425  
00003D94                          4426  
00003D94  227C 000084A6           4427  ADDQ_D6_out                     MOVE.L              #ea_D6,A1                           ;load string constant into A1
00003D9A                          4428                                  
00003D9A  4E75                    4429                                  RTS                                                     ;return to subroutine
00003D9C                          4430  
00003D9C                          4431  
00003D9C  227C 000084A9           4432  ADDQ_D7_out                     MOVE.L              #ea_D7,A1                           ;load string constant into A1
00003DA2                          4433                                  
00003DA2  4E75                    4434                                  RTS                                                     ;return to subroutine
00003DA4                          4435  
00003DA4                          4436  ;------------------Address Register Direct-----------------------
00003DA4  B4BC 00000008           4437  ADDQ_An_reg                      CMP.L           #match_ADDQ_A0,D2                           ;check reg is equal to 0
00003DAA  6600 0006               4438                                   BNE             ADDQ_rA1                                    ;if not try reg 1
00003DAE  6700 0114               4439                                   BEQ             ADDQ_An_indir_reg0_out                      ;if equal go to output subroutine
00003DB2                          4440  
00003DB2  B4BC 00000009           4441  ADDQ_rA1                         CMP.L           #match_ADDQ_A1,D2                           ;check reg is equal to 1
00003DB8  6600 0006               4442                                   BNE             ADDQ_rA2                                    ;if not try reg 2
00003DBC  6700 010E               4443                                   BEQ             ADDQ_An_indir_reg1_out                      ;if equal go to output subroutine
00003DC0                          4444  
00003DC0  B4BC 0000000A           4445  ADDQ_rA2                         CMP.L           #match_ADDQ_A2,D2                           ;check reg is equal to 2
00003DC6  6600 0006               4446                                   BNE             ADDQ_rA3                                    ;if not try reg 3
00003DCA  6700 0108               4447                                   BEQ             ADDQ_An_indir_reg2_out                      ;if equal go to output subroutine
00003DCE                          4448  
00003DCE  B4BC 0000000B           4449  ADDQ_rA3                         CMP.L           #match_ADDQ_A3,D2                           ;check reg is equal to 3
00003DD4  6600 0006               4450                                   BNE             ADDQ_rA4                                    ;if not try reg 4
00003DD8  6700 0102               4451                                   BEQ             ADDQ_An_indir_reg3_out                      ;if equal go to output subroutine
00003DDC                          4452  
00003DDC  B4BC 0000000C           4453  ADDQ_rA4                         CMP.L           #match_ADDQ_A4,D2                           ;check reg is equal to 4
00003DE2  6600 0006               4454                                   BNE             ADDQ_rA5                                    ;if not try reg 5
00003DE6  6700 00FC               4455                                   BEQ             ADDQ_An_indir_reg4_out                      ;if equal go to output subroutine
00003DEA                          4456              
00003DEA  B4BC 0000000D           4457  ADDQ_rA5                         CMP.L           #match_ADDQ_A5,D2                           ;check reg is equal to 5
00003DF0  6600 0006               4458                                   BNE             ADDQ_rA6                                    ;if not try reg 6
00003DF4  6700 00F6               4459                                   BEQ             ADDQ_An_indir_reg5_out                      ;if equal go to output subroutine
00003DF8                          4460  
00003DF8  B4BC 0000000E           4461  ADDQ_rA6                         CMP.L           #match_ADDQ_A6,D2                           ;check reg is equal to 6
00003DFE  6600 0006               4462                                   BNE             ADDQ_rA7                                    ;if not try reg 7
00003E02  6700 00F0               4463                                   BEQ             ADDQ_An_indir_reg6_out                      ;if equal go to output subroutine
00003E06                          4464  
00003E06  B4BC 0000000F           4465  ADDQ_rA7                         CMP.L           #match_ADDQ_A7,D2                           ;check reg is equal to 7
00003E0C  6700 00EE               4466                                   BEQ             ADDQ_An_indir_reg7_out                      ;if equal go to output subroutine
00003E10  6600 3398               4467                                   BNE             ERROR                                       ;if not equal to an addresssing mode, pritn error
00003E14                          4468  
00003E14                          4469  ;--------------------Address Register Direct Output-----------------------
00003E14  227C 000084C1           4470  ADDQ_A0_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E1A                          4471                                  
00003E1A  4E75                    4472                                       RTS                                            return to subroutine
00003E1C                          4473                                  
00003E1C  227C 000084C1           4474  ADDQ_A1_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E22                          4475                                  
00003E22  4E75                    4476                                       RTS                                            ;return to subroutine
00003E24                          4477                                  
00003E24  227C 000084C1           4478  ADDQ_A2_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E2A                          4479                                  
00003E2A  4E75                    4480                                       RTS                                            ;return to subroutine
00003E2C                          4481                                  
00003E2C  227C 000084C1           4482  ADDQ_A3_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E32                          4483                                  
00003E32  4E75                    4484                                       RTS                                            ;return to subroutine
00003E34                          4485  
00003E34  227C 000084C1           4486  ADDQ_A4_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E3A                          4487                                  
00003E3A  4E75                    4488                                       RTS                                            ;return to subroutine
00003E3C                          4489  
00003E3C  227C 000084C1           4490  ADDQ_A5_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E42                          4491                                  
00003E42  4E75                    4492                                       RTS                                            ;return to subroutine
00003E44                          4493  
00003E44  227C 000084C1           4494  ADDQ_A6_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E4A                          4495                                  
00003E4A  4E75                    4496                                       RTS                                            ;return to subroutine
00003E4C                          4497  
00003E4C  227C 000084C1           4498  ADDQ_A7_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E52                          4499                                  
00003E52  4E75                    4500                                       RTS                                            ;return to subroutine
00003E54                          4501  
00003E54                          4502  ;------------------Address Register Indirect-----------------------
00003E54  B4BC 00000010           4503  ADDQ_An_indir_reg                CMP.L           #match_ADDQ_An_indir_r0,D2              ;check reg is equal to 0
00003E5A  6600 0006               4504                                   BNE             ADDQ_An_indir_reg1                      ;if not try reg 1
00003E5E  6700 0064               4505                                   BEQ             ADDQ_An_indir_reg0_out                  ;if equal go to output subroutine
00003E62                          4506  
00003E62  B4BC 00000011           4507  ADDQ_An_indir_reg1               CMP.L           #match_ADDQ_An_indir_r1,D2              ;check reg is equal to 1
00003E68  6600 0006               4508                                   BNE             ADDQ_An_indir_reg2                      ;if not try reg 2
00003E6C  6700 005E               4509                                   BEQ             ADDQ_An_indir_reg1_out                  ;if equal go to output subroutine
00003E70                          4510  
00003E70  B4BC 00000012           4511  ADDQ_An_indir_reg2               CMP.L           #match_ADDQ_An_indir_r2,D2              ;check reg is equal to 2
00003E76  6600 0006               4512                                   BNE             ADDQ_An_indir_reg3                      ;if not try reg 3
00003E7A  6700 0058               4513                                   BEQ             ADDQ_An_indir_reg2_out                  ;if equal go to output subroutine
00003E7E                          4514  
00003E7E  B4BC 00000013           4515  ADDQ_An_indir_reg3               CMP.L           #match_ADDQ_An_indir_r3,D2              ;check reg is equal to 3
00003E84  6600 0006               4516                                   BNE             ADDQ_An_indir_reg4                      ;if not try reg 4
00003E88  6700 0052               4517                                   BEQ             ADDQ_An_indir_reg3_out                  ;if equal go to output subroutine
00003E8C                          4518      
00003E8C  B4BC 00000014           4519  ADDQ_An_indir_reg4               CMP.L           #match_ADDQ_An_indir_r4,D2              ;check reg is equal to 4
00003E92  6600 0006               4520                                   BNE             ADDQ_An_indir_reg5                      ;if not try reg 5
00003E96  6700 004C               4521                                   BEQ             ADDQ_An_indir_reg4_out                  ;if equal go to output subroutine
00003E9A                          4522          
00003E9A  B4BC 00000015           4523  ADDQ_An_indir_reg5               CMP.L           #match_ADDQ_An_indir_r5,D2              ;check reg is equal to 5
00003EA0  6600 0006               4524                                   BNE             ADDQ_An_indir_reg6                      ;if not try reg 6
00003EA4  6700 0046               4525                                   BEQ             ADDQ_An_indir_reg5_out                  ;if equal go to output subroutine
00003EA8                          4526  
00003EA8  B4BC 00000016           4527  ADDQ_An_indir_reg6               CMP.L           #match_ADDQ_An_indir_r6,D2              ;check reg is equal to 6
00003EAE  6600 0006               4528                                   BNE             ADDQ_An_indir_reg7                      ;if not try reg 7
00003EB2  6700 0040               4529                                   BEQ             ADDQ_An_indir_reg6_out                  ;if equal go to output subroutine
00003EB6                          4530  
00003EB6  B4BC 00000017           4531  ADDQ_An_indir_reg7               CMP.L           #match_ADDQ_An_indir_r7,D2              ;check reg is equal to 7
00003EBC  6700 003E               4532                                   BEQ             ADDQ_An_indir_reg7_out                  ;if equal go to output subroutine
00003EC0  6600 32E8               4533                                   BNE             ERROR                                   ;if not equal to an addresssing mode, pritn error
00003EC4                          4534  
00003EC4                          4535  ;--------------------Address Register Indirect Output-----------------------
00003EC4  227C 000084D4           4536  ADDQ_An_indir_reg0_out                      MOVE.L      #ea_indir_A0,A1                           ;load string constant into A1
00003ECA                          4537                                  
00003ECA  4E75                    4538                                              RTS                                                     ;return to subroutine
00003ECC                          4539  
00003ECC  227C 000084D9           4540  ADDQ_An_indir_reg1_out                      MOVE.L      #ea_indir_A1,A1                           ;load string constant into A1
00003ED2                          4541                                  
00003ED2  4E75                    4542                                              RTS                                                     ;return to subroutine
00003ED4                          4543  
00003ED4  227C 000084DE           4544  ADDQ_An_indir_reg2_out                      MOVE.L      #ea_indir_A2,A1                           ;load string constant into A1
00003EDA                          4545                                  
00003EDA  4E75                    4546                                              RTS                                                     ;return to subroutine
00003EDC                          4547  
00003EDC  227C 000084E3           4548  ADDQ_An_indir_reg3_out                      MOVE.L      #ea_indir_A3,A1                           ;load string constant into A1
00003EE2                          4549                                  
00003EE2  4E75                    4550                                              RTS                                                     ;return to subroutine
00003EE4                          4551  
00003EE4  227C 000084E8           4552  ADDQ_An_indir_reg4_out                      MOVE.L      #ea_indir_A4,A1                           ;load string constant into A1
00003EEA                          4553                                  
00003EEA  4E75                    4554                                              RTS                                                     ;return to subroutine
00003EEC                          4555  
00003EEC  227C 000084ED           4556  ADDQ_An_indir_reg5_out                      MOVE.L      #ea_indir_A5,A1                           ;load string constant into A1
00003EF2                          4557                                  
00003EF2  4E75                    4558                                              RTS                                                     ;return to subroutine
00003EF4                          4559  
00003EF4  227C 000084F2           4560  ADDQ_An_indir_reg6_out                      MOVE.L      #ea_indir_A6,A1                           ;load string constant into A1
00003EFA                          4561                                  
00003EFA  4E75                    4562                                              RTS                                                     ;return to subroutine
00003EFC                          4563                                          
00003EFC  227C 000084F7           4564  ADDQ_An_indir_reg7_out                      MOVE.L      #ea_indir_A7,A1                           ;load string constant into A1
00003F02                          4565                                  
00003F02  4E75                    4566                                              RTS                                                     ;return to subroutine
00003F04                          4567  
00003F04                          4568  ;------------------Address Register Indirect with Post Increment-----------------------
00003F04  B4BC 00000018           4569  ADDQ_An_indir_pinc_reg                      CMP.L      #match_ADDQ_An_indir_postinc_reg0,D2            ;check reg is equal to 0
00003F0A  6600 0006               4570                                              BNE        ADDQ_An_indir_pinc_r1                           ;if not try reg 1
00003F0E  6700 0064               4571                                              BEQ        ADDQ_An_indir_pinc_r0_out                       ;if equal go to output subroutine
00003F12                          4572  
00003F12  B4BC 00000019           4573  ADDQ_An_indir_pinc_r1                       CMP.L      #match_ADDQ_An_indir_postinc_reg1,D2            ;check reg is equal to 1
00003F18  6600 0006               4574                                              BNE        ADDQ_An_indir_pinc_r2                           ;if not try reg 2
00003F1C  6700 005E               4575                                              BEQ        ADDQ_An_indir_pinc_r1_out                       ;if equal go to output subroutine
00003F20                          4576  
00003F20  B4BC 0000001A           4577  ADDQ_An_indir_pinc_r2                       CMP.L      #match_ADDQ_An_indir_postinc_reg2,D2            ;check reg is equal to 2
00003F26  6600 0006               4578                                              BNE        ADDQ_An_indir_pinc_r3                           ;if not try reg 3
00003F2A  6700 0058               4579                                              BEQ        ADDQ_An_indir_pinc_r2_out                       ;if equal go to output subroutine
00003F2E                          4580  
00003F2E  B4BC 0000001B           4581  ADDQ_An_indir_pinc_r3                       CMP.L      #match_ADDQ_An_indir_postinc_reg3,D2            ;check reg is equal to 3
00003F34  6600 0006               4582                                              BNE        ADDQ_An_indir_pinc_r4                           ;if not try reg 4
00003F38  6700 0052               4583                                              BEQ        ADDQ_An_indir_pinc_r3_out                       ;if equal go to output subroutine
00003F3C                          4584   
00003F3C  B4BC 0000001C           4585  ADDQ_An_indir_pinc_r4                       CMP.L      #match_ADDQ_An_indir_postinc_reg4,D2            ;check reg is equal to 4
00003F42  6600 0006               4586                                              BNE        ADDQ_An_indir_pinc_r5                           ;if not try reg 5
00003F46  6700 004C               4587                                              BEQ        ADDQ_An_indir_pinc_r4_out                       ;if equal go to output subroutine
00003F4A                          4588  
00003F4A  B4BC 0000001D           4589  ADDQ_An_indir_pinc_r5                       CMP.L      #match_ADDQ_An_indir_postinc_reg5,D2            ;check reg is equal to 5
00003F50  6600 0006               4590                                              BNE        ADDQ_An_indir_pinc_r6                           ;if not try reg 6
00003F54  6700 0046               4591                                              BEQ        ADDQ_An_indir_pinc_r5_out                       ;if equal go to output subroutine
00003F58                          4592  
00003F58  B4BC 0000001E           4593  ADDQ_An_indir_pinc_r6                       CMP.L      #match_ADDQ_An_indir_postinc_reg6,D2             ;check reg is equal to 6
00003F5E  6600 0006               4594                                              BNE        ADDQ_An_indir_pinc_r7                            ;if not try reg 7
00003F62  6700 0040               4595                                              BEQ        ADDQ_An_indir_pinc_r6_out                        ;if equal go to output subroutine
00003F66                          4596  
00003F66  B4BC 0000001F           4597  ADDQ_An_indir_pinc_r7                       CMP.L      #match_ADDQ_An_indir_postinc_reg7,D2             ;check reg is equal to 7
00003F6C  6700 003E               4598                                              BEQ        ADDQ_An_indir_pinc_r7_out                        ;if equal go to output subroutine
00003F70  6600 3238               4599                                              BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
00003F74                          4600  
00003F74                          4601  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00003F74  227C 000084FC           4602  ADDQ_An_indir_pinc_r0_out                       MOVE.L      #ea_indir_postinc_A0,A1                           ;load string constant into A1
00003F7A                          4603                                  
00003F7A  4E75                    4604                                                  RTS                                                         ;return to subroutine
00003F7C                          4605  
00003F7C  227C 00008502           4606  ADDQ_An_indir_pinc_r1_out                       MOVE.L      #ea_indir_postinc_A1,A1                           ;load string constant into A1
00003F82                          4607                                  
00003F82  4E75                    4608                                                  RTS                                                         ;return to subroutine
00003F84                          4609  
00003F84  227C 00008508           4610  ADDQ_An_indir_pinc_r2_out                       MOVE.L      #ea_indir_postinc_A2,A1                           ;load string constant into A1
00003F8A                          4611                                  
00003F8A  4E75                    4612                                                  RTS                                                         ;return to subroutine
00003F8C                          4613  
00003F8C  227C 0000850E           4614  ADDQ_An_indir_pinc_r3_out                       MOVE.L      #ea_indir_postinc_A3,A1                           ;load string constant into A1
00003F92                          4615                                  
00003F92  4E75                    4616                                                  RTS                                                         ;return to subroutine
00003F94                          4617  
00003F94  227C 00008514           4618  ADDQ_An_indir_pinc_r4_out                       MOVE.L      #ea_indir_postinc_A4,A1                           ;load string constant into A1
00003F9A                          4619                                  
00003F9A  4E75                    4620                                                  RTS                                                         ;return to subroutine
00003F9C                          4621  
00003F9C  227C 0000851A           4622  ADDQ_An_indir_pinc_r5_out                       MOVE.L      #ea_indir_postinc_A5,A1                           ;load string constant into A1
00003FA2                          4623                                  
00003FA2  4E75                    4624                                                  RTS                                                         ;return to subroutine
00003FA4                          4625  
00003FA4  227C 00008520           4626  ADDQ_An_indir_pinc_r6_out                       MOVE.L      #ea_indir_postinc_A6,A1                           ;load string constant into A1
00003FAA                          4627                                  
00003FAA  4E75                    4628                                                  RTS                                                         ;return to subroutine
00003FAC                          4629  
00003FAC  227C 00008526           4630  ADDQ_An_indir_pinc_r7_out                       MOVE.L      #ea_indir_postinc_A7,A1                           ;load string constant into A1
00003FB2                          4631                                  
00003FB2  4E75                    4632                                                  RTS                                                         ;return to subroutine
00003FB4                          4633  
00003FB4                          4634  ;------------------Address Register Indirect with Pre Decrement-----------------------
00003FB4  B4BC 00000020           4635  ADDQ_An_indir_predec                        CMP.L      #match_ADDQ_An_indir_predec_reg0,D2           ;check reg is equal to 0
00003FBA  6600 0006               4636                                              BNE        ADDQ_An_indir_pdec_r1                         ;if not try reg 1
00003FBE  6700 0064               4637                                              BEQ        ADDQ_An_indir_pdec_r0_out                     ;if equal go to output subroutine
00003FC2                          4638  
00003FC2  B4BC 00000021           4639  ADDQ_An_indir_pdec_r1                       CMP.L      #match_ADDQ_An_indir_predec_reg1,D2           ;check reg is equal to 1
00003FC8  6600 0006               4640                                              BNE        ADDQ_An_indir_pdec_r2                         ;if not try reg 2
00003FCC  6700 005E               4641                                              BEQ        ADDQ_An_indir_pdec_r1_out                     ;if equal go to output subroutine
00003FD0                          4642  
00003FD0  B4BC 00000022           4643  ADDQ_An_indir_pdec_r2                       CMP.L      #match_ADDQ_An_indir_predec_reg2,D2           ;check reg is equal to 2
00003FD6  6600 0006               4644                                              BNE        ADDQ_An_indir_pdec_r3                         ;if not try reg 3
00003FDA  6700 0058               4645                                              BEQ        ADDQ_An_indir_pdec_r2_out                     ;if equal go to output subroutine
00003FDE                          4646  
00003FDE  B4BC 00000023           4647  ADDQ_An_indir_pdec_r3                       CMP.L      #match_ADDQ_An_indir_predec_reg3,D2           ;check reg is equal to 3
00003FE4  6600 0006               4648                                              BNE        ADDQ_An_indir_pdec_r4                         ;if not try reg 4
00003FE8  6700 0052               4649                                              BEQ        ADDQ_An_indir_pdec_r3_out                     ;if equal go to output subroutine
00003FEC                          4650  
00003FEC  B4BC 00000024           4651  ADDQ_An_indir_pdec_r4                       CMP.L      #match_ADDQ_An_indir_predec_reg4,D2           ;check reg is equal to 4
00003FF2  6600 0006               4652                                              BNE        ADDQ_An_indir_pdec_r5                         ;if not try reg 5
00003FF6  6700 004C               4653                                              BEQ        ADDQ_An_indir_pdec_r4_out                     ;if equal go to output subroutine
00003FFA                          4654  
00003FFA  B4BC 00000025           4655  ADDQ_An_indir_pdec_r5                       CMP.L      #match_ADDQ_An_indir_predec_reg5,D2           ;check reg is equal to 5
00004000  6600 0006               4656                                              BNE        ADDQ_An_indir_pdec_r6                         ;if not try reg 6
00004004  6700 0046               4657                                              BEQ        ADDQ_An_indir_pdec_r5_out                     ;if equal go to output subroutine
00004008                          4658  
00004008  B4BC 00000026           4659  ADDQ_An_indir_pdec_r6                       CMP.L      #match_ADDQ_An_indir_predec_reg6,D2           ;check reg is equal to 6
0000400E  6600 0006               4660                                              BNE        ADDQ_An_indir_pdec_r7                         ;if not try reg 7
00004012  6700 0040               4661                                              BEQ        ADDQ_An_indir_pdec_r6_out                     ;if equal go to output subroutine
00004016                          4662  
00004016  B4BC 00000027           4663  ADDQ_An_indir_pdec_r7                       CMP.L      #match_ADDQ_An_indir_predec_reg7,D2           ;check reg is equal to 7
0000401C  6700 003E               4664                                              BEQ        ADDQ_An_indir_pdec_r7_out                    ;if equal go to output subroutine
00004020  6600 3188               4665                                              BNE        ERROR                                        ;if not equal to an addresssing mode, pritn error
00004024                          4666  
00004024                          4667  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00004024  227C 0000852C           4668  ADDQ_An_indir_pdec_r0_out                   MOVE.L      #ea_indir_predec_A0,A1                        ;load string constant into A1
0000402A                          4669                                  
0000402A  4E75                    4670                                              RTS                                                     ;return to subroutine
0000402C                          4671                                              
0000402C  227C 00008532           4672  ADDQ_An_indir_pdec_r1_out                   MOVE.L      #ea_indir_predec_A1,A1                      ;load string constant into A1
00004032                          4673                                  
00004032  4E75                    4674                                              RTS                                                     ;return to subroutine
00004034                          4675  
00004034  227C 00008538           4676  ADDQ_An_indir_pdec_r2_out                   MOVE.L      #ea_indir_predec_A2,A1                      ;load string constant into A1
0000403A                          4677                                  
0000403A  4E75                    4678                                              RTS                                                     ;return to subroutine
0000403C                          4679  
0000403C  227C 0000853E           4680  ADDQ_An_indir_pdec_r3_out                   MOVE.L      #ea_indir_predec_A3,A1                      ;load string constant into A1
00004042                          4681                                  
00004042  4E75                    4682                                              RTS                                                     ;return to subroutine
00004044                          4683  
00004044  227C 00008544           4684  ADDQ_An_indir_pdec_r4_out                   MOVE.L      #ea_indir_predec_A4,A1                      ;load string constant into A1
0000404A                          4685                                  
0000404A  4E75                    4686                                              RTS                                                     ;return to subroutine
0000404C                          4687  
0000404C  227C 0000854A           4688  ADDQ_An_indir_pdec_r5_out                   MOVE.L      #ea_indir_predec_A5,A1                      ;load string constant into A1
00004052                          4689                                  
00004052  4E75                    4690                                              RTS                                                     ;return to subroutine
00004054                          4691  
00004054  227C 00008550           4692  ADDQ_An_indir_pdec_r6_out                   MOVE.L      #ea_indir_predec_A6,A1                      ;load string constant into A1
0000405A                          4693                                  
0000405A  4E75                    4694                                              RTS                                                     ;return to subroutine
0000405C                          4695  
0000405C  227C 00008556           4696  ADDQ_An_indir_pdec_r7_out                   MOVE.L      #ea_indir_predec_A7,A1                      ;load string constant into A1
00004062                          4697                                  
00004062  4E75                    4698                                              RTS                                                     ;return to subroutine
00004064                          4699  
00004064                          4700  ;------------------Absolute Addressing Output-----------------------
00004064  22FC 00008566           4701  ADDQ_abs_add_word_out                    MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000406A  22C5                    4702                                           MOVE.L      D5,(A1)+                           ;load address                  
0000406C                          4703                                  
0000406C  4E75                    4704                                           RTS                                            :return to subroutine
0000406E                          4705                                             
0000406E                          4706  
0000406E  2A18                    4707  ADDQ_abs_add_long_out                    MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00004070  22FC 00008566           4708                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00004076  22C5                    4709                                           MOVE.L      D5,(A1)+                           ;load address                  
00004078                          4710                                  
00004078  4E75                    4711                                           RTS                                           
0000407A                          4712  ;----------------------Error Handling----------------------------------------
0000407A                          4713  
0000407A                          4714  
0000407A  =00000038               4715  mask_ADDQ_ea_mode           EQU         $0038
0000407A  =0000003F               4716  mask_ADDQ_abs_add           EQU         $003F
0000407A  =0000003F               4717  mask_ADDQ_ea_reg_and_mode   EQU         $003F
0000407A  =00000E00               4718  mask_ADDQ_reg               EQU         $0E00
0000407A                          4719  
0000407A  =00000000               4720  match_ADDQ_Dn               EQU         $0000
0000407A  =00000008               4721  match_ADDQ_An               EQU         $0008
0000407A  =00000010               4722  match_ADDQ_An_indir         EQU         $0010
0000407A  =00000020               4723  match_ADDQ_An_indir_predec  EQU         $0020
0000407A  =00000018               4724  match_ADDQ_An_indir_postinc EQU         $0018
0000407A  =00000038               4725  match_ADDQ_abs_add_word     EQU         $0038
0000407A  =00000039               4726  match_ADDQ_abs_add_long     EQU         $0039
0000407A                          4727  
0000407A  =00000000               4728  match_ADDQ_D0               EQU         $0000
0000407A  =00000001               4729  match_ADDQ_D1               EQU         $0001
0000407A  =00000002               4730  match_ADDQ_D2               EQU         $0002
0000407A  =00000003               4731  match_ADDQ_D3               EQU         $0003
0000407A  =00000004               4732  match_ADDQ_D4               EQU         $0004
0000407A  =00000005               4733  match_ADDQ_D5               EQU         $0005
0000407A  =00000006               4734  match_ADDQ_D6               EQU         $0006
0000407A  =00000007               4735  match_ADDQ_D7               EQU         $0007
0000407A                          4736  
0000407A  =00000008               4737  match_ADDQ_A0               EQU         $0008
0000407A  =00000009               4738  match_ADDQ_A1               EQU         $0009
0000407A  =0000000A               4739  match_ADDQ_A2               EQU         $000A
0000407A  =0000000B               4740  match_ADDQ_A3               EQU         $000B
0000407A  =0000000C               4741  match_ADDQ_A4               EQU         $000C
0000407A  =0000000D               4742  match_ADDQ_A5               EQU         $000D
0000407A  =0000000E               4743  match_ADDQ_A6               EQU         $000E
0000407A  =0000000F               4744  match_ADDQ_A7               EQU         $000F
0000407A                          4745  
0000407A  =00000010               4746  match_ADDQ_An_indir_r0      EQU         $0010
0000407A  =00000011               4747  match_ADDQ_An_indir_r1      EQU         $0011
0000407A  =00000012               4748  match_ADDQ_An_indir_r2      EQU         $0012
0000407A  =00000013               4749  match_ADDQ_An_indir_r3      EQU         $0013
0000407A  =00000014               4750  match_ADDQ_An_indir_r4      EQU         $0014
0000407A  =00000015               4751  match_ADDQ_An_indir_r5      EQU         $0015
0000407A  =00000016               4752  match_ADDQ_An_indir_r6      EQU         $0016
0000407A  =00000017               4753  match_ADDQ_An_indir_r7      EQU         $0017
0000407A                          4754  
0000407A  =00000018               4755  match_ADDQ_An_indir_postinc_reg0        EQU         $0018
0000407A  =00000019               4756  match_ADDQ_An_indir_postinc_reg1        EQU         $0019
0000407A  =0000001A               4757  match_ADDQ_An_indir_postinc_reg2        EQU         $001A
0000407A  =0000001B               4758  match_ADDQ_An_indir_postinc_reg3        EQU         $001B
0000407A  =0000001C               4759  match_ADDQ_An_indir_postinc_reg4        EQU         $001C
0000407A  =0000001D               4760  match_ADDQ_An_indir_postinc_reg5        EQU         $001D
0000407A  =0000001E               4761  match_ADDQ_An_indir_postinc_reg6        EQU         $001E
0000407A  =0000001F               4762  match_ADDQ_An_indir_postinc_reg7        EQU         $001F
0000407A                          4763  
0000407A  =00000020               4764  match_ADDQ_An_indir_predec_reg0         EQU         $0020
0000407A  =00000021               4765  match_ADDQ_An_indir_predec_reg1         EQU         $0021
0000407A  =00000022               4766  match_ADDQ_An_indir_predec_reg2         EQU         $0022
0000407A  =00000023               4767  match_ADDQ_An_indir_predec_reg3         EQU         $0023
0000407A  =00000024               4768  match_ADDQ_An_indir_predec_reg4         EQU         $0024
0000407A  =00000025               4769  match_ADDQ_An_indir_predec_reg5         EQU         $0025
0000407A  =00000026               4770  match_ADDQ_An_indir_predec_reg6         EQU         $0026
0000407A  =00000027               4771  match_ADDQ_An_indir_predec_reg7         EQU         $0027
0000407A                          4772  
0000407A                          4773  
0000407A  =00000000               4774  match_ADDQ_reg0                         EQU         $0000
0000407A  =00000200               4775  match_ADDQ_reg1                         EQU         $0200
0000407A  =00000400               4776  match_ADDQ_reg2                         EQU         $0400
0000407A  =00000600               4777  match_ADDQ_reg3                         EQU         $0600
0000407A  =00000800               4778  match_ADDQ_reg4                         EQU         $0800
0000407A  =00000A00               4779  match_ADDQ_reg5                         EQU         $0A00
0000407A  =00000C00               4780  match_ADDQ_reg6                         EQU         $0C00
0000407A  =00000E00               4781  match_ADDQ_reg7                         EQU         $0E00
0000407A                          4782  
0000407A                          4783  
0000407A                          4784  
0000407A                          4785  
0000407A                          4786  
0000407A                          4787  
0000407A                          4788  
0000407A                          4789  
0000407A                          4790  -------------------- end include --------------------
0000407A                          4791              INCLUDE 'ASD Subroutine.x68'
0000407A                          4792  
0000407A                          4793  ASD_sub                                            ;preserve the registers,\ 
0000407A                          4794                                   
0000407A                          4795  ;------------------------Determine Shift Type-----------------------------------------------------------------
0000407A  C2BC 000000C0           4796  shift_type                       AND.L              #mask_ASD_shift_type,D1                 ;load mask into D1
00004080  B2BC 000000C0           4797                                   CMP.L              #match_ASD_mem_shift,D1                 ;check to see if memory shift
00004086  6700 0006               4798                                   BEQ                ASD_mem_shift                               ;if equal go to mem shift subroutine
0000408A  6600 028E               4799                                   BNE                ASD_reg_shift                               ;if ASD mem shift, go to reg shift
0000408E                          4800  
0000408E                          4801  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
0000408E  4241                    4802  ASD_mem_shift                    CLR               D1                                        ;clear shift mask
00004090  C2BC 00000038           4803                                   AND.L             #mask_ASD_ea_mode,D1                      ;move the mask to D1
00004096                          4804  
00004096  B2BC 00000010           4805  ASD_An_indir                     CMP.L             #match_ASD_An_indir,D1                    ;check to see if mode is add reg indir
0000409C  6600 0014               4806                                   BNE               ASD_An_indir_predec                           ;if ASD, go check add reg indir predec 
000040A0  6700 0042               4807                                   BEQ               ASD_An_indir_reg                              ;if equal go figure out the register           
000040A4                          4808            
000040A4  B2BC 00000020           4809  ASD_An_indir_postinc             CMP.L             #match_ASD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
000040AA  6600 0006               4810                                   BNE               ASD_An_indir_predec                           ;if ASD go check add reg indir/predec
000040AE  6700 00EC               4811                                   BEQ               ASD_An_indir_postinc_reg                      ;if equal go figure out the register
000040B2                          4812                        
000040B2  B2BC 00000018           4813  ASD_An_indir_predec              CMP.L             #match_ASD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
000040B8  6600 0006               4814                                   BNE               ASD_abs_add_word                              ;if ASD go check abs add word
000040BC  6700 0196               4815                                   BEQ               ASD_An_indir_predec_reg                       ;if equal go figure out the register
000040C0                          4816  
000040C0  C4BC 0000003F           4817  ASD_abs_add_word                 AND.L             #mask_ASD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
000040C6                          4818                                   
000040C6  B4BC 00000039           4819                                   CMP.L             #match_ASD_abs_add_word,D2                ;check if abs add word
000040CC  2A18                    4820                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
000040CE  6600 0006               4821                                   BNE               ASD_abs_add_long                              ;if ASD go check abs add long
000040D2  6700 0230               4822                                   BEQ               ASD_abs_add_word_out                          ;if equal go to output
000040D6                          4823    
000040D6  B4BC 0000003C           4824  ASD_abs_add_long                 CMP.L             #match_ASD_abs_add_long,D2                ;check to see if abs add long
000040DC  6700 0230               4825                                   BEQ               ASD_abs_add_long_out                          ;if equal go to output
000040E0  6600 30C8               4826                                   BNE               ERROR                                     ;if ASD equal to an addresssing mode, pritn error
000040E4                          4827                               
000040E4                          4828  
000040E4                          4829  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000040E4                          4830                                              
000040E4                          4831  ;------------------Address Register Indirect-----------------------
000040E4  4242                    4832  ASD_An_indir_reg                            CLR             D2                                      ;make sure D2 is empty
000040E6  C4BC 0000003F           4833                                              AND.L           #mask_ASD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
000040EC                          4834                                              
000040EC  B4BC 00000010           4835                                              CMP.L           #match_ASD_An_indir_r0,D2              ;check reg is equal to 0
000040F2  6600 0006               4836                                              BNE             ASD_An_indir_reg1                            ;if ASD try reg 1
000040F6  6700 0064               4837                                              BEQ             ASD_An_indir_reg0_out                     ;if equal go to output subroutine
000040FA                          4838  
000040FA  B4BC 00000011           4839  ASD_An_indir_reg1                           CMP.L           #match_ASD_An_indir_r1,D2              ;check reg is equal to 1
00004100  6600 0006               4840                                              BNE             ASD_An_indir_reg2                            ;if ASD try reg 2
00004104  6700 005E               4841                                              BEQ             ASD_An_indir_reg1_out                     ;if equal go to output subroutine
00004108                          4842  
00004108  B4BC 00000012           4843  ASD_An_indir_reg2                           CMP.L           #match_ASD_An_indir_r2,D2              ;check reg is equal to 2
0000410E  6600 0006               4844                                              BNE             ASD_An_indir_reg3                            ;if ASD try reg 3
00004112  6700 0058               4845                                              BEQ             ASD_An_indir_reg2_out                     ;if equal go to output subroutine
00004116                          4846  
00004116  B4BC 00000013           4847  ASD_An_indir_reg3                           CMP.L           #match_ASD_An_indir_r3,D2              ;check reg is equal to 3
0000411C  6600 0006               4848                                              BNE             ASD_An_indir_reg4                            ;if ASD try reg 4
00004120  6700 0052               4849                                              BEQ             ASD_An_indir_reg3_out                     ;if equal go to output subroutine
00004124                          4850  
00004124  B4BC 00000014           4851  ASD_An_indir_reg4                           CMP.L           #match_ASD_An_indir_r4,D2              ;check reg is equal to 4
0000412A  6600 0006               4852                                              BNE             ASD_An_indir_reg5                            ;if ASD try reg 5
0000412E  6700 004C               4853                                              BEQ             ASD_An_indir_reg4_out                    ;if equal go to output subroutine
00004132                          4854  
00004132  B4BC 00000015           4855  ASD_An_indir_reg5                           CMP.L           #match_ASD_An_indir_r5,D2              ;check reg is equal to 5
00004138  6600 0006               4856                                              BNE             ASD_An_indir_reg6                            ;if ASD try reg 6
0000413C  6700 0046               4857                                              BEQ             ASD_An_indir_reg5_out                     ;if equal go to output subroutine
00004140                          4858  
00004140  B4BC 00000016           4859  ASD_An_indir_reg6                           CMP.L           #match_ASD_An_indir_r6,D2              ;check reg is equal to 6
00004146  6700 0044               4860                                              BEQ             ASD_An_indir_reg6_out                     ;if equal go to output subroutine
0000414A  6600 0002               4861                                              BNE             ASD_An_indir_reg7                            ;if ASD try reg 7
0000414E                          4862  
0000414E  B4BC 00000017           4863  ASD_An_indir_reg7                           CMP.L           #match_ASD_An_indir_r7,D2              ;check reg is equal to 6
00004154  6700 003E               4864                                              BEQ             ASD_An_indir_reg7_out                     ;if equal go to output subroutine
00004158  6600 3050               4865                                              BNE             ERROR                                        :if ASD equal to an addresssing mode, pritn error
0000415C                          4866  
0000415C                          4867  ;--------------------Address Register Indirect Output-----------------------
0000415C  227C 000084D4           4868  ASD_An_indir_reg0_out                       MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
00004162                          4869                                                  
00004162  4E75                    4870                                              RTS                                                         ;return to subroutine
00004164                          4871                                      
00004164  227C 000084D9           4872  ASD_An_indir_reg1_out                       MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
0000416A                          4873                                                  
0000416A  4E75                    4874                                              RTS                                                         ;return to subroutine
0000416C                          4875                                              
0000416C  227C 000084DE           4876  ASD_An_indir_reg2_out                       MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
00004172                          4877                                                  
00004172  4E75                    4878                                              RTS                                                     ;return to subroutine
00004174                          4879  
00004174  227C 000084E3           4880  ASD_An_indir_reg3_out                       MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
0000417A                          4881                                                  
0000417A  4E75                    4882                                              RTS                                                         ;return to subroutine
0000417C                          4883                                              
0000417C  227C 000084E8           4884  ASD_An_indir_reg4_out                       MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
00004182                          4885                                                  
00004182  4E75                    4886                                              RTS                                                         ;return to subroutine
00004184                          4887                                          
00004184  227C 000084ED           4888  ASD_An_indir_reg5_out                       MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
0000418A                          4889                                                  
0000418A  4E75                    4890                                              RTS                                                     ;return to subroutine
0000418C                          4891  
0000418C  227C 000084F2           4892  ASD_An_indir_reg6_out                       MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
00004192                          4893                                                  
00004192  4E75                    4894                                              RTS                                                         ;return to subroutine
00004194                          4895  
00004194  227C 000084F7           4896  ASD_An_indir_reg7_out                       MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
0000419A                          4897                                                  
0000419A  4E75                    4898                                              RTS                                                         ;return to subroutine
0000419C                          4899  
0000419C                          4900  
0000419C                          4901  ;------------------Address Register Indirect with Post Increment-----------------------
0000419C  4242                    4902  ASD_An_indir_postinc_reg                    CLR        D2                                      ;make sure D2 is empty
0000419E  C4BC 0000003F           4903                                              AND.L      #mask_ASD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
000041A4                          4904  
000041A4  B4BC 00000020           4905                                              CMP.L      #match_ASD_An_indir_postinc_r0,D2        ;check reg is equal to 0
000041AA  6600 0006               4906                                              BNE        ASD_An_indir_pinc_r1                      ;if ASD try reg 1
000041AE  6700 0064               4907                                              BEQ        ASD_An_indir_pinc_r0_out               ;if equal go to output subroutine
000041B2                          4908  
000041B2  B4BC 00000021           4909  ASD_An_indir_pinc_r1                        CMP.L      #match_ASD_An_indir_postinc_r1,D2        ;check reg is equal to 1
000041B8  6600 0006               4910                                              BNE        ASD_An_indir_pinc_r2                      ;if ASD try reg 2
000041BC  6700 005E               4911                                              BEQ        ASD_An_indir_pinc_r1_out               ;if equal go to output subroutine
000041C0                          4912  
000041C0  B4BC 00000022           4913  ASD_An_indir_pinc_r2                        CMP.L      #match_ASD_An_indir_postinc_r2,D2        ;check reg is equal to 2
000041C6  6600 0006               4914                                              BNE        ASD_An_indir_pinc_r3                      ;if ASD try reg 3
000041CA  6700 0058               4915                                              BEQ        ASD_An_indir_pinc_r2_out               ;if equal go to output subroutine
000041CE                          4916      
000041CE  B4BC 00000023           4917  ASD_An_indir_pinc_r3                        CMP.L      #match_ASD_An_indir_postinc_r3,D2        ;check reg is equal to 3
000041D4  6600 0006               4918                                              BNE        ASD_An_indir_pinc_r4                      ;if ASD try reg 4
000041D8  6700 0052               4919                                              BEQ        ASD_An_indir_pinc_r3_out               ;if equal go to output subroutine
000041DC                          4920  
000041DC  B4BC 00000024           4921  ASD_An_indir_pinc_r4                        CMP.L      #match_ASD_An_indir_postinc_r4,D2        ;check reg is equal to 4
000041E2  6600 0006               4922                                              BNE        ASD_An_indir_pinc_r5                      ;if ASD try reg 5
000041E6  6700 004C               4923                                              BEQ        ASD_An_indir_pinc_r4_out               ;if equal go to output subroutine
000041EA                          4924  
000041EA  B4BC 00000025           4925  ASD_An_indir_pinc_r5                        CMP.L      #match_ASD_An_indir_postinc_r5,D2        ;check reg is equal to 5
000041F0  6600 0006               4926                                              BNE        ASD_An_indir_pinc_r6                      ;if ASD try reg 6
000041F4  6700 0046               4927                                              BEQ        ASD_An_indir_pinc_r5_out               ;if equal go to output subroutine
000041F8                          4928  
000041F8  B4BC 00000026           4929  ASD_An_indir_pinc_r6                        CMP.L      #match_ASD_An_indir_postinc_r6,D2        ;check reg is equal to 6
000041FE  6700 0044               4930                                              BEQ        ASD_An_indir_pinc_r6_out              ;if equal go to output subroutine
00004202  6600 0002               4931                                              BNE        ASD_An_indir_pinc_r7
00004206                          4932  
00004206                          4933  
00004206  B4BC 00000026           4934  ASD_An_indir_pinc_r7                        CMP.L      #match_ASD_An_indir_postinc_r6,D2        ;check reg is equal to 6
0000420C  6700 003E               4935                                              BEQ        ASD_An_indir_pinc_r7_out              ;if equal go to output subroutine
00004210  6600 2F98               4936                                              BNE        ERROR                                        :if ASD equal to an addresssing mode, pritn error
00004214                          4937  
00004214                          4938  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00004214  227C 00008502           4939  ASD_An_indir_pinc_r0_out                        MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
0000421A                          4940                                                  
0000421A  4E75                    4941                                                  RTS                                             ;return to subroutine
0000421C                          4942  
0000421C  227C 00008502           4943  ASD_An_indir_pinc_r1_out                        MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
00004222                          4944                                                  
00004222  4E75                    4945                                                  RTS                                             ;return to subroutine
00004224                          4946  
00004224  227C 00008508           4947  ASD_An_indir_pinc_r2_out                        MOVE.L          #ea_indir_postinc_A2,A1         ;load string constant into A1
0000422A                          4948                                                  
0000422A  4E75                    4949                                                  RTS                                             ;return to subroutine
0000422C                          4950  
0000422C  227C 0000850E           4951  ASD_An_indir_pinc_r3_out                        MOVE.L          #ea_indir_postinc_A3,A1         ;load string constant into A1
00004232                          4952                                                  
00004232  4E75                    4953                                                  RTS                                             ;return to subroutine
00004234                          4954  
00004234  227C 00008514           4955  ASD_An_indir_pinc_r4_out                        MOVE.L          #ea_indir_postinc_A4,A1         ;load string constant into A1
0000423A                          4956                                                  
0000423A  4E75                    4957                                                  RTS                                             ;return to subroutine
0000423C                          4958  
0000423C  227C 0000851A           4959  ASD_An_indir_pinc_r5_out                        MOVE.L          #ea_indir_postinc_A5,A1         ;load string constant into A1
00004242                          4960                                                  
00004242  4E75                    4961                                                  RTS                                             ;return to subroutine
00004244                          4962   
00004244  227C 00008520           4963  ASD_An_indir_pinc_r6_out                        MOVE.L          #ea_indir_postinc_A6,A1         ;load string constant into A1
0000424A                          4964                                                  
0000424A  4E75                    4965                                                  RTS                                             ;return to subroutine
0000424C                          4966  
0000424C  227C 00008526           4967  ASD_An_indir_pinc_r7_out                        MOVE.L          #ea_indir_postinc_A7,A1         ;load string constant into A1
00004252                          4968                                                  
00004252  4E75                    4969                                                  RTS                                             ;return to subroutine
00004254                          4970  
00004254                          4971                                                      
00004254                          4972  ;------------------Address Register Indirect with Pre Decrement-----------------------
00004254  B4BC 00000018           4973  ASD_An_indir_predec_reg                     CMP.L      #match_ASD_An_indir_predec_r0,D2         ;check reg is equal to 0
0000425A  6600 0006               4974                                              BNE        ASD_An_indir_pdec_r1                      ;if ASD try reg 1
0000425E  6700 0064               4975                                              BEQ        ASD_An_indir_pdec_r0_out               ;if equal go to output subroutine
00004262                          4976  
00004262  B4BC 00000019           4977  ASD_An_indir_pdec_r1                        CMP.L      #match_ASD_An_indir_predec_r1,D2         ;check reg is equal to 1
00004268  6600 0006               4978                                              BNE        ASD_An_indir_pdec_r2                      ;if ASD try reg 2
0000426C  6700 005E               4979                                              BEQ        ASD_An_indir_pdec_r1_out               ;if equal go to output subroutine
00004270                          4980  
00004270  B4BC 0000001A           4981  ASD_An_indir_pdec_r2                        CMP.L      #match_ASD_An_indir_predec_r2,D2         ;check reg is equal to 2
00004276  6600 0006               4982                                              BNE        ASD_An_indir_pdec_r3                      ;if ASD try reg 3
0000427A  6700 0058               4983                                              BEQ        ASD_An_indir_pdec_r2_out               ;if equal go to output subroutine
0000427E                          4984  
0000427E  B4BC 0000001B           4985  ASD_An_indir_pdec_r3                        CMP.L      #match_ASD_An_indir_predec_r3,D2         ;check reg is equal to 3
00004284  6600 0006               4986                                              BNE        ASD_An_indir_pdec_r4                      ;if ASD try reg 4
00004288  6700 0052               4987                                              BEQ        ASD_An_indir_pdec_r3_out               ;if equal go to output subroutine
0000428C                          4988  
0000428C  B4BC 0000001C           4989  ASD_An_indir_pdec_r4                        CMP.L      #match_ASD_An_indir_predec_r4,D2         ;check reg is equal to 4
00004292  6600 0006               4990                                              BNE        ASD_An_indir_pdec_r5                      ;if ASD try reg 5
00004296  6700 004C               4991                                              BEQ        ASD_An_indir_pdec_r4_out               ;if equal go to output subroutine
0000429A                          4992  
0000429A  B4BC 0000001D           4993  ASD_An_indir_pdec_r5                        CMP.L        #match_ASD_An_indir_predec_r5,D2         ;check reg is equal to 5
000042A0  6600 0006               4994                                              BNE        ASD_An_indir_pdec_r6                      ;if ASD try reg 6
000042A4  6700 0046               4995                                              BEQ        ASD_An_indir_pdec_r5_out               ;if equal go to output subroutine
000042A8                          4996  
000042A8  B4BC 0000001E           4997  ASD_An_indir_pdec_r6                        CMP.L        #match_ASD_An_indir_predec_r6,D2         ;check reg is equal to 6
000042AE  6700 0044               4998                                              BEQ        ASD_An_indir_pdec_r6_out               ;if equal go to output subroutine
000042B2  6600 0002               4999                                              BNE        ASD_An_indir_pdec_r7
000042B6                          5000  
000042B6  B4BC 0000001E           5001  ASD_An_indir_pdec_r7                        CMP.L        #match_ASD_An_indir_predec_r6,D2         ;check reg is equal to 6
000042BC  6700 003E               5002                                              BEQ        ASD_An_indir_pdec_r7_out               ;if equal go to output subroutine
000042C0  6600 2EE8               5003                                              BNE        ERROR                                        :if ASD equal to an addresssing mode, pritn error
000042C4                          5004  
000042C4                          5005  
000042C4                          5006  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000042C4  227C 0000852C           5007  ASD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
000042CA                          5008                                                  
000042CA  4E75                    5009                                              RTS                                                     ;return to subroutine
000042CC                          5010  
000042CC  227C 00008532           5011  ASD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
000042D2                          5012                                                  
000042D2  4E75                    5013                                              RTS                                                     ;return to subroutine
000042D4                          5014                                                      
000042D4  227C 00008538           5015  ASD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
000042DA                          5016                                                  
000042DA  4E75                    5017                                              RTS                                                     ;return to subroutine
000042DC                          5018  
000042DC  227C 0000853E           5019  ASD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
000042E2                          5020                                                  
000042E2  4E75                    5021                                              RTS                                                     ;return to subroutine
000042E4                          5022  
000042E4  227C 00008544           5023  ASD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
000042EA                          5024                                                  
000042EA  4E75                    5025                                              RTS                                                     ;return to subroutine
000042EC                          5026      
000042EC  227C 0000854A           5027  ASD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
000042F2                          5028                                                  
000042F2  4E75                    5029                                              RTS                                                     ;return to subroutine
000042F4                          5030      
000042F4  227C 00008550           5031  ASD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
000042FA                          5032                                                  
000042FA  4E75                    5033                                              RTS                                                     ;return to subroutine
000042FC                          5034  
000042FC  227C 00008556           5035  ASD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
00004302                          5036                                                  
00004302  4E75                    5037                                              RTS                                                     ;return to subroutine
00004304                          5038  
00004304                          5039                                                      
00004304                          5040  ;------------------Absolute Addressing Output-----------------------
00004304  22FC 00008566           5041  ASD_abs_add_word_out                      MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000430A  22C5                    5042                                           MOVE.L      D5,(A1)+                           ;load address                  
0000430C                          5043                                                  
0000430C  4E75                    5044                                           RTS                                            :return to subroutine
0000430E                          5045                                             
0000430E                          5046  
0000430E  2A18                    5047  ASD_abs_add_long_out                      MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00004310  22FC 00008566           5048                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004316  22C5                    5049                                           MOVE.L      D5,(A1)+                           ;load address                  
00004318                          5050                                                  
00004318  4E75                    5051                                           RTS                                            :return to subroutine                                            
0000431A                          5052  ;----------------------Error Handling----------------------------------------
0000431A                          5053                                         ;return to subroutine
0000431A                          5054                                                  
0000431A                          5055  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
0000431A                          5056  ; determine if the shift is a data register or a immediate value
0000431A  4241                    5057  ASD_reg_shift                       CLR         D1                              ;clear D1
0000431C  C2BC 00000020           5058                                      AND.L       #mask_ASD_reg_shift_ir,D1           ;load the mask into D1
00004322  B2BC 00000020           5059                                      CMP.L       #match_ASD_shift_reg,D1             ;check to see if the shift is a data register
00004328  6700 0006               5060                                       BEQ         ASD_shift_reg                       ;if the shift is a register, go to subroutine
0000432C  6600 007A               5061                                      BNE         ASD_count_val                       ;if ASD go to immediate value subroutine
00004330                          5062  
00004330                          5063  ;i/r = 1, the shift is a Data register                                    
00004330                          5064  ; this the subroutine for the data register shift
00004330  4241                    5065  ASD_shift_reg                           CLR         D1                              ;clear D1
00004332  C2BC 00000020           5066                                          AND.L       #mask_ASD_reg_shift,D1              ;load mask into D1 for bits 11-9
00004338                          5067  
00004338  B2BC 00000000           5068  ASD_count_reg0                          CMP.L       #match_ASD_count_reg0,D1            ;check to see if count/shift = 0
0000433E  6600 0006               5069                                          BNE         ASD_count_reg1                    ;if ASD go check 1
00004342  6700 0134               5070                                          BEQ         ASD_count_reg0_out                ;got to output
00004346                          5071                                      
00004346  B2BC 00000200           5072  ASD_count_reg1                          CMP.L       #match_ASD_count_reg1,D1            ;check to see if count/shift = 1
0000434C  6600 0006               5073                                          BNE         ASD_count_reg2                    ;if ASD go check 2
00004350  6700 0132               5074                                          BEQ         ASD_count_reg1_out                ;got to output
00004354                          5075  
00004354  B2BC 00000400           5076  ASD_count_reg2                          CMP.L       #match_ASD_count_reg2,D1            ;check to see if count/shift = 2
0000435A  6600 0006               5077                                          BNE         ASD_count_reg3                    ;if ASD go check 3
0000435E  6700 0130               5078                                          BEQ         ASD_count_reg2_out                ;got to output
00004362                          5079  
00004362  B2BC 00000600           5080  ASD_count_reg3                          CMP.L       #match_ASD_count_reg3,D1            ;check to see if count/shift = 3
00004368  6600 0006               5081                                          BNE         ASD_count_reg4                    ;if ASD go check 4
0000436C  6700 012E               5082                                          BEQ         ASD_count_reg3_out                ;got to output
00004370                          5083  
00004370  B2BC 00000800           5084  ASD_count_reg4                          CMP.L       #match_ASD_count_reg4,D1            ;check to see if count/shift = 4
00004376  6600 0006               5085                                          BNE         ASD_count_reg5                    ;if ASD go check 5
0000437A  6700 012C               5086                                          BEQ         ASD_count_reg4_out                ;got to output
0000437E                          5087    
0000437E  B2BC 00000A00           5088  ASD_count_reg5                          CMP.L       #match_ASD_count_reg5,D1            ;check to see if count/shift = 5
00004384  6600 0006               5089                                          BNE         ASD_count_reg6                      ;if ASD go check 6
00004388  6700 012A               5090                                          BEQ         ASD_count_reg5_out                  ;got to output
0000438C                          5091  
0000438C  B2BC 00000C00           5092  ASD_count_reg6                          CMP.L       #match_ASD_count_reg6,D1            ;check to see if count/shift = 6
00004392  6600 0006               5093                                          BNE         ASD_count_reg7                      ;if ASD go check 7
00004396  6700 0128               5094                                          BEQ         ASD_count_reg6_out                  ;got to output
0000439A                          5095  
0000439A  B2BC 00000E00           5096  ASD_count_reg7                          CMP.L       #match_ASD_count_reg7,D1            ;check to see if count/shift = 7
000043A0  6600 2E08               5097                                          BNE         ERROR                           ; if none of the registers, then print error message
000043A4  6700 0126               5098                                          BEQ         ASD_count_reg7_out                  ;got to output
000043A8                          5099  
000043A8                          5100  
000043A8                          5101  
000043A8                          5102  ;i/r = 0, the shift is an immediate value
000043A8                          5103  ;1-7 = 1-7
000043A8                          5104  ;0 = 8
000043A8                          5105  ; this is the subroutine for the immedite value shift
000043A8  B2BC 00000000           5106  ASD_count_val                       CMP.L       #match_ASD_count_val0,D1          ;check to see if shift count is 0
000043AE  6600 0006               5107                                      BNE         ASD_count_val1                    ;if ASD 0 check 1
000043B2  6700 0064               5108                                      BEQ         ASD_count_val0_out                ;if 0 got to output
000043B6                          5109  
000043B6  B2BC 00000200           5110  ASD_count_val1                      CMP.L       #match_ASD_count_val1,D1          ;check to see if shift count is 0
000043BC  6600 0006               5111                                      BNE         ASD_count_val2                    ;if ASD 0 check 1
000043C0  6700 0062               5112                                      BEQ         ASD_count_val1_out                ;if 0 got to output
000043C4                          5113  
000043C4  B2BC 00000400           5114  ASD_count_val2                      CMP.L       #match_ASD_count_val2,D1          ;check to see if shift count is 0
000043CA  6600 0006               5115                                      BNE         ASD_count_val3                    ;if ASD 0 check 1
000043CE  6700 0060               5116                                      BEQ         ASD_count_val2_out                ;if 0 got to output
000043D2                          5117  
000043D2  B2BC 00000600           5118  ASD_count_val3                      CMP.L       #match_ASD_count_val3,D1          ;check to see if shift count is 0
000043D8  6600 0006               5119                                      BNE         ASD_count_val4                    ;if ASD 0 check 1
000043DC  6700 005E               5120                                      BEQ         ASD_count_val3_out                ;if 0 got to output
000043E0                          5121  
000043E0  B2BC 00000800           5122  ASD_count_val4                      CMP.L       #match_ASD_count_val4,D1          ;check to see if shift count is 0
000043E6  6600 0006               5123                                      BNE         ASD_count_val5                    ;if ASD 0 check 1
000043EA  6700 005C               5124                                      BEQ         ASD_count_val4_out                ;if 0 got to output
000043EE                          5125  
000043EE  B2BC 00000A00           5126  ASD_count_val5                      CMP.L       #match_ASD_count_val5,D1          ;check to see if shift count is 0
000043F4  6600 0006               5127                                      BNE         ASD_count_val6                    ;if ASD 0 check 1
000043F8  6700 005A               5128                                      BEQ         ASD_count_val5_out                ;if 0 got to output
000043FC                          5129  
000043FC  B2BC 00000C00           5130  ASD_count_val6                      CMP.L       #match_ASD_count_val6,D1          ;check to see if shift count is 0
00004402  6600 0006               5131                                      BNE         ASD_count_val7                    ;if ASD 0 check 1
00004406  6700 0058               5132                                      BEQ         ASD_count_val6_out                ;if 0 got to output
0000440A                          5133  
0000440A  B2BC 00000E00           5134  ASD_count_val7                      CMP.L       #match_ASD_count_val7,D1          ;check to see if shift count is 0
00004410  6600 2D98               5135                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
00004414  6700 0056               5136                                      BEQ         ASD_count_val7_out                ;if 0 got to output
00004418                          5137  
00004418                          5138  ;-----------------------------------Count Shift Immedite Value Output---------------------------
00004418  227C 000084C4           5139  ASD_count_val0_out                MOVE.L            #ea_val0,A1             ;load string constant into A1
0000441E  4EB9 000044D8           5140                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004424                          5141                                
00004424  227C 000084C6           5142  ASD_count_val1_out                MOVE.L            #ea_val1,A1             ;load string constant into A1
0000442A  4EB9 000044D8           5143                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004430                          5144  
00004430  227C 000084C8           5145  ASD_count_val2_out                MOVE.L            #ea_val2,A1             ;load string constant into A1
00004436  4EB9 000044D8           5146                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
0000443C                          5147  
0000443C  227C 000084CA           5148  ASD_count_val3_out                MOVE.L            #ea_val3,A1             ;load string constant into A1
00004442  4EB9 000044D8           5149                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004448                          5150  
00004448  227C 000084CC           5151  ASD_count_val4_out                MOVE.L            #ea_val4,A1             ;load string constant into A1
0000444E  4EB9 000044D8           5152                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004454                          5153      
00004454  227C 000084CE           5154  ASD_count_val5_out                MOVE.L            #ea_val5,A1             ;load string constant into A1
0000445A  4EB9 000044D8           5155                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004460                          5156  
00004460  227C 000084D0           5157  ASD_count_val6_out                MOVE.L            #ea_val6,A1             ;load string constant into A1
00004466  4EB9 000044D8           5158                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
0000446C                          5159  
0000446C  227C 000084D2           5160  ASD_count_val7_out                MOVE.L            #ea_val7,A1             ;load string constant into A1
00004472  4EB9 000044D8           5161                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004478                          5162  
00004478                          5163  ;-------------------------Count Shift Output (Dn)-----------------------------------------
00004478  227C 00008494           5164  ASD_count_reg0_out                MOVE.L            #ea_D0,A1           ;load string constant into A1
0000447E  4EB9 000044D8           5165                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004484                          5166                                
00004484  227C 00008497           5167  ASD_count_reg1_out                MOVE.L            #ea_D1,A1           ;load string constant into A1
0000448A  4EB9 000044D8           5168                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004490                          5169                                
00004490  227C 0000849A           5170  ASD_count_reg2_out                MOVE.L            #ea_D2,A1           ;load string constant into A1
00004496  4EB9 000044D8           5171                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
0000449C                          5172                                
0000449C  227C 0000849D           5173  ASD_count_reg3_out                MOVE.L            #ea_D3,A1           ;load string constant into A1
000044A2  4EB9 000044D8           5174                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000044A8                          5175                                
000044A8  227C 000084A0           5176  ASD_count_reg4_out                MOVE.L            #ea_D4,A1           ;load string constant into A1
000044AE  4EB9 000044D8           5177                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000044B4                          5178                                
000044B4  227C 000084A3           5179  ASD_count_reg5_out                MOVE.L            #ea_D5,A1           ;load string constant into A1
000044BA  4EB9 000044D8           5180                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000044C0                          5181                                
000044C0  227C 000084A6           5182  ASD_count_reg6_out                MOVE.L            #ea_D6,A1           ;load string constant into A1
000044C6  4EB9 000044D8           5183                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000044CC                          5184                                
000044CC  227C 000084A9           5185  ASD_count_reg7_out                MOVE.L            #ea_D7,A1           ;load string constant into A1
000044D2  4EB9 000044D8           5186                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand                                    
000044D8                          5187                                      
000044D8                          5188                                      
000044D8                          5189  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
000044D8  4241                    5190  ASD_Dn0                         CLR             D1                  ;clear D1
000044DA  C2BC 00000007           5191                                  AND.L           #mask_ASD_data_reg,D1   ;load data register mask for second operand
000044E0                          5192                                  
000044E0  B2BC 00000000           5193                                  CMP.L           #match_ASD_D_reg0,D1          ;check if data register is D0
000044E6  6700 0068               5194                                  BEQ             ASD_D0_out              ;if equal got to output subroutine
000044EA  6600 0002               5195                                  BNE             ASD_Dn1                 ;if ASD check D1
000044EE                          5196                                  
000044EE  B2BC 00000001           5197  ASD_Dn1                         CMP.L           #match_ASD_D_reg1,D1          ;check if data register is D0
000044F4  6700 0062               5198                                  BEQ             ASD_D1_out              ;if equal got to output subroutine
000044F8  6600 0002               5199                                  BNE             ASD_Dn2                 ;if ASD check D2
000044FC                          5200  
000044FC  B2BC 00000002           5201  ASD_Dn2                         CMP.L           #match_ASD_D_reg2,D1          ;check if data register is D0
00004502  6700 005C               5202                                  BEQ             ASD_D2_out              ;if equal got to output subroutine
00004506  6600 0002               5203                                  BNE             ASD_Dn3                 ;if ASD check D3
0000450A                          5204  
0000450A  B2BC 00000003           5205  ASD_Dn3                         CMP.L           #match_ASD_D_reg3,D1          ;check if data register is D0
00004510  6700 0056               5206                                  BEQ             ASD_D3_out              ;if equal got to output subroutine
00004514  6600 0002               5207                                  BNE             ASD_Dn4                 ;if ASD check D4
00004518                          5208  
00004518  B2BC 00000004           5209  ASD_Dn4                         CMP.L           #match_ASD_D_reg4,D1          ;check if data register is D0
0000451E  6700 0050               5210                                  BEQ             ASD_D4_out              ;if equal got to output subroutine
00004522  6600 0002               5211                                  BNE             ASD_Dn5                 ;if ASD check D5
00004526                          5212  
00004526  B2BC 00000005           5213  ASD_Dn5                         CMP.L           #match_ASD_D_reg5,D1          ;check if data register is D0
0000452C  6700 004A               5214                                  BEQ             ASD_D5_out              ;if equal got to output subroutine
00004530  6600 0002               5215                                  BNE             ASD_Dn6                 ;if ASD check D6
00004534                          5216  
00004534  B2BC 00000006           5217  ASD_Dn6                         CMP.L           #match_ASD_D_reg6,D1          ;check if data register is D0
0000453A  6700 0044               5218                                  BEQ             ASD_D6_out              ;if equal got to output subroutine
0000453E  6600 0002               5219                                  BNE             ASD_Dn7                 ;if ASD check D7
00004542                          5220  
00004542  B2BC 00000007           5221  ASD_Dn7                         CMP.L           #match_ASD_D_reg7,D1          ;check if data register is D0
00004548  6700 003E               5222                                  BEQ             ASD_D7_out              ;if equal got to output subroutine
0000454C  6600 2C5C               5223                                  BNE             ERROR               :if none of the registers go to error sub routine
00004550                          5224                                  
00004550                          5225                                  
00004550                          5226  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
00004550  227C 00008494           5227  ASD_D0_out                        MOVE.L            #ea_D0,A1           ;load string constant into A1
00004556                          5228                                                  
00004556  4E75                    5229                                   RTS                                    ;return to subroutine
00004558                          5230  
00004558  227C 00008497           5231  ASD_D1_out                        MOVE.L            #ea_D1,A1           ;load string constant into A1
0000455E                          5232                                                  
0000455E  4E75                    5233                                    RTS                                   ;return to subroutine
00004560                          5234  
00004560  227C 0000849A           5235  ASD_D2_out                        MOVE.L            #ea_D2,A1           ;load string constant into A1
00004566                          5236                                                  
00004566  4E75                    5237                                    RTS                                   ;return to subroutine
00004568                          5238              
00004568  227C 0000849D           5239  ASD_D3_out                        MOVE.L            #ea_D3,A1           ;load string constant into A1
0000456E                          5240                                                  
0000456E  4E75                    5241                                    RTS                                   ;return to subroutine
00004570                          5242  
00004570  227C 000084A0           5243  ASD_D4_out                        MOVE.L            #ea_D4,A1           ;load string constant into A1
00004576                          5244                                                  
00004576  4E75                    5245                                    RTS                                   ;return to subroutine
00004578                          5246  
00004578  227C 000084A3           5247  ASD_D5_out                        MOVE.L            #ea_D5,A1           ;load string constant into A1
0000457E                          5248                                                  
0000457E  4E75                    5249                                    RTS                                   ;return to subroutine
00004580                          5250  
00004580  227C 000084A6           5251  ASD_D6_out                        MOVE.L            #ea_D6,A1           ;load string constant into A1
00004586                          5252                                                  
00004586  4E75                    5253                                    RTS                                   ;return to subroutine
00004588                          5254  
00004588  227C 000084A9           5255  ASD_D7_out                        MOVE.L            #ea_D7,A1           ;load string constant into A1
0000458E                          5256                                                  
0000458E  4E75                    5257                                    RTS                                   ;return to subroutine
00004590                          5258  
00004590                          5259  
00004590                          5260                                      
00004590  =000000C0               5261  mask_ASD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
00004590  =00000038               5262  mask_ASD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
00004590  =0000003F               5263  mask_ASD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
00004590  =0000003F               5264  mask_ASD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
00004590  =00000020               5265  mask_ASD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
00004590  =00000E00               5266  mask_ASD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
00004590  =00000020               5267  mask_ASD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
00004590  =00000007               5268  mask_ASD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
00004590                          5269  
00004590  =00000000               5270  match_ASD_D_reg0                                EQU             $0000               ;match for second operand data register 0
00004590  =00000001               5271  match_ASD_D_reg1                                EQU             $0001               ;match for second operand data register 1
00004590  =00000002               5272  match_ASD_D_reg2                                EQU             $0002               ;match for second operand data register 2
00004590  =00000003               5273  match_ASD_D_reg3                                EQU             $0003               ;match for second operand data register 3
00004590  =00000004               5274  match_ASD_D_reg4                                EQU             $0004               ;match for second operand data register 4
00004590  =00000005               5275  match_ASD_D_reg5                                EQU             $0005               ;match for second operand data register 5
00004590  =00000006               5276  match_ASD_D_reg6                                EQU             $0006               ;match for second operand data register 6
00004590  =00000007               5277  match_ASD_D_reg7                                EQU             $0007               ;match for second operand data register 7
00004590                          5278  
00004590  =00000000               5279  match_ASD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
00004590  =00000200               5280  match_ASD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
00004590  =00000400               5281  match_ASD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
00004590  =00000600               5282  match_ASD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
00004590  =00000800               5283  match_ASD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
00004590  =00000A00               5284  match_ASD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
00004590  =00000C00               5285  match_ASD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
00004590  =00000E00               5286  match_ASD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
00004590                          5287  
00004590  =00000020               5288  match_ASD_shift_reg                             EQU             $0020               ;match to for a register shift
00004590  =00000000               5289  match_ASD_count_val0                            EQU             $0000               ;match for shift reg 0
00004590  =00000200               5290  match_ASD_count_val1                           EQU             $0200               ;match for shift reg 1
00004590  =00000400               5291  match_ASD_count_val2                            EQU             $0400               ;match for shift reg 2
00004590  =00000600               5292  match_ASD_count_val3                            EQU             $0600               ;match for shift reg 3
00004590  =00000800               5293  match_ASD_count_val4                            EQU             $0800               ;match for shift reg 4
00004590  =00000A00               5294  match_ASD_count_val5                            EQU             $0A00               ;match for shift reg 5
00004590  =00000C00               5295  match_ASD_count_val6                            EQU             $0C00               ;match for shift reg 6
00004590  =00000E00               5296  match_ASD_count_val7                            EQU             $0E00               ;match for shift reg 7
00004590                          5297  
00004590  =00000020               5298  match_ASD_shift_count                           EQU             $0020
00004590  =000000C0               5299  match_ASD_mem_shift                         EQU             $00C0              ;match for memory shift
00004590  =00000010               5300  match_ASD_An_indir                          EQU             $0010              ;match for add reg indir
00004590  =00000020               5301  match_ASD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
00004590  =00000018               5302  match_ASD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
00004590  =00000039               5303  match_ASD_abs_add_word                      EQU             $0039              ;match for word abs add 
00004590  =0000003C               5304  match_ASD_abs_add_long                      EQU             $003C              ;match for long abs add
00004590                          5305  
00004590                          5306  
00004590  =00000010               5307  match_ASD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
00004590  =00000011               5308  match_ASD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
00004590  =00000012               5309  match_ASD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
00004590  =00000013               5310  match_ASD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
00004590  =00000014               5311  match_ASD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
00004590  =00000015               5312  match_ASD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
00004590  =00000016               5313  match_ASD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
00004590  =00000017               5314  match_ASD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
00004590                          5315  
00004590                          5316  
00004590  =00000020               5317  match_ASD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
00004590  =00000021               5318  match_ASD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
00004590  =00000022               5319  match_ASD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
00004590  =00000023               5320  match_ASD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
00004590  =00000024               5321  match_ASD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
00004590  =00000025               5322  match_ASD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
00004590  =00000026               5323  match_ASD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
00004590  =00000027               5324  match_ASD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
00004590                          5325  
00004590                          5326  
00004590                          5327  
00004590  =00000018               5328  match_ASD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
00004590  =00000019               5329  match_ASD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
00004590  =0000001A               5330  match_ASD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
00004590  =0000001B               5331  match_ASD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
00004590  =0000001C               5332  match_ASD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
00004590  =0000001D               5333  match_ASD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
00004590  =0000001E               5334  match_ASD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
00004590  =0000001F               5335  match_ASD_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
00004590                          5336  
00004590                          5337  
00004590                          5338  
00004590                          5339  
00004590                          5340  
00004590                          5341  
00004590                          5342  
00004590                          5343  
00004590                          5344  -------------------- end include --------------------
00004590                          5345              INCLUDE 'JSR Subroutine.x68'
00004590                          5346  
00004590                          5347     
00004590                          5348  JSR_sub                                                            ;preserve the registers, 
00004590  C2BC 00000038           5349                                   AND.L             #mask_JSR_ea_mode,D1                                   ;move the mask to D1
00004596                          5350  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004596  B2BC 00000010           5351  JSR_add_reg_indir                CMP.L             #match_JSR_An_indir,D1                       ;check to see if mode is add reg indir
0000459C  6600 0006               5352                                   BNE               JSR_abs_add_word                                 ;if not, go check add reg indir predec 
000045A0  6700 0026               5353                                   BEQ               JSR_An_indir_reg                                  ;if equal go figure out the register           
000045A4                          5354             
000045A4  C4BC 0000003F           5355  JSR_abs_add_word                 AND.L             #mask_JSR_abs_add,D2                          ;load mask to determine if abs add word or long
000045AA                          5356                                   
000045AA  B4BC 00000038           5357                                   CMP.L             #match_JSR_abs_add_word,D2                    ;check if abs add word
000045B0  2A18                    5358                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address 
000045B2  6600 0006               5359                                   BNE               JSR_abs_add_long                                  ;if not go check abs add long
000045B6  6700 00C6               5360                                   BEQ               JSR_abs_add_word_out                              ;if equal go to output
000045BA                          5361    
000045BA  B4BC 00000039           5362  JSR_abs_add_long                 CMP.L             #match_JSR_abs_add_long,D2                     ;check to see if abs add long
000045C0  6700 00C6               5363                                   BEQ               JSR_abs_add_long_out                               ;if equal go to output
000045C4  6600 2BE4               5364                                   BNE               ERROR                                         ;if not equal go to error mesage sub routine
000045C8                          5365  
000045C8                          5366  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000045C8                          5367                                   
000045C8                          5368                       
000045C8                          5369  ;------------------Address Register Indirect-----------------------
000045C8  C4BC 0000003F           5370  JSR_An_indir_reg                 AND.L           #mask_JSR_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
000045CE  B4BC 00000010           5371                                   CMP.L           #match_JSR_An_indir_r0,D2              ;check reg is equal to 0
000045D4  6600 0006               5372                                   BNE             JSR_An_indir_reg1                           ;if not try reg 1
000045D8  6700 0064               5373                                   BEQ             JSR_An_indir_reg0_out                       ;if equal go to output subroutine
000045DC                          5374  
000045DC  B4BC 00000011           5375  JSR_An_indir_reg1                CMP.L           #match_JSR_An_indir_r1,D2              ;check reg is equal to 1
000045E2  6600 0006               5376                                   BNE             JSR_An_indir_reg2                           ;if not try reg 2
000045E6  6700 005E               5377                                   BEQ             JSR_An_indir_reg1_out                       ;if equal go to output subroutine
000045EA                          5378  
000045EA  B4BC 00000012           5379  JSR_An_indir_reg2                CMP.L           #match_JSR_An_indir_r2,D2              ;check reg is equal to 2
000045F0  6600 0006               5380                                   BNE             JSR_An_indir_reg3                           ;if not try reg 3
000045F4  6700 0058               5381                                   BEQ             JSR_An_indir_reg2_out                       ;if equal go to output subroutine
000045F8                          5382  
000045F8  B4BC 00000013           5383  JSR_An_indir_reg3                CMP.L           #match_JSR_An_indir_r3,D2              ;check reg is equal to 3
000045FE  6600 0006               5384                                   BNE             JSR_An_indir_reg4                           ;if not try reg 4
00004602  6700 0052               5385                                   BEQ             JSR_An_indir_reg3_out                       ;if equal go to output subroutine
00004606                          5386      
00004606  B4BC 00000014           5387  JSR_An_indir_reg4                CMP.L           #match_JSR_An_indir_r4,D2              ;check reg is equal to 4
0000460C  6600 0006               5388                                   BNE             JSR_An_indir_reg5                           ;if not try reg 5
00004610  6700 004C               5389                                   BEQ             JSR_An_indir_reg4_out                       ;if equal go to output subroutine
00004614                          5390          
00004614  B4BC 00000015           5391  JSR_An_indir_reg5                CMP.L           #match_JSR_An_indir_r5,D2              ;check reg is equal to 5
0000461A  6600 0006               5392                                   BNE             JSR_An_indir_reg6                           ;if not try reg 6
0000461E  6700 0046               5393                                   BEQ             JSR_An_indir_reg5_out                       ;if equal go to output subroutine
00004622                          5394  
00004622  B4BC 00000016           5395  JSR_An_indir_reg6                CMP.L           #match_JSR_An_indir_r6,D2              ;check reg is equal to 6
00004628  6600 0006               5396                                   BNE             JSR_An_indir_reg7                           ;if not try reg 7
0000462C  6700 0040               5397                                   BEQ             JSR_An_indir_reg6_out                       ;if equal go to output subroutine
00004630                          5398  
00004630  B4BC 00000017           5399  JSR_An_indir_reg7                CMP.L           #match_JSR_An_indir_r7,D2              ;check reg is equal to 7
00004636  6700 003E               5400                                   BEQ             JSR_An_indir_reg7_out                       ;if equal go to output subroutine
0000463A  6600 2B6E               5401                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
0000463E                          5402  
0000463E                          5403  ;--------------------Address Register Indirect Output-----------------------
0000463E  227C 000084D4           5404  JSR_An_indir_reg0_out                       MOVE.L          #ea_indir_A0,A1                 ;load string constant into A1
00004644                          5405                                                                                              
00004644  4E75                    5406                                              RTS                                                 ;return to subroutine
00004646                          5407  
00004646  227C 000084D9           5408  JSR_An_indir_reg1_out                       MOVE.L          #ea_indir_A1,A1                 ;load string constant into A1
0000464C                          5409                                                  
0000464C  4E75                    5410                                              RTS                                                 ;return to subroutine
0000464E                          5411  
0000464E  227C 000084DE           5412  JSR_An_indir_reg2_out                       MOVE.L          #ea_indir_A2,A1                 ;load string constant into A1
00004654                          5413                                                  
00004654  4E75                    5414                                              RTS                                                 ;return to subroutine
00004656                          5415  
00004656  227C 000084E3           5416  JSR_An_indir_reg3_out                       MOVE.L          #ea_indir_A3,A1                 ;load string constant into A1
0000465C                          5417                                                  
0000465C  4E75                    5418                                              RTS                                                 ;return to subroutine
0000465E                          5419  
0000465E  227C 000084E8           5420  JSR_An_indir_reg4_out                       MOVE.L          #ea_indir_A4,A1                 ;load string constant into A1
00004664                          5421                                                  
00004664  4E75                    5422                                              RTS                                                 ;return to subroutine
00004666                          5423  
00004666  227C 000084ED           5424  JSR_An_indir_reg5_out                       MOVE.L          #ea_indir_A5,A1                 ;load string constant into A1
0000466C                          5425                                                  
0000466C  4E75                    5426                                              RTS                                                 ;return to subroutine
0000466E                          5427  
0000466E  227C 000084F2           5428  JSR_An_indir_reg6_out                       MOVE.L          #ea_indir_A6,A1                 ;load string constant into A1
00004674                          5429                                                  
00004674  4E75                    5430                                              RTS                                                 ;return to subroutine
00004676                          5431                                          
00004676  227C 000084F7           5432  JSR_An_indir_reg7_out                       MOVE.L          #ea_indir_A7,A1                 ;load string constant into A1
0000467C                          5433                                                  
0000467C  4E75                    5434                                              RTS                                                 ;return to subroutine
0000467E                          5435  
0000467E                          5436  ;------------------Absolute Addressing Output-----------------------
0000467E  22FC 00008566           5437  JSR_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00004684  22C5                    5438                                           MOVE.L      D5,(A1)+                           ;load address                  
00004686                          5439                                                  
00004686  4E75                    5440                                           RTS                                            :return to subroutine
00004688                          5441                                             
00004688                          5442  
00004688  2A18                    5443  JSR_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000468A  22FC 00008566           5444                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004690  22C5                    5445                                           MOVE.L      D5,(A1)+                           ;load address                  
00004692                          5446                                                  
00004692  4E75                    5447                                           RTS                                            :return to subroutine                                            
00004694                          5448  
00004694                          5449  
00004694  =00000038               5450  mask_JSR_ea_mode                        EQU         $0038
00004694  =0000003F               5451  mask_JSR_abs_add                        EQU         $003F
00004694  =0000003F               5452  mask_JSR_ea_reg_and_mode                EQU         $003F
00004694  =00000E00               5453  mask_JSR_An_reg                     EQU         $0E00
00004694                          5454  
00004694  =00000000               5455  match_JSR_Dn                            EQU         $0000
00004694  =00000010               5456  match_JSR_An_indir                  EQU         $0010
00004694  =00000038               5457  match_JSR_abs_add_word              EQU         $0038
00004694  =00000039               5458  match_JSR_abs_add_long              EQU         $0039
00004694                          5459  
00004694  =00000000               5460  match_JSR_D0                            EQU         $0000
00004694  =00000001               5461  match_JSR_D1                            EQU         $0001
00004694  =00000002               5462  match_JSR_D2                            EQU         $0002
00004694  =00000003               5463  match_JSR_D3                            EQU         $0003
00004694  =00000004               5464  match_JSR_D4                            EQU         $0004
00004694  =00000005               5465  match_JSR_D5                            EQU         $0005
00004694  =00000006               5466  match_JSR_D6                            EQU         $0006
00004694  =00000007               5467  match_JSR_D7                            EQU         $0007
00004694                          5468  
00004694  =00000010               5469  match_JSR_An_indir_r0               EQU         $0010
00004694  =00000011               5470  match_JSR_An_indir_r1               EQU         $0011
00004694  =00000012               5471  match_JSR_An_indir_r2               EQU         $0012
00004694  =00000013               5472  match_JSR_An_indir_r3               EQU         $0013
00004694  =00000014               5473  match_JSR_An_indir_r4               EQU         $0014
00004694  =00000015               5474  match_JSR_An_indir_r5               EQU         $0015
00004694  =00000016               5475  match_JSR_An_indir_r6               EQU         $0016
00004694  =00000017               5476  match_JSR_An_indir_r7               EQU         $0017
00004694                          5477  
00004694                          5478  
00004694                          5479  
00004694                          5480  
00004694                          5481  
00004694                          5482  
00004694                          5483  -------------------- end include --------------------
00004694                          5484              INCLUDE 'LEA Subroutine.x68'
00004694                          5485  
00004694                          5486     
00004694                          5487  LEA_sub                                             ;preserve the registers, 
00004694  C2BC 00000038           5488                                   AND.L             #mask_LEA_ea_mode,D1                         ;move the mask to D1
0000469A                          5489  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000469A  B2BC 00000010           5490  LEA_add_reg_indir                CMP.L             #match_LEA_An_indir,D1                       ;check to see if mode is add reg indir
000046A0  6600 0006               5491                                   BNE               LEA_abs_add_word                             ;if not, go check add reg indir predec 
000046A4  6700 0026               5492                                   BEQ               LEA_An_indir_reg                             ;if equal go figure out the register           
000046A8                          5493             
000046A8  C4BC 0000003F           5494  LEA_abs_add_word                 AND.L             #mask_LEA_abs_add,D2                         ;load mask to determine if abs add word or long
000046AE                          5495                                   
000046AE  B4BC 00000038           5496                                   CMP.L             #match_LEA_abs_add_word,D2                   ;check if abs add word
000046B4  2A18                    5497                                   MOVE.L            (A0)+,D5                                     ;pull the next word instruction that holds the address
000046B6  6600 0006               5498                                   BNE               LEA_abs_add_long                             ;if not go check abs add long
000046BA  6700 00E6               5499                                   BEQ               LEA_abs_add_word_out                         ;if equal go to output
000046BE                          5500    
000046BE  B4BC 00000039           5501  LEA_abs_add_long                 CMP.L             #match_LEA_abs_add_long,D2                   ;check to see if abs add long
000046C4  6700 00EA               5502                                   BEQ               LEA_abs_add_long_out                         ;if equal go to output
000046C8  6600 2AE0               5503                                   BNE               ERROR                                        ;if not equal go to error mesage sub routine
000046CC                          5504  
000046CC                          5505  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000046CC                          5506                                  
000046CC                          5507                                 
000046CC                          5508  ;------------------Address Register Indirect-----------------------
000046CC  C4BC 0000003F           5509  LEA_An_indir_reg                 AND.L           #mask_LEA_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register 
000046D2  B4BC 00000010           5510                                   CMP.L           #match_LEA_An_indir_r0,D2              ;check reg is equal to 0
000046D8  6600 0006               5511                                   BNE             LEA_An_indir_reg1                           ;if not try reg 1
000046DC  6700 0064               5512                                   BEQ             LEA_An_indir_reg0_out                       ;if equal go to output subroutine
000046E0                          5513  
000046E0  B4BC 00000011           5514  LEA_An_indir_reg1                CMP.L           #match_LEA_An_indir_r1,D2              ;check reg is equal to 1
000046E6  6600 0006               5515                                   BNE             LEA_An_indir_reg2                           ;if not try reg 2
000046EA  6700 0062               5516                                   BEQ             LEA_An_indir_reg1_out                       ;if equal go to output subroutine
000046EE                          5517  
000046EE  B4BC 00000012           5518  LEA_An_indir_reg2                CMP.L           #match_LEA_An_indir_r2,D2              ;check reg is equal to 2
000046F4  6600 0006               5519                                   BNE             LEA_An_indir_reg3                           ;if not try reg 3
000046F8  6700 0060               5520                                   BEQ             LEA_An_indir_reg2_out                       ;if equal go to output subroutine
000046FC                          5521  
000046FC  B4BC 00000013           5522  LEA_An_indir_reg3                CMP.L           #match_LEA_An_indir_r3,D2              ;check reg is equal to 3
00004702  6600 0006               5523                                   BNE             LEA_An_indir_reg4                           ;if not try reg 4
00004706  6700 005E               5524                                   BEQ             LEA_An_indir_reg3_out                       ;if equal go to output subroutine
0000470A                          5525      
0000470A  B4BC 00000014           5526  LEA_An_indir_reg4                CMP.L           #match_LEA_An_indir_r4,D2              ;check reg is equal to 4
00004710  6600 0006               5527                                   BNE             LEA_An_indir_reg5                           ;if not try reg 5
00004714  6700 005C               5528                                   BEQ             LEA_An_indir_reg4_out                       ;if equal go to output subroutine
00004718                          5529          
00004718  B4BC 00000015           5530  LEA_An_indir_reg5                CMP.L           #match_LEA_An_indir_r5,D2              ;check reg is equal to 5
0000471E  6600 0006               5531                                   BNE             LEA_An_indir_reg6                           ;if not try reg 6
00004722  6700 005A               5532                                   BEQ             LEA_An_indir_reg5_out                       ;if equal go to output subroutine
00004726                          5533  
00004726  B4BC 00000016           5534  LEA_An_indir_reg6                CMP.L           #match_LEA_An_indir_r6,D2              ;check reg is equal to 6
0000472C  6600 0006               5535                                   BNE             LEA_An_indir_reg7                           ;if not try reg 7
00004730  6700 0058               5536                                   BEQ             LEA_An_indir_reg6_out                       ;if equal go to output subroutine
00004734                          5537  
00004734  B4BC 00000017           5538  LEA_An_indir_reg7                CMP.L           #match_LEA_An_indir_r7,D2              ;check reg is equal to 7
0000473A  6700 005A               5539                                   BEQ             LEA_An_indir_reg7_out                       ;if equal go to output subroutine
0000473E  6600 2A6A               5540                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00004742                          5541  
00004742                          5542  ;--------------------Address Register Indirect Output-----------------------
00004742  227C 000084D4           5543  LEA_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00004748  4EB9 000047C0           5544                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000474E                          5545  
0000474E  227C 000084D9           5546  LEA_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00004754  4EB9 000047C0           5547                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000475A                          5548  
0000475A  227C 000084DE           5549  LEA_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00004760  4EB9 000047C0           5550                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004766                          5551  
00004766  227C 000084E3           5552  LEA_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
0000476C  4EB9 000047C0           5553                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004772                          5554  
00004772  227C 000084E8           5555  LEA_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00004778  4EB9 000047C0           5556                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000477E                          5557  
0000477E  227C 000084ED           5558  LEA_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00004784  4EB9 000047C0           5559                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000478A                          5560  
0000478A  227C 000084F2           5561  LEA_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00004790  4EB9 000047C0           5562                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004796                          5563                                          
00004796  227C 000084F7           5564  LEA_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
0000479C  4EB9 000047C0           5565                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
000047A2                          5566  
000047A2                          5567  ;------------------Absolute Addressing Output-----------------------
000047A2  22FC 00008566           5568  LEA_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000047A8  22C5                    5569                                           MOVE.L      D5,(A1)+                           ;load address                  
000047AA  4EB9 000047C0           5570                                           JSR         LEA_determine_second_op                 ;jump to subroutine to determine second operand
000047B0                          5571                                             
000047B0                          5572  
000047B0  2A18                    5573  LEA_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000047B2  22FC 00008566           5574                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000047B8  22C5                    5575                                           MOVE.L      D5,(A1)+                           ;load address                  
000047BA  4EB9 000047C0           5576                                           JSR         LEA_determine_second_op                 ;jump to subroutine to determine second operand
000047C0                          5577                                                
000047C0                          5578  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000047C0  4282                    5579  LEA_determine_second_op                         CLR.L       D2                                              ;clear D2 
000047C2  C4BC 00000E00           5580                                                  AND.L       #mask_LEA_An_reg,D2                             ;load the mask for the register into D2, masks bit 11-9
000047C8                          5581                                                  
000047C8  B4BC 00000000           5582  LEA_reg0                                        CMP.L       #match_LEA_reg0,D2                              ;check to see if reg equal 0
000047CE  6600 0006               5583                                                  BNE         LEA_reg1                                        ;if not equal got check reg 1
000047D2  6700 0064               5584                                                  BEQ         LEA_reg0_out                                    ;if equal go to output
000047D6                          5585                                                  
000047D6  B4BC 00000200           5586  LEA_reg1                                        CMP.L       #match_LEA_reg1,D2                              ;check to see if reg equal 1
000047DC  6600 0006               5587                                                  BNE         LEA_reg2                                        ;if not equal got check reg 2
000047E0  6700 005E               5588                                                  BEQ         LEA_reg1_out                                    ;if equal go to output
000047E4                          5589  
000047E4  B4BC 00000400           5590  LEA_reg2                                        CMP.L       #match_LEA_reg2,D2                              ;check to see if reg equal 2
000047EA  6600 0006               5591                                                  BNE         LEA_reg3                                        ;if not equal got check reg 3
000047EE  6700 0058               5592                                                  BEQ         LEA_reg2_out                                    ;if equal go to output
000047F2                          5593  
000047F2  B4BC 00000600           5594  LEA_reg3                                        CMP.L       #match_LEA_reg3,D2                              ;check to see if reg equal 3
000047F8  6600 0006               5595                                                  BNE         LEA_reg4                                        ;if not equal got check reg 4
000047FC  6700 0052               5596                                                  BEQ         LEA_reg3_out                                    ;if equal go to output
00004800                          5597                                                  
00004800  B4BC 00000800           5598  LEA_reg4                                        CMP.L       #match_LEA_reg4,D2                              ;check to see if reg equal 4
00004806  6600 0006               5599                                                  BNE         LEA_reg5                                        ;if not equal got check reg 5
0000480A  6700 004C               5600                                                  BEQ         LEA_reg4_out                                    ;if equal go to output
0000480E                          5601  
0000480E  B4BC 00000A00           5602  LEA_reg5                                        CMP.L       #match_LEA_reg5,D2                              ;check to see if reg equal 5
00004814  6600 0006               5603                                                  BNE         LEA_reg6                                        ;if not equal got check reg 6
00004818  6700 0046               5604                                                  BEQ         LEA_reg5_out                                    ;if equal go to output
0000481C                          5605  
0000481C  B4BC 00000C00           5606  LEA_reg6                                        CMP.L       #match_LEA_reg6,D2                              ;check to see if reg equal 6
00004822  6600 0006               5607                                                  BNE         LEA_reg7                                        ;if not equal got check reg 7
00004826  6700 0040               5608                                                  BEQ         LEA_reg6_out                                    ;if equal go to output          
0000482A                          5609  
0000482A  B4BC 00000E00           5610  LEA_reg7                                        CMP.L       #match_LEA_reg7,D2                              ;check to see if reg equal 7
00004830  6700 003E               5611                                                  BEQ         LEA_reg7_out                                    ;if equal go to output
00004834  6600 2974               5612                                                  BNE         ERROR                                                       ;if not equal to an addresssing mode, pritn error
00004838                          5613                                  
00004838                          5614  
00004838                          5615  ;--------------------Data Output-----------------------
00004838  227C 000084AC           5616  LEA_reg0_out                                MOVE.L          #ea_A0,A1                                          ;load string constant into A1
0000483E                          5617                                  
0000483E  4E75                    5618                                              RTS
00004840                          5619                                              
00004840  227C 000084AF           5620  LEA_reg1_out                                MOVE.L          #ea_A1,A1                                       ;load string constant into A1
00004846                          5621                                  
00004846  4E75                    5622                                              RTS
00004848                          5623                                              
00004848  227C 000084B2           5624  LEA_reg2_out                                MOVE.L          #ea_A2,A1                                       ;load string constant into A1
0000484E                          5625                                  
0000484E  4E75                    5626                                              RTS
00004850                          5627                                              
00004850  227C 000084B5           5628  LEA_reg3_out                                MOVE.L          #ea_A3,A1                                           ;load string constant into A1
00004856                          5629                                  
00004856  4E75                    5630                                              RTS
00004858                          5631                                              
00004858  227C 000084B8           5632  LEA_reg4_out                                MOVE.L          #ea_A4,A1                                           ;load string constant into A1
0000485E                          5633                                  
0000485E  4E75                    5634                                              RTS
00004860                          5635                                              
00004860  227C 000084BB           5636  LEA_reg5_out                                MOVE.L          #ea_A5,A1                                           ;load string constant into A1
00004866                          5637                                  
00004866  4E75                    5638                                              RTS
00004868                          5639                                              
00004868  227C 000084BE           5640  LEA_reg6_out                                MOVE.L          #ea_A6,A1                                           ;load string constant into A1
0000486E                          5641                                  
0000486E  4E75                    5642                                              RTS
00004870                          5643                                              
00004870  227C 000084C1           5644  LEA_reg7_out                                MOVE.L          #ea_A7,A1                                           ;load string constant into A1
00004876                          5645                                  
00004876  4E75                    5646                                              RTS             
00004878                          5647  
00004878  =00000038               5648  mask_LEA_ea_mode                        EQU         $0038
00004878  =0000003F               5649  mask_LEA_abs_add                        EQU         $003F
00004878  =0000003F               5650  mask_LEA_ea_reg_and_mode                EQU         $003F
00004878  =00000E00               5651  mask_LEA_An_reg                     EQU         $0E00
00004878                          5652  
00004878  =00000010               5653  match_LEA_An_indir                      EQU         $0010
00004878  =00000038               5654  match_LEA_abs_add_word                  EQU         $0038
00004878  =00000039               5655  match_LEA_abs_add_long                  EQU         $0039
00004878                          5656  
00004878  =00000010               5657  match_LEA_An_indir_r0                   EQU         $0010
00004878  =00000011               5658  match_LEA_An_indir_r1                   EQU         $0011
00004878  =00000012               5659  match_LEA_An_indir_r2                   EQU         $0012
00004878  =00000013               5660  match_LEA_An_indir_r3                   EQU         $0013
00004878  =00000014               5661  match_LEA_An_indir_r4                   EQU         $0014
00004878  =00000015               5662  match_LEA_An_indir_r5                   EQU         $0015
00004878  =00000016               5663  match_LEA_An_indir_r6                   EQU         $0016
00004878  =00000017               5664  match_LEA_An_indir_r7                   EQU         $0017
00004878                          5665  
00004878  =0000003C               5666  match_imm_add                           EQU         $003C
00004878  =000000FC               5667  match_imm_add_word                      EQU         $00FC
00004878  =000001FC               5668  match_imm_add_long                      EQU         $01FC
00004878                          5669  
00004878  =00000000               5670  match_LEA_reg0                          EQU         $0000
00004878  =00000200               5671  match_LEA_reg1                          EQU         $0200
00004878  =00000400               5672  match_LEA_reg2                          EQU         $0400
00004878  =00000600               5673  match_LEA_reg3                          EQU         $0600
00004878  =00000800               5674  match_LEA_reg4                          EQU         $0800
00004878  =00000A00               5675  match_LEA_reg5                          EQU         $0A00
00004878  =00000C00               5676  match_LEA_reg6                          EQU         $0C00
00004878  =00000E00               5677  match_LEA_reg7                          EQU         $0E00
00004878                          5678  
00004878                          5679  
00004878                          5680  
00004878                          5681  
00004878                          5682  
00004878                          5683  
00004878                          5684  
00004878                          5685  
00004878                          5686  
00004878                          5687  -------------------- end include --------------------
00004878                          5688              INCLUDE 'MOVE Subroutine.x68'
00004878                          5689    
00004878                          5690  MOVE_sub                                                       ;preserve the registers, 
00004878                          5691  
00004878  C2BC 00000038           5692                                  AND.L             #mask_MOVE_src_ea_mode,D1                          ;move the mask to D1
0000487E                          5693  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000487E  B2BC 00000000           5694  MOVE_data_reg_dir               CMP.L             #match_MOVE_src_Dn,D1                              ;check to see if mode is data reg direct
00004884  6600 0006               5695                                   BNE               MOVE_add_reg_indir                             ;if not, go check add reg dir
00004888  6700 0056               5696                                   BEQ               MOVE_Dn_reg                                  ;if equal go figure out the register
0000488C                          5697  
0000488C  B2BC 00000010           5698  MOVE_add_reg_indir              CMP.L             #match_MOVE_src_An_indir,D1                        ;check to see if mode is add reg indir
00004892  6600 0006               5699                                   BNE               MOVE_add_reg_indir_predec                    ;if not, go check add reg indir predec 
00004896  6700 0128               5700                                   BEQ               MOVE_An_indir_reg                            ;if equal go figure out the register           
0000489A                          5701             
0000489A  B2BC 00000020           5702  MOVE_add_reg_indir_predec       CMP.L             #match_MOVE_src_An_indir_predec,D1                  ;check to see if mode is add reg indor w/ postinc
000048A0  6600 0006               5703                                   BNE               MOVE_add_reg_indir_postinc                    ;if not go check add reg indir/predec
000048A4  6700 02DA               5704                                   BEQ               MOVE_An_indir_predec                          ;if equal go figure out the register
000048A8                          5705                        
000048A8  B2BC 00000018           5706  MOVE_add_reg_indir_postinc      CMP.L             #match_MOVE_src_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
000048AE  6600 0006               5707                                   BNE               MOVE_abs_add_word                                  ;if not go check abs add word
000048B2  6700 01EC               5708                                   BEQ               MOVE_An_indir_postinc_reg                          ;if equal go figure out the register
000048B6                          5709  
000048B6  C4BC 0000003F           5710  MOVE_abs_add_word               AND.L             #mask_MOVE_src_abs_add,D2                        ;load mask to determine if abs add word or long
000048BC                          5711                                   
000048BC  B4BC 00000038           5712                                   CMP.L             #match_MOVE_src_abs_add_word,D2                  ;check if abs add word
000048C2  2A18                    5713                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000048C4  6600 0006               5714                                   BNE               MOVE_abs_add_long                                  ;if not go check abs add long
000048C8  6700 0396               5715                                   BEQ               MOVE_abs_add_word_out                              ;if equal go to output
000048CC                          5716    
000048CC  B4BC 00000039           5717  MOVE_abs_add_long               CMP.L             #match_MOVE_src_abs_add_long,D2                  ;check to see if abs add long
000048D2  6700 0396               5718                                   BEQ               MOVE_abs_add_long_out                              ;if equal go to output
000048D6  6600 28D2               5719                                   BNE               ERROR                                         ;if not equal go to error mesage MOVE routine
000048DA                          5720  
000048DA                          5721  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000048DA                          5722                                   
000048DA  C4BC 0000003F           5723                                   AND.L              #mask_MOVE_src_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
000048E0                          5724  ;-----------------------------------Data Register Direct--------------------------------
000048E0  B4BC 00000000           5725  MOVE_Dn_reg                    CMP.L              #match_MOVE_src_D0,D2                       ;check to see in the register is 0
000048E6  6600 0006               5726                                   BNE                MOVE_rD1                                     ;if not go check register 1
000048EA  6700 0064               5727                                   BEQ                MOVE_D0_out                              ;if equal go to output MOVEroutine
000048EE                          5728  
000048EE  B4BC 00000001           5729  MOVE_rD1                        CMP.L              #match_MOVE_src_D1,D2                       ;check to see in the register is 1
000048F4  6600 0006               5730                                   BNE                MOVE_rD2                                     ;if not go check register 2
000048F8  6700 0064               5731                                   BEQ                MOVE_D1_out                              ;if equal go to output MOVEroutine
000048FC                          5732  
000048FC  B4BC 00000002           5733  MOVE_rD2                        CMP.L              #match_MOVE_src_D2,D2                       ;check to see in the register is 2
00004902  6600 0006               5734                                   BNE                MOVE_rD3                                     ;if not go check register 3
00004906  6700 0064               5735                                   BEQ                MOVE_D2_out                              ;if equal go to output MOVEroutine
0000490A                          5736  
0000490A  B4BC 00000003           5737  MOVE_rD3                        CMP.L              #match_MOVE_src_D3,D2                       ;check to see in the register is 3
00004910  6600 0006               5738                                   BNE                MOVE_rD4                                     ;if not go check register 4
00004914  6700 0064               5739                                   BEQ                MOVE_D3_out                              ;if equal go to output MOVEroutine
00004918                          5740  
00004918  B4BC 00000004           5741  MOVE_rD4                        CMP.L              #match_MOVE_src_D4,D2                       ;check to see in the register is 4
0000491E  6600 0006               5742                                   BNE                MOVE_rD5                                     ;if not go check register 5
00004922  6700 0064               5743                                   BEQ                MOVE_D4_out                              ;if equal go to output MOVEroutine
00004926                          5744  
00004926  B4BC 00000005           5745  MOVE_rD5                        CMP.L              #match_MOVE_src_D5,D2                       ;check to see in the register is 5
0000492C  6600 0006               5746                                   BNE                MOVE_rD6                                     ;if not go check register 6
00004930  6700 0064               5747                                   BEQ                MOVE_D5_out                              ;if equal go to output MOVEroutine
00004934                          5748  
00004934  B4BC 00000006           5749  MOVE_rD6                        CMP.L              #match_MOVE_src_D6,D2                       ;check to see in the register is 6
0000493A  6600 0006               5750                                   BNE                MOVE_rD7                                     ;if not go check register 7
0000493E  6700 0064               5751                                   BEQ                MOVE_D6_out                              ;if equal go to output MOVEroutine
00004942                          5752  
00004942  B4BC 00000007           5753  MOVE_rD7                        CMP.L              #match_MOVE_src_D7,D2                       ;check to see in the register is 7
00004948  6700 0068               5754                                   BEQ                MOVE_D7_out                              ;if equal go to output MOVEroutine
0000494C  6600 285C               5755                                   BNE                ERROR                               ;if not equal, got to error message
00004950                          5756  ;--------------------Data Register Direct Output-----------------------
00004950  227C 00008494           5757  MOVE_D0_out                    MOVE.L          #ea_D0,A1                            ;load string constant into A1
00004956  4EB9 00004C76           5758                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000495C  4E75                    5759                                  RTS
0000495E                          5760                                  
0000495E  227C 00008497           5761  MOVE_D1_out                    MOVE.L          #ea_D1,A1                            ;load string constant into A1
00004964  4EB9 00004C76           5762                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000496A  4E75                    5763                                  RTS
0000496C                          5764  
0000496C  227C 0000849A           5765  MOVE_D2_out                    MOVE.L          #ea_D2,A1                            ;load string constant into A1
00004972  4EB9 00004C76           5766                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004978  4E75                    5767                                  RTS
0000497A                          5768                                  
0000497A  227C 0000849D           5769  MOVE_D3_out                    MOVE.L           #ea_D3,A1                           ;load string constant into A1
00004980  4EB9 00004C76           5770                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004986  4E75                    5771                                  RTS
00004988                          5772  
00004988  227C 000084A0           5773  MOVE_D4_out                    MOVE.L           #ea_D4,A1                           ;load string constant into A1
0000498E  4EB9 00004C76           5774                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004994  4E75                    5775                                  RTS
00004996                          5776  
00004996  227C 000084A3           5777  MOVE_D5_out                    MOVE.L           #ea_D5,A1                           ;load string constant into A1
0000499C  4EB9 00004C76           5778                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
000049A2  4E75                    5779                                  RTS
000049A4                          5780  
000049A4  227C 000084A6           5781  MOVE_D6_out                    MOVE.L           #ea_D6,A1                           ;load string constant into A1
000049AA  4EB9 00004C76           5782                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
000049B0  4E75                    5783                                  RTS
000049B2                          5784  
000049B2  227C 000084A9           5785  MOVE_D7_out                    MOVE.L           #ea_D7,A1                           ;load string constant into A1
000049B8  4EB9 00004C76           5786                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
000049BE  4E75                    5787                                  RTS
000049C0                          5788  ;------------------Address Register Indirect-----------------------
000049C0  B4BC 00000010           5789  MOVE_An_indir_reg               CMP.L          #match_MOVE_src_An_indir_r0,D2              ;check reg is equal to 0
000049C6  6600 0006               5790                                   BNE             MOVE_An_indir_reg1                           ;if not try reg 1
000049CA  6700 0064               5791                                   BEQ             MOVE_An_indir_reg0_out                       ;if equal go to output MOVEroutine
000049CE                          5792  
000049CE  B4BC 00000011           5793  MOVE_An_indir_reg1              CMP.L           #match_MOVE_src_An_indir_r1,D2              ;check reg is equal to 1
000049D4  6600 0006               5794                                   BNE             MOVE_An_indir_reg2                           ;if not try reg 2
000049D8  6700 0064               5795                                   BEQ             MOVE_An_indir_reg1_out                       ;if equal go to output MOVEroutine
000049DC                          5796  
000049DC  B4BC 00000012           5797  MOVE_An_indir_reg2              CMP.L           #match_MOVE_src_An_indir_r2,D2              ;check reg is equal to 2
000049E2  6600 0006               5798                                   BNE             MOVE_An_indir_reg3                           ;if not try reg 3
000049E6  6700 0064               5799                                   BEQ             MOVE_An_indir_reg2_out                       ;if equal go to output MOVEroutine
000049EA                          5800  
000049EA  B4BC 00000013           5801  MOVE_An_indir_reg3              CMP.L           #match_MOVE_src_An_indir_r3,D2              ;check reg is equal to 3
000049F0  6600 0006               5802                                   BNE             MOVE_An_indir_reg4                           ;if not try reg 4
000049F4  6700 0064               5803                                   BEQ             MOVE_An_indir_reg3_out                       ;if equal go to output MOVEroutine
000049F8                          5804      
000049F8  B4BC 00000014           5805  MOVE_An_indir_reg4              CMP.L           #match_MOVE_src_An_indir_r4,D2              ;check reg is equal to 4
000049FE  6600 0006               5806                                   BNE             MOVE_An_indir_reg5                           ;if not try reg 5
00004A02  6700 0064               5807                                   BEQ             MOVE_An_indir_reg4_out                       ;if equal go to output MOVEroutine
00004A06                          5808          
00004A06  B4BC 00000015           5809  MOVE_An_indir_reg5              CMP.L           #match_MOVE_src_An_indir_r5,D2              ;check reg is equal to 5
00004A0C  6600 0006               5810                                   BNE             MOVE_An_indir_reg6                           ;if not try reg 6
00004A10  6700 0064               5811                                   BEQ             MOVE_An_indir_reg5_out                       ;if equal go to output MOVEroutine
00004A14                          5812  
00004A14  B4BC 00000016           5813  MOVE_An_indir_reg6              CMP.L           #match_MOVE_src_An_indir_r6,D2              ;check reg is equal to 6
00004A1A  6600 0006               5814                                   BNE             MOVE_An_indir_reg7                           ;if not try reg 7
00004A1E  6700 0064               5815                                   BEQ             MOVE_An_indir_reg6_out                       ;if equal go to output MOVEroutine
00004A22                          5816  
00004A22  B4BC 00000017           5817  MOVE_An_indir_reg7              CMP.L           #match_MOVE_src_An_indir_r7,D2              ;check reg is equal to 7
00004A28  6700 0068               5818                                   BEQ             MOVE_An_indir_reg7_out                       ;if equal go to output MOVEroutine
00004A2C  6600 277C               5819                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00004A30                          5820  
00004A30                          5821  ;--------------------Address Register Indirect Output-----------------------
00004A30  227C 000084D4           5822  MOVE_An_indir_reg0_out                 MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
00004A36  4EB9 00004C76           5823                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A3C  4E75                    5824                                          RTS
00004A3E                          5825                                          
00004A3E  227C 000084D9           5826  MOVE_An_indir_reg1_out                 MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
00004A44  4EB9 00004C76           5827                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A4A  4E75                    5828                                          RTS
00004A4C                          5829                                          
00004A4C  227C 000084DE           5830  MOVE_An_indir_reg2_out                 MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
00004A52  4EB9 00004C76           5831                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A58  4E75                    5832                                          RTS
00004A5A                          5833                                          
00004A5A  227C 000084E3           5834  MOVE_An_indir_reg3_out                 MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
00004A60  4EB9 00004C76           5835                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A66  4E75                    5836                                          RTS
00004A68                          5837                                          
00004A68  227C 000084E8           5838  MOVE_An_indir_reg4_out                 MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
00004A6E  4EB9 00004C76           5839                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A74  4E75                    5840                                          RTS
00004A76                          5841                                          
00004A76  227C 000084ED           5842  MOVE_An_indir_reg5_out                 MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
00004A7C  4EB9 00004C76           5843                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A82  4E75                    5844                                          RTS
00004A84                          5845                                          
00004A84  227C 000084F2           5846  MOVE_An_indir_reg6_out                 MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
00004A8A  4EB9 00004C76           5847                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A90  4E75                    5848                                          RTS
00004A92                          5849                                          
00004A92  227C 000084F7           5850  MOVE_An_indir_reg7_out                 MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
00004A98  4EB9 00004C76           5851                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A9E  4E75                    5852                                          RTS
00004AA0                          5853  ;------------------Address Register Indirect with Post Increment-----------------------
00004AA0  B4BC 00000018           5854  MOVE_An_indir_postinc_reg                  CMP.L      #match_MOVE_src_An_indir_pinc_r0,D2        ;check reg is equal to 0
00004AA6  6600 0006               5855                                              BNE        MOVE_An_indir_postinc_reg1                      ;if not try reg 1
00004AAA  6700 0064               5856                                              BEQ        MOVE_An_indir_postinc_reg0_out               ;if equal go to output MOVEroutine
00004AAE                          5857  
00004AAE  B4BC 00000019           5858  MOVE_An_indir_postinc_reg1                 CMP.L      #match_MOVE_src_An_indir_pinc_r1,D2        ;check reg is equal to 1
00004AB4  6600 0006               5859                                              BNE        MOVE_An_indir_postinc_reg2                      ;if not try reg 2
00004AB8  6700 0064               5860                                              BEQ        MOVE_An_indir_postinc_reg1_out               ;if equal go to output MOVEroutine
00004ABC                          5861  
00004ABC  B4BC 0000001A           5862  MOVE_An_indir_postinc_reg2                 CMP.L      #match_MOVE_src_An_indir_pinc_r2,D2        ;check reg is equal to 2
00004AC2  6600 0006               5863                                              BNE        MOVE_An_indir_postinc_reg3                      ;if not try reg 3
00004AC6  6700 0064               5864                                              BEQ        MOVE_An_indir_postinc_reg2_out               ;if equal go to output MOVEroutine
00004ACA                          5865  
00004ACA  B4BC 0000001B           5866  MOVE_An_indir_postinc_reg3                 CMP.L      #match_MOVE_src_An_indir_pinc_r3,D2        ;check reg is equal to 3
00004AD0  6600 0006               5867                                              BNE        MOVE_An_indir_postinc_reg4                      ;if not try reg 4
00004AD4  6700 0064               5868                                              BEQ        MOVE_An_indir_postinc_reg3_out               ;if equal go to output MOVEroutine
00004AD8                          5869   
00004AD8  B4BC 0000001C           5870  MOVE_An_indir_postinc_reg4                 CMP.L      #match_MOVE_src_An_indir_pinc_r4,D2        ;check reg is equal to 4
00004ADE  6600 0006               5871                                              BNE        MOVE_An_indir_postinc_reg5                      ;if not try reg 5
00004AE2  6700 0064               5872                                              BEQ        MOVE_An_indir_postinc_reg4_out               ;if equal go to output MOVEroutine
00004AE6                          5873  
00004AE6  B4BC 0000001D           5874  MOVE_An_indir_postinc_reg5                 CMP.L      #match_MOVE_src_An_indir_pinc_r5,D2        ;check reg is equal to 5
00004AEC  6600 0006               5875                                              BNE        MOVE_An_indir_postinc_reg6                      ;if not try reg 6
00004AF0  6700 0064               5876                                              BEQ        MOVE_An_indir_postinc_reg5_out               ;if equal go to output MOVEroutine
00004AF4                          5877  
00004AF4  B4BC 0000001E           5878  MOVE_An_indir_postinc_reg6                 CMP.L      #match_MOVE_src_An_indir_pinc_r6,D2         ;check reg is equal to 6
00004AFA  6600 0006               5879                                              BNE        MOVE_An_indir_postinc_reg7                        ;if not try reg 7
00004AFE  6700 0064               5880                                              BEQ        MOVE_An_indir_postinc_reg6_out                    ;if equal go to output MOVEroutine
00004B02                          5881  
00004B02  B4BC 0000001F           5882  MOVE_An_indir_postinc_reg7                 CMP.L      #match_MOVE_src_An_indir_pinc_r7,D2         ;check reg is equal to 7
00004B08  6700 0068               5883                                              BEQ        MOVE_An_indir_postinc_reg7_out                    ;if equal go to output MOVEroutine
00004B0C  6600 269C               5884                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
00004B10                          5885  
00004B10                          5886  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00004B10  227C 000084FC           5887  MOVE_An_indir_postinc_reg0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00004B16  4EB9 00004C76           5888                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B1C  4E75                    5889                                               RTS
00004B1E                          5890                                               
00004B1E  227C 00008502           5891  MOVE_An_indir_postinc_reg1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00004B24  4EB9 00004C76           5892                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B2A  4E75                    5893                                               RTS
00004B2C                          5894                                               
00004B2C  227C 00008508           5895  MOVE_An_indir_postinc_reg2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00004B32  4EB9 00004C76           5896                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B38  4E75                    5897                                               RTS
00004B3A                          5898                                               
00004B3A  227C 0000850E           5899  MOVE_An_indir_postinc_reg3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00004B40  4EB9 00004C76           5900                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B46  4E75                    5901                                               RTS
00004B48                          5902                                               
00004B48  227C 00008514           5903  MOVE_An_indir_postinc_reg4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00004B4E  4EB9 00004C76           5904                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B54  4E75                    5905                                               RTS
00004B56                          5906                                               
00004B56  227C 0000851A           5907  MOVE_An_indir_postinc_reg5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00004B5C  4EB9 00004C76           5908                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B62  4E75                    5909                                               RTS
00004B64                          5910                                               
00004B64  227C 00008520           5911  MOVE_An_indir_postinc_reg6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00004B6A  4EB9 00004C76           5912                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B70  4E75                    5913                                               RTS
00004B72                          5914                                               
00004B72  227C 00008526           5915  MOVE_An_indir_postinc_reg7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00004B78  4EB9 00004C76           5916                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B7E  4E75                    5917                                               RTS
00004B80                          5918                                               
00004B80                          5919  ;------------------Address Register Indirect with Pre Decrement-----------------------
00004B80  B4BC 00000020           5920  MOVE_An_indir_predec                       CMP.L      #match_MOVE_src_An_indir_prede_r0,D2       ;check reg is equal to 0
00004B86  6600 0006               5921                                              BNE        MOVE_An_indir_predec_reg1                      ;if not try reg 1
00004B8A  6700 0064               5922                                              BEQ        MOVE_An_indir_predec_reg0_out               ;if equal go to output MOVEroutine
00004B8E                          5923  
00004B8E  B4BC 00000021           5924  MOVE_An_indir_predec_reg1                  CMP.L      #match_MOVE_src_An_indir_prede_r1,D2       ;check reg is equal to 1
00004B94  6600 0006               5925                                              BNE        MOVE_An_indir_predec_reg2                      ;if not try reg 2
00004B98  6700 0064               5926                                              BEQ        MOVE_An_indir_predec_reg1_out               ;if equal go to output MOVEroutine
00004B9C                          5927  
00004B9C  B4BC 00000022           5928  MOVE_An_indir_predec_reg2                  CMP.L      #match_MOVE_src_An_indir_prede_r2,D2       ;check reg is equal to 2
00004BA2  6600 0006               5929                                              BNE        MOVE_An_indir_predec_reg3                      ;if not try reg 3
00004BA6  6700 0064               5930                                              BEQ        MOVE_An_indir_predec_reg2_out               ;if equal go to output MOVEroutine
00004BAA                          5931  
00004BAA  B4BC 00000023           5932  MOVE_An_indir_predec_reg3                  CMP.L      #match_MOVE_src_An_indir_prede_r3,D2       ;check reg is equal to 3
00004BB0  6600 0006               5933                                              BNE        MOVE_An_indir_predec_reg4                      ;if not try reg 4
00004BB4  6700 0064               5934                                              BEQ        MOVE_An_indir_predec_reg3_out               ;if equal go to output MOVEroutine
00004BB8                          5935  
00004BB8  B4BC 00000024           5936  MOVE_An_indir_predec_reg4                  CMP.L      #match_MOVE_src_An_indir_prede_r4,D2       ;check reg is equal to 4
00004BBE  6600 0006               5937                                              BNE        MOVE_An_indir_predec_reg5                      ;if not try reg 5
00004BC2  6700 0064               5938                                              BEQ        MOVE_An_indir_predec_reg4_out               ;if equal go to output MOVEroutine
00004BC6                          5939  
00004BC6  B4BC 00000025           5940  MOVE_An_indir_predec_reg5                  CMP.L      #match_MOVE_src_An_indir_prede_r5,D2       ;check reg is equal to 5
00004BCC  6600 0006               5941                                              BNE        MOVE_An_indir_predec_reg6                     ;if not try reg 6
00004BD0  6700 0064               5942                                              BEQ        MOVE_An_indir_predec_reg5_out               ;if equal go to output MOVEroutine
00004BD4                          5943  
00004BD4  B4BC 00000026           5944  MOVE_An_indir_predec_reg6                  CMP.L      #match_MOVE_src_An_indir_prede_r6,D2       ;check reg is equal to 6
00004BDA  6600 0006               5945                                              BNE        MOVE_An_indir_predec_reg7                     ;if not try reg 7
00004BDE  6700 0064               5946                                              BEQ        MOVE_An_indir_predec_reg6_out               ;if equal go to output MOVEroutine
00004BE2                          5947  
00004BE2  B4BC 00000027           5948  MOVE_An_indir_predec_reg7                  CMP.L      #match_MOVE_src_An_indir_prede_r7,D2       ;check reg is equal to 7
00004BE8  6700 0068               5949                                              BEQ        MOVE_An_indir_predec_reg7_out               ;if equal go to output MOVEroutine
00004BEC  6600 25BC               5950                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
00004BF0                          5951  
00004BF0                          5952  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00004BF0  227C 0000852C           5953  MOVE_An_indir_predec_reg0_out              MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00004BF6  4EB9 00004C76           5954                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004BFC  4E75                    5955                                               RTS
00004BFE                          5956                                              
00004BFE  227C 00008532           5957  MOVE_An_indir_predec_reg1_out              MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00004C04  4EB9 00004C76           5958                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C0A  4E75                    5959                                               RTS
00004C0C                          5960                                               
00004C0C  227C 00008538           5961  MOVE_An_indir_predec_reg2_out              MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00004C12  4EB9 00004C76           5962                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C18  4E75                    5963                                               RTS
00004C1A                          5964                                               
00004C1A  227C 0000853E           5965  MOVE_An_indir_predec_reg3_out              MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00004C20  4EB9 00004C76           5966                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C26  4E75                    5967                                               RTS
00004C28                          5968                                               
00004C28  227C 00008544           5969  MOVE_An_indir_predec_reg4_out              MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00004C2E  4EB9 00004C76           5970                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C34  4E75                    5971                                               RTS
00004C36                          5972                                               
00004C36  227C 0000854A           5973  MOVE_An_indir_predec_reg5_out              MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00004C3C  4EB9 00004C76           5974                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C42  4E75                    5975                                               RTS
00004C44                          5976                                               
00004C44  227C 00008550           5977  MOVE_An_indir_predec_reg6_out              MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00004C4A  4EB9 00004C76           5978                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C50  4E75                    5979                                               RTS
00004C52                          5980                                               
00004C52  227C 00008556           5981  MOVE_An_indir_predec_reg7_out              MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00004C58  4EB9 00004C76           5982                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C5E  4E75                    5983                                              RTS
00004C60                          5984  ;------------------Absolute Addressing Output-----------------------
00004C60  22FC 00008566           5985  MOVE_abs_add_word_out                MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004C66  22C5                    5986                                        MOVE.L      D5,(A1)+                           ;load address                  
00004C68  4E75                    5987                                        RTS                                            :return to MOVEroutine
00004C6A                          5988                                             
00004C6A                          5989  
00004C6A  2A18                    5990  MOVE_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00004C6C  22FC 00008566           5991                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004C72  22C5                    5992                                        MOVE.L      D5,(A1)+                           ;load address                  
00004C74  4E75                    5993                                        RTS                                            :return to MOVEroutine                                            
00004C76                          5994  
00004C76  4241                    5995  MOVE_determine_second_op                CLR         D1
00004C78                          5996  
00004C78  C2BC 000001C0           5997                                   AND.L             #mask_MOVE_dest_ea_mode,D1                                   ;move the mask to D1
00004C7E                          5998  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004C7E  B2BC 00000000           5999  MOVE_dest_data_reg_dir           CMP.L             #match_MOVE_dest_Dn,D1                             ;check to see if mode is data reg direct
00004C84  6600 0006               6000                                   BNE               MOVE_dest_add_reg_dir                                   ;if not, go check add reg dir
00004C88  6700 006E               6001                                   BEQ               MOVE_dest_Dn_reg                                        ;if equal go figure out the register
00004C8C                          6002  
00004C8C  B2BC 00000040           6003  MOVE_dest_add_reg_dir            CMP.L             #match_MOVE_dest_An,D1                             ;check if mode is add reg direct
00004C92  6600 0006               6004                                   BNE               MOVE_dest_add_reg_indir                                 ;if not, go check add reg indir
00004C96  6700 0110               6005                                   BEQ               MOVE_dest_An_reg                                        ;if equal go figure out the reg
00004C9A                          6006   
00004C9A  B2BC 00000080           6007  MOVE_dest_add_reg_indir          CMP.L             #match_MOVE_dest_An_indir,D1                       ;check to see if mode is add reg indir
00004CA0  6600 0006               6008                                   BNE               MOVE_dest_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00004CA4  6700 01B2               6009                                   BEQ               MOVE_dest_An_indir_reg                                  ;if equal go figure out the register           
00004CA8                          6010             
00004CA8  B2BC 00000100           6011  MOVE_dest_add_reg_indir_predec   CMP.L             #match_MOVE_dest_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00004CAE  6600 0006               6012                                   BNE               MOVE_dest_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00004CB2  6700 0304               6013                                   BEQ               MOVE_dest_An_indir_predec                               ;if equal go figure out the register
00004CB6                          6014                        
00004CB6  B2BC 000000C0           6015  MOVE_dest_add_reg_indir_postinc  CMP.L             #match_MOVE_dest_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00004CBC  6600 0006               6016                                   BNE               MOVE_dest_abs_add_word                                  ;if not go check abs add word
00004CC0  6700 0246               6017                                   BEQ               MOVE_dest_An_indir_pinc_r                          ;if equal go figure out the register
00004CC4                          6018  
00004CC4  C4BC 000001C0           6019  MOVE_dest_abs_add_word           AND.L             #mask_MOVE_dest_abs_add,D2                         ;load mask to determine if abs add word or long
00004CCA                          6020                                   
00004CCA  B4BC 000001C0           6021                                   CMP.L             #match_MOVE_dest_abs_add_word,D2                   ;check if abs add word
00004CD0  2A18                    6022                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00004CD2  6600 0006               6023                                   BNE               MOVE_dest_abs_add_long                                  ;if not go check abs add long
00004CD6  6700 0390               6024                                   BEQ               MOVE_dest_abs_add_word_out                              ;if equal go to output
00004CDA                          6025    
00004CDA  B4BC 000009C0           6026  MOVE_dest_abs_add_long           CMP.L             #match_MOVE_dest_abs_add_long,D2                    ;check to see if abs add long
00004CE0  6700 0390               6027                                   BEQ               MOVE_dest_abs_add_long_out                               ;if equal go to output
00004CE4                          6028                                   
00004CE4  B2BC 000001C0           6029  MOVE_dest_immediate_add          CMP.L             #match_MOVE_dest_imm_add,D1                                ;check if immediate address
00004CEA  6700 0392               6030                                   BEQ               MOVE_dest_immediate_add_out                                    ;if equal go to immediate add MOVE routine
00004CEE  6600 24BA               6031                                   BNE               ERROR                                            ;if not equal go to error mesage MOVE routine
00004CF2                          6032  
00004CF2                          6033  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004CF2                          6034                                   
00004CF2  C4BC 00000FC0           6035                                   AND.L              #mask_MOVE_dest_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00004CF8                          6036  ;-----------------------------------Data Register Direct--------------------------------
00004CF8  B4BC 00000000           6037  MOVE_dest_Dn_reg                 CMP.L              #match_MOVE_dest_D0,D2                       ;check to see in the register is 0
00004CFE  6600 0006               6038                                   BNE                MOVE_dest_rD1                                     ;if not go check register 1
00004D02  6700 0064               6039                                   BEQ                MOVE_dest_D0_out                              ;if equal go to output MOVEroutine
00004D06                          6040  
00004D06  B4BC 00000200           6041  MOVE_dest_rD1                    CMP.L              #match_MOVE_dest_D1,D2                       ;check to see in the register is 1
00004D0C  6600 0006               6042                                   BNE                MOVE_dest_rD2                                     ;if not go check register 2
00004D10  6700 005E               6043                                   BEQ                MOVE_dest_D1_out                              ;if equal go to output MOVEroutine
00004D14                          6044  
00004D14  B4BC 00000400           6045  MOVE_dest_rD2                    CMP.L              #match_MOVE_dest_D2,D2                       ;check to see in the register is 2
00004D1A  6600 0006               6046                                   BNE                MOVE_dest_rD3                                     ;if not go check register 3
00004D1E  6700 0058               6047                                   BEQ                MOVE_dest_D2_out                              ;if equal go to output MOVEroutine
00004D22                          6048  
00004D22  B4BC 00000600           6049  MOVE_dest_rD3                    CMP.L              #match_MOVE_dest_D3,D2                       ;check to see in the register is 3
00004D28  6600 0006               6050                                   BNE                MOVE_dest_rD4                                     ;if not go check register 4
00004D2C  6700 0052               6051                                   BEQ                MOVE_dest_D3_out                              ;if equal go to output MOVEroutine
00004D30                          6052  
00004D30  B4BC 00000800           6053  MOVE_dest_rD4                    CMP.L              #match_MOVE_dest_D4,D2                       ;check to see in the register is 4
00004D36  6600 0006               6054                                   BNE                MOVE_dest_rD5                                     ;if not go check register 5
00004D3A  6700 004C               6055                                   BEQ                MOVE_dest_D4_out                              ;if equal go to output MOVEroutine
00004D3E                          6056  
00004D3E  B4BC 00000A00           6057  MOVE_dest_rD5                    CMP.L              #match_MOVE_dest_D5,D2                       ;check to see in the register is 5
00004D44  6600 0006               6058                                   BNE                MOVE_dest_rD6                                     ;if not go check register 6
00004D48  6700 0046               6059                                   BEQ                MOVE_dest_D5_out                              ;if equal go to output MOVEroutine
00004D4C                          6060  
00004D4C  B4BC 00000C00           6061  MOVE_dest_rD6                    CMP.L              #match_MOVE_dest_D6,D2                       ;check to see in the register is 6
00004D52  6600 0006               6062                                   BNE                MOVE_dest_rD7                                     ;if not go check register 7
00004D56  6700 0040               6063                                   BEQ                MOVE_dest_D6_out                              ;if equal go to output MOVEroutine
00004D5A                          6064  
00004D5A  B4BC 00000E00           6065  MOVE_dest_rD7                    CMP.L              #match_MOVE_dest_D7,D2                       ;check to see in the register is 7
00004D60  6700 003E               6066                                   BEQ                MOVE_dest_D7_out                              ;if equal go to output MOVEroutine
00004D64  6600 2444               6067                                   BNE                ERROR                               ;if not equal, got to error message
00004D68                          6068  ;--------------------Data Register Direct Output-----------------------
00004D68  227C 00008494           6069  MOVE_dest_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
00004D6E  4E75                    6070                                  RTS
00004D70                          6071  
00004D70  227C 00008497           6072  MOVE_dest_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
00004D76  4E75                    6073                                  RTS
00004D78                          6074  
00004D78  227C 0000849A           6075  MOVE_dest_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
00004D7E  4E75                    6076                                  RTS
00004D80                          6077  
00004D80  227C 0000849D           6078  MOVE_dest_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
00004D86  4E75                    6079                                  RTS
00004D88                          6080  
00004D88  227C 000084A0           6081  MOVE_dest_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
00004D8E  4E75                    6082                                  RTS
00004D90                          6083  
00004D90  227C 000084A3           6084  MOVE_dest_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00004D96  4E75                    6085                                  RTS
00004D98                          6086  
00004D98  227C 000084A6           6087  MOVE_dest_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00004D9E  4E75                    6088                                  RTS
00004DA0                          6089  
00004DA0  227C 000084A9           6090  MOVE_dest_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00004DA6  4E75                    6091                                  RTS
00004DA8                          6092  
00004DA8                          6093  ;------------------Address Register Direct-----------------------
00004DA8  B4BC 00000040           6094  MOVE_dest_An_reg                  CMP.L           #match_MOVE_dest_A0,D2                      ;check reg is equal to 0
00004DAE  6600 0006               6095                                   BNE             MOVE_dest_rA1                                  ;if not try reg 1
00004DB2  6700 0114               6096                                   BEQ             MOVE_dest_An_indir_reg0_out                     ;if equal go to output MOVEroutine
00004DB6                          6097  
00004DB6  B4BC 00000240           6098  MOVE_dest_rA1                     CMP.L           #match_MOVE_dest_A1,D2                      ;check reg is equal to 1
00004DBC  6600 0006               6099                                   BNE             MOVE_dest_rA2                                  ;if not try reg 2
00004DC0  6700 010E               6100                                   BEQ             MOVE_dest_An_indir_reg1_out                     ;if equal go to output MOVEroutine
00004DC4                          6101  
00004DC4  B4BC 00000440           6102  MOVE_dest_rA2                     CMP.L           #match_MOVE_dest_A2,D2                     ;check reg is equal to 2
00004DCA  6600 0006               6103                                   BNE             MOVE_dest_rA3                                  ;if not try reg 3
00004DCE  6700 0108               6104                                   BEQ             MOVE_dest_An_indir_reg2_out                     ;if equal go to output MOVEroutine
00004DD2                          6105  
00004DD2  B4BC 00000640           6106  MOVE_dest_rA3                     CMP.L           #match_MOVE_dest_A3,D2                       ;check reg is equal to 3
00004DD8  6600 0006               6107                                   BNE             MOVE_dest_rA4                                    ;if not try reg 4
00004DDC  6700 0102               6108                                   BEQ             MOVE_dest_An_indir_reg3_out                     ;if equal go to output MOVEroutine
00004DE0                          6109  
00004DE0  B4BC 00000840           6110  MOVE_dest_rA4                     CMP.L           #match_MOVE_dest_A4,D2                       ;check reg is equal to 4
00004DE6  6600 0006               6111                                   BNE             MOVE_dest_rA5                                    ;if not try reg 5
00004DEA  6700 00FC               6112                                   BEQ             MOVE_dest_An_indir_reg4_out                     ;if equal go to output MOVEroutine
00004DEE                          6113              
00004DEE  B4BC 00000A40           6114  MOVE_dest_rA5                     CMP.L           #match_MOVE_dest_A5,D2                      ;check reg is equal to 5
00004DF4  6600 0006               6115                                   BNE             MOVE_dest_rA6                                  ;if not try reg 6
00004DF8  6700 00F6               6116                                   BEQ             MOVE_dest_An_indir_reg5_out                     ;if equal go to output MOVEroutine
00004DFC                          6117  
00004DFC  B4BC 00000C40           6118  MOVE_dest_rA6                     CMP.L           #match_MOVE_dest_A6,D2                                     ;check reg is equal to 6
00004E02  6600 0006               6119                                   BNE             MOVE_dest_rA7                                  ;if not try reg 7
00004E06  6700 00F0               6120                                   BEQ             MOVE_dest_An_indir_reg6_out                     ;if equal go to output MOVEroutine
00004E0A                          6121  
00004E0A  B4BC 00000E40           6122  MOVE_dest_rA7                     CMP.L           #match_MOVE_dest_A7,D2                      ;check reg is equal to 7
00004E10  6700 00EE               6123                                   BEQ             MOVE_dest_An_indir_reg7_out                      ;if equal go to output MOVEroutine
00004E14  6600 2394               6124                                   BNE             ERROR                                  :if not equal to an addresssing mode, pritn error
00004E18                          6125  
00004E18                          6126  ;--------------------Address Register Direct Output-----------------------
00004E18  227C 000084AC           6127  MOVE_dest_A0_out                 MOVE.L         #ea_A0,A1                           ;load string constant into A1
00004E1E  4E75                    6128                                  RTS
00004E20                          6129                                  
00004E20  227C 000084AF           6130  MOVE_dest_A1_out                 MOVE.L         #ea_A1,A1                           ;load string constant into A1
00004E26  4E75                    6131                                  RTS
00004E28                          6132                                  
00004E28  227C 000084B2           6133  MOVE_dest_A2_out                 MOVE.L         #ea_A2,A1                           ;load string constant into A1
00004E2E  4E75                    6134                                  RTS
00004E30                          6135                                  
00004E30  227C 000084B5           6136  MOVE_dest_A3_out                 MOVE.L         #ea_A3,A1                           ;load string constant into A1
00004E36  4E75                    6137                                  RTS
00004E38                          6138  
00004E38  227C 000084B8           6139  MOVE_dest_A4_out                 MOVE.L         #ea_A4,A1                           ;load string constant into A1
00004E3E  4E75                    6140                                  RTS
00004E40                          6141  
00004E40  227C 000084BB           6142  MOVE_dest_A5_out                 MOVE.L         #ea_A5,A1                           ;load string constant into A1
00004E46  4E75                    6143                                  RTS
00004E48                          6144  
00004E48  227C 000084BE           6145  MOVE_dest_A6_out                 MOVE.L         #ea_A6,A1                           ;load string constant into A1
00004E4E  4E75                    6146                                  RTS
00004E50                          6147  
00004E50  227C 000084C1           6148  MOVE_dest_A7_out                 MOVE.L         #ea_A7,A1                           ;load string constant into A1
00004E56  4E75                    6149                                  RTS
00004E58                          6150  
00004E58                          6151  ;------------------Address Register Indirect-----------------------
00004E58  B4BC 00000080           6152  MOVE_dest_An_indir_reg            CMP.L          #match_MOVE_dest_An_indir_r0,D2              ;check reg is equal to 0
00004E5E  6600 0006               6153                                   BNE             MOVE_dest_An_indir_reg1                           ;if not try reg 1
00004E62  6700 0064               6154                                   BEQ             MOVE_dest_An_indir_reg0_out                       ;if equal go to output MOVEroutine
00004E66                          6155  
00004E66  B4BC 00000280           6156  MOVE_dest_An_indir_reg1           CMP.L           #match_MOVE_dest_An_indir_r1,D2              ;check reg is equal to 1
00004E6C  6600 0006               6157                                   BNE             MOVE_dest_An_indir_reg2                           ;if not try reg 2
00004E70  6700 005E               6158                                   BEQ             MOVE_dest_An_indir_reg1_out                       ;if equal go to output MOVEroutine
00004E74                          6159  
00004E74  B4BC 00000480           6160  MOVE_dest_An_indir_reg2           CMP.L           #match_MOVE_dest_An_indir_r2,D2              ;check reg is equal to 2
00004E7A  6600 0006               6161                                   BNE             MOVE_dest_An_indir_reg3                           ;if not try reg 3
00004E7E  6700 0058               6162                                   BEQ             MOVE_dest_An_indir_reg2_out                       ;if equal go to output MOVEroutine
00004E82                          6163  
00004E82  B4BC 00000680           6164  MOVE_dest_An_indir_reg3           CMP.L           #match_MOVE_dest_An_indir_r3,D2              ;check reg is equal to 3
00004E88  6600 0006               6165                                   BNE             MOVE_dest_An_indir_reg4                           ;if not try reg 4
00004E8C  6700 0052               6166                                   BEQ             MOVE_dest_An_indir_reg3_out                       ;if equal go to output MOVEroutine
00004E90                          6167      
00004E90  B4BC 00000880           6168  MOVE_dest_An_indir_reg4           CMP.L           #match_MOVE_dest_An_indir_r4,D2              ;check reg is equal to 4
00004E96  6600 0006               6169                                   BNE             MOVE_dest_An_indir_reg5                           ;if not try reg 5
00004E9A  6700 004C               6170                                   BEQ             MOVE_dest_An_indir_reg4_out                       ;if equal go to output MOVEroutine
00004E9E                          6171          
00004E9E  B4BC 00000A80           6172  MOVE_dest_An_indir_reg5           CMP.L           #match_MOVE_dest_An_indir_r5,D2              ;check reg is equal to 5
00004EA4  6600 0006               6173                                   BNE             MOVE_dest_An_indir_reg6                           ;if not try reg 6
00004EA8  6700 0046               6174                                   BEQ             MOVE_dest_An_indir_reg5_out                       ;if equal go to output MOVEroutine
00004EAC                          6175  
00004EAC  B4BC 00000C80           6176  MOVE_dest_An_indir_reg6           CMP.L           #match_MOVE_dest_An_indir_r6,D2              ;check reg is equal to 6
00004EB2  6600 0006               6177                                   BNE             MOVE_dest_An_indir_reg7                           ;if not try reg 7
00004EB6  6700 0040               6178                                   BEQ             MOVE_dest_An_indir_reg6_out                       ;if equal go to output MOVEroutine
00004EBA                          6179  
00004EBA  B4BC 00000E80           6180  MOVE_dest_An_indir_reg7           CMP.L           #match_MOVE_dest_An_indir_r7,D2              ;check reg is equal to 7
00004EC0  6700 003E               6181                                   BEQ             MOVE_dest_An_indir_reg7_out                       ;if equal go to output MOVEroutine
00004EC4  6600 22E4               6182                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00004EC8                          6183  
00004EC8                          6184  ;--------------------Address Register Indirect Output-----------------------
00004EC8  227C 000084D4           6185  MOVE_dest_An_indir_reg0_out                     MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00004ECE  4E75                    6186                                                  RTS
00004ED0                          6187  
00004ED0  227C 000084D9           6188  MOVE_dest_An_indir_reg1_out                     MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00004ED6  4E75                    6189                                                  RTS
00004ED8                          6190  
00004ED8  227C 000084DE           6191  MOVE_dest_An_indir_reg2_out                     MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00004EDE  4E75                    6192                                                  RTS
00004EE0                          6193  
00004EE0  227C 000084E3           6194  MOVE_dest_An_indir_reg3_out                     MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00004EE6  4E75                    6195                                                  RTS
00004EE8                          6196  
00004EE8  227C 000084E8           6197  MOVE_dest_An_indir_reg4_out                     MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00004EEE  4E75                    6198                                                  RTS
00004EF0                          6199  
00004EF0  227C 000084ED           6200  MOVE_dest_An_indir_reg5_out                     MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00004EF6  4E75                    6201                                                  RTS
00004EF8                          6202  
00004EF8  227C 000084F2           6203  MOVE_dest_An_indir_reg6_out                     MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00004EFE  4E75                    6204                                                  RTS
00004F00                          6205                                          
00004F00  227C 000084F7           6206  MOVE_dest_An_indir_reg7_out                     MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00004F06  4E75                    6207                                                  RTS
00004F08                          6208  
00004F08                          6209  ;------------------Address Register Indirect with Post Increment-----------------------
00004F08  B4BC 000000C0           6210  MOVE_dest_An_indir_pinc_r                    CMP.L      #match_MOVE_dest_An_indir_pinc_r0,D2        ;check reg is equal to 0
00004F0E  6600 0006               6211                                              BNE        MOVE_dest_An_indir_pinc_r1                      ;if not try reg 1
00004F12  6700 0064               6212                                              BEQ        MOVE_dest_An_indir_pinc_r0_out               ;if equal go to output MOVEroutine
00004F16                          6213  
00004F16  B4BC 000002C0           6214  MOVE_dest_An_indir_pinc_r1                   CMP.L      #match_MOVE_dest_An_indir_pinc_r1,D2        ;check reg is equal to 1
00004F1C  6600 0006               6215                                              BNE        MOVE_dest_An_indir_pinc_r2                      ;if not try reg 2
00004F20  6700 005E               6216                                              BEQ        MOVE_dest_An_indir_pinc_r1_out               ;if equal go to output MOVEroutine
00004F24                          6217  
00004F24  B4BC 000004C0           6218  MOVE_dest_An_indir_pinc_r2                   CMP.L      #match_MOVE_dest_An_indir_pinc_r2,D2        ;check reg is equal to 2
00004F2A  6600 0006               6219                                              BNE        MOVE_dest_An_indir_pinc_r3                      ;if not try reg 3
00004F2E  6700 0058               6220                                              BEQ        MOVE_dest_An_indir_pinc_r2_out               ;if equal go to output MOVEroutine
00004F32                          6221  
00004F32  B4BC 000006C0           6222  MOVE_dest_An_indir_pinc_r3                   CMP.L      #match_MOVE_dest_An_indir_pinc_r3,D2        ;check reg is equal to 3
00004F38  6600 0006               6223                                              BNE        MOVE_dest_An_indir_pinc_r4                      ;if not try reg 4
00004F3C  6700 0052               6224                                              BEQ        MOVE_dest_An_indir_pinc_r3_out               ;if equal go to output MOVEroutine
00004F40                          6225   
00004F40  B4BC 000008C0           6226  MOVE_dest_An_indir_pinc_r4                   CMP.L      #match_MOVE_dest_An_indir_pinc_r4,D2        ;check reg is equal to 4
00004F46  6600 0006               6227                                              BNE        MOVE_dest_An_indir_pinc_r5                      ;if not try reg 5
00004F4A  6700 004C               6228                                              BEQ        MOVE_dest_An_indir_pinc_r4_out               ;if equal go to output MOVEroutine
00004F4E                          6229  
00004F4E  B4BC 00000AC0           6230  MOVE_dest_An_indir_pinc_r5                   CMP.L      #match_MOVE_dest_An_indir_pinc_r5,D2        ;check reg is equal to 5
00004F54  6600 0006               6231                                              BNE        MOVE_dest_An_indir_pinc_r6                      ;if not try reg 6
00004F58  6700 0046               6232                                              BEQ        MOVE_dest_An_indir_pinc_r5_out               ;if equal go to output MOVEroutine
00004F5C                          6233      
00004F5C  B4BC 00000CC0           6234  MOVE_dest_An_indir_pinc_r6                   CMP.L      #match_MOVE_dest_An_indir_pinc_r6,D2         ;check reg is equal to 6
00004F62  6600 0006               6235                                              BNE        MOVE_dest_An_indir_pinc_r7                        ;if not try reg 7
00004F66  6700 0040               6236                                              BEQ        MOVE_dest_An_indir_pinc_r6_out                    ;if equal go to output MOVEroutine
00004F6A                          6237  
00004F6A  B4BC 00000EC0           6238  MOVE_dest_An_indir_pinc_r7                   CMP.L      #match_MOVE_dest_An_indir_pinc_r7,D2         ;check reg is equal to 7
00004F70  6700 003E               6239                                              BEQ        MOVE_dest_An_indir_pinc_r7_out                    ;if equal go to output MOVEroutine
00004F74  6600 2234               6240                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
00004F78                          6241  
00004F78                          6242  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00004F78  227C 000084FC           6243  MOVE_dest_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00004F7E  4E75                    6244                                              RTS
00004F80                          6245  
00004F80  227C 00008502           6246  MOVE_dest_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00004F86  4E75                    6247                                              RTS
00004F88                          6248  
00004F88  227C 00008508           6249  MOVE_dest_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00004F8E  4E75                    6250                                              RTS
00004F90                          6251  
00004F90  227C 0000850E           6252  MOVE_dest_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00004F96  4E75                    6253                                              RTS
00004F98                          6254  
00004F98  227C 00008514           6255  MOVE_dest_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00004F9E  4E75                    6256                                              RTS
00004FA0                          6257  
00004FA0  227C 0000851A           6258  MOVE_dest_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00004FA6  4E75                    6259                                              RTS
00004FA8                          6260  
00004FA8  227C 00008520           6261  MOVE_dest_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00004FAE  4E75                    6262                                              RTS
00004FB0                          6263  
00004FB0  227C 00008526           6264  MOVE_dest_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00004FB6  4E75                    6265                                              RTS
00004FB8                          6266  
00004FB8                          6267  ;------------------Address Register Indirect with Pre Decrement-----------------------
00004FB8  B4BC 00000100           6268  MOVE_dest_An_indir_predec                    CMP.L      #match_MOVE_dest_An_indir_pdec_r0,D2       ;check reg is equal to 0
00004FBE  6600 0006               6269                                              BNE        MOVE_dest_An_indir_pdec_r1                      ;if not try reg 1
00004FC2  6700 0064               6270                                              BEQ        MOVE_dest_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
00004FC6                          6271  
00004FC6  B4BC 00000300           6272  MOVE_dest_An_indir_pdec_r1                   CMP.L      #match_MOVE_dest_An_indir_pdec_r1,D2       ;check reg is equal to 1
00004FCC  6600 0006               6273                                              BNE        MOVE_dest_An_indir_pdec_r2                      ;if not try reg 2
00004FD0  6700 005E               6274                                              BEQ        MOVE_dest_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
00004FD4                          6275  
00004FD4  B4BC 00000500           6276  MOVE_dest_An_indir_pdec_r2                   CMP.L      #match_MOVE_dest_An_indir_pdec_r2,D2       ;check reg is equal to 2
00004FDA  6600 0006               6277                                              BNE        MOVE_dest_An_indir_pdec_r3                      ;if not try reg 3
00004FDE  6700 0058               6278                                              BEQ        MOVE_dest_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
00004FE2                          6279  
00004FE2  B4BC 00000700           6280  MOVE_dest_An_indir_pdec_r3                   CMP.L      #match_MOVE_dest_An_indir_pdec_r3,D2       ;check reg is equal to 3
00004FE8  6600 0006               6281                                              BNE        MOVE_dest_An_indir_pdec_r4                      ;if not try reg 4
00004FEC  6700 0052               6282                                              BEQ        MOVE_dest_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
00004FF0                          6283  
00004FF0  B4BC 00000900           6284  MOVE_dest_An_indir_pdec_r4                   CMP.L      #match_MOVE_dest_An_indir_pdec_r4,D2       ;check reg is equal to 4
00004FF6  6600 0006               6285                                              BNE        MOVE_dest_An_indir_pdec_r5                      ;if not try reg 5
00004FFA  6700 004C               6286                                              BEQ        MOVE_dest_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
00004FFE                          6287  
00004FFE  B4BC 00000B00           6288  MOVE_dest_An_indir_pdec_r5                   CMP.L      #match_MOVE_dest_An_indir_pdec_r5,D2       ;check reg is equal to 5
00005004  6600 0006               6289                                              BNE        MOVE_dest_An_indir_pdec_r6                     ;if not try reg 6
00005008  6700 0046               6290                                              BEQ        MOVE_dest_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
0000500C                          6291  
0000500C  B4BC 00000D00           6292  MOVE_dest_An_indir_pdec_r6                   CMP.L      #match_MOVE_dest_An_indir_pdec_r6,D2       ;check reg is equal to 6
00005012  6600 0006               6293                                              BNE        MOVE_dest_An_indir_pdec_r7                     ;if not try reg 7
00005016  6700 0040               6294                                              BEQ        MOVE_dest_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
0000501A                          6295  
0000501A  B4BC 00000F00           6296  MOVE_dest_An_indir_pdec_r7                   CMP.L      #match_MOVE_dest_An_indir_pdec_r7,D2       ;check reg is equal to 7
00005020  6700 003E               6297                                              BEQ        MOVE_dest_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
00005024  6600 2184               6298                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
00005028                          6299  
00005028                          6300  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00005028  227C 0000852C           6301  MOVE_dest_An_indir_pdec_r0_out              MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
0000502E  4E75                    6302                                              RTS
00005030                          6303                                              
00005030  227C 00008532           6304  MOVE_dest_An_indir_pdec_r1_out              MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
00005036  4E75                    6305                                              RTS
00005038                          6306  
00005038  227C 00008538           6307  MOVE_dest_An_indir_pdec_r2_out              MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
0000503E  4E75                    6308                                              RTS
00005040                          6309  
00005040  227C 0000853E           6310  MOVE_dest_An_indir_pdec_r3_out              MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
00005046  4E75                    6311                                              RTS
00005048                          6312  
00005048  227C 00008544           6313  MOVE_dest_An_indir_pdec_r4_out              MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
0000504E  4E75                    6314                                              RTS
00005050                          6315  
00005050  227C 0000854A           6316  MOVE_dest_An_indir_pdec_r5_out              MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
00005056  4E75                    6317                                              RTS
00005058                          6318  
00005058  227C 00008550           6319  MOVE_dest_An_indir_pdec_r6_out              MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
0000505E  4E75                    6320                                              RTS
00005060                          6321  
00005060  227C 00008556           6322  MOVE_dest_An_indir_pdec_r7_out              MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00005066  4E75                    6323                                              RTS
00005068                          6324  ;------------------Absolute Addressing Output-----------------------
00005068  22FC 00008566           6325  MOVE_dest_abs_add_word_out               MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000506E  22C5                    6326                                           MOVE.L      D5,(A1)+                           ;load address                  
00005070  4E75                    6327                                           RTS                                            :return to MOVEroutine
00005072                          6328                                             
00005072                          6329  
00005072  2A18                    6330  MOVE_dest_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00005074  22FC 00008566           6331                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000507A  22C5                    6332                                           MOVE.L      D5,(A1)+                           ;load address                  
0000507C  4E75                    6333                                           RTS                                            :return to MOVEroutine                                            
0000507E                          6334  ;---------------Immediate Addresing---------------------------
0000507E  2A18                    6335  MOVE_dest_immediate_add_out               MOVE.L        (A0)+,D5                             ;capture the immediate address
00005080  BCBC 000001C0           6336                                           CMP.L       #match_MOVE_dest_imm_add_word,D6               ;check to see if need to pull word
00005086  2A18                    6337                                           MOVE.L      (A0)+,D5                            ;pull the word
00005088  6700 0006               6338                                           BEQ         MOVE_dest_imm_add_w                           ;if equal go pull word    
0000508C  6600 000C               6339                                           BNE         MOVE_dest_imm_add_l                           ;if not equal, go check long
00005090                          6340                                           
00005090  22FC 00008566           6341  MOVE_dest_imm_add_w                       MOVE.L     #ea_$,(A1)+                          ;load the $
00005096  32C5                    6342                                           MOVE.W     D5,(A1)+                             ;load the word address                           
00005098  4E75                    6343                                           RTS
0000509A                          6344                                           
0000509A  2A18                    6345  MOVE_dest_imm_add_l                       MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
0000509C  22FC 00008566           6346                                           MOVE.L     #ea_$,(A1)+                          ;load the $
000050A2  2245                    6347                                           MOVE.L      D5,A1                               ;move to A1
000050A4  4E75                    6348                                           RTS
000050A6                          6349  
000050A6                          6350  
000050A6  =00000038               6351  mask_MOVE_src_ea_mode           EQU         $0038
000050A6  =0000003F               6352  mask_MOVE_src_abs_add           EQU         $003F
000050A6  =0000003F               6353  mask_MOVE_src_ea_reg_and_mode   EQU         $003F
000050A6                          6354  
000050A6                          6355  
000050A6  =00000000               6356  match_MOVE_src_Dn               EQU         $0000
000050A6  =00000008               6357  match_MOVE_src_An               EQU         $0008
000050A6  =00000010               6358  match_MOVE_src_An_indir         EQU         $0010
000050A6  =00000020               6359  match_MOVE_src_An_indir_predec  EQU         $0020
000050A6  =00000018               6360  match_MOVE_src_An_indir_postinc EQU         $0018
000050A6  =00000038               6361  match_MOVE_src_abs_add_word     EQU         $0038
000050A6  =00000039               6362  match_MOVE_src_abs_add_long     EQU         $0039
000050A6                          6363  
000050A6  =00000000               6364  match_MOVE_src_D0               EQU         $0000
000050A6  =00000001               6365  match_MOVE_src_D1               EQU         $0001
000050A6  =00000002               6366  match_MOVE_src_D2               EQU         $0002
000050A6  =00000003               6367  match_MOVE_src_D3               EQU         $0003
000050A6  =00000004               6368  match_MOVE_src_D4               EQU         $0004
000050A6  =00000005               6369  match_MOVE_src_D5               EQU         $0005
000050A6  =00000006               6370  match_MOVE_src_D6               EQU         $0006
000050A6  =00000007               6371  match_MOVE_src_D7               EQU         $0007
000050A6                          6372  
000050A6  =00000008               6373  match_MOVE_src_A0               EQU         $0008
000050A6  =00000009               6374  match_MOVE_src_A1               EQU         $0009
000050A6  =0000000A               6375  match_MOVE_src_A2               EQU         $000A
000050A6  =0000000B               6376  match_MOVE_src_A3               EQU         $000B
000050A6  =0000000C               6377  match_MOVE_src_A4               EQU         $000C
000050A6  =0000000D               6378  match_MOVE_src_A5               EQU         $000D
000050A6  =0000000E               6379  match_MOVE_src_A6               EQU         $000E
000050A6  =0000000F               6380  match_MOVE_src_A7               EQU         $000F
000050A6                          6381  
000050A6  =00000010               6382  match_MOVE_src_An_indir_r0      EQU         $0010
000050A6  =00000011               6383  match_MOVE_src_An_indir_r1      EQU         $0011
000050A6  =00000012               6384  match_MOVE_src_An_indir_r2      EQU         $0012
000050A6  =00000013               6385  match_MOVE_src_An_indir_r3      EQU         $0013
000050A6  =00000014               6386  match_MOVE_src_An_indir_r4      EQU         $0014
000050A6  =00000015               6387  match_MOVE_src_An_indir_r5      EQU         $0015
000050A6  =00000016               6388  match_MOVE_src_An_indir_r6      EQU         $0016
000050A6  =00000017               6389  match_MOVE_src_An_indir_r7      EQU         $0017
000050A6                          6390  
000050A6  =00000018               6391  match_MOVE_src_An_indir_pinc_r0     EQU         $0018
000050A6  =00000019               6392  match_MOVE_src_An_indir_pinc_r1     EQU         $0019
000050A6  =0000001A               6393  match_MOVE_src_An_indir_pinc_r2     EQU         $001A
000050A6  =0000001B               6394  match_MOVE_src_An_indir_pinc_r3     EQU         $001B
000050A6  =0000001C               6395  match_MOVE_src_An_indir_pinc_r4     EQU         $001C
000050A6  =0000001D               6396  match_MOVE_src_An_indir_pinc_r5     EQU         $001D
000050A6  =0000001E               6397  match_MOVE_src_An_indir_pinc_r6     EQU         $001E
000050A6  =0000001F               6398  match_MOVE_src_An_indir_pinc_r7     EQU         $001F
000050A6                          6399  
000050A6  =00000020               6400  match_MOVE_src_An_indir_prede_r0            EQU         $0020
000050A6  =00000021               6401  match_MOVE_src_An_indir_prede_r1            EQU         $0021
000050A6  =00000022               6402  match_MOVE_src_An_indir_prede_r2            EQU         $0022
000050A6  =00000023               6403  match_MOVE_src_An_indir_prede_r3            EQU         $0023
000050A6  =00000024               6404  match_MOVE_src_An_indir_prede_r4            EQU         $0024
000050A6  =00000025               6405  match_MOVE_src_An_indir_prede_r5            EQU         $0025
000050A6  =00000026               6406  match_MOVE_src_An_indir_prede_r6            EQU         $0026
000050A6  =00000027               6407  match_MOVE_src_An_indir_prede_r7            EQU         $0027
000050A6                          6408  
000050A6  =0000003C               6409  match_MOVE_src_imm_add                           EQU         $003C
000050A6  =000000FC               6410  match_MOVE_src_imm_add_word                      EQU         $00FC
000050A6  =000001FC               6411  match_MOVE_src_imm_add_long                      EQU         $01FC
000050A6                          6412  
000050A6                          6413  
000050A6                          6414  
000050A6                          6415  
000050A6                          6416  
000050A6  =000001C0               6417  mask_MOVE_dest_ea_mode          EQU         $01C0
000050A6  =000001C0               6418  mask_MOVE_dest_abs_add          EQU         $01C0
000050A6  =00000FC0               6419  mask_MOVE_dest_ea_reg_and_mode  EQU         $0FC0
000050A6                          6420  
000050A6                          6421  
000050A6  =00000000               6422  match_MOVE_dest_Dn              EQU         $0000
000050A6  =00000040               6423  match_MOVE_dest_An              EQU         $0040
000050A6  =00000080               6424  match_MOVE_dest_An_indir            EQU         $0080
000050A6  =00000100               6425  match_MOVE_dest_An_indir_predec EQU         $0100
000050A6  =000000C0               6426  match_MOVE_dest_An_indir_postinc    EQU         $00C0
000050A6  =000001C0               6427  match_MOVE_dest_abs_add_word        EQU         $01C0
000050A6  =000009C0               6428  match_MOVE_dest_abs_add_long        EQU         $09C0
000050A6                          6429  
000050A6  =00000000               6430  match_MOVE_dest_D0              EQU         $0000
000050A6  =00000200               6431  match_MOVE_dest_D1              EQU         $0200
000050A6  =00000400               6432  match_MOVE_dest_D2              EQU         $0400
000050A6  =00000600               6433  match_MOVE_dest_D3              EQU         $0600
000050A6  =00000800               6434  match_MOVE_dest_D4              EQU         $0800
000050A6  =00000A00               6435  match_MOVE_dest_D5              EQU         $0A00
000050A6  =00000C00               6436  match_MOVE_dest_D6              EQU         $0C00
000050A6  =00000E00               6437  match_MOVE_dest_D7              EQU         $0E00
000050A6                          6438  
000050A6  =00000040               6439  match_MOVE_dest_A0              EQU         $0040
000050A6  =00000240               6440  match_MOVE_dest_A1              EQU         $0240
000050A6  =00000440               6441  match_MOVE_dest_A2              EQU         $0440
000050A6  =00000640               6442  match_MOVE_dest_A3              EQU         $0640
000050A6  =00000840               6443  match_MOVE_dest_A4              EQU         $0840
000050A6  =00000A40               6444  match_MOVE_dest_A5              EQU         $0A40
000050A6  =00000C40               6445  match_MOVE_dest_A6              EQU         $0C40
000050A6  =00000E40               6446  match_MOVE_dest_A7              EQU         $0E40
000050A6                          6447  
000050A6  =00000080               6448  match_MOVE_dest_An_indir_r0     EQU         $0080
000050A6  =00000280               6449  match_MOVE_dest_An_indir_r1     EQU         $0280
000050A6  =00000480               6450  match_MOVE_dest_An_indir_r2     EQU         $0480
000050A6  =00000680               6451  match_MOVE_dest_An_indir_r3     EQU         $0680
000050A6  =00000880               6452  match_MOVE_dest_An_indir_r4     EQU         $0880
000050A6  =00000A80               6453  match_MOVE_dest_An_indir_r5     EQU         $0A80
000050A6  =00000C80               6454  match_MOVE_dest_An_indir_r6     EQU         $0C80
000050A6  =00000E80               6455  match_MOVE_dest_An_indir_r7     EQU         $0E80
000050A6                          6456  
000050A6  =000000C0               6457  match_MOVE_dest_An_indir_pinc_r0        EQU         $00C0
000050A6  =000002C0               6458  match_MOVE_dest_An_indir_pinc_r1        EQU         $02C0
000050A6  =000004C0               6459  match_MOVE_dest_An_indir_pinc_r2        EQU         $04C0
000050A6  =000006C0               6460  match_MOVE_dest_An_indir_pinc_r3        EQU         $06C0
000050A6  =000008C0               6461  match_MOVE_dest_An_indir_pinc_r4        EQU         $08C0
000050A6  =00000AC0               6462  match_MOVE_dest_An_indir_pinc_r5        EQU         $0AC0
000050A6  =00000CC0               6463  match_MOVE_dest_An_indir_pinc_r6        EQU         $0CC0
000050A6  =00000EC0               6464  match_MOVE_dest_An_indir_pinc_r7        EQU         $0EC0
000050A6                          6465  
000050A6  =00000100               6466  match_MOVE_dest_An_indir_pdec_r0            EQU         $0100
000050A6  =00000300               6467  match_MOVE_dest_An_indir_pdec_r1            EQU         $0300
000050A6  =00000500               6468  match_MOVE_dest_An_indir_pdec_r2            EQU         $0500
000050A6  =00000700               6469  match_MOVE_dest_An_indir_pdec_r3            EQU         $0700
000050A6  =00000900               6470  match_MOVE_dest_An_indir_pdec_r4            EQU         $0900
000050A6  =00000B00               6471  match_MOVE_dest_An_indir_pdec_r5            EQU         $0B00
000050A6  =00000D00               6472  match_MOVE_dest_An_indir_pdec_r6            EQU         $0D00
000050A6  =00000F00               6473  match_MOVE_dest_An_indir_pdec_r7            EQU         $0F00
000050A6                          6474  
000050A6  =000001C0               6475  match_MOVE_dest_imm_add                           EQU         $01C0
000050A6  =000001C0               6476  match_MOVE_dest_imm_add_word                      EQU         $01C0
000050A6  =000009C0               6477  match_MOVE_dest_imm_add_long                      EQU         $09C0
000050A6                          6478  
000050A6                          6479  
000050A6                          6480  
000050A6                          6481  
000050A6                          6482  -------------------- end include --------------------
000050A6                          6483              INCLUDE 'MOVEM Subroutine.x68'
000050A6                          6484  
000050A6  48E7 7D3E               6485  MOVEM_sub                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)                           ;preserve the registers, 
000050AA  C2BC 00000400           6486                                           AND.L             #mask_MOVEM_dir,D1                          ;load the mask to determine the direction
000050B0                          6487                                           
000050B0  B2BC 00000400           6488                                           CMP.L             #match_MOVEM_reg_mem,D1                     ;check to see if it's reg to mem
000050B6  6700 0014               6489                                           BEQ               MOVEM_reg_mem                               ;if equal go figure out list
000050BA  6600 0002               6490                                           BNE               MOVEM_mem_reg_match                         ;if not go check mem to reg
000050BE                          6491                                           
000050BE                          6492                                           
000050BE  B2BC 00000400           6493  MOVEM_mem_reg_match                     CMP.L              #match_MOVEM_mem_reg,D1                     ;check if mem to reg 
000050C4  6700 0434               6494                                          BEQ                MOVEM_determine_second_op                   ;if equal go figure out the register
000050C8  6600 08FE               6495                                          BNE                MOVEM_ERROR                                       ;if not equal go to error message
000050CC  2A18                    6496  MOVEM_reg_mem                            MOVE.L         (A0)+,D5                                ;pull the register list
000050CE  4241                    6497                                           CLR            D1
000050D0  223C 00008000           6498                                           MOVE.L         #mask_MOVEM_reg_mem_D0,D1                     ;load mask into register
000050D6  B2BC 00008000           6499                                           CMP.L          #match_MOVEM_reg_mem_D0,D1                    ;check to see if the D0 is on the list
000050DC  6700 016E               6500                                           BEQ            MOVEM_D0_reg_list_out
000050E0  6600 0002               6501                                           BNE            MOVEM_reg_mem_D1
000050E4                          6502  
000050E4  2A18                    6503  MOVEM_reg_mem_D1                         MOVE.L         (A0)+,D5                                ;pull the register list
000050E6  4241                    6504                                           CLR            D1
000050E8  223C 00004000           6505                                           MOVE.L         #mask_MOVEM_reg_mem_D1,D1                     ;load mask into register
000050EE  B2BC 00004000           6506                                           CMP.L          #match_MOVEM_reg_mem_D1,D1                    ;check to see if the D0 is on the list
000050F4  6700 0160               6507                                           BEQ            MOVEM_D1_reg_list_out
000050F8  6600 0002               6508                                           BNE            MOVEM_reg_mem_D2
000050FC                          6509  
000050FC  2A18                    6510  MOVEM_reg_mem_D2                         MOVE.L         (A0)+,D5                                ;pull the register list
000050FE  4241                    6511                                           CLR            D1
00005100  223C 00002000           6512                                           MOVE.L         #mask_MOVEM_reg_mem_D2,D1                     ;load mask into register
00005106  B2BC 00002000           6513                                           CMP.L          #match_MOVEM_reg_mem_D2,D1                    ;check to see if the D0 is on the list
0000510C  6700 0152               6514                                           BEQ            MOVEM_D2_reg_list_out
00005110  6600 0002               6515                                           BNE            MOVEM_reg_mem_D3
00005114                          6516  
00005114  2A18                    6517  MOVEM_reg_mem_D3                         MOVE.L         (A0)+,D5                                ;pull the register list
00005116  4241                    6518                                           CLR            D1
00005118  223C 00001000           6519                                           MOVE.L         #mask_MOVEM_reg_mem_D3,D1                     ;load mask into register
0000511E  B2BC 00001000           6520                                           CMP.L          #match_MOVEM_reg_mem_D3,D1                    ;check to see if the D0 is on the list
00005124  6700 0144               6521                                           BEQ            MOVEM_D3_reg_list_out
00005128  6600 0002               6522                                           BNE            MOVEM_reg_mem_D4
0000512C                          6523  
0000512C  2A18                    6524  MOVEM_reg_mem_D4                         MOVE.L         (A0)+,D5                                ;pull the register list
0000512E  4241                    6525                                           CLR            D1
00005130  223C 00000800           6526                                           MOVE.L         #mask_MOVEM_reg_mem_D4,D1                     ;load mask into register
00005136  B2BC 00000800           6527                                           CMP.L          #match_MOVEM_reg_mem_D4,D1                    ;check to see if the D0 is on the list
0000513C  6700 0136               6528                                           BEQ            MOVEM_D4_reg_list_out
00005140  6600 0002               6529                                           BNE            MOVEM_reg_mem_D5
00005144                          6530  
00005144  2A18                    6531  MOVEM_reg_mem_D5                         MOVE.L         (A0)+,D5                                ;pull the register list
00005146  4241                    6532                                           CLR            D1
00005148  223C 00000400           6533                                           MOVE.L         #mask_MOVEM_reg_mem_D5,D1                     ;load mask into register
0000514E  B2BC 00000400           6534                                           CMP.L          #match_MOVEM_reg_mem_D5,D1                    ;check to see if the D0 is on the list
00005154  6700 0128               6535                                           BEQ            MOVEM_D5_reg_list_out
00005158  6600 0002               6536                                           BNE            MOVEM_reg_mem_D6
0000515C                          6537  
0000515C  2A18                    6538  MOVEM_reg_mem_D6                         MOVE.L         (A0)+,D5                                ;pull the register list
0000515E  4241                    6539                                           CLR            D1
00005160  223C 00000200           6540                                           MOVE.L         #mask_MOVEM_reg_mem_D6,D1                     ;load mask into register
00005166  B2BC 00000200           6541                                           CMP.L          #match_MOVEM_reg_mem_D6,D1                    ;check to see if the D0 is on the list
0000516C  6700 011A               6542                                           BEQ            MOVEM_D6_reg_list_out
00005170  6600 0002               6543                                           BNE            MOVEM_reg_mem_D7
00005174                          6544  
00005174  2A18                    6545  MOVEM_reg_mem_D7                         MOVE.L         (A0)+,D5                                ;pull the register list
00005176  4241                    6546                                           CLR            D1
00005178  223C 00000100           6547                                           MOVE.L         #mask_MOVEM_reg_mem_D7,D1                     ;load mask into register
0000517E  B2BC 00000100           6548                                           CMP.L          #match_MOVEM_reg_mem_D7,D1                    ;check to see if the D0 is on the list
00005184  6700 010C               6549                                           BEQ            MOVEM_D7_reg_list_out
00005188  6600 0002               6550                                           BNE            MOVEM_reg_mem_A0
0000518C                          6551  
0000518C                          6552  
0000518C  2A18                    6553  MOVEM_reg_mem_A0                         MOVE.L         (A0)+,D5                                ;pull the register list
0000518E  4241                    6554                                           CLR            D1
00005190  227C 00000080           6555                                           MOVE.L         #mask_MOVEM_reg_mem_A0,A1                     ;load mask into register
00005196  B3FC 00000080           6556                                           CMP.L          #match_MOVEM_reg_mem_A0,A1                    ;check to see if the A0 is on the list
0000519C  6700 00FE               6557                                           BEQ            MOVEM_A0_reg_list_out
000051A0  6600 0002               6558                                           BNE            MOVEM_reg_mem_A1
000051A4                          6559  
000051A4  2A18                    6560  MOVEM_reg_mem_A1                         MOVE.L         (A0)+,D5                                ;pull the register list
000051A6  4241                    6561                                           CLR            D1
000051A8  227C 00000040           6562                                           MOVE.L         #mask_MOVEM_reg_mem_A1,A1                     ;load mask into register
000051AE  B3FC 00000040           6563                                           CMP.L          #match_MOVEM_reg_mem_A1,A1                    ;check to see if the A0 is on the list
000051B4  6700 00F0               6564                                           BEQ            MOVEM_A1_reg_list_out
000051B8  6600 0002               6565                                           BNE            MOVEM_reg_mem_A2
000051BC                          6566  
000051BC  2A18                    6567  MOVEM_reg_mem_A2                         MOVE.L         (A0)+,D5                                ;pull the register list
000051BE  4241                    6568                                           CLR            D1
000051C0  227C 00000020           6569                                           MOVE.L         #mask_MOVEM_reg_mem_A2,A1                     ;load mask into register
000051C6  B3FC 00000020           6570                                           CMP.L          #match_MOVEM_reg_mem_A2,A1                    ;check to see if the A0 is on the list
000051CC  6700 00E2               6571                                           BEQ            MOVEM_A2_reg_list_out
000051D0  6600 0002               6572                                           BNE            MOVEM_reg_mem_A3
000051D4                          6573  
000051D4  2A18                    6574  MOVEM_reg_mem_A3                         MOVE.L         (A0)+,D5                                ;pull the register list
000051D6  4241                    6575                                           CLR            D1
000051D8  227C 00000010           6576                                           MOVE.L         #mask_MOVEM_reg_mem_A3,A1                     ;load mask into register
000051DE  B3FC 00000010           6577                                           CMP.L          #match_MOVEM_reg_mem_A3,A1                    ;check to see if the A0 is on the list
000051E4  6700 00D4               6578                                           BEQ            MOVEM_A3_reg_list_out
000051E8  6600 0002               6579                                           BNE            MOVEM_reg_mem_A4
000051EC                          6580  
000051EC  2A18                    6581  MOVEM_reg_mem_A4                         MOVE.L         (A0)+,D5                                ;pull the register list
000051EE  4241                    6582                                           CLR            D1
000051F0  227C 00000008           6583                                           MOVE.L         #mask_MOVEM_reg_mem_A4,A1                     ;load mask into register
000051F6  B3FC 00000008           6584                                           CMP.L          #match_MOVEM_reg_mem_A4,A1                    ;check to see if the A0 is on the list
000051FC  6700 00C6               6585                                           BEQ            MOVEM_A4_reg_list_out
00005200  6600 0002               6586                                           BNE            MOVEM_reg_mem_A5
00005204                          6587  
00005204  2A18                    6588  MOVEM_reg_mem_A5                         MOVE.L         (A0)+,D5                                ;pull the register list
00005206  4241                    6589                                           CLR            D1
00005208  227C 00000004           6590                                           MOVE.L         #mask_MOVEM_reg_mem_A5,A1                     ;load mask into register
0000520E  B3FC 00000004           6591                                           CMP.L          #match_MOVEM_reg_mem_A5,A1                    ;check to see if the A0 is on the list
00005214  6700 00B8               6592                                           BEQ            MOVEM_A5_reg_list_out
00005218  6600 0002               6593                                           BNE            MOVEM_reg_mem_A6
0000521C                          6594  
0000521C  2A18                    6595  MOVEM_reg_mem_A6                         MOVE.L         (A0)+,D5                                ;pull the register list
0000521E  4241                    6596                                           CLR            D1
00005220  227C 00000002           6597                                           MOVE.L         #mask_MOVEM_reg_mem_A6,A1                     ;load mask into register
00005226  B3FC 00000002           6598                                           CMP.L          #match_MOVEM_reg_mem_A6,A1                    ;check to see if the A0 is on the list
0000522C  6700 00AA               6599                                           BEQ            MOVEM_A6_reg_list_out
00005230  6600 0002               6600                                           BNE            MOVEM_reg_mem_A7
00005234                          6601  
00005234  2A18                    6602  MOVEM_reg_mem_A7                         MOVE.L         (A0)+,D5                                ;pull the register list
00005236  4241                    6603                                           CLR            D1
00005238  227C 00000001           6604                                           MOVE.L         #mask_MOVEM_reg_mem_A7,A1                     ;load mask into register
0000523E  B3FC 00000001           6605                                           CMP.L          #match_MOVEM_reg_mem_A7,A1                    ;check to see if the A0 is on the list
00005244  6700 009C               6606                                           BEQ            MOVEM_A7_reg_list_out
00005248  6600 00A4               6607                                           BNE            MOVEM_determine_second_operand
0000524C                          6608  
0000524C                          6609  ;------------------------------------------------------Register List Output----------------------------------------
0000524C  22FC 00008494           6610  MOVEM_D0_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005252  4EB8 50E4               6611                                          JSR             MOVEM_reg_mem_D1            ;go check D1
00005256                          6612                                          
00005256  22FC 00008494           6613  MOVEM_D1_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000525C  4EB8 50FC               6614                                          JSR             MOVEM_reg_mem_D2            ;go check D2
00005260                          6615  
00005260  22FC 00008494           6616  MOVEM_D2_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005266  4EB8 5114               6617                                          JSR             MOVEM_reg_mem_D3            ;go check D3
0000526A                          6618  
0000526A  22FC 00008494           6619  MOVEM_D3_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005270  4EB8 512C               6620                                          JSR             MOVEM_reg_mem_D4            ;go check D4
00005274                          6621  
00005274  22FC 00008494           6622  MOVEM_D4_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000527A  4EB8 5144               6623                                          JSR             MOVEM_reg_mem_D5            ;go check D5
0000527E                          6624  
0000527E  22FC 00008494           6625  MOVEM_D5_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005284  4EB8 515C               6626                                          JSR             MOVEM_reg_mem_D6            ;go check D6
00005288                          6627  
00005288  22FC 00008494           6628  MOVEM_D6_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000528E  4EB8 5174               6629                                          JSR             MOVEM_reg_mem_D7            ;go check D7
00005292                          6630  
00005292  22FC 00008494           6631  MOVEM_D7_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005298  4EB8 518C               6632                                          JSR             MOVEM_reg_mem_A0            ;go check A0
0000529C                          6633  
0000529C  22FC 000084AC           6634  MOVEM_A0_reg_list_out                   MOVE.L          #ea_A0,(A1)+                ;load the register into A1
000052A2  4EB8 51A4               6635                                          JSR             MOVEM_reg_mem_A1            ;go check D1
000052A6                          6636                                          
000052A6  22FC 000084AF           6637  MOVEM_A1_reg_list_out                   MOVE.L          #ea_A1,(A1)+                ;load the register into A1
000052AC  4EB8 51BC               6638                                          JSR             MOVEM_reg_mem_A2            ;go check D2
000052B0                          6639  
000052B0  22FC 000084B2           6640  MOVEM_A2_reg_list_out                   MOVE.L          #ea_A2,(A1)+                ;load the register into A1
000052B6  4EB8 51D4               6641                                          JSR             MOVEM_reg_mem_A3            ;go check D3
000052BA                          6642  
000052BA  22FC 000084B5           6643  MOVEM_A3_reg_list_out                   MOVE.L          #ea_A3,(A1)+                ;load the register into A1
000052C0  4EB8 51EC               6644                                          JSR             MOVEM_reg_mem_A4            ;go check D4
000052C4                          6645  
000052C4  22FC 000084B8           6646  MOVEM_A4_reg_list_out                   MOVE.L          #ea_A4,(A1)+                ;load the register into A1
000052CA  4EB8 5204               6647                                          JSR             MOVEM_reg_mem_A5            ;go check D5
000052CE                          6648  
000052CE  22FC 000084BB           6649  MOVEM_A5_reg_list_out                   MOVE.L          #ea_A5,(A1)+                ;load the register into A1
000052D4  4EB8 521C               6650                                          JSR             MOVEM_reg_mem_A6            ;go check D6
000052D8                          6651  
000052D8  22FC 000084BE           6652  MOVEM_A6_reg_list_out                   MOVE.L          #ea_A6,(A1)+                ;load the register into A1
000052DE  4EB8 5234               6653                                          JSR             MOVEM_reg_mem_A7            ;go check D7
000052E2                          6654  
000052E2  22FC 000084C1           6655  MOVEM_A7_reg_list_out                   MOVE.L          #ea_A7,(A1)+                ;load the register into A1
000052E8  4EB9 000054FA           6656                                          JSR             MOVEM_determine_second_op   ;go figure out the second operand
000052EE                          6657  
000052EE                          6658  
000052EE  4241                    6659  MOVEM_determine_second_operand          CLR             D1
000052F0  C2BC 0000003C           6660                                          AND.L           #mask_MOVEM_ea_mode,D1                          ;move the mask to D1
000052F6                          6661  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
000052F6  B2BC 00000010           6662  MOVEM_add_reg_indir              CMP.L             #match_MOVEM_An_indir,D1                        ;check to see if mode is add reg indir
000052FC  6600 0006               6663                                   BNE               MOVEM_add_reg_indir_predec                    ;if not, go check add reg indir predec 
00005300  6700 003A               6664                                   BEQ               MOVEM_An_indir_reg                            ;if equal go figure out the register           
00005304                          6665             
00005304  B2BC 00000020           6666  MOVEM_add_reg_indir_predec       CMP.L             #match_MOVEM_An_indir_pdec,D1                  ;check to see if mode is add reg indor w/ postinc
0000530A  6600 0006               6667                                   BNE               MOVEM_abs_add_word                          ;if not go check add reg indir/predec
0000530E  6700 00FC               6668                                   BEQ               MOVEM_An_indir_predec                          ;if equal go figure out the register
00005312                          6669                        
00005312                          6670  
00005312  C4BC 00000038           6671  MOVEM_abs_add_word               AND.L             #mask_MOVEM_abs_add,D2                        ;load mask to determine if abs add word or long
00005318                          6672                                   
00005318  B4BC 00000038           6673                                   CMP.L             #match_MOVEM_abs_add_word,D2                  ;check if abs add word
0000531E  2A18                    6674                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00005320  6600 0006               6675                                   BNE               MOVEM_abs_add_long                                  ;if not go check abs add long
00005324  6700 01B6               6676                                   BEQ               MOVEM_abs_add_word_out                              ;if equal go to output
00005328                          6677    
00005328  B4BC 00000039           6678  MOVEM_abs_add_long               CMP.L             #match_MOVEM_abs_add_long,D2                  ;check to see if abs add long
0000532E  6700 01BA               6679                                   BEQ               MOVEM_abs_add_long_out                              ;if equal go to output
00005332  6600 0694               6680                                   BNE               MOVEM_ERROR                                         ;if not equal go to error mesage MOVE routine
00005336                          6681  
00005336                          6682  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00005336                          6683                                   
00005336  C4BC 0000003F           6684                                   AND.L           #mask_MOVEM_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
0000533C                          6685  ;------------------Address Register Indirect-----------------------
0000533C  B4BC 00000010           6686  MOVEM_An_indir_reg                CMP.L          #match_MOVEM_An_indir_r0,D2              ;check reg is equal to 0
00005342  6600 0006               6687                                   BNE             MOVEM_An_indir_r1                           ;if not try reg 1
00005346  6700 0064               6688                                   BEQ             MOVEM_An_indir_r0_out                       ;if equal go to output MOVEroutine
0000534A                          6689  
0000534A  B4BC 00000011           6690  MOVEM_An_indir_r1                 CMP.L           #match_MOVEM_An_indir_r1,D2              ;check reg is equal to 1
00005350  6600 0006               6691                                   BNE             MOVEM_An_indir_r2                           ;if not try reg 2
00005354  6700 0062               6692                                   BEQ             MOVEM_An_indir_r1_out                       ;if equal go to output MOVEroutine
00005358                          6693  
00005358  B4BC 00000012           6694  MOVEM_An_indir_r2                 CMP.L           #match_MOVEM_An_indir_r2,D2              ;check reg is equal to 2
0000535E  6600 0006               6695                                   BNE             MOVEM_An_indir_r3                           ;if not try reg 3
00005362  6700 0060               6696                                   BEQ             MOVEM_An_indir_r2_out                       ;if equal go to output MOVEroutine
00005366                          6697  
00005366  B4BC 00000013           6698  MOVEM_An_indir_r3                 CMP.L           #match_MOVEM_An_indir_r3,D2              ;check reg is equal to 3
0000536C  6600 0006               6699                                   BNE             MOVEM_An_indir_r4                           ;if not try reg 4
00005370  6700 005E               6700                                   BEQ             MOVEM_An_indir_r3_out                       ;if equal go to output MOVEroutine
00005374                          6701      
00005374  B4BC 00000014           6702  MOVEM_An_indir_r4                 CMP.L           #match_MOVEM_An_indir_r4,D2              ;check reg is equal to 4
0000537A  6600 0006               6703                                   BNE             MOVEM_An_indir_r5                           ;if not try reg 5
0000537E  6700 005C               6704                                   BEQ             MOVEM_An_indir_r4_out                       ;if equal go to output MOVEroutine
00005382                          6705          
00005382  B4BC 00000015           6706  MOVEM_An_indir_r5                 CMP.L           #match_MOVEM_An_indir_r5,D2              ;check reg is equal to 5
00005388  6600 0006               6707                                   BNE             MOVEM_An_indir_r6                           ;if not try reg 6
0000538C  6700 005A               6708                                   BEQ             MOVEM_An_indir_r5_out                       ;if equal go to output MOVEroutine
00005390                          6709  
00005390  B4BC 00000016           6710  MOVEM_An_indir_r6                 CMP.L           #match_MOVEM_An_indir_r6,D2              ;check reg is equal to 6
00005396  6600 0006               6711                                   BNE             MOVEM_An_indir_r7                           ;if not try reg 7
0000539A  6700 0058               6712                                   BEQ             MOVEM_An_indir_r6_out                       ;if equal go to output MOVEroutine
0000539E                          6713  
0000539E  B4BC 00000017           6714  MOVEM_An_indir_r7                 CMP.L           #match_MOVEM_An_indir_r7,D2              ;check reg is equal to 7
000053A4  6700 005A               6715                                   BEQ             MOVEM_An_indir_r7_out                       ;if equal go to output MOVEroutine
000053A8  6600 061E               6716                                   BNE             MOVEM_ERROR                                   :if not equal to an addresssing mode, pritn error
000053AC                          6717  
000053AC                          6718  ;--------------------Address Register Indirect Output-----------------------
000053AC  227C 000084D4           6719  MOVEM_An_indir_r0_out                  MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
000053B2  4EB9 000054FA           6720                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000053B8                          6721  
000053B8  227C 000084D9           6722  MOVEM_An_indir_r1_out                  MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
000053BE  4EB9 000054FA           6723                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000053C4                          6724  
000053C4  227C 000084DE           6725  MOVEM_An_indir_r2_out                  MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
000053CA  4EB9 000054FA           6726                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000053D0                          6727  
000053D0  227C 000084E3           6728  MOVEM_An_indir_r3_out                  MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
000053D6  4EB9 000054FA           6729                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000053DC                          6730  
000053DC  227C 000084E8           6731  MOVEM_An_indir_r4_out                  MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
000053E2  4EB9 000054FA           6732                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000053E8                          6733  
000053E8  227C 000084ED           6734  MOVEM_An_indir_r5_out                  MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
000053EE  4EB9 000054FA           6735                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000053F4                          6736  
000053F4  227C 000084F2           6737  MOVEM_An_indir_r6_out                  MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
000053FA  4EB9 000054FA           6738                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005400                          6739                                          
00005400  227C 000084F7           6740  MOVEM_An_indir_r7_out                  MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
00005406  4EB9 000054FA           6741                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000540C                          6742  
0000540C                          6743  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000540C  B4BC 00000020           6744  MOVEM_An_indir_predec                       CMP.L      #match_MOVEM_An_indir_pdec_r0,D2       ;check reg is equal to 0
00005412  6600 0006               6745                                              BNE        MOVEM_An_indir_pdec_r1                      ;if not try reg 1
00005416  6700 0064               6746                                              BEQ        MOVEM_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
0000541A                          6747  
0000541A  B4BC 00000021           6748  MOVEM_An_indir_pdec_r1                      CMP.L      #match_MOVEM_An_indir_pdec_r1,D2       ;check reg is equal to 1
00005420  6600 0006               6749                                              BNE        MOVEM_An_indir_pdec_r2                      ;if not try reg 2
00005424  6700 0062               6750                                              BEQ        MOVEM_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
00005428                          6751  
00005428  B4BC 00000022           6752  MOVEM_An_indir_pdec_r2                      CMP.L      #match_MOVEM_An_indir_pdec_r2,D2       ;check reg is equal to 2
0000542E  6600 0006               6753                                              BNE        MOVEM_An_indir_pdec_r3                      ;if not try reg 3
00005432  6700 0060               6754                                              BEQ        MOVEM_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
00005436                          6755  
00005436  B4BC 00000023           6756  MOVEM_An_indir_pdec_r3                      CMP.L      #match_MOVEM_An_indir_pdec_r3,D2       ;check reg is equal to 3
0000543C  6600 0006               6757                                              BNE        MOVEM_An_indir_pdec_r4                      ;if not try reg 4
00005440  6700 005E               6758                                              BEQ        MOVEM_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
00005444                          6759  
00005444  B4BC 00000024           6760  MOVEM_An_indir_pdec_r4                      CMP.L      #match_MOVEM_An_indir_pdec_r4,D2       ;check reg is equal to 4
0000544A  6600 0006               6761                                              BNE        MOVEM_An_indir_pdec_r5                      ;if not try reg 5
0000544E  6700 005C               6762                                              BEQ        MOVEM_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
00005452                          6763  
00005452  B4BC 00000025           6764  MOVEM_An_indir_pdec_r5                      CMP.L      #match_MOVEM_An_indir_pdec_r5,D2       ;check reg is equal to 5
00005458  6600 0006               6765                                              BNE        MOVEM_An_indir_pdec_r6                     ;if not try reg 6
0000545C  6700 005A               6766                                              BEQ        MOVEM_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
00005460                          6767  
00005460  B4BC 00000026           6768  MOVEM_An_indir_pdec_r6                      CMP.L      #match_MOVEM_An_indir_pdec_r6,D2       ;check reg is equal to 6
00005466  6600 0006               6769                                              BNE        MOVEM_An_indir_pdec_r7                     ;if not try reg 7
0000546A  6700 0058               6770                                              BEQ        MOVEM_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
0000546E                          6771  
0000546E  B4BC 00000027           6772  MOVEM_An_indir_pdec_r7                      CMP.L      #match_MOVEM_An_indir_pdec_r7,D2       ;check reg is equal to 7
00005474  6700 005A               6773                                              BEQ        MOVEM_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
00005478  6600 054E               6774                                              BNE        MOVEM_ERROR                                    :if not equal to an addresssing mode, pritn error
0000547C                          6775  
0000547C                          6776  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
0000547C  227C 0000852C           6777  MOVEM_An_indir_pdec_r0_out                 MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00005482  4EB9 000054FA           6778                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005488                          6779                                              
00005488  227C 00008532           6780  MOVEM_An_indir_pdec_r1_out                 MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
0000548E  4EB9 000054FA           6781                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005494                          6782  
00005494  227C 00008538           6783  MOVEM_An_indir_pdec_r2_out                 MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
0000549A  4EB9 000054FA           6784                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000054A0                          6785  
000054A0  227C 0000853E           6786  MOVEM_An_indir_pdec_r3_out                 MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
000054A6  4EB9 000054FA           6787                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000054AC                          6788  
000054AC  227C 00008544           6789  MOVEM_An_indir_pdec_r4_out                 MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
000054B2  4EB9 000054FA           6790                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000054B8                          6791  
000054B8  227C 0000854A           6792  MOVEM_An_indir_pdec_r5_out                 MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
000054BE  4EB9 000054FA           6793                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000054C4                          6794  
000054C4  227C 00008550           6795  MOVEM_An_indir_pdec_r6_out                 MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
000054CA  4EB9 000054FA           6796                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000054D0                          6797  
000054D0  227C 00008556           6798  MOVEM_An_indir_pdec_r7_out                 MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
000054D6  4EB9 000054FA           6799                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000054DC                          6800          
000054DC                          6801  ;------------------Absolute Addressing Output-----------------------
000054DC  22FC 00008566           6802  MOVEM_abs_add_word_out                MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000054E2  22C5                    6803                                        MOVE.L      D5,(A1)+                           ;load address                  
000054E4  4CDF 7CBE               6804                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
000054E8  4E75                    6805                                        RTS                                            :return to MOVEroutine
000054EA                          6806                                             
000054EA                          6807  
000054EA  2A18                    6808  MOVEM_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000054EC  22FC 00008566           6809                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000054F2  22C5                    6810                                        MOVE.L      D5,(A1)+                           ;load address                  
000054F4  4CDF 7CBE               6811                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
000054F8  4E75                    6812                                        RTS                                            :return to MOVEroutine
000054FA                          6813                                              ;return to MOVEroutine                                            
000054FA                          6814  
000054FA  4241                    6815  MOVEM_determine_second_op         CLR             D1
000054FC                          6816  
000054FC  C2BC 0000003C           6817                                   AND.L             #mask_MOVEM_ea_mode,D1                          ;move the mask to D1
00005502                          6818  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00005502  B2BC 00000010           6819  MOVEM_m2r_An_indir               CMP.L             #match_MOVEM_An_indir,D1                        ;check to see if mode is add reg indir
00005508  6600 0006               6820                                   BNE               MOVEM_m2r_An_indir_postinc                    ;if not, go check add reg indir predec 
0000550C  6700 003A               6821                                   BEQ               MOVEM_m2r_An_indir_reg                            ;if equal go figure out the register           
00005510                          6822                                   
00005510  B2BC 00000010           6823  MOVEM_m2r_An_indir_postinc       CMP.L             #match_MOVEM_An_indir_pinc,D1              ;check to see if mode is add reg indir w/predec
00005516  6600 0006               6824                                   BNE               MOVEM_m2r_abs_add_word                                  ;if not go check abs add word
0000551A  6700 00EC               6825                                   BEQ               MOVEM_m2r_An_indir_pinc_reg                          ;if equal go figure out the register
0000551E                          6826  
0000551E  C4BC 00000038           6827  MOVEM_m2r_abs_add_word           AND.L             #mask_MOVEM_abs_add,D2                        ;load mask to determine if abs add word or long
00005524                          6828                                   
00005524  B4BC 00000038           6829                                   CMP.L             #match_MOVEM_abs_add_word,D2                  ;check if abs add word
0000552A  2A18                    6830                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
0000552C  6600 0006               6831                                   BNE               MOVEM_m2r_abs_add_long                                  ;if not go check abs add long
00005530  6700 0256               6832                                   BEQ               MOVEM_m2r_abs_add_word_out                              ;if equal go to output
00005534                          6833    
00005534  B4BC 00000039           6834  MOVEM_m2r_abs_add_long           CMP.L             #match_MOVEM_abs_add_long,D2                  ;check to see if abs add long
0000553A  6700 025A               6835                                   BEQ               MOVEM_m2r_abs_add_long_out                              ;if equal go to output
0000553E  6600 0488               6836                                   BNE               MOVEM_ERROR                                         ;if not equal go to error mesage MOVE routine
00005542                          6837  
00005542                          6838  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00005542                          6839                                   
00005542  C4BC 0000003F           6840                                   AND.L              #mask_MOVEM_ea_reg_and_mode,D2             ;load the mask into D2 for the mode and the register
00005548                          6841  ;------------------Address Register Indirect-----------------------
00005548  B4BC 00000010           6842  MOVEM_m2r_An_indir_reg          CMP.L          #match_MOVEM_An_indir_r0,D2              ;check reg is equal to 0
0000554E  6600 0006               6843                                   BNE             MOVEM_m2r_An_indir_r1                           ;if not try reg 1
00005552  6700 0064               6844                                   BEQ             MOVEM_m2r_An_indir_r0_out                       ;if equal go to output MOVEroutine
00005556                          6845  
00005556  B4BC 00000011           6846  MOVEM_m2r_An_indir_r1           CMP.L           #match_MOVEM_An_indir_r1,D2              ;check reg is equal to 1
0000555C  6600 0006               6847                                   BNE             MOVEM_m2r_An_indir_r2                           ;if not try reg 2
00005560  6700 0060               6848                                   BEQ             MOVEM_m2r_An_indir_r1_out                       ;if equal go to output MOVEroutine
00005564                          6849  
00005564  B4BC 00000012           6850  MOVEM_m2r_An_indir_r2           CMP.L           #match_MOVEM_An_indir_r2,D2              ;check reg is equal to 2
0000556A  6600 0006               6851                                   BNE             MOVEM_m2r_An_indir_r3                           ;if not try reg 3
0000556E  6700 005C               6852                                   BEQ             MOVEM_m2r_An_indir_r2_out                       ;if equal go to output MOVEroutine
00005572                          6853  
00005572  B4BC 00000013           6854  MOVEM_m2r_An_indir_r3           CMP.L           #match_MOVEM_An_indir_r3,D2              ;check reg is equal to 3
00005578  6600 0006               6855                                   BNE             MOVEM_m2r_An_indir_r4                           ;if not try reg 4
0000557C  6700 0058               6856                                   BEQ             MOVEM_m2r_An_indir_r3_out                       ;if equal go to output MOVEroutine
00005580                          6857      
00005580  B4BC 00000014           6858  MOVEM_m2r_An_indir_r4           CMP.L           #match_MOVEM_An_indir_r4,D2              ;check reg is equal to 4
00005586  6600 0006               6859                                   BNE             MOVEM_m2r_An_indir_r5                           ;if not try reg 5
0000558A  6700 0054               6860                                   BEQ             MOVEM_m2r_An_indir_r4_out                       ;if equal go to output MOVEroutine
0000558E                          6861          
0000558E  B4BC 00000015           6862  MOVEM_m2r_An_indir_r5           CMP.L           #match_MOVEM_An_indir_r5,D2              ;check reg is equal to 5
00005594  6600 0006               6863                                   BNE             MOVEM_m2r_An_indir_r6                           ;if not try reg 6
00005598  6700 0050               6864                                   BEQ             MOVEM_m2r_An_indir_r5_out                       ;if equal go to output MOVEroutine
0000559C                          6865  
0000559C  B4BC 00000016           6866  MOVEM_m2r_An_indir_r6           CMP.L           #match_MOVEM_An_indir_r6,D2              ;check reg is equal to 6
000055A2  6600 0006               6867                                   BNE             MOVEM_m2r_An_indir_r7                           ;if not try reg 7
000055A6  6700 004C               6868                                   BEQ             MOVEM_m2r_An_indir_r6_out                       ;if equal go to output MOVEroutine
000055AA                          6869  
000055AA  B4BC 00000017           6870  MOVEM_m2r_An_indir_r7           CMP.L           #match_MOVEM_An_indir_r7,D2              ;check reg is equal to 7
000055B0  6700 004C               6871                                   BEQ             MOVEM_m2r_An_indir_r7_out                       ;if equal go to output MOVEroutine
000055B4  6600 0412               6872                                   BNE             MOVEM_ERROR                                   :if not equal to an addresssing mode, pritn error
000055B8                          6873  
000055B8                          6874  ;--------------------Address Register Indirect Output-----------------------
000055B8  227C 000084D4           6875  MOVEM_m2r_An_indir_r0_out                  MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
000055BE  4EB8 54FA               6876                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000055C2                          6877  
000055C2  227C 000084D9           6878  MOVEM_m2r_An_indir_r1_out                  MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
000055C8  4EB8 54FA               6879                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000055CC                          6880  
000055CC  227C 000084DE           6881  MOVEM_m2r_An_indir_r2_out                  MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
000055D2  4EB8 54FA               6882                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000055D6                          6883  
000055D6  227C 000084E3           6884  MOVEM_m2r_An_indir_r3_out                  MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
000055DC  4EB8 54FA               6885                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000055E0                          6886  
000055E0  227C 000084E8           6887  MOVEM_m2r_An_indir_r4_out                  MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
000055E6  4EB8 54FA               6888                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000055EA                          6889  
000055EA  227C 000084ED           6890  MOVEM_m2r_An_indir_r5_out                  MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
000055F0  4EB8 54FA               6891                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000055F4                          6892  
000055F4  227C 000084F2           6893  MOVEM_m2r_An_indir_r6_out                  MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
000055FA  4EB8 54FA               6894                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000055FE                          6895                                          
000055FE  227C 000084F7           6896  MOVEM_m2r_An_indir_r7_out                  MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
00005604  4EB8 54FA               6897                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005608                          6898  
00005608                          6899  ;------------------Address Register Indirect with Post Increment-----------------------
00005608  B4BC 00000018           6900  MOVEM_m2r_An_indir_pinc_reg                 CMP.L      #match_MOVEM_An_indir_pinc_r0,D2        ;check reg is equal to 0
0000560E  6600 0006               6901                                              BNE        MOVEM_m2r_An_indir_pinc_r1                      ;if not try reg 1
00005612  6700 0064               6902                                              BEQ        MOVEM_m2r_An_indir_pinc_r0_out               ;if equal go to output MOVEroutine
00005616                          6903  
00005616  B4BC 00000019           6904  MOVEM_m2r_An_indir_pinc_r1                  CMP.L      #match_MOVEM_An_indir_pinc_r1,D2        ;check reg is equal to 1
0000561C  6600 0006               6905                                              BNE        MOVEM_m2r_An_indir_pinc_r2                      ;if not try reg 2
00005620  6700 0060               6906                                              BEQ        MOVEM_m2r_An_indir_pinc_r1_out               ;if equal go to output MOVEroutine
00005624                          6907  
00005624  B4BC 0000001A           6908  MOVEM_m2r_An_indir_pinc_r2                  CMP.L      #match_MOVEM_An_indir_pinc_r2,D2        ;check reg is equal to 2
0000562A  6600 0006               6909                                              BNE        MOVEM_m2r_An_indir_pinc_r3                      ;if not try reg 3
0000562E  6700 005C               6910                                              BEQ        MOVEM_m2r_An_indir_pinc_r2_out               ;if equal go to output MOVEroutine
00005632                          6911  
00005632  B4BC 0000001B           6912  MOVEM_m2r_An_indir_pinc_r3                  CMP.L      #match_MOVEM_An_indir_pinc_r3,D2        ;check reg is equal to 3
00005638  6600 0006               6913                                              BNE        MOVEM_m2r_An_indir_pinc_r4                      ;if not try reg 4
0000563C  6700 0058               6914                                              BEQ        MOVEM_m2r_An_indir_pinc_r3_out               ;if equal go to output MOVEroutine
00005640                          6915   
00005640  B4BC 0000001C           6916  MOVEM_m2r_An_indir_pinc_r4                  CMP.L      #match_MOVEM_An_indir_pinc_r4,D2        ;check reg is equal to 4
00005646  6600 0006               6917                                              BNE        MOVEM_m2r_An_indir_pinc_r5                      ;if not try reg 5
0000564A  6700 0054               6918                                              BEQ        MOVEM_m2r_An_indir_pinc_r4_out               ;if equal go to output MOVEroutine
0000564E                          6919  
0000564E  B4BC 0000001D           6920  MOVEM_m2r_An_indir_pinc_r5                  CMP.L      #match_MOVEM_An_indir_pinc_r5,D2        ;check reg is equal to 5
00005654  6600 0006               6921                                              BNE        MOVEM_m2r_An_indir_pinc_r6                      ;if not try reg 6
00005658  6700 0050               6922                                              BEQ        MOVEM_m2r_An_indir_pinc_r5_out               ;if equal go to output MOVEroutine
0000565C                          6923  
0000565C  B4BC 0000001E           6924  MOVEM_m2r_An_indir_pinc_r6                  CMP.L      #match_MOVEM_An_indir_pinc_r6,D2         ;check reg is equal to 6
00005662  6600 0006               6925                                              BNE        MOVEM_m2r_An_indir_pinc_r7                        ;if not try reg 7
00005666  6700 004C               6926                                              BEQ        MOVEM_m2r_An_indir_pinc_r6_out                    ;if equal go to output MOVEroutine
0000566A                          6927  
0000566A  B4BC 0000001F           6928  MOVEM_m2r_An_indir_pinc_r7                  CMP.L      #match_MOVEM_An_indir_pinc_r7,D2         ;check reg is equal to 7
00005670  6700 004C               6929                                              BEQ        MOVEM_m2r_An_indir_pinc_r7_out                    ;if equal go to output MOVEroutine
00005674  6600 0352               6930                                              BNE        MOVEM_ERROR                                        :if not equal to an addresssing mode, pritn error
00005678                          6931  
00005678                          6932  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00005678  227C 000084FC           6933  MOVEM_m2r_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
0000567E  4EB8 54FA               6934                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005682                          6935  
00005682  227C 00008502           6936  MOVEM_m2r_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00005688  4EB8 54FA               6937                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000568C                          6938  
0000568C  227C 00008508           6939  MOVEM_m2r_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00005692  4EB8 54FA               6940                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005696                          6941  
00005696  227C 0000850E           6942  MOVEM_m2r_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
0000569C  4EB8 54FA               6943                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000056A0                          6944  
000056A0  227C 00008514           6945  MOVEM_m2r_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
000056A6  4EB8 54FA               6946                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000056AA                          6947  
000056AA  227C 0000851A           6948  MOVEM_m2r_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
000056B0  4EB8 54FA               6949                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000056B4                          6950  
000056B4  227C 00008520           6951  MOVEM_m2r_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
000056BA  4EB8 54FA               6952                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000056BE                          6953  
000056BE  227C 00008526           6954  MOVEM_m2r_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
000056C4  4EB8 54FA               6955                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000056C8                          6956  
000056C8                          6957  ;------------------Address Register Indirect with Pre Decrement-----------------------
000056C8  B4BC 00000020           6958  MOVE_m2r_An_indir_predec                    CMP.L      #match_MOVEM_An_indir_pdec_r0,D2       ;check reg is equal to 0
000056CE  6600 0006               6959                                              BNE        MOVEM_m2r_An_indir_pdec_r1                      ;if not try reg 1
000056D2  6700 0064               6960                                              BEQ        MOVEM_m2r_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
000056D6                          6961  
000056D6  B4BC 00000021           6962  MOVEM_m2r_An_indir_pdec_r1                  CMP.L      #match_MOVEM_An_indir_pdec_r1,D2       ;check reg is equal to 1
000056DC  6600 0006               6963                                              BNE        MOVEM_m2r_An_indir_pdec_r2                      ;if not try reg 2
000056E0  6700 0060               6964                                              BEQ        MOVEM_m2r_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
000056E4                          6965  
000056E4  B4BC 00000022           6966  MOVEM_m2r_An_indir_pdec_r2                  CMP.L      #match_MOVEM_An_indir_pdec_r2,D2       ;check reg is equal to 2
000056EA  6600 0006               6967                                              BNE        MOVEM_m2r_An_indir_pdec_r3                      ;if not try reg 3
000056EE  6700 005C               6968                                              BEQ        MOVEM_m2r_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
000056F2                          6969  
000056F2  B4BC 00000023           6970  MOVEM_m2r_An_indir_pdec_r3                  CMP.L      #match_MOVEM_An_indir_pdec_r3,D2       ;check reg is equal to 3
000056F8  6600 0006               6971                                              BNE        MOVEM_m2r_An_indir_pdec_r4                      ;if not try reg 4
000056FC  6700 0058               6972                                              BEQ        MOVEM_m2r_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
00005700                          6973  
00005700  B4BC 00000024           6974  MOVEM_m2r_An_indir_pdec_r4                  CMP.L      #match_MOVEM_An_indir_pdec_r4,D2       ;check reg is equal to 4
00005706  6600 0006               6975                                              BNE        MOVEM_m2r_An_indir_pdec_r5                      ;if not try reg 5
0000570A  6700 0054               6976                                              BEQ        MOVEM_m2r_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
0000570E                          6977  
0000570E  B4BC 00000025           6978  MOVEM_m2r_An_indir_pdec_r5                  CMP.L      #match_MOVEM_An_indir_pdec_r5,D2       ;check reg is equal to 5
00005714  6600 0006               6979                                              BNE        MOVEM_m2r_An_indir_pdec_r6                     ;if not try reg 6
00005718  6700 0050               6980                                              BEQ        MOVEM_m2r_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
0000571C                          6981  
0000571C  B4BC 00000026           6982  MOVEM_m2r_An_indir_pdec_r6                  CMP.L      #match_MOVEM_An_indir_pdec_r6,D2       ;check reg is equal to 6
00005722  6600 0006               6983                                              BNE        MOVEM_m2r_An_indir_pdec_r7                     ;if not try reg 7
00005726  6700 004C               6984                                              BEQ        MOVEM_m2r_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
0000572A                          6985  
0000572A  B4BC 00000027           6986  MOVEM_m2r_An_indir_pdec_r7                  CMP.L      #match_MOVEM_An_indir_pdec_r7,D2       ;check reg is equal to 7
00005730  6700 004C               6987                                              BEQ        MOVEM_m2r_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
00005734  6600 0292               6988                                              BNE        MOVEM_ERROR                                    :if not equal to an addresssing mode, pritn error
00005738                          6989  
00005738                          6990  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00005738  227C 0000852C           6991  MOVEM_m2r_An_indir_pdec_r0_out                  MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
0000573E  4EB8 54FA               6992                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005742                          6993                                              
00005742  227C 00008532           6994  MOVEM_m2r_An_indir_pdec_r1_out                  MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
00005748  4EB8 54FA               6995                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000574C                          6996  
0000574C  227C 00008538           6997  MOVEM_m2r_An_indir_pdec_r2_out                  MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
00005752  4EB8 54FA               6998                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005756                          6999  
00005756  227C 0000853E           7000  MOVEM_m2r_An_indir_pdec_r3_out                  MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
0000575C  4EB8 54FA               7001                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005760                          7002  
00005760  227C 00008544           7003  MOVEM_m2r_An_indir_pdec_r4_out                  MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
00005766  4EB8 54FA               7004                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000576A                          7005  
0000576A  227C 0000854A           7006  MOVEM_m2r_An_indir_pdec_r5_out                  MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
00005770  4EB8 54FA               7007                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005774                          7008  
00005774  227C 00008550           7009  MOVEM_m2r_An_indir_pdec_r6_out                  MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
0000577A  4EB8 54FA               7010                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000577E                          7011  
0000577E  227C 00008556           7012  MOVEM_m2r_An_indir_pdec_r7_out                  MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00005784  4EB8 54FA               7013                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005788                          7014          
00005788                          7015  ;------------------Absolute Addressing Output-----------------------
00005788  22FC 00008566           7016  MOVEM_m2r_abs_add_word_out            MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000578E  22C5                    7017                                        MOVE.L      D5,(A1)+                           ;load address                  
00005790  4CDF 7CBE               7018                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005794  4E75                    7019                                        RTS                                            :return to MOVEroutine
00005796                          7020                                              ;return to MOVEroutine
00005796                          7021                                             
00005796                          7022  
00005796  2A18                    7023  MOVEM_m2r_abs_add_long_out            MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00005798  22FC 00008566           7024                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000579E  22C5                    7025                                        MOVE.L      D5,(A1)+                           ;load address                  
000057A0  4CDF 7CBE               7026                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
000057A4  4E75                    7027                                        RTS                                            :return to MOVEroutine
000057A6                          7028                                              ;return to MOVEroutine                                            
000057A6                          7029  
000057A6  4241                    7030  MOVEM_second_operand                     CLR            D1   
000057A8                          7031  
000057A8  2A18                    7032  MOVEM_m2r                                MOVE.L         (A0)+,D5                                ;pull the register list
000057AA                          7033                                           
000057AA  223C 00008000           7034                                           MOVE.L         #mask_MOVEM_reg_mem_D0,D1                     ;load mask into register
000057B0  B2BC 00008000           7035                                           CMP.L          #match_MOVEM_reg_mem_D0,D1                    ;check to see if the D0 is on the list
000057B6  6700 016E               7036                                           BEQ            MOVEM_m2r_D0_reg_list_out
000057BA  6600 0002               7037                                           BNE            MOVEM_m2r_D1
000057BE                          7038  
000057BE  2A18                    7039  MOVEM_m2r_D1                             MOVE.L         (A0)+,D5                                ;pull the register list
000057C0  4241                    7040                                           CLR            D1
000057C2  223C 00004000           7041                                           MOVE.L         #mask_MOVEM_reg_mem_D1,D1                     ;load mask into register
000057C8  B2BC 00004000           7042                                           CMP.L          #match_MOVEM_reg_mem_D1,D1                    ;check to see if the D0 is on the list
000057CE  6700 0160               7043                                           BEQ            MOVEM_m2r_D1_reg_list_out
000057D2  6600 0002               7044                                           BNE            MOVEM_m2r_D2
000057D6                          7045  
000057D6  2A18                    7046  MOVEM_m2r_D2                             MOVE.L         (A0)+,D5                                ;pull the register list
000057D8  4241                    7047                                           CLR            D1
000057DA  223C 00002000           7048                                           MOVE.L         #mask_MOVEM_reg_mem_D2,D1                     ;load mask into register
000057E0  B2BC 00002000           7049                                           CMP.L          #match_MOVEM_reg_mem_D2,D1                    ;check to see if the D0 is on the list
000057E6  6700 0152               7050                                           BEQ            MOVEM_m2r_D2_reg_list_out
000057EA  6600 0002               7051                                           BNE            MOVEM_m2r_D3
000057EE                          7052  
000057EE  2A18                    7053  MOVEM_m2r_D3                             MOVE.L         (A0)+,D5                                ;pull the register list
000057F0  4241                    7054                                           CLR            D1
000057F2  223C 00001000           7055                                           MOVE.L         #mask_MOVEM_reg_mem_D3,D1                     ;load mask into register
000057F8  B2BC 00001000           7056                                           CMP.L          #match_MOVEM_reg_mem_D3,D1                    ;check to see if the D0 is on the list
000057FE  6700 0144               7057                                           BEQ            MOVEM_m2r_D3_reg_list_out
00005802  6600 0002               7058                                           BNE            MOVEM_m2r_D4
00005806                          7059  
00005806  2A18                    7060  MOVEM_m2r_D4                             MOVE.L         (A0)+,D5                                ;pull the register list
00005808  4241                    7061                                           CLR            D1
0000580A  223C 00000800           7062                                           MOVE.L         #mask_MOVEM_reg_mem_D4,D1                     ;load mask into register
00005810  B2BC 00000800           7063                                           CMP.L          #match_MOVEM_reg_mem_D4,D1                    ;check to see if the D0 is on the list
00005816  6700 0136               7064                                           BEQ            MOVEM_m2r_D4_reg_list_out
0000581A  6600 0002               7065                                           BNE            MOVEM_m2r_D5
0000581E                          7066  
0000581E  2A18                    7067  MOVEM_m2r_D5                             MOVE.L         (A0)+,D5                                ;pull the register list
00005820  4241                    7068                                           CLR            D1
00005822  223C 00000400           7069                                           MOVE.L         #mask_MOVEM_reg_mem_D5,D1                     ;load mask into register
00005828  B2BC 00000400           7070                                           CMP.L          #match_MOVEM_reg_mem_D5,D1                    ;check to see if the D0 is on the list
0000582E  6700 0128               7071                                           BEQ            MOVEM_m2r_D5_reg_list_out
00005832  6600 0002               7072                                           BNE            MOVEM_m2r_D6
00005836                          7073  
00005836  2A18                    7074  MOVEM_m2r_D6                             MOVE.L         (A0)+,D5                                ;pull the register list
00005838  4241                    7075                                           CLR            D1
0000583A  223C 00000200           7076                                           MOVE.L         #mask_MOVEM_reg_mem_D6,D1                     ;load mask into register
00005840  B2BC 00000200           7077                                           CMP.L          #match_MOVEM_reg_mem_D6,D1                    ;check to see if the D0 is on the list
00005846  6700 011A               7078                                           BEQ            MOVEM_m2r_D6_reg_list_out
0000584A  6600 0002               7079                                           BNE            MOVEM_m2r_D7
0000584E                          7080  
0000584E  2A18                    7081  MOVEM_m2r_D7                             MOVE.L         (A0)+,D5                                ;pull the register list
00005850  4241                    7082                                           CLR            D1
00005852  223C 00000100           7083                                           MOVE.L         #mask_MOVEM_reg_mem_D7,D1                     ;load mask into register
00005858  B2BC 00000100           7084                                           CMP.L          #match_MOVEM_reg_mem_D7,D1                    ;check to see if the D0 is on the list
0000585E  6700 010C               7085                                           BEQ            MOVEM_m2r_D7_reg_list_out
00005862  6600 0002               7086                                           BNE            MOVEM_m2r_A0
00005866                          7087  
00005866                          7088  
00005866  2A18                    7089  MOVEM_m2r_A0                             MOVE.L         (A0)+,D5                                ;pull the register list
00005868  4241                    7090                                           CLR            D1
0000586A  227C 00000080           7091                                           MOVE.L         #mask_MOVEM_reg_mem_A0,A1                     ;load mask into register
00005870  B3FC 00000080           7092                                           CMP.L          #match_MOVEM_reg_mem_A0,A1                    ;check to see if the A0 is on the list
00005876  6700 00FE               7093                                           BEQ            MOVEM_m2r_A0_reg_list_out
0000587A  6600 0002               7094                                           BNE            MOVEM_m2r_A1
0000587E                          7095  
0000587E  2A18                    7096  MOVEM_m2r_A1                             MOVE.L         (A0)+,D5                                ;pull the register list
00005880  4241                    7097                                           CLR            D1
00005882  227C 00000040           7098                                           MOVE.L         #mask_MOVEM_reg_mem_A1,A1                     ;load mask into register
00005888  B3FC 00000040           7099                                           CMP.L          #match_MOVEM_reg_mem_A1,A1                    ;check to see if the A0 is on the list
0000588E  6700 00F0               7100                                           BEQ            MOVEM_m2r_A1_reg_list_out
00005892  6600 0002               7101                                           BNE            MOVEM_m2r_A2
00005896                          7102  
00005896  2A18                    7103  MOVEM_m2r_A2                             MOVE.L         (A0)+,D5                                ;pull the register list
00005898  4241                    7104                                           CLR            D1
0000589A  227C 00000020           7105                                           MOVE.L         #mask_MOVEM_reg_mem_A2,A1                     ;load mask into register
000058A0  B3FC 00000020           7106                                           CMP.L          #match_MOVEM_reg_mem_A2,A1                    ;check to see if the A0 is on the list
000058A6  6700 00E2               7107                                           BEQ            MOVEM_m2r_A2_reg_list_out
000058AA  6600 0002               7108                                           BNE            MOVEM_m2r_A3
000058AE                          7109  
000058AE  2A18                    7110  MOVEM_m2r_A3                             MOVE.L         (A0)+,D5                                ;pull the register list
000058B0  4241                    7111                                           CLR            D1
000058B2  227C 00000010           7112                                           MOVE.L         #mask_MOVEM_reg_mem_A3,A1                     ;load mask into register
000058B8  B3FC 00000010           7113                                           CMP.L          #match_MOVEM_reg_mem_A3,A1                    ;check to see if the A0 is on the list
000058BE  6700 00D4               7114                                           BEQ            MOVEM_m2r_A3_reg_list_out
000058C2  6600 0002               7115                                           BNE            MOVEM_m2r_A4
000058C6                          7116  
000058C6  2A18                    7117  MOVEM_m2r_A4                             MOVE.L         (A0)+,D5                                ;pull the register list
000058C8  4241                    7118                                           CLR            D1
000058CA  227C 00000008           7119                                           MOVE.L         #mask_MOVEM_reg_mem_A4,A1                     ;load mask into register
000058D0  B3FC 00000008           7120                                           CMP.L          #match_MOVEM_reg_mem_A4,A1                    ;check to see if the A0 is on the list
000058D6  6700 00C6               7121                                           BEQ            MOVEM_m2r_A4_reg_list_out
000058DA  6600 0002               7122                                           BNE            MOVEM_m2r_A5
000058DE                          7123  
000058DE  2A18                    7124  MOVEM_m2r_A5                             MOVE.L         (A0)+,D5                                ;pull the register list
000058E0  4241                    7125                                           CLR            D1
000058E2  227C 00000004           7126                                           MOVE.L         #mask_MOVEM_reg_mem_A5,A1                     ;load mask into register
000058E8  B3FC 00000004           7127                                           CMP.L          #match_MOVEM_reg_mem_A5,A1                    ;check to see if the A0 is on the list
000058EE  6700 00B8               7128                                           BEQ            MOVEM_m2r_A5_reg_list_out
000058F2  6600 0002               7129                                           BNE            MOVEM_m2r_A6
000058F6                          7130  
000058F6  2A18                    7131  MOVEM_m2r_A6                             MOVE.L         (A0)+,D5                                ;pull the register list
000058F8  4241                    7132                                           CLR            D1
000058FA  227C 00000002           7133                                           MOVE.L         #mask_MOVEM_reg_mem_A6,A1                     ;load mask into register
00005900  B3FC 00000002           7134                                           CMP.L          #match_MOVEM_reg_mem_A6,A1                    ;check to see if the A0 is on the list
00005906  6700 00AA               7135                                           BEQ            MOVEM_m2r_A6_reg_list_out
0000590A  6600 0002               7136                                           BNE            MOVEM_m2r_A7
0000590E                          7137  
0000590E  2A18                    7138  MOVEM_m2r_A7                             MOVE.L         (A0)+,D5                                ;pull the register list
00005910  4241                    7139                                           CLR            D1
00005912  227C 00000001           7140                                           MOVE.L         #mask_MOVEM_reg_mem_A7,A1                     ;load mask into register
00005918  B3FC 00000001           7141                                           CMP.L          #match_MOVEM_reg_mem_A7,A1                    ;check to see if the A0 is on the list
0000591E  6700 009C               7142                                           BEQ            MOVEM_m2r_A7_reg_list_out
00005922  6600 F9CA               7143                                           BNE            MOVEM_determine_second_operand
00005926                          7144  
00005926                          7145  ;------------------------------------------------------Register List Output----------------------------------------
00005926  22FC 00008494           7146  MOVEM_m2r_D0_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000592C  4EB8 50E4               7147                                          JSR             MOVEM_reg_mem_D1            ;go check D1
00005930                          7148                                          
00005930  22FC 00008494           7149  MOVEM_m2r_D1_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005936  4EB8 50FC               7150                                          JSR             MOVEM_reg_mem_D2            ;go check D2
0000593A                          7151  
0000593A  22FC 00008494           7152  MOVEM_m2r_D2_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005940  4EB8 5114               7153                                          JSR             MOVEM_reg_mem_D3            ;go check D3
00005944                          7154  
00005944  22FC 00008494           7155  MOVEM_m2r_D3_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000594A  4EB8 512C               7156                                          JSR             MOVEM_reg_mem_D4            ;go check D4
0000594E                          7157  
0000594E  22FC 00008494           7158  MOVEM_m2r_D4_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005954  4EB8 5144               7159                                          JSR             MOVEM_reg_mem_D5            ;go check D5
00005958                          7160  
00005958  22FC 00008494           7161  MOVEM_m2r_D5_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000595E  4EB8 515C               7162                                          JSR             MOVEM_reg_mem_D6            ;go check D6
00005962                          7163  
00005962  22FC 00008494           7164  MOVEM_m2r_D6_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005968  4EB8 5174               7165                                          JSR             MOVEM_reg_mem_D7            ;go check D7
0000596C                          7166  
0000596C  22FC 00008494           7167  MOVEM_m2r_D7_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005972  4EB8 518C               7168                                          JSR             MOVEM_reg_mem_A0            ;go check A0
00005976                          7169  
00005976  22FC 000084AC           7170  MOVEM_m2r_A0_reg_list_out               MOVE.L          #ea_A0,(A1)+                ;load the register into A1
0000597C  4EB8 51A4               7171                                          JSR             MOVEM_reg_mem_A1            ;go check D1
00005980                          7172                                          
00005980  22FC 000084AF           7173  MOVEM_m2r_A1_reg_list_out               MOVE.L          #ea_A1,(A1)+                ;load the register into A1
00005986  4EB8 51BC               7174                                          JSR             MOVEM_reg_mem_A2            ;go check D2
0000598A                          7175  
0000598A  22FC 000084B2           7176  MOVEM_m2r_A2_reg_list_out               MOVE.L          #ea_A2,(A1)+                ;load the register into A1
00005990  4EB8 51D4               7177                                          JSR             MOVEM_reg_mem_A3            ;go check D3
00005994                          7178  
00005994  22FC 000084B5           7179  MOVEM_m2r_A3_reg_list_out               MOVE.L          #ea_A3,(A1)+                ;load the register into A1
0000599A  4EB8 51EC               7180                                          JSR             MOVEM_reg_mem_A4            ;go check D4
0000599E                          7181  
0000599E  22FC 000084B8           7182  MOVEM_m2r_A4_reg_list_out               MOVE.L          #ea_A4,(A1)+                ;load the register into A1
000059A4  4EB8 5204               7183                                          JSR             MOVEM_reg_mem_A5            ;go check D5
000059A8                          7184  
000059A8  22FC 000084BB           7185  MOVEM_m2r_A5_reg_list_out               MOVE.L          #ea_A5,(A1)+                ;load the register into A1
000059AE  4EB8 521C               7186                                          JSR             MOVEM_reg_mem_A6            ;go check D6
000059B2                          7187  
000059B2  22FC 000084BE           7188  MOVEM_m2r_A6_reg_list_out               MOVE.L          #ea_A6,(A1)+                ;load the register into A1
000059B8  4EB8 5234               7189                                          JSR             MOVEM_reg_mem_A7            ;go check D7
000059BC                          7190  
000059BC  22FC 000084C1           7191  MOVEM_m2r_A7_reg_list_out               MOVE.L          #ea_A7,(A1)+                ;load the register into A1
000059C2  4CDF 7CBE               7192                                          MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
000059C6  4E75                    7193                                        RTS                                            :return to MOVEroutine
000059C8                          7194  
000059C8                          7195  
000059C8                          7196  
000059C8                          7197  ;----------------------Error Handling----------------------------------------
000059C8  43F9 00008480           7198  MOVEM_ERROR                                     LEA     ERROR_MESSAGE,A1                                          ;load error messge into A3
000059CE                          7199                                                                              
000059CE  4E75                    7200                                                  RTS                                            :return to MOVEroutine
000059D0                          7201  
000059D0                          7202                                                  
000059D0                          7203                                                 
000059D0                          7204  
000059D0  =00000400               7205  mask_MOVEM_dir         EQU         $0400
000059D0                          7206  
000059D0                          7207  
000059D0  =00008000               7208  mask_MOVEM_reg_mem_D0        EQU         $8000
000059D0  =00004000               7209  mask_MOVEM_reg_mem_D1        EQU         $4000
000059D0  =00002000               7210  mask_MOVEM_reg_mem_D2        EQU         $2000
000059D0  =00001000               7211  mask_MOVEM_reg_mem_D3        EQU         $1000
000059D0  =00000800               7212  mask_MOVEM_reg_mem_D4        EQU         $0800
000059D0  =00000400               7213  mask_MOVEM_reg_mem_D5        EQU         $0400
000059D0  =00000200               7214  mask_MOVEM_reg_mem_D6        EQU         $0200
000059D0  =00000100               7215  mask_MOVEM_reg_mem_D7        EQU         $0100
000059D0                          7216  
000059D0  =00000080               7217  mask_MOVEM_reg_mem_A0        EQU         $0080
000059D0  =00000040               7218  mask_MOVEM_reg_mem_A1        EQU         $0040
000059D0  =00000020               7219  mask_MOVEM_reg_mem_A2        EQU         $0020
000059D0  =00000010               7220  mask_MOVEM_reg_mem_A3        EQU         $0010
000059D0  =00000008               7221  mask_MOVEM_reg_mem_A4        EQU         $0008
000059D0  =00000004               7222  mask_MOVEM_reg_mem_A5        EQU         $0004
000059D0  =00000002               7223  mask_MOVEM_reg_mem_A6        EQU         $0002
000059D0  =00000001               7224  mask_MOVEM_reg_mem_A7        EQU         $0001
000059D0                          7225  
000059D0                          7226  
000059D0  =00008000               7227  mask_MOVEM_mem_reg_A7        EQU         $8000
000059D0  =00004000               7228  mask_MOVEM_mem_reg_A6        EQU         $4000
000059D0  =00002000               7229  mask_MOVEM_mem_reg_A5        EQU         $2000
000059D0  =00001000               7230  mask_MOVEM_mem_reg_A4        EQU         $1000
000059D0  =00000800               7231  mask_MOVEM_mem_reg_A3        EQU         $0800
000059D0  =00000400               7232  mask_MOVEM_mem_reg_A2        EQU         $0400
000059D0  =00000200               7233  mask_MOVEM_mem_reg_A1        EQU         $0200
000059D0  =00000100               7234  mask_MOVEM_mem_reg_A0        EQU         $0100
000059D0                          7235  
000059D0  =00008000               7236  mask_MOVEM_mem_reg_D7        EQU         $8000
000059D0  =00004000               7237  mask_MOVEM_mem_reg_D6        EQU         $4000
000059D0  =00002000               7238  mask_MOVEM_mem_reg_D5        EQU         $2000
000059D0  =00001000               7239  mask_MOVEM_mem_reg_D4        EQU         $1000
000059D0  =00000800               7240  mask_MOVEM_mem_reg_D3        EQU         $0800
000059D0  =00000400               7241  mask_MOVEM_mem_reg_D2        EQU         $0400
000059D0  =00000200               7242  mask_MOVEM_mem_reg_D1        EQU         $0200
000059D0  =00000100               7243  mask_MOVEM_mem_reg_D0        EQU         $0100
000059D0                          7244  
000059D0                          7245  
000059D0  =0000003F               7246  mask_MOVEM_ea_reg_and_mode      EQU         $003F
000059D0  =0000003C               7247  mask_MOVEM_ea_mode              EQU         $003C
000059D0  =00000038               7248  mask_MOVEM_abs_add              EQU         $0038
000059D0                          7249   
000059D0  =00000400               7250  match_MOVEM_reg_mem             EQU         $0400
000059D0  =00000010               7251  match_MOVEM_An_indir            EQU         $0010
000059D0                          7252  
000059D0  =00000038               7253  match_MOVEM_abs_add_word        EQU         $0038
000059D0  =00000039               7254  match_MOVEM_abs_add_long        EQU         $0039
000059D0                          7255  
000059D0  =00000010               7256  match_MOVEM_An_indir_r0     EQU         $0010
000059D0  =00000011               7257  match_MOVEM_An_indir_r1     EQU         $0011
000059D0  =00000012               7258  match_MOVEM_An_indir_r2     EQU         $0012
000059D0  =00000013               7259  match_MOVEM_An_indir_r3     EQU         $0013
000059D0  =00000014               7260  match_MOVEM_An_indir_r4     EQU         $0014
000059D0  =00000015               7261  match_MOVEM_An_indir_r5     EQU         $0015
000059D0  =00000016               7262  match_MOVEM_An_indir_r6     EQU         $0016
000059D0  =00000017               7263  match_MOVEM_An_indir_r7     EQU         $0017
000059D0                          7264  
000059D0  =00000020               7265  match_MOVEM_An_indir_pdec_r0            EQU         $0020
000059D0  =00000021               7266  match_MOVEM_An_indir_pdec_r1            EQU         $0021
000059D0  =00000022               7267  match_MOVEM_An_indir_pdec_r2            EQU         $0022
000059D0  =00000023               7268  match_MOVEM_An_indir_pdec_r3            EQU         $0023
000059D0  =00000024               7269  match_MOVEM_An_indir_pdec_r4            EQU         $0024
000059D0  =00000025               7270  match_MOVEM_An_indir_pdec_r5            EQU         $0025
000059D0  =00000026               7271  match_MOVEM_An_indir_pdec_r6            EQU         $0026
000059D0  =00000027               7272  match_MOVEM_An_indir_pdec_r7            EQU         $0027
000059D0                          7273  
000059D0                          7274  
000059D0  =00000400               7275  match_MOVEM_mem_reg             EQU         $0400
000059D0                          7276  
000059D0                          7277  
000059D0  =00000020               7278  match_MOVEM_An_indir_pdec       EQU         $0020
000059D0  =00000010               7279  match_MOVEM_An_indir_pinc       EQU         $0010
000059D0  =00000038               7280  match_MOVEM_abs_add_word        EQU         $0038
000059D0  =00000039               7281  match_MOVEM_abs_add_long        EQU         $0039
000059D0                          7282  
000059D0  =00000010               7283  match_MOVEM_An_indir_r0         EQU         $0010
000059D0  =00000011               7284  match_MOVEM_An_indir_r1         EQU         $0011
000059D0  =00000012               7285  match_MOVEM_An_indir_r2         EQU         $0012
000059D0  =00000013               7286  match_MOVEM_An_indir_r3         EQU         $0013
000059D0  =00000014               7287  match_MOVEM_An_indir_r4         EQU         $0014
000059D0  =00000015               7288  match_MOVEM_An_indir_r5         EQU         $0015
000059D0  =00000016               7289  match_MOVEM_An_indir_r6         EQU         $0016
000059D0  =00000017               7290  match_MOVEM_An_indir_r7         EQU         $0017
000059D0                          7291  
000059D0                          7292  
000059D0  =00000018               7293  match_MOVEM_An_indir_pinc_r0        EQU         $0018
000059D0  =00000019               7294  match_MOVEM_An_indir_pinc_r1        EQU         $0019
000059D0  =0000001A               7295  match_MOVEM_An_indir_pinc_r2        EQU         $001A
000059D0  =0000001B               7296  match_MOVEM_An_indir_pinc_r3        EQU         $001B
000059D0  =0000001C               7297  match_MOVEM_An_indir_pinc_r4        EQU         $001C
000059D0  =0000001D               7298  match_MOVEM_An_indir_pinc_r5        EQU         $001D
000059D0  =0000001E               7299  match_MOVEM_An_indir_pinc_r6        EQU         $001E
000059D0  =0000001F               7300  match_MOVEM_An_indir_pinc_r7        EQU         $001F
000059D0                          7301  
000059D0  =00000038               7302  match_MOVEM_imm_add                 EQU         $0038
000059D0  =00000038               7303  match_MOVEM_imm_add_word            EQU         $0038
000059D0  =00000039               7304  match_MOVEM_imm_add_long            EQU         $0039
000059D0  =00008000               7305  match_MOVEM_reg_mem_D0        EQU         $8000
000059D0  =00004000               7306  match_MOVEM_reg_mem_D1        EQU         $4000
000059D0  =00002000               7307  match_MOVEM_reg_mem_D2        EQU         $2000
000059D0  =00001000               7308  match_MOVEM_reg_mem_D3        EQU         $1000
000059D0  =00000800               7309  match_MOVEM_reg_mem_D4        EQU         $0800
000059D0  =00000400               7310  match_MOVEM_reg_mem_D5        EQU         $0400
000059D0  =00000200               7311  match_MOVEM_reg_mem_D6        EQU         $0200
000059D0  =00000100               7312  match_MOVEM_reg_mem_D7        EQU         $0100
000059D0                          7313  
000059D0  =00000080               7314  match_MOVEM_reg_mem_A0        EQU         $0080
000059D0  =00000040               7315  match_MOVEM_reg_mem_A1        EQU         $0040
000059D0  =00000020               7316  match_MOVEM_reg_mem_A2        EQU         $0020
000059D0  =00000010               7317  match_MOVEM_reg_mem_A3        EQU         $0010
000059D0  =00000008               7318  match_MOVEM_reg_mem_A4        EQU         $0008
000059D0  =00000004               7319  match_MOVEM_reg_mem_A5        EQU         $0004
000059D0  =00000002               7320  match_MOVEM_reg_mem_A6        EQU         $0002
000059D0  =00000001               7321  match_MOVEM_reg_mem_A7        EQU         $0001
000059D0                          7322  
000059D0                          7323  
000059D0  =00008000               7324  match_MOVEM_mem_reg_A7        EQU         $8000
000059D0  =00004000               7325  match_MOVEM_mem_reg_A6        EQU         $4000
000059D0  =00002000               7326  match_MOVEM_mem_reg_A5        EQU         $2000
000059D0  =00001000               7327  match_MOVEM_mem_reg_A4        EQU         $1000
000059D0  =00000800               7328  match_MOVEM_mem_reg_A3        EQU         $0800
000059D0  =00000400               7329  match_MOVEM_mem_reg_A2        EQU         $0400
000059D0  =00000200               7330  match_MOVEM_mem_reg_A1        EQU         $0200
000059D0  =00000100               7331  match_MOVEM_mem_reg_A0        EQU         $0100
000059D0                          7332  
000059D0  =00008000               7333  match_MOVEM_mem_reg_D7        EQU         $8000
000059D0  =00004000               7334  match_MOVEM_mem_reg_D6        EQU         $4000
000059D0  =00002000               7335  match_MOVEM_mem_reg_D5        EQU         $2000
000059D0  =00001000               7336  match_MOVEM_mem_reg_D4        EQU         $1000
000059D0  =00000800               7337  match_MOVEM_mem_reg_D3        EQU         $0800
000059D0  =00000400               7338  match_MOVEM_mem_reg_D2        EQU         $0400
000059D0  =00000200               7339  match_MOVEM_mem_reg_D1        EQU         $0200
000059D0  =00000100               7340  match_MOVEM_mem_reg_D0        EQU         $0100
000059D0                          7341  
000059D0                          7342  
000059D0                          7343  
000059D0                          7344  
000059D0                          7345  
000059D0                          7346  -------------------- end include --------------------
000059D0                          7347              INCLUDE 'SUB Subroutine.x68'
000059D0                          7348  
000059D0                          7349  
000059D0                          7350  SUB_sub                                                       ;preserve the registers, 
000059D0                          7351  ;-----------------------------ea,Dn-----------------------------------------------------------------------------------------------------
000059D0  C2BC 000001C0           7352                                  AND.L              #mask_opmode,D1                       ;load mask to determine the operand order
000059D6                          7353                                  
000059D6  B2BC 00000000           7354  SUB_ea_Dn_match                 CMP.L              #match_SUB_b_Dn_ea,D1                 ;check to see if it's Dn,ea
000059DC  6700 004A               7355                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
000059E0  6600 0002               7356                                  BNE                SUB_ea_Dn_match_w                     ;if not check word size for same order
000059E4                          7357  
000059E4  B2BC 00000040           7358  SUB_ea_Dn_match_w               CMP.L              #match_SUB_w_Dn_ea,D1                 ;check to see if it's Dn,ea
000059EA  6700 003C               7359                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
000059EE  6600 0002               7360                                  BNE                SUB_ea_Dn_match_l                     ;if not check long size for same order
000059F2                          7361  
000059F2  B2BC 00000080           7362  SUB_ea_Dn_match_l               CMP.L              #match_SUB_l_Dn_ea,D1                 ;check to see if it's Dn,ea
000059F8  6700 002E               7363                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
000059FC  66D8                    7364                                  BNE                SUB_ea_Dn_match                       ;if not check other order
000059FE                          7365  
000059FE  B2BC 00000100           7366  SUB_Dn_ea_match                 CMP.L              #match_SUB_b_ea_Dn,D1                 ;check to see if it's ea,Dn
00005A04  6700 0528               7367                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
00005A08  6600 0002               7368                                  BNE                SUB_Dn_ea_match_w                     ;if not go check word size for same order
00005A0C                          7369  
00005A0C  B2BC 00000140           7370  SUB_Dn_ea_match_w               CMP.L              #match_SUB_w_ea_Dn,D1                 ;check to see if it's ea,Dn
00005A12  6700 051A               7371                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
00005A16  6600 0002               7372                                  BNE                SUB_Dn_ea_match_l                     ;if not go check word size for same order
00005A1A                          7373  
00005A1A  B2BC 00000180           7374  SUB_Dn_ea_match_l               CMP.L              #match_SUB_l_ea_Dn,D1                 ;check to see if it's ea,Dn
00005A20  6700 050C               7375                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
00005A24  6600 1784               7376                                  BNE                ERROR                                 ;if not go to error message
00005A28                          7377  
00005A28                          7378  
00005A28                          7379  ;--------------------------------------------------------------------------------------------------------------------------
00005A28                          7380  ;-------------------------------------------------------------------------------------------------------------------------
00005A28  4241                    7381  SUB_ea_Dn                        CLR               D1                                     ;clear D1 to load new mask                                
00005A2A  C2BC 00000038           7382                                   AND.L             #mask_SUB_ea_mode,D1                   ;move the mask to D1
00005A30                          7383  
00005A30                          7384  
00005A30                          7385  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00005A30  B2BC 00000000           7386  SUB_ea_Dn_data_reg_dir             CMP.L           #match_SUB_Dn,D1                       ;check to see if mode is data reg direct
00005A36  6600 0006               7387                                     BNE             SUB_ea_Dn_add_reg_indir                ;if not, go check add reg dir
00005A3A  6700 005E               7388                                     BEQ             SUB_ea_Dn_Dn_reg                       ;if equal go figure out the register
00005A3E                          7389  
00005A3E  B2BC 00000010           7390  SUB_ea_Dn_add_reg_indir            CMP.L           #match_SUB_An_indir,D1                 ;check to see if mode is add reg indir
00005A44  6600 0006               7391                                     BNE             SUB_ea_Dn_add_reg_indir_predec         ;if not, go check add reg indir predec 
00005A48  6700 0136               7392                                     BEQ             SUB_ea_Dn_An_indir_reg                 ;if equal go figure out the register           
00005A4C                          7393             
00005A4C  B2BC 00000020           7394  SUB_ea_Dn_add_reg_indir_predec     CMP.L           #match_SUB_An_indir_predec,D1          ;check to see if mode is add reg indor w/ postinc
00005A52  6600 0006               7395                                     BNE             SUB_ea_Dn_add_reg_indir_postinc        ;if not go check add reg indir/predec
00005A56  6700 02E8               7396                                     BEQ             SUB_ea_Dn_An_indir_predec              ;if equal go figure out the register
00005A5A                          7397                        
00005A5A  B2BC 00000018           7398  SUB_ea_Dn_add_reg_indir_postinc    CMP.L           #match_SUB_An_indir_postinc,D1         ;check to see if mode is add reg indir w/predec
00005A60  6600 0006               7399                                     BNE             SUB_ea_Dn_abs_add_word                 ;if not go check abs add word
00005A64  6700 01FA               7400                                     BEQ             SUB_ea_Dn_An_indir_postinc_reg         ;if equal go figure out the register
00005A68                          7401  
00005A68  C4BC 0000003F           7402  SUB_ea_Dn_abs_add_word             AND.L           #mask_SUB_abs_add,D2                   ;load mask to determine if abs add word or long
00005A6E                          7403                                   
00005A6E  B4BC 00000038           7404                                     CMP.L           #match_SUB_abs_add_word,D2             ;check if abs add word
00005A74  2A18                    7405                                     MOVE.L          (A0)+,D5                               ;pull the next word instruction that holds the address
00005A76  6600 0006               7406                                     BNE             SUB_ea_Dn_abs_add_long                 ;if not go check abs add long
00005A7A  6700 03A4               7407                                     BEQ             SUB_ea_Dn_abs_add_word_out             ;if equal go to output
00005A7E                          7408    
00005A7E  B4BC 00000039           7409  SUB_ea_Dn_abs_add_long             CMP.L           #match_SUB_abs_add_long,D2             ;check to see if abs add long
00005A84  6700 03AA               7410                                     BEQ             SUB_ea_Dn_abs_add_long_out             ;if equal go to output
00005A88  6600 0002               7411                                       BNE               SUB_ea_Dn_immediate_add
00005A8C                          7412                                   
00005A8C  B2BC 0000003C           7413  SUB_ea_Dn_immediate_add            CMP.L           #match_SUB_imm_add,D1                  ;check if immediate address
00005A92  6700 03AE               7414                                     BEQ             SUB_ea_Dn_immediate_add_out            ;if equal go to immediate add sub routine
00005A96  6600 1712               7415                                       BNE             ERROR                                  ;if not equal go to error mesage sub routine
00005A9A                          7416  
00005A9A                          7417  
00005A9A                          7418  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00005A9A                          7419                                   
00005A9A                          7420                                   
00005A9A                          7421  ;-----------------------------------Data Register Direct--------------------------------
00005A9A  C4BC 0000003F           7422  SUB_ea_Dn_Dn_reg             AND.L           #mask_SUB_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
00005AA0  B4BC 00000000           7423                               CMP.L              #match_SUB_D0,D2               ;check to see in the register is 0
00005AA6  6600 0006               7424                               BNE                SUB_ea_Dn_rD1                  ;if not go check register 1
00005AAA  6700 0064               7425                               BEQ                SUB_ea_Dn_D0_out               ;if equal go to output subroutine
00005AAE                          7426  
00005AAE  B4BC 00000001           7427  SUB_ea_Dn_rD1                CMP.L              #match_SUB_D1,D2               ;check to see in the register is 1
00005AB4  6600 0006               7428                               BNE                SUB_ea_Dn_rD2                  ;if not go check register 2
00005AB8  6700 0064               7429                               BEQ                SUB_ea_Dn_D1_out               ;if equal go to output subroutine
00005ABC                          7430  
00005ABC  B4BC 00000002           7431  SUB_ea_Dn_rD2                CMP.L              #match_SUB_D2,D2               ;check to see in the register is 2
00005AC2  6600 0006               7432                               BNE                SUB_ea_Dn_rD3                  ;if not go check register 3
00005AC6  6700 0064               7433                               BEQ                SUB_ea_Dn_D2_out               ;if equal go to output subroutine
00005ACA                          7434  
00005ACA  B4BC 00000003           7435  SUB_ea_Dn_rD3                CMP.L              #match_SUB_D3,D2               ;check to see in the register is 3
00005AD0  6600 0006               7436                               BNE                SUB_ea_Dn_rD4                  ;if not go check register 4
00005AD4  6700 0064               7437                               BEQ                SUB_ea_Dn_D3_out               ;if equal go to output subroutine
00005AD8                          7438  
00005AD8  B4BC 00000004           7439  SUB_ea_Dn_rD4                CMP.L              #match_SUB_D4,D2               ;check to see in the register is 4
00005ADE  6600 0006               7440                               BNE                SUB_ea_Dn_rD5                  ;if not go check register 5
00005AE2  6700 0064               7441                               BEQ                SUB_ea_Dn_D4_out               ;if equal go to output subroutine
00005AE6                          7442  
00005AE6  B4BC 00000005           7443  SUB_ea_Dn_rD5                CMP.L              #match_SUB_D5,D2               ;check to see in the register is 5
00005AEC  6600 0006               7444                               BNE                SUB_ea_Dn_rD6                  ;if not go check register 6
00005AF0  6700 0064               7445                               BEQ                SUB_ea_Dn_D5_out               ;if equal go to output subroutine
00005AF4                          7446  
00005AF4  B4BC 00000006           7447  SUB_ea_Dn_rD6                CMP.L              #match_SUB_D6,D2               ;check to see in the register is 6
00005AFA  6600 0006               7448                               BNE                SUB_ea_Dn_rD7                  ;if not go check register 7
00005AFE  6700 0064               7449                               BEQ                SUB_ea_Dn_D6_out               ;if equal go to output subroutine
00005B02                          7450  
00005B02  B4BC 00000007           7451  SUB_ea_Dn_rD7                CMP.L              #match_SUB_D7,D2               ;check to see in the register is 7
00005B08  6700 0068               7452                               BEQ                SUB_ea_Dn_D7_out               ;if equal go to output subroutine
00005B0C  6600 169C               7453                               BNE                ERROR                          ;if not equal, got to error message
00005B10                          7454  
00005B10                          7455  
00005B10                          7456  ;--------------------Data Register Direct Output-----------------------
00005B10  227C 00008494           7457  SUB_ea_Dn_D0_out             MOVE.L          #ea_D0,A1              ;load string constant into A1
00005B16  4EB9 00005E76           7458                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005B1C  4E75                    7459                               RTS
00005B1E                          7460                               
00005B1E  227C 00008497           7461  SUB_ea_Dn_D1_out             MOVE.L          #ea_D1,A1              ;load string constant into A1
00005B24  4EB9 00005E76           7462                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005B2A  4E75                    7463                               RTS
00005B2C                          7464                               
00005B2C  227C 0000849A           7465  SUB_ea_Dn_D2_out             MOVE.L          #ea_D2,A1              ;load string constant into A1
00005B32  4EB9 00005E76           7466                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005B38  4E75                    7467                               RTS
00005B3A                          7468                               
00005B3A  227C 0000849D           7469  SUB_ea_Dn_D3_out             MOVE.L          #ea_D3,A1              ;load string constant into A1
00005B40  4EB9 00005E76           7470                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005B46  4E75                    7471                               RTS
00005B48                          7472  
00005B48  227C 000084A0           7473  SUB_ea_Dn_D4_out             MOVE.L          #ea_D4,A1              ;load string constant into A1
00005B4E  4EB9 00005E76           7474                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005B54  4E75                    7475                               RTS
00005B56                          7476  
00005B56  227C 000084A3           7477  SUB_ea_Dn_D5_out             MOVE.L          #ea_D5,A1              ;load string constant into A1
00005B5C  4EB9 00005E76           7478                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005B62  4E75                    7479                               RTS
00005B64                          7480  
00005B64  227C 000084A6           7481  SUB_ea_Dn_D6_out             MOVE.L          #ea_D6,A1              ;load string constant into A1
00005B6A  4EB9 00005E76           7482                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005B70  4E75                    7483                               RTS
00005B72                          7484  
00005B72  227C 000084A9           7485  SUB_ea_Dn_D7_out             MOVE.L          #ea_D7,A1              ;load string constant into A1
00005B78  4EB9 00005E76           7486                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005B7E  4E75                    7487                               RTS
00005B80                          7488  
00005B80                          7489  ;------------------Address Register Indirect-----------------------
00005B80  B4BC 00000010           7490  SUB_ea_Dn_An_indir_reg           CMP.L           #match_SUB_An_indir_r0,D2           ;check reg is equal to 0
00005B86  6600 0006               7491                                   BNE             SUB_ea_Dn_An_indir_reg1             ;if not try reg 1
00005B8A  6700 0064               7492                                   BEQ             SUB_ea_Dn_An_indir_reg0_out         ;if equal go to output subroutine
00005B8E                          7493  
00005B8E  B4BC 00000011           7494  SUB_ea_Dn_An_indir_reg1          CMP.L           #match_SUB_An_indir_r1,D2           ;check reg is equal to 1
00005B94  6600 0006               7495                                   BNE             SUB_ea_Dn_An_indir_reg2             ;if not try reg 2
00005B98  6700 0064               7496                                   BEQ             SUB_ea_Dn_An_indir_reg1_out         ;if equal go to output subroutine
00005B9C                          7497  
00005B9C  B4BC 00000012           7498  SUB_ea_Dn_An_indir_reg2          CMP.L           #match_SUB_An_indir_r2,D2           ;check reg is equal to 2
00005BA2  6600 0006               7499                                   BNE             SUB_ea_Dn_An_indir_reg3             ;if not try reg 3
00005BA6  6700 0064               7500                                   BEQ             SUB_ea_Dn_An_indir_reg2_out         ;if equal go to output subroutine
00005BAA                          7501  
00005BAA  B4BC 00000013           7502  SUB_ea_Dn_An_indir_reg3          CMP.L           #match_SUB_An_indir_r3,D2           ;check reg is equal to 3
00005BB0  6600 0006               7503                                   BNE             SUB_ea_Dn_An_indir_reg4             ;if not try reg 4
00005BB4  6700 0064               7504                                   BEQ             SUB_ea_Dn_An_indir_reg3_out         ;if equal go to output subroutine
00005BB8                          7505      
00005BB8  B4BC 00000014           7506  SUB_ea_Dn_An_indir_reg4          CMP.L           #match_SUB_An_indir_r4,D2           ;check reg is equal to 4
00005BBE  6600 0006               7507                                   BNE             SUB_ea_Dn_An_indir_reg5             ;if not try reg 5
00005BC2  6700 0064               7508                                   BEQ             SUB_ea_Dn_An_indir_reg4_out         ;if equal go to output subroutine
00005BC6                          7509          
00005BC6  B4BC 00000015           7510  SUB_ea_Dn_An_indir_reg5          CMP.L           #match_SUB_An_indir_r5,D2           ;check reg is equal to 5
00005BCC  6600 0006               7511                                   BNE             SUB_ea_Dn_An_indir_reg6             ;if not try reg 6
00005BD0  6700 0064               7512                                   BEQ             SUB_ea_Dn_An_indir_reg5_out         ;if equal go to output subroutine
00005BD4                          7513  
00005BD4  B4BC 00000016           7514  SUB_ea_Dn_An_indir_reg6          CMP.L           #match_SUB_An_indir_r6,D2           ;check reg is equal to 6
00005BDA  6600 0006               7515                                   BNE             SUB_ea_Dn_An_indir_reg7             ;if not try reg 7
00005BDE  6700 0064               7516                                   BEQ             SUB_ea_Dn_An_indir_reg6_out         ;if equal go to output subroutine
00005BE2                          7517  
00005BE2  B4BC 00000017           7518  SUB_ea_Dn_An_indir_reg7          CMP.L           #match_SUB_An_indir_r7,D2           ;check reg is equal to 7
00005BE8  6700 0068               7519                                   BEQ             SUB_ea_Dn_An_indir_reg7_out         ;if equal go to output subroutine
00005BEC  6600 15BC               7520                                   BNE             ERROR                               ;if not equal to an addresssing mode, pritn error
00005BF0                          7521  
00005BF0                          7522  
00005BF0                          7523  ;--------------------Address Register Indirect Output-----------------------
00005BF0  227C 000084D4           7524  SUB_ea_Dn_An_indir_reg0_out       MOVE.L         #ea_indir_A0,A1            ;load string constant into A1
00005BF6  4EB9 00005E76           7525                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005BFC  4E75                    7526                                    RTS
00005BFE                          7527                                    
00005BFE  227C 000084D9           7528  SUB_ea_Dn_An_indir_reg1_out       MOVE.L         #ea_indir_A1,A1            ;load string constant into A1
00005C04  4EB9 00005E76           7529                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005C0A  4E75                    7530                                    RTS
00005C0C                          7531                                    
00005C0C  227C 000084DE           7532  SUB_ea_Dn_An_indir_reg2_out       MOVE.L         #ea_indir_A2,A1            ;load string constant into A1
00005C12  4EB9 00005E76           7533                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005C18  4E75                    7534                                    RTS
00005C1A                          7535                                    
00005C1A  227C 000084E3           7536  SUB_ea_Dn_An_indir_reg3_out       MOVE.L         #ea_indir_A3,A1            ;load string constant into A1
00005C20  4EB9 00005E76           7537                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005C26  4E75                    7538                                    RTS
00005C28                          7539                                    
00005C28  227C 000084E8           7540  SUB_ea_Dn_An_indir_reg4_out       MOVE.L         #ea_indir_A4,A1            ;load string constant into A1
00005C2E  4EB9 00005E76           7541                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005C34  4E75                    7542                                    RTS
00005C36                          7543                                    
00005C36  227C 000084ED           7544  SUB_ea_Dn_An_indir_reg5_out       MOVE.L         #ea_indir_A5,A1            ;load string constant into A1
00005C3C  4EB9 00005E76           7545                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005C42  4E75                    7546                                    RTS
00005C44                          7547                                    
00005C44  227C 000084F2           7548  SUB_ea_Dn_An_indir_reg6_out       MOVE.L         #ea_indir_A6,A1            ;load string constant into A1
00005C4A  4EB9 00005E76           7549                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005C50  4E75                    7550                                    RTS
00005C52                          7551                                          
00005C52  227C 000084F7           7552  SUB_ea_Dn_An_indir_reg7_out       MOVE.L         #ea_indir_A7,A1            ;load string constant into A1
00005C58  4EB9 00005E76           7553                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005C5E  4E75                    7554                                    RTS
00005C60                          7555  
00005C60                          7556  ;------------------Address Register Indirect with Post Increment-----------------------
00005C60  B4BC 00000018           7557  SUB_ea_Dn_An_indir_postinc_reg         CMP.L      #match_SUB_An_indir_postinc_r0,D2           ;check reg is equal to 0
00005C66  6600 0006               7558                                         BNE        SUB_ea_Dn_An_indir_pinc_r1             ;if not try reg 1
00005C6A  6700 0064               7559                                         BEQ        SUB_ea_Dn_An_indir_pinc_r0_out         ;if equal go to output subroutine
00005C6E                          7560  
00005C6E  B4BC 00000019           7561  SUB_ea_Dn_An_indir_pinc_r1             CMP.L      #match_SUB_An_indir_postinc_r1,D2           ;check reg is equal to 1
00005C74  6600 0006               7562                                         BNE        SUB_ea_Dn_An_indir_pinc_r2             ;if not try reg 2
00005C78  6700 0064               7563                                         BEQ        SUB_ea_Dn_An_indir_pinc_r1_out         ;if equal go to output subroutine
00005C7C                          7564  
00005C7C  B4BC 0000001A           7565  SUB_ea_Dn_An_indir_pinc_r2             CMP.L      #match_SUB_An_indir_postinc_r2,D2           ;check reg is equal to 2
00005C82  6600 0006               7566                                         BNE        SUB_ea_Dn_An_indir_pinc_r3             ;if not try reg 3
00005C86  6700 0064               7567                                         BEQ        SUB_ea_Dn_An_indir_pinc_r2_out         ;if equal go to output subroutine
00005C8A                          7568  
00005C8A  B4BC 0000001B           7569  SUB_ea_Dn_An_indir_pinc_r3             CMP.L      #match_SUB_An_indir_postinc_r3,D2           ;check reg is equal to 3
00005C90  6600 0006               7570                                         BNE        SUB_ea_Dn_An_indir_pinc_r4             ;if not try reg 4
00005C94  6700 0064               7571                                         BEQ        SUB_ea_Dn_An_indir_pinc_r3_out         ;if equal go to output subroutine
00005C98                          7572   
00005C98  B4BC 0000001C           7573  SUB_ea_Dn_An_indir_pinc_r4             CMP.L      #match_SUB_An_indir_postinc_r4,D2           ;check reg is equal to 4
00005C9E  6600 0006               7574                                         BNE        SUB_ea_Dn_An_indir_pinc_r5             ;if not try reg 5
00005CA2  6700 0064               7575                                         BEQ        SUB_ea_Dn_An_indir_pinc_r4_out         ;if equal go to output subroutine
00005CA6                          7576  
00005CA6  B4BC 0000001D           7577  SUB_ea_Dn_An_indir_pinc_r5             CMP.L      #match_SUB_An_indir_postinc_r5,D2           ;check reg is equal to 5
00005CAC  6600 0006               7578                                         BNE        SUB_ea_Dn_An_indir_pinc_r6             ;if not try reg 6
00005CB0  6700 0064               7579                                         BEQ        SUB_ea_Dn_An_indir_pinc_r5_out         ;if equal go to output subroutine
00005CB4                          7580  
00005CB4  B4BC 0000001E           7581  SUB_ea_Dn_An_indir_pinc_r6             CMP.L      #match_SUB_An_indir_postinc_r6,D2           ;check reg is equal to 6
00005CBA  6600 0006               7582                                         BNE        SUB_ea_Dn_An_indir_pinc_r7             ;if not try reg 7
00005CBE  6700 0064               7583                                         BEQ        SUB_ea_Dn_An_indir_pinc_r6_out         ;if equal go to output subroutine
00005CC2                          7584  
00005CC2  B4BC 0000001F           7585  SUB_ea_Dn_An_indir_pinc_r7             CMP.L      #match_SUB_An_indir_postinc_r7,D2           ;check reg is equal to 7
00005CC8  6700 0068               7586                                         BEQ        SUB_ea_Dn_An_indir_pinc_r7_out         ;if equal go to output subroutine
00005CCC  6600 14DC               7587                                         BNE        ERROR                                       ;if not equal to an addresssing mode, pritn error
00005CD0                          7588  
00005CD0                          7589  
00005CD0                          7590  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00005CD0  227C 000084FC           7591  SUB_ea_Dn_An_indir_pinc_r0_out      MOVE.L          #ea_indir_postinc_A0,A1          ;load string constant into A1
00005CD6  4EB9 00005E76           7592                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005CDC  4E75                    7593                                      RTS
00005CDE                          7594                                      
00005CDE  227C 00008502           7595  SUB_ea_Dn_An_indir_pinc_r1_out      MOVE.L          #ea_indir_postinc_A1,A1          ;load string constant into A1
00005CE4  4EB9 00005E76           7596                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005CEA  4E75                    7597                                      RTS
00005CEC                          7598                                      
00005CEC  227C 00008508           7599  SUB_ea_Dn_An_indir_pinc_r2_out      MOVE.L          #ea_indir_postinc_A2,A1          ;load string constant into A1
00005CF2  4EB9 00005E76           7600                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005CF8  4E75                    7601                                      RTS
00005CFA                          7602                                      
00005CFA  227C 0000850E           7603  SUB_ea_Dn_An_indir_pinc_r3_out      MOVE.L          #ea_indir_postinc_A3,A1          ;load string constant into A1
00005D00  4EB9 00005E76           7604                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005D06  4E75                    7605                                      RTS
00005D08                          7606                                      
00005D08  227C 00008514           7607  SUB_ea_Dn_An_indir_pinc_r4_out      MOVE.L          #ea_indir_postinc_A4,A1          ;load string constant into A1
00005D0E  4EB9 00005E76           7608                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005D14  4E75                    7609                                      RTS
00005D16                          7610                                      
00005D16  227C 0000851A           7611  SUB_ea_Dn_An_indir_pinc_r5_out      MOVE.L          #ea_indir_postinc_A5,A1          ;load string constant into A1
00005D1C  4EB9 00005E76           7612                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005D22  4E75                    7613                                      RTS
00005D24                          7614                                      
00005D24  227C 00008520           7615  SUB_ea_Dn_An_indir_pinc_r6_out      MOVE.L          #ea_indir_postinc_A6,A1          ;load string constant into A1
00005D2A  4EB9 00005E76           7616                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005D30  4E75                    7617                                      RTS
00005D32                          7618                                      
00005D32  227C 00008526           7619  SUB_ea_Dn_An_indir_pinc_r7_out      MOVE.L          #ea_indir_postinc_A7,A1          ;load string constant into A1
00005D38  4EB9 00005E76           7620                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005D3E  4E75                    7621                                      RTS
00005D40                          7622  
00005D40                          7623  ;------------------Address Register Indirect with Pre Decrement-----------------------
00005D40  B4BC 00000020           7624  SUB_ea_Dn_An_indir_predec                CMP.L      #match_SUB_An_indir_predec_reg0,D2       ;check reg is equal to 0
00005D46  6600 0006               7625                                           BNE        SUB_ea_Dn_An_indir_pdec_r1           ;if not try reg 1
00005D4A  6700 0064               7626                                           BEQ        SUB_ea_Dn_An_indir_pdec_r0_out       ;if equal go to output subroutine
00005D4E                          7627  
00005D4E  B4BC 00000021           7628  SUB_ea_Dn_An_indir_pdec_r1               CMP.L      #match_SUB_An_indir_predec_reg1,D2       ;check reg is equal to 1
00005D54  6600 0006               7629                                           BNE        SUB_ea_Dn_An_indir_pdec_r2           ;if not try reg 2
00005D58  6700 0064               7630                                           BEQ        SUB_ea_Dn_An_indir_pdec_r1_out       ;if equal go to output subroutine
00005D5C                          7631  
00005D5C  B4BC 00000022           7632  SUB_ea_Dn_An_indir_pdec_r2               CMP.L      #match_SUB_An_indir_predec_reg2,D2       ;check reg is equal to 2
00005D62  6600 0006               7633                                           BNE        SUB_ea_Dn_An_indir_pdec_r3           ;if not try reg 3
00005D66  6700 0064               7634                                           BEQ        SUB_ea_Dn_An_indir_pdec_r2_out       ;if equal go to output subroutine
00005D6A                          7635  
00005D6A  B4BC 00000023           7636  SUB_ea_Dn_An_indir_pdec_r3               CMP.L      #match_SUB_An_indir_predec_reg3,D2       ;check reg is equal to 3
00005D70  6600 0006               7637                                           BNE        SUB_ea_Dn_An_indir_pdec_r4           ;if not try reg 4
00005D74  6700 0064               7638                                           BEQ        SUB_ea_Dn_An_indir_pdec_r3_out       ;if equal go to output subroutine
00005D78                          7639  
00005D78  B4BC 00000024           7640  SUB_ea_Dn_An_indir_pdec_r4               CMP.L      #match_SUB_An_indir_predec_reg4,D2       ;check reg is equal to 4
00005D7E  6600 0006               7641                                           BNE        SUB_ea_Dn_An_indir_pdec_r5           ;if not try reg 5
00005D82  6700 0064               7642                                           BEQ        SUB_ea_Dn_An_indir_pdec_r4_out       ;if equal go to output subroutine
00005D86                          7643  
00005D86  B4BC 00000025           7644  SUB_ea_Dn_An_indir_pdec_r5               CMP.L      #match_SUB_An_indir_predec_reg5,D2       ;check reg is equal to 5
00005D8C  6600 0006               7645                                           BNE        SUB_ea_Dn_An_indir_pdec_r6           ;if not try reg 6
00005D90  6700 0064               7646                                           BEQ        SUB_ea_Dn_An_indir_pdec_r5_out       ;if equal go to output subroutine
00005D94                          7647  
00005D94  B4BC 00000026           7648  SUB_ea_Dn_An_indir_pdec_r6               CMP.L      #match_SUB_An_indir_predec_reg6,D2       ;check reg is equal to 6
00005D9A  6600 0006               7649                                           BNE        SUB_ea_Dn_An_indir_pdec_r7           ;if not try reg 7
00005D9E  6700 0064               7650                                           BEQ        SUB_ea_Dn_An_indir_pdec_r6_out       ;if equal go to output subroutine
00005DA2                          7651  
00005DA2  B4BC 00000027           7652  SUB_ea_Dn_An_indir_pdec_r7               CMP.L      #match_SUB_An_indir_predec_reg7,D2       ;check reg is equal to 7
00005DA8  6700 0068               7653                                           BEQ        SUB_ea_Dn_An_indir_pdec_r7_out       ;if equal go to output subroutine
00005DAC  6600 13FC               7654                                           BNE        ERROR                                    ;if not equal to an addresssing mode, pritn error
00005DB0                          7655  
00005DB0                          7656  
00005DB0                          7657  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00005DB0  227C 0000852C           7658  SUB_ea_Dn_An_indir_pdec_r0_out            MOVE.L        #ea_indir_predec_A0,A1          ;load string constant into A1
00005DB6  4EB9 00005E76           7659                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005DBC  4E75                    7660                                            RTS
00005DBE                          7661                                              
00005DBE  227C 00008532           7662  SUB_ea_Dn_An_indir_pdec_r1_out            MOVE.L        #ea_indir_predec_A1,A1          ;load string constant into A1
00005DC4  4EB9 00005E76           7663                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005DCA  4E75                    7664                                            RTS
00005DCC                          7665                                            
00005DCC  227C 00008538           7666  SUB_ea_Dn_An_indir_pdec_r2_out            MOVE.L        #ea_indir_predec_A2,A1          ;load string constant into A1
00005DD2  4EB9 00005E76           7667                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005DD8  4E75                    7668                                            RTS
00005DDA                          7669                                            
00005DDA  227C 0000853E           7670  SUB_ea_Dn_An_indir_pdec_r3_out            MOVE.L        #ea_indir_predec_A3,A1          ;load string constant into A1
00005DE0  4EB9 00005E76           7671                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005DE6  4E75                    7672                                            RTS
00005DE8                          7673                                            
00005DE8  227C 00008544           7674  SUB_ea_Dn_An_indir_pdec_r4_out            MOVE.L        #ea_indir_predec_A4,A1          ;load string constant into A1
00005DEE  4EB9 00005E76           7675                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005DF4  4E75                    7676                                            RTS
00005DF6                          7677                                            
00005DF6  227C 0000854A           7678  SUB_ea_Dn_An_indir_pdec_r5_out            MOVE.L        #ea_indir_predec_A5,A1          ;load string constant into A1
00005DFC  4EB9 00005E76           7679                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005E02  4E75                    7680                                            RTS
00005E04                          7681                                            
00005E04  227C 00008550           7682  SUB_ea_Dn_An_indir_pdec_r6_out            MOVE.L        #ea_indir_predec_A6,A1          ;load string constant into A1
00005E0A  4EB9 00005E76           7683                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005E10  4E75                    7684                                            RTS
00005E12                          7685                                            
00005E12  227C 00008556           7686  SUB_ea_Dn_An_indir_pdec_r7_out            MOVE.L        #ea_indir_predec_A7,A1          ;load string constant into A1
00005E18  4EB9 00005E76           7687                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005E1E  4E75                    7688                                            RTS
00005E20                          7689  
00005E20                          7690  ;------------------Absolute Addressing Output-----------------------
00005E20  22FC 00008566           7691  SUB_ea_Dn_abs_add_word_out            MOVE.L      #ea_$,(A1)+             ;load $ for hex and increment A1
00005E26  22C5                    7692                                        MOVE.L      D5,(A1)+                ;load address                  
00005E28  4EB9 00005E76           7693                                        JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005E2E  4E75                    7694                                        RTS                                 ;return to subroutine
00005E30                          7695                                             
00005E30                          7696  
00005E30  2A18                    7697  SUB_ea_Dn_abs_add_long_out            MOVE.L      (A0)+,D5                ;pull the next long instruction that holds the address
00005E32  22FC 00008566           7698                                        MOVE.L      #ea_$,(A1)+             ;load $ for hex and increment A1
00005E38  22C5                    7699                                        MOVE.L      D5,(A1)+                ;load address                  
00005E3A  4EB9 00005E76           7700                                        JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005E40  4E75                    7701                                        RTS                                 ;return to subroutine
00005E42                          7702  
00005E42                          7703                                              
00005E42                          7704  ;---------------Immediate Addresing---------------------------
00005E42  2A18                    7705  SUB_ea_Dn_immediate_add_out           MOVE.L      (A0)+,D5                            ;capture the immediate address
00005E44  BCBC 000000FC           7706                                        CMP.L       #match_SUB_imm_add_word,D6          ;check to see if need to pull word
00005E4A  2A18                    7707                                        MOVE.L      (A0)+,D5                            ;pull the word
00005E4C  6700 0006               7708                                        BEQ         SUB_ea_Dn_imm_add_w                 ;if equal go pull word    
00005E50  6600 0012               7709                                        BNE         SUB_ea_Dn_imm_add_l                 ;if not equal, go check long
00005E54                          7710                                           
00005E54  22FC 00008566           7711  SUB_ea_Dn_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
00005E5A  32C5                    7712                                        MOVE.W     D5,(A1)+                             ;load the word address                           
00005E5C  4EB9 00005E76           7713                                        JSR        SUB_determine_second_op              ;jump to subroutine to determine second operand
00005E62  4E75                    7714                                        RTS
00005E64                          7715     
00005E64  2A18                    7716  SUB_ea_Dn_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
00005E66  22FC 00008566           7717                                        MOVE.L     #ea_$,(A1)+                          ;load the $
00005E6C  2245                    7718                                        MOVE.L     D5,A1                                ;move to A1
00005E6E  4EB9 00005E76           7719                                        JSR        SUB_determine_second_op              ;jump to subroutine to determine second operand
00005E74  4E75                    7720                                        RTS
00005E76                          7721  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00005E76  4282                    7722  SUB_determine_second_op         CLR.L       D2              ;clear D2 
00005E78  C4BC 00000E00           7723                                  AND.L       #mask_SUB_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
00005E7E                          7724                                                  
00005E7E  B4BC 00000000           7725  ea_Dn_SUB_reg0                  CMP.L       #match_SUB_reg0,D2      ;check to see if reg equal 0
00005E84  6600 0006               7726                                  BNE     ea_Dn_SUB_reg1          ;if not equal got check reg 1
00005E88  6700 0064               7727                                  BEQ     ea_Dn_SUB_reg0_out      ;if equal go to output
00005E8C                          7728                                                  
00005E8C  B4BC 00000200           7729  ea_Dn_SUB_reg1                  CMP.L       #match_SUB_reg1,D2      ;check to see if reg equal 1
00005E92  6600 0006               7730                                  BNE     ea_Dn_SUB_reg2          ;if not equal got check reg 2
00005E96  6700 005E               7731                                  BEQ     ea_Dn_SUB_reg1_out      ;if equal go to output
00005E9A                          7732  
00005E9A  B4BC 00000400           7733  ea_Dn_SUB_reg2                  CMP.L       #match_SUB_reg2,D2      ;check to see if reg equal 2
00005EA0  6600 0006               7734                                  BNE     ea_Dn_SUB_reg3          ;if not equal got check reg 3
00005EA4  6700 0058               7735                                  BEQ     ea_Dn_SUB_reg2_out      ;if equal go to output
00005EA8                          7736  
00005EA8  B4BC 00000600           7737  ea_Dn_SUB_reg3                  CMP.L       #match_SUB_reg3,D2      ;check to see if reg equal 3
00005EAE  6600 0006               7738                                  BNE     ea_Dn_SUB_reg4          ;if not equal got check reg 4
00005EB2  6700 0052               7739                                  BEQ     ea_Dn_SUB_reg3_out      ;if equal go to output
00005EB6                          7740                                                  
00005EB6  B4BC 00000800           7741  ea_Dn_SUB_reg4                  CMP.L       #match_SUB_reg4,D2      ;check to see if reg equal 4
00005EBC  6600 0006               7742                                  BNE     ea_Dn_SUB_reg5          ;if not equal got check reg 5
00005EC0  6700 004C               7743                                  BEQ     ea_Dn_SUB_reg4_out      ;if equal go to output
00005EC4                          7744  
00005EC4  B4BC 00000A00           7745  ea_Dn_SUB_reg5                  CMP.L       #match_SUB_reg5,D2      ;check to see if reg equal 5
00005ECA  6600 0006               7746                                  BNE     ea_Dn_SUB_reg6          ;if not equal got check reg 6
00005ECE  6700 0046               7747                                  BEQ     ea_Dn_SUB_reg5_out      ;if equal go to output
00005ED2                          7748  
00005ED2  B4BC 00000C00           7749  ea_Dn_SUB_reg6                  CMP.L       #match_SUB_reg6,D2      ;check to see if reg equal 6
00005ED8  6600 0006               7750                                  BNE     ea_Dn_SUB_reg7          ;if not equal got check reg 7
00005EDC  6700 0040               7751                                  BEQ     ea_Dn_SUB_reg6_out      ;if equal go to output          
00005EE0                          7752  
00005EE0  B4BC 00000E00           7753  ea_Dn_SUB_reg7                  CMP.L       #match_SUB_reg7,D2      ;check to see if reg equal 7
00005EE6  6700 003E               7754                                  BEQ     ea_Dn_SUB_reg7_out      ;if equal go to output
00005EEA  6600 12BE               7755                                  BNE             ERROR                           ;if not equal to an addresssing mode, pritn error
00005EEE                          7756                                  
00005EEE                          7757  
00005EEE                          7758  ;--------------------Data Output-----------------------
00005EEE  227C 00008494           7759  ea_Dn_SUB_reg0_out              MOVE.L      #ea_D0,A1           ;load string constant into A1
00005EF4  4E75                    7760                                  RTS
00005EF6                          7761                                              
00005EF6  227C 00008497           7762  ea_Dn_SUB_reg1_out              MOVE.L      #ea_D1,A1           ;load string constant into A1
00005EFC  4E75                    7763                                  RTS
00005EFE                          7764                                              
00005EFE  227C 0000849A           7765  ea_Dn_SUB_reg2_out              MOVE.L      #ea_D2,A1       ;load string constant into A1
00005F04  4E75                    7766                                  RTS
00005F06                          7767                                              
00005F06  227C 0000849D           7768  ea_Dn_SUB_reg3_out              MOVE.L      #ea_D3,A1           ;load string constant into A1
00005F0C  4E75                    7769                                  RTS
00005F0E                          7770                                              
00005F0E  227C 000084A0           7771  ea_Dn_SUB_reg4_out              MOVE.L      #ea_D4,A1       ;load string constant into A1
00005F14  4E75                    7772                                  RTS
00005F16                          7773                                              
00005F16  227C 000084A3           7774  ea_Dn_SUB_reg5_out              MOVE.L      #ea_D5,A1           ;load string constant into A1
00005F1C  4E75                    7775                                  RTS
00005F1E                          7776                                              
00005F1E  227C 000084A6           7777  ea_Dn_SUB_reg6_out              MOVE.L      #ea_D6,A1           ;load string constant into A1
00005F24  4E75                    7778                                  RTS
00005F26                          7779                                              
00005F26  227C 000084A9           7780  ea_Dn_SUB_reg7_out              MOVE.L      #ea_D7,A1           ;load string constant into A1
00005F2C  4E75                    7781                                  RTS             
00005F2E                          7782                                                                
00005F2E                          7783                        
00005F2E                          7784  ;------------------------------------------------------------------------------------------------------------------------------------------
00005F2E                          7785  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
00005F2E                          7786  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00005F2E  4282                    7787  SUB_Dn_ea                   CLR.L       D2              ;clear D2 
00005F30  C4BC 00000E00           7788                              AND.L       #mask_SUB_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
00005F36                          7789                                                  
00005F36  B4BC 00000000           7790  Dn_ea_SUB_reg0              CMP.L       #match_SUB_reg0,D2      ;check to see if reg equal 0
00005F3C  6600 0006               7791                              BNE     Dn_ea_SUB_reg1          ;if not equal got check reg 1
00005F40  6700 0064               7792                              BEQ     Dn_ea_SUB_reg0_out      ;if equal go to output
00005F44                          7793                                                  
00005F44  B4BC 00000200           7794  Dn_ea_SUB_reg1              CMP.L       #match_SUB_reg1,D2      ;check to see if reg equal 1
00005F4A  6600 0006               7795                              BNE     Dn_ea_SUB_reg2          ;if not equal got check reg 2
00005F4E  6700 0062               7796                              BEQ     Dn_ea_SUB_reg1_out      ;if equal go to output
00005F52                          7797  
00005F52  B4BC 00000400           7798  Dn_ea_SUB_reg2              CMP.L       #match_SUB_reg2,D2      ;check to see if reg equal 2
00005F58  6600 0006               7799                              BNE     Dn_ea_SUB_reg3          ;if not equal got check reg 3
00005F5C  6700 0060               7800                              BEQ     Dn_ea_SUB_reg2_out      ;if equal go to output
00005F60                          7801  
00005F60  B4BC 00000600           7802  Dn_ea_SUB_reg3              CMP.L       #match_SUB_reg3,D2      ;check to see if reg equal 3
00005F66  6600 0006               7803                              BNE     Dn_ea_SUB_reg4          ;if not equal got check reg 4
00005F6A  6700 005E               7804                              BEQ     Dn_ea_SUB_reg3_out      ;if equal go to output
00005F6E                          7805                                                  
00005F6E  B4BC 00000800           7806  Dn_ea_SUB_reg4              CMP.L       #match_SUB_reg4,D2      ;check to see if reg equal 4
00005F74  6600 0006               7807                              BNE     Dn_ea_SUB_reg5          ;if not equal got check reg 5
00005F78  6700 005C               7808                              BEQ     Dn_ea_SUB_reg4_out      ;if equal go to output
00005F7C                          7809  
00005F7C  B4BC 00000A00           7810  Dn_ea_SUB_reg5              CMP.L       #match_SUB_reg5,D2      ;check to see if reg equal 5
00005F82  6600 0006               7811                              BNE     Dn_ea_SUB_reg6          ;if not equal got check reg 6
00005F86  6700 005A               7812                              BEQ     Dn_ea_SUB_reg5_out      ;if equal go to output
00005F8A                          7813  
00005F8A  B4BC 00000C00           7814  Dn_ea_SUB_reg6              CMP.L       #match_SUB_reg6,D2      ;check to see if reg equal 6
00005F90  6600 0006               7815                              BNE     Dn_ea_SUB_reg7          ;if not equal got check reg 7
00005F94  6700 0058               7816                              BEQ     Dn_ea_SUB_reg6_out      ;if equal go to output          
00005F98                          7817  
00005F98  B4BC 00000E00           7818  Dn_ea_SUB_reg7              CMP.L       #match_SUB_reg7,D2      ;check to see if reg equal 7
00005F9E  6700 005A               7819                              BEQ     Dn_ea_SUB_reg7_out      ;if equal go to output
00005FA2  6600 1206               7820                              BNE             ERROR                           ;if not equal to an addresssing mode, pritn error
00005FA6                          7821                                  
00005FA6                          7822  
00005FA6                          7823  ;--------------------Data Output-----------------------
00005FA6  227C 00008494           7824  Dn_ea_SUB_reg0_out          MOVE.L      #ea_D0,A1               ;load string constant into A1
00005FAC  4EB9 00006006           7825                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005FB2                          7826                                              
00005FB2  227C 00008497           7827  Dn_ea_SUB_reg1_out             MOVE.L       #ea_D1,A1               ;load string constant into A1
00005FB8  4EB9 00006006           7828                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005FBE                          7829                                              
00005FBE  227C 0000849A           7830  Dn_ea_SUB_reg2_out            MOVE.L        #ea_D2,A1               ;load string constant into A1
00005FC4  4EB9 00006006           7831                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005FCA                          7832                                              
00005FCA  227C 0000849D           7833  Dn_ea_SUB_reg3_out            MOVE.L        #ea_D3,A1               ;load string constant into A1
00005FD0  4EB9 00006006           7834                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005FD6                          7835                                              
00005FD6  227C 000084A0           7836  Dn_ea_SUB_reg4_out            MOVE.L        #ea_D4,A1               ;load string constant into A1
00005FDC  4EB9 00006006           7837                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005FE2                          7838                                              
00005FE2  227C 000084A3           7839  Dn_ea_SUB_reg5_out            MOVE.L        #ea_D5,A1               ;load string constant into A1
00005FE8  4EB9 00006006           7840                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005FEE                          7841                                              
00005FEE  227C 000084A6           7842  Dn_ea_SUB_reg6_out              MOVE.L      #ea_D6,A1               ;load string constant into A1
00005FF4  4EB9 00006006           7843                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00005FFA                          7844                                              
00005FFA  227C 000084A9           7845  Dn_ea_SUB_reg7_out            MOVE.L        #ea_D7,A1               ;load string constant into A1
00006000  4EB9 00006006           7846                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006006                          7847                                              
00006006                          7848  
00006006                          7849  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00006006  4241                    7850  SUB_determine_second_operand         CLR               D1                             ;clear D1 to load new mask                                
00006008  C2BC 00000038           7851                                       AND.L             #mask_SUB_ea_mode,D1           ;move the mask to D1
0000600E                          7852  
0000600E                          7853  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000600E  B2BC 00000010           7854  SUB_Dn_ea_add_reg_indir              CMP.L           #match_SUB_An_indir,D1                ;check to see if mode is add reg indir
00006014  6600 0006               7855                                       BNE             SUB_Dn_ea_add_reg_indir_predec        ;if not, go check add reg indir predec 
00006018  6700 0042               7856                                       BEQ             SUB_Dn_ea_An_indir_reg                ;if equal go figure out the register           
0000601C                          7857             
0000601C  B2BC 00000020           7858  SUB_Dn_ea_add_reg_indir_predec       CMP.L           #match_SUB_An_indir_predec,D1         ;check to see if mode is add reg indor w/ postinc
00006022  6600 0006               7859                                       BNE             SUB_Dn_ea_add_reg_indir_postinc       ;if not go check add reg indir/predec
00006026  6700 019A               7860                                       BEQ             SUB_Dn_ea_An_indir_predec             ;if equal go figure out the register
0000602A                          7861                        
0000602A  B2BC 00000018           7862  SUB_Dn_ea_add_reg_indir_postinc      CMP.L           #match_SUB_An_indir_postinc,D1        ;check to see if mode is add reg indir w/predec
00006030  6600 0006               7863                                       BNE             SUB_Dn_ea_abs_add_word                ;if not go check abs add word
00006034  6700 00DC               7864                                       BEQ             SUB_Dn_ea_An_indir_postinc_reg        ;if equal go figure out the register
00006038                          7865  
00006038  C4BC 0000003F           7866  SUB_Dn_ea_abs_add_word               AND.L           #mask_SUB_abs_add,D2                  ;load mask to determine if abs add word or long
0000603E                          7867                                   
0000603E  B4BC 00000038           7868                                       CMP.L           #match_SUB_abs_add_word,D2            ;check if abs add word
00006044  2A18                    7869                                       MOVE.L          (A0)+,D5                              ;pull the next word instruction that holds the address
00006046  6600 0006               7870                                       BNE             SUB_Dn_ea_abs_add_long                ;if not go check abs add long
0000604A  6700 0226               7871                                       BEQ             SUB_Dn_ea_abs_add_word_out            ;if equal go to output
0000604E                          7872    
0000604E  B4BC 00000039           7873  SUB_Dn_ea_abs_add_long               CMP.L           #match_SUB_abs_add_long,D2            ;check to see if abs add long
00006054  6700 0226               7874                                       BEQ             SUB_Dn_ea_abs_add_long_out            ;if equal go to output
00006058  6600 1150               7875                                       BNE             ERROR                                 ;if not equal go to error mesage sub routine
0000605C                          7876  
0000605C                          7877  
0000605C                          7878  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
0000605C                          7879                                   
0000605C                          7880                                   
0000605C                          7881  ;------------------Address Register Indirect-----------------------
0000605C  C4BC 0000003F           7882  SUB_Dn_ea_An_indir_reg           AND.L            #mask_SUB_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
00006062  B4BC 00000010           7883                                   CMP.L           #match_SUB_An_indir_r0,D2              ;check reg is equal to 0
00006068  6600 0006               7884                                   BNE             SUB_Dn_ea_An_indir_reg1                ;if not try reg 1
0000606C  6700 0064               7885                                   BEQ             SUB_Dn_ea_An_indir_reg0_out            ;if equal go to output subroutine
00006070                          7886  
00006070  B4BC 00000011           7887  SUB_Dn_ea_An_indir_reg1          CMP.L           #match_SUB_An_indir_r1,D2              ;check reg is equal to 1
00006076  6600 0006               7888                                   BNE             SUB_Dn_ea_An_indir_reg2                ;if not try reg 2
0000607A  6700 005E               7889                                   BEQ             SUB_Dn_ea_An_indir_reg1_out            ;if equal go to output subroutine
0000607E                          7890  
0000607E  B4BC 00000012           7891  SUB_Dn_ea_An_indir_reg2          CMP.L           #match_SUB_An_indir_r2,D2              ;check reg is equal to 2
00006084  6600 0006               7892                                   BNE             SUB_Dn_ea_An_indir_reg3                ;if not try reg 3
00006088  6700 0058               7893                                   BEQ             SUB_Dn_ea_An_indir_reg2_out            ;if equal go to output subroutine
0000608C                          7894  
0000608C  B4BC 00000013           7895  SUB_Dn_ea_An_indir_reg3          CMP.L           #match_SUB_An_indir_r3,D2              ;check reg is equal to 3
00006092  6600 0006               7896                                   BNE             SUB_Dn_ea_An_indir_reg4                ;if not try reg 4
00006096  6700 0052               7897                                   BEQ             SUB_Dn_ea_An_indir_reg3_out            ;if equal go to output subroutine
0000609A                          7898      
0000609A  B4BC 00000014           7899  SUB_Dn_ea_An_indir_reg4          CMP.L           #match_SUB_An_indir_r4,D2              ;check reg is equal to 4
000060A0  6600 0006               7900                                   BNE             SUB_Dn_ea_An_indir_reg5                ;if not try reg 5
000060A4  6700 004C               7901                                   BEQ             SUB_Dn_ea_An_indir_reg4_out            ;if equal go to output subroutine
000060A8                          7902          
000060A8  B4BC 00000015           7903  SUB_Dn_ea_An_indir_reg5          CMP.L           #match_SUB_An_indir_r5,D2              ;check reg is equal to 5
000060AE  6600 0006               7904                                   BNE             SUB_Dn_ea_An_indir_reg6                ;if not try reg 6
000060B2  6700 0046               7905                                   BEQ             SUB_Dn_ea_An_indir_reg5_out            ;if equal go to output subroutine
000060B6                          7906  
000060B6  B4BC 00000016           7907  SUB_Dn_ea_An_indir_reg6          CMP.L           #match_SUB_An_indir_r6,D2              ;check reg is equal to 6
000060BC  6600 0006               7908                                   BNE             SUB_Dn_ea_An_indir_reg7                ;if not try reg 7
000060C0  6700 0040               7909                                   BEQ             SUB_Dn_ea_An_indir_reg6_out            ;if equal go to output subroutine
000060C4                          7910  
000060C4  B4BC 00000017           7911  SUB_Dn_ea_An_indir_reg7          CMP.L           #match_SUB_An_indir_r7,D2              ;check reg is equal to 7
000060CA  6700 003E               7912                                   BEQ             SUB_Dn_ea_An_indir_reg7_out            ;if equal go to output subroutine
000060CE  6600 10DA               7913                                   BNE             ERROR                                  ;if not equal to an addresssing mode, pritn error
000060D2                          7914  
000060D2                          7915  ;--------------------Address Register Indirect Output-----------------------
000060D2  227C 000084D4           7916  SUB_Dn_ea_An_indir_reg0_out     MOVE.L      #ea_indir_A0,A1             ;load string constant into A1
000060D8  4E75                    7917                                      RTS
000060DA                          7918  
000060DA  227C 000084D9           7919  SUB_Dn_ea_An_indir_reg1_out     MOVE.L      #ea_indir_A1,A1             ;load string constant into A1
000060E0  4E75                    7920                                      RTS
000060E2                          7921  
000060E2  227C 000084DE           7922  SUB_Dn_ea_An_indir_reg2_out     MOVE.L      #ea_indir_A2,A1             ;load string constant into A1
000060E8  4E75                    7923                                      RTS
000060EA                          7924  
000060EA  227C 000084E3           7925  SUB_Dn_ea_An_indir_reg3_out     MOVE.L      #ea_indir_A3,A1             ;load string constant into A1
000060F0  4E75                    7926                                      RTS
000060F2                          7927  
000060F2  227C 000084E8           7928  SUB_Dn_ea_An_indir_reg4_out     MOVE.L      #ea_indir_A4,A1             ;load string constant into A1
000060F8  4E75                    7929                                          RTS
000060FA                          7930  
000060FA  227C 000084ED           7931  SUB_Dn_ea_An_indir_reg5_out     MOVE.L      #ea_indir_A5,A1             ;load string constant into A1
00006100  4E75                    7932                                      RTS
00006102                          7933  
00006102  227C 000084F2           7934  SUB_Dn_ea_An_indir_reg6_out     MOVE.L      #ea_indir_A6,A1             ;load string constant into A1
00006108  4E75                    7935                                      RTS
0000610A                          7936                                          
0000610A  227C 000084F7           7937  SUB_Dn_ea_An_indir_reg7_out     MOVE.L      #ea_indir_A7,A1             ;load string constant into A1
00006110  4E75                    7938                                      RTS
00006112                          7939  
00006112                          7940  
00006112                          7941  ;------------------Address Register Indirect with Post Increment-----------------------
00006112  B4BC 00000018           7942  SUB_Dn_ea_An_indir_postinc_reg          CMP.L      #match_SUB_An_indir_postinc_r0,D2        ;check reg is equal to 0
00006118  6600 0006               7943                                          BNE        SUB_Dn_ea_An_indir_pinc_r1          ;if not try reg 1
0000611C  6700 0064               7944                                          BEQ        SUB_Dn_ea_An_indir_pinc_r0_out      ;if equal go to output subroutine
00006120                          7945  
00006120  B4BC 00000019           7946  SUB_Dn_ea_An_indir_pinc_r1              CMP.L      #match_SUB_An_indir_postinc_r1,D2        ;check reg is equal to 1
00006126  6600 0006               7947                                          BNE        SUB_Dn_ea_An_indir_pinc_r2          ;if not try reg 2
0000612A  6700 005E               7948                                          BEQ        SUB_Dn_ea_An_indir_pinc_r1_out      ;if equal go to output subroutine
0000612E                          7949  
0000612E  B4BC 0000001A           7950  SUB_Dn_ea_An_indir_pinc_r2              CMP.L      #match_SUB_An_indir_postinc_r2,D2        ;check reg is equal to 2
00006134  6600 0006               7951                                          BNE        SUB_Dn_ea_An_indir_pinc_r3          ;if not try reg 3
00006138  6700 0058               7952                                          BEQ        SUB_Dn_ea_An_indir_pinc_r2_out      ;if equal go to output subroutine
0000613C                          7953  
0000613C  B4BC 0000001B           7954  SUB_Dn_ea_An_indir_pinc_r3              CMP.L      #match_SUB_An_indir_postinc_r3,D2        ;check reg is equal to 3
00006142  6600 0006               7955                                          BNE        SUB_Dn_ea_An_indir_pinc_r4          ;if not try reg 4
00006146  6700 0052               7956                                          BEQ        SUB_Dn_ea_An_indir_pinc_r3_out      ;if equal go to output subroutine
0000614A                          7957   
0000614A  B4BC 0000001C           7958  SUB_Dn_ea_An_indir_pinc_r4              CMP.L      #match_SUB_An_indir_postinc_r4,D2        ;check reg is equal to 4
00006150  6600 0006               7959                                          BNE        SUB_Dn_ea_An_indir_pinc_r5          ;if not try reg 5
00006154  6700 004C               7960                                          BEQ        SUB_Dn_ea_An_indir_pinc_r4_out      ;if equal go to output subroutine
00006158                          7961  
00006158  B4BC 0000001D           7962  SUB_Dn_ea_An_indir_pinc_r5              CMP.L      #match_SUB_An_indir_postinc_r5,D2        ;check reg is equal to 5
0000615E  6600 0006               7963                                          BNE        SUB_Dn_ea_An_indir_pinc_r6          ;if not try reg 6
00006162  6700 0046               7964                                          BEQ        SUB_Dn_ea_An_indir_pinc_r5_out      ;if equal go to output subroutine
00006166                          7965  
00006166  B4BC 0000001E           7966  SUB_Dn_ea_An_indir_pinc_r6              CMP.L      #match_SUB_An_indir_postinc_r6,D2         ;check reg is equal to 6
0000616C  6600 0006               7967                                          BNE        SUB_Dn_ea_An_indir_pinc_r7           ;if not try reg 7
00006170  6700 0040               7968                                          BEQ        SUB_Dn_ea_An_indir_pinc_r6_out       ;if equal go to output subroutine
00006174                          7969  
00006174  B4BC 0000001F           7970  SUB_Dn_ea_An_indir_pinc_r7              CMP.L      #match_SUB_An_indir_postinc_r7,D2         ;check reg is equal to 7
0000617A  6700 003E               7971                                          BEQ        SUB_Dn_ea_An_indir_pinc_r7_out       ;if equal go to output subroutine
0000617E  6600 102A               7972                                          BNE        ERROR                                     ;if not equal to an addresssing mode, pritn error
00006182                          7973  
00006182                          7974  
00006182                          7975  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00006182  227C 000084FC           7976  SUB_Dn_ea_An_indir_pinc_r0_out              MOVE.L     #ea_indir_postinc_A0,A1       ;load string constant into A1
00006188  4E75                    7977                                              RTS
0000618A                          7978  
0000618A  227C 00008502           7979  SUB_Dn_ea_An_indir_pinc_r1_out              MOVE.L     #ea_indir_postinc_A1,A1       ;load string constant into A1
00006190  4E75                    7980                                              RTS
00006192                          7981  
00006192  227C 00008508           7982  SUB_Dn_ea_An_indir_pinc_r2_out              MOVE.L     #ea_indir_postinc_A2,A1       ;load string constant into A1
00006198  4E75                    7983                                              RTS
0000619A                          7984  
0000619A  227C 0000850E           7985  SUB_Dn_ea_An_indir_pinc_r3_out              MOVE.L     #ea_indir_postinc_A3,A1       ;load string constant into A1
000061A0  4E75                    7986                                              RTS
000061A2                          7987  
000061A2  227C 00008514           7988  SUB_Dn_ea_An_indir_pinc_r4_out              MOVE.L     #ea_indir_postinc_A4,A1       ;load string constant into A1
000061A8  4E75                    7989                                              RTS
000061AA                          7990  
000061AA  227C 0000851A           7991  SUB_Dn_ea_An_indir_pinc_r5_out              MOVE.L     #ea_indir_postinc_A5,A1       ;load string constant into A1
000061B0  4E75                    7992                                              RTS
000061B2                          7993  
000061B2  227C 00008520           7994  SUB_Dn_ea_An_indir_pinc_r6_out              MOVE.L     #ea_indir_postinc_A6,A1       ;load string constant into A1
000061B8  4E75                    7995                                              RTS
000061BA                          7996  
000061BA  227C 00008526           7997  SUB_Dn_ea_An_indir_pinc_r7_out              MOVE.L     #ea_indir_postinc_A7,A1       ;load string constant into A1
000061C0  4E75                    7998                                              RTS
000061C2                          7999  
000061C2                          8000  
000061C2                          8001  ;------------------Address Register Indirect with Pre Decrement-----------------------
000061C2  B4BC 00000020           8002  SUB_Dn_ea_An_indir_predec                   CMP.L      #match_SUB_An_indir_predec_reg0,D2       ;check reg is equal to 0
000061C8  6600 0006               8003                                              BNE        SUB_Dn_ea_An_indir_pdec_r1           ;if not try reg 1
000061CC  6700 0064               8004                                              BEQ        SUB_Dn_ea_An_indir_pdec_r0_out       ;if equal go to output subroutine
000061D0                          8005  
000061D0  B4BC 00000021           8006  SUB_Dn_ea_An_indir_pdec_r1                  CMP.L      #match_SUB_An_indir_predec_reg1,D2       ;check reg is equal to 1
000061D6  6600 0006               8007                                              BNE        SUB_Dn_ea_An_indir_pdec_r2           ;if not try reg 2
000061DA  6700 005E               8008                                              BEQ        SUB_Dn_ea_An_indir_pdec_r1_out       ;if equal go to output subroutine
000061DE                          8009  
000061DE  B4BC 00000022           8010  SUB_Dn_ea_An_indir_pdec_r2                  CMP.L      #match_SUB_An_indir_predec_reg2,D2       ;check reg is equal to 2
000061E4  6600 0006               8011                                              BNE        SUB_Dn_ea_An_indir_pdec_r3           ;if not try reg 3
000061E8  6700 0058               8012                                              BEQ        SUB_Dn_ea_An_indir_pdec_r2_out       ;if equal go to output subroutine
000061EC                          8013  
000061EC  B4BC 00000023           8014  SUB_Dn_ea_An_indir_pdec_r3                  CMP.L      #match_SUB_An_indir_predec_reg3,D2       ;check reg is equal to 3
000061F2  6600 0006               8015                                              BNE        SUB_Dn_ea_An_indir_pdec_r4           ;if not try reg 4
000061F6  6700 0052               8016                                              BEQ        SUB_Dn_ea_An_indir_pdec_r3_out       ;if equal go to output subroutine
000061FA                          8017  
000061FA  B4BC 00000024           8018  SUB_Dn_ea_An_indir_pdec_r4                  CMP.L      #match_SUB_An_indir_predec_reg4,D2       ;check reg is equal to 4
00006200  6600 0006               8019                                              BNE        SUB_Dn_ea_An_indir_pdec_r5           ;if not try reg 5
00006204  6700 004C               8020                                              BEQ        SUB_Dn_ea_An_indir_pdec_r4_out       ;if equal go to output subroutine
00006208                          8021  
00006208  B4BC 00000025           8022  SUB_Dn_ea_An_indir_pdec_r5                  CMP.L      #match_SUB_An_indir_predec_reg5,D2       ;check reg is equal to 5
0000620E  6600 0006               8023                                              BNE        SUB_Dn_ea_An_indir_pdec_r6           ;if not try reg 6
00006212  6700 0046               8024                                              BEQ        SUB_Dn_ea_An_indir_pdec_r5_out       ;if equal go to output subroutine
00006216                          8025  
00006216  B4BC 00000026           8026  SUB_Dn_ea_An_indir_pdec_r6                  CMP.L      #match_SUB_An_indir_predec_reg6,D2       ;check reg is equal to 6
0000621C  6600 0006               8027                                              BNE        SUB_Dn_ea_An_indir_pdec_r7           ;if not try reg 7
00006220  6700 0040               8028                                              BEQ        SUB_Dn_ea_An_indir_pdec_r6_out       ;if equal go to output subroutine
00006224                          8029  
00006224  B4BC 00000027           8030  SUB_Dn_ea_An_indir_pdec_r7                  CMP.L      #match_SUB_An_indir_predec_reg7,D2       ;check reg is equal to 7
0000622A  6700 003E               8031                                              BEQ        SUB_Dn_ea_An_indir_pdec_r7_out       ;if equal go to output subroutine
0000622E  6600 0F7A               8032                                              BNE        ERROR                                    ;if not equal to an addresssing mode, pritn error
00006232                          8033  
00006232                          8034  
00006232                          8035  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00006232  227C 0000852C           8036  SUB_Dn_ea_An_indir_pdec_r0_out              MOVE.L  #ea_indir_predec_A0,A1         ;load string constant into A1
00006238  4E75                    8037                                              RTS
0000623A                          8038                                              
0000623A  227C 00008532           8039  SUB_Dn_ea_An_indir_pdec_r1_out              MOVE.L  #ea_indir_predec_A1,A1         ;load string constant into A1
00006240  4E75                    8040                                              RTS
00006242                          8041  
00006242  227C 00008538           8042  SUB_Dn_ea_An_indir_pdec_r2_out              MOVE.L  #ea_indir_predec_A2,A1         ;load string constant into A1
00006248  4E75                    8043                                              RTS
0000624A                          8044  
0000624A  227C 0000853E           8045  SUB_Dn_ea_An_indir_pdec_r3_out              MOVE.L  #ea_indir_predec_A3,A1         ;load string constant into A1
00006250  4E75                    8046                                              RTS
00006252                          8047  
00006252  227C 00008544           8048  SUB_Dn_ea_An_indir_pdec_r4_out              MOVE.L  #ea_indir_predec_A4,A1         ;load string constant into A1
00006258  4E75                    8049                                              RTS
0000625A                          8050  
0000625A  227C 0000854A           8051  SUB_Dn_ea_An_indir_pdec_r5_out              MOVE.L  #ea_indir_predec_A5,A1         ;load string constant into A1
00006260  4E75                    8052                                              RTS
00006262                          8053  
00006262  227C 00008550           8054  SUB_Dn_ea_An_indir_pdec_r6_out              MOVE.L  #ea_indir_predec_A6,A1         ;load string constant into A1
00006268  4E75                    8055                                              RTS
0000626A                          8056  
0000626A  227C 00008556           8057  SUB_Dn_ea_An_indir_pdec_r7_out              MOVE.L  #ea_indir_predec_A7,A1         ;load string constant into A1
00006270  4E75                    8058                                              RTS
00006272                          8059                      
00006272                          8060                          
00006272                          8061  ;------------------Absolute Addressing Output-----------------------
00006272  22FC 00008566           8062  SUB_Dn_ea_abs_add_word_out        MOVE.L        #ea_$,(A1)+               ;load $ for hex and increment A1
00006278  22C5                    8063                                        MOVE.L        D5,(A1)+                  ;load address                  
0000627A  4E75                    8064                                        RTS                                     ;return to subroutine
0000627C                          8065                                             
0000627C                          8066  
0000627C  2A18                    8067  SUB_Dn_ea_abs_add_long_out            MOVE.L        (A0)+,D5                   ;pull the next long instruction that holds the address
0000627E  22FC 00008566           8068                                        MOVE.L        #ea_$,(A1)+                ;load $ for hex and increment A1
00006284  22C5                    8069                                        MOVE.L        D5,(A1)+                   ;load address                  
00006286  4E75                    8070                                        RTS                                      ;return to subroutine  
00006288                          8071  
00006288                          8072                                            
00006288                          8073  ;---------------Immediate Addresing--------------------------
00006288  2A18                    8074  SUB_Dn_ea_immediate_add_out           MOVE.L        (A0)+,D5                       ;capture the immediate address
0000628A  BCBC 000000FC           8075                                        CMP.L         #match_SUB_imm_add_word,D6     ;check to see if need to pull word
00006290  2A18                    8076                                        MOVE.L        (A0)+,D5                       ;pull the word
00006292  6700 0006               8077                                        BEQ           SUB_Dn_ea_imm_add_w            ;if equal go pull word    
00006296  6600 000C               8078                                        BNE           SUB_Dn_ea_imm_add_l            ;if not equal, go check long
0000629A                          8079                                           
0000629A  22FC 00008566           8080  SUB_Dn_ea_imm_add_w                   MOVE.L        #ea_$,(A1)+                    ;load the $
000062A0  32C5                    8081                                        MOVE.W        D5,(A1)+                       ;load the word address                           
000062A2  4E75                    8082                                        RTS
000062A4                          8083                                           
000062A4  2A18                    8084  SUB_Dn_ea_imm_add_l                   MOVE.L        (A0)+,D5                       ;pull the long and increase the pointer
000062A6  22FC 00008566           8085                                        MOVE.L        #ea_$,(A1)+                    ;load the $
000062AC                          8086   
000062AC  2245                    8087                                       MOVE.L        D5,A1                          ;move to A1
000062AE  4E75                    8088                                        RTS
000062B0                          8089  
000062B0                          8090  
000062B0  =000001C0               8091  mask_opmode                     EQU             $01C0            ;mask for the opmode to determine operand order
000062B0                          8092  
000062B0  =00000038               8093  mask_SUB_ea_mode        EQU     $0038
000062B0  =0000003F               8094  mask_SUB_abs_add        EQU     $003F
000062B0  =0000003F               8095  mask_SUB_ea_reg_and_mode    EQU     $003F
000062B0  =00000E00               8096  mask_SUB_An_reg         EQU     $0E00
000062B0                          8097  
000062B0                          8098  
000062B0  =00000100               8099  match_SUB_b_ea_Dn               EQU             $0100            ;match for ea,Dn byte size
000062B0  =00000140               8100  match_SUB_w_ea_Dn               EQU             $0140            ;match for ea,Dn word size
000062B0  =00000180               8101  match_SUB_l_ea_Dn               EQU             $0180            ;match for ea,Dn long size
000062B0                          8102  
000062B0  =00000000               8103  match_SUB_b_Dn_ea               EQU             $0000            ;match for Dn,ea byte size
000062B0  =00000040               8104  match_SUB_w_Dn_ea               EQU             $0040            ;match for Dn,ea word size
000062B0  =00000080               8105  match_SUB_l_Dn_ea               EQU             $0080            ;match for Dn,ea long size
000062B0                          8106  
000062B0                          8107  
000062B0                          8108  
000062B0  =00000000               8109  match_SUB_Dn            EQU     $0000
000062B0  =00000008               8110  match_SUB_An            EQU     $0008
000062B0  =00000010               8111  match_SUB_An_indir      EQU     $0010
000062B0  =00000020               8112  match_SUB_An_indir_predec   EQU     $0020
000062B0  =00000018               8113  match_SUB_An_indir_postinc  EQU     $0018
000062B0  =00000038               8114  match_SUB_abs_add_word      EQU     $0038
000062B0  =00000039               8115  match_SUB_abs_add_long      EQU     $0039
000062B0                          8116  
000062B0  =00000000               8117  match_SUB_D0            EQU     $0000
000062B0  =00000001               8118  match_SUB_D1            EQU     $0001
000062B0  =00000002               8119  match_SUB_D2            EQU     $0002
000062B0  =00000003               8120  match_SUB_D3            EQU     $0003
000062B0  =00000004               8121  match_SUB_D4            EQU     $0004
000062B0  =00000005               8122  match_SUB_D5            EQU     $0005
000062B0  =00000006               8123  match_SUB_D6            EQU     $0006
000062B0  =00000007               8124  match_SUB_D7            EQU     $0007
000062B0                          8125  
000062B0  =00000008               8126  match_SUB_A0            EQU     $0008
000062B0  =00000009               8127  match_SUB_A1            EQU     $0009
000062B0  =0000000A               8128  match_SUB_A2            EQU     $000A
000062B0  =0000000B               8129  match_SUB_A3            EQU     $000B
000062B0  =0000000C               8130  match_SUB_A4            EQU     $000C
000062B0  =0000000D               8131  match_SUB_A5            EQU     $000D
000062B0  =0000000E               8132  match_SUB_A6            EQU     $000E
000062B0  =0000000F               8133  match_SUB_A7            EQU     $000F
000062B0                          8134  
000062B0  =00000010               8135  match_SUB_An_indir_r0       EQU     $0010
000062B0  =00000011               8136  match_SUB_An_indir_r1       EQU     $0011
000062B0  =00000012               8137  match_SUB_An_indir_r2       EQU     $0012
000062B0  =00000013               8138  match_SUB_An_indir_r3       EQU     $0013
000062B0  =00000014               8139  match_SUB_An_indir_r4       EQU     $0014
000062B0  =00000015               8140  match_SUB_An_indir_r5       EQU     $0015
000062B0  =00000016               8141  match_SUB_An_indir_r6       EQU     $0016
000062B0  =00000017               8142  match_SUB_An_indir_r7       EQU     $0017
000062B0                          8143  
000062B0  =00000018               8144  match_SUB_An_indir_postinc_r0   EQU     $0018
000062B0  =00000019               8145  match_SUB_An_indir_postinc_r1   EQU     $0019
000062B0  =0000001A               8146  match_SUB_An_indir_postinc_r2   EQU     $001A
000062B0  =0000001B               8147  match_SUB_An_indir_postinc_r3   EQU     $001B
000062B0  =0000001C               8148  match_SUB_An_indir_postinc_r4   EQU     $001C
000062B0  =0000001D               8149  match_SUB_An_indir_postinc_r5   EQU     $001D
000062B0  =0000001E               8150  match_SUB_An_indir_postinc_r6   EQU     $001E
000062B0  =0000001F               8151  match_SUB_An_indir_postinc_r7   EQU     $001F
000062B0                          8152  
000062B0  =00000020               8153  match_SUB_An_indir_predec_reg0  EQU     $0020
000062B0  =00000021               8154  match_SUB_An_indir_predec_reg1  EQU     $0021
000062B0  =00000022               8155  match_SUB_An_indir_predec_reg2  EQU     $0022
000062B0  =00000023               8156  match_SUB_An_indir_predec_reg3  EQU     $0023
000062B0  =00000024               8157  match_SUB_An_indir_predec_reg4  EQU     $0024
000062B0  =00000025               8158  match_SUB_An_indir_predec_reg5  EQU     $0025
000062B0  =00000026               8159  match_SUB_An_indir_predec_reg6  EQU     $0026
000062B0  =00000027               8160  match_SUB_An_indir_predec_reg7  EQU     $0027
000062B0                          8161  
000062B0  =0000003C               8162  match_SUB_imm_add               EQU             $003C
000062B0  =000000FC               8163  match_SUB_imm_add_word          EQU             $00FC
000062B0  =000001FC               8164  match_SUB_imm_add_long          EQU             $01FC
000062B0                          8165  
000062B0  =00000000               8166  match_SUB_reg0          EQU     $0000
000062B0  =00000200               8167  match_SUB_reg1          EQU     $0200
000062B0  =00000400               8168  match_SUB_reg2          EQU     $0400
000062B0  =00000600               8169  match_SUB_reg3          EQU     $0600
000062B0  =00000800               8170  match_SUB_reg4          EQU     $0800
000062B0  =00000A00               8171  match_SUB_reg5          EQU     $0A00
000062B0  =00000C00               8172  match_SUB_reg6          EQU     $0C00
000062B0  =00000E00               8173  match_SUB_reg7          EQU     $0E00
000062B0                          8174  
000062B0                          8175  
000062B0                          8176  
000062B0                          8177  -------------------- end include --------------------
000062B0                          8178              INCLUDE 'LSD Subroutine.x68'
000062B0                          8179  
000062B0                          8180  LSD_sub                                          ;preserve the registers,\ 
000062B0                          8181                                   
000062B0                          8182  ;------------------------Determine Shift Type-----------------------------------------------------------------
000062B0  C2BC 000000C0           8183  LSD_shift_type                   AND.L              #mask_LSD_shift_type,D1                 ;load mask into D1
000062B6  B2BC 000000C0           8184                                   CMP.L              #match_LSD_mem_shift,D1                 ;check to see if memory shift
000062BC  6700 0006               8185                                   BEQ                LSD_mem_shift                               ;if equal go to mem shift subroutine
000062C0  6600 0282               8186                                   BNE                LSD_reg_shift                               ;if LSD mem shift, go to reg shift
000062C4                          8187  
000062C4                          8188  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
000062C4  4241                    8189  LSD_mem_shift                    CLR               D1                                        ;clear shift mask
000062C6  C2BC 00000038           8190                                   AND.L             #mask_LSD_ea_mode,D1                      ;move the mask to D1
000062CC                          8191  
000062CC  B2BC 00000010           8192  LSD_An_indir                     CMP.L             #match_LSD_An_indir,D1                    ;check to see if mode is add reg indir
000062D2  6600 0014               8193                                   BNE               LSD_An_indir_predec                           ;if LSD, go check add reg indir predec 
000062D6  6700 0042               8194                                   BEQ               LSD_An_indir_reg                              ;if equal go figure out the register           
000062DA                          8195            
000062DA  B2BC 00000020           8196  LSD_An_indir_postinc             CMP.L             #match_LSD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
000062E0  6600 0006               8197                                   BNE               LSD_An_indir_predec                           ;if LSD go check add reg indir/predec
000062E4  6700 00EC               8198                                   BEQ               LSD_An_indir_postinc_reg                      ;if equal go figure out the register
000062E8                          8199                        
000062E8  B2BC 00000018           8200  LSD_An_indir_predec              CMP.L             #match_LSD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
000062EE  6600 0006               8201                                   BNE               LSD_abs_add_word                              ;if LSD go check abs add word
000062F2  6700 018A               8202                                   BEQ               LSD_An_indir_predec_reg                       ;if equal go figure out the register
000062F6                          8203  
000062F6  C4BC 0000003F           8204  LSD_abs_add_word                 AND.L             #mask_LSD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
000062FC                          8205                                   
000062FC  B4BC 00000039           8206                                   CMP.L             #match_LSD_abs_add_word,D2                ;check if abs add word
00006302  2A18                    8207                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00006304  6600 0006               8208                                   BNE               LSD_abs_add_long                              ;if LSD go check abs add long
00006308  6700 0224               8209                                   BEQ               LSD_abs_add_word_out                          ;if equal go to output
0000630C                          8210    
0000630C  B4BC 0000003C           8211  LSD_abs_add_long                 CMP.L             #match_LSD_abs_add_long,D2                ;check to see if abs add long
00006312  6700 0224               8212                                   BEQ               LSD_abs_add_long_out                          ;if equal go to output
00006316  6600 0E92               8213                                   BNE               ERROR                                     ;if LSD equal to an addresssing mode, pritn error
0000631A                          8214                               
0000631A                          8215  
0000631A                          8216  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
0000631A                          8217                                              
0000631A                          8218  ;------------------Address Register Indirect-----------------------
0000631A  4242                    8219  LSD_An_indir_reg                            CLR                D2                                      ;make sure D2 is empty
0000631C  C4BC 0000003F           8220                                              AND.L              #mask_LSD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00006322                          8221  
00006322  B4BC 00000010           8222                                              CMP.L           #match_LSD_An_indir_r0,D2              ;check reg is equal to 0
00006328  6600 0006               8223                                              BNE             LSD_An_indir_reg1                            ;if LSD try reg 1
0000632C  6700 0064               8224                                              BEQ             LSD_An_indir_reg0_out                     ;if equal go to output subroutine
00006330                          8225  
00006330  B4BC 00000011           8226  LSD_An_indir_reg1                           CMP.L           #match_LSD_An_indir_r1,D2              ;check reg is equal to 1
00006336  6600 0006               8227                                              BNE             LSD_An_indir_reg2                            ;if LSD try reg 2
0000633A  6700 005E               8228                                              BEQ             LSD_An_indir_reg1_out                     ;if equal go to output subroutine
0000633E                          8229  
0000633E  B4BC 00000012           8230  LSD_An_indir_reg2                           CMP.L           #match_LSD_An_indir_r2,D2              ;check reg is equal to 2
00006344  6600 0006               8231                                              BNE             LSD_An_indir_reg3                            ;if LSD try reg 3
00006348  6700 0058               8232                                              BEQ             LSD_An_indir_reg2_out                     ;if equal go to output subroutine
0000634C                          8233  
0000634C  B4BC 00000013           8234  LSD_An_indir_reg3                           CMP.L           #match_LSD_An_indir_r3,D2              ;check reg is equal to 3
00006352  6600 0006               8235                                              BNE             LSD_An_indir_reg4                            ;if LSD try reg 4
00006356  6700 0052               8236                                              BEQ             LSD_An_indir_reg3_out                     ;if equal go to output subroutine
0000635A                          8237  
0000635A  B4BC 00000014           8238  LSD_An_indir_reg4                           CMP.L           #match_LSD_An_indir_r4,D2              ;check reg is equal to 4
00006360  6600 0006               8239                                              BNE             LSD_An_indir_reg5                            ;if LSD try reg 5
00006364  6700 004C               8240                                              BEQ             LSD_An_indir_reg4_out                    ;if equal go to output subroutine
00006368                          8241  
00006368  B4BC 00000015           8242  LSD_An_indir_reg5                           CMP.L           #match_LSD_An_indir_r5,D2              ;check reg is equal to 5
0000636E  6600 0006               8243                                              BNE             LSD_An_indir_reg6                            ;if LSD try reg 6
00006372  6700 0046               8244                                              BEQ             LSD_An_indir_reg5_out                     ;if equal go to output subroutine
00006376                          8245  
00006376  B4BC 00000016           8246  LSD_An_indir_reg6                           CMP.L           #match_LSD_An_indir_r6,D2              ;check reg is equal to 6
0000637C  6700 0044               8247                                              BEQ             LSD_An_indir_reg6_out                     ;if equal go to output subroutine
00006380  6600 0002               8248                                              BNE             LSD_An_indir_reg7
00006384                          8249  
00006384  B4BC 00000017           8250  LSD_An_indir_reg7                           CMP.L           #match_LSD_An_indir_r7,D2              ;check reg is equal to 6
0000638A  6700 003E               8251                                              BEQ             LSD_An_indir_reg7_out                     ;if equal go to output subroutine
0000638E  6600 0E1A               8252                                              BNE             ERROR                                        :if LSD equal to an addresssing mode, pritn error
00006392                          8253  
00006392                          8254  ;--------------------Address Register Indirect Output-----------------------
00006392  227C 000084D4           8255  LSD_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
00006398                          8256                                       
00006398  4E75                    8257                                          RTS                                                         ;return to subroutine
0000639A                          8258                                      
0000639A  227C 000084D9           8259  LSD_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
000063A0                          8260                                       
000063A0  4E75                    8261                                          RTS                                                         ;return to subroutine
000063A2                          8262                                              
000063A2  227C 000084DE           8263  LSD_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
000063A8                          8264                                       
000063A8  4E75                    8265                                          RTS                                                     ;return to subroutine
000063AA                          8266  
000063AA  227C 000084E3           8267  LSD_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
000063B0                          8268                                       
000063B0  4E75                    8269                                          RTS                                                     ;return to subroutine
000063B2                          8270                                              
000063B2  227C 000084E8           8271  LSD_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
000063B8                          8272                                       
000063B8  4E75                    8273                                          RTS                                                         ;return to subroutine
000063BA                          8274                                          
000063BA  227C 000084ED           8275  LSD_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
000063C0                          8276                                       
000063C0  4E75                    8277                                          RTS                                                     ;return to subroutine
000063C2                          8278  
000063C2  227C 000084F2           8279  LSD_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
000063C8                          8280                                       
000063C8  4E75                    8281                                          RTS                                                         ;return to subroutine
000063CA                          8282  
000063CA  227C 000084F7           8283  LSD_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
000063D0                          8284                                       
000063D0  4E75                    8285                                          RTS                                                         ;return to subroutine
000063D2                          8286  
000063D2                          8287  ;------------------Address Register Indirect with Post Increment-----------------------
000063D2  B4BC 00000020           8288  LSD_An_indir_postinc_reg                    CMP.L      #match_LSD_An_indir_postinc_r0,D2        ;check reg is equal to 0
000063D8                          8289  
000063D8  6600 0006               8290                                              BNE        LSD_An_indir_pinc_r1                      ;if LSD try reg 1
000063DC  6700 0060               8291                                              BEQ        LSD_An_indir_pinc_r0_out               ;if equal go to output subroutine
000063E0                          8292  
000063E0  B4BC 00000021           8293  LSD_An_indir_pinc_r1                        CMP.L      #match_LSD_An_indir_postinc_r1,D2        ;check reg is equal to 1
000063E6  6600 0006               8294                                              BNE        LSD_An_indir_pinc_r2                      ;if LSD try reg 2
000063EA  6700 005A               8295                                              BEQ        LSD_An_indir_pinc_r1_out               ;if equal go to output subroutine
000063EE                          8296  
000063EE  B4BC 00000022           8297  LSD_An_indir_pinc_r2                        CMP.L      #match_LSD_An_indir_postinc_r2,D2        ;check reg is equal to 2
000063F4  6600 0006               8298                                              BNE        LSD_An_indir_pinc_r3                      ;if LSD try reg 3
000063F8  6700 0054               8299                                              BEQ        LSD_An_indir_pinc_r2_out               ;if equal go to output subroutine
000063FC                          8300      
000063FC  B4BC 00000023           8301  LSD_An_indir_pinc_r3                        CMP.L      #match_LSD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00006402  6600 0006               8302                                              BNE        LSD_An_indir_pinc_r4                      ;if LSD try reg 4
00006406  6700 004E               8303                                              BEQ        LSD_An_indir_pinc_r3_out               ;if equal go to output subroutine
0000640A                          8304   
0000640A  B4BC 00000024           8305  LSD_An_indir_pinc_r4                        CMP.L      #match_LSD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00006410  6600 0006               8306                                              BNE        LSD_An_indir_pinc_r5                      ;if LSD try reg 5
00006414  6700 0048               8307                                              BEQ        LSD_An_indir_pinc_r4_out               ;if equal go to output subroutine
00006418                          8308  
00006418  B4BC 00000025           8309  LSD_An_indir_pinc_r5                        CMP.L      #match_LSD_An_indir_postinc_r5,D2        ;check reg is equal to 5
0000641E  6600 0006               8310                                              BNE        LSD_An_indir_pinc_r6                      ;if LSD try reg 6
00006422  6700 0042               8311                                              BEQ        LSD_An_indir_pinc_r5_out               ;if equal go to output subroutine
00006426                          8312  
00006426  B4BC 00000026           8313  LSD_An_indir_pinc_r6                        CMP.L      #match_LSD_An_indir_postinc_r6,D2        ;check reg is equal to 6
0000642C  6700 0040               8314                                              BEQ        LSD_An_indir_pinc_r6_out              ;if equal go to output subroutine
00006430                          8315  
00006430  B4BC 00000027           8316  LSD_An_indir_pinc_r7                        CMP.L      #match_LSD_An_indir_postinc_r7,D2        ;check reg is equal to 6
00006436  6700 003E               8317                                              BEQ        LSD_An_indir_pinc_r7_out              ;if equal go to output subroutine
0000643A  6600 0D6E               8318                                              BNE        ERROR                                        :if LSD equal to an addresssing mode, pritn error
0000643E                          8319  
0000643E                          8320  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000643E  227C 00008502           8321  LSD_An_indir_pinc_r0_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
00006444                          8322                                       
00006444  4E75                    8323                                              RTS                                             ;return to subroutine
00006446                          8324  
00006446  227C 00008502           8325  LSD_An_indir_pinc_r1_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
0000644C                          8326                                       
0000644C  4E75                    8327                                              RTS                                             ;return to subroutine
0000644E                          8328  
0000644E  227C 00008508           8329  LSD_An_indir_pinc_r2_out                    MOVE.L          #ea_indir_postinc_A2,A1                         ;load string constant into A1
00006454                          8330                                       
00006454  4E75                    8331                                              RTS                                             ;return to subroutine
00006456                          8332  
00006456  227C 0000850E           8333  LSD_An_indir_pinc_r3_out                    MOVE.L          #ea_indir_postinc_A3,A1                         ;load string constant into A1
0000645C                          8334                                       
0000645C  4E75                    8335                                              RTS                                             ;return to subroutine
0000645E                          8336  
0000645E  227C 00008514           8337  LSD_An_indir_pinc_r4_out                    MOVE.L          #ea_indir_postinc_A4,A1                         ;load string constant into A1
00006464                          8338                                       
00006464  4E75                    8339                                              RTS                                             ;return to subroutine
00006466                          8340  
00006466  227C 0000851A           8341  LSD_An_indir_pinc_r5_out                    MOVE.L          #ea_indir_postinc_A5,A1                         ;load string constant into A1
0000646C                          8342                                       
0000646C  4E75                    8343                                              RTS                                             ;return to subroutine
0000646E                          8344   
0000646E  227C 00008520           8345  LSD_An_indir_pinc_r6_out                    MOVE.L          #ea_indir_postinc_A6,A1                         ;load string constant into A1
00006474                          8346                                       
00006474  4E75                    8347                                              RTS                                             ;return to subroutine
00006476                          8348  
00006476  227C 00008526           8349  LSD_An_indir_pinc_r7_out                    MOVE.L          #ea_indir_postinc_A7,A1                         ;load string constant into A1
0000647C                          8350                                       
0000647C  4E75                    8351                                              RTS                                             ;return to subroutine
0000647E                          8352  
0000647E                          8353                                                      
0000647E                          8354  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000647E  B4BC 00000018           8355  LSD_An_indir_predec_reg                     CMP.L      #match_LSD_An_indir_predec_r0,D2         ;check reg is equal to 0
00006484  6600 0006               8356                                              BNE        LSD_An_indir_pdec_r1                      ;if LSD try reg 1
00006488  6700 0064               8357                                              BEQ        LSD_An_indir_pdec_r0_out               ;if equal go to output subroutine
0000648C                          8358  
0000648C  B4BC 00000019           8359  LSD_An_indir_pdec_r1                        CMP.L      #match_LSD_An_indir_predec_r1,D2         ;check reg is equal to 1
00006492  6600 0006               8360                                              BNE        LSD_An_indir_pdec_r2                      ;if LSD try reg 2
00006496  6700 005E               8361                                              BEQ        LSD_An_indir_pdec_r1_out               ;if equal go to output subroutine
0000649A                          8362  
0000649A  B4BC 0000001A           8363  LSD_An_indir_pdec_r2                        CMP.L      #match_LSD_An_indir_predec_r2,D2         ;check reg is equal to 2
000064A0  6600 0006               8364                                              BNE        LSD_An_indir_pdec_r3                      ;if LSD try reg 3
000064A4  6700 0058               8365                                              BEQ        LSD_An_indir_pdec_r2_out               ;if equal go to output subroutine
000064A8                          8366  
000064A8  B4BC 0000001B           8367  LSD_An_indir_pdec_r3                        CMP.L      #match_LSD_An_indir_predec_r3,D2         ;check reg is equal to 3
000064AE  6600 0006               8368                                              BNE        LSD_An_indir_pdec_r4                      ;if LSD try reg 4
000064B2  6700 0052               8369                                              BEQ        LSD_An_indir_pdec_r3_out               ;if equal go to output subroutine
000064B6                          8370  
000064B6  B4BC 0000001C           8371  LSD_An_indir_pdec_r4                        CMP.L      #match_LSD_An_indir_predec_r4,D2         ;check reg is equal to 4
000064BC  6600 0006               8372                                              BNE        LSD_An_indir_pdec_r5                      ;if LSD try reg 5
000064C0  6700 004C               8373                                              BEQ        LSD_An_indir_pdec_r4_out               ;if equal go to output subroutine
000064C4                          8374  
000064C4  B4BC 0000001D           8375  LSD_An_indir_pdec_r5                        CMP.L      #match_LSD_An_indir_predec_r5,D2         ;check reg is equal to 5
000064CA  6600 0006               8376                                              BNE        LSD_An_indir_pdec_r6                      ;if LSD try reg 6
000064CE  6700 0046               8377                                              BEQ        LSD_An_indir_pdec_r5_out               ;if equal go to output subroutine
000064D2                          8378  
000064D2  B4BC 0000001E           8379  LSD_An_indir_pdec_r6                        CMP.L      #match_LSD_An_indir_predec_r6,D2         ;check reg is equal to 6
000064D8  6700 0044               8380                                              BEQ        LSD_An_indir_pdec_r6_out               ;if equal go to output subroutine
000064DC  6600 0002               8381                                              BNE        LSD_An_indir_pdec_r7
000064E0                          8382                                              
000064E0  B4BC 00000001           8383  LSD_An_indir_pdec_r7                        CMP.L      #match_LSD_An_indir_predec_r7,D2         ;check reg is equal to 6
000064E6  6700 003E               8384                                              BEQ        LSD_An_indir_pdec_r7_out               ;if equal go to output subroutine
000064EA  6600 0CBE               8385                                              BNE        ERROR                                        :if LSD equal to an addresssing mode, pritn error
000064EE                          8386  
000064EE                          8387  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000064EE  227C 0000852C           8388  LSD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
000064F4                          8389                                       
000064F4  4E75                    8390                                              RTS                                                     ;return to subroutine
000064F6                          8391  
000064F6  227C 00008532           8392  LSD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
000064FC                          8393                                       
000064FC  4E75                    8394                                              RTS                                                     ;return to subroutine
000064FE                          8395                                                      
000064FE  227C 00008538           8396  LSD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
00006504                          8397                                       
00006504  4E75                    8398                                              RTS                                                     ;return to subroutine
00006506                          8399  
00006506  227C 0000853E           8400  LSD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
0000650C                          8401                                       
0000650C  4E75                    8402                                              RTS                                                     ;return to subroutine
0000650E                          8403  
0000650E  227C 00008544           8404  LSD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
00006514                          8405                                       
00006514  4E75                    8406                                              RTS                                                     ;return to subroutine
00006516                          8407      
00006516  227C 0000854A           8408  LSD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
0000651C                          8409                                       
0000651C  4E75                    8410                                              RTS                                                     ;return to subroutine
0000651E                          8411      
0000651E  227C 00008550           8412  LSD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
00006524                          8413                                       
00006524  4E75                    8414                                              RTS                                                     ;return to subroutine
00006526                          8415  
00006526  227C 00008556           8416  LSD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
0000652C                          8417                                       
0000652C  4E75                    8418                                              RTS                                                     ;return to subroutine
0000652E                          8419                                                      
0000652E                          8420  ;------------------Absolute Addressing Output-----------------------
0000652E  22FC 00008566           8421  LSD_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00006534  22C5                    8422                                           MOVE.L      D5,(A1)+                           ;load address                  
00006536                          8423                                       
00006536  4E75                    8424                                           RTS                                            :return to subroutine
00006538                          8425                                             
00006538                          8426  
00006538  2A18                    8427  LSD_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000653A  22FC 00008566           8428                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00006540  22C5                    8429                                           MOVE.L      D5,(A1)+                           ;load address                  
00006542                          8430                                       
00006542  4E75                    8431                                           RTS                                            :return to subroutine                                            
00006544                          8432  
00006544                          8433                                                  
00006544                          8434  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
00006544                          8435  ; determine if the shift is a data register or a immediate value
00006544  4241                    8436  LSD_reg_shift                       CLR         D1                              ;clear D1
00006546  C2BC 00000020           8437                                      AND.L       #mask_LSD_reg_shift_ir,D1           ;load the mask into D1
0000654C  B2BC 00000020           8438                                      CMP.L       #match_LSD_shift_reg,D1             ;check to see if the shift is a data register
00006552  6700 0006               8439                                      BEQ         LSD_shift_reg                       ;if the shift is a register, go to subroutine
00006556  6600 007A               8440                                      BNE         LSD_count_val                       ;if LSD go to immediate value subroutine
0000655A                          8441  
0000655A                          8442  ;i/r = 1, the shift is a Data register                                    
0000655A                          8443  ; this the subroutine for the data register shift
0000655A  4241                    8444  LSD_shift_reg                       CLR         D1                              ;clear D1
0000655C  C2BC 00000020           8445                                      AND.L       #mask_LSD_reg_shift,D1              ;load mask into D1 for bits 11-9
00006562                          8446  
00006562  B2BC 00000000           8447  LSD_count_reg0                      CMP.L       #match_LSD_count_reg0,D1            ;check to see if count/shift = 0
00006568  6600 0006               8448                                      BNE         LSD_count_reg1                    ;if LSD go check 1
0000656C  6700 0134               8449                                      BEQ         LSD_count_reg0_out                ;got to output
00006570                          8450                                      
00006570  B2BC 00000200           8451  LSD_count_reg1                      CMP.L       #match_LSD_count_reg1,D1            ;check to see if count/shift = 1
00006576  6600 0006               8452                                      BNE         LSD_count_reg2                    ;if LSD go check 2
0000657A  6700 0132               8453                                      BEQ         LSD_count_reg1_out                ;got to output
0000657E                          8454  
0000657E  B2BC 00000400           8455  LSD_count_reg2                      CMP.L       #match_LSD_count_reg2,D1            ;check to see if count/shift = 2
00006584  6600 0006               8456                                      BNE         LSD_count_reg3                    ;if LSD go check 3
00006588  6700 0130               8457                                      BEQ         LSD_count_reg2_out                ;got to output
0000658C                          8458  
0000658C  B2BC 00000600           8459  LSD_count_reg3                      CMP.L       #match_LSD_count_reg3,D1            ;check to see if count/shift = 3
00006592  6600 0006               8460                                      BNE         LSD_count_reg4                    ;if LSD go check 4
00006596  6700 012E               8461                                      BEQ         LSD_count_reg3_out                ;got to output
0000659A                          8462  
0000659A  B2BC 00000800           8463  LSD_count_reg4                      CMP.L       #match_LSD_count_reg4,D1            ;check to see if count/shift = 4
000065A0  6600 0006               8464                                      BNE         LSD_count_reg5                    ;if LSD go check 5
000065A4  6700 012C               8465                                      BEQ         LSD_count_reg4_out                ;got to output
000065A8                          8466  
000065A8  B2BC 00000A00           8467  LSD_count_reg5                      CMP.L       #match_LSD_count_reg5,D1            ;check to see if count/shift = 5
000065AE  6600 0006               8468                                      BNE         LSD_count_reg6                      ;if LSD go check 6
000065B2  6700 012A               8469                                      BEQ         LSD_count_reg5_out                  ;got to output
000065B6                          8470  
000065B6  B2BC 00000C00           8471  LSD_count_reg6                      CMP.L       #match_LSD_count_reg6,D1            ;check to see if count/shift = 6
000065BC  6600 0006               8472                                      BNE         LSD_count_reg7                      ;if LSD go check 7
000065C0  6700 0128               8473                                      BEQ         LSD_count_reg6_out                  ;got to output
000065C4                          8474  
000065C4  B2BC 00000E00           8475  LSD_count_reg7                      CMP.L       #match_LSD_count_reg7,D1            ;check to see if count/shift = 7
000065CA  6600 0BDE               8476                                      BNE         ERROR                           ; if none of the registers, then print error message
000065CE  6700 0126               8477                                      BEQ         LSD_count_reg7_out                  ;got to output
000065D2                          8478  
000065D2                          8479  
000065D2                          8480  
000065D2                          8481  ;i/r = 0, the shift is an immediate value
000065D2                          8482  ;1-7 = 1-7
000065D2                          8483  ;0 = 8
000065D2                          8484  ; this is the subroutine for the immedite value shift
000065D2  B2BC 00000000           8485  LSD_count_val                       CMP.L       #match_LSD_count_val0,D1          ;check to see if shift count is 0
000065D8  6600 0006               8486                                      BNE         LSD_count_val1                    ;if LSD 0 check 1
000065DC  6700 0064               8487                                      BEQ         LSD_count_val0_out                ;if 0 got to output
000065E0                          8488  
000065E0  B2BC 00000200           8489  LSD_count_val1                      CMP.L       #match_LSD_count_val1,D1          ;check to see if shift count is 0
000065E6  6600 0006               8490                                      BNE         LSD_count_val2                    ;if LSD 0 check 1
000065EA  6700 0062               8491                                      BEQ         LSD_count_val1_out                ;if 0 got to output
000065EE                          8492  
000065EE  B2BC 00000400           8493  LSD_count_val2                      CMP.L       #match_LSD_count_val2,D1          ;check to see if shift count is 0
000065F4  6600 0006               8494                                      BNE         LSD_count_val3                    ;if LSD 0 check 1
000065F8  6700 0060               8495                                      BEQ         LSD_count_val2_out                ;if 0 got to output
000065FC                          8496  
000065FC  B2BC 00000600           8497  LSD_count_val3                      CMP.L       #match_LSD_count_val3,D1          ;check to see if shift count is 0
00006602  6600 0006               8498                                      BNE         LSD_count_val4                    ;if LSD 0 check 1
00006606  6700 005E               8499                                      BEQ         LSD_count_val3_out                ;if 0 got to output
0000660A                          8500  
0000660A  B2BC 00000800           8501  LSD_count_val4                      CMP.L       #match_LSD_count_val4,D1          ;check to see if shift count is 0
00006610  6600 0006               8502                                      BNE         LSD_count_val5                    ;if LSD 0 check 1
00006614  6700 005C               8503                                      BEQ         LSD_count_val4_out                ;if 0 got to output
00006618                          8504  
00006618  B2BC 00000A00           8505  LSD_count_val5                      CMP.L       #match_LSD_count_val5,D1          ;check to see if shift count is 0
0000661E  6600 0006               8506                                      BNE         LSD_count_val6                    ;if LSD 0 check 1
00006622  6700 005A               8507                                      BEQ         LSD_count_val5_out                ;if 0 got to output
00006626                          8508  
00006626  B2BC 00000C00           8509  LSD_count_val6                      CMP.L       #match_LSD_count_val6,D1          ;check to see if shift count is 0
0000662C  6600 0006               8510                                      BNE         LSD_count_val7                    ;if LSD 0 check 1
00006630  6700 0058               8511                                      BEQ         LSD_count_val6_out                ;if 0 got to output
00006634                          8512  
00006634  B2BC 00000E00           8513  LSD_count_val7                      CMP.L       #match_LSD_count_val7,D1          ;check to see if shift count is 0
0000663A  6600 0B6E               8514                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
0000663E  6700 0056               8515                                      BEQ         LSD_count_val7_out                ;if 0 got to output
00006642                          8516  
00006642                          8517  ;-----------------------------------Count Shift Immedite Value Output---------------------------
00006642  227C 000084C4           8518  LSD_count_val0_out            MOVE.L            #ea_val0,A1         ;load string constant into A1
00006648  4EB9 00006702           8519                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
0000664E                          8520                                
0000664E  227C 000084C6           8521  LSD_count_val1_out            MOVE.L            #ea_val1,A1         ;load string constant into A1
00006654  4EB9 00006702           8522                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
0000665A                          8523  
0000665A  227C 000084C8           8524  LSD_count_val2_out            MOVE.L            #ea_val2,A1         ;load string constant into A1
00006660  4EB9 00006702           8525                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006666                          8526  
00006666  227C 000084CA           8527  LSD_count_val3_out            MOVE.L            #ea_val3,A1         ;load string constant into A1
0000666C  4EB9 00006702           8528                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006672                          8529  
00006672  227C 000084CC           8530  LSD_count_val4_out            MOVE.L            #ea_val4,A1         ;load string constant into A1
00006678  4EB9 00006702           8531                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
0000667E                          8532  
0000667E  227C 000084CE           8533  LSD_count_val5_out            MOVE.L            #ea_val5,A1         ;load string constant into A1
00006684  4EB9 00006702           8534                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
0000668A                          8535  
0000668A  227C 000084D0           8536  LSD_count_val6_out            MOVE.L            #ea_val6,A1         ;load string constant into A1
00006690  4EB9 00006702           8537                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
00006696                          8538  
00006696  227C 000084D2           8539  LSD_count_val7_out            MOVE.L            #ea_val7,A1         ;load string constant into A1
0000669C  4EB9 00006702           8540                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000066A2                          8541  
000066A2                          8542  ;-------------------------Count Shift Output (Dn)-----------------------------------------
000066A2  227C 00008494           8543  LSD_count_reg0_out            MOVE.L            #ea_D0,A1           ;load string constant into A1
000066A8  4EB9 00006702           8544                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000066AE                          8545                                
000066AE  227C 00008497           8546  LSD_count_reg1_out            MOVE.L            #ea_D1,A1           ;load string constant into A1
000066B4  4EB9 00006702           8547                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000066BA                          8548                                
000066BA  227C 0000849A           8549  LSD_count_reg2_out            MOVE.L            #ea_D2,A1           ;load string constant into A1
000066C0  4EB9 00006702           8550                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000066C6                          8551                                
000066C6  227C 0000849D           8552  LSD_count_reg3_out            MOVE.L            #ea_D3,A1           ;load string constant into A1
000066CC  4EB9 00006702           8553                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000066D2                          8554                                
000066D2  227C 000084A0           8555  LSD_count_reg4_out            MOVE.L            #ea_D4,A1           ;load string constant into A1
000066D8  4EB9 00006702           8556                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000066DE                          8557                                
000066DE  227C 000084A3           8558  LSD_count_reg5_out            MOVE.L            #ea_D5,A1           ;load string constant into A1
000066E4  4EB9 00006702           8559                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000066EA                          8560                                
000066EA  227C 000084A6           8561  LSD_count_reg6_out            MOVE.L            #ea_D6,A1           ;load string constant into A1
000066F0  4EB9 00006702           8562                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand
000066F6                          8563                                
000066F6  227C 000084A9           8564  LSD_count_reg7_out            MOVE.L            #ea_D7,A1           ;load string constant into A1
000066FC  4EB9 00006702           8565                                JSR               LSD_Dn0                 ;jump to subroutine to determine the second operand                                    
00006702                          8566                                      
00006702                          8567                                      
00006702                          8568  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
00006702  4241                    8569  LSD_Dn0                         CLR             D1                  ;clear D1
00006704  C2BC 00000007           8570                                  AND.L           #mask_LSD_data_reg,D1   ;load data register mask for second operand
0000670A                          8571                                  
0000670A  B2BC 00000000           8572                                  CMP.L           #match_LSD_D_reg0,D1          ;check if data register is D0
00006710  6700 0068               8573                                  BEQ             LSD_D0_out              ;if equal got to output subroutine
00006714  6600 0002               8574                                  BNE             LSD_Dn1                 ;if LSD check D1
00006718                          8575                                  
00006718  B2BC 00000001           8576  LSD_Dn1                         CMP.L           #match_LSD_D_reg1,D1          ;check if data register is D0
0000671E  6700 0062               8577                                  BEQ             LSD_D1_out              ;if equal got to output subroutine
00006722  6600 0002               8578                                  BNE             LSD_Dn2                 ;if LSD check D2
00006726                          8579  
00006726  B2BC 00000002           8580  LSD_Dn2                         CMP.L           #match_LSD_D_reg2,D1          ;check if data register is D0
0000672C  6700 005C               8581                                  BEQ             LSD_D2_out              ;if equal got to output subroutine
00006730  6600 0002               8582                                  BNE             LSD_Dn3                 ;if LSD check D3
00006734                          8583  
00006734  B2BC 00000003           8584  LSD_Dn3                         CMP.L           #match_LSD_D_reg3,D1          ;check if data register is D0
0000673A  6700 0056               8585                                  BEQ             LSD_D3_out              ;if equal got to output subroutine
0000673E  6600 0002               8586                                  BNE             LSD_Dn4                 ;if LSD check D4
00006742                          8587  
00006742  B2BC 00000004           8588  LSD_Dn4                         CMP.L           #match_LSD_D_reg4,D1          ;check if data register is D0
00006748  6700 0050               8589                                  BEQ             LSD_D4_out              ;if equal got to output subroutine
0000674C  6600 0002               8590                                  BNE             LSD_Dn5                 ;if LSD check D5
00006750                          8591  
00006750  B2BC 00000005           8592  LSD_Dn5                         CMP.L           #match_LSD_D_reg5,D1          ;check if data register is D0
00006756  6700 004A               8593                                  BEQ             LSD_D5_out              ;if equal got to output subroutine
0000675A  6600 0002               8594                                  BNE             LSD_Dn6                 ;if LSD check D6
0000675E                          8595  
0000675E  B2BC 00000006           8596  LSD_Dn6                         CMP.L           #match_LSD_D_reg6,D1          ;check if data register is D0
00006764  6700 0044               8597                                  BEQ             LSD_D6_out              ;if equal got to output subroutine
00006768  6600 0002               8598                                  BNE             LSD_Dn7                 ;if LSD check D7
0000676C                          8599  
0000676C  B2BC 00000007           8600  LSD_Dn7                         CMP.L           #match_LSD_D_reg7,D1          ;check if data register is D0
00006772  6700 003E               8601                                  BEQ             LSD_D7_out              ;if equal got to output subroutine
00006776  6600 0A32               8602                                  BNE             ERROR               :if none of the registers go to error sub routine
0000677A                          8603                                  
0000677A                          8604                                  
0000677A                          8605  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
0000677A  227C 00008494           8606  LSD_D0_out                    MOVE.L            #ea_D0,A1           ;load string constant into A1
00006780                          8607                                       
00006780  4E75                    8608                                RTS                                   ;return to subroutine
00006782                          8609  
00006782  227C 00008497           8610  LSD_D1_out                    MOVE.L            #ea_D1,A1           ;load string constant into A1
00006788                          8611                                       
00006788  4E75                    8612                                RTS                                   ;return to subroutine
0000678A                          8613  
0000678A  227C 0000849A           8614  LSD_D2_out                    MOVE.L            #ea_D2,A1           ;load string constant into A1
00006790                          8615                                       
00006790  4E75                    8616                                RTS                                   ;return to subroutine
00006792                          8617              
00006792  227C 0000849D           8618  LSD_D3_out                    MOVE.L            #ea_D3,A1           ;load string constant into A1
00006798                          8619                                       
00006798  4E75                    8620                                RTS                                   ;return to subroutine
0000679A                          8621  
0000679A  227C 000084A0           8622  LSD_D4_out                    MOVE.L            #ea_D4,A1           ;load string constant into A1
000067A0                          8623                                       
000067A0  4E75                    8624                                RTS                                   ;return to subroutine
000067A2                          8625  
000067A2  227C 000084A3           8626  LSD_D5_out                    MOVE.L            #ea_D5,A1           ;load string constant into A1
000067A8                          8627                                       
000067A8  4E75                    8628                                RTS                                   ;return to subroutine
000067AA                          8629  
000067AA  227C 000084A6           8630  LSD_D6_out                    MOVE.L            #ea_D6,A1           ;load string constant into A1
000067B0                          8631                                       
000067B0  4E75                    8632                                RTS                                   ;return to subroutine
000067B2                          8633  
000067B2  227C 000084A9           8634  LSD_D7_out                    MOVE.L            #ea_D7,A1           ;load string constant into A1
000067B8                          8635                                       
000067B8  4E75                    8636                                RTS                                   ;return to subroutine
000067BA                          8637  
000067BA                          8638                                      
000067BA                          8639  
000067BA  =000000C0               8640  mask_LSD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
000067BA  =00000038               8641  mask_LSD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
000067BA  =0000003F               8642  mask_LSD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
000067BA  =0000003F               8643  mask_LSD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
000067BA  =00000020               8644  mask_LSD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
000067BA  =00000E00               8645  mask_LSD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
000067BA  =00000020               8646  mask_LSD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
000067BA  =00000007               8647  mask_LSD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
000067BA                          8648  
000067BA  =00000000               8649  match_LSD_D_reg0                                EQU             $0000               ;match for second operand data register 0
000067BA  =00000001               8650  match_LSD_D_reg1                                EQU             $0001               ;match for second operand data register 1
000067BA  =00000002               8651  match_LSD_D_reg2                                EQU             $0002               ;match for second operand data register 2
000067BA  =00000003               8652  match_LSD_D_reg3                                EQU             $0003               ;match for second operand data register 3
000067BA  =00000004               8653  match_LSD_D_reg4                                EQU             $0004               ;match for second operand data register 4
000067BA  =00000005               8654  match_LSD_D_reg5                                EQU             $0005               ;match for second operand data register 5
000067BA  =00000006               8655  match_LSD_D_reg6                                EQU             $0006               ;match for second operand data register 6
000067BA  =00000007               8656  match_LSD_D_reg7                                EQU             $0007               ;match for second operand data register 7
000067BA                          8657  
000067BA  =00000000               8658  match_LSD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
000067BA  =00000200               8659  match_LSD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
000067BA  =00000400               8660  match_LSD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
000067BA  =00000600               8661  match_LSD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
000067BA  =00000800               8662  match_LSD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
000067BA  =00000A00               8663  match_LSD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
000067BA  =00000C00               8664  match_LSD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
000067BA  =00000E00               8665  match_LSD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
000067BA                          8666  
000067BA  =00000020               8667  match_LSD_shift_reg                             EQU             $0020               ;match to for a register shift
000067BA  =00000000               8668  match_LSD_count_val0                            EQU             $0000               ;match for shift reg 0
000067BA  =00000200               8669  match_LSD_count_val1                           EQU             $0200               ;match for shift reg 1
000067BA  =00000400               8670  match_LSD_count_val2                            EQU             $0400               ;match for shift reg 2
000067BA  =00000600               8671  match_LSD_count_val3                            EQU             $0600               ;match for shift reg 3
000067BA  =00000800               8672  match_LSD_count_val4                            EQU             $0800               ;match for shift reg 4
000067BA  =00000A00               8673  match_LSD_count_val5                            EQU             $0A00               ;match for shift reg 5
000067BA  =00000C00               8674  match_LSD_count_val6                            EQU             $0C00               ;match for shift reg 6
000067BA  =00000E00               8675  match_LSD_count_val7                            EQU             $0E00               ;match for shift reg 7
000067BA                          8676  
000067BA  =00000020               8677  match_LSD_shift_count                           EQU             $0020
000067BA  =000000C0               8678  match_LSD_mem_shift                         EQU             $00C0              ;match for memory shift
000067BA  =00000010               8679  match_LSD_An_indir                          EQU             $0010              ;match for add reg indir
000067BA  =00000020               8680  match_LSD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
000067BA  =00000018               8681  match_LSD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
000067BA  =00000039               8682  match_LSD_abs_add_word                      EQU             $0039              ;match for word abs add 
000067BA  =0000003C               8683  match_LSD_abs_add_long                      EQU             $003C              ;match for long abs add
000067BA                          8684  
000067BA                          8685  
000067BA  =00000010               8686  match_LSD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
000067BA  =00000011               8687  match_LSD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
000067BA  =00000012               8688  match_LSD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
000067BA  =00000013               8689  match_LSD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
000067BA  =00000014               8690  match_LSD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
000067BA  =00000015               8691  match_LSD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
000067BA  =00000016               8692  match_LSD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
000067BA  =00000017               8693  match_LSD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
000067BA                          8694  
000067BA  =00000020               8695  match_LSD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
000067BA  =00000021               8696  match_LSD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
000067BA  =00000022               8697  match_LSD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
000067BA  =00000023               8698  match_LSD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
000067BA  =00000024               8699  match_LSD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
000067BA  =00000025               8700  match_LSD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
000067BA  =00000026               8701  match_LSD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
000067BA  =00000027               8702  match_LSD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
000067BA                          8703  
000067BA                          8704  
000067BA  =00000018               8705  match_LSD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
000067BA  =00000019               8706  match_LSD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
000067BA  =0000001A               8707  match_LSD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
000067BA  =0000001B               8708  match_LSD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
000067BA  =0000001C               8709  match_LSD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
000067BA  =0000001D               8710  match_LSD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
000067BA  =0000001E               8711  match_LSD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
000067BA  =00000001               8712  match_LSD_An_indir_predec_r7                EQU             $001              ;match for add reg indir with predec with add reg 7
000067BA                          8713  
000067BA                          8714  
000067BA                          8715  
000067BA                          8716  
000067BA                          8717  
000067BA                          8718  
000067BA                          8719  -------------------- end include --------------------
000067BA                          8720              INCLUDE 'MOVEA Subroutine.x68'
000067BA                          8721     
000067BA                          8722  MOVEA_sub                                         ;preserve the registers, 
000067BA  4241                    8723                                   CLR                D1
000067BC  C2BC 00000038           8724                                   AND.L             #mask_MOVEA_ea_mode,D1                  ;move the mask to D1
000067C2                          8725  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
000067C2  B2BC 00000000           8726  MOVEA_data_reg_dir               CMP.L             #match_MOVEA_Dn,D1                      ;check to see if mode is data reg direct
000067C8  6600 0006               8727                                   BNE               MOVEA_add_reg_dir                       ;if not, go check add reg dir
000067CC  6700 006A               8728                                   BEQ               MOVEA_Dn_reg                            ;if equal go figure out the register
000067D0                          8729  
000067D0  B2BC 00000008           8730  MOVEA_add_reg_dir                CMP.L             #match_MOVEA_An,D1                      ;check if mode is add reg direct
000067D6  6600 0006               8731                                   BNE               MOVEA_add_reg_indir                     ;if not, go check add reg indir
000067DA  6700 0142               8732                                   BEQ               MOVEA_An_reg                            ;if equal go figure out the reg
000067DE                          8733   
000067DE  B2BC 00000010           8734  MOVEA_add_reg_indir              CMP.L             #match_MOVEA_An_indir,D1                ;check to see if mode is add reg indir
000067E4  6600 0006               8735                                   BNE               MOVEA_add_reg_indir_predec              ;if not, go check add reg indir predec 
000067E8  6700 0214               8736                                   BEQ               MOVEA_An_indir_reg                      ;if equal go figure out the register           
000067EC                          8737             
000067EC  B2BC 00000020           8738  MOVEA_add_reg_indir_predec       CMP.L             #match_MOVEA_An_indir_predec,D1         ;check to see if mode is add reg indor w/ postinc
000067F2  6600 0006               8739                                   BNE               MOVEA_add_reg_indir_postinc             ;if not go check add reg indir/predec
000067F6  6700 03C6               8740                                   BEQ               MOVEA_An_indir_predec                   ;if equal go figure out the register
000067FA                          8741                        
000067FA  B2BC 00000018           8742  MOVEA_add_reg_indir_postinc      CMP.L             #match_MOVEA_An_indir_postinc,D1        ;check to see if mode is add reg indir w/predec
00006800  6600 0006               8743                                   BNE               MOVEA_abs_add_word                      ;if not go check abs add word
00006804  6700 02D8               8744                                   BEQ               MOVEA_An_indir_postinc_reg              ;if equal go figure out the register
00006808                          8745  
00006808  4242                    8746  MOVEA_abs_add_word               CLR               D2
0000680A  C4BC 0000003F           8747                                   AND.L             #mask_MOVEA_abs_add,D2                  ;load mask to determine if abs add word or long
00006810                          8748                                   
00006810  B4BC 00000038           8749                                   CMP.L             #match_MOVEA_abs_add_word,D2            ;check if abs add word
00006816  2A18                    8750                                   MOVE.L            (A0)+,D5                                ;pull the next word instruction that holds the address
00006818  6600 0006               8751                                   BNE               MOVEA_abs_add_long                      ;if not go check abs add long
0000681C  6700 0480               8752                                   BEQ               MOVEA_abs_add_word_out                  ;if equal go to output
00006820                          8753    
00006820  B4BC 00000039           8754  MOVEA_abs_add_long               CMP.L             #match_MOVEA_abs_add_long,D2            ;check to see if abs add long
00006826  6700 0480               8755                                   BEQ               MOVEA_abs_add_long_out                  ;if equal go to output
0000682A                          8756                                   
0000682A  B2BC 0000003C           8757  MOVEA_immediate_add              CMP.L             #match_MOVEA_imm_add,D1                       ;check if immediate address
00006830  6700 0482               8758                                   BEQ               MOVEA_immediate_add_out                 ;if equal go to immediate add sub routine
00006834  6600 0974               8759                                   BNE               ERROR                                   ;if not equal go to error mesage sub routine
00006838                          8760  
00006838                          8761  
00006838                          8762  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00006838                          8763                                   
00006838                          8764                              
00006838                          8765  ;-----------------------------------Data Register Direct--------------------------------
00006838  C4BC 0000003F           8766  MOVEA_Dn_reg                AND.L              #mask_MOVEA_ea_reg_and_mode,D2     ;load the mask into D2 for the mode and the register
0000683E  B4BC 00000000           8767                              CMP.L              #match_MOVEA_D0,D2              ;check to see in the register is 0
00006844  6600 0006               8768                              BNE                MOVEA_rD1                       ;if not go check register 1
00006848  6700 0064               8769                              BEQ                MOVEA_D0_out                    ;if equal go to output subroutine
0000684C                          8770  
0000684C  B4BC 00000001           8771  MOVEA_rD1                   CMP.L              #match_MOVEA_D1,D2              ;check to see in the register is 1
00006852  6600 0006               8772                              BNE                MOVEA_rD2                       ;if not go check register 2
00006856  6700 0064               8773                              BEQ                MOVEA_D1_out                    ;if equal go to output subroutine
0000685A                          8774  
0000685A  B4BC 00000002           8775  MOVEA_rD2                   CMP.L              #match_MOVEA_D2,D2              ;check to see in the register is 2
00006860  6600 0006               8776                              BNE                MOVEA_rD3                       ;if not go check register 3
00006864  6700 0064               8777                              BEQ                MOVEA_D2_out                    ;if equal go to output subroutine
00006868                          8778  
00006868  B4BC 00000003           8779  MOVEA_rD3                   CMP.L              #match_MOVEA_D3,D2              ;check to see in the register is 3
0000686E  6600 0006               8780                              BNE                MOVEA_rD4                       ;if not go check register 4
00006872  6700 0064               8781                              BEQ                MOVEA_D3_out                    ;if equal go to output subroutine
00006876                          8782  
00006876  B4BC 00000004           8783  MOVEA_rD4                   CMP.L              #match_MOVEA_D4,D2              ;check to see in the register is 4
0000687C  6600 0006               8784                              BNE                MOVEA_rD5                       ;if not go check register 5
00006880  6700 0064               8785                              BEQ                MOVEA_D4_out                    ;if equal go to output subroutine
00006884                          8786  
00006884  B4BC 00000005           8787  MOVEA_rD5                   CMP.L              #match_MOVEA_D5,D2              ;check to see in the register is 5
0000688A  6600 0006               8788                              BNE                MOVEA_rD6                       ;if not go check register 6
0000688E  6700 0064               8789                              BEQ                MOVEA_D5_out                    ;if equal go to output subroutine
00006892                          8790  
00006892  B4BC 00000006           8791  MOVEA_rD6                   CMP.L              #match_MOVEA_D6,D2              ;check to see in the register is 6
00006898  6600 0006               8792                              BNE                MOVEA_rD7                       ;if not go check register 7
0000689C  6700 0064               8793                              BEQ                MOVEA_D6_out                    ;if equal go to output subroutine
000068A0                          8794  
000068A0  B4BC 00000007           8795  MOVEA_rD7                   CMP.L              #match_MOVEA_D7,D2              ;check to see in the register is 7
000068A6  6700 0068               8796                              BEQ                MOVEA_D7_out                    ;if equal go to output subroutine
000068AA  6600 08FE               8797                              BNE                ERROR                           ;if not equal, got to error message
000068AE                          8798  
000068AE                          8799  
000068AE                          8800  ;--------------------Data Register Direct Output-----------------------
000068AE  227C 00008494           8801  MOVEA_D0_out                MOVE.L          #ea_D0,A1                 ;load string constant into A1
000068B4  4EB9 00006CE8           8802                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000068BA  4E75                    8803                              RTS
000068BC                          8804                              
000068BC  227C 00008497           8805  MOVEA_D1_out                MOVE.L          #ea_D1,A1                 ;load string constant into A1
000068C2  4EB9 00006CE8           8806                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000068C8  4E75                    8807                              RTS
000068CA                          8808  
000068CA  227C 0000849A           8809  MOVEA_D2_out                MOVE.L          #ea_D2,A1                 ;load string constant into A1
000068D0  4EB9 00006CE8           8810                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000068D6  4E75                    8811                              RTS
000068D8                          8812                              
000068D8  227C 0000849D           8813  MOVEA_D3_out                MOVE.L          #ea_D3,A1                 ;load string constant into A1
000068DE  4EB9 00006CE8           8814                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000068E4  4E75                    8815                              RTS
000068E6                          8816  
000068E6  227C 000084A0           8817  MOVEA_D4_out                MOVE.L          #ea_D4,A1                 ;load string constant into A1
000068EC  4EB9 00006CE8           8818                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000068F2  4E75                    8819                              RTS
000068F4                          8820  
000068F4  227C 000084A3           8821  MOVEA_D5_out                MOVE.L          #ea_D5,A1                 ;load string constant into A1
000068FA  4EB9 00006CE8           8822                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006900  4E75                    8823                              RTS
00006902                          8824  
00006902  227C 000084A6           8825  MOVEA_D6_out                MOVE.L          #ea_D6,A1                 ;load string constant into A1
00006908  4EB9 00006CE8           8826                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000690E  4E75                    8827                              RTS
00006910                          8828  
00006910  227C 000084A9           8829  MOVEA_D7_out                MOVE.L          #ea_D7,A1                 ;load string constant into A1
00006916  4EB9 00006CE8           8830                              JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000691C  4E75                    8831                              RTS
0000691E                          8832  
0000691E                          8833  ;------------------Address Register Direct-----------------------
0000691E  B4BC 00000008           8834  MOVEA_An_reg                CMP.L           #match_MOVEA_A0,D2                ;check reg is equal to 0
00006924  6600 0006               8835                              BNE             MOVEA_rA1                         ;if not try reg 1
00006928  6700 0144               8836                              BEQ             MOVEA_An_indir_reg0_out           ;if equal go to output subroutine
0000692C                          8837  
0000692C  B4BC 00000009           8838  MOVEA_rA1                   CMP.L           #match_MOVEA_A1,D2                ;check reg is equal to 1
00006932  6600 0006               8839                              BNE             MOVEA_rA2                         ;if not try reg 2
00006936  6700 0144               8840                              BEQ             MOVEA_An_indir_reg1_out           ;if equal go to output subroutine
0000693A                          8841  
0000693A  B4BC 0000000A           8842  MOVEA_rA2                   CMP.L           #match_MOVEA_A2,D2                ;check reg is equal to 2
00006940  6600 0006               8843                              BNE             MOVEA_rA3                         ;if not try reg 3
00006944  6700 0144               8844                              BEQ             MOVEA_An_indir_reg2_out           ;if equal go to output subroutine
00006948                          8845  
00006948  B4BC 0000000B           8846  MOVEA_rA3                   CMP.L           #match_MOVEA_A3,D2                ;check reg is equal to 3
0000694E  6600 0006               8847                              BNE             MOVEA_rA4                         ;if not try reg 4
00006952  6700 0144               8848                              BEQ             MOVEA_An_indir_reg3_out           ;if equal go to output subroutine
00006956                          8849  
00006956  B4BC 0000000C           8850  MOVEA_rA4                   CMP.L           #match_MOVEA_A4,D2                ;check reg is equal to 4
0000695C  6600 0006               8851                              BNE             MOVEA_rA5                         ;if not try reg 5
00006960  6700 0144               8852                              BEQ             MOVEA_An_indir_reg4_out           ;if equal go to output subroutine
00006964                          8853              
00006964  B4BC 0000000D           8854  MOVEA_rA5                   CMP.L           #match_MOVEA_A5,D2                ;check reg is equal to 5
0000696A  6600 0006               8855                              BNE             MOVEA_rA6                         ;if not try reg 6
0000696E  6700 0144               8856                              BEQ             MOVEA_An_indir_reg5_out           ;if equal go to output subroutine
00006972                          8857  
00006972  B4BC 0000000E           8858  MOVEA_rA6                   CMP.L           #match_MOVEA_A6,D2                ;check reg is equal to 6
00006978  6600 0006               8859                              BNE             MOVEA_rA7                         ;if not try reg 7
0000697C  6700 0144               8860                              BEQ             MOVEA_An_indir_reg6_out           ;if equal go to output subroutine
00006980                          8861  
00006980  B4BC 0000000F           8862  MOVEA_rA7                   CMP.L           #match_MOVEA_A7,D2                ;check reg is equal to 7
00006986  6700 0148               8863                              BEQ             MOVEA_An_indir_reg7_out           ;if equal go to output subroutine
0000698A  6600 081E               8864                              BNE             ERROR                             ;if not equal to an addresssing mode, pritn error
0000698E                          8865  
0000698E                          8866  
0000698E                          8867  ;--------------------Address Register Direct Output-----------------------
0000698E  227C 000084AC           8868  MOVEA_A0_out          MOVE.L          #ea_A0,A1             ;load string constant into A1
00006994  4EB9 00006CE8           8869                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
0000699A  4E75                    8870                        RTS
0000699C                          8871                                  
0000699C  227C 000084AF           8872  MOVEA_A1_out          MOVE.L          #ea_A1,A1             ;load string constant into A1
000069A2  4EB9 00006CE8           8873                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000069A8  4E75                    8874                        RTS
000069AA                          8875                                  
000069AA  227C 000084B2           8876  MOVEA_A2_out          MOVE.L          #ea_A2,A1             ;load string constant into A1
000069B0  4EB9 00006CE8           8877                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000069B6  4E75                    8878                        RTS
000069B8                          8879                                  
000069B8  227C 000084B5           8880  MOVEA_A3_out          MOVE.L          #ea_A3,A1             ;load string constant into A1
000069BE  4EB9 00006CE8           8881                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000069C4  4E75                    8882                        RTS
000069C6                          8883                        
000069C6  227C 000084B8           8884  MOVEA_A4_out          MOVE.L          #ea_A4,A1             ;load string constant into A1
000069CC  4EB9 00006CE8           8885                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000069D2  4E75                    8886                        RTS
000069D4                          8887                        
000069D4  227C 000084BB           8888  MOVEA_A5_out          MOVE.L          #ea_A5,A1             ;load string constant into A1
000069DA  4EB9 00006CE8           8889                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000069E0  4E75                    8890                        RTS
000069E2                          8891                        
000069E2  227C 000084BE           8892  MOVEA_A6_out          MOVE.L          #ea_A6,A1             ;load string constant into A1
000069E8  4EB9 00006CE8           8893                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000069EE  4E75                    8894                        RTS
000069F0                          8895                        
000069F0  227C 000084C1           8896  MOVEA_A7_out          MOVE.L          #ea_A7,A1             ;load string constant into A1
000069F6  4EB9 00006CE8           8897                        JSR             MOVEA_determine_second_op         ;jump to subroutine to determine second operand
000069FC  4E75                    8898                        RTS
000069FE                          8899  
000069FE                          8900  ;------------------Address Register Indirect-----------------------
000069FE  B4BC 00000010           8901  MOVEA_An_indir_reg       CMP.L           #match_MOVEA_An_indir_r0,D2           ;check reg is equal to 0
00006A04  6600 0006               8902                           BNE             MOVEA_An_indir_reg1                   ;if not try reg 1
00006A08  6700 0064               8903                           BEQ             MOVEA_An_indir_reg0_out               ;if equal go to output subroutine
00006A0C                          8904  
00006A0C  B4BC 00000011           8905  MOVEA_An_indir_reg1      CMP.L           #match_MOVEA_An_indir_r1,D2           ;check reg is equal to 1
00006A12  6600 0006               8906                           BNE             MOVEA_An_indir_reg2                   ;if not try reg 2
00006A16  6700 0064               8907                           BEQ             MOVEA_An_indir_reg1_out               ;if equal go to output subroutine
00006A1A                          8908  
00006A1A  B4BC 00000012           8909  MOVEA_An_indir_reg2      CMP.L           #match_MOVEA_An_indir_r2,D2           ;check reg is equal to 2
00006A20  6600 0006               8910                           BNE             MOVEA_An_indir_reg3                   ;if not try reg 3
00006A24  6700 0064               8911                           BEQ             MOVEA_An_indir_reg2_out               ;if equal go to output subroutine
00006A28                          8912  
00006A28  B4BC 00000013           8913  MOVEA_An_indir_reg3      CMP.L           #match_MOVEA_An_indir_r3,D2           ;check reg is equal to 3
00006A2E  6600 0006               8914                           BNE             MOVEA_An_indir_reg4                   ;if not try reg 4
00006A32  6700 0064               8915                           BEQ             MOVEA_An_indir_reg3_out               ;if equal go to output subroutine
00006A36                          8916      
00006A36  B4BC 00000014           8917  MOVEA_An_indir_reg4      CMP.L           #match_MOVEA_An_indir_r4,D2           ;check reg is equal to 4
00006A3C  6600 0006               8918                           BNE             MOVEA_An_indir_reg5                   ;if not try reg 5
00006A40  6700 0064               8919                           BEQ             MOVEA_An_indir_reg4_out               ;if equal go to output subroutine
00006A44                          8920          
00006A44  B4BC 00000015           8921  MOVEA_An_indir_reg5      CMP.L           #match_MOVEA_An_indir_r5,D2           ;check reg is equal to 5
00006A4A  6600 0006               8922                           BNE             MOVEA_An_indir_reg6                   ;if not try reg 6
00006A4E  6700 0064               8923                           BEQ             MOVEA_An_indir_reg5_out               ;if equal go to output subroutine
00006A52                          8924  
00006A52  B4BC 00000016           8925  MOVEA_An_indir_reg6      CMP.L           #match_MOVEA_An_indir_r6,D2           ;check reg is equal to 6
00006A58  6600 0006               8926                           BNE             MOVEA_An_indir_reg7                   ;if not try reg 7
00006A5C  6700 0064               8927                           BEQ             MOVEA_An_indir_reg6_out               ;if equal go to output subroutine
00006A60                          8928  
00006A60  B4BC 00000017           8929  MOVEA_An_indir_reg7      CMP.L           #match_MOVEA_An_indir_r7,D2           ;check reg is equal to 7
00006A66  6700 0068               8930                           BEQ             MOVEA_An_indir_reg7_out               ;if equal go to output subroutine
00006A6A  6600 073E               8931                           BNE             ERROR                                 ;if not equal to an addresssing mode, pritn error
00006A6E                          8932  
00006A6E                          8933  
00006A6E                          8934  ;--------------------Address Register Indirect Output-----------------------
00006A6E  227C 000084D4           8935  MOVEA_An_indir_reg0_out         MOVE.L      #ea_indir_A0,A1               ;load string constant into A1
00006A74  4EB9 00006CE8           8936                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006A7A  4E75                    8937                                  RTS
00006A7C                          8938                                  
00006A7C  227C 000084D9           8939  MOVEA_An_indir_reg1_out         MOVE.L      #ea_indir_A1,A1               ;load string constant into A1
00006A82  4EB9 00006CE8           8940                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006A88  4E75                    8941                                  RTS
00006A8A                          8942                                  
00006A8A  227C 000084DE           8943  MOVEA_An_indir_reg2_out         MOVE.L      #ea_indir_A2,A1               ;load string constant into A1
00006A90  4EB9 00006CE8           8944                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006A96  4E75                    8945                                  RTS
00006A98                          8946                                  
00006A98  227C 000084E3           8947  MOVEA_An_indir_reg3_out         MOVE.L      #ea_indir_A3,A1               ;load string constant into A1
00006A9E  4EB9 00006CE8           8948                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006AA4  4E75                    8949                                  RTS
00006AA6                          8950                                  
00006AA6  227C 000084E8           8951  MOVEA_An_indir_reg4_out         MOVE.L      #ea_indir_A4,A1               ;load string constant into A1
00006AAC  4EB9 00006CE8           8952                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006AB2  4E75                    8953                                  RTS
00006AB4                          8954                                  
00006AB4  227C 000084ED           8955  MOVEA_An_indir_reg5_out         MOVE.L      #ea_indir_A5,A1               ;load string constant into A1
00006ABA  4EB9 00006CE8           8956                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006AC0  4E75                    8957                                  RTS
00006AC2                          8958                                  
00006AC2  227C 000084F2           8959  MOVEA_An_indir_reg6_out         MOVE.L      #ea_indir_A6,A1               ;load string constant into A1
00006AC8  4EB9 00006CE8           8960                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006ACE  4E75                    8961                                  RTS
00006AD0                          8962                                          
00006AD0  227C 000084F7           8963  MOVEA_An_indir_reg7_out         MOVE.L      #ea_indir_A7,A1               ;load string constant into A1
00006AD6  4EB9 00006CE8           8964                                  JSR         MOVEA_determine_second_op         ;jump to subroutine to determine second operand
00006ADC  4E75                    8965                                  RTS
00006ADE                          8966  
00006ADE                          8967  ;------------------Address Register Indirect with Post Increment-----------------------
00006ADE  B4BC 00000018           8968  MOVEA_An_indir_postinc_reg        CMP.L      #match_MOVEA_An_indir_postinc_r0,D2        ;check reg is equal to 0
00006AE4  6600 0006               8969                                    BNE        MOVEA_An_indir_postinc_reg1                ;if not try reg 1
00006AE8  6700 0064               8970                                    BEQ        MOVEA_An_indir_postinc_reg0_out            ;if equal go to output subroutine
00006AEC                          8971  
00006AEC  B4BC 00000019           8972  MOVEA_An_indir_postinc_reg1       CMP.L      #match_MOVEA_An_indir_postinc_r1,D2        ;check reg is equal to 1
00006AF2  6600 0006               8973                                    BNE        MOVEA_An_indir_postinc_reg2                ;if not try reg 2
00006AF6  6700 0064               8974                                    BEQ        MOVEA_An_indir_postinc_reg1_out            ;if equal go to output subroutine
00006AFA                          8975  
00006AFA  B4BC 0000001A           8976  MOVEA_An_indir_postinc_reg2       CMP.L      #match_MOVEA_An_indir_postinc_r2,D2        ;check reg is equal to 2
00006B00  6600 0006               8977                                    BNE        MOVEA_An_indir_postinc_reg3                ;if not try reg 3
00006B04  6700 0064               8978                                    BEQ        MOVEA_An_indir_postinc_reg2_out            ;if equal go to output subroutine
00006B08                          8979  
00006B08  B4BC 0000001B           8980  MOVEA_An_indir_postinc_reg3       CMP.L      #match_MOVEA_An_indir_postinc_r3,D2        ;check reg is equal to 3
00006B0E  6600 0006               8981                                    BNE        MOVEA_An_indir_postinc_reg4                ;if not try reg 4
00006B12  6700 0064               8982                                    BEQ        MOVEA_An_indir_postinc_reg3_out            ;if equal go to output subroutine
00006B16                          8983   
00006B16  B4BC 0000001C           8984  MOVEA_An_indir_postinc_reg4       CMP.L      #match_MOVEA_An_indir_postinc_r4,D2        ;check reg is equal to 4
00006B1C  6600 0006               8985                                    BNE        MOVEA_An_indir_postinc_reg5                ;if not try reg 5
00006B20  6700 0064               8986                                    BEQ        MOVEA_An_indir_postinc_reg4_out            ;if equal go to output subroutine
00006B24                          8987  
00006B24  B4BC 0000001D           8988  MOVEA_An_indir_postinc_reg5       CMP.L      #match_MOVEA_An_indir_postinc_r5,D2        ;check reg is equal to 5
00006B2A  6600 0006               8989                                    BNE        MOVEA_An_indir_postinc_reg6                ;if not try reg 6
00006B2E  6700 0064               8990                                    BEQ        MOVEA_An_indir_postinc_reg5_out            ;if equal go to output subroutine
00006B32                          8991  
00006B32  B4BC 0000001E           8992  MOVEA_An_indir_postinc_reg6       CMP.L      #match_MOVEA_An_indir_postinc_r6,D2        ;check reg is equal to 6
00006B38  6600 0006               8993                                    BNE        MOVEA_An_indir_postinc_reg7                ;if not try reg 7
00006B3C  6700 0064               8994                                    BEQ        MOVEA_An_indir_postinc_reg6_out            ;if equal go to output subroutine
00006B40                          8995  
00006B40  B4BC 0000001F           8996  MOVEA_An_indir_postinc_reg7       CMP.L      #match_MOVEA_An_indir_postinc_r7,D2        ;check reg is equal to 7
00006B46  6700 0068               8997                                    BEQ        MOVEA_An_indir_postinc_reg7_out            ;if equal go to output subroutine
00006B4A  6600 065E               8998                                    BNE        ERROR                                      ;if not equal to an addresssing mode, pritn error
00006B4E                          8999  
00006B4E                          9000  
00006B4E                          9001  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00006B4E  227C 000084FC           9002  MOVEA_An_indir_postinc_reg0_out       MOVE.L        #ea_indir_postinc_A0,A1     ;load string constant into A1
00006B54  4EB9 00006CE8           9003                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006B5A  4E75                    9004                                        RTS
00006B5C                          9005  
00006B5C  227C 00008502           9006  MOVEA_An_indir_postinc_reg1_out       MOVE.L        #ea_indir_postinc_A1,A1     ;load string constant into A1
00006B62  4EB9 00006CE8           9007                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006B68  4E75                    9008                                        RTS
00006B6A                          9009                                        
00006B6A  227C 00008508           9010  MOVEA_An_indir_postinc_reg2_out       MOVE.L        #ea_indir_postinc_A2,A1     ;load string constant into A1
00006B70  4EB9 00006CE8           9011                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006B76  4E75                    9012                                        RTS
00006B78                          9013                                        
00006B78  227C 0000850E           9014  MOVEA_An_indir_postinc_reg3_out       MOVE.L        #ea_indir_postinc_A3,A1     ;load string constant into A1
00006B7E  4EB9 00006CE8           9015                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006B84  4E75                    9016                                        RTS
00006B86                          9017                                        
00006B86  227C 00008514           9018  MOVEA_An_indir_postinc_reg4_out       MOVE.L        #ea_indir_postinc_A4,A1     ;load string constant into A1
00006B8C  4EB9 00006CE8           9019                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006B92  4E75                    9020                                        RTS
00006B94                          9021                                        
00006B94  227C 0000851A           9022  MOVEA_An_indir_postinc_reg5_out       MOVE.L        #ea_indir_postinc_A5,A1     ;load string constant into A1
00006B9A  4EB9 00006CE8           9023                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006BA0  4E75                    9024                                        RTS
00006BA2                          9025                                        
00006BA2  227C 00008520           9026  MOVEA_An_indir_postinc_reg6_out       MOVE.L        #ea_indir_postinc_A6,A1     ;load string constant into A1
00006BA8  4EB9 00006CE8           9027                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006BAE  4E75                    9028                                        RTS
00006BB0                          9029                                        
00006BB0  227C 00008526           9030  MOVEA_An_indir_postinc_reg7_out       MOVE.L        #ea_indir_postinc_A7,A1     ;load string constant into A1
00006BB6  4EB9 00006CE8           9031                                        JSR           MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006BBC  4E75                    9032                                        RTS
00006BBE                          9033  
00006BBE                          9034  ;------------------Address Register Indirect with Pre Decrement-----------------------
00006BBE  B4BC 00000020           9035  MOVEA_An_indir_predec              CMP.L      #match_MOVEA_An_indir_predec_reg0,D2       ;check reg is equal to 0
00006BC4  6600 0006               9036                                     BNE        MOVEA_An_indir_predec_reg1                 ;if not try reg 1
00006BC8  6700 0064               9037                                     BEQ        MOVEA_An_indir_predec_reg0_out             ;if equal go to output subroutine
00006BCC                          9038  
00006BCC  B4BC 00000021           9039  MOVEA_An_indir_predec_reg1         CMP.L      #match_MOVEA_An_indir_predec_reg1,D2       ;check reg is equal to 1
00006BD2  6600 0006               9040                                     BNE        MOVEA_An_indir_predec_reg2                 ;if not try reg 2
00006BD6  6700 0064               9041                                     BEQ        MOVEA_An_indir_predec_reg1_out             ;if equal go to output subroutine
00006BDA                          9042  
00006BDA  B4BC 00000022           9043  MOVEA_An_indir_predec_reg2         CMP.L      #match_MOVEA_An_indir_predec_reg2,D2       ;check reg is equal to 2
00006BE0  6600 0006               9044                                     BNE        MOVEA_An_indir_predec_reg3                 ;if not try reg 3
00006BE4  6700 0064               9045                                     BEQ        MOVEA_An_indir_predec_reg2_out             ;if equal go to output subroutine
00006BE8                          9046  
00006BE8  B4BC 00000023           9047  MOVEA_An_indir_predec_reg3         CMP.L      #match_MOVEA_An_indir_predec_reg3,D2       ;check reg is equal to 3
00006BEE  6600 0006               9048                                     BNE        MOVEA_An_indir_predec_reg4                 ;if not try reg 4
00006BF2  6700 0064               9049                                     BEQ        MOVEA_An_indir_predec_reg3_out             ;if equal go to output subroutine
00006BF6                          9050  
00006BF6  B4BC 00000024           9051  MOVEA_An_indir_predec_reg4         CMP.L      #match_MOVEA_An_indir_predec_reg4,D2       ;check reg is equal to 4
00006BFC  6600 0006               9052                                     BNE        MOVEA_An_indir_predec_reg5                 ;if not try reg 5
00006C00  6700 0064               9053                                     BEQ        MOVEA_An_indir_predec_reg4_out             ;if equal go to output subroutine
00006C04                          9054  
00006C04  B4BC 00000025           9055  MOVEA_An_indir_predec_reg5         CMP.L      #match_MOVEA_An_indir_predec_reg5,D2       ;check reg is equal to 5
00006C0A  6600 0006               9056                                     BNE        MOVEA_An_indir_predec_reg6                 ;if not try reg 6
00006C0E  6700 0064               9057                                     BEQ        MOVEA_An_indir_predec_reg5_out             ;if equal go to output subroutine
00006C12                          9058  
00006C12  B4BC 00000026           9059  MOVEA_An_indir_predec_reg6         CMP.L      #match_MOVEA_An_indir_predec_reg6,D2       ;check reg is equal to 6
00006C18  6600 0006               9060                                     BNE        MOVEA_An_indir_predec_reg7                 ;if not try reg 7
00006C1C  6700 0064               9061                                     BEQ        MOVEA_An_indir_predec_reg6_out             ;if equal go to output subroutine
00006C20                          9062  
00006C20  B4BC 00000027           9063  MOVEA_An_indir_predec_reg7         CMP.L      #match_MOVEA_An_indir_predec_reg7,D2       ;check reg is equal to 7
00006C26  6700 0068               9064                                     BEQ        MOVEA_An_indir_predec_reg7_out             ;if equal go to output subroutine
00006C2A  6600 057E               9065                                     BNE        ERROR                                      ;if not equal to an addresssing mode, pritn error
00006C2E                          9066  
00006C2E                          9067  
00006C2E                          9068  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00006C2E  227C 0000852C           9069  MOVEA_An_indir_predec_reg0_out          MOVE.L      #ea_indir_predec_A0,A1       ;load string constant into A1
00006C34  4EB9 00006CE8           9070                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006C3A  4E75                    9071                                          RTS
00006C3C                          9072                                              
00006C3C  227C 00008532           9073  MOVEA_An_indir_predec_reg1_out          MOVE.L      #ea_indir_predec_A1,A1       ;load string constant into A1
00006C42  4EB9 00006CE8           9074                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006C48  4E75                    9075                                          RTS
00006C4A                          9076                                        
00006C4A  227C 00008538           9077  MOVEA_An_indir_predec_reg2_out          MOVE.L      #ea_indir_predec_A2,A1       ;load string constant into A1
00006C50  4EB9 00006CE8           9078                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006C56  4E75                    9079                                          RTS
00006C58                          9080                                          
00006C58  227C 0000853E           9081  MOVEA_An_indir_predec_reg3_out          MOVE.L      #ea_indir_predec_A3,A1       ;load string constant into A1
00006C5E  4EB9 00006CE8           9082                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006C64  4E75                    9083                                          RTS
00006C66                          9084                                        
00006C66  227C 00008544           9085  MOVEA_An_indir_predec_reg4_out          MOVE.L      #ea_indir_predec_A4,A1       ;load string constant into A1
00006C6C  4EB9 00006CE8           9086                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006C72  4E75                    9087                                          RTS
00006C74                          9088                                        
00006C74  227C 0000854A           9089  MOVEA_An_indir_predec_reg5_out          MOVE.L      #ea_indir_predec_A5,A1       ;load string constant into A1
00006C7A  4EB9 00006CE8           9090                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006C80  4E75                    9091                                          RTS
00006C82                          9092                                        
00006C82  227C 00008550           9093  MOVEA_An_indir_predec_reg6_out          MOVE.L      #ea_indir_predec_A6,A1       ;load string constant into A1
00006C88  4EB9 00006CE8           9094                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006C8E  4E75                    9095                                          RTS
00006C90                          9096                                        
00006C90  227C 00008556           9097  MOVEA_An_indir_predec_reg7_out          MOVE.L      #ea_indir_predec_A7,A1       ;load string constant into A1
00006C96  4EB9 00006CE8           9098                                          JSR             MOVEA_determine_second_op        ;jump to subroutine to determine second operand
00006C9C  4E75                    9099                                          RTS
00006C9E                          9100  ;------------------Absolute Addressing Output-----------------------
00006C9E  22FC 00008566           9101  MOVEA_abs_add_word_out          MOVE.L          #ea_$,(A1)+            ;load $ for hex and increment A1
00006CA4  22C5                    9102                                  MOVE.L          D5,(A1)+               ;load address                  
00006CA6  4E75                    9103                                  RTS                                    ;return to subroutine
00006CA8                          9104                                             
00006CA8                          9105  
00006CA8  2A18                    9106  MOVEA_abs_add_long_out          MOVE.L          (A0)+,D5               ;pull the next long instruction that holds the address
00006CAA  22FC 00008566           9107                                  MOVE.L          #ea_$,(A1)+            ;load $ for hex and increment A1
00006CB0  22C5                    9108                                  MOVE.L          D5,(A1)+               ;load address                  
00006CB2  4E75                    9109                                  RTS                                    ;return to subroutine    
00006CB4                          9110  
00006CB4                          9111                                          
00006CB4                          9112  ;---------------Immediate Addresing---------------------------
00006CB4  2A18                    9113  MOVEA_immediate_add_out         MOVE.L      (A0)+,D5                        ;capture the immediate address
00006CB6  BCBC 000000FC           9114                                  CMP.L       #match_MOVEA_imm_add_word,D6          ;check to see if need to pull word
00006CBC  2A18                    9115                                  MOVE.L      (A0)+,D5                        ;pull the word
00006CBE  6700 0006               9116                                  BEQ         MOVEA_imm_add_w                 ;if equal go pull word    
00006CC2  6600 0012               9117                                  BNE         MOVEA_imm_add_l                 ;if not equal, go check long
00006CC6                          9118                                           
00006CC6  22FC 00008566           9119  MOVEA_imm_add_w                 MOVE.L      #ea_$,(A1)+                     ;load the $
00006CCC  32C5                    9120                                  MOVE.W      D5,(A1)+                        ;load the word address                           
00006CCE  4EB9 00006CE8           9121                                  JSR         MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006CD4  4E75                    9122                                  RTS
00006CD6                          9123                                           
00006CD6  2A18                    9124  MOVEA_imm_add_l                 MOVE.L      (A0)+,D5                        ;pull the long and increase the pointer
00006CD8  22FC 00008566           9125                                  MOVE.L      #ea_$,(A1)+                     ;load the $
00006CDE  2245                    9126                                  MOVE.L      D5,A1                           ;move to A1
00006CE0  4EB9 00006CE8           9127                                  JSR         MOVEA_determine_second_op       ;jump to subroutine to determine second operand
00006CE6  4E75                    9128                                  RTS                                              
00006CE8                          9129  
00006CE8                          9130  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00006CE8  4282                    9131  MOVEA_determine_second_op       CLR.L       D2              ;clear D2 
00006CEA  C4BC 00000E00           9132                                  AND.L       #mask_MOVEA_An_reg,D2       ;load the mask for the register into D2, masks bit 11-9
00006CF0                          9133                                                  
00006CF0  B4BC 00000000           9134  MOVEA_reg0                      CMP.L       #match_MOVEA_reg0,D2        ;check to see if reg equal 0
00006CF6  6600 0006               9135                                  BNE         MOVEA_reg1          ;if not equal got check reg 1
00006CFA  6700 0064               9136                                  BEQ         MOVEA_reg0_out          ;if equal go to output
00006CFE                          9137                                                  
00006CFE  B4BC 00000200           9138  MOVEA_reg1                      CMP.L       #match_MOVEA_reg1,D2        ;check to see if reg equal 1
00006D04  6600 0006               9139                                  BNE         MOVEA_reg2          ;if not equal got check reg 2
00006D08  6700 005E               9140                                  BEQ         MOVEA_reg1_out          ;if equal go to output
00006D0C                          9141      
00006D0C  B4BC 00000400           9142  MOVEA_reg2                      CMP.L       #match_MOVEA_reg2,D2        ;check to see if reg equal 2
00006D12  6600 0006               9143                                  BNE         MOVEA_reg3          ;if not equal got check reg 3
00006D16  6700 0058               9144                                  BEQ         MOVEA_reg2_out          ;if equal go to output
00006D1A                          9145  
00006D1A  B4BC 00000600           9146  MOVEA_reg3                      CMP.L       #match_MOVEA_reg3,D2        ;check to see if reg equal 3
00006D20  6600 0006               9147                                  BNE         MOVEA_reg4          ;if not equal got check reg 4
00006D24  6700 0052               9148                                  BEQ         MOVEA_reg3_out          ;if equal go to output
00006D28                          9149                                                  
00006D28  B4BC 00000800           9150  MOVEA_reg4                      CMP.L       #match_MOVEA_reg4,D2        ;check to see if reg equal 4
00006D2E  6600 0006               9151                                  BNE         MOVEA_reg5          ;if not equal got check reg 5
00006D32  6700 004C               9152                                  BEQ         MOVEA_reg4_out          ;if equal go to output
00006D36                          9153  
00006D36  B4BC 00000A00           9154  MOVEA_reg5                      CMP.L       #match_MOVEA_reg5,D2        ;check to see if reg equal 5
00006D3C  6600 0006               9155                                  BNE         MOVEA_reg6          ;if not equal got check reg 6
00006D40  6700 0046               9156                                  BEQ         MOVEA_reg5_out          ;if equal go to output
00006D44                          9157  
00006D44  B4BC 00000C00           9158  MOVEA_reg6                      CMP.L       #match_MOVEA_reg6,D2        ;check to see if reg equal 6
00006D4A  6600 0006               9159                                  BNE         MOVEA_reg7          ;if not equal got check reg 7
00006D4E  6700 0040               9160                                  BEQ         MOVEA_reg6_out          ;if equal go to output          
00006D52                          9161  
00006D52  B4BC 00000E00           9162  MOVEA_reg7                      CMP.L       #match_MOVEA_reg7,D2        ;check to see if reg equal 7
00006D58  6700 003E               9163                                  BEQ         MOVEA_reg7_out          ;if equal go to output
00006D5C  6600 044C               9164                                  BNE         ERROR                           ;if not equal to an addresssing mode, pritn error
00006D60                          9165                                  
00006D60                          9166  
00006D60                          9167  ;--------------------Data Output-----------------------
00006D60  227C 000084AC           9168  MOVEA_reg0_out                  MOVE.L      #ea_A0,A1       ;load string constant into A1
00006D66  4E75                    9169                                  RTS
00006D68                          9170                                              
00006D68  227C 000084AF           9171  MOVEA_reg1_out                  MOVE.L      #ea_A1,A1       ;load string constant into A1
00006D6E  4E75                    9172                                  RTS
00006D70                          9173                                              
00006D70  227C 000084B2           9174  MOVEA_reg2_out                  MOVE.L      #ea_A2,A1       ;load string constant into A1
00006D76  4E75                    9175                                  RTS
00006D78                          9176                                              
00006D78  227C 000084B5           9177  MOVEA_reg3_out                  MOVE.L      #ea_A3,A1       ;load string constant into A1
00006D7E  4E75                    9178                                  RTS
00006D80                          9179                                              
00006D80  227C 000084B8           9180  MOVEA_reg4_out                  MOVE.L      #ea_A4,A1       ;load string constant into A1
00006D86  4E75                    9181                                  RTS
00006D88                          9182                                              
00006D88  227C 000084BB           9183  MOVEA_reg5_out                  MOVE.L      #ea_A5,A1       ;load string constant into A1
00006D8E  4E75                    9184                                  RTS
00006D90                          9185                                              
00006D90  227C 000084BE           9186  MOVEA_reg6_out                  MOVE.L      #ea_A6,A1       ;load string constant into A1
00006D96  4E75                    9187                                  RTS
00006D98                          9188                                              
00006D98  227C 000084C1           9189  MOVEA_reg7_out                  MOVE.L      #ea_A7,A1       ;load string constant into A1
00006D9E  4E75                    9190                                  RTS             
00006DA0                          9191  
00006DA0                          9192  
00006DA0                          9193  
00006DA0                          9194  
00006DA0  =00000038               9195  mask_MOVEA_ea_mode              EQU     $0038
00006DA0  =0000003F               9196  mask_MOVEA_abs_add              EQU     $003F
00006DA0  =0000003F               9197  mask_MOVEA_ea_reg_and_mode      EQU     $003F
00006DA0  =00000E00               9198  mask_MOVEA_An_reg               EQU     $0E00
00006DA0                          9199  
00006DA0  =00000000               9200  match_MOVEA_Dn                  EQU     $0000
00006DA0  =00000008               9201  match_MOVEA_An                  EQU     $0008
00006DA0  =00000010               9202  match_MOVEA_An_indir            EQU     $0010
00006DA0  =00000020               9203  match_MOVEA_An_indir_predec     EQU     $0020
00006DA0  =00000018               9204  match_MOVEA_An_indir_postinc    EQU     $0018
00006DA0  =00000038               9205  match_MOVEA_abs_add_word        EQU     $0038
00006DA0  =00000039               9206  match_MOVEA_abs_add_long        EQU     $0039
00006DA0                          9207  
00006DA0  =00000000               9208  match_MOVEA_D0              EQU     $0000
00006DA0  =00000001               9209  match_MOVEA_D1              EQU     $0001
00006DA0  =00000002               9210  match_MOVEA_D2              EQU     $0002
00006DA0  =00000003               9211  match_MOVEA_D3              EQU     $0003
00006DA0  =00000004               9212  match_MOVEA_D4              EQU     $0004
00006DA0  =00000005               9213  match_MOVEA_D5              EQU     $0005
00006DA0  =00000006               9214  match_MOVEA_D6              EQU     $0006
00006DA0  =00000007               9215  match_MOVEA_D7              EQU     $0007
00006DA0                          9216  
00006DA0  =00000008               9217  match_MOVEA_A0              EQU     $0008
00006DA0  =00000009               9218  match_MOVEA_A1              EQU     $0009
00006DA0  =0000000A               9219  match_MOVEA_A2              EQU     $000A
00006DA0  =0000000B               9220  match_MOVEA_A3              EQU     $000B
00006DA0  =0000000C               9221  match_MOVEA_A4              EQU     $000C
00006DA0  =0000000D               9222  match_MOVEA_A5              EQU     $000D
00006DA0  =0000000E               9223  match_MOVEA_A6              EQU     $000E
00006DA0  =0000000F               9224  match_MOVEA_A7              EQU     $000F
00006DA0                          9225  
00006DA0  =00000010               9226  match_MOVEA_An_indir_r0         EQU     $0010
00006DA0  =00000011               9227  match_MOVEA_An_indir_r1         EQU     $0011
00006DA0  =00000012               9228  match_MOVEA_An_indir_r2         EQU     $0012
00006DA0  =00000013               9229  match_MOVEA_An_indir_r3         EQU     $0013
00006DA0  =00000014               9230  match_MOVEA_An_indir_r4         EQU     $0014
00006DA0  =00000015               9231  match_MOVEA_An_indir_r5         EQU     $0015
00006DA0  =00000016               9232  match_MOVEA_An_indir_r6         EQU     $0016
00006DA0  =00000017               9233  match_MOVEA_An_indir_r7         EQU     $0017
00006DA0                          9234  
00006DA0  =00000018               9235  match_MOVEA_An_indir_postinc_r0     EQU     $0018
00006DA0  =00000019               9236  match_MOVEA_An_indir_postinc_r1     EQU     $0019
00006DA0  =0000001A               9237  match_MOVEA_An_indir_postinc_r2     EQU     $001A
00006DA0  =0000001B               9238  match_MOVEA_An_indir_postinc_r3     EQU     $001B
00006DA0  =0000001C               9239  match_MOVEA_An_indir_postinc_r4     EQU     $001C
00006DA0  =0000001D               9240  match_MOVEA_An_indir_postinc_r5     EQU     $001D
00006DA0  =0000001E               9241  match_MOVEA_An_indir_postinc_r6     EQU     $001E
00006DA0  =0000001F               9242  match_MOVEA_An_indir_postinc_r7     EQU     $001F
00006DA0                          9243  
00006DA0  =00000020               9244  match_MOVEA_An_indir_predec_reg0    EQU     $0020
00006DA0  =00000021               9245  match_MOVEA_An_indir_predec_reg1    EQU     $0021
00006DA0  =00000022               9246  match_MOVEA_An_indir_predec_reg2    EQU     $0022
00006DA0  =00000023               9247  match_MOVEA_An_indir_predec_reg3    EQU     $0023
00006DA0  =00000024               9248  match_MOVEA_An_indir_predec_reg4    EQU     $0024
00006DA0  =00000025               9249  match_MOVEA_An_indir_predec_reg5    EQU     $0025
00006DA0  =00000026               9250  match_MOVEA_An_indir_predec_reg6    EQU     $0026
00006DA0  =00000027               9251  match_MOVEA_An_indir_predec_reg7    EQU     $0027
00006DA0                          9252  
00006DA0  =0000003C               9253  match_MOVEA_imm_add                 EQU     $003C
00006DA0  =000000FC               9254  match_MOVEA_imm_add_word            EQU     $00FC
00006DA0  =000001FC               9255  match_MOVEA_imm_add_long            EQU     $01FC
00006DA0                          9256  
00006DA0  =00000000               9257  match_MOVEA_reg0            EQU     $0000
00006DA0  =00000200               9258  match_MOVEA_reg1            EQU     $0200
00006DA0  =00000400               9259  match_MOVEA_reg2            EQU     $0400
00006DA0  =00000600               9260  match_MOVEA_reg3            EQU     $0600
00006DA0  =00000800               9261  match_MOVEA_reg4            EQU     $0800
00006DA0  =00000A00               9262  match_MOVEA_reg5            EQU     $0A00
00006DA0  =00000C00               9263  match_MOVEA_reg6            EQU     $0C00
00006DA0  =00000E00               9264  match_MOVEA_reg7            EQU     $0E00
00006DA0                          9265  
00006DA0                          9266  
00006DA0                          9267  
00006DA0                          9268  
00006DA0                          9269  -------------------- end include --------------------
00006DA0                          9270              INCLUDE 'MOVEQ Subroutine.x68'
00006DA0                          9271  
00006DA0                          9272  
00006DA0                          9273  MOVEQ_sub                                           ;preserve the registers 
00006DA0                          9274                                   
00006DA0                          9275  ;------------------Determine First Operand Data--------------------------------------------------------------------
00006DA0  C2BC 000000FF           9276  MOVEQ_first_operand             AND.L             #mask_MOVEQ_first_operand,D1                    ;load mask for first operand
00006DA6  2608                    9277                                  MOVE.L            A0,D3                                     ;pull the data
00006DA8  227C 00008568           9278                                  MOVE.L            #ea_lb,A1                                 ;load the # sign into string register
00006DAE  2243                    9279                                  MOVE.L            D3,A1                                     ;move the data into A1
00006DB0  4EB9 00006DB6           9280                                  JSR               MOVEQ_second_operand
00006DB6                          9281  
00006DB6  C2BC 00000E00           9282  MOVEQ_second_operand            AND.L             #mask_MOVEQ_second_op_Dn,D1                     ;move the mask to D1
00006DBC                          9283                                   
00006DBC                          9284  ;-----------------------------------Determine Second Operand Data register--------------------------------
00006DBC  B4BC 00000000           9285  MOVEQ_Dn_reg                    CMP.L              #match_MOVEQ_D0,D2                         ;check to see in the register is 0
00006DC2  6600 0006               9286                                  BNE                MOVEQ_rD1                                      ;if MOVEQ go check register 1
00006DC6  6700 0064               9287                                  BEQ                MOVEQ_D0_output                                ;if equal go to output subroutine
00006DCA                          9288  
00006DCA  B4BC 00000200           9289  MOVEQ_rD1                       CMP.L              #match_MOVEQ_D1,D2                        ;check to see in the register is 1
00006DD0  6600 0006               9290                                  BNE                MOVEQ_rD2                                     ;if MOVEQ go check register 2
00006DD4  6700 005E               9291                                  BEQ                MOVEQ_D1_output                               ;if equal go to output subroutine
00006DD8                          9292  
00006DD8  B4BC 00000400           9293  MOVEQ_rD2                       CMP.L              #match_MOVEQ_D2,D2                        ;check to see in the register is 2
00006DDE  6600 0006               9294                                  BNE                MOVEQ_rD3                                     ;if MOVEQ go check register 3
00006DE2  6700 0058               9295                                  BEQ                MOVEQ_D2_output                               ;if equal go to output subroutine
00006DE6                          9296  
00006DE6  B4BC 00000600           9297  MOVEQ_rD3                       CMP.L              #match_MOVEQ_D3,D2                       ;check to see in the register is 3
00006DEC  6600 0006               9298                                  BNE                MOVEQ_rD4                                     ;if MOVEQ go check register 4
00006DF0  6700 0052               9299                                  BEQ                MOVEQ_D3_output                              ;if equal go to output subroutine
00006DF4                          9300  
00006DF4  B4BC 00000800           9301  MOVEQ_rD4                       CMP.L              #match_MOVEQ_D4,D2                       ;check to see in the register is 4
00006DFA  6600 0006               9302                                  BNE                MOVEQ_rD5                                     ;if MOVEQ go check register 5
00006DFE  6700 004C               9303                                  BEQ                MOVEQ_D4_output                              ;if equal go to output subroutine
00006E02                          9304  
00006E02  B4BC 00000A00           9305  MOVEQ_rD5                       CMP.L              #match_MOVEQ_D5,D2                       ;check to see in the register is 5
00006E08  6600 0006               9306                                  BNE                MOVEQ_rD6                                     ;if MOVEQ go check register 6
00006E0C  6700 0046               9307                                  BEQ                MOVEQ_D5_output                              ;if equal go to output subroutine
00006E10                          9308  
00006E10  B4BC 00000C00           9309  MOVEQ_rD6                       CMP.L              #match_MOVEQ_D6,D2                       ;check to see in the register is 6
00006E16  6600 0006               9310                                  BNE                MOVEQ_rD7                                     ;if MOVEQ go check register 7
00006E1A  6700 0040               9311                                  BEQ                MOVEQ_D6_output                              ;if equal go to output subroutine
00006E1E                          9312  
00006E1E  B4BC 00000E00           9313  MOVEQ_rD7                       CMP.L              #match_MOVEQ_D7,D2                       ;check to see in the register is 7
00006E24  6700 003E               9314                                  BEQ                MOVEQ_D7_output                              ;if equal go to output subroutine
00006E28  6600 0380               9315                                  BNE                ERROR                                 ;if MOVEQ equal to an addresssing mode, pritn error
00006E2C                          9316                                  
00006E2C                          9317  ;--------------------Second Operand Data Register Output-----------------------
00006E2C  227C 00008494           9318  MOVEQ_D0_output             MOVE.L          #ea_D0,A1                       ;load string constant into A1
00006E32  4E75                    9319                              RTS                                             ;return to subroutine
00006E34                          9320                                      
00006E34  227C 00008497           9321  MOVEQ_D1_output             MOVE.L          #ea_D1,A1                       ;load string constant into A1
00006E3A  4E75                    9322                              RTS                                             ;return to subroutine
00006E3C                          9323                                      
00006E3C  227C 0000849A           9324  MOVEQ_D2_output             MOVE.L          #ea_D2,A1                       ;load string constant into A1
00006E42  4E75                    9325                              RTS                                             ;return to subroutine
00006E44                          9326                                      
00006E44  227C 0000849D           9327  MOVEQ_D3_output             MOVE.L          #ea_D3,A1                       ;load string constant into A1
00006E4A  4E75                    9328                              RTS                                             ;return to subroutine
00006E4C                          9329                                      
00006E4C  227C 000084A0           9330  MOVEQ_D4_output             MOVE.L          #ea_D4,A1                       ;load string constant into A1
00006E52  4E75                    9331                              RTS                                             ;return to subroutine
00006E54                          9332                                      
00006E54  227C 000084A3           9333  MOVEQ_D5_output             MOVE.L          #ea_D5,A1                       ;load string constant into A1
00006E5A  4E75                    9334                              RTS                                             ;return to subroutine
00006E5C                          9335                                      
00006E5C  227C 000084A6           9336  MOVEQ_D6_output             MOVE.L          #ea_D6,A1                       ;load string constant into A1
00006E62  4E75                    9337                              RTS                                             ;return to subroutine
00006E64                          9338                                      
00006E64  227C 000084A9           9339  MOVEQ_D7_output             MOVE.L          #ea_D7,A1                       ;load string constant into A1
00006E6A  4E75                    9340                              RTS                                             ;return to subroutine
00006E6C                          9341  
00006E6C                          9342  
00006E6C  =00000E00               9343  mask_MOVEQ_second_op_Dn           EQU             $0E00              ;mask to determine the data register for second operand
00006E6C  =000000FF               9344  mask_MOVEQ_first_operand          EQU             $00FF              ;mask to determine the data to be moved to the data register
00006E6C                          9345  
00006E6C  =00000000               9346  match_MOVEQ_D0              EQU             $0000              ;match for data reg dir with data reg 0
00006E6C  =00000200               9347  match_MOVEQ_D1              EQU             $0200              ;match for data reg dir with data reg 1
00006E6C  =00000400               9348  match_MOVEQ_D2              EQU             $0400              ;match for data reg dir with data reg 2
00006E6C  =00000600               9349  match_MOVEQ_D3              EQU             $0600              ;match for data reg dir with data reg 3
00006E6C  =00000800               9350  match_MOVEQ_D4              EQU             $0800              ;match for data reg dir with data reg 4
00006E6C  =00000A00               9351  match_MOVEQ_D5              EQU             $0A00              ;match for data reg dir with data reg 5
00006E6C  =00000C00               9352  match_MOVEQ_D6              EQU             $0C00              ;match for data reg dir with data reg 6
00006E6C  =00000E00               9353  match_MOVEQ_D7              EQU             $0E00              ;match for data reg dir with data reg 7
00006E6C                          9354  
00006E6C                          9355  
00006E6C                          9356  
00006E6C                          9357  
00006E6C                          9358  
00006E6C                          9359  -------------------- end include --------------------
00006E6C                          9360              INCLUDE 'NOT Subroutine.x68'
00006E6C                          9361  
00006E6C                          9362  
00006E6C                          9363  NOT_sub                                            ;preserve the registers,\ 
00006E6C  C2BC 00000038           9364                                   AND.L             #mask_NOT_ea_mode,D1                      ;move the mask to D1
00006E72                          9365  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00006E72  B2BC 00000000           9366  NOT_data_reg_dir                 CMP.L             #match_NOT_Dn,D1                          ;check to see if mode is data reg direct
00006E78  6600 0006               9367                                   BNE               NOT_An_indir                                  ;if not, go check add reg dir
00006E7C  6700 0050               9368                                   BEQ               NOT_Dn_reg                                    ;if equal go figure out the register
00006E80                          9369  
00006E80  B2BC 00000010           9370  NOT_An_indir                     CMP.L             #match_NOT_An_indir,D1                    ;check to see if mode is add reg indir
00006E86  6600 0014               9371                                   BNE               NOT_An_indir_predec                           ;if not, go check add reg indir predec 
00006E8A  6700 00FA               9372                                   BEQ               NOT_An_indir_reg                              ;if equal go figure out the register           
00006E8E                          9373            
00006E8E  B2BC 00000020           9374  NOT_An_indir_postinc             CMP.L             #match_NOT_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
00006E94  6600 0006               9375                                   BNE               NOT_An_indir_predec                           ;if not go check add reg indir/predec
00006E98  6700 019C               9376                                   BEQ               NOT_An_indir_postinc_reg                      ;if equal go figure out the register
00006E9C                          9377                        
00006E9C  B2BC 00000018           9378  NOT_An_indir_predec              CMP.L             #match_NOT_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
00006EA2  6600 0006               9379                                   BNE               NOT_abs_add_word                              ;if not go check abs add word
00006EA6  6700 023C               9380                                   BEQ               NOT_An_indir_predec_reg                       ;if equal go figure out the register
00006EAA                          9381  
00006EAA  C4BC 0000003F           9382  NOT_abs_add_word                 AND.L             #mask_NOT_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
00006EB0                          9383                                   
00006EB0  B4BC 00000039           9384                                   CMP.L             #match_NOT_abs_add_word,D2                ;check if abs add word
00006EB6  2A18                    9385                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00006EB8  6600 0006               9386                                   BNE               NOT_abs_add_long                              ;if not go check abs add long
00006EBC  6700 02D6               9387                                   BEQ               NOT_abs_add_word_out                          ;if equal go to output
00006EC0                          9388    
00006EC0  B4BC 0000003C           9389  NOT_abs_add_long                 CMP.L             #match_NOT_abs_add_long,D2                ;check to see if abs add long
00006EC6  6700 02D6               9390                                   BEQ               NOT_abs_add_long_out                          ;if equal go to output
00006ECA  6600 02DE               9391                                   BNE               ERROR                                     ;if not equal to an addresssing mode, pritn error
00006ECE                          9392                               
00006ECE                          9393  
00006ECE                          9394  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00006ECE                          9395  ;-----------------------------------Data Register Direct--------------------------------
00006ECE  4242                    9396  NOT_Dn_reg                      CLR                D2                                      ;make sure D2 is empty
00006ED0  C4BC 0000003F           9397                                  AND.L              #mask_NOT_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00006ED6  B4BC 00000000           9398                                  CMP.L              #match_NOT_D0,D2                         ;check to see in the register is 0
00006EDC  6600 0006               9399                                  BNE                NOT_rD1                                      ;if not go check register 1
00006EE0  6700 0064               9400                                  BEQ                NOT_D0_output                                ;if equal go to output subroutine
00006EE4                          9401  
00006EE4  B4BC 00000001           9402  NOT_rD1                         CMP.L              #match_NOT_D1,D2                        ;check to see in the register is 1
00006EEA  6600 0006               9403                                  BNE                NOT_rD2                                     ;if not go check register 2
00006EEE  6700 005E               9404                                  BEQ                NOT_D1_output                               ;if equal go to output subroutine
00006EF2                          9405  
00006EF2  B4BC 00000002           9406  NOT_rD2                         CMP.L              #match_NOT_D2,D2                        ;check to see in the register is 2
00006EF8  6600 0006               9407                                  BNE                NOT_rD3                                     ;if not go check register 3
00006EFC  6700 0058               9408                                  BEQ                NOT_D2_output                               ;if equal go to output subroutine
00006F00                          9409  
00006F00  B4BC 00000003           9410  NOT_rD3                         CMP.L              #match_NOT_D3,D2                       ;check to see in the register is 3
00006F06  6600 0006               9411                                  BNE                NOT_rD4                                     ;if not go check register 4
00006F0A  6700 0052               9412                                  BEQ                NOT_D3_output                              ;if equal go to output subroutine
00006F0E                          9413  
00006F0E  B4BC 00000004           9414  NOT_rD4                         CMP.L              #match_NOT_D4,D2                       ;check to see in the register is 4
00006F14  6600 0006               9415                                  BNE                NOT_rD5                                     ;if not go check register 5
00006F18  6700 004C               9416                                  BEQ                NOT_D4_output                              ;if equal go to output subroutine
00006F1C                          9417  
00006F1C  B4BC 00000005           9418  NOT_rD5                         CMP.L              #match_NOT_D5,D2                       ;check to see in the register is 5
00006F22  6600 0006               9419                                  BNE                NOT_rD6                                     ;if not go check register 6
00006F26  6700 0046               9420                                  BEQ                NOT_D5_output                              ;if equal go to output subroutine
00006F2A                          9421  
00006F2A  B4BC 00000006           9422  NOT_rD6                         CMP.L              #match_NOT_D6,D2                       ;check to see in the register is 6
00006F30  6600 0006               9423                                  BNE                NOT_rD7                                     ;if not go check register 7
00006F34  6700 0040               9424                                  BEQ                NOT_D6_output                              ;if equal go to output subroutine
00006F38                          9425  
00006F38  B4BC 00000007           9426  NOT_rD7                         CMP.L              #match_NOT_D7,D2                       ;check to see in the register is 7
00006F3E  6700 003E               9427                                  BEQ                NOT_D7_output                              ;if equal go to output subroutine
00006F42  6600 0266               9428                                  BNE                ERROR                                        :if not equal to an addresssing mode, pritn error
00006F46                          9429                                  
00006F46                          9430  ;--------------------Data Register Direct Output-----------------------
00006F46  227C 00008494           9431  NOT_D0_output               MOVE.L          #ea_D0,A1                           ;load string constant into A1
00006F4C  4E75                    9432                              RTS                                             ;return to subroutine
00006F4E                          9433                                      
00006F4E  227C 00008497           9434  NOT_D1_output               MOVE.L          #ea_D1,A1                           ;load string constant into A1
00006F54  4E75                    9435                              RTS                                             ;return to subroutine
00006F56                          9436                                      
00006F56  227C 0000849A           9437  NOT_D2_output               MOVE.L          #ea_D2,A1                           ;load string constant into A1
00006F5C  4E75                    9438                              RTS                                             ;return to subroutine
00006F5E                          9439                                      
00006F5E  227C 0000849D           9440  NOT_D3_output               MOVE.L          #ea_D3,A1                           ;load string constant into A1
00006F64  4E75                    9441                              RTS                                             ;return to subroutine
00006F66                          9442                                      
00006F66  227C 000084A0           9443  NOT_D4_output               MOVE.L          #ea_D4,A1                           ;load string constant into A1
00006F6C  4E75                    9444                              RTS                                             ;return to subroutine
00006F6E                          9445                                      
00006F6E  227C 000084A3           9446  NOT_D5_output               MOVE.L          #ea_D5,A1                           ;load string constant into A1
00006F74  4E75                    9447                              RTS                                             ;return to subroutine
00006F76                          9448                                      
00006F76  227C 000084A6           9449  NOT_D6_output               MOVE.L          #ea_D6,A1                           ;load string constant into A1
00006F7C  4E75                    9450                              RTS                                             ;return to subroutine
00006F7E                          9451                                      
00006F7E  227C 000084A9           9452  NOT_D7_output               MOVE.L          #ea_D7,A1                           ;load string constant into A1
00006F84  4E75                    9453                              RTS                                             ;return to subroutine
00006F86                          9454                                      
00006F86                          9455  ;------------------Address Register Indirect-----------------------
00006F86  B4BC 00000010           9456  NOT_An_indir_reg                            CMP.L           #match_NOT_An_indir_r0,D2              ;check reg is equal to 0
00006F8C  6600 0006               9457                                              BNE             NOT_An_indir_reg1                            ;if not try reg 1
00006F90  6700 0064               9458                                              BEQ             NOT_An_indir_reg0_out                     ;if equal go to output subroutine
00006F94                          9459  
00006F94  B4BC 00000011           9460  NOT_An_indir_reg1                           CMP.L           #match_NOT_An_indir_r1,D2              ;check reg is equal to 1
00006F9A  6600 0006               9461                                              BNE             NOT_An_indir_reg2                            ;if not try reg 2
00006F9E  6700 005E               9462                                              BEQ             NOT_An_indir_reg1_out                     ;if equal go to output subroutine
00006FA2                          9463  
00006FA2  B4BC 00000012           9464  NOT_An_indir_reg2                           CMP.L           #match_NOT_An_indir_r2,D2              ;check reg is equal to 2
00006FA8  6600 0006               9465                                              BNE             NOT_An_indir_reg3                            ;if not try reg 3
00006FAC  6700 0058               9466                                              BEQ             NOT_An_indir_reg2_out                     ;if equal go to output subroutine
00006FB0                          9467  
00006FB0  B4BC 00000013           9468  NOT_An_indir_reg3                           CMP.L           #match_NOT_An_indir_r3,D2              ;check reg is equal to 3
00006FB6  6600 0006               9469                                              BNE             NOT_An_indir_reg4                            ;if not try reg 4
00006FBA  6700 0052               9470                                              BEQ             NOT_An_indir_reg3_out                     ;if equal go to output subroutine
00006FBE                          9471  
00006FBE  B4BC 00000014           9472  NOT_An_indir_reg4                           CMP.L           #match_NOT_An_indir_r4,D2              ;check reg is equal to 4
00006FC4  6600 0006               9473                                              BNE             NOT_An_indir_reg5                            ;if not try reg 5
00006FC8  6700 004C               9474                                              BEQ             NOT_An_indir_reg4_out                    ;if equal go to output subroutine
00006FCC                          9475  
00006FCC  B4BC 00000015           9476  NOT_An_indir_reg5                           CMP.L           #match_NOT_An_indir_r5,D2              ;check reg is equal to 5
00006FD2  6600 0006               9477                                              BNE             NOT_An_indir_reg6                            ;if not try reg 6
00006FD6  6700 0046               9478                                              BEQ             NOT_An_indir_reg5_out                     ;if equal go to output subroutine
00006FDA                          9479  
00006FDA  B4BC 00000016           9480  NOT_An_indir_reg6                           CMP.L           #match_NOT_An_indir_r6,D2              ;check reg is equal to 6
00006FE0  6700 0044               9481                                              BEQ             NOT_An_indir_reg6_out                     ;if equal go to output subroutine
00006FE4  6600 0002               9482                                              BNE             NOT_An_indir_reg7
00006FE8                          9483  
00006FE8  B4BC 00000017           9484  NOT_An_indir_reg7                           CMP.L           #match_NOT_An_indir_r7,D2              ;check reg is equal to 6
00006FEE  6700 003E               9485                                              BEQ             NOT_An_indir_reg7_out                     ;if equal go to output subroutine
00006FF2  6600 01B6               9486                                              BNE              ERROR                                        :if not equal to an addresssing mode, pritn error
00006FF6                          9487  
00006FF6                          9488  ;--------------------Address Register Indirect Output-----------------------
00006FF6  227C 000084D4           9489  NOT_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
00006FFC  4E75                    9490                                          RTS                                                         ;return to subroutine
00006FFE                          9491                                      
00006FFE  227C 000084D9           9492  NOT_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
00007004  4E75                    9493                                          RTS                                                         ;return to subroutine
00007006                          9494                                              
00007006  227C 000084DE           9495  NOT_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
0000700C  4E75                    9496                                          RTS                                                     ;return to subroutine
0000700E                          9497  
0000700E  227C 000084E3           9498  NOT_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
00007014  4E75                    9499                                          RTS                                                     ;return to subroutine
00007016                          9500                                              
00007016  227C 000084E8           9501  NOT_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
0000701C  4E75                    9502                                          RTS                                                         ;return to subroutine
0000701E                          9503                                          
0000701E  227C 000084ED           9504  NOT_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
00007024  4E75                    9505                                          RTS                                                     ;return to subroutine
00007026                          9506  
00007026  227C 000084F2           9507  NOT_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
0000702C  4E75                    9508                                          RTS                                                         ;return to subroutine
0000702E                          9509  
0000702E  227C 000084F7           9510  NOT_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
00007034  4E75                    9511                                          RTS                                                         ;return to subroutine
00007036                          9512  
00007036                          9513  
00007036                          9514  ;------------------Address Register Indirect with Post Increment-----------------------
00007036  B4BC 00000020           9515  NOT_An_indir_postinc_reg                    CMP.L      #match_NOT_An_indir_postinc_r0,D2        ;check reg is equal to 0
0000703C  6600 0006               9516                                              BNE        NOT_An_indir_pinc_r1                      ;if not try reg 1
00007040  6700 0062               9517                                              BEQ        NOT_An_indir_pinc_r0_out               ;if equal go to output subroutine
00007044                          9518  
00007044  B4BC 00000021           9519  NOT_An_indir_pinc_r1                        CMP.L      #match_NOT_An_indir_postinc_r1,D2        ;check reg is equal to 1
0000704A  6600 0006               9520                                              BNE        NOT_An_indir_pinc_r2                      ;if not try reg 2
0000704E  6700 005C               9521                                              BEQ        NOT_An_indir_pinc_r1_out               ;if equal go to output subroutine
00007052                          9522  
00007052  B4BC 00000022           9523  NOT_An_indir_pinc_r2                        CMP.L      #match_NOT_An_indir_postinc_r2,D2        ;check reg is equal to 2
00007058  6600 0006               9524                                              BNE        NOT_An_indir_pinc_r3                      ;if not try reg 3
0000705C  6700 0056               9525                                              BEQ        NOT_An_indir_pinc_r2_out               ;if equal go to output subroutine
00007060                          9526       
00007060  B4BC 00000023           9527  NOT_An_indir_pinc_r3                        CMP.L      #match_NOT_An_indir_postinc_r3,D2        ;check reg is equal to 3
00007066  6600 0006               9528                                              BNE        NOT_An_indir_pinc_r4                      ;if not try reg 4
0000706A  6700 0050               9529                                              BEQ        NOT_An_indir_pinc_r3_out               ;if equal go to output subroutine
0000706E                          9530   
0000706E  B4BC 00000024           9531  NOT_An_indir_pinc_r4                        CMP.L      #match_NOT_An_indir_postinc_r4,D2        ;check reg is equal to 4
00007074  6600 0006               9532                                              BNE        NOT_An_indir_pinc_r5                      ;if not try reg 5
00007078  6700 004A               9533                                              BEQ        NOT_An_indir_pinc_r4_out               ;if equal go to output subroutine
0000707C                          9534  
0000707C  B4BC 00000025           9535  NOT_An_indir_pinc_r5                        CMP.L      #match_NOT_An_indir_postinc_r5,D2        ;check reg is equal to 5
00007082  6600 0006               9536                                              BNE        NOT_An_indir_pinc_r6                      ;if not try reg 6
00007086  6700 0044               9537                                              BEQ        NOT_An_indir_pinc_r5_out               ;if equal go to output subroutine
0000708A                          9538  
0000708A  B4BC 00000026           9539  NOT_An_indir_pinc_r6                        CMP.L      #match_NOT_An_indir_postinc_r6,D2        ;check reg is equal to 6
00007090  6700 0042               9540                                              BEQ        NOT_An_indir_pinc_r6_out              ;if equal go to output subroutine
00007094  66F4                    9541                                              BNE        NOT_An_indir_pinc_r6
00007096                          9542                                              
00007096  B4BC 00000027           9543  NOT_An_indir_pinc_r7                        CMP.L      #match_NOT_An_indir_postinc_r7,D2        ;check reg is equal to 7
0000709C  6700 003E               9544                                              BEQ        NOT_An_indir_pinc_r7_out              ;if equal go to output subroutine
000070A0  6600 0108               9545                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
000070A4                          9546  
000070A4                          9547  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000070A4  227C 00008502           9548  NOT_An_indir_pinc_r0_out                    MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
000070AA  4E75                    9549                                              RTS                                             ;return to subroutine
000070AC                          9550  
000070AC  227C 00008502           9551  NOT_An_indir_pinc_r1_out                    MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
000070B2  4E75                    9552                                              RTS                                             ;return to subroutine
000070B4                          9553  
000070B4  227C 00008508           9554  NOT_An_indir_pinc_r2_out                    MOVE.L          #ea_indir_postinc_A2,A1         ;load string constant into A1
000070BA  4E75                    9555                                              RTS                                             ;return to subroutine
000070BC                          9556  
000070BC  227C 0000850E           9557  NOT_An_indir_pinc_r3_out                    MOVE.L          #ea_indir_postinc_A3,A1         ;load string constant into A1
000070C2  4E75                    9558                                              RTS                                             ;return to subroutine
000070C4                          9559  
000070C4  227C 00008514           9560  NOT_An_indir_pinc_r4_out                    MOVE.L          #ea_indir_postinc_A4,A1         ;load string constant into A1
000070CA  4E75                    9561                                              RTS                                             ;return to subroutine
000070CC                          9562  
000070CC  227C 0000851A           9563  NOT_An_indir_pinc_r5_out                    MOVE.L          #ea_indir_postinc_A5,A1         ;load string constant into A1
000070D2  4E75                    9564                                              RTS                                             ;return to subroutine
000070D4                          9565   
000070D4  227C 00008520           9566  NOT_An_indir_pinc_r6_out                    MOVE.L          #ea_indir_postinc_A6,A1         ;load string constant into A1
000070DA  4E75                    9567                                              RTS                                             ;return to subroutine
000070DC                          9568  
000070DC  227C 00008526           9569  NOT_An_indir_pinc_r7_out                    MOVE.L          #ea_indir_postinc_A7,A1         ;load string constant into A1
000070E2  4E75                    9570                                              RTS                                             ;return to subroutine
000070E4                          9571                                                      
000070E4                          9572  ;------------------Address Register Indirect with Pre Decrement-----------------------
000070E4  B4BC 00000018           9573  NOT_An_indir_predec_reg                     CMP.L      #match_NOT_An_indir_predec_r0,D2         ;check reg is equal to 0
000070EA  6600 0006               9574                                              BNE        NOT_An_indir_pdec_r1                      ;if not try reg 1
000070EE  6700 0064               9575                                              BEQ        NOT_An_indir_pdec_r0_out               ;if equal go to output subroutine
000070F2                          9576  
000070F2  B4BC 00000019           9577  NOT_An_indir_pdec_r1                        CMP.L      #match_NOT_An_indir_predec_r1,D2         ;check reg is equal to 1
000070F8  6600 0006               9578                                              BNE        NOT_An_indir_pdec_r2                      ;if not try reg 2
000070FC  6700 005E               9579                                              BEQ        NOT_An_indir_pdec_r1_out               ;if equal go to output subroutine
00007100                          9580  
00007100  B4BC 0000001A           9581  NOT_An_indir_pdec_r2                        CMP.L      #match_NOT_An_indir_predec_r2,D2         ;check reg is equal to 2
00007106  6600 0006               9582                                              BNE        NOT_An_indir_pdec_r3                      ;if not try reg 3
0000710A  6700 0058               9583                                              BEQ        NOT_An_indir_pdec_r2_out               ;if equal go to output subroutine
0000710E                          9584  
0000710E  B4BC 0000001B           9585  NOT_An_indir_pdec_r3                        CMP.L      #match_NOT_An_indir_predec_r3,D2         ;check reg is equal to 3
00007114  6600 0006               9586                                              BNE        NOT_An_indir_pdec_r4                      ;if not try reg 4
00007118  6700 0052               9587                                              BEQ        NOT_An_indir_pdec_r3_out               ;if equal go to output subroutine
0000711C                          9588  
0000711C  B4BC 0000001C           9589  NOT_An_indir_pdec_r4                        CMP.L      #match_NOT_An_indir_predec_r4,D2         ;check reg is equal to 4
00007122  6600 0006               9590                                              BNE        NOT_An_indir_pdec_r5                      ;if not try reg 5
00007126  6700 004C               9591                                              BEQ        NOT_An_indir_pdec_r4_out               ;if equal go to output subroutine
0000712A                          9592  
0000712A  B4BC 0000001D           9593  NOT_An_indir_pdec_r5                        CMP.L      #match_NOT_An_indir_predec_r5,D2         ;check reg is equal to 5
00007130  6600 0006               9594                                              BNE        NOT_An_indir_pdec_r6                      ;if not try reg 6
00007134  6700 0046               9595                                              BEQ        NOT_An_indir_pdec_r5_out               ;if equal go to output subroutine
00007138                          9596  
00007138  B4BC 0000001E           9597  NOT_An_indir_pdec_r6                        CMP.L      #match_NOT_An_indir_predec_r6,D2         ;check reg is equal to 6
0000713E  6700 0044               9598                                              BEQ        NOT_An_indir_pdec_r6_out               ;if equal go to output subroutine
00007142  6600 0002               9599                                              BNE        NOT_An_indir_pdec_r7
00007146                          9600  
00007146  B4BC 0000001E           9601  NOT_An_indir_pdec_r7                        CMP.L      #match_NOT_An_indir_predec_r6,D2         ;check reg is equal to 6
0000714C  6700 003E               9602                                              BEQ        NOT_An_indir_pdec_r7_out               ;if equal go to output subroutine
00007150  6600 0058               9603                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
00007154                          9604  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00007154  227C 0000852C           9605  NOT_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
0000715A  4E75                    9606                                              RTS                                                     ;return to subroutine
0000715C                          9607  
0000715C  227C 00008532           9608  NOT_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
00007162  4E75                    9609                                              RTS                                                     ;return to subroutine
00007164                          9610                                                      
00007164  227C 00008538           9611  NOT_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
0000716A  4E75                    9612                                              RTS                                                     ;return to subroutine
0000716C                          9613  
0000716C  227C 0000853E           9614  NOT_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
00007172  4E75                    9615                                              RTS                                                     ;return to subroutine
00007174                          9616  
00007174  227C 00008544           9617  NOT_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
0000717A  4E75                    9618                                              RTS                                                     ;return to subroutine
0000717C                          9619      
0000717C  227C 0000854A           9620  NOT_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00007182  4E75                    9621                                              RTS                                                     ;return to subroutine
00007184                          9622      
00007184  227C 00008550           9623  NOT_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
0000718A  4E75                    9624                                              RTS                                                     ;return to subroutine
0000718C                          9625  
0000718C  227C 00008556           9626  NOT_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
00007192  4E75                    9627                                              RTS                                                     ;return to subroutine
00007194                          9628                                                      
00007194                          9629  ;------------------Absolute Addressing Output-----------------------
00007194  22FC 00008566           9630  NOT_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000719A  22C5                    9631                                           MOVE.L      D5,(A1)+                           ;load address                  
0000719C  4E75                    9632                                           RTS                                            :return to subroutine
0000719E                          9633                                             
0000719E                          9634  
0000719E  2A18                    9635  NOT_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000071A0  22FC 00008566           9636                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000071A6  22C5                    9637                                           MOVE.L      D5,(A1)+                           ;load address                  
000071A8  4E75                    9638                                           RTS      
000071AA                          9639  
000071AA                          9640                                       
000071AA  43F9 00008480           9641  ERROR                                   LEA             ERROR_MESSAGE,A1                 ;load error messge into A3
000071B0  4E75                    9642                          RTS
000071B2                          9643                                                  
000071B2                          9644                                                                                             
000071B2                          9645  
000071B2                          9646                                                  
000071B2  =00000038               9647  mask_NOT_ea_mode            EQU             $0038              ;masks bits 5-3 to determine ea mode
000071B2  =0000003F               9648  mask_NOT_ea_reg_and_mode        EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
000071B2  =0000003F               9649  mask_NOT_ea_mode_abs_add        EQU             $003F
000071B2                          9650  
000071B2  =00000000               9651  match_NOT_Dn                EQU             $0000              ;match for data reg dir
000071B2  =00000010               9652  match_NOT_An_indir          EQU             $0010              ;match for add reg indir
000071B2  =00000020               9653  match_NOT_An_indir_postinc      EQU             $0020              ;match for add reg indir with postinc
000071B2  =00000018               9654  match_NOT_An_indir_predec       EQU             $0018              ;match for add reg indir with predec
000071B2  =00000039               9655  match_NOT_abs_add_word          EQU             $0039              ;match for word abs add 
000071B2  =0000003C               9656  match_NOT_abs_add_long          EQU             $003C              ;match for long abs add
000071B2                          9657  
000071B2  =00000000               9658  match_NOT_D0                EQU             $0000              ;match for data reg dir with data reg 0
000071B2  =00000001               9659  match_NOT_D1                EQU             $0001              ;match for data reg dir with data reg 1
000071B2  =00000002               9660  match_NOT_D2                EQU             $0002              ;match for data reg dir with data reg 2
000071B2  =00000003               9661  match_NOT_D3                EQU             $0003              ;match for data reg dir with data reg 3
000071B2  =00000004               9662  match_NOT_D4                EQU             $0004              ;match for data reg dir with data reg 4
000071B2  =00000005               9663  match_NOT_D5                EQU             $0005              ;match for data reg dir with data reg 5
000071B2  =00000006               9664  match_NOT_D6                EQU             $0006              ;match for data reg dir with data reg 6
000071B2  =00000007               9665  match_NOT_D7                EQU             $0007              ;match for data reg dir with data reg 7
000071B2                          9666  
000071B2  =00000010               9667  match_NOT_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
000071B2  =00000011               9668  match_NOT_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
000071B2  =00000012               9669  match_NOT_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
000071B2  =00000013               9670  match_NOT_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
000071B2  =00000014               9671  match_NOT_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
000071B2  =00000015               9672  match_NOT_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
000071B2  =00000016               9673  match_NOT_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
000071B2  =00000017               9674  match_NOT_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
000071B2                          9675  
000071B2                          9676  
000071B2  =00000020               9677  match_NOT_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
000071B2  =00000021               9678  match_NOT_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
000071B2  =00000022               9679  match_NOT_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
000071B2  =00000023               9680  match_NOT_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
000071B2  =00000024               9681  match_NOT_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
000071B2  =00000025               9682  match_NOT_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
000071B2  =00000026               9683  match_NOT_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
000071B2  =00000027               9684  match_NOT_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
000071B2                          9685  
000071B2  =00000018               9686  match_NOT_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
000071B2  =00000019               9687  match_NOT_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
000071B2  =0000001A               9688  match_NOT_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
000071B2  =0000001B               9689  match_NOT_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
000071B2  =0000001C               9690  match_NOT_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
000071B2  =0000001D               9691  match_NOT_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
000071B2  =0000001E               9692  match_NOT_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
000071B2  =0000001F               9693  match_NOT_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
000071B2                          9694  
000071B2                          9695  
000071B2                          9696  
000071B2                          9697  
000071B2                          9698  
000071B2                          9699  
000071B2                          9700  
000071B2                          9701  
000071B2                          9702  -------------------- end include --------------------
000071B2                          9703              INCLUDE 'OR Subroutine.x68'
000071B2                          9704  
000071B2                          9705  
000071B2                          9706  
000071B2                          9707     
000071B2                          9708  ;--------------------------------------------------------OR ORroutine-----------------------------------------------------------------------
000071B2                          9709  OR_sub                                                 ;preserve the registers, 
000071B2                          9710                                   
000071B2  223C 000001C0           9711                                         MOVE.L              #mask_OR_opmode,D1                       ;load mask to determine the operOR order
000071B8                          9712                                  
000071B8  B2BC 00000000           9713  OR_Dn_ea_match                         CMP.L              #match_OR_b_Dn_ea,D1                 ;check to see if it's Dn,ea
000071BE  6700 05BC               9714                                         BEQ                OR_Dn_ea                                 ;if equal go figure out data register
000071C2  6600 0002               9715                                         BNE                OR_Dn_ea_match_w                         ;if not check word size for same order
000071C6                          9716  
000071C6  B2BC 00000040           9717  OR_Dn_ea_match_w                       CMP.L              #match_OR_w_Dn_ea,D1                 ;check to see if it's Dn,ea
000071CC  6700 05AE               9718                                         BEQ                OR_Dn_ea                                 ;if equal go figure out data register
000071D0  6600 0002               9719                                         BNE                OR_Dn_ea_match_l                         ;if not check long size for same order
000071D4                          9720  
000071D4  B2BC 00000080           9721  OR_Dn_ea_match_l                       CMP.L              #match_OR_l_Dn_ea,D1                 ;check to see if it's Dn,ea
000071DA  6700 05A0               9722                                         BEQ                OR_Dn_ea                                 ;if equal go figure out data register
000071DE  6600 0002               9723                                         BNE                OR_ea_Dn_match                           ;if not check other order
000071E2                          9724  
000071E2  B2BC 00000100           9725  OR_ea_Dn_match                         CMP.L              #match_OR_b_ea_Dn,D1                 ;check to see if it's ea,Dn
000071E8  6700 0020               9726                                         BEQ                OR_ea_Dn                                 ;if equal go figure out ea mode
000071EC  6600 0002               9727                                         BNE                OR_ea_Dn_match_w                         ;if not go check word size for same order
000071F0                          9728  
000071F0  B2BC 00000140           9729  OR_ea_Dn_match_w                       CMP.L              #match_OR_w_ea_Dn,D1                 ;check to see if it's ea,Dn
000071F6  6700 0012               9730                                         BEQ                OR_ea_Dn                                 ;if equal go figure out ea mode
000071FA  6600 0002               9731                                         BNE                OR_ea_Dn_match_l                         ;if not go check word size for same order
000071FE                          9732  
000071FE  B2BC 00000180           9733  OR_ea_Dn_match_l                       CMP.L              #match_OR_l_ea_Dn,D1                 ;check to see if it's ea,Dn
00007204  6700 0004               9734                                         BEQ                OR_ea_Dn                                 ;if equal go figure out ea mode
00007208  66A0                    9735                                         BNE                ERROR                                 ;if not go to error message
0000720A                          9736  ;--------------------------------------------------------------------------------------------------------------------------
0000720A                          9737  ;-------------------------------------------------------------------------------------------------------------------------
0000720A  4241                    9738  OR_ea_Dn                             CLR                D1                                        ;clear D1 to load new mask                                
0000720C  223C 00000038           9739                                       MOVE.L             #mask_OR_ea_mode,D1                       ;move the mask to D1
00007212                          9740  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00007212  B2BC 00000010           9741  OR_ea_Dn_add_reg_indir               CMP.L             #match_OR_An_indir,D1                      ;check to see if mode is add reg indir
00007218  6600 0006               9742                                       BNE               OR_ea_Dn_add_reg_indir_predec              ;if not, go check add reg indir predec 
0000721C  6700 01E8               9743                                       BEQ               OR_ea_Dn_An_indir_reg                      ;if equal go figure out the register           
00007220                          9744              
00007220  B2BC 00000020           9745  OR_ea_Dn_add_reg_indir_predec        CMP.L             #match_OR_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00007226  6600 0006               9746                                       BNE               OR_ea_Dn_add_reg_indir_postinc             ;if not go check add reg indir/predec
0000722A  6700 037A               9747                                       BEQ               OR_ea_Dn_An_indir_predec                   ;if equal go figure out the register
0000722E                          9748                        
0000722E  B2BC 00000018           9749  OR_ea_Dn_add_reg_indir_postinc       CMP.L             #match_OR_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
00007234  6600 0006               9750                                       BNE               OR_ea_Dn_abs_add_word                      ;if not go check abs add word
00007238  6700 029C               9751                                       BEQ               OR_ea_Dn_An_indir_postinc_reg              ;if equal go figure out the register
0000723C                          9752  
0000723C  243C 0000003F           9753  OR_ea_Dn_abs_add_word                MOVE.L            #mask_OR_abs_add,D2                        ;load mask to determine if abs add word or long
00007242                          9754                                   
00007242  B4BC 00000038           9755                                       CMP.L             #match_OR_abs_add_word,D2                  ;check if abs add word
00007248  2A18                    9756                                       MOVE.L            (A0)+,D5                                   ;pull the next word instruction that holds the address
0000724A  6600 0006               9757                                       BNE               OR_ea_Dn_abs_add_long                      ;if not go check abs add long
0000724E  6700 0426               9758                                       BEQ               OR_ea_Dn_abs_add_word_out                  ;if equal go to output
00007252                          9759    
00007252  B4BC 00000039           9760  OR_ea_Dn_abs_add_long                CMP.L             #match_OR_abs_add_long,D2                  ;check to see if abs add long
00007258  6700 042A               9761                                       BEQ               OR_ea_Dn_abs_add_long_out                  ;if equal go to output
0000725C  6600 FF4C               9762                                       BNE               ERROR                                      ;if not equal go to error mesage OR routine
00007260                          9763  
00007260                          9764  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00007260                          9765                                   
00007260                          9766                                   
00007260                          9767  ;-----------------------------------Data Register Direct--------------------------------
00007260  243C 0000003F           9768  OR_ea_Dn_Dn_reg                  MOVE.L             #mask_OR_ea_reg_OR_mode,D2             ;load the mask into D2 for the mode OR the register
00007266  B4BC 00000000           9769                                   CMP.L              #match_OR_D0,D2                       ;check to see in the register is 0
0000726C  6600 0006               9770                                   BNE                OR_ea_Dn_rD1                                     ;if not go check register 1
00007270  6700 0064               9771                                   BEQ                OR_ea_Dn_D0_out                              ;if equal go to output ORroutine
00007274                          9772  
00007274  B4BC 00000001           9773  OR_ea_Dn_rD1                     CMP.L              #match_OR_D1,D2                       ;check to see in the register is 1
0000727A  6600 0006               9774                                   BNE                OR_ea_Dn_rD2                                     ;if not go check register 2
0000727E  6700 0062               9775                                   BEQ                OR_ea_Dn_D1_out                              ;if equal go to output ORroutine
00007282                          9776  
00007282  B4BC 00000002           9777  OR_ea_Dn_rD2                     CMP.L              #match_OR_D2,D2                       ;check to see in the register is 2
00007288  6600 0006               9778                                   BNE                OR_ea_Dn_rD3                                     ;if not go check register 3
0000728C  6700 0060               9779                                   BEQ                OR_ea_Dn_D2_out                              ;if equal go to output ORroutine
00007290                          9780  
00007290  B4BC 00000003           9781  OR_ea_Dn_rD3                     CMP.L              #match_OR_D3,D2                       ;check to see in the register is 3
00007296  6600 0006               9782                                   BNE                OR_ea_Dn_rD4                                     ;if not go check register 4
0000729A  6700 005E               9783                                   BEQ                OR_ea_Dn_D3_out                              ;if equal go to output ORroutine
0000729E                          9784  
0000729E  B4BC 00000004           9785  OR_ea_Dn_rD4                     CMP.L              #match_OR_D4,D2                       ;check to see in the register is 4
000072A4  6600 0006               9786                                   BNE                OR_ea_Dn_rD5                                     ;if not go check register 5
000072A8  6700 005C               9787                                   BEQ                OR_ea_Dn_D4_out                              ;if equal go to output ORroutine
000072AC                          9788  
000072AC  B4BC 00000005           9789  OR_ea_Dn_rD5                     CMP.L              #match_OR_D5,D2                       ;check to see in the register is 5
000072B2  6600 0006               9790                                   BNE                OR_ea_Dn_rD6                                     ;if not go check register 6
000072B6  6700 005A               9791                                   BEQ                OR_ea_Dn_D5_out                              ;if equal go to output ORroutine
000072BA                          9792  
000072BA  B4BC 00000006           9793  OR_ea_Dn_rD6                     CMP.L              #match_OR_D6,D2                       ;check to see in the register is 6
000072C0  6600 0006               9794                                   BNE                OR_ea_Dn_rD7                                     ;if not go check register 7
000072C4  6700 0058               9795                                   BEQ                OR_ea_Dn_D6_out                              ;if equal go to output ORroutine
000072C8                          9796  
000072C8  B4BC 00000007           9797  OR_ea_Dn_rD7                     CMP.L              #match_OR_D7,D2                       ;check to see in the register is 7
000072CE  6700 005A               9798                                   BEQ                OR_ea_Dn_D7_out                              ;if equal go to output ORroutine
000072D2  6600 FED6               9799                                   BNE                ERROR                               ;if not equal, got to error message
000072D6                          9800  ;--------------------Data Register Direct Output-----------------------
000072D6  227C 00008494           9801  OR_ea_Dn_D0_out                 MOVE.L          #ea_D0,A1                           ;load string constant into A1
000072DC  4EB9 000076C4           9802                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000072E2                          9803  
000072E2  227C 00008497           9804  OR_ea_Dn_D1_out                 MOVE.L          #ea_D1,A1                           ;load string constant into A1
000072E8  4EB9 000076C4           9805                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000072EE                          9806  
000072EE                          9807  
000072EE  227C 0000849A           9808  OR_ea_Dn_D2_out                 MOVE.L          #ea_D2,A1                           ;load string constant into A1
000072F4  4EB9 000076C4           9809                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000072FA                          9810  
000072FA  227C 0000849D           9811  OR_ea_Dn_D3_out                 MOVE.L          #ea_D3,A1                           ;load string constant into A1
00007300  4EB9 000076C4           9812                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007306                          9813  
00007306                          9814  
00007306  227C 000084A0           9815  OR_ea_Dn_D4_out                 MOVE.L          #ea_D4,A1                           ;load string constant into A1
0000730C  4EB9 000076C4           9816                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007312                          9817  
00007312                          9818  
00007312  227C 000084A3           9819  OR_ea_Dn_D5_out                 MOVE.L          #ea_D5,A1                           ;load string constant into A1
00007318  4EB9 000076C4           9820                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000731E                          9821  
0000731E                          9822  
0000731E  227C 000084A6           9823  OR_ea_Dn_D6_out                 MOVE.L          #ea_D6,A1                           ;load string constant into A1
00007324  4EB9 000076C4           9824                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000732A                          9825  
0000732A                          9826  
0000732A  227C 000084A9           9827  OR_ea_Dn_D7_out                 MOVE.L          #ea_D7,A1                           ;load string constant into A1
00007330  4EB9 000076C4           9828                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007336                          9829  
00007336                          9830  ;------------------Address Register Direct-----------------------
00007336  B4BC 00000008           9831  OR_ea_Dn_An_reg                  CMP.L           #match_OR_A0,D2                      ;check reg is equal to 0
0000733C  6600 0006               9832                                   BNE             OR_ea_Dn_rA1                         ;if not try reg 1
00007340  6700 0134               9833                                   BEQ             OR_ea_Dn_An_indir_reg0_out           ;if equal go to output ORroutine
00007344                          9834  
00007344  B4BC 00000009           9835  OR_ea_Dn_rA1                     CMP.L           #match_OR_A1,D2                      ;check reg is equal to 1
0000734A  6600 0006               9836                                   BNE             OR_ea_Dn_rA2                         ;if not try reg 2
0000734E  6700 0132               9837                                   BEQ             OR_ea_Dn_An_indir_reg1_out           ;if equal go to output ORroutine
00007352                          9838  
00007352  B4BC 0000000A           9839  OR_ea_Dn_rA2                     CMP.L           #match_OR_A2,D2                      ;check reg is equal to 2
00007358  6600 0006               9840                                   BNE             OR_ea_Dn_rA3                         ;if not try reg 3
0000735C  6700 0130               9841                                   BEQ             OR_ea_Dn_An_indir_reg2_out           ;if equal go to output ORroutine
00007360                          9842  
00007360  B4BC 0000000B           9843  OR_ea_Dn_rA3                     CMP.L           #match_OR_A3,D2                      ;check reg is equal to 3
00007366  6600 0006               9844                                   BNE             OR_ea_Dn_rA4                         ;if not try reg 4
0000736A  6700 012E               9845                                   BEQ             OR_ea_Dn_An_indir_reg3_out           ;if equal go to output ORroutine
0000736E                          9846  
0000736E  B4BC 0000000C           9847  OR_ea_Dn_rA4                     CMP.L           #match_OR_A4,D2                      ;check reg is equal to 4
00007374  6600 0006               9848                                   BNE             OR_ea_Dn_rA5                         ;if not try reg 5
00007378  6700 012C               9849                                   BEQ             OR_ea_Dn_An_indir_reg4_out           ;if equal go to output ORroutine
0000737C                          9850              
0000737C  B4BC 0000000D           9851  OR_ea_Dn_rA5                     CMP.L           #match_OR_A5,D2                      ;check reg is equal to 5
00007382  6600 0006               9852                                   BNE             OR_ea_Dn_rA6                         ;if not try reg 6
00007386  6700 012A               9853                                   BEQ             OR_ea_Dn_An_indir_reg5_out           ;if equal go to output ORroutine
0000738A                          9854  
0000738A  B4BC 0000000E           9855  OR_ea_Dn_rA6                     CMP.L           #match_OR_A6,D2                      ;check reg is equal to 6
00007390  6600 0006               9856                                   BNE             OR_ea_Dn_rA7                         ;if not try reg 7
00007394  6700 0128               9857                                   BEQ             OR_ea_Dn_An_indir_reg6_out           ;if equal go to output ORroutine
00007398                          9858  
00007398  B4BC 0000000F           9859  OR_ea_Dn_rA7                     CMP.L           #match_OR_A7,D2                      ;check reg is equal to 7
0000739E  6700 012A               9860                                   BEQ             OR_ea_Dn_An_indir_reg7_out           ;if equal go to output ORroutine
000073A2  6600 FE06               9861                                   BNE             ERROR                                ;if not equal to an addresssing mode, pritn error
000073A6                          9862  
000073A6                          9863  ;--------------------Address Register Direct Output-----------------------
000073A6  227C 000084AC           9864  OR_ea_Dn_A0_out                 MOVE.L          #ea_A0,A1                           ;load string constant into A1
000073AC  4EB9 000076C4           9865                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073B2                          9866                                  
000073B2  227C 000084AF           9867  OR_ea_Dn_A1_out                 MOVE.L          #ea_A1,A1                           ;load string constant into A1
000073B8  4EB9 000076C4           9868                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073BE                          9869                                  
000073BE  227C 000084B2           9870  OR_ea_Dn_A2_out                 MOVE.L          #ea_A2,A1                           ;load string constant into A1
000073C4  4EB9 000076C4           9871                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073CA                          9872                                  
000073CA  227C 000084B5           9873  OR_ea_Dn_A3_out                 MOVE.L          #ea_A3,A1                           ;load string constant into A1
000073D0  4EB9 000076C4           9874                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073D6                          9875  
000073D6  227C 000084B8           9876  OR_ea_Dn_A4_out                 MOVE.L          #ea_A4,A1                           ;load string constant into A1
000073DC  4EB9 000076C4           9877                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073E2                          9878  
000073E2  227C 000084BB           9879  OR_ea_Dn_A5_out                 MOVE.L          #ea_A5,A1                           ;load string constant into A1
000073E8  4EB9 000076C4           9880                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073EE                          9881  
000073EE  227C 000084BE           9882  OR_ea_Dn_A6_out                 MOVE.L          #ea_A6,A1                           ;load string constant into A1
000073F4  4EB9 000076C4           9883                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000073FA                          9884  
000073FA  227C 000084C1           9885  OR_ea_Dn_A7_out                 MOVE.L          #ea_A7,A1                           ;load string constant into A1
00007400  4EB9 000076C4           9886                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007406                          9887  
00007406                          9888  ;------------------Address Register Indirect-----------------------
00007406  B4BC 00000010           9889  OR_ea_Dn_An_indir_reg            CMP.L          #match_OR_An_indir_r0,D2              ;check reg is equal to 0
0000740C  6600 0006               9890                                   BNE             OR_ea_Dn_An_indir_reg1                           ;if not try reg 1
00007410  6700 0064               9891                                   BEQ             OR_ea_Dn_An_indir_reg0_out                       ;if equal go to output ORroutine
00007414                          9892  
00007414  B4BC 00000011           9893  OR_ea_Dn_An_indir_reg1           CMP.L           #match_OR_An_indir_r1,D2              ;check reg is equal to 1
0000741A  6600 0006               9894                                   BNE             OR_ea_Dn_An_indir_reg2                           ;if not try reg 2
0000741E  6700 0062               9895                                   BEQ             OR_ea_Dn_An_indir_reg1_out                       ;if equal go to output ORroutine
00007422                          9896  
00007422  B4BC 00000012           9897  OR_ea_Dn_An_indir_reg2           CMP.L           #match_OR_An_indir_r2,D2              ;check reg is equal to 2
00007428  6600 0006               9898                                   BNE             OR_ea_Dn_An_indir_reg3                           ;if not try reg 3
0000742C  6700 0060               9899                                   BEQ             OR_ea_Dn_An_indir_reg2_out                       ;if equal go to output ORroutine
00007430                          9900  
00007430  B4BC 00000013           9901  OR_ea_Dn_An_indir_reg3           CMP.L           #match_OR_An_indir_r3,D2              ;check reg is equal to 3
00007436  6600 0006               9902                                   BNE             OR_ea_Dn_An_indir_reg4                           ;if not try reg 4
0000743A  6700 005E               9903                                   BEQ             OR_ea_Dn_An_indir_reg3_out                       ;if equal go to output ORroutine
0000743E                          9904      
0000743E  B4BC 00000014           9905  OR_ea_Dn_An_indir_reg4           CMP.L           #match_OR_An_indir_r4,D2              ;check reg is equal to 4
00007444  6600 0006               9906                                   BNE             OR_ea_Dn_An_indir_reg5                           ;if not try reg 5
00007448  6700 005C               9907                                   BEQ             OR_ea_Dn_An_indir_reg4_out                       ;if equal go to output ORroutine
0000744C                          9908          
0000744C  B4BC 00000015           9909  OR_ea_Dn_An_indir_reg5           CMP.L           #match_OR_An_indir_r5,D2              ;check reg is equal to 5
00007452  6600 0006               9910                                   BNE             OR_ea_Dn_An_indir_reg6                           ;if not try reg 6
00007456  6700 005A               9911                                   BEQ             OR_ea_Dn_An_indir_reg5_out                       ;if equal go to output ORroutine
0000745A                          9912  
0000745A  B4BC 00000016           9913  OR_ea_Dn_An_indir_reg6           CMP.L           #match_OR_An_indir_r6,D2              ;check reg is equal to 6
00007460  6600 0006               9914                                   BNE             OR_ea_Dn_An_indir_reg7                           ;if not try reg 7
00007464  6700 0058               9915                                   BEQ             OR_ea_Dn_An_indir_reg6_out                       ;if equal go to output ORroutine
00007468                          9916  
00007468  B4BC 00000017           9917  OR_ea_Dn_An_indir_reg7           CMP.L           #match_OR_An_indir_r7,D2              ;check reg is equal to 7
0000746E  6700 005A               9918                                   BEQ             OR_ea_Dn_An_indir_reg7_out                       ;if equal go to output ORroutine
00007472  6600 FD36               9919                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00007476                          9920  
00007476                          9921  ;--------------------Address Register Indirect Output-----------------------
00007476  227C 000084D4           9922  OR_ea_Dn_An_indir_reg0_out                  MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
0000747C  4EB9 000076C4           9923                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007482                          9924  
00007482  227C 000084D9           9925  OR_ea_Dn_An_indir_reg1_out                  MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00007488  4EB9 000076C4           9926                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000748E                          9927  
0000748E  227C 000084DE           9928  OR_ea_Dn_An_indir_reg2_out                  MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00007494  4EB9 000076C4           9929                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000749A                          9930  
0000749A  227C 000084E3           9931  OR_ea_Dn_An_indir_reg3_out                  MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
000074A0  4EB9 000076C4           9932                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074A6                          9933  
000074A6  227C 000084E8           9934  OR_ea_Dn_An_indir_reg4_out                  MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
000074AC  4EB9 000076C4           9935                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074B2                          9936  
000074B2  227C 000084ED           9937  OR_ea_Dn_An_indir_reg5_out                  MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
000074B8  4EB9 000076C4           9938                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074BE                          9939  
000074BE  227C 000084F2           9940  OR_ea_Dn_An_indir_reg6_out                  MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
000074C4  4EB9 000076C4           9941                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074CA                          9942                                          
000074CA  227C 000084F7           9943  OR_ea_Dn_An_indir_reg7_out                  MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
000074D0  4EB9 000076C4           9944                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000074D6                          9945  
000074D6                          9946  ;------------------Address Register Indirect with Post Increment-----------------------
000074D6  B4BC 00000018           9947  OR_ea_Dn_An_indir_postinc_reg               CMP.L      #match_OR_An_indir_postinc_r0,D2        ;check reg is equal to 0
000074DC  6600 0006               9948                                              BNE        OR_ea_Dn_An_indir_pinc_r1               ;if not try reg 1
000074E0  6700 0064               9949                                              BEQ        OR_ea_Dn_An_indir_pinc_r0_out           ;if equal go to output ORroutine
000074E4                          9950  
000074E4  B4BC 00000019           9951  OR_ea_Dn_An_indir_pinc_r1                   CMP.L      #match_OR_An_indir_postinc_r1,D2        ;check reg is equal to 1
000074EA  6600 0006               9952                                              BNE        OR_ea_Dn_An_indir_pinc_r2               ;if not try reg 2
000074EE  6700 0062               9953                                              BEQ        OR_ea_Dn_An_indir_pinc_r1_out           ;if equal go to output ORroutine
000074F2                          9954  
000074F2  B4BC 0000001A           9955  OR_ea_Dn_An_indir_pinc_r2                   CMP.L      #match_OR_An_indir_postinc_r2,D2        ;check reg is equal to 2
000074F8  6600 0006               9956                                              BNE        OR_ea_Dn_An_indir_pinc_r3               ;if not try reg 3
000074FC  6700 0060               9957                                              BEQ        OR_ea_Dn_An_indir_pinc_r2_out           ;if equal go to output ORroutine
00007500                          9958  
00007500  B4BC 0000001B           9959  OR_ea_Dn_An_indir_pinc_r3                   CMP.L      #match_OR_An_indir_postinc_r3,D2        ;check reg is equal to 3
00007506  6600 0006               9960                                              BNE        OR_ea_Dn_An_indir_pinc_r4               ;if not try reg 4
0000750A  6700 005E               9961                                              BEQ        OR_ea_Dn_An_indir_pinc_r3_out           ;if equal go to output ORroutine
0000750E                          9962   
0000750E  B4BC 0000001C           9963  OR_ea_Dn_An_indir_pinc_r4                   CMP.L      #match_OR_An_indir_postinc_r4,D2        ;check reg is equal to 4
00007514  6600 0006               9964                                              BNE        OR_ea_Dn_An_indir_pinc_r5               ;if not try reg 5
00007518  6700 005C               9965                                              BEQ        OR_ea_Dn_An_indir_pinc_r4_out           ;if equal go to output ORroutine
0000751C                          9966  
0000751C  B4BC 0000001D           9967  OR_ea_Dn_An_indir_pinc_r5                   CMP.L      #match_OR_An_indir_postinc_r5,D2        ;check reg is equal to 5
00007522  6600 0006               9968                                              BNE        OR_ea_Dn_An_indir_pinc_r6               ;if not try reg 6
00007526  6700 005A               9969                                              BEQ        OR_ea_Dn_An_indir_pinc_r5_out           ;if equal go to output ORroutine
0000752A                          9970  
0000752A  B4BC 0000001E           9971  OR_ea_Dn_An_indir_pinc_r6                   CMP.L      #match_OR_An_indir_postinc_r6,D2        ;check reg is equal to 6
00007530  6600 0006               9972                                              BNE        OR_ea_Dn_An_indir_pinc_r7               ;if not try reg 7
00007534  6700 0058               9973                                              BEQ        OR_ea_Dn_An_indir_pinc_r6_out           ;if equal go to output ORroutine
00007538                          9974  
00007538  B4BC 0000001F           9975  OR_ea_Dn_An_indir_pinc_r7                   CMP.L      #match_OR_An_indir_postinc_r7,D2        ;check reg is equal to 7
0000753E  6700 005A               9976                                              BEQ        OR_ea_Dn_An_indir_pinc_r7_out           ;if equal go to output ORroutine
00007542  6600 FC66               9977                                              BNE        ERROR                                   :if not equal to an addresssing mode, pritn error
00007546                          9978  
00007546                          9979  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00007546  227C 000084FC           9980  OR_ea_Dn_An_indir_pinc_r0_out               MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
0000754C  4EB9 000076C4           9981                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007552                          9982  
00007552  227C 00008502           9983  OR_ea_Dn_An_indir_pinc_r1_out               MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00007558  4EB9 000076C4           9984                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000755E                          9985  
0000755E  227C 00008508           9986  OR_ea_Dn_An_indir_pinc_r2_out               MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00007564  4EB9 000076C4           9987                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operORO
0000756A                          9988  
0000756A  227C 0000850E           9989  OR_ea_Dn_An_indir_pinc_r3_out               MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00007570  4EB9 000076C4           9990                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007576                          9991  
00007576  227C 00008514           9992  OR_ea_Dn_An_indir_pinc_r4_out               MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
0000757C  4EB9 000076C4           9993                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007582                          9994  
00007582  227C 0000851A           9995  OR_ea_Dn_An_indir_pinc_r5_out               MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00007588  4EB9 000076C4           9996                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000758E                          9997  
0000758E  227C 00008520           9998  OR_ea_Dn_An_indir_pinc_r6_out               MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00007594  4EB9 000076C4           9999                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000759A                         10000  
0000759A  227C 00008526          10001  OR_ea_Dn_An_indir_pinc_r7_out               MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
000075A0  4EB9 000076C4          10002                                              JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000075A6                         10003  
000075A6                         10004  ;------------------Address Register Indirect with Pre Decrement-----------------------
000075A6  B4BC 00000020          10005  OR_ea_Dn_An_indir_predec                    CMP.L      #match_OR_An_indir_predec_reg0,D2       ;check reg is equal to 0
000075AC  6600 0006              10006                                              BNE        OR_ea_Dn_An_indir_pdec_r1                      ;if not try reg 1
000075B0  6700 0064              10007                                              BEQ        OR_ea_Dn_An_indir_pdec_r0_out               ;if equal go to output ORroutine
000075B4                         10008  
000075B4  B4BC 00000021          10009  OR_ea_Dn_An_indir_pdec_r1                   CMP.L      #match_OR_An_indir_predec_reg1,D2       ;check reg is equal to 1
000075BA  6600 0006              10010                                              BNE        OR_ea_Dn_An_indir_pdec_r2                      ;if not try reg 2
000075BE  6700 0062              10011                                              BEQ        OR_ea_Dn_An_indir_pdec_r1_out               ;if equal go to output ORroutine
000075C2                         10012  
000075C2  B4BC 00000022          10013  OR_ea_Dn_An_indir_pdec_r2                   CMP.L      #match_OR_An_indir_predec_reg2,D2       ;check reg is equal to 2
000075C8  6600 0006              10014                                              BNE        OR_ea_Dn_An_indir_pdec_r3                      ;if not try reg 3
000075CC  6700 0060              10015                                              BEQ        OR_ea_Dn_An_indir_pdec_r2_out               ;if equal go to output ORroutine
000075D0                         10016  
000075D0  B4BC 00000023          10017  OR_ea_Dn_An_indir_pdec_r3                   CMP.L      #match_OR_An_indir_predec_reg3,D2       ;check reg is equal to 3
000075D6  6600 0006              10018                                              BNE        OR_ea_Dn_An_indir_pdec_r4                      ;if not try reg 4
000075DA  6700 005E              10019                                              BEQ        OR_ea_Dn_An_indir_pdec_r3_out               ;if equal go to output ORroutine
000075DE                         10020  
000075DE  B4BC 00000024          10021  OR_ea_Dn_An_indir_pdec_r4                   CMP.L      #match_OR_An_indir_predec_reg4,D2       ;check reg is equal to 4
000075E4  6600 0006              10022                                              BNE        OR_ea_Dn_An_indir_pdec_r5                      ;if not try reg 5
000075E8  6700 005C              10023                                              BEQ        OR_ea_Dn_An_indir_pdec_r4_out               ;if equal go to output ORroutine
000075EC                         10024  
000075EC  B4BC 00000025          10025  OR_ea_Dn_An_indir_pdec_r5                   CMP.L      #match_OR_An_indir_predec_reg5,D2       ;check reg is equal to 5
000075F2  6600 0006              10026                                              BNE        OR_ea_Dn_An_indir_pdec_r6                     ;if not try reg 6
000075F6  6700 005A              10027                                              BEQ        OR_ea_Dn_An_indir_pdec_r5_out               ;if equal go to output ORroutine
000075FA                         10028  
000075FA  B4BC 00000026          10029  OR_ea_Dn_An_indir_pdec_r6                   CMP.L      #match_OR_An_indir_predec_reg6,D2       ;check reg is equal to 6
00007600  6600 0006              10030                                              BNE        OR_ea_Dn_An_indir_pdec_r7                     ;if not try reg 7
00007604  6700 0058              10031                                              BEQ        OR_ea_Dn_An_indir_pdec_r6_out               ;if equal go to output ORroutine
00007608                         10032  
00007608  B4BC 00000027          10033  OR_ea_Dn_An_indir_pdec_r7                   CMP.L      #match_OR_An_indir_predec_reg7,D2       ;check reg is equal to 7
0000760E  6700 005A              10034                                              BEQ        OR_ea_Dn_An_indir_pdec_r7_out               ;if equal go to output ORroutine
00007612  6600 FB96              10035                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
00007616                         10036  
00007616                         10037  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00007616  227C 0000852C          10038  OR_ea_Dn_An_indir_pdec_r0_out                   MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
0000761C  4EB9 000076C4          10039                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007622                         10040                                              
00007622  227C 00008532          10041  OR_ea_Dn_An_indir_pdec_r1_out                   MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
00007628  4EB9 000076C4          10042                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000762E                         10043  
0000762E  227C 00008538          10044  OR_ea_Dn_An_indir_pdec_r2_out                   MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
00007634  4EB9 000076C4          10045                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000763A                         10046  
0000763A  227C 0000853E          10047  OR_ea_Dn_An_indir_pdec_r3_out                   MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
00007640  4EB9 000076C4          10048                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007646                         10049  
00007646  227C 00008544          10050  OR_ea_Dn_An_indir_pdec_r4_out                   MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
0000764C  4EB9 000076C4          10051                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007652                         10052  
00007652  227C 0000854A          10053  OR_ea_Dn_An_indir_pdec_r5_out                   MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
00007658  4EB9 000076C4          10054                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000765E                         10055  
0000765E  227C 00008550          10056  OR_ea_Dn_An_indir_pdec_r6_out                   MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
00007664  4EB9 000076C4          10057                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
0000766A                         10058  
0000766A  227C 00008556          10059  OR_ea_Dn_An_indir_pdec_r7_out                   MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00007670  4EB9 000076C4          10060                                                  JSR             OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007676                         10061          
00007676                         10062  ;------------------Absolute Addressing Output-----------------------
00007676  22FC 00008566          10063  OR_ea_Dn_abs_add_word_out                 MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
0000767C  22C5                   10064                                            MOVE.L      D5,(A1)+                           ;load address                  
0000767E  4EB9 000076C4          10065                                            JSR         OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007684                         10066                                             
00007684                         10067  
00007684  2A18                   10068  OR_ea_Dn_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00007686  22FC 00008566          10069                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
0000768C  22C5                   10070                                           MOVE.L      D5,(A1)+                           ;load address                  
0000768E  4EB9 000076C4          10071                                           JSR         OR_determine_second_op                 ;jump to ORroutine to determine second operOR
00007694                         10072  
00007694                         10073  ;---------------Immediate Addresing---------------------------
00007694  2A18                   10074  OR_ea_Dn_immediate_add_out          MOVE.L      (A0)+,D5                             ;capture the immediate address
00007696  BCBC 000000FC          10075                                      CMP.L       #match_OR_imm_add_word,D6               ;check to see if need to pull word
0000769C  2A18                   10076                                      MOVE.L      (A0)+,D5                            ;pull the word
0000769E  6700 0006              10077                                      BEQ         OR_ea_Dn_imm_add_w                           ;if equal go pull word    
000076A2  6600 0010              10078                                      BNE         OR_ea_Dn_imm_add_l                           ;if not equal, go check long
000076A6                         10079                                           
000076A6  22FC 00008566          10080  OR_ea_Dn_imm_add_w                  MOVE.L     #ea_$,(A1)+                          ;load the $
000076AC  32C5                   10081                                      MOVE.W     D5,(A1)+                             ;load the word address                           
000076AE  4EB9 000076C4          10082                                      JSR        OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000076B4                         10083                                           
000076B4  2A18                   10084  OR_ea_Dn_imm_add_l                  MOVE.L     (A0)+,D5                             ;pull the long OR increase the pointer
000076B6  22FC 00008566          10085                                      MOVE.L     #ea_$,(A1)+                          ;load the $
000076BC  2245                   10086                                      MOVE.L     D5,A1                               ;move to A1
000076BE  4EB9 000076C4          10087                                      JSR        OR_determine_second_op                 ;jump to ORroutine to determine second operOR
000076C4                         10088  
000076C4                         10089  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000076C4  4282                   10090  OR_determine_second_op                          CLR.L       D2                          ;clear D2 
000076C6  84BC 00000E00          10091                                                  OR.L        #mask_OR_An_reg,D2      ;load the mask for the register into D2, masks bit 11-9
000076CC                         10092                                                  
000076CC  B4BC 00000000          10093  ea_Dn_OR_reg0                                   CMP.L       #match_OR_reg0,D2       ;check to see if reg equal 0
000076D2  6600 0006              10094                                                  BNE         ea_Dn_OR_reg1                   ;if not equal got check reg 1
000076D6  6700 0064              10095                                                  BEQ         ea_Dn_OR_reg0_out               ;if equal go to output
000076DA                         10096                                                  
000076DA  B4BC 00000200          10097  ea_Dn_OR_reg1                                   CMP.L       #match_OR_reg1,D2       ;check to see if reg equal 1
000076E0  6600 0006              10098                                                  BNE         ea_Dn_OR_reg2                   ;if not equal got check reg 2
000076E4  6700 005E              10099                                                  BEQ         ea_Dn_OR_reg1_out               ;if equal go to output
000076E8                         10100  
000076E8  B4BC 00000400          10101  ea_Dn_OR_reg2                                   CMP.L       #match_OR_reg2,D2       ;check to see if reg equal 2
000076EE  6600 0006              10102                                                  BNE         ea_Dn_OR_reg3                   ;if not equal got check reg 3
000076F2  6700 0058              10103                                                  BEQ         ea_Dn_OR_reg2_out               ;if equal go to output
000076F6                         10104  
000076F6  B4BC 00000600          10105  ea_Dn_OR_reg3                                   CMP.L       #match_OR_reg3,D2       ;check to see if reg equal 3
000076FC  6600 0006              10106                                                  BNE         ea_Dn_OR_reg4                   ;if not equal got check reg 4
00007700  6700 0052              10107                                                  BEQ         ea_Dn_OR_reg3_out               ;if equal go to output
00007704                         10108                                                  
00007704  B4BC 00000800          10109  ea_Dn_OR_reg4                                   CMP.L       #match_OR_reg4,D2       ;check to see if reg equal 4
0000770A  6600 0006              10110                                                  BNE         ea_Dn_OR_reg5                   ;if not equal got check reg 5
0000770E  6700 004C              10111                                                  BEQ         ea_Dn_OR_reg4_out               ;if equal go to output
00007712                         10112  
00007712  B4BC 00000A00          10113  ea_Dn_OR_reg5                                   CMP.L       #match_OR_reg5,D2       ;check to see if reg equal 5
00007718  6600 0006              10114                                                  BNE         ea_Dn_OR_reg6                   ;if not equal got check reg 6
0000771C  6700 0046              10115                                                  BEQ         ea_Dn_OR_reg5_out               ;if equal go to output
00007720                         10116  
00007720  B4BC 00000C00          10117  ea_Dn_OR_reg6                                   CMP.L       #match_OR_reg6,D2       ;check to see if reg equal 6
00007726  6600 0006              10118                                                  BNE         ea_Dn_OR_reg7                   ;if not equal got check reg 7
0000772A  6700 0040              10119                                                  BEQ         ea_Dn_OR_reg6_out               ;if equal go to output          
0000772E                         10120  
0000772E  B4BC 00000E00          10121  ea_Dn_OR_reg7                                   CMP.L       #match_OR_reg7,D2       ;check to see if reg equal 7
00007734  6700 003E              10122                                                  BEQ         ea_Dn_OR_reg7_out               ;if equal go to output
00007738  6600 FA70              10123                                                  BNE         ERROR                         ;if not equal to an addresssing mode, pritn error
0000773C                         10124                                  
0000773C                         10125  
0000773C                         10126  ;--------------------Data Output-----------------------
0000773C  227C 00008494          10127  ea_Dn_OR_reg0_out                               MOVE.L          #ea_D0,A1                        ;load string constant into A1
00007742                         10128                                        
00007742  4E75                   10129                                                  RTS
00007744                         10130                                              
00007744  227C 00008497          10131  ea_Dn_OR_reg1_out                               MOVE.L          #ea_D1,A1                       ;load string constant into A1
0000774A                         10132                                        
0000774A  4E75                   10133                                                  RTS
0000774C                         10134                                              
0000774C  227C 0000849A          10135  ea_Dn_OR_reg2_out                               MOVE.L          #ea_D2,A1                       ;load string constant into A1
00007752                         10136                                        
00007752  4E75                   10137                                                  RTS
00007754                         10138                                              
00007754  227C 0000849D          10139  ea_Dn_OR_reg3_out                               MOVE.L          #ea_D3,A1                       ;load string constant into A1
0000775A                         10140                                        
0000775A  4E75                   10141                                                  RTS
0000775C                         10142                                              
0000775C  227C 000084A0          10143  ea_Dn_OR_reg4_out                               MOVE.L          #ea_D4,A1                       ;load string constant into A1
00007762                         10144                                        
00007762  4E75                   10145                                                  RTS
00007764                         10146                                              
00007764  227C 000084A3          10147  ea_Dn_OR_reg5_out                               MOVE.L          #ea_D5,A1                       ;load string constant into A1
0000776A                         10148                                        
0000776A  4E75                   10149                                                  RTS
0000776C                         10150                                              
0000776C  227C 000084A6          10151  ea_Dn_OR_reg6_out                               MOVE.L          #ea_D6,A1                       ;load string constant into A1
00007772                         10152                                        
00007772  4E75                   10153                                                  RTS
00007774                         10154                                              
00007774  227C 000084A9          10155  ea_Dn_OR_reg7_out                               MOVE.L          #ea_D7,A1                       ;load string constant into A1
0000777A                         10156                                        
0000777A  4E75                   10157                                                  RTS             
0000777C                         10158                                              
0000777C                         10159                      
0000777C                         10160  
0000777C                         10161  
0000777C                         10162  
0000777C                         10163  
0000777C                         10164  
0000777C                         10165  
0000777C                         10166  
0000777C                         10167  
0000777C                         10168  
0000777C                         10169  
0000777C                         10170  
0000777C                         10171  
0000777C                         10172  
0000777C                         10173  
0000777C                         10174  
0000777C                         10175  
0000777C                         10176  
0000777C                         10177  
0000777C                         10178  
0000777C                         10179  
0000777C                         10180  
0000777C                         10181  
0000777C                         10182  
0000777C                         10183  
0000777C                         10184  
0000777C                         10185  
0000777C                         10186  
0000777C                         10187  
0000777C                         10188  
0000777C                         10189  
0000777C                         10190                          
0000777C                         10191  ;------------------------------------------------------------------------------------------------------------------------------------------
0000777C                         10192  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
0000777C                         10193  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
0000777C  4282                   10194  OR_Dn_ea                                        CLR.L       D2                                ;clear D2 
0000777E  243C 00000E00          10195                                                  MOVE.L      #mask_OR_An_reg,D2            ;load the mask for the register into D2, masks bit 11-9
00007784                         10196                                                  
00007784  B4BC 00000000          10197  Dn_ea_OR_reg0                                   CMP.L       #match_OR_reg0,D2                   ;check to see if reg equal 0
0000778A  6600 0006              10198                                                  BNE         Dn_ea_OR_reg1                   ;if not equal got check reg 1
0000778E  6700 0064              10199                                                  BEQ         Dn_ea_OR_reg0_out               ;if equal go to output
00007792                         10200                                                  
00007792  B4BC 00000200          10201  Dn_ea_OR_reg1                                   CMP.L       #match_OR_reg1,D2                   ;check to see if reg equal 1
00007798  6600 0006              10202                                                  BNE         Dn_ea_OR_reg2                   ;if not equal got check reg 2
0000779C  6700 0062              10203                                                  BEQ         Dn_ea_OR_reg1_out               ;if equal go to output
000077A0                         10204  
000077A0  B4BC 00000400          10205  Dn_ea_OR_reg2                                   CMP.L       #match_OR_reg2,D2                   ;check to see if reg equal 2
000077A6  6600 0006              10206                                                  BNE         Dn_ea_OR_reg3                   ;if not equal got check reg 3
000077AA  6700 0060              10207                                                  BEQ         Dn_ea_OR_reg2_out               ;if equal go to output
000077AE                         10208  
000077AE  B4BC 00000600          10209  Dn_ea_OR_reg3                                   CMP.L       #match_OR_reg3,D2                   ;check to see if reg equal 3
000077B4  6600 0006              10210                                                  BNE         Dn_ea_OR_reg4                   ;if not equal got check reg 4
000077B8  6700 005E              10211                                                  BEQ         Dn_ea_OR_reg3_out               ;if equal go to output
000077BC                         10212                                                  
000077BC  B4BC 00000800          10213  Dn_ea_OR_reg4                                   CMP.L       #match_OR_reg4,D2                   ;check to see if reg equal 4
000077C2  6600 0006              10214                                                  BNE         Dn_ea_OR_reg5                   ;if not equal got check reg 5
000077C6  6700 005C              10215                                                  BEQ         Dn_ea_OR_reg4_out               ;if equal go to output
000077CA                         10216  
000077CA  B4BC 00000A00          10217  Dn_ea_OR_reg5                                   CMP.L       #match_OR_reg5,D2                   ;check to see if reg equal 5
000077D0  6600 0006              10218                                                  BNE         Dn_ea_OR_reg6                   ;if not equal got check reg 6
000077D4  6700 005A              10219                                                  BEQ         Dn_ea_OR_reg5_out               ;if equal go to output
000077D8                         10220  
000077D8  B4BC 00000C00          10221  Dn_ea_OR_reg6                                   CMP.L       #match_OR_reg6,D2                   ;check to see if reg equal 6
000077DE  6600 0006              10222                                                  BNE         Dn_ea_OR_reg7                   ;if not equal got check reg 7
000077E2  6700 0058              10223                                                  BEQ         Dn_ea_OR_reg6_out               ;if equal go to output          
000077E6                         10224  
000077E6  B4BC 00000E00          10225  Dn_ea_OR_reg7                                   CMP.L       #match_OR_reg7,D2                   ;check to see if reg equal 7
000077EC  6700 005A              10226                                                  BEQ         Dn_ea_OR_reg7_out               ;if equal go to output
000077F0  6600 F9B8              10227                                                  BNE         ERROR                                ;if not equal to an addresssing mode, pritn error
000077F4                         10228                                  
000077F4                         10229  
000077F4                         10230  ;--------------------Data Output-----------------------
000077F4  227C 00008494          10231  Dn_ea_OR_reg0_out             MOVE.L            #ea_D0,A1                                          ;load string constant into A1
000077FA  4EB9 00007854          10232                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007800                         10233                                              
00007800  227C 00008497          10234  Dn_ea_OR_reg1_out             MOVE.L            #ea_D1,A1                                       ;load string constant into A1
00007806  4EB9 00007854          10235                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
0000780C                         10236                                              
0000780C  227C 0000849A          10237  Dn_ea_OR_reg2_out             MOVE.L            #ea_D2,A1                                       ;load string constant into A1
00007812  4EB9 00007854          10238                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007818                         10239                                              
00007818  227C 0000849D          10240  Dn_ea_OR_reg3_out             MOVE.L            #ea_D3,A1                                           ;load string constant into A1
0000781E  4EB9 00007854          10241                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007824                         10242                                              
00007824  227C 000084A0          10243  Dn_ea_OR_reg4_out             MOVE.L            #ea_D4,A1                                           ;load string constant into A1
0000782A  4EB9 00007854          10244                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007830                         10245                                                  
00007830  227C 000084A3          10246  Dn_ea_OR_reg5_out             MOVE.L            #ea_D5,A1                                           ;load string constant into A1
00007836  4EB9 00007854          10247                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
0000783C                         10248                                              
0000783C  227C 000084A6          10249  Dn_ea_OR_reg6_out             MOVE.L            #ea_D6,A1                                           ;load string constant into A1
00007842  4EB9 00007854          10250                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007848                         10251                                              
00007848  227C 000084A9          10252  Dn_ea_OR_reg7_out             MOVE.L            #ea_D7,A1                                           ;load string constant into A1
0000784E  4EB9 00007854          10253                                JSR               OR_determine_second_operand                 ;jump to ORroutine to determine second operOR
00007854                         10254                                              
00007854                         10255  ;------------------------------------------------------Determine Second OperOR----------------------------------------------------------------
00007854  4241                   10256  OR_determine_second_operand      CLR               D1                                            ;clear D1 to load new mask                                
00007856  223C 00000038          10257                                   MOVE.L             #mask_OR_ea_mode,D1                        ;move the mask to D1
0000785C                         10258  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000785C  B2BC 00000010          10259  OR_Dn_ea_add_reg_indir           CMP.L             #match_OR_An_indir,D1                      ;check to see if mode is add reg indir
00007862  6600 0006              10260                                   BNE               OR_Dn_ea_add_reg_indir_pdec                          ;if not, go check add reg indir predec 
00007866  6700 0042              10261                                   BEQ               OR_Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
0000786A                         10262             
0000786A  B2BC 00000020          10263  OR_Dn_ea_add_reg_indir_pdec      CMP.L             #match_OR_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
00007870  6600 0006              10264                                   BNE               OR_Dn_ea_add_reg_indir_pinc                         ;if not go check add reg indir/predec
00007874  6700 019A              10265                                   BEQ               OR_Dn_ea_An_indir_predec                               ;if equal go figure out the register
00007878                         10266                        
00007878  B2BC 00000018          10267  OR_Dn_ea_add_reg_indir_pinc      CMP.L             #match_OR_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
0000787E  6600 0006              10268                                   BNE               OR_Dn_ea_abs_add_word                                  ;if not go check abs add word
00007882  6700 00DC              10269                                   BEQ               OR_Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
00007886                         10270  
00007886  243C 0000003F          10271  OR_Dn_ea_abs_add_word            MOVE.L             #mask_OR_abs_add,D2                        ;load mask to determine if abs add word or long
0000788C                         10272                                   
0000788C  B4BC 00000038          10273                                   CMP.L             #match_OR_abs_add_word,D2                  ;check if abs add word
00007892  2A18                   10274                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00007894  6600 0006              10275                                   BNE               OR_Dn_ea_abs_add_long                                  ;if not go check abs add long
00007898  6700 0226              10276                                   BEQ               OR_Dn_ea_abs_add_word_out                              ;if equal go to output
0000789C                         10277    
0000789C  B4BC 00000039          10278  OR_Dn_ea_abs_add_long            CMP.L             #match_OR_abs_add_long,D2                  ;check to see if abs add long
000078A2  6700 0226              10279                                   BEQ               OR_Dn_ea_abs_add_long_out                              ;if equal go to output
000078A6  6600 F902              10280                                   BNE               ERROR                                         ;if not equal go to error mesage OR routine
000078AA                         10281  
000078AA                         10282  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000078AA                         10283                                   
000078AA                         10284                                   
000078AA                         10285  ;------------------Address Register Indirect-----------------------
000078AA  243C 0000003F          10286  OR_Dn_ea_An_indir_reg            MOVE.L          #mask_OR_ea_reg_OR_mode,D2         ;load the mask into D2 for the mode OR the register
000078B0  B4BC 00000010          10287                                   CMP.L           #match_OR_An_indir_r0,D2              ;check reg is equal to 0
000078B6  6600 0006              10288                                   BNE             OR_Dn_ea_An_indir_reg1                           ;if not try reg 1
000078BA  6700 0064              10289                                   BEQ             OR_Dn_ea_An_indir_reg0_out                       ;if equal go to output ORroutine
000078BE                         10290  
000078BE  B4BC 00000011          10291  OR_Dn_ea_An_indir_reg1           CMP.L           #match_OR_An_indir_r1,D2              ;check reg is equal to 1
000078C4  6600 0006              10292                                   BNE             OR_Dn_ea_An_indir_reg2                           ;if not try reg 2
000078C8  6700 005E              10293                                   BEQ             OR_Dn_ea_An_indir_reg1_out                       ;if equal go to output ORroutine
000078CC                         10294  
000078CC  B4BC 00000012          10295  OR_Dn_ea_An_indir_reg2           CMP.L           #match_OR_An_indir_r2,D2              ;check reg is equal to 2
000078D2  6600 0006              10296                                   BNE             OR_Dn_ea_An_indir_reg3                           ;if not try reg 3
000078D6  6700 0058              10297                                   BEQ             OR_Dn_ea_An_indir_reg2_out                       ;if equal go to output ORroutine
000078DA                         10298  
000078DA  B4BC 00000013          10299  OR_Dn_ea_An_indir_reg3           CMP.L           #match_OR_An_indir_r3,D2              ;check reg is equal to 3
000078E0  6600 0006              10300                                   BNE             OR_Dn_ea_An_indir_reg4                           ;if not try reg 4
000078E4  6700 0052              10301                                   BEQ             OR_Dn_ea_An_indir_reg3_out                       ;if equal go to output ORroutine
000078E8                         10302      
000078E8  B4BC 00000014          10303  OR_Dn_ea_An_indir_reg4           CMP.L           #match_OR_An_indir_r4,D2              ;check reg is equal to 4
000078EE  6600 0006              10304                                   BNE             OR_Dn_ea_An_indir_reg5                           ;if not try reg 5
000078F2  6700 004C              10305                                   BEQ             OR_Dn_ea_An_indir_reg4_out                       ;if equal go to output ORroutine
000078F6                         10306          
000078F6  B4BC 00000015          10307  OR_Dn_ea_An_indir_reg5           CMP.L           #match_OR_An_indir_r5,D2              ;check reg is equal to 5
000078FC  6600 0006              10308                                   BNE             OR_Dn_ea_An_indir_reg6                           ;if not try reg 6
00007900  6700 0046              10309                                   BEQ             OR_Dn_ea_An_indir_reg5_out                       ;if equal go to output ORroutine
00007904                         10310  
00007904  B4BC 00000016          10311  OR_Dn_ea_An_indir_reg6           CMP.L           #match_OR_An_indir_r6,D2              ;check reg is equal to 6
0000790A  6600 0006              10312                                   BNE             OR_Dn_ea_An_indir_reg7                           ;if not try reg 7
0000790E  6700 0040              10313                                   BEQ             OR_Dn_ea_An_indir_reg6_out                       ;if equal go to output ORroutine
00007912                         10314  
00007912  B4BC 00000017          10315  OR_Dn_ea_An_indir_reg7           CMP.L           #match_OR_An_indir_r7,D2              ;check reg is equal to 7
00007918  6700 003E              10316                                   BEQ             OR_Dn_ea_An_indir_reg7_out                       ;if equal go to output ORroutine
0000791C  6600 F88C              10317                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00007920                         10318  
00007920                         10319  ;--------------------Address Register Indirect Output-----------------------
00007920  227C 000084D4          10320  OR_Dn_ea_An_indir_reg0_out          MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00007926                         10321                                        
00007926  4E75                   10322                                       RTS
00007928                         10323  
00007928  227C 000084D9          10324  OR_Dn_ea_An_indir_reg1_out          MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
0000792E                         10325                                        
0000792E  4E75                   10326                                       RTS
00007930                         10327  
00007930  227C 000084DE          10328  OR_Dn_ea_An_indir_reg2_out          MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00007936                         10329                                        
00007936  4E75                   10330                                       RTS
00007938                         10331  
00007938  227C 000084E3          10332  OR_Dn_ea_An_indir_reg3_out          MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
0000793E                         10333                                        
0000793E  4E75                   10334                                       RTS
00007940                         10335  
00007940  227C 000084E8          10336  OR_Dn_ea_An_indir_reg4_out          MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00007946                         10337                                        
00007946  4E75                   10338                                       RTS
00007948                         10339  
00007948  227C 000084ED          10340  OR_Dn_ea_An_indir_reg5_out          MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
0000794E                         10341                                        
0000794E  4E75                   10342                                       RTS
00007950                         10343  
00007950  227C 000084F2          10344  OR_Dn_ea_An_indir_reg6_out          MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00007956                         10345                                        
00007956  4E75                   10346                                       RTS
00007958                         10347                                          
00007958  227C 000084F7          10348  OR_Dn_ea_An_indir_reg7_out          MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
0000795E                         10349                                        
0000795E  4E75                   10350                                      RTS
00007960                         10351  
00007960                         10352  ;------------------Address Register Indirect with Post Increment-----------------------
00007960  B4BC 00000018          10353  OR_Dn_ea_An_indir_postinc_reg               CMP.L      #match_OR_An_indir_postinc_r0,D2                 ;check reg is equal to 0
00007966  6600 0006              10354                                              BNE        OR_Dn_ea_An_indir_pinc_r1                      ;if not try reg 1
0000796A  6700 0064              10355                                              BEQ        OR_Dn_ea_An_indir_pinc_r0_out                  ;if equal go to output ORroutine
0000796E                         10356  
0000796E  B4BC 00000019          10357  OR_Dn_ea_An_indir_pinc_r1                   CMP.L      #match_OR_An_indir_postinc_r1,D2                 ;check reg is equal to 1
00007974  6600 0006              10358                                              BNE        OR_Dn_ea_An_indir_pinc_r2                      ;if not try reg 2
00007978  6700 005E              10359                                              BEQ        OR_Dn_ea_An_indir_pinc_r1_out                  ;if equal go to output ORroutine
0000797C                         10360  
0000797C  B4BC 0000001A          10361  OR_Dn_ea_An_indir_pinc_r2                   CMP.L      #match_OR_An_indir_postinc_r2,D2                ;check reg is equal to 2
00007982  6600 0006              10362                                              BNE        OR_Dn_ea_An_indir_pinc_r3                      ;if not try reg 3
00007986  6700 0058              10363                                              BEQ        OR_Dn_ea_An_indir_pinc_r2_out                  ;if equal go to output ORroutine
0000798A                         10364  
0000798A  B4BC 0000001B          10365  OR_Dn_ea_An_indir_pinc_r3                   CMP.L      #match_OR_An_indir_postinc_r3,D2               ;check reg is equal to 3
00007990  6600 0006              10366                                              BNE        OR_Dn_ea_An_indir_pinc_r4                      ;if not try reg 4
00007994  6700 0052              10367                                              BEQ        OR_Dn_ea_An_indir_pinc_r3_out                  ;if equal go to output ORroutine
00007998                         10368   
00007998  B4BC 0000001C          10369  OR_Dn_ea_An_indir_pinc_r4                   CMP.L      #match_OR_An_indir_postinc_r4,D2               ;check reg is equal to 4
0000799E  6600 0006              10370                                              BNE        OR_Dn_ea_An_indir_pinc_r5                      ;if not try reg 5
000079A2  6700 004C              10371                                              BEQ        OR_Dn_ea_An_indir_pinc_r4_out                  ;if equal go to output ORroutine
000079A6                         10372  
000079A6  B4BC 0000001D          10373  OR_Dn_ea_An_indir_pinc_r5                   CMP.L      #match_OR_An_indir_postinc_r5,D2                 ;check reg is equal to 5
000079AC  6600 0006              10374                                              BNE        OR_Dn_ea_An_indir_pinc_r6                      ;if not try reg 6
000079B0  6700 0046              10375                                              BEQ        OR_Dn_ea_An_indir_pinc_r5_out                  ;if equal go to output ORroutine
000079B4                         10376  
000079B4  B4BC 0000001E          10377  OR_Dn_ea_An_indir_pinc_r6                   CMP.L      #match_OR_An_indir_postinc_r6,D2                 ;check reg is equal to 6
000079BA  6600 0006              10378                                              BNE        OR_Dn_ea_An_indir_pinc_r7                        ;if not try reg 7
000079BE  6700 0040              10379                                              BEQ        OR_Dn_ea_An_indir_pinc_r6_out                    ;if equal go to output ORroutine
000079C2                         10380  
000079C2  B4BC 0000001F          10381  OR_Dn_ea_An_indir_pinc_r7                   CMP.L      #match_OR_An_indir_postinc_r7,D2                 ;check reg is equal to 7
000079C8  6700 003E              10382                                              BEQ        OR_Dn_ea_An_indir_pinc_r7_out                    ;if equal go to output ORroutine
000079CC  6600 F7DC              10383                                              BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
000079D0                         10384  
000079D0                         10385  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000079D0  227C 000084FC          10386  OR_Dn_ea_An_indir_pinc_r0_out           MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
000079D6                         10387                                        
000079D6  4E75                   10388                                          RTS
000079D8                         10389  
000079D8  227C 00008502          10390  OR_Dn_ea_An_indir_pinc_r1_out           MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
000079DE                         10391                                        
000079DE  4E75                   10392                                          RTS
000079E0                         10393  
000079E0  227C 00008508          10394  OR_Dn_ea_An_indir_pinc_r2_out           MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
000079E6                         10395                                        
000079E6  4E75                   10396                                          RTS
000079E8                         10397  
000079E8  227C 0000850E          10398  OR_Dn_ea_An_indir_pinc_r3_out           MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
000079EE                         10399                                        
000079EE  4E75                   10400                                          RTS
000079F0                         10401  
000079F0  227C 00008514          10402  OR_Dn_ea_An_indir_pinc_r4_out           MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
000079F6                         10403                                        
000079F6  4E75                   10404                                          RTS
000079F8                         10405  
000079F8  227C 0000851A          10406  OR_Dn_ea_An_indir_pinc_r5_out           MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
000079FE                         10407                                        
000079FE  4E75                   10408                                          RTS
00007A00                         10409  
00007A00  227C 00008520          10410  OR_Dn_ea_An_indir_pinc_r6_out           MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00007A06                         10411                                        
00007A06  4E75                   10412                                          RTS
00007A08                         10413  
00007A08  227C 00008526          10414  OR_Dn_ea_An_indir_pinc_r7_out           MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00007A0E                         10415                                        
00007A0E  4E75                   10416                                          RTS
00007A10                         10417  
00007A10                         10418  ;------------------Address Register Indirect with Pre Decrement-----------------------
00007A10  B4BC 00000020          10419  OR_Dn_ea_An_indir_predec                    CMP.L      #match_OR_An_indir_predec_reg0,D2       ;check reg is equal to 0
00007A16  6600 0006              10420                                              BNE        OR_Dn_ea_An_indir_pdec_r1                      ;if not try reg 1
00007A1A  6700 0064              10421                                              BEQ        OR_Dn_ea_An_indir_pdec_r0_out               ;if equal go to output ORroutine
00007A1E                         10422  
00007A1E  B4BC 00000021          10423  OR_Dn_ea_An_indir_pdec_r1                   CMP.L      #match_OR_An_indir_predec_reg1,D2       ;check reg is equal to 1
00007A24  6600 0006              10424                                              BNE        OR_Dn_ea_An_indir_pdec_r2                      ;if not try reg 2
00007A28  6700 005E              10425                                              BEQ        OR_Dn_ea_An_indir_pdec_r1_out               ;if equal go to output ORroutine
00007A2C                         10426  
00007A2C  B4BC 00000022          10427  OR_Dn_ea_An_indir_pdec_r2                   CMP.L      #match_OR_An_indir_predec_reg2,D2       ;check reg is equal to 2
00007A32  6600 0006              10428                                              BNE        OR_Dn_ea_An_indir_pdec_r3                      ;if not try reg 3
00007A36  6700 0058              10429                                              BEQ        OR_Dn_ea_An_indir_pdec_r2_out               ;if equal go to output ORroutine
00007A3A                         10430  
00007A3A  B4BC 00000023          10431  OR_Dn_ea_An_indir_pdec_r3                   CMP.L      #match_OR_An_indir_predec_reg3,D2       ;check reg is equal to 3
00007A40  6600 0006              10432                                              BNE        OR_Dn_ea_An_indir_pdec_r4                      ;if not try reg 4
00007A44  6700 0052              10433                                              BEQ        OR_Dn_ea_An_indir_pdec_r3_out               ;if equal go to output ORroutine
00007A48                         10434  
00007A48  B4BC 00000024          10435  OR_Dn_ea_An_indir_pdec_r4                   CMP.L      #match_OR_An_indir_predec_reg4,D2       ;check reg is equal to 4
00007A4E  6600 0006              10436                                              BNE        OR_Dn_ea_An_indir_pdec_r5                      ;if not try reg 5
00007A52  6700 004C              10437                                              BEQ        OR_Dn_ea_An_indir_pdec_r4_out               ;if equal go to output ORroutine
00007A56                         10438  
00007A56  B4BC 00000025          10439  OR_Dn_ea_An_indir_pdec_r5                   CMP.L      #match_OR_An_indir_predec_reg5,D2       ;check reg is equal to 5
00007A5C  6600 0006              10440                                              BNE        OR_Dn_ea_An_indir_pdec_r6                     ;if not try reg 6
00007A60  6700 0046              10441                                              BEQ        OR_Dn_ea_An_indir_pdec_r5_out               ;if equal go to output ORroutine
00007A64                         10442  
00007A64  B4BC 00000026          10443  OR_Dn_ea_An_indir_pdec_r6                   CMP.L      #match_OR_An_indir_predec_reg6,D2       ;check reg is equal to 6
00007A6A  6600 0006              10444                                              BNE        OR_Dn_ea_An_indir_pdec_r7                     ;if not try reg 7
00007A6E  6700 0040              10445                                              BEQ        OR_Dn_ea_An_indir_pdec_r6_out               ;if equal go to output ORroutine
00007A72                         10446  
00007A72  B4BC 00000027          10447  OR_Dn_ea_An_indir_pdec_r7                   CMP.L      #match_OR_An_indir_predec_reg7,D2       ;check reg is equal to 7
00007A78  6700 003E              10448                                              BEQ        OR_Dn_ea_An_indir_pdec_r7_out               ;if equal go to output ORroutine
00007A7C  6600 F72C              10449                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
00007A80                         10450  
00007A80                         10451  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00007A80  227C 0000852C          10452  OR_Dn_ea_An_indir_pdec_r0_out                  MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00007A86                         10453                                        
00007A86  4E75                   10454                                                 RTS
00007A88                         10455                                              
00007A88  227C 00008532          10456  OR_Dn_ea_An_indir_pdec_r1_out                  MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00007A8E                         10457                                        
00007A8E  4E75                   10458                                                 RTS
00007A90                         10459  
00007A90  227C 00008538          10460  OR_Dn_ea_An_indir_pdec_r2_out                  MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00007A96                         10461                                        
00007A96  4E75                   10462                                                 RTS
00007A98                         10463  
00007A98  227C 0000853E          10464  OR_Dn_ea_An_indir_pdec_r3_out                  MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00007A9E                         10465                                        
00007A9E  4E75                   10466                                                 RTS
00007AA0                         10467  
00007AA0  227C 00008544          10468  OR_Dn_ea_An_indir_pdec_r4_out                  MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00007AA6                         10469                                        
00007AA6  4E75                   10470                                                 RTS
00007AA8                         10471  
00007AA8  227C 0000854A          10472  OR_Dn_ea_An_indir_pdec_r5_out                  MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00007AAE                         10473                                        
00007AAE  4E75                   10474                                                 RTS
00007AB0                         10475  
00007AB0  227C 00008550          10476  OR_Dn_ea_An_indir_pdec_r6_out                  MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00007AB6                         10477                                        
00007AB6  4E75                   10478                                                 RTS
00007AB8                         10479  
00007AB8  227C 00008556          10480  OR_Dn_ea_An_indir_pdec_r7_out                  MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00007ABE                         10481                                        
00007ABE  4E75                   10482                                                 RTS
00007AC0                         10483                                              
00007AC0                         10484  ;------------------Absolute Addressing Output-----------------------
00007AC0  22FC 00008566          10485  OR_Dn_ea_abs_add_word_out             MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
00007AC6  22C5                   10486                                        MOVE.L      D5,(A1)+                           ;load address                  
00007AC8                         10487                                        
00007AC8  4E75                   10488                                        RTS                                            :return to ORroutine
00007ACA                         10489                                             
00007ACA                         10490  
00007ACA  2A18                   10491  OR_Dn_ea_abs_add_long_out             MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00007ACC  22FC 00008566          10492                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex OR increment A1
00007AD2  22C5                   10493                                        MOVE.L      D5,(A1)+                           ;load address                  
00007AD4                         10494                                        
00007AD4  4E75                   10495                                        RTS                                            :return to ORroutine                                                                             
00007AD6                         10496  
00007AD6                         10497  
00007AD6  =000001C0              10498  mask_OR_opmode                          EQU         $01C0                   ;mask for the opmode to determine operOR order
00007AD6                         10499  
00007AD6  =00000038              10500  mask_OR_ea_mode                 EQU         $0038
00007AD6  =0000003F              10501  mask_OR_abs_add                 EQU         $003F
00007AD6  =0000003F              10502  mask_OR_ea_reg_OR_mode          EQU         $003F
00007AD6  =00000E00              10503  mask_OR_An_reg                  EQU         $0E00
00007AD6                         10504  
00007AD6                         10505  
00007AD6  =00000100              10506  match_OR_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
00007AD6  =00000140              10507  match_OR_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
00007AD6  =00000180              10508  match_OR_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
00007AD6                         10509  
00007AD6  =00000000              10510  match_OR_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
00007AD6  =00000040              10511  match_OR_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
00007AD6  =00000080              10512  match_OR_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
00007AD6                         10513  
00007AD6                         10514  
00007AD6                         10515  
00007AD6  =00000000              10516  match_OR_Dn                     EQU         $0000
00007AD6  =00000010              10517  match_OR_An_indir                   EQU         $0010
00007AD6  =00000020              10518  match_OR_An_indir_predec            EQU         $0020
00007AD6  =00000018              10519  match_OR_An_indir_postinc           EQU         $0018
00007AD6  =00000038              10520  match_OR_abs_add_word               EQU         $0038
00007AD6  =00000039              10521  match_OR_abs_add_long               EQU         $0039
00007AD6                         10522  
00007AD6  =00000000              10523  match_OR_D0                         EQU         $0000
00007AD6  =00000001              10524  match_OR_D1                         EQU         $0001
00007AD6  =00000002              10525  match_OR_D2                         EQU         $0002
00007AD6  =00000003              10526  match_OR_D3                         EQU         $0003
00007AD6  =00000004              10527  match_OR_D4                         EQU         $0004
00007AD6  =00000005              10528  match_OR_D5                         EQU         $0005
00007AD6  =00000006              10529  match_OR_D6                         EQU         $0006
00007AD6  =00000007              10530  match_OR_D7                         EQU         $0007
00007AD6                         10531  
00007AD6  =00000008              10532  match_OR_A0                         EQU         $0008
00007AD6  =00000009              10533  match_OR_A1                         EQU         $0009
00007AD6  =0000000A              10534  match_OR_A2                         EQU         $000A
00007AD6  =0000000B              10535  match_OR_A3                         EQU         $000B
00007AD6  =0000000C              10536  match_OR_A4                         EQU         $000C
00007AD6  =0000000D              10537  match_OR_A5                         EQU         $000D
00007AD6  =0000000E              10538  match_OR_A6                         EQU         $000E
00007AD6  =0000000F              10539  match_OR_A7                         EQU         $000F
00007AD6                         10540  
00007AD6  =00000010              10541  match_OR_An_indir_r0                    EQU         $0010
00007AD6  =00000011              10542  match_OR_An_indir_r1                    EQU         $0011
00007AD6  =00000012              10543  match_OR_An_indir_r2                    EQU         $0012
00007AD6  =00000013              10544  match_OR_An_indir_r3                    EQU         $0013
00007AD6  =00000014              10545  match_OR_An_indir_r4                    EQU         $0014
00007AD6  =00000015              10546  match_OR_An_indir_r5                    EQU         $0015
00007AD6  =00000016              10547  match_OR_An_indir_r6                    EQU         $0016
00007AD6  =00000017              10548  match_OR_An_indir_r7                    EQU         $0017
00007AD6                         10549  
00007AD6  =00000018              10550  match_OR_An_indir_postinc_r0        EQU         $0018
00007AD6  =00000019              10551  match_OR_An_indir_postinc_r1        EQU         $0019
00007AD6  =0000001A              10552  match_OR_An_indir_postinc_r2        EQU         $001A
00007AD6  =0000001B              10553  match_OR_An_indir_postinc_r3        EQU         $001B
00007AD6  =0000001C              10554  match_OR_An_indir_postinc_r4        EQU         $001C
00007AD6  =0000001D              10555  match_OR_An_indir_postinc_r5        EQU         $001D
00007AD6  =0000001E              10556  match_OR_An_indir_postinc_r6        EQU         $001E
00007AD6  =0000001F              10557  match_OR_An_indir_postinc_r7        EQU         $001F
00007AD6                         10558  
00007AD6  =00000020              10559  match_OR_An_indir_predec_reg0           EQU         $0020
00007AD6  =00000021              10560  match_OR_An_indir_predec_reg1           EQU         $0021
00007AD6  =00000022              10561  match_OR_An_indir_predec_reg2           EQU         $0022
00007AD6  =00000023              10562  match_OR_An_indir_predec_reg3           EQU         $0023
00007AD6  =00000024              10563  match_OR_An_indir_predec_reg4           EQU         $0024
00007AD6  =00000025              10564  match_OR_An_indir_predec_reg5           EQU         $0025
00007AD6  =00000026              10565  match_OR_An_indir_predec_reg6           EQU         $0026
00007AD6  =00000027              10566  match_OR_An_indir_predec_reg7           EQU         $0027
00007AD6                         10567  
00007AD6  =0000003C              10568  match_OR_imm_add                           EQU         $003C
00007AD6  =000000FC              10569  match_OR_imm_add_word                      EQU         $00FC
00007AD6  =000001FC              10570  match_OR_imm_add_long                      EQU         $01FC
00007AD6                         10571  
00007AD6  =00000000              10572  match_OR_reg0                           EQU         $0000
00007AD6  =00000200              10573  match_OR_reg1                           EQU         $0200
00007AD6  =00000400              10574  match_OR_reg2                           EQU         $0400
00007AD6  =00000600              10575  match_OR_reg3                           EQU         $0600
00007AD6  =00000800              10576  match_OR_reg4                           EQU         $0800
00007AD6  =00000A00              10577  match_OR_reg5                           EQU         $0A00
00007AD6  =00000C00              10578  match_OR_reg6                           EQU         $0C00
00007AD6  =00000E00              10579  match_OR_reg7                           EQU         $0E00
00007AD6                         10580  
00007AD6                         10581  
00007AD6                         10582  
00007AD6                         10583  
00007AD6                         10584  
00007AD6                         10585  -------------------- end include --------------------
00007AD6                         10586              INCLUDE 'ROD Subroutine.x68'
00007AD6                         10587  
00007AD6                         10588  
00007AD6                         10589  ROD_sub                                             ;preserve the registers,\ 
00007AD6                         10590                                   
00007AD6                         10591  ;------------------------Determine Shift Type-----------------------------------------------------------------
00007AD6  C2BC 000000C0          10592  ROD_shift_type                   AND.L              #mask_ROD_shift_type,D1                 ;load mask into D1
00007ADC  B2BC 000000C0          10593                                   CMP.L              #match_ROD_mem_shift,D1                 ;check to see if memory shift
00007AE2  6700 0006              10594                                   BEQ                ROD_mem_shift                               ;if equal go to mem shift subroutine
00007AE6  6600 0286              10595                                   BNE                ROD_reg_shift                               ;if ROD mem shift, go to reg shift
00007AEA                         10596  
00007AEA                         10597  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
00007AEA  4241                   10598  ROD_mem_shift                    CLR               D1                                        ;clear shift mask
00007AEC  C2BC 00000038          10599                                   AND.L             #mask_ROD_ea_mode,D1                      ;move the mask to D1
00007AF2                         10600  
00007AF2  B2BC 00000010          10601  ROD_An_indir                     CMP.L             #match_ROD_An_indir,D1                    ;check to see if mode is add reg indir
00007AF8  6600 0014              10602                                   BNE               ROD_An_indir_predec                           ;if ROD, go check add reg indir predec 
00007AFC  6700 0042              10603                                   BEQ               ROD_An_indir_reg                              ;if equal go figure out the register           
00007B00                         10604            
00007B00  B2BC 00000020          10605  ROD_An_indir_postinc             CMP.L             #match_ROD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
00007B06  6600 0006              10606                                   BNE               ROD_An_indir_predec                           ;if ROD go check add reg indir/predec
00007B0A  6700 00EC              10607                                   BEQ               ROD_An_indir_postinc_reg                      ;if equal go figure out the register
00007B0E                         10608                        
00007B0E  B2BC 00000018          10609  ROD_An_indir_predec              CMP.L             #match_ROD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
00007B14  6600 0006              10610                                   BNE               ROD_abs_add_word                              ;if ROD go check abs add word
00007B18  6700 018E              10611                                   BEQ               ROD_An_indir_predec_reg                       ;if equal go figure out the register
00007B1C                         10612  
00007B1C  C4BC 0000003F          10613  ROD_abs_add_word                 AND.L             #mask_ROD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
00007B22                         10614                                   
00007B22  B4BC 00000039          10615                                   CMP.L             #match_ROD_abs_add_word,D2                ;check if abs add word
00007B28  2A18                   10616                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
00007B2A  6600 0006              10617                                   BNE               ROD_abs_add_long                              ;if ROD go check abs add long
00007B2E  6700 0228              10618                                   BEQ               ROD_abs_add_word_out                          ;if equal go to output
00007B32                         10619    
00007B32  B4BC 0000003C          10620  ROD_abs_add_long                 CMP.L             #match_ROD_abs_add_long,D2                ;check to see if abs add long
00007B38  6700 0228              10621                                   BEQ               ROD_abs_add_long_out                          ;if equal go to output
00007B3C  6600 F66C              10622                                   BNE               ERROR                                     ;if ROD equal to an addresssing mode, pritn error
00007B40                         10623                               
00007B40                         10624  
00007B40                         10625  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00007B40                         10626  ;------------------Address Register Indirect-----------------------
00007B40  4242                   10627  ROD_An_indir_reg                            CLR             D2                                      ;make sure D2 is empty
00007B42  C4BC 0000003F          10628                                              AND.L           #mask_ROD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00007B48                         10629  
00007B48  B4BC 00000010          10630                                              CMP.L           #match_ROD_An_indir_r0,D2              ;check reg is equal to 0
00007B4E  6600 0006              10631                                              BNE             ROD_An_indir_reg1                            ;if ROD try reg 1
00007B52  6700 0064              10632                                              BEQ             ROD_An_indir_reg0_out                     ;if equal go to output subroutine
00007B56                         10633  
00007B56  B4BC 00000011          10634  ROD_An_indir_reg1                           CMP.L           #match_ROD_An_indir_r1,D2              ;check reg is equal to 1
00007B5C  6600 0006              10635                                              BNE             ROD_An_indir_reg2                            ;if ROD try reg 2
00007B60  6700 005E              10636                                              BEQ             ROD_An_indir_reg1_out                     ;if equal go to output subroutine
00007B64                         10637  
00007B64  B4BC 00000012          10638  ROD_An_indir_reg2                           CMP.L           #match_ROD_An_indir_r2,D2              ;check reg is equal to 2
00007B6A  6600 0006              10639                                              BNE             ROD_An_indir_reg3                            ;if ROD try reg 3
00007B6E  6700 0058              10640                                              BEQ             ROD_An_indir_reg2_out                     ;if equal go to output subroutine
00007B72                         10641  
00007B72  B4BC 00000013          10642  ROD_An_indir_reg3                           CMP.L           #match_ROD_An_indir_r3,D2              ;check reg is equal to 3
00007B78  6600 0006              10643                                              BNE             ROD_An_indir_reg4                            ;if ROD try reg 4
00007B7C  6700 0052              10644                                              BEQ             ROD_An_indir_reg3_out                     ;if equal go to output subroutine
00007B80                         10645  
00007B80  B4BC 00000014          10646  ROD_An_indir_reg4                           CMP.L           #match_ROD_An_indir_r4,D2              ;check reg is equal to 4
00007B86  6600 0006              10647                                              BNE             ROD_An_indir_reg5                            ;if ROD try reg 5
00007B8A  6700 004C              10648                                              BEQ             ROD_An_indir_reg4_out                    ;if equal go to output subroutine
00007B8E                         10649  
00007B8E  B4BC 00000015          10650  ROD_An_indir_reg5                           CMP.L           #match_ROD_An_indir_r5,D2              ;check reg is equal to 5
00007B94  6600 0006              10651                                              BNE             ROD_An_indir_reg6                            ;if ROD try reg 6
00007B98  6700 0046              10652                                              BEQ             ROD_An_indir_reg5_out                     ;if equal go to output subroutine
00007B9C                         10653  
00007B9C  B4BC 00000016          10654  ROD_An_indir_reg6                           CMP.L           #match_ROD_An_indir_r6,D2              ;check reg is equal to 6
00007BA2  6700 0044              10655                                              BEQ             ROD_An_indir_reg6_out                     ;if equal go to output subroutine
00007BA6  6600 0002              10656                                              BNE             ROD_An_indir_reg7
00007BAA                         10657                                              
00007BAA  B4BC 00000016          10658  ROD_An_indir_reg7                           CMP.L           #match_ROD_An_indir_r6,D2              ;check reg is equal to 6
00007BB0  6700 003E              10659                                              BEQ             ROD_An_indir_reg7_out                     ;if equal go to output subroutine
00007BB4  6600 F5F4              10660                                              BNE             ERROR                                        :if ROD equal to an addresssing mode, pritn error
00007BB8                         10661  
00007BB8                         10662  ;--------------------Address Register Indirect Output-----------------------
00007BB8  227C 000084D4          10663  ROD_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
00007BBE  4E75                   10664                                          RTS                                                         ;return to subroutine
00007BC0                         10665                                      
00007BC0  227C 000084D9          10666  ROD_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
00007BC6  4E75                   10667                                          RTS                                                         ;return to subroutine
00007BC8                         10668                                              
00007BC8  227C 000084DE          10669  ROD_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
00007BCE  4E75                   10670                                          RTS                                                     ;return to subroutine
00007BD0                         10671  
00007BD0  227C 000084E3          10672  ROD_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
00007BD6  4E75                   10673                                          RTS                                                     ;return to subroutine
00007BD8                         10674                                              
00007BD8  227C 000084E8          10675  ROD_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
00007BDE  4E75                   10676                                          RTS                                                         ;return to subroutine
00007BE0                         10677                                          
00007BE0  227C 000084ED          10678  ROD_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
00007BE6  4E75                   10679                                          RTS                                                     ;return to subroutine
00007BE8                         10680  
00007BE8  227C 000084F2          10681  ROD_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
00007BEE  4E75                   10682                                          RTS                                                         ;return to subroutine
00007BF0                         10683  
00007BF0  227C 000084F7          10684  ROD_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
00007BF6  4E75                   10685                                          RTS                                                         ;return to subroutine
00007BF8                         10686  
00007BF8                         10687  ;------------------Address Register Indirect with Post Increment-----------------------
00007BF8  B4BC 00000020          10688  ROD_An_indir_postinc_reg                    CMP.L      #match_ROD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00007BFE                         10689  
00007BFE  6600 0006              10690                                              BNE        ROD_An_indir_pinc_r1                      ;if ROD try reg 1
00007C02  6700 0064              10691                                              BEQ        ROD_An_indir_pinc_r0_out               ;if equal go to output subroutine
00007C06                         10692  
00007C06  B4BC 00000021          10693  ROD_An_indir_pinc_r1                        CMP.L      #match_ROD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00007C0C  6600 0006              10694                                              BNE        ROD_An_indir_pinc_r2                      ;if ROD try reg 2
00007C10  6700 005E              10695                                              BEQ        ROD_An_indir_pinc_r1_out               ;if equal go to output subroutine
00007C14                         10696  
00007C14  B4BC 00000022          10697  ROD_An_indir_pinc_r2                        CMP.L      #match_ROD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00007C1A  6600 0006              10698                                              BNE        ROD_An_indir_pinc_r3                      ;if ROD try reg 3
00007C1E  6700 0058              10699                                              BEQ        ROD_An_indir_pinc_r2_out               ;if equal go to output subroutine
00007C22                         10700      
00007C22  B4BC 00000023          10701  ROD_An_indir_pinc_r3                        CMP.L      #match_ROD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00007C28  6600 0006              10702                                              BNE        ROD_An_indir_pinc_r4                      ;if ROD try reg 4
00007C2C  6700 0052              10703                                              BEQ        ROD_An_indir_pinc_r3_out               ;if equal go to output subroutine
00007C30                         10704   
00007C30  B4BC 00000024          10705  ROD_An_indir_pinc_r4                        CMP.L      #match_ROD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00007C36  6600 0006              10706                                              BNE        ROD_An_indir_pinc_r5                      ;if ROD try reg 5
00007C3A  6700 004C              10707                                              BEQ        ROD_An_indir_pinc_r4_out               ;if equal go to output subroutine
00007C3E                         10708  
00007C3E  B4BC 00000025          10709  ROD_An_indir_pinc_r5                        CMP.L      #match_ROD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00007C44  6600 0006              10710                                              BNE        ROD_An_indir_pinc_r6                      ;if ROD try reg 6
00007C48  6700 0046              10711                                              BEQ        ROD_An_indir_pinc_r5_out               ;if equal go to output subroutine
00007C4C                         10712  
00007C4C  B4BC 00000026          10713  ROD_An_indir_pinc_r6                        CMP.L      #match_ROD_An_indir_postinc_r6,D2        ;check reg is equal to 6
00007C52  6700 0044              10714                                              BEQ        ROD_An_indir_pinc_r6_out              ;if equal go to output subroutine
00007C56  6600 0002              10715                                              BNE        ROD_An_indir_pinc_r7
00007C5A                         10716  
00007C5A  B4BC 00000026          10717  ROD_An_indir_pinc_r7                        CMP.L      #match_ROD_An_indir_postinc_r6,D2        ;check reg is equal to 6
00007C60  6700 003E              10718                                              BEQ        ROD_An_indir_pinc_r7_out              ;if equal go to output subroutine
00007C64  6600 F544              10719                                              BNE        ERROR                                        :if ROD equal to an addresssing mode, pritn error
00007C68                         10720  
00007C68                         10721  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00007C68  227C 00008502          10722  ROD_An_indir_pinc_r0_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
00007C6E  4E75                   10723                                              RTS                                             ;return to subroutine
00007C70                         10724  
00007C70  227C 00008502          10725  ROD_An_indir_pinc_r1_out                    MOVE.L          #ea_indir_postinc_A1,A1                         ;load string constant into A1
00007C76  4E75                   10726                                              RTS                                             ;return to subroutine
00007C78                         10727  
00007C78  227C 00008508          10728  ROD_An_indir_pinc_r2_out                    MOVE.L          #ea_indir_postinc_A2,A1                         ;load string constant into A1
00007C7E  4E75                   10729                                              RTS                                             ;return to subroutine
00007C80                         10730  
00007C80  227C 0000850E          10731  ROD_An_indir_pinc_r3_out                    MOVE.L          #ea_indir_postinc_A3,A1                         ;load string constant into A1
00007C86  4E75                   10732                                              RTS                                             ;return to subroutine
00007C88                         10733  
00007C88  227C 00008514          10734  ROD_An_indir_pinc_r4_out                    MOVE.L          #ea_indir_postinc_A4,A1                         ;load string constant into A1
00007C8E  4E75                   10735                                              RTS                                             ;return to subroutine
00007C90                         10736  
00007C90  227C 0000851A          10737  ROD_An_indir_pinc_r5_out                    MOVE.L          #ea_indir_postinc_A5,A1                         ;load string constant into A1
00007C96  4E75                   10738                                              RTS                                             ;return to subroutine
00007C98                         10739   
00007C98  227C 00008520          10740  ROD_An_indir_pinc_r6_out                    MOVE.L          #ea_indir_postinc_A6,A1                         ;load string constant into A1
00007C9E  4E75                   10741                                              RTS                                             ;return to subroutine
00007CA0                         10742  
00007CA0  227C 00008526          10743  ROD_An_indir_pinc_r7_out                    MOVE.L          #ea_indir_postinc_A7,A1                         ;load string constant into A1
00007CA6  4E75                   10744                                              RTS                                             ;return to subroutine
00007CA8                         10745                                                      
00007CA8                         10746  ;------------------Address Register Indirect with Pre Decrement-----------------------
00007CA8  B4BC 00000018          10747  ROD_An_indir_predec_reg                     CMP.L      #match_ROD_An_indir_predec_r0,D2         ;check reg is equal to 0
00007CAE  6600 0006              10748                                              BNE        ROD_An_indir_pdec_r1                      ;if ROD try reg 1
00007CB2  6700 0064              10749                                              BEQ        ROD_An_indir_pdec_r0_out               ;if equal go to output subroutine
00007CB6                         10750  
00007CB6  B4BC 00000019          10751  ROD_An_indir_pdec_r1                         CMP.L      #match_ROD_An_indir_predec_r1,D2         ;check reg is equal to 1
00007CBC  6600 0006              10752                                              BNE        ROD_An_indir_pdec_r2                      ;if ROD try reg 2
00007CC0  6700 005E              10753                                              BEQ        ROD_An_indir_pdec_r1_out              ;if equal go to output subroutine
00007CC4                         10754  
00007CC4  B4BC 0000001A          10755  ROD_An_indir_pdec_r2                        CMP.L      #match_ROD_An_indir_predec_r2,D2         ;check reg is equal to 2
00007CCA  6600 0006              10756                                              BNE        ROD_An_indir_pdec_r3                      ;if ROD try reg 3
00007CCE  6700 0058              10757                                              BEQ        ROD_An_indir_pdec_r2_out               ;if equal go to output subroutine
00007CD2                         10758  
00007CD2  B4BC 0000001B          10759  ROD_An_indir_pdec_r3                        CMP.L      #match_ROD_An_indir_predec_r3,D2         ;check reg is equal to 3
00007CD8  6600 0006              10760                                              BNE        ROD_An_indir_pdec_r4                      ;if ROD try reg 4
00007CDC  6700 0062              10761                                              BEQ        ROD_An_indir_pdec_r5_out               ;if equal go to output subroutine
00007CE0                         10762  
00007CE0  B4BC 0000001C          10763  ROD_An_indir_pdec_r4                        CMP.L      #match_ROD_An_indir_predec_r4,D2         ;check reg is equal to 4
00007CE6  6600 0006              10764                                              BNE        ROD_An_indir_pdec_r5                      ;if ROD try reg 5
00007CEA  6700 004C              10765                                              BEQ        ROD_An_indir_pdec_r4_out               ;if equal go to output subroutine
00007CEE                         10766  
00007CEE  B4BC 0000001D          10767  ROD_An_indir_pdec_r5                        CMP.L      #match_ROD_An_indir_predec_r5,D2         ;check reg is equal to 5
00007CF4  6600 0006              10768                                              BNE        ROD_An_indir_pdec_r6                      ;if ROD try reg 6
00007CF8  6700 0046              10769                                              BEQ        ROD_An_indir_pdec_r5_out               ;if equal go to output subroutine
00007CFC                         10770  
00007CFC  B4BC 0000001E          10771  ROD_An_indir_pdec_r6                        CMP.L      #match_ROD_An_indir_predec_r6,D2         ;check reg is equal to 6
00007D02  6700 0044              10772                                              BEQ        ROD_An_indir_pdec_r6_out               ;if equal go to output subroutine
00007D06  6600 0002              10773                                              BNE        ROD_An_indir_pdec_r7
00007D0A                         10774                                              
00007D0A  B4BC 0000001F          10775  ROD_An_indir_pdec_r7                        CMP.L      #match_ROD_An_indir_predec_r7,D2         ;check reg is equal to 6
00007D10  6700 003E              10776                                              BEQ        ROD_An_indir_pdec_r7_out               ;if equal go to output subroutine
00007D14  6600 F494              10777                                              BNE        ERROR                                        :if ROD equal to an addresssing mode, pritn error
00007D18                         10778  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00007D18  227C 0000852C          10779  ROD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
00007D1E  4E75                   10780                                              RTS                                                     ;return to subroutine
00007D20                         10781  
00007D20  227C 00008532          10782  ROD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
00007D26  4E75                   10783                                              RTS                                                     ;return to subroutine
00007D28                         10784                                                      
00007D28  227C 00008538          10785  ROD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
00007D2E  4E75                   10786                                              RTS                                                     ;return to subroutine
00007D30                         10787  
00007D30  227C 0000853E          10788  ROD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
00007D36  4E75                   10789                                              RTS                                                     ;return to subroutine
00007D38                         10790  
00007D38  227C 00008544          10791  ROD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
00007D3E  4E75                   10792                                              RTS                                                     ;return to subroutine
00007D40                         10793      
00007D40  227C 0000854A          10794  ROD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00007D46  4E75                   10795                                              RTS                                                     ;return to subroutine
00007D48                         10796      
00007D48  227C 00008550          10797  ROD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
00007D4E  4E75                   10798                                              RTS                                                     ;return to subroutine
00007D50                         10799  
00007D50  227C 00008556          10800  ROD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
00007D56  4E75                   10801                                              RTS                                                     ;return to subroutine
00007D58                         10802                                                      
00007D58                         10803  ;------------------Absolute Addressing Output-----------------------
00007D58  22FC 00008566          10804  ROD_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00007D5E  22C5                   10805                                           MOVE.L      D5,(A1)+                           ;load address                  
00007D60  4E75                   10806                                           RTS                                            :return to subroutine
00007D62                         10807                                             
00007D62                         10808  
00007D62  2A18                   10809  ROD_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00007D64  22FC 00008566          10810                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00007D6A  22C5                   10811                                           MOVE.L      D5,(A1)+                           ;load address                  
00007D6C  4E75                   10812                                           RTS                                            :return to subroutine
00007D6E                         10813                                                  
00007D6E                         10814  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
00007D6E                         10815  ; determine if the shift is a data register or a immediate value
00007D6E  4241                   10816  ROD_reg_shift                       CLR         D1                              ;clear D1
00007D70  C2BC 00000020          10817                                      AND.L       #mask_ROD_reg_shift_ir,D1           ;load the mask into D1
00007D76  B2BC 00000020          10818                                      CMP.L       #match_ROD_shift_reg,D1             ;check to see if the shift is a data register
00007D7C  6700 0006              10819                                      BEQ         ROD_shift_reg                       ;if the shift is a register, go to subroutine
00007D80  6600 007A              10820                                      BNE         ROD_count_val                       ;if ROD go to immediate value subroutine
00007D84                         10821  
00007D84                         10822  ;i/r = 1, the shift is a Data register                                    
00007D84                         10823  ; this the subroutine for the data register shift
00007D84  4241                   10824  ROD_shift_reg                       CLR         D1                              ;clear D1
00007D86  C2BC 00000020          10825                                      AND.L       #mask_ROD_reg_shift,D1              ;load mask into D1 for bits 11-9
00007D8C                         10826  
00007D8C  B2BC 00000000          10827  ROD_count_reg0                      CMP.L       #match_ROD_count_reg0,D1            ;check to see if count/shift = 0
00007D92  6600 0006              10828                                      BNE         ROD_count_reg1                    ;if ROD go check 1
00007D96  6700 0144              10829                                      BEQ         ROD_count_reg0_out                ;got to output
00007D9A                         10830                                      
00007D9A  B2BC 00000200          10831  ROD_count_reg1                      CMP.L       #match_ROD_count_reg1,D1            ;check to see if count/shift = 1
00007DA0  6600 0006              10832                                      BNE         ROD_count_reg2                    ;if ROD go check 2
00007DA4  6700 0144              10833                                      BEQ         ROD_count_reg1_out                ;got to output
00007DA8                         10834  
00007DA8  B2BC 00000400          10835  ROD_count_reg2                      CMP.L       #match_ROD_count_reg2,D1            ;check to see if count/shift = 2
00007DAE  6600 0006              10836                                      BNE         ROD_count_reg3                    ;if ROD go check 3
00007DB2  6700 0144              10837                                      BEQ         ROD_count_reg2_out                ;got to output
00007DB6                         10838  
00007DB6  B2BC 00000600          10839  ROD_count_reg3                      CMP.L       #match_ROD_count_reg3,D1            ;check to see if count/shift = 3
00007DBC  6600 0006              10840                                      BNE         ROD_count_reg4                    ;if ROD go check 4
00007DC0  6700 0144              10841                                      BEQ         ROD_count_reg3_out                ;got to output
00007DC4                         10842  
00007DC4  B2BC 00000800          10843  ROD_count_reg4                      CMP.L       #match_ROD_count_reg4,D1            ;check to see if count/shift = 4
00007DCA  6600 0006              10844                                      BNE         ROD_count_reg5                    ;if ROD go check 5
00007DCE  6700 0144              10845                                      BEQ         ROD_count_reg4_out                ;got to output
00007DD2                         10846  
00007DD2  B2BC 00000A00          10847  ROD_count_reg5                      CMP.L       #match_ROD_count_reg5,D1            ;check to see if count/shift = 5
00007DD8  6600 0006              10848                                      BNE         ROD_count_reg6                      ;if ROD go check 6
00007DDC  6700 0144              10849                                      BEQ         ROD_count_reg5_out                  ;got to output
00007DE0                         10850  
00007DE0  B2BC 00000C00          10851  ROD_count_reg6                      CMP.L       #match_ROD_count_reg6,D1            ;check to see if count/shift = 6
00007DE6  6600 0006              10852                                      BNE         ROD_count_reg7                      ;if ROD go check 7
00007DEA  6700 0144              10853                                      BEQ         ROD_count_reg6_out                  ;got to output
00007DEE                         10854  
00007DEE  B2BC 00000E00          10855  ROD_count_reg7                      CMP.L       #match_ROD_count_reg7,D1            ;check to see if count/shift = 7
00007DF4  6600 F3B4              10856                                      BNE         ERROR                           ; if none of the registers, then print error message
00007DF8  6700 0144              10857                                      BEQ         ROD_count_reg7_out                  ;got to output
00007DFC                         10858  
00007DFC                         10859  
00007DFC                         10860  
00007DFC                         10861  ;i/r = 0, the shift is an immediate value
00007DFC                         10862  ;1-7 = 1-7
00007DFC                         10863  ;0 = 8
00007DFC                         10864  ; this is the subroutine for the immedite value shift
00007DFC  B2BC 00000000          10865  ROD_count_val                       CMP.L       #match_ROD_count_val0,D1          ;check to see if shift count is 0
00007E02  6600 0006              10866                                      BNE         ROD_count_val1                    ;if ROD 0 check 1
00007E06  6700 0064              10867                                      BEQ         ROD_count_val0_out                ;if 0 got to output
00007E0A                         10868  
00007E0A  B2BC 00000200          10869  ROD_count_val1                      CMP.L       #match_ROD_count_val1,D1          ;check to see if shift count is 0
00007E10  6600 0006              10870                                      BNE         ROD_count_val2                    ;if ROD 0 check 1
00007E14  6700 0064              10871                                      BEQ         ROD_count_val1_out                ;if 0 got to output
00007E18                         10872  
00007E18  B2BC 00000400          10873  ROD_count_val2                      CMP.L       #match_ROD_count_val2,D1          ;check to see if shift count is 0
00007E1E  6600 0006              10874                                      BNE         ROD_count_val3                    ;if ROD 0 check 1
00007E22  6700 0064              10875                                      BEQ         ROD_count_val2_out                ;if 0 got to output
00007E26                         10876  
00007E26  B2BC 00000600          10877  ROD_count_val3                      CMP.L       #match_ROD_count_val3,D1          ;check to see if shift count is 0
00007E2C  6600 0006              10878                                      BNE         ROD_count_val4                    ;if ROD 0 check 1
00007E30  6700 0064              10879                                      BEQ         ROD_count_val3_out                ;if 0 got to output
00007E34                         10880  
00007E34  B2BC 00000800          10881  ROD_count_val4                      CMP.L       #match_ROD_count_val4,D1          ;check to see if shift count is 0
00007E3A  6600 0006              10882                                      BNE         ROD_count_val5                    ;if ROD 0 check 1
00007E3E  6700 0064              10883                                      BEQ         ROD_count_val4_out                ;if 0 got to output
00007E42                         10884  
00007E42  B2BC 00000A00          10885  ROD_count_val5                      CMP.L       #match_ROD_count_val5,D1          ;check to see if shift count is 0
00007E48  6600 0006              10886                                      BNE         ROD_count_val6                    ;if ROD 0 check 1
00007E4C  6700 0064              10887                                      BEQ         ROD_count_val5_out                ;if 0 got to output
00007E50                         10888  
00007E50  B2BC 00000C00          10889  ROD_count_val6                      CMP.L       #match_ROD_count_val6,D1          ;check to see if shift count is 0
00007E56  6600 0006              10890                                      BNE         ROD_count_val7                    ;if ROD 0 check 1
00007E5A  6700 0064              10891                                      BEQ         ROD_count_val6_out                ;if 0 got to output
00007E5E                         10892  
00007E5E  B2BC 00000E00          10893  ROD_count_val7                      CMP.L       #match_ROD_count_val7,D1          ;check to see if shift count is 0
00007E64  6600 F344              10894                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
00007E68  6700 0064              10895                                      BEQ         ROD_count_val7_out                ;if 0 got to output
00007E6C                         10896  
00007E6C                         10897  ;-----------------------------------Count Shift Immedite Value Output---------------------------
00007E6C  227C 000084C4          10898  ROD_count_val0_out            MOVE.L            #ea_val0,A1         ;load string constant into A1
00007E72  4EB9 00007F4C          10899                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E78  4E75                   10900                                RTS
00007E7A                         10901                                
00007E7A  227C 000084C6          10902  ROD_count_val1_out            MOVE.L            #ea_val1,A1         ;load string constant into A1
00007E80  4EB9 00007F4C          10903                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E86  4E75                   10904                                RTS                             
00007E88                         10905  
00007E88  227C 000084C8          10906  ROD_count_val2_out            MOVE.L            #ea_val2,A1         ;load string constant into A1
00007E8E  4EB9 00007F4C          10907                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007E94  4E75                   10908                                RTS
00007E96                         10909                                
00007E96  227C 000084CA          10910  ROD_count_val3_out            MOVE.L            #ea_val3,A1         ;load string constant into A1
00007E9C  4EB9 00007F4C          10911                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007EA2  4E75                   10912                                RTS
00007EA4                         10913                                
00007EA4  227C 000084CC          10914  ROD_count_val4_out            MOVE.L            #ea_val4,A1         ;load string constant into A1
00007EAA  4EB9 00007F4C          10915                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007EB0  4E75                   10916                                RTS
00007EB2                         10917                                
00007EB2  227C 000084CE          10918  ROD_count_val5_out            MOVE.L            #ea_val5,A1         ;load string constant into A1
00007EB8  4EB9 00007F4C          10919                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007EBE  4E75                   10920                                RTS
00007EC0                         10921                                
00007EC0  227C 000084D0          10922  ROD_count_val6_out            MOVE.L            #ea_val6,A1         ;load string constant into A1
00007EC6  4EB9 00007F4C          10923                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007ECC  4E75                   10924                                RTS
00007ECE                         10925                                
00007ECE  227C 000084D2          10926  ROD_count_val7_out            MOVE.L            #ea_val7,A1         ;load string constant into A1
00007ED4  4EB9 00007F4C          10927                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007EDA  4E75                   10928                                RTS
00007EDC                         10929                                
00007EDC                         10930  ;-------------------------Count Shift Output (Dn)-----------------------------------------
00007EDC  227C 00008494          10931  ROD_count_reg0_out            MOVE.L            #ea_D0,A1           ;load string constant into A1
00007EE2  4EB9 00007F4C          10932                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007EE8  4E75                   10933                                RTS
00007EEA                         10934                                
00007EEA  227C 00008497          10935  ROD_count_reg1_out            MOVE.L            #ea_D1,A1           ;load string constant into A1
00007EF0  4EB9 00007F4C          10936                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007EF6  4E75                   10937                                RTS
00007EF8                         10938                                
00007EF8  227C 0000849A          10939  ROD_count_reg2_out            MOVE.L            #ea_D2,A1           ;load string constant into A1
00007EFE  4EB9 00007F4C          10940                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007F04  4E75                   10941                                RTS
00007F06                         10942                                
00007F06  227C 0000849D          10943  ROD_count_reg3_out            MOVE.L            #ea_D3,A1           ;load string constant into A1
00007F0C  4EB9 00007F4C          10944                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007F12  4E75                   10945                                RTS
00007F14                         10946                                
00007F14  227C 000084A0          10947  ROD_count_reg4_out            MOVE.L            #ea_D4,A1           ;load string constant into A1
00007F1A  4EB9 00007F4C          10948                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007F20  4E75                   10949                                RTS
00007F22                         10950                                
00007F22  227C 000084A3          10951  ROD_count_reg5_out            MOVE.L            #ea_D5,A1           ;load string constant into A1
00007F28  4EB9 00007F4C          10952                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007F2E  4E75                   10953                                RTS
00007F30                         10954                                
00007F30  227C 000084A6          10955  ROD_count_reg6_out            MOVE.L            #ea_D6,A1           ;load string constant into A1
00007F36  4EB9 00007F4C          10956                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand
00007F3C  4E75                   10957                                RTS
00007F3E                         10958                                
00007F3E  227C 000084A9          10959  ROD_count_reg7_out            MOVE.L            #ea_D7,A1           ;load string constant into A1
00007F44  4EB9 00007F4C          10960                                JSR               ROD_Dn0                 ;jump to subroutine to determine the second operand                                    
00007F4A  4E75                   10961                                RTS                                    
00007F4C                         10962                                      
00007F4C                         10963  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
00007F4C  4241                   10964  ROD_Dn0                         CLR             D1                  ;clear D1
00007F4E  C2BC 00000007          10965                                  AND.L           #mask_ROD_data_reg,D1   ;load data register mask for second operand
00007F54                         10966                                  
00007F54  B2BC 00000000          10967                                  CMP.L           #match_ROD_D_reg0,D1          ;check if data register is D0
00007F5A  6700 0068              10968                                  BEQ             ROD_D0_out              ;if equal got to output subroutine
00007F5E  6600 0002              10969                                  BNE             ROD_Dn1                 ;if ROD check D1
00007F62                         10970                                  
00007F62  B2BC 00000001          10971  ROD_Dn1                         CMP.L           #match_ROD_D_reg1,D1          ;check if data register is D0
00007F68  6700 0062              10972                                  BEQ             ROD_D1_out              ;if equal got to output subroutine
00007F6C  6600 0002              10973                                  BNE             ROD_Dn2                 ;if ROD check D2
00007F70                         10974  
00007F70  B2BC 00000002          10975  ROD_Dn2                         CMP.L           #match_ROD_D_reg2,D1          ;check if data register is D0
00007F76  6700 005C              10976                                  BEQ             ROD_D2_out              ;if equal got to output subroutine
00007F7A  6600 0002              10977                                  BNE             ROD_Dn3                 ;if ROD check D3
00007F7E                         10978  
00007F7E  B2BC 00000003          10979  ROD_Dn3                         CMP.L           #match_ROD_D_reg3,D1          ;check if data register is D0
00007F84  6700 0056              10980                                  BEQ             ROD_D3_out              ;if equal got to output subroutine
00007F88  6600 0002              10981                                  BNE             ROD_Dn4                 ;if ROD check D4
00007F8C                         10982  
00007F8C  B2BC 00000004          10983  ROD_Dn4                         CMP.L           #match_ROD_D_reg4,D1          ;check if data register is D0
00007F92  6700 0050              10984                                  BEQ             ROD_D4_out              ;if equal got to output subroutine
00007F96  6600 0002              10985                                  BNE             ROD_Dn5                 ;if ROD check D5
00007F9A                         10986  
00007F9A  B2BC 00000005          10987  ROD_Dn5                         CMP.L           #match_ROD_D_reg5,D1          ;check if data register is D0
00007FA0  6700 004A              10988                                  BEQ             ROD_D5_out              ;if equal got to output subroutine
00007FA4  6600 0002              10989                                  BNE             ROD_Dn6                 ;if ROD check D6
00007FA8                         10990  
00007FA8  B2BC 00000006          10991  ROD_Dn6                         CMP.L           #match_ROD_D_reg6,D1          ;check if data register is D0
00007FAE  6700 0044              10992                                  BEQ             ROD_D6_out              ;if equal got to output subroutine
00007FB2  6600 0002              10993                                  BNE             ROD_Dn7                 ;if ROD check D7
00007FB6                         10994  
00007FB6  B2BC 00000007          10995  ROD_Dn7                         CMP.L           #match_ROD_D_reg7,D1          ;check if data register is D0
00007FBC  6700 003E              10996                                  BEQ             ROD_D7_out              ;if equal got to output subroutine
00007FC0  6600 F1E8              10997                                  BNE             ERROR               :if none of the registers go to error sub routine
00007FC4                         10998                                  
00007FC4                         10999                                  
00007FC4                         11000  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
00007FC4  227C 00008494          11001  ROD_D0_out                    MOVE.L            #ea_D0,A1           ;load string constant into A1
00007FCA  4E75                   11002                                RTS                                   ;return to subroutine
00007FCC                         11003  
00007FCC                         11004  
00007FCC  227C 00008497          11005  ROD_D1_out                    MOVE.L            #ea_D1,A1           ;load string constant into A1
00007FD2  4E75                   11006                                RTS                                   ;return to subroutine
00007FD4                         11007  
00007FD4                         11008  
00007FD4  227C 0000849A          11009  ROD_D2_out                    MOVE.L            #ea_D2,A1           ;load string constant into A1
00007FDA  4E75                   11010                                RTS                                   ;return to subroutine
00007FDC                         11011  
00007FDC                         11012              
00007FDC  227C 0000849D          11013  ROD_D3_out                    MOVE.L            #ea_D3,A1           ;load string constant into A1
00007FE2  4E75                   11014                                RTS                                   ;return to subroutine
00007FE4                         11015  
00007FE4                         11016  
00007FE4  227C 000084A0          11017  ROD_D4_out                    MOVE.L            #ea_D4,A1           ;load string constant into A1
00007FEA  4E75                   11018                                RTS                                   ;return to subroutine
00007FEC                         11019  
00007FEC                         11020  
00007FEC  227C 000084A3          11021  ROD_D5_out                    MOVE.L            #ea_D5,A1           ;load string constant into A1
00007FF2  4E75                   11022                                RTS                                   ;return to subroutine
00007FF4                         11023  
00007FF4                         11024  
00007FF4  227C 000084A6          11025  ROD_D6_out                    MOVE.L            #ea_D6,A1           ;load string constant into A1
00007FFA  4E75                   11026                                RTS                                   ;return to subroutine
00007FFC                         11027  
00007FFC                         11028  
00007FFC  227C 000084A9          11029  ROD_D7_out                    MOVE.L            #ea_D7,A1           ;load string constant into A1
00008002  4E75                   11030                                RTS                                   ;return to subroutine
00008004                         11031  
00008004                         11032  
00008004                         11033                                      
00008004  =000000C0              11034  mask_ROD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
00008004  =00000038              11035  mask_ROD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
00008004  =0000003F              11036  mask_ROD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
00008004  =0000003F              11037  mask_ROD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
00008004  =00000020              11038  mask_ROD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
00008004  =00000E00              11039  mask_ROD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
00008004  =00000020              11040  mask_ROD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
00008004  =00000007              11041  mask_ROD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
00008004                         11042  
00008004  =00000000              11043  match_ROD_D_reg0                                EQU             $0000               ;match for second operand data register 0
00008004  =00000001              11044  match_ROD_D_reg1                                EQU             $0001               ;match for second operand data register 1
00008004  =00000002              11045  match_ROD_D_reg2                                EQU             $0002               ;match for second operand data register 2
00008004  =00000003              11046  match_ROD_D_reg3                                EQU             $0003               ;match for second operand data register 3
00008004  =00000004              11047  match_ROD_D_reg4                                EQU             $0004               ;match for second operand data register 4
00008004  =00000005              11048  match_ROD_D_reg5                                EQU             $0005               ;match for second operand data register 5
00008004  =00000006              11049  match_ROD_D_reg6                                EQU             $0006               ;match for second operand data register 6
00008004  =00000007              11050  match_ROD_D_reg7                                EQU             $0007               ;match for second operand data register 7
00008004                         11051  
00008004  =00000000              11052  match_ROD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
00008004  =00000200              11053  match_ROD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
00008004  =00000400              11054  match_ROD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
00008004  =00000600              11055  match_ROD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
00008004  =00000800              11056  match_ROD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
00008004  =00000A00              11057  match_ROD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
00008004  =00000C00              11058  match_ROD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
00008004  =00000E00              11059  match_ROD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
00008004                         11060  
00008004  =00000020              11061  match_ROD_shift_reg                             EQU             $0020               ;match to for a register shift
00008004  =00000000              11062  match_ROD_count_val0                            EQU             $0000               ;match for shift reg 0
00008004  =00000200              11063  match_ROD_count_val1                           EQU             $0200               ;match for shift reg 1
00008004  =00000400              11064  match_ROD_count_val2                            EQU             $0400               ;match for shift reg 2
00008004  =00000600              11065  match_ROD_count_val3                            EQU             $0600               ;match for shift reg 3
00008004  =00000800              11066  match_ROD_count_val4                            EQU             $0800               ;match for shift reg 4
00008004  =00000A00              11067  match_ROD_count_val5                            EQU             $0A00               ;match for shift reg 5
00008004  =00000C00              11068  match_ROD_count_val6                            EQU             $0C00               ;match for shift reg 6
00008004  =00000E00              11069  match_ROD_count_val7                            EQU             $0E00               ;match for shift reg 7
00008004                         11070  
00008004  =00000020              11071  match_ROD_shift_count                           EQU             $0020
00008004  =000000C0              11072  match_ROD_mem_shift                         EQU             $00C0              ;match for memory shift
00008004  =00000010              11073  match_ROD_An_indir                          EQU             $0010              ;match for add reg indir
00008004  =00000020              11074  match_ROD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
00008004  =00000018              11075  match_ROD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
00008004  =00000039              11076  match_ROD_abs_add_word                      EQU             $0039              ;match for word abs add 
00008004  =0000003C              11077  match_ROD_abs_add_long                      EQU             $003C              ;match for long abs add
00008004                         11078  
00008004                         11079  
00008004  =00000010              11080  match_ROD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
00008004  =00000011              11081  match_ROD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
00008004  =00000012              11082  match_ROD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
00008004  =00000013              11083  match_ROD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
00008004  =00000014              11084  match_ROD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
00008004  =00000015              11085  match_ROD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
00008004  =00000016              11086  match_ROD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
00008004  =00000017              11087  match_ROD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
00008004                         11088  
00008004                         11089  
00008004  =00000020              11090  match_ROD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
00008004  =00000021              11091  match_ROD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
00008004  =00000022              11092  match_ROD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
00008004  =00000023              11093  match_ROD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
00008004  =00000024              11094  match_ROD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
00008004  =00000025              11095  match_ROD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
00008004  =00000026              11096  match_ROD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
00008004  =00000027              11097  match_ROD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
00008004                         11098  
00008004  =00000018              11099  match_ROD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
00008004  =00000019              11100  match_ROD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
00008004  =0000001A              11101  match_ROD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
00008004  =0000001B              11102  match_ROD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
00008004  =0000001C              11103  match_ROD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
00008004  =0000001D              11104  match_ROD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
00008004  =0000001E              11105  match_ROD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
00008004  =0000001F              11106  match_ROD_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
00008004                         11107  
00008004                         11108  
00008004                         11109  
00008004                         11110  
00008004                         11111  
00008004                         11112  
00008004                         11113  
00008004                         11114  
00008004                         11115  -------------------- end include --------------------
00008004                         11116              INCLUDE 'EA Masks.x68'
00008004                         11117  
00008004  =00000FFF              11118  mask_MOVE_EA                EQU     $0FFF
00008004  =00000E00              11119  mask_MOVE_dst_reg           EQU     $0E00
00008004  =000001C0              11120  mask_MOVE_dst_mode          EQU     $01C0
00008004  =00000038              11121  mask_MOVE_src_reg           EQU     $0038
00008004  =00000007              11122  mask_MOVE_src_mode          EQU     $0007
00008004                         11123  
00008004  =00000E3F              11124  mask_MOVEA_EA               EQU     $0E3F
00008004  =00000E00              11125  mask_MOVEA_dst_reg          EQU     $0E00
00008004  =00000038              11126  mask_MOVEA_src_mode         EQU     $0038
00008004  =00000007              11127  mask_MOVEA_src_reg          EQU     $0007
00008004                         11128  
00008004  =00000EFF              11129  mask_MOVEQ_EA               EQU     $0EFF
00008004  =00000E00              11130  mask_MOVEQ_reg              EQU     $0E00
00008004  =000000FF              11131  mask_MOVEQ_data             EQU     $00FF
00008004                         11132  
00008004  =0000047F              11133  mask_MOVEM_EA               EQU     $047F       
00008004  =00000400              11134  mask_MOVEM_direct           EQU     $0400
00008004  =00000040              11135  mask_MOVEM_size             EQU     $0040
00008004                         11136  ;using predecrement bits go from 15-0 15 = D0, 0 = A7
00008004                         11137  ;using post increment bits ggo from 15-0, 15 = A7, 0 = D0
00008004                         11138  ;the low order bit is the register transfered first
00008004  =00000007              11139  mask_MOVEM_ea_reg           EQU     $0007
00008004                         11140  
00008004  =00000FFF              11141  mask_ADD_EA                 EQU     $0FFF
00008004  =00000E00              11142  mask_ADD_reg                EQU     $0E00
00008004  =000001C0              11143  mask_ADD_opmode             EQU     $01C0
00008004  =00000007              11144  mask_ADD_ea_reg             EQU     $0007
00008004                         11145  
00008004  =00000FFF              11146  mask_ADDA_EA                EQU     $0FFF
00008004  =00000E00              11147  mask_ADDA_reg               EQU     $0E00
00008004  =000001C0              11148  mask_ADDA_opmode            EQU     $01C0
00008004  =00000038              11149  mask_ADDA_ea_mode           EQU     $0038
00008004  =00000007              11150  mask_ADDA_ea_reg            EQU     $0007
00008004                         11151  
00008004  =00000EFF              11152  mask_ADDQ_EA                EQU     $0EFF
00008004  =00000E00              11153  mask_ADDQ_data              EQU     $0E00
00008004  =000000C0              11154  mask_ADDQ_size              EQU     $00C0
00008004  =00000038              11155  mask_ADDQ_ea_mode           EQU     $0038
00008004  =00000007              11156  mask_ADDQ_ea_reg            EQU     $0007
00008004                         11157  
00008004  =00000FFF              11158  mask_SUB_EA                 EQU     $0FFF
00008004  =00000E00              11159  mask_SUB_reg                EQU     $0E00
00008004  =000001C0              11160  mask_SUB_opmode             EQU     $01C0
00008004  =00000038              11161  mask_SUB_ea_mode            EQU     $0038
00008004  =00000007              11162  mask_SUB_ea_reg             EQU     $0007
00008004                         11163  
00008004  =00000E3F              11164  mask_LEA_EA                 EQU     $0E3F
00008004  =00000E00              11165  mask_LEA_reg                EQU     $0E00
00008004  =00000038              11166  mask_LEA_ea_mode            EQU     $0038
00008004  =00000007              11167  mask_LEA_ea_reg             EQU     $0007
00008004                         11168  
00008004  =00000FFF              11169  mask_AND_EA                 EQU     $0FFF
00008004  =00000E00              11170  mask_AND_reg                EQU     $0E00
00008004  =000001C0              11171  mask_AND_opmode             EQU     $01C0
00008004  =00000038              11172  mask_AND_ea_mode            EQU     $0038
00008004  =00000007              11173  mask_AND_ea_reg             EQU     $0007
00008004                         11174  
00008004  =00000FFF              11175  mask_OR_EA                  EQU     $0FFF
00008004  =00000E00              11176  mask_OR_reg                 EQU     $0E00
00008004  =000001C0              11177  mask_OR_opmode              EQU     $01C0
00008004  =00000038              11178  mask_OR_ea_mode             EQU     $0038
00008004  =00000007              11179  mask_OR_ea_reg              EQU     $0007
00008004                         11180  
00008004  =000000FF              11181  mask_NOT_EA                 EQU     $00FF
00008004  =000000C0              11182  mask_NOT_size               EQU     $00C0
00008004  =00000038              11183  mask_NOT_ea_mode            EQU     $0038
00008004  =00000007              11184  mask_NOT_ea_reg             EQU     $0007
00008004                         11185  
00008004  =0000013F              11186  mask_ASR_mem_shift_EA       EQU     $013F
00008004  =00000100              11187  mask_ASR_mem_shift_direct   EQU     $0100
00008004  =00000038              11188  mask_ASR_mem_shift_ea_mode  EQU     $0038
00008004  =00000007              11189  mask_ASR_mem_shift_ea_reg   EQU     $0007
00008004                         11190  
00008004  =0000013F              11191  mask_ASL_mem_shift_EA       EQU     $013F
00008004  =00000100              11192  mask_ASL_mem_shift_direct   EQU     $0100
00008004  =00000038              11193  mask_ASL_mem_shift_ea_mode  EQU     $0038
00008004  =00000007              11194  mask_ASL_mem_shift_ea_reg   EQU     $0007
00008004                         11195  
00008004  =00000FE7              11196  mask_ASR_reg_shift_EA       EQU     $0FE7
00008004  =00000E00              11197  mask_ASR_reg_shift_count    EQU     $0E00
00008004  =00000100              11198  mask_ASR_reg_shift_direct   EQU     $0100
00008004  =000000C0              11199  mask_ASR_reg_shift_size     EQU     $00C0
00008004  =00000020              11200  mask_ASR_reg_shift_ir       EQU     $0020
00008004  =00000007              11201  mask_ASR_reg_shift_reg      EQU     $0007
00008004                         11202  
00008004  =00000FE7              11203  mask_ASL_reg_shift_EA       EQU     $0FE7
00008004  =00000E00              11204  mask_ASL_reg_shift_count    EQU     $0E00
00008004  =00000100              11205  mask_ASL_reg_shift_direct   EQU     $0100
00008004  =000000C0              11206  mask_ASL_reg_shift_size     EQU     $00C0
00008004  =00000020              11207  mask_ASL_reg_shift_ir       EQU     $0020
00008004  =00000007              11208  mask_ASL_reg_shift_reg      EQU     $0007
00008004                         11209  
00008004  =0000013F              11210  mask_LSR_mem_shift_EA       EQU     $013F
00008004  =00000100              11211  mask_LSR_mem_shift_direct   EQU     $0100
00008004  =00000038              11212  mask_LSR_mem_shift_ea_mode  EQU     $0038
00008004  =00000007              11213  mask_LSR_mem_shift_ea_reg   EQU     $0007
00008004                         11214  
00008004  =0000013F              11215  mask_LSL_mem_shift_EA       EQU     $013F
00008004  =00000100              11216  mask_LSL_mem_shift_direct   EQU     $0100
00008004  =00000038              11217  mask_LSL_mem_shift_ea_mode  EQU     $0038
00008004  =00000007              11218  mask_LSL_mem_shift_ea_reg   EQU     $0007
00008004                         11219  
00008004  =00000FE7              11220  mask_LSR_reg_shift_EA       EQU     $0FE7
00008004  =00000E00              11221  mask_LSR_reg_shift_count    EQU     $0E00
00008004  =00000100              11222  mask_LSR_reg_shift_direct   EQU     $0100
00008004  =000000C0              11223  mask_LSR_reg_shift_size     EQU     $00C0
00008004  =00000020              11224  mask_LSR_reg_shift_ir       EQU     $0020
00008004  =00000007              11225  mask_LSR_reg_shift_reg      EQU     $0007
00008004                         11226  
00008004  =00000FE7              11227  mask_LSL_reg_shift_EA       EQU     $0FE7
00008004  =00000E00              11228  mask_LSL_reg_shift_count    EQU     $0E00
00008004  =00000100              11229  mask_LSL_reg_shift_direct   EQU     $0100
00008004  =000000C0              11230  mask_LSL_reg_shift_sIze     EQU     $00C0
00008004  =00000020              11231  mask_LSL_reg_shift_ir       EQU     $0020
00008004  =00000007              11232  mask_LSL_reg_shift_reg      EQU     $0007
00008004                         11233  
00008004                         11234  
00008004  =0000013F              11235  mask_ROR_mem_rot_EA         EQU     $013F
00008004  =00000100              11236  mask_ROR_mem_rot_direct     EQU     $0100
00008004  =00000038              11237  mask_ROR_mem_rot_ea_mode    EQU     $0038
00008004  =00000007              11238  mask_ROR_mem_rot_ea_reg     EQU     $0007
00008004                         11239  
00008004  =0000013F              11240  mask_ROL_mem_rot_EA         EQU     $013F
00008004  =00000100              11241  mask_ROL_mem_rot_direct     EQU     $0100
00008004  =00000038              11242  mask_ROL_mem_rot_ea_mode    EQU     $0038
00008004  =00000007              11243  mask_ROL_mem_rot_ea_reg     EQU     $0007
00008004                         11244  
00008004  =00000FE7              11245  mask_ROR_reg_rot_EA         EQU     $0FE7
00008004  =00000E00              11246  mask_ROR_reg_rot_count      EQU     $0E00
00008004  =00000100              11247  mask_ROR_reg_rot_direct     EQU     $0100
00008004  =000000C0              11248  mask_ROR_reg_rot_size       EQU     $00C0
00008004  =00000020              11249  mask_ROR_reg_rot_ir         EQU     $0020
00008004  =00000007              11250  mask_ROR_reg_rot_reg        EQU     $0007
00008004                         11251  
00008004  =00000FE7              11252  mask_ROL_reg_rot_EA         EQU     $0FE7
00008004  =00000E00              11253  mask_ROL_reg_rot_count      EQU     $0E00
00008004  =00000100              11254  mask_ROL_reg_rot_direct     EQU     $0100
00008004  =00000C00              11255  mask_ROL_reg_rot_size       EQU     $0C00
00008004  =00000020              11256  mask_ROL_reg_rot_ir         EQU     $0020
00008004  =00000007              11257  mask_ROL_reg_rot_reg        EQU     $0007
00008004                         11258  
00008004  =00000FFF              11259  mask_Bcc_EA                 EQU     $0FFF
00008004  =00000E00              11260  mask_Bcc_cond               EQU     $0E00
00008004  =000000FF              11261  mask_Bcc_displace           EQU     $00FF
00008004                         11262  
00008004  =00000F00              11263  mask_BLE_EA                 EQU     $0F00       ;code for LE condition is 1111
00008004  =000000FF              11264  mask_BLE_displace           EQU     $00FF
00008004                         11265  
00008004  =00000F00              11266  mask_BGT_EA                 EQU     $0F00       ;code for GT condition is 1110
00008004  =000000FF              11267  mask_BGT_displace           EQU     $00FF
00008004                         11268  
00008004  =0000003F              11269  mask_JSR_EA                 EQU     $003F
00008004  =00000038              11270  mask_JSR_ea_mode            EQU     $0038
00008004  =00000007              11271  mask_JSR_ea_reg             EQU     $0007
00008004                         11272  
00008004  =000000FF              11273  mask_BRA_EA                 EQU     $00FF
00008004                         11274  
00008004                         11275  
00008004                         11276  -------------------- end include --------------------
00008004                         11277              INCLUDE 'variables.X68'
00008004  =0000F000              11278  mask_opcode     EQU     $F000
00008004  =0000C000              11279  mask_MOVE       EQU     $C000
00008004  =000001C0              11280  mask_MOVE_A     EQU     $01C0
00008004  =0000F1C0              11281  mask_LEA        EQU     $F1C0
00008004  =0000FFC0              11282  mask_JSR        EQU     $FFC0
00008004  =0000FF00              11283  mask_NOT        EQU     $FF00
00008004  =0000F0C0              11284  mask_ADDA       EQU     $F0C0
00008004  =0000FF00              11285  mask_BCC        EQU     $FF00
00008004  =0000FFC0              11286  mask_SHFT_M     EQU     $FFC0
00008004  =0000F118              11287  mask_SHFT_R     EQU     $F118
00008004  =000000FF              11288  mask_BCC_size   EQU     $00FF
00008004  =0000FF80              11289  mask_MOVEM      EQU     $FF80
00008004  =00000000              11290  match_MOVE       EQU     $0000
00008004  =00001000              11291  match_MOVEB      EQU     $1000
00008004  =00003000              11292  match_MOVEW      EQU     $3000
00008004  =00002000              11293  match_MOVEL      EQU     $2000
00008004  =00000040              11294  match_MOVEA      EQU     $0040
00008004  =00007000              11295  match_MOVEQ      EQU     $7000
00008004  =00004000              11296  match_G0100      EQU     $4000
00008004  =00004E71              11297  match_NOP        EQU     $4E71
00008004  =00004E75              11298  match_RTS        EQU     $4E75
00008004  =000041C0              11299  match_LEA        EQU     $41C0
00008004  =00004E80              11300  match_JSR        EQU     $4E80
00008004  =00004600              11301  match_NOT        EQU     $4600
00008004  =0000D000              11302  match_G1101      EQU     $D000
00008004  =0000D0C0              11303  match_ADDA       EQU     $D0C0
00008004  =00006000              11304  match_G0110      EQU     $6000
00008004  =00006E00              11305  match_BGT        EQU     $6E00
00008004  =00006700              11306  match_BEQ        EQU     $6700
00008004  =00006F00              11307  match_BLE        EQU     $6F00
00008004  =00006000              11308  match_BRA        EQU     $6000
00008004  =0000E000              11309  match_G1110      EQU     $E000
00008004  =0000E3C0              11310  match_LSL_M      EQU     $E3C0
00008004  =0000E2C0              11311  match_LSR_M      EQU     $E2C0
00008004  =0000E1C0              11312  match_ASL_M      EQU     $E1C0
00008004  =0000E0C0              11313  match_ASR_M      EQU     $E0C0
00008004  =0000E7C0              11314  match_ROL_M      EQU     $E7C0
00008004  =0000E6C0              11315  match_ROR_M      EQU     $E6C0
00008004  =0000E108              11316  match_LSL_R      EQU     $E108
00008004  =0000E008              11317  match_LSR_R      EQU     $E008
00008004  =0000E100              11318  match_ASL_R      EQU     $E100
00008004  =0000E000              11319  match_ASR_R      EQU     $E000
00008004  =0000E118              11320  match_ROL_R      EQU     $E118
00008004  =0000E018              11321  match_ROR_R      EQU     $E018
00008004  =00005000              11322  match_ADDQ       EQU     $5000
00008004  =00009000              11323  match_SUB        EQU     $9000
00008004  =0000C000              11324  match_AND        EQU     $C000
00008004  =00008000              11325  match_OR         EQU     $8000
00008004  =00004880              11326  match_MOVEM_RM   EQU     $4880
00008004  =00004C80              11327  match_MOVEM_MR   EQU     $4C80
00008004  =00003000              11328  mask_size_MOVES     EQU     $3000
00008004  =000000C0              11329  mask_size_NOT       EQU     $00C0
00008004  =00000100              11330  mask_size_ADDA      EQU     $0100
00008004  =000000C0              11331  mask_size_ADD       EQU     $00C0
00008004  =000000C0              11332  mask_size_shifts    EQU     $00C0
00008004  =000000C0              11333  mask_size_SUB       EQU     $00C0
00008004  =000000C0              11334  mask_size_logic     EQU     $00C0
00008004  =00000040              11335  mask_size_MOVEM     EQU     $0040
00008004  =0000F100              11336  mask_size_MOVEQ     EQU     $F100
00008004  =00001000              11337  m_size_B_MOVES      EQU     $1000
00008004  =00003000              11338  m_size_W_MOVES      EQU     $3000
00008004  =00002000              11339  m_size_L_MOVES      EQU     $2000
00008004  =00000000              11340  m_size_B_NOT        EQU     $0000
00008004  =00000040              11341  m_size_W_NOT        EQU     $0040
00008004  =00000080              11342  m_size_L_NOT        EQU     $0080
00008004  =00000000              11343  m_size_W_ADDA       EQU     $0000
00008004  =00000100              11344  m_size_L_ADDA       EQU     $0100
00008004  =00000000              11345  m_size_B_ADD        EQU     $0000
00008004  =00000040              11346  m_size_W_ADD        EQU     $0040
00008004  =00000080              11347  m_size_L_ADD        EQU     $0080
00008004  =00000000              11348  m_size_B_shfts      EQU     $0000
00008004  =00000040              11349  m_size_W_shfts      EQU     $0040
00008004  =00000080              11350  m_size_L_shfts      EQU     $0080
00008004  =00000000              11351  m_size_B_SUB        EQU     $0000
00008004  =00000040              11352  m_size_W_SUB        EQU     $0040
00008004  =00000080              11353  m_size_L_SUB        EQU     $0080
00008004  =00000000              11354  m_size_B_logic      EQU     $0000
00008004  =00000040              11355  m_size_W_logic      EQU     $0040
00008004  =00000080              11356  m_size_L_logic      EQU     $0080
00008004  =000000FF              11357  m_size_L_bcc        EQU     $00FF
00008004  =00000000              11358  m_size_W_bcc        EQU     $0000
00008004  =00000000              11359  m_size_W_MOVEM      EQU     $0000
00008004  =00000040              11360  m_size_L_MOVEM      EQU     $0040
00008004  =00007000              11361  m_size_L_MOVEQ      EQU     $7000
00008004  =00000001              11362  byte_size           EQU     1
00008004  =00000002              11363  word_size           EQU     2
00008004  =00000003              11364  long_size           EQU     3
00008004  =00000000              11365  no_size             EQU     0
00008004  =FFFFFFFF              11366  not_hex             EQU     $FFFFFFFF
00008004  =00000000              11367  hex_clear           EQU     $00000000
00008004  =00007000              11368  start_Adr           EQU     $00007000
00008004  =000073BA              11369  end_Adr             EQU     $000073BA
00008004  =00000038              11370  mask_ADDA_ea_mode                       EQU         $0038
00008004  =0000003F              11371  mask_ADDA_abs_add                       EQU         $003F
00008004  =0000003F              11372  mask_ADDA_ea_reg_and_mode               EQU         $003F
00008004  =00000E00              11373  mask_ADDA_An_reg                        EQU         $0E00
00008004                         11374  
00008004  =00000000              11375  match_ADDA_Dn                           EQU         $0000
00008004  =00000008              11376  match_ADDA_An                           EQU         $0008
00008004  =00000010              11377  match_ADDA_An_indir                     EQU         $0010
00008004  =00000020              11378  match_ADDA_An_indir_predec              EQU         $0020
00008004  =00000018              11379  match_ADDA_An_indir_postinc             EQU         $0018
00008004  =00000038              11380  match_ADDA_abs_add_word                 EQU         $0038
00008004  =00000039              11381  match_ADDA_abs_add_long                 EQU         $0039
00008004                         11382  
00008004  =00000000              11383  match_ADDA_D0                           EQU         $0000
00008004  =00000001              11384  match_ADDA_D1                           EQU         $0001
00008004  =00000002              11385  match_ADDA_D2                           EQU         $0002
00008004  =00000003              11386  match_ADDA_D3                           EQU         $0003
00008004  =00000004              11387  match_ADDA_D4                           EQU         $0004
00008004  =00000005              11388  match_ADDA_D5                           EQU         $0005
00008004  =00000006              11389  match_ADDA_D6                           EQU         $0006
00008004  =00000007              11390  match_ADDA_D7                           EQU         $0007
00008004                         11391  
00008004  =00000008              11392  match_ADDA_A0                           EQU         $0008
00008004  =00000009              11393  match_ADDA_A1                           EQU         $0009
00008004  =0000000A              11394  match_ADDA_A2                           EQU         $000A
00008004  =0000000B              11395  match_ADDA_A3                           EQU         $000B
00008004  =0000000C              11396  match_ADDA_A4                           EQU         $000C
00008004  =0000000D              11397  match_ADDA_A5                           EQU         $000D
00008004  =0000000E              11398  match_ADDA_A6                           EQU         $000E
00008004  =0000000F              11399  match_ADDA_A7                           EQU         $000F
00008004                         11400  
00008004  =00000010              11401  match_ADDA_An_indir_r0                  EQU         $0010
00008004  =00000011              11402  match_ADDA_An_indir_r1                  EQU         $0011
00008004  =00000012              11403  match_ADDA_An_indir_r2                  EQU         $0012
00008004  =00000013              11404  match_ADDA_An_indir_r3                  EQU         $0013
00008004  =00000014              11405  match_ADDA_An_indir_r4                  EQU         $0014
00008004  =00000015              11406  match_ADDA_An_indir_r5                  EQU         $0015
00008004  =00000016              11407  match_ADDA_An_indir_r6                  EQU         $0016
00008004  =00000017              11408  match_ADDA_An_indir_r7                  EQU         $0017
00008004                         11409  
00008004  =00000018              11410  match_ADDA_An_indir_postinc_reg0        EQU         $0018
00008004  =00000019              11411  match_ADDA_An_indir_postinc_reg1        EQU         $0019
00008004  =0000001A              11412  match_ADDA_An_indir_postinc_reg2        EQU         $001A
00008004  =0000001B              11413  match_ADDA_An_indir_postinc_reg3        EQU         $001B
00008004  =0000001C              11414  match_ADDA_An_indir_postinc_reg4        EQU         $001C
00008004  =0000001D              11415  match_ADDA_An_indir_postinc_reg5        EQU         $001D
00008004  =0000001E              11416  match_ADDA_An_indir_postinc_reg6        EQU         $001E
00008004  =0000001F              11417  match_ADDA_An_indir_postinc_reg7        EQU         $001F
00008004                         11418  
00008004  =00000020              11419  match_ADDA_An_indir_predec_reg0         EQU         $0020
00008004  =00000021              11420  match_ADDA_An_indir_predec_reg1         EQU         $0021
00008004  =00000022              11421  match_ADDA_An_indir_predec_reg2         EQU         $0022
00008004  =00000023              11422  match_ADDA_An_indir_predec_reg3         EQU         $0023
00008004  =00000024              11423  match_ADDA_An_indir_predec_reg4         EQU         $0024
00008004  =00000025              11424  match_ADDA_An_indir_predec_reg5         EQU         $0025
00008004  =00000026              11425  match_ADDA_An_indir_predec_reg6         EQU         $0026
00008004  =00000027              11426  match_ADDA_An_indir_predec_reg7         EQU         $0027
00008004                         11427  
00008004  =0000003C              11428  match_imm_add                           EQU         $003C
00008004  =000000FC              11429  match_imm_add_word                      EQU         $00FC
00008004  =000001FC              11430  match_imm_add_long                      EQU         $01FC
00008004                         11431  
00008004  =00000000              11432  match_ADDA_reg0                         EQU         $0000
00008004  =00000200              11433  match_ADDA_reg1                         EQU         $0200
00008004  =00000400              11434  match_ADDA_reg2                         EQU         $0400
00008004  =00000600              11435  match_ADDA_reg3                         EQU         $0600
00008004  =00000800              11436  match_ADDA_reg4                         EQU         $0800
00008004  =00000A00              11437  match_ADDA_reg5                         EQU         $0A00
00008004  =00000C00              11438  match_ADDA_reg6                         EQU         $0C00
00008004  =00000E00              11439  match_ADDA_reg7                         EQU         $0E00
00008004                         11440  
00008004  =00000038              11441  mask_ADDQ_ea_mode           EQU         $0038
00008004  =0000003F              11442  mask_ADDQ_abs_add           EQU         $003F
00008004  =0000003F              11443  mask_ADDQ_ea_reg_and_mode   EQU         $003F
00008004  =00000E00              11444  mask_ADDQ_reg               EQU         $0E00
00008004                         11445  
00008004  =00000000              11446  match_ADDQ_Dn               EQU         $0000
00008004  =00000008              11447  match_ADDQ_An               EQU         $0008
00008004  =00000010              11448  match_ADDQ_An_indir         EQU         $0010
00008004  =00000020              11449  match_ADDQ_An_indir_predec  EQU         $0020
00008004  =00000018              11450  match_ADDQ_An_indir_postinc EQU         $0018
00008004  =00000038              11451  match_ADDQ_abs_add_word     EQU         $0038
00008004  =00000039              11452  match_ADDQ_abs_add_long     EQU         $0039
00008004                         11453  
00008004  =00000000              11454  match_ADDQ_D0               EQU         $0000
00008004  =00000001              11455  match_ADDQ_D1               EQU         $0001
00008004  =00000002              11456  match_ADDQ_D2               EQU         $0002
00008004  =00000003              11457  match_ADDQ_D3               EQU         $0003
00008004  =00000004              11458  match_ADDQ_D4               EQU         $0004
00008004  =00000005              11459  match_ADDQ_D5               EQU         $0005
00008004  =00000006              11460  match_ADDQ_D6               EQU         $0006
00008004  =00000007              11461  match_ADDQ_D7               EQU         $0007
00008004                         11462  
00008004  =00000008              11463  match_ADDQ_A0               EQU         $0008
00008004  =00000009              11464  match_ADDQ_A1               EQU         $0009
00008004  =0000000A              11465  match_ADDQ_A2               EQU         $000A
00008004  =0000000B              11466  match_ADDQ_A3               EQU         $000B
00008004  =0000000C              11467  match_ADDQ_A4               EQU         $000C
00008004  =0000000D              11468  match_ADDQ_A5               EQU         $000D
00008004  =0000000E              11469  match_ADDQ_A6               EQU         $000E
00008004  =0000000F              11470  match_ADDQ_A7               EQU         $000F
00008004                         11471  
00008004  =00000010              11472  match_ADDQ_An_indir_r0      EQU         $0010
00008004  =00000011              11473  match_ADDQ_An_indir_r1      EQU         $0011
00008004  =00000012              11474  match_ADDQ_An_indir_r2      EQU         $0012
00008004  =00000013              11475  match_ADDQ_An_indir_r3      EQU         $0013
00008004  =00000014              11476  match_ADDQ_An_indir_r4      EQU         $0014
00008004  =00000015              11477  match_ADDQ_An_indir_r5      EQU         $0015
00008004  =00000016              11478  match_ADDQ_An_indir_r6      EQU         $0016
00008004  =00000017              11479  match_ADDQ_An_indir_r7      EQU         $0017
00008004                         11480  
00008004  =00000018              11481  match_ADDQ_An_indir_postinc_reg0        EQU         $0018
00008004  =00000019              11482  match_ADDQ_An_indir_postinc_reg1        EQU         $0019
00008004  =0000001A              11483  match_ADDQ_An_indir_postinc_reg2        EQU         $001A
00008004  =0000001B              11484  match_ADDQ_An_indir_postinc_reg3        EQU         $001B
00008004  =0000001C              11485  match_ADDQ_An_indir_postinc_reg4        EQU         $001C
00008004  =0000001D              11486  match_ADDQ_An_indir_postinc_reg5        EQU         $001D
00008004  =0000001E              11487  match_ADDQ_An_indir_postinc_reg6        EQU         $001E
00008004  =0000001F              11488  match_ADDQ_An_indir_postinc_reg7        EQU         $001F
00008004                         11489  
00008004  =00000020              11490  match_ADDQ_An_indir_predec_reg0         EQU         $0020
00008004  =00000021              11491  match_ADDQ_An_indir_predec_reg1         EQU         $0021
00008004  =00000022              11492  match_ADDQ_An_indir_predec_reg2         EQU         $0022
00008004  =00000023              11493  match_ADDQ_An_indir_predec_reg3         EQU         $0023
00008004  =00000024              11494  match_ADDQ_An_indir_predec_reg4         EQU         $0024
00008004  =00000025              11495  match_ADDQ_An_indir_predec_reg5         EQU         $0025
00008004  =00000026              11496  match_ADDQ_An_indir_predec_reg6         EQU         $0026
00008004  =00000027              11497  match_ADDQ_An_indir_predec_reg7         EQU         $0027
00008004                         11498  
00008004                         11499  
00008004  =00000000              11500  match_ADDQ_reg0                         EQU         $0000
00008004  =00000200              11501  match_ADDQ_reg1                         EQU         $0200
00008004  =00000400              11502  match_ADDQ_reg2                         EQU         $0400
00008004  =00000600              11503  match_ADDQ_reg3                         EQU         $0600
00008004  =00000800              11504  match_ADDQ_reg4                         EQU         $0800
00008004  =00000A00              11505  match_ADDQ_reg5                         EQU         $0A00
00008004  =00000C00              11506  match_ADDQ_reg6                         EQU         $0C00
00008004  =00000E00              11507  match_ADDQ_reg7                         EQU         $0E00
00008004                         11508  
00008004                         11509  
00008004                         11510  
00008004                         11511  
00008004                         11512  
00008004                         11513  
00008004                         11514  
00008004                         11515  
00008004                         11516  -------------------- end include --------------------
00008004                         11517              INCLUDE 'strings.x68'
00008004= 4D 4F 56 45 2E 42 00   11518  opcode_MOVEB    DC.B    'MOVE.B',0
0000800B= 4D 4F 56 45 2E 57 00   11519  opcode_MOVEW    DC.B    'MOVE.W',0
00008012= 4D 4F 56 45 2E 4C 00   11520  opcode_MOVEL    DC.B    'MOVE.L',0
00008019= 4D 4F 56 45 4D 00      11521  opcode_MOVEM    DC.B    'MOVEM',0
0000801F= 4D 4F 56 45 51 00      11522  opcode_MOVEQ    DC.B    'MOVEQ',0
00008025= 4D 4F 56 45 41 2E ...  11523  opcode_MOVEAB   DC.B    'MOVEA.B',0
0000802D= 4D 4F 56 45 41 2E ...  11524  opcode_MOVEAW   DC.B    'MOVEA.W',0
00008035= 4D 4F 56 45 41 2E ...  11525  opcode_MOVEAL   DC.B    'MOVEA.L',0
0000803D= 4E 4F 50 00            11526  opcode_NOP      DC.B    'NOP',0
00008041= 41 44 44 2E 42 00      11527  opcode_ADDB     DC.B    'ADD.B',0
00008047= 41 44 44 2E 57 00      11528  opcode_ADDW     DC.B    'ADD.W',0
0000804D= 41 44 44 2E 4C 00      11529  opcode_ADDL     DC.B    'ADD.L',0
00008053= 41 44 44 41 2E 57 00   11530  opcode_ADDAW    DC.B    'ADDA.W',0
0000805A= 41 44 44 41 2E 4C 00   11531  opcode_ADDAL    DC.B    'ADDA.L',0
00008061= 41 44 44 51 2E 42 00   11532  opcode_ADDQB    DC.B    'ADDQ.B',0
00008068= 41 44 44 51 2E 57 00   11533  opcode_ADDQW    DC.B    'ADDQ.W',0
0000806F= 41 44 44 51 2E 4C 00   11534  opcode_ADDQL    DC.B    'ADDQ.L',0
00008076= 53 55 42 2E 42 00      11535  opcode_SUBB     DC.B    'SUB.B',0
0000807C= 53 55 42 2E 57 00      11536  opcode_SUBW     DC.B    'SUB.W',0
00008082= 53 55 42 2E 4C 00      11537  opcode_SUBL     DC.B    'SUB.L',0
00008088= 4C 45 41 00            11538  opcode_LEA      DC.B    'LEA',0
0000808C= 41 4E 44 2E 42 00      11539  opcode_ANDB     DC.B    'AND.B',0
00008092= 41 4E 44 2E 57 00      11540  opcode_ANDW     DC.B    'AND.W',0
00008098= 41 4E 44 2E 4C 00      11541  opcode_ANDL     DC.B    'AND.L',0
0000809E= 4F 52 2E 42 00         11542  opcode_ORB      DC.B    'OR.B',0
000080A3= 4F 52 2E 57 00         11543  opcode_ORW      DC.B    'OR.W',0
000080A8= 4F 52 2E 4C 00         11544  opcode_ORL      DC.B    'OR.L',0
000080AD= 4E 4F 54 2E 42 00      11545  opcode_NOTB     DC.B    'NOT.B',0
000080B3= 4E 4F 54 2E 57 00      11546  opcode_NOTW     DC.B    'NOT.W',0
000080B9= 4E 4F 54 2E 4C 00      11547  opcode_NOTL     DC.B    'NOT.L',0
000080BF= 4C 53 4C 2E 42 00      11548  opcode_LSLB     DC.B    'LSL.B',0
000080C5= 4C 53 4C 2E 57 00      11549  opcode_LSLW     DC.B    'LSL.W',0
000080CB= 4C 53 4C 2E 4C 00      11550  opcode_LSLL     DC.B    'LSL.L',0
000080D1= 4C 53 52 2E 42 00      11551  opcode_LSRB     DC.B    'LSR.B',0
000080D7= 4C 53 52 2E 57 00      11552  opcode_LSRW     DC.B    'LSR.W',0
000080DD= 4C 53 52 2E 4C 00      11553  opcode_LSRL     DC.B    'LSR.L',0
000080E3= 41 53 4C 2E 42 00      11554  opcode_ASLB     DC.B    'ASL.B',0
000080E9= 41 53 4C 2E 57 00      11555  opcode_ASLW     DC.B    'ASL.W',0
000080EF= 41 53 4C 2E 4C 00      11556  opcode_ASLL     DC.B    'ASL.L',0
000080F5= 41 53 52 2E 42 00      11557  opcode_ASRB     DC.B    'ASR.B',0
000080FB= 41 53 52 2E 57 00      11558  opcode_ASRW     DC.B    'ASR.W',0
00008101= 41 53 52 2E 4C 00      11559  opcode_ASRL     DC.B    'ASR.L',0
00008107= 52 4F 4C 2E 42 00      11560  opcode_ROLB     DC.B    'ROL.B',0
0000810D= 52 4F 4C 2E 57 00      11561  opcode_ROLW     DC.B    'ROL.W',0
00008113= 52 4F 4C 2E 4C 00      11562  opcode_ROLL     DC.B    'ROL.L',0
00008119= 52 4F 52 2E 42 00      11563  opcode_RORB     DC.B    'ROR.B',0
0000811F= 52 4F 52 2E 57 00      11564  opcode_RORW     DC.B    'ROR.W',0
00008125= 52 4F 52 2E 4C 00      11565  opcode_RORL     DC.B    'ROR.L',0
0000812B= 42 47 54 00            11566  opcode_BGT      DC.B    'BGT',0
0000812F= 42 47 54 2E 42 00      11567  opcode_BGTB     DC.B    'BGT.B',0
00008135= 42 47 54 2E 57 00      11568  opcode_BGTW     DC.B    'BGT.W',0
0000813B= 42 4C 45 00            11569  opcode_BLE      DC.B    'BLE',0
0000813F= 42 4C 45 2E 42 00      11570  opcode_BLEB     DC.B    'BLE.B',0
00008145= 42 4C 45 2E 57 00      11571  opcode_BLEW     DC.B    'BLE.W',0
0000814B= 42 45 51 00            11572  opcode_BEQ      DC.B    'BEQ',0
0000814F= 42 45 51 2E 42 00      11573  opcode_BEQB     DC.B    'BEQ.B',0
00008155= 42 45 51 2E 57 00      11574  opcode_BEQW     DC.B    'BEQ.W',0
0000815B= 4A 53 52 00            11575  opcode_JSR      DC.B    'JSR',0
0000815F= 52 54 53 00            11576  opcode_RTS      DC.B    'RTS',0
00008163= 42 52 41 00            11577  opcode_BRA      DC.B    'BRA',0
00008167= 42 52 41 2E 42 00      11578  opcode_BRAB     DC.B    'BRA.B',0
0000816D= 42 52 41 2E 57 00      11579  opcode_BRAW     DC.B    'BRA.W',0
00008173= 4D 4F 56 45 4D 2E ...  11580  opcode_MOVEMW   DC.B    'MOVEM.W',0
0000817B= 4D 4F 56 45 4D 2E ...  11581  opcode_MOVEML   DC.B    'MOVEM.L',0
00008183= 44 41 54 41 00         11582  opcode_DATA     DC.B    'DATA',0
00008188  =0000000D              11583  CR          EQU     $0D *ASCII code for carriage return
00008188  =0000000A              11584  LF          EQU     $0A *ASCII code for line feed
00008188  =00000009              11585  HT          EQU     $09 *ASCII code for horizontal tab
00008188  =00000071              11586  QT          EQU     $71 *ascii for lowercase q
00008188  =00000072              11587  RT          EQU     $72 *ascii for lowercase r
00008188                         11588  
00008188= 57 65 6C 63 6F 6D ...  11589  LOAD_MESSAGE    DC.B    'Welcome to The Disassemblers CSS 422 project',CR,LF,'Select "demo_test.s68" or another file in File->Open Data for test data',CR,LF,0
00008200= 49 66 20 79 6F 75 ...  11590  LOAD2_MESSAGE   DC.B    'If you got to this page without loading a test file,',CR,LF,'please exit and follow the directions above.',CR,LF,0
00008265= 49 6E 70 75 74 20 ...  11591  START_REQUEST   DC.B    'Input starting hexadecimal memory location in the format ',CR,LF,'"########" Ex 00009000: ',0
000082B9= 49 6E 70 75 74 20 ...  11592  END_REQUEST     DC.B    'Input ending hexadecimal memory location in the format ',CR,LF,'"########" Ex. Ex 000093BA: ',0
0000830F= 49 6E 70 75 74 20 ...  11593  NOT_HEX_MSG     DC.B    'Input was not in the hexadecimal range 0-F',0
0000833A= 49 6E 70 75 74 20 ...  11594  BAD_RANGE       DC.B    'Input is not in the range between $00009000 and $000093BA',CR,LF,0
00008376= 45 6E 64 69 6E 67 ...  11595  BAD_END         DC.B    'Ending location is less than or equal to the starting location, ',CR,LF,'please switch the inputs.',CR,LF,0
000083D4= 49 6E 70 75 74 20 ...  11596  BAD_BOUND       DC.B    'Input is not on an input boundary, please enter address divisible by 2.',CR,LF,0
0000841E= 0D 0A 00               11597  SPACE           DC.B    CR,LF,0
00008421= 50 72 65 73 73 20 ...  11598  PRESS_ENTER     DC.B    'Press ENTER to continue.',CR,LF,0
0000843C= 09 00                  11599  TAB             DC.B    HT,0
0000843E= 57 6F 75 6C 64 20 ...  11600  RESTART_Q       DC.B    'Would you like to test again?',CR,LF,'Press r to restart or q to quit.',CR,LF,0
00008480                         11601  
00008480= 49 6E 63 6F 72 72 ...  11602  ERROR_MESSAGE                   DC.B            'Incorrect EA Format',0
00008494= 44 30 00               11603  ea_D0                       DC.B        'D0',0
00008497= 44 31 00               11604  ea_D1                       DC.B        'D1',0
0000849A= 44 32 00               11605  ea_D2                       DC.B        'D2',0
0000849D= 44 33 00               11606  ea_D3                       DC.B        'D3',0
000084A0= 44 34 00               11607  ea_D4                       DC.B        'D4',0
000084A3= 44 35 00               11608  ea_D5                       DC.B        'D5',0
000084A6= 44 36 00               11609  ea_D6                       DC.B        'D6',0
000084A9= 44 37 00               11610  ea_D7                       DC.B        'D7',0
000084AC                         11611  
000084AC= 41 30 00               11612  ea_A0                       DC.B        'A0',0
000084AF= 41 31 00               11613  ea_A1                       DC.B        'A1',0
000084B2= 41 32 00               11614  ea_A2                       DC.B        'A2',0
000084B5= 41 33 00               11615  ea_A3                       DC.B        'A3',0
000084B8= 41 34 00               11616  ea_A4                       DC.B        'A4',0
000084BB= 41 35 00               11617  ea_A5                       DC.B        'A5',0
000084BE= 41 36 00               11618  ea_A6                       DC.B        'A6',0
000084C1= 41 37 00               11619  ea_A7                       DC.B        'A7',0
000084C4                         11620  
000084C4= 38 00                  11621  ea_val0                     DC.B        '8',0
000084C6= 31 00                  11622  ea_val1                     DC.B        '1',0
000084C8= 32 00                  11623  ea_val2                     DC.B        '2',0
000084CA= 33 00                  11624  ea_val3                     DC.B        '3',0
000084CC= 34 00                  11625  ea_val4                     DC.B        '4',0
000084CE= 35 00                  11626  ea_val5                     DC.B        '5',0
000084D0= 36 00                  11627  ea_val6                     DC.B        '6',0
000084D2= 37 00                  11628  ea_val7                     DC.B        '7',0
000084D4                         11629  
000084D4= 28 41 30 29 00         11630  ea_indir_A0                 DC.B        '(A0)',0
000084D9= 28 41 31 29 00         11631  ea_indir_A1                 DC.B        '(A1)',0
000084DE= 28 41 32 29 00         11632  ea_indir_A2                 DC.B        '(A2)',0
000084E3= 28 41 33 29 00         11633  ea_indir_A3                 DC.B        '(A3)',0
000084E8= 28 41 34 29 00         11634  ea_indir_A4                 DC.B        '(A4)',0
000084ED= 28 41 35 29 00         11635  ea_indir_A5                 DC.B        '(A5)',0
000084F2= 28 41 36 29 00         11636  ea_indir_A6                 DC.B        '(A6)',0
000084F7= 28 41 37 29 00         11637  ea_indir_A7                 DC.B        '(A7)',0
000084FC                         11638  
000084FC= 28 41 30 29 2B 00      11639  ea_indir_postinc_A0         DC.B        '(A0)+',0
00008502= 28 41 31 29 2B 00      11640  ea_indir_postinc_A1         DC.B        '(A1)+',0
00008508= 28 41 32 29 2B 00      11641  ea_indir_postinc_A2         DC.B        '(A2)+',0
0000850E= 28 41 33 29 2B 00      11642  ea_indir_postinc_A3         DC.B        '(A3)+',0
00008514= 28 41 34 29 2B 00      11643  ea_indir_postinc_A4         DC.B        '(A4)+',0
0000851A= 28 41 35 29 2B 00      11644  ea_indir_postinc_A5         DC.B        '(A5)+',0
00008520= 28 41 36 29 2B 00      11645  ea_indir_postinc_A6         DC.B        '(A6)+',0
00008526= 28 41 37 29 2B 00      11646  ea_indir_postinc_A7         DC.B        '(A7)+',0
0000852C                         11647  
0000852C                         11648  
0000852C= 2D 28 41 30 29 00      11649  ea_indir_predec_A0          DC.B        '-(A0)',0
00008532= 2D 28 41 31 29 00      11650  ea_indir_predec_A1          DC.B        '-(A1)',0
00008538= 2D 28 41 32 29 00      11651  ea_indir_predec_A2          DC.B        '-(A2)',0
0000853E= 2D 28 41 33 29 00      11652  ea_indir_predec_A3          DC.B        '-(A3)',0
00008544= 2D 28 41 34 29 00      11653  ea_indir_predec_A4          DC.B        '-(A4)',0
0000854A= 2D 28 41 35 29 00      11654  ea_indir_predec_A5          DC.B        '-(A5)',0
00008550= 2D 28 41 36 29 00      11655  ea_indir_predec_A6          DC.B        '-(A6)',0
00008556= 2D 28 41 37 29 00      11656  ea_indir_predec_A7          DC.B        '-(A7)',0
0000855C                         11657  
0000855C= 28 00                  11658  ea_paren_open               DC.B        '(',0
0000855E= 29 00                  11659  ea_paren_closed             DC.B        ')',0
00008560= 2E 57 00               11660  ea_abs_word_string          DC.B        '.W',0
00008563= 2E 4C 00               11661  ea_abs_long_string          DC.B        '.L',0
00008566= 24 00                  11662  ea_$                        DC.B        '$',0
00008568= 23 00                  11663  ea_lb                       DC.B            '#',0   
0000856A                         11664  
0000856A= 23 30 00               11665  ea_data0                    DC.B      '#0',0
0000856D= 23 31 00               11666  ea_data1                    DC.B      '#1',0
00008570= 23 32 00               11667  ea_data2                    DC.B      '#2',0
00008573= 23 33 00               11668  ea_data3                    DC.B      '#3',0
00008576= 23 34 00               11669  ea_data4                    DC.B      '#4',0
00008579= 23 35 00               11670  ea_data5                    DC.B      '#5',0
0000857C= 23 36 00               11671  ea_data6                    DC.B      '#6',0
0000857F= 23 37 00               11672  ea_data7                    DC.B      '#7',0
00008582                         11673  
00008582                         11674  
00008582                         11675  
00008582                         11676  
00008582                         11677  
00008582                         11678  
00008582                         11679  
00008582                         11680  
00008582                         11681  
00008582                         11682  
00008582                         11683  
00008582                         11684  
00008582                         11685  
00008582                         11686  
00008582                         11687  
00008582                         11688  -------------------- end include --------------------
00008582                         11689      
00008582                         11690  
00008582                         11691  STOP:
00008582                         11692      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_A0_OUT         3788
ADDA_A1_OUT         3796
ADDA_A2_OUT         37A4
ADDA_A3_OUT         37B2
ADDA_A4_OUT         37C0
ADDA_A5_OUT         37CE
ADDA_A6_OUT         37DC
ADDA_A7_OUT         37EA
ADDA_ABS_ADD_LONG   361A
ADDA_ABS_ADD_LONG_OUT  3AA8
ADDA_ABS_ADD_WORD   3604
ADDA_ABS_ADD_WORD_OUT  3A98
ADDA_ADD_REG_DIR    35CC
ADDA_ADD_REG_INDIR  35DA
ADDA_ADD_REG_INDIR_POSTINC  35F6
ADDA_ADD_REG_INDIR_PREDEC  35E8
ADDA_AN_INDIR_POSTINC_REG  38D8
ADDA_AN_INDIR_POSTINC_REG0_OUT  3948
ADDA_AN_INDIR_POSTINC_REG1  38E6
ADDA_AN_INDIR_POSTINC_REG1_OUT  3956
ADDA_AN_INDIR_POSTINC_REG2  38F4
ADDA_AN_INDIR_POSTINC_REG2_OUT  3964
ADDA_AN_INDIR_POSTINC_REG3  3902
ADDA_AN_INDIR_POSTINC_REG3_OUT  3972
ADDA_AN_INDIR_POSTINC_REG4  3910
ADDA_AN_INDIR_POSTINC_REG4_OUT  3980
ADDA_AN_INDIR_POSTINC_REG5  391E
ADDA_AN_INDIR_POSTINC_REG5_OUT  398E
ADDA_AN_INDIR_POSTINC_REG6  392C
ADDA_AN_INDIR_POSTINC_REG6_OUT  399C
ADDA_AN_INDIR_POSTINC_REG7  393A
ADDA_AN_INDIR_POSTINC_REG7_OUT  39AA
ADDA_AN_INDIR_PREDEC  39B8
ADDA_AN_INDIR_PREDEC_REG0_OUT  3A28
ADDA_AN_INDIR_PREDEC_REG1  39C6
ADDA_AN_INDIR_PREDEC_REG1_OUT  3A36
ADDA_AN_INDIR_PREDEC_REG2  39D4
ADDA_AN_INDIR_PREDEC_REG2_OUT  3A44
ADDA_AN_INDIR_PREDEC_REG3  39E2
ADDA_AN_INDIR_PREDEC_REG3_OUT  3A52
ADDA_AN_INDIR_PREDEC_REG4  39F0
ADDA_AN_INDIR_PREDEC_REG4_OUT  3A60
ADDA_AN_INDIR_PREDEC_REG5  39FE
ADDA_AN_INDIR_PREDEC_REG5_OUT  3A6E
ADDA_AN_INDIR_PREDEC_REG6  3A0C
ADDA_AN_INDIR_PREDEC_REG6_OUT  3A7C
ADDA_AN_INDIR_PREDEC_REG7  3A1A
ADDA_AN_INDIR_PREDEC_REG7_OUT  3A8A
ADDA_AN_INDIR_REG   37F8
ADDA_AN_INDIR_REG0_OUT  3868
ADDA_AN_INDIR_REG1  3806
ADDA_AN_INDIR_REG1_OUT  3876
ADDA_AN_INDIR_REG2  3814
ADDA_AN_INDIR_REG2_OUT  3884
ADDA_AN_INDIR_REG3  3822
ADDA_AN_INDIR_REG3_OUT  3892
ADDA_AN_INDIR_REG4  3830
ADDA_AN_INDIR_REG4_OUT  38A0
ADDA_AN_INDIR_REG5  383E
ADDA_AN_INDIR_REG5_OUT  38AE
ADDA_AN_INDIR_REG6  384C
ADDA_AN_INDIR_REG6_OUT  38BC
ADDA_AN_INDIR_REG7  385A
ADDA_AN_INDIR_REG7_OUT  38CA
ADDA_AN_REG         3718
ADDA_D0_OUT         36A8
ADDA_D1_OUT         36B6
ADDA_D2_OUT         36C4
ADDA_D3_OUT         36D2
ADDA_D4_OUT         36E0
ADDA_D5_OUT         36EE
ADDA_D6_OUT         36FC
ADDA_D7_OUT         370A
ADDA_DATA_REG_DIR   35BE
ADDA_DETERMINE_SECOND_OP  3AEE
ADDA_DN_REG         3632
ADDA_END            173C
ADDA_FAIL           1736
ADDA_IMMEDIATE_ADD  3624
ADDA_IMMEDIATE_ADD_OUT  3ABA
ADDA_IMM_ADD_L      3ADC
ADDA_IMM_ADD_W      3ACC
ADDA_L              1710
ADDA_RA1            3726
ADDA_RA2            3734
ADDA_RA3            3742
ADDA_RA4            3750
ADDA_RA5            375E
ADDA_RA6            376C
ADDA_RA7            377A
ADDA_RD1            3646
ADDA_RD2            3654
ADDA_RD3            3662
ADDA_RD4            3670
ADDA_RD5            367E
ADDA_RD6            368C
ADDA_RD7            369A
ADDA_REG0           3AF6
ADDA_REG0_OUT       3B66
ADDA_REG1           3B04
ADDA_REG1_OUT       3B6E
ADDA_REG2           3B12
ADDA_REG2_OUT       3B76
ADDA_REG3           3B20
ADDA_REG3_OUT       3B7E
ADDA_REG4           3B2E
ADDA_REG4_OUT       3B86
ADDA_REG5           3B3C
ADDA_REG5_OUT       3B8E
ADDA_REG6           3B4A
ADDA_REG6_OUT       3B96
ADDA_REG7           3B58
ADDA_REG7_OUT       3B9E
ADDA_SIZE           16E0
ADDA_SUB            35B8
ADDQ_A0_OUT         3E14
ADDQ_A1_OUT         3E1C
ADDQ_A2_OUT         3E24
ADDQ_A3_OUT         3E2C
ADDQ_A4_OUT         3E34
ADDQ_A5_OUT         3E3C
ADDQ_A6_OUT         3E44
ADDQ_A7_OUT         3E4C
ADDQ_ABS_ADD_LONG   3CE0
ADDQ_ABS_ADD_LONG_OUT  406E
ADDQ_ABS_ADD_WORD   3CCA
ADDQ_ABS_ADD_WORD_OUT  4064
ADDQ_ADD_REG_DIR    3C92
ADDQ_ADD_REG_INDIR  3CA0
ADDQ_ADD_REG_INDIR_POSTINC  3CBC
ADDQ_ADD_REG_INDIR_PREDEC  3CAE
ADDQ_AN_INDIR_PDEC_R0_OUT  4024
ADDQ_AN_INDIR_PDEC_R1  3FC2
ADDQ_AN_INDIR_PDEC_R1_OUT  402C
ADDQ_AN_INDIR_PDEC_R2  3FD0
ADDQ_AN_INDIR_PDEC_R2_OUT  4034
ADDQ_AN_INDIR_PDEC_R3  3FDE
ADDQ_AN_INDIR_PDEC_R3_OUT  403C
ADDQ_AN_INDIR_PDEC_R4  3FEC
ADDQ_AN_INDIR_PDEC_R4_OUT  4044
ADDQ_AN_INDIR_PDEC_R5  3FFA
ADDQ_AN_INDIR_PDEC_R5_OUT  404C
ADDQ_AN_INDIR_PDEC_R6  4008
ADDQ_AN_INDIR_PDEC_R6_OUT  4054
ADDQ_AN_INDIR_PDEC_R7  4016
ADDQ_AN_INDIR_PDEC_R7_OUT  405C
ADDQ_AN_INDIR_PINC_R0_OUT  3F74
ADDQ_AN_INDIR_PINC_R1  3F12
ADDQ_AN_INDIR_PINC_R1_OUT  3F7C
ADDQ_AN_INDIR_PINC_R2  3F20
ADDQ_AN_INDIR_PINC_R2_OUT  3F84
ADDQ_AN_INDIR_PINC_R3  3F2E
ADDQ_AN_INDIR_PINC_R3_OUT  3F8C
ADDQ_AN_INDIR_PINC_R4  3F3C
ADDQ_AN_INDIR_PINC_R4_OUT  3F94
ADDQ_AN_INDIR_PINC_R5  3F4A
ADDQ_AN_INDIR_PINC_R5_OUT  3F9C
ADDQ_AN_INDIR_PINC_R6  3F58
ADDQ_AN_INDIR_PINC_R6_OUT  3FA4
ADDQ_AN_INDIR_PINC_R7  3F66
ADDQ_AN_INDIR_PINC_R7_OUT  3FAC
ADDQ_AN_INDIR_PINC_REG  3F04
ADDQ_AN_INDIR_PREDEC  3FB4
ADDQ_AN_INDIR_REG   3E54
ADDQ_AN_INDIR_REG0_OUT  3EC4
ADDQ_AN_INDIR_REG1  3E62
ADDQ_AN_INDIR_REG1_OUT  3ECC
ADDQ_AN_INDIR_REG2  3E70
ADDQ_AN_INDIR_REG2_OUT  3ED4
ADDQ_AN_INDIR_REG3  3E7E
ADDQ_AN_INDIR_REG3_OUT  3EDC
ADDQ_AN_INDIR_REG4  3E8C
ADDQ_AN_INDIR_REG4_OUT  3EE4
ADDQ_AN_INDIR_REG5  3E9A
ADDQ_AN_INDIR_REG5_OUT  3EEC
ADDQ_AN_INDIR_REG6  3EA8
ADDQ_AN_INDIR_REG6_OUT  3EF4
ADDQ_AN_INDIR_REG7  3EB6
ADDQ_AN_INDIR_REG7_OUT  3EFC
ADDQ_AN_REG         3DA4
ADDQ_D0_OUT         3D64
ADDQ_D1_OUT         3D6C
ADDQ_D2_OUT         3D74
ADDQ_D3_OUT         3D7C
ADDQ_D4_OUT         3D84
ADDQ_D5_OUT         3D8C
ADDQ_D6_OUT         3D94
ADDQ_D7_OUT         3D9C
ADDQ_DATA_REG_DIR   3C84
ADDQ_DETERMINE_SECOND_OPERAND  3C84
ADDQ_DN_REG         3CEE
ADDQ_END            1EB2
ADDQ_FAIL           1EAC
ADDQ_L              1E86
ADDQ_RA1            3DB2
ADDQ_RA2            3DC0
ADDQ_RA3            3DCE
ADDQ_RA4            3DDC
ADDQ_RA5            3DEA
ADDQ_RA6            3DF8
ADDQ_RA7            3E06
ADDQ_RD1            3D02
ADDQ_RD2            3D10
ADDQ_RD3            3D1E
ADDQ_RD4            3D2C
ADDQ_RD5            3D3A
ADDQ_RD6            3D48
ADDQ_RD7            3D56
ADDQ_REG0           3BB4
ADDQ_REG0_OUT       3C24
ADDQ_REG1           3BC2
ADDQ_REG1_OUT       3C30
ADDQ_REG2           3BD0
ADDQ_REG2_OUT       3C3C
ADDQ_REG3           3BDE
ADDQ_REG3_OUT       3C48
ADDQ_REG4           3BEC
ADDQ_REG4_OUT       3C54
ADDQ_REG5           3BFA
ADDQ_REG5_OUT       3C60
ADDQ_REG6           3C08
ADDQ_REG6_OUT       3C6C
ADDQ_REG7           3C16
ADDQ_REG7_OUT       3C78
ADDQ_SIZE           1E30
ADDQ_SUB            3BA6
ADDQ_W              1E60
ADD_ADD             2394
ADD_DETERMINE_SECOND_OP  27E8
ADD_DETERMINE_SECOND_OPERAND  2978
ADD_DN_EA           28A0
ADD_DN_EA_ABS_ADD_LONG  29C0
ADD_DN_EA_ABS_ADD_LONG_OUT  2BEE
ADD_DN_EA_ABS_ADD_WORD  29AA
ADD_DN_EA_ABS_ADD_WORD_OUT  2BE4
ADD_DN_EA_ADD_REG_INDIR  2980
ADD_DN_EA_ADD_REG_INDIR_POSTINC  299C
ADD_DN_EA_ADD_REG_INDIR_PREDEC  298E
ADD_DN_EA_AN_INDIR_POSTINC_REG  2A84
ADD_DN_EA_AN_INDIR_POSTINC_REG1  2A92
ADD_DN_EA_AN_INDIR_POSTINC_REG2  2AA0
ADD_DN_EA_AN_INDIR_POSTINC_REG3  2AAE
ADD_DN_EA_AN_INDIR_POSTINC_REG4  2ABC
ADD_DN_EA_AN_INDIR_POSTINC_REG5  2ACA
ADD_DN_EA_AN_INDIR_POSTINC_REG6  2AD8
ADD_DN_EA_AN_INDIR_POSTINC_REG7  2AE6
ADD_DN_EA_AN_INDIR_POSTIN_R0_OUT  2AF4
ADD_DN_EA_AN_INDIR_POSTIN_R1_OUT  2AFC
ADD_DN_EA_AN_INDIR_POSTIN_R2_OUT  2B04
ADD_DN_EA_AN_INDIR_POSTIN_R3_OUT  2B0C
ADD_DN_EA_AN_INDIR_POSTIN_R4_OUT  2B14
ADD_DN_EA_AN_INDIR_POSTIN_R5_OUT  2B1C
ADD_DN_EA_AN_INDIR_POSTIN_R6_OUT  2B24
ADD_DN_EA_AN_INDIR_POSTIN_R7_OUT  2B2C
ADD_DN_EA_AN_INDIR_PREDEC  2B34
ADD_DN_EA_AN_INDIR_PREDEC_REG1  2B42
ADD_DN_EA_AN_INDIR_PREDEC_REG2  2B50
ADD_DN_EA_AN_INDIR_PREDEC_REG3  2B5E
ADD_DN_EA_AN_INDIR_PREDEC_REG4  2B6C
ADD_DN_EA_AN_INDIR_PREDEC_REG5  2B7A
ADD_DN_EA_AN_INDIR_PREDEC_REG6  2B88
ADD_DN_EA_AN_INDIR_PREDEC_REG7  2B96
ADD_DN_EA_AN_INDIR_PREDE_R0_OUT  2BA4
ADD_DN_EA_AN_INDIR_PREDE_R1_OUT  2BAC
ADD_DN_EA_AN_INDIR_PREDE_R2_OUT  2BB4
ADD_DN_EA_AN_INDIR_PREDE_R3_OUT  2BBC
ADD_DN_EA_AN_INDIR_PREDE_R4_OUT  2BC4
ADD_DN_EA_AN_INDIR_PREDE_R5_OUT  2BCC
ADD_DN_EA_AN_INDIR_PREDE_R6_OUT  2BD4
ADD_DN_EA_AN_INDIR_PREDE_R7_OUT  2BDC
ADD_DN_EA_AN_INDIR_REG  29CE
ADD_DN_EA_AN_INDIR_REG0_OUT  2A44
ADD_DN_EA_AN_INDIR_REG1  29E2
ADD_DN_EA_AN_INDIR_REG1_OUT  2A4C
ADD_DN_EA_AN_INDIR_REG2  29F0
ADD_DN_EA_AN_INDIR_REG2_OUT  2A54
ADD_DN_EA_AN_INDIR_REG3  29FE
ADD_DN_EA_AN_INDIR_REG3_OUT  2A5C
ADD_DN_EA_AN_INDIR_REG4  2A0C
ADD_DN_EA_AN_INDIR_REG4_OUT  2A64
ADD_DN_EA_AN_INDIR_REG5  2A1A
ADD_DN_EA_AN_INDIR_REG5_OUT  2A6C
ADD_DN_EA_AN_INDIR_REG6  2A28
ADD_DN_EA_AN_INDIR_REG6_OUT  2A74
ADD_DN_EA_AN_INDIR_REG7  2A36
ADD_DN_EA_AN_INDIR_REG7_OUT  2A7C
ADD_DN_EA_IMMEDIATE_ADD_OUT  2BFA
ADD_DN_EA_IMM_ADD_L  2C16
ADD_DN_EA_IMM_ADD_W  2C0C
ADD_DN_EA_MATCH     23C4
ADD_DN_EA_MATCH_L   23E0
ADD_DN_EA_MATCH_W   23D2
ADD_EA_DN           23EE
ADD_EA_DN_ABS_ADD_LONG  2444
ADD_EA_DN_ABS_ADD_LONG_OUT  27AC
ADD_EA_DN_ABS_ADD_WORD  242E
ADD_EA_DN_ABS_ADD_WORD_OUT  27A2
ADD_EA_DN_ADD_REG_INDIR  2404
ADD_EA_DN_ADD_REG_INDIR_POSTINC  2420
ADD_EA_DN_ADD_REG_INDIR_PREDEC  2412
ADD_EA_DN_AN_INDIR_POSTINC_REG  2602
ADD_EA_DN_AN_INDIR_POSTINC_REG1  2610
ADD_EA_DN_AN_INDIR_POSTINC_REG2  261E
ADD_EA_DN_AN_INDIR_POSTINC_REG3  262C
ADD_EA_DN_AN_INDIR_POSTINC_REG4  263A
ADD_EA_DN_AN_INDIR_POSTINC_REG5  2648
ADD_EA_DN_AN_INDIR_POSTINC_REG6  2656
ADD_EA_DN_AN_INDIR_POSTINC_REG7  2664
ADD_EA_DN_AN_INDIR_POSTIN_R0_OUT  2672
ADD_EA_DN_AN_INDIR_POSTIN_R1_OUT  267E
ADD_EA_DN_AN_INDIR_POSTIN_R2_OUT  268A
ADD_EA_DN_AN_INDIR_POSTIN_R3_OUT  2696
ADD_EA_DN_AN_INDIR_POSTIN_R4_OUT  26A2
ADD_EA_DN_AN_INDIR_POSTIN_R5_OUT  26AE
ADD_EA_DN_AN_INDIR_POSTIN_R6_OUT  26BA
ADD_EA_DN_AN_INDIR_POSTIN_R7_OUT  26C6
ADD_EA_DN_AN_INDIR_PREDEC  26D2
ADD_EA_DN_AN_INDIR_PREDEC_REG1  26E0
ADD_EA_DN_AN_INDIR_PREDEC_REG2  26EE
ADD_EA_DN_AN_INDIR_PREDEC_REG3  26FC
ADD_EA_DN_AN_INDIR_PREDEC_REG4  270A
ADD_EA_DN_AN_INDIR_PREDEC_REG5  2718
ADD_EA_DN_AN_INDIR_PREDEC_REG6  2726
ADD_EA_DN_AN_INDIR_PREDEC_REG7  2734
ADD_EA_DN_AN_INDIR_PREDE_R0_OUT  2742
ADD_EA_DN_AN_INDIR_PREDE_R1_OUT  274E
ADD_EA_DN_AN_INDIR_PREDE_R2_OUT  275A
ADD_EA_DN_AN_INDIR_PREDE_R3_OUT  2766
ADD_EA_DN_AN_INDIR_PREDE_R4_OUT  2772
ADD_EA_DN_AN_INDIR_PREDE_R5_OUT  277E
ADD_EA_DN_AN_INDIR_PREDE_R6_OUT  278A
ADD_EA_DN_AN_INDIR_PREDE_R7_OUT  2796
ADD_EA_DN_AN_INDIR_REG  2532
ADD_EA_DN_AN_INDIR_REG0_OUT  25A2
ADD_EA_DN_AN_INDIR_REG1  2540
ADD_EA_DN_AN_INDIR_REG1_OUT  25AE
ADD_EA_DN_AN_INDIR_REG2  254E
ADD_EA_DN_AN_INDIR_REG2_OUT  25BA
ADD_EA_DN_AN_INDIR_REG3  255C
ADD_EA_DN_AN_INDIR_REG3_OUT  25C6
ADD_EA_DN_AN_INDIR_REG4  256A
ADD_EA_DN_AN_INDIR_REG4_OUT  25D2
ADD_EA_DN_AN_INDIR_REG5  2578
ADD_EA_DN_AN_INDIR_REG5_OUT  25DE
ADD_EA_DN_AN_INDIR_REG6  2586
ADD_EA_DN_AN_INDIR_REG6_OUT  25EA
ADD_EA_DN_AN_INDIR_REG7  2594
ADD_EA_DN_AN_INDIR_REG7_OUT  25F6
ADD_EA_DN_D0_OUT    24D2
ADD_EA_DN_D1_OUT    24DE
ADD_EA_DN_D2_OUT    24EA
ADD_EA_DN_D3_OUT    24F6
ADD_EA_DN_D4_OUT    2502
ADD_EA_DN_D5_OUT    250E
ADD_EA_DN_D6_OUT    251A
ADD_EA_DN_D7_OUT    2526
ADD_EA_DN_DATA_REG_DIR  23F6
ADD_EA_DN_DN_REG    245C
ADD_EA_DN_IMMEDIATE_ADD  244E
ADD_EA_DN_IMMEDIATE_ADD_OUT  27B8
ADD_EA_DN_IMM_ADD_L  27D8
ADD_EA_DN_IMM_ADD_W  27CA
ADD_EA_DN_MATCH     239A
ADD_EA_DN_MATCH_L   23B6
ADD_EA_DN_MATCH_W   23A8
ADD_EA_DN_RD1       2470
ADD_EA_DN_RD2       247E
ADD_EA_DN_RD3       248C
ADD_EA_DN_RD4       249A
ADD_EA_DN_RD5       24A8
ADD_EA_DN_RD6       24B6
ADD_EA_DN_RD7       24C4
ADD_END             17C4
ADD_ERROR           2C22
ADD_FAIL            17BE
ADD_L               1798
ADD_SIZE            1742
ADD_W               1772
AND_DETERMINE_SECOND_OP  3196
AND_DETERMINE_SECOND_OPERAND  3336
AND_DN_EA           324E
AND_DN_EA_MATCH     2C30
AND_DN_EA_MATCH_L   2C4C
AND_DN_EA_MATCH_W   2C3E
AND_EA_DN           2C84
AND_EA_DN_A0_OUT    2E30
AND_EA_DN_A1_OUT    2E3E
AND_EA_DN_A2_OUT    2E4C
AND_EA_DN_A3_OUT    2E5A
AND_EA_DN_A4_OUT    2E68
AND_EA_DN_A5_OUT    2E76
AND_EA_DN_A6_OUT    2E84
AND_EA_DN_A7_OUT    2E92
AND_EA_DN_ABS_ADD_LONG  2CCC
AND_EA_DN_ABS_ADD_LONG_OUT  3150
AND_EA_DN_ABS_ADD_WORD  2CB6
AND_EA_DN_ABS_ADD_WORD_OUT  3140
AND_EA_DN_ADD_REG_INDIR  2C8C
AND_EA_DN_ADD_REG_INDIR_PDEC  2C9A
AND_EA_DN_ADD_REG_INDIR_PINC  2CA8
AND_EA_DN_AN_INDIR_PDEC_R0_OUT  30D0
AND_EA_DN_AN_INDIR_PDEC_R1  306E
AND_EA_DN_AN_INDIR_PDEC_R1_OUT  30DE
AND_EA_DN_AN_INDIR_PDEC_R2  307C
AND_EA_DN_AN_INDIR_PDEC_R2_OUT  30EC
AND_EA_DN_AN_INDIR_PDEC_R3  308A
AND_EA_DN_AN_INDIR_PDEC_R3_OUT  30FA
AND_EA_DN_AN_INDIR_PDEC_R4  3098
AND_EA_DN_AN_INDIR_PDEC_R4_OUT  3108
AND_EA_DN_AN_INDIR_PDEC_R5  30A6
AND_EA_DN_AN_INDIR_PDEC_R5_OUT  3116
AND_EA_DN_AN_INDIR_PDEC_R6  30B4
AND_EA_DN_AN_INDIR_PDEC_R6_OUT  3124
AND_EA_DN_AN_INDIR_PDEC_R7  30C2
AND_EA_DN_AN_INDIR_PDEC_R7_OUT  3132
AND_EA_DN_AN_INDIR_PINC_R0_OUT  2FF0
AND_EA_DN_AN_INDIR_PINC_R1  2F8E
AND_EA_DN_AN_INDIR_PINC_R1_OUT  2FFE
AND_EA_DN_AN_INDIR_PINC_R2  2F9C
AND_EA_DN_AN_INDIR_PINC_R2_OUT  300C
AND_EA_DN_AN_INDIR_PINC_R3  2FAA
AND_EA_DN_AN_INDIR_PINC_R3_OUT  301A
AND_EA_DN_AN_INDIR_PINC_R4  2FB8
AND_EA_DN_AN_INDIR_PINC_R4_OUT  3028
AND_EA_DN_AN_INDIR_PINC_R5  2FC6
AND_EA_DN_AN_INDIR_PINC_R5_OUT  3036
AND_EA_DN_AN_INDIR_PINC_R6  2FD4
AND_EA_DN_AN_INDIR_PINC_R6_OUT  3044
AND_EA_DN_AN_INDIR_PINC_R7  2FE2
AND_EA_DN_AN_INDIR_PINC_R7_OUT  3052
AND_EA_DN_AN_INDIR_PINC_REG  2F80
AND_EA_DN_AN_INDIR_PREDEC  3060
AND_EA_DN_AN_INDIR_REG  2EA0
AND_EA_DN_AN_INDIR_REG0_OUT  2F10
AND_EA_DN_AN_INDIR_REG1  2EAE
AND_EA_DN_AN_INDIR_REG1_OUT  2F1E
AND_EA_DN_AN_INDIR_REG2  2EBC
AND_EA_DN_AN_INDIR_REG2_OUT  2F2C
AND_EA_DN_AN_INDIR_REG3  2ECA
AND_EA_DN_AN_INDIR_REG3_OUT  2F3A
AND_EA_DN_AN_INDIR_REG4  2ED8
AND_EA_DN_AN_INDIR_REG4_OUT  2F48
AND_EA_DN_AN_INDIR_REG5  2EE6
AND_EA_DN_AN_INDIR_REG5_OUT  2F56
AND_EA_DN_AN_INDIR_REG6  2EF4
AND_EA_DN_AN_INDIR_REG6_OUT  2F64
AND_EA_DN_AN_INDIR_REG7  2F02
AND_EA_DN_AN_INDIR_REG7_OUT  2F72
AND_EA_DN_AN_REG    2DC0
AND_EA_DN_D0_OUT    2D50
AND_EA_DN_D1_OUT    2D5E
AND_EA_DN_D2_OUT    2D6C
AND_EA_DN_D3_OUT    2D7A
AND_EA_DN_D4_OUT    2D88
AND_EA_DN_D5_OUT    2D96
AND_EA_DN_D6_OUT    2DA4
AND_EA_DN_D7_OUT    2DB2
AND_EA_DN_DN_REG    2CDA
AND_EA_DN_IMMEDIATE_ADD_OUT  3162
AND_EA_DN_IMM_ADD_L  3184
AND_EA_DN_IMM_ADD_W  3174
AND_EA_DN_MATCH     2C5A
AND_EA_DN_MATCH_L   2C76
AND_EA_DN_MATCH_W   2C68
AND_EA_DN_RA1       2DCE
AND_EA_DN_RA2       2DDC
AND_EA_DN_RA3       2DEA
AND_EA_DN_RA4       2DF8
AND_EA_DN_RA5       2E06
AND_EA_DN_RA6       2E14
AND_EA_DN_RA7       2E22
AND_EA_DN_RD1       2CEE
AND_EA_DN_RD2       2CFC
AND_EA_DN_RD3       2D0A
AND_EA_DN_RD4       2D18
AND_EA_DN_RD5       2D26
AND_EA_DN_RD6       2D34
AND_EA_DN_RD7       2D42
AND_END             1FC2
AND_FAIL            1FBC
AND_L               1F96
AND_SIZE            1F40
AND_SUB             2C2A
AND_W               1F70
ASD_ABS_ADD_LONG    40D6
ASD_ABS_ADD_LONG_OUT  430E
ASD_ABS_ADD_WORD    40C0
ASD_ABS_ADD_WORD_OUT  4304
ASD_AN_INDIR        4096
ASD_AN_INDIR_PDEC_R0_OUT  42C4
ASD_AN_INDIR_PDEC_R1  4262
ASD_AN_INDIR_PDEC_R1_OUT  42CC
ASD_AN_INDIR_PDEC_R2  4270
ASD_AN_INDIR_PDEC_R2_OUT  42D4
ASD_AN_INDIR_PDEC_R3  427E
ASD_AN_INDIR_PDEC_R3_OUT  42DC
ASD_AN_INDIR_PDEC_R4  428C
ASD_AN_INDIR_PDEC_R4_OUT  42E4
ASD_AN_INDIR_PDEC_R5  429A
ASD_AN_INDIR_PDEC_R5_OUT  42EC
ASD_AN_INDIR_PDEC_R6  42A8
ASD_AN_INDIR_PDEC_R6_OUT  42F4
ASD_AN_INDIR_PDEC_R7  42B6
ASD_AN_INDIR_PDEC_R7_OUT  42FC
ASD_AN_INDIR_PINC_R0_OUT  4214
ASD_AN_INDIR_PINC_R1  41B2
ASD_AN_INDIR_PINC_R1_OUT  421C
ASD_AN_INDIR_PINC_R2  41C0
ASD_AN_INDIR_PINC_R2_OUT  4224
ASD_AN_INDIR_PINC_R3  41CE
ASD_AN_INDIR_PINC_R3_OUT  422C
ASD_AN_INDIR_PINC_R4  41DC
ASD_AN_INDIR_PINC_R4_OUT  4234
ASD_AN_INDIR_PINC_R5  41EA
ASD_AN_INDIR_PINC_R5_OUT  423C
ASD_AN_INDIR_PINC_R6  41F8
ASD_AN_INDIR_PINC_R6_OUT  4244
ASD_AN_INDIR_PINC_R7  4206
ASD_AN_INDIR_PINC_R7_OUT  424C
ASD_AN_INDIR_POSTINC  40A4
ASD_AN_INDIR_POSTINC_REG  419C
ASD_AN_INDIR_PREDEC  40B2
ASD_AN_INDIR_PREDEC_REG  4254
ASD_AN_INDIR_REG    40E4
ASD_AN_INDIR_REG0_OUT  415C
ASD_AN_INDIR_REG1   40FA
ASD_AN_INDIR_REG1_OUT  4164
ASD_AN_INDIR_REG2   4108
ASD_AN_INDIR_REG2_OUT  416C
ASD_AN_INDIR_REG3   4116
ASD_AN_INDIR_REG3_OUT  4174
ASD_AN_INDIR_REG4   4124
ASD_AN_INDIR_REG4_OUT  417C
ASD_AN_INDIR_REG5   4132
ASD_AN_INDIR_REG5_OUT  4184
ASD_AN_INDIR_REG6   4140
ASD_AN_INDIR_REG6_OUT  418C
ASD_AN_INDIR_REG7   414E
ASD_AN_INDIR_REG7_OUT  4194
ASD_COUNT_REG0      4338
ASD_COUNT_REG0_OUT  4478
ASD_COUNT_REG1      4346
ASD_COUNT_REG1_OUT  4484
ASD_COUNT_REG2      4354
ASD_COUNT_REG2_OUT  4490
ASD_COUNT_REG3      4362
ASD_COUNT_REG3_OUT  449C
ASD_COUNT_REG4      4370
ASD_COUNT_REG4_OUT  44A8
ASD_COUNT_REG5      437E
ASD_COUNT_REG5_OUT  44B4
ASD_COUNT_REG6      438C
ASD_COUNT_REG6_OUT  44C0
ASD_COUNT_REG7      439A
ASD_COUNT_REG7_OUT  44CC
ASD_COUNT_VAL       43A8
ASD_COUNT_VAL0_OUT  4418
ASD_COUNT_VAL1      43B6
ASD_COUNT_VAL1_OUT  4424
ASD_COUNT_VAL2      43C4
ASD_COUNT_VAL2_OUT  4430
ASD_COUNT_VAL3      43D2
ASD_COUNT_VAL3_OUT  443C
ASD_COUNT_VAL4      43E0
ASD_COUNT_VAL4_OUT  4448
ASD_COUNT_VAL5      43EE
ASD_COUNT_VAL5_OUT  4454
ASD_COUNT_VAL6      43FC
ASD_COUNT_VAL6_OUT  4460
ASD_COUNT_VAL7      440A
ASD_COUNT_VAL7_OUT  446C
ASD_D0_OUT          4550
ASD_D1_OUT          4558
ASD_D2_OUT          4560
ASD_D3_OUT          4568
ASD_D4_OUT          4570
ASD_D5_OUT          4578
ASD_D6_OUT          4580
ASD_D7_OUT          4588
ASD_DN0             44D8
ASD_DN1             44EE
ASD_DN2             44FC
ASD_DN3             450A
ASD_DN4             4518
ASD_DN5             4526
ASD_DN6             4534
ASD_DN7             4542
ASD_MEM_SHIFT       408E
ASD_REG_SHIFT       431A
ASD_SHIFT_REG       4330
ASD_SUB             407A
ASLM_END            1C14
ASLR_END            1BEA
ASLR_FAIL           1BE4
ASLR_L              1BBE
ASLR_W              1B98
ASL_M_SIZE          1BF0
ASL_R_SIZE          1B68
ASRM_END            1CC6
ASRR_END            1C9C
ASRR_FAIL           1C96
ASRR_L              1C70
ASRR_W              1C4A
ASR_M_SIZE          1CA2
ASR_R_SIZE          1C1A
BAD_BOUND           83D4
BAD_END             8376
BAD_RANGE           833A
BCC_ADDRESS         19E2
BCC_ADD_END         19FE
BCC_B               17FC
BCC_END             1804
BCC_L               17D4
BCC_NEGATIVE        19F6
BCC_SIZE            17CA
BCC_W               17E8
BEQ_B               18D2
BEQ_END             18F0
BEQ_L               188A
BEQ_SIZE            1880
BEQ_W               18AE
BGT_B               185C
BGT_END             187A
BGT_L               1814
BGT_SIZE            180A
BGT_W               1838
BLE_B               1948
BLE_END             1966
BLE_L               1900
BLE_SIZE            18F6
BLE_W               1924
BOUNDARY1           10C8
BOUNDARY2           1144
BRA_B               19BE
BRA_END             19DC
BRA_L               1976
BRA_SIZE            196C
BRA_W               199A
BYTE_SIZE           1
CONT                1098
CONT2               1114
CR                  D
DATA                2150
DISP_DONE           13AE
DISP_LOOP           139A
DN_EA_ABS_ADD_LONG  337E
DN_EA_ABS_ADD_LONG_OUT  35AC
DN_EA_ABS_ADD_WORD  3368
DN_EA_ABS_ADD_WORD_OUT  35A2
DN_EA_ADD_REG0      28A8
DN_EA_ADD_REG0_OUT  2918
DN_EA_ADD_REG1      28B6
DN_EA_ADD_REG1_OUT  2924
DN_EA_ADD_REG2      28C4
DN_EA_ADD_REG2_OUT  2930
DN_EA_ADD_REG3      28D2
DN_EA_ADD_REG3_OUT  293C
DN_EA_ADD_REG4      28E0
DN_EA_ADD_REG4_OUT  2948
DN_EA_ADD_REG5      28EE
DN_EA_ADD_REG5_OUT  2954
DN_EA_ADD_REG6      28FC
DN_EA_ADD_REG6_OUT  2960
DN_EA_ADD_REG7      290A
DN_EA_ADD_REG7_OUT  296C
DN_EA_ADD_REG_INDIR  333E
DN_EA_ADD_REG_INDIR_POSTINC  335A
DN_EA_ADD_REG_INDIR_PREDEC  334C
DN_EA_AND_REG0      3256
DN_EA_AND_REG0_OUT  32C6
DN_EA_AND_REG1      3264
DN_EA_AND_REG1_OUT  32D4
DN_EA_AND_REG2      3272
DN_EA_AND_REG2_OUT  32E2
DN_EA_AND_REG3      3280
DN_EA_AND_REG3_OUT  32F0
DN_EA_AND_REG4      328E
DN_EA_AND_REG4_OUT  32FE
DN_EA_AND_REG5      329C
DN_EA_AND_REG5_OUT  330C
DN_EA_AND_REG6      32AA
DN_EA_AND_REG6_OUT  331A
DN_EA_AND_REG7      32B8
DN_EA_AND_REG7_OUT  3328
DN_EA_AN_INDIR_POSTINC_REG  3442
DN_EA_AN_INDIR_POSTINC_REG0_OUT  34B2
DN_EA_AN_INDIR_POSTINC_REG1  3450
DN_EA_AN_INDIR_POSTINC_REG1_OUT  34BA
DN_EA_AN_INDIR_POSTINC_REG2  345E
DN_EA_AN_INDIR_POSTINC_REG2_OUT  34C2
DN_EA_AN_INDIR_POSTINC_REG3  346C
DN_EA_AN_INDIR_POSTINC_REG3_OUT  34CA
DN_EA_AN_INDIR_POSTINC_REG4  347A
DN_EA_AN_INDIR_POSTINC_REG4_OUT  34D2
DN_EA_AN_INDIR_POSTINC_REG5  3488
DN_EA_AN_INDIR_POSTINC_REG5_OUT  34DA
DN_EA_AN_INDIR_POSTINC_REG6  3496
DN_EA_AN_INDIR_POSTINC_REG6_OUT  34E2
DN_EA_AN_INDIR_POSTINC_REG7  34A4
DN_EA_AN_INDIR_POSTINC_REG7_OUT  34EA
DN_EA_AN_INDIR_PREDEC  34F2
DN_EA_AN_INDIR_PREDEC_REG0_OUT  3562
DN_EA_AN_INDIR_PREDEC_REG1  3500
DN_EA_AN_INDIR_PREDEC_REG1_OUT  356A
DN_EA_AN_INDIR_PREDEC_REG2  350E
DN_EA_AN_INDIR_PREDEC_REG2_OUT  3572
DN_EA_AN_INDIR_PREDEC_REG3  351C
DN_EA_AN_INDIR_PREDEC_REG3_OUT  357A
DN_EA_AN_INDIR_PREDEC_REG4  352A
DN_EA_AN_INDIR_PREDEC_REG4_OUT  3582
DN_EA_AN_INDIR_PREDEC_REG5  3538
DN_EA_AN_INDIR_PREDEC_REG5_OUT  358A
DN_EA_AN_INDIR_PREDEC_REG6  3546
DN_EA_AN_INDIR_PREDEC_REG6_OUT  3592
DN_EA_AN_INDIR_PREDEC_REG7  3554
DN_EA_AN_INDIR_PREDEC_REG7_OUT  359A
DN_EA_AN_INDIR_REG  338C
DN_EA_AN_INDIR_REG0_OUT  3402
DN_EA_AN_INDIR_REG1  33A0
DN_EA_AN_INDIR_REG1_OUT  340A
DN_EA_AN_INDIR_REG2  33AE
DN_EA_AN_INDIR_REG2_OUT  3412
DN_EA_AN_INDIR_REG3  33BC
DN_EA_AN_INDIR_REG3_OUT  341A
DN_EA_AN_INDIR_REG4  33CA
DN_EA_AN_INDIR_REG4_OUT  3422
DN_EA_AN_INDIR_REG5  33D8
DN_EA_AN_INDIR_REG5_OUT  342A
DN_EA_AN_INDIR_REG6  33E6
DN_EA_AN_INDIR_REG6_OUT  3432
DN_EA_AN_INDIR_REG7  33F4
DN_EA_AN_INDIR_REG7_OUT  343A
DN_EA_OR_REG0       7784
DN_EA_OR_REG0_OUT   77F4
DN_EA_OR_REG1       7792
DN_EA_OR_REG1_OUT   7800
DN_EA_OR_REG2       77A0
DN_EA_OR_REG2_OUT   780C
DN_EA_OR_REG3       77AE
DN_EA_OR_REG3_OUT   7818
DN_EA_OR_REG4       77BC
DN_EA_OR_REG4_OUT   7824
DN_EA_OR_REG5       77CA
DN_EA_OR_REG5_OUT   7830
DN_EA_OR_REG6       77D8
DN_EA_OR_REG6_OUT   783C
DN_EA_OR_REG7       77E6
DN_EA_OR_REG7_OUT   7848
DN_EA_SUB_REG0      5F36
DN_EA_SUB_REG0_OUT  5FA6
DN_EA_SUB_REG1      5F44
DN_EA_SUB_REG1_OUT  5FB2
DN_EA_SUB_REG2      5F52
DN_EA_SUB_REG2_OUT  5FBE
DN_EA_SUB_REG3      5F60
DN_EA_SUB_REG3_OUT  5FCA
DN_EA_SUB_REG4      5F6E
DN_EA_SUB_REG4_OUT  5FD6
DN_EA_SUB_REG5      5F7C
DN_EA_SUB_REG5_OUT  5FE2
DN_EA_SUB_REG6      5F8A
DN_EA_SUB_REG6_OUT  5FEE
DN_EA_SUB_REG7      5F98
DN_EA_SUB_REG7_OUT  5FFA
EA_$                8566
EA_A0               84AC
EA_A1               84AF
EA_A2               84B2
EA_A3               84B5
EA_A4               84B8
EA_A5               84BB
EA_A6               84BE
EA_A7               84C1
EA_ABS_LONG_STRING  8563
EA_ABS_WORD_STRING  8560
EA_D0               8494
EA_D1               8497
EA_D2               849A
EA_D3               849D
EA_D4               84A0
EA_D5               84A3
EA_D6               84A6
EA_D7               84A9
EA_DATA0            856A
EA_DATA1            856D
EA_DATA2            8570
EA_DATA3            8573
EA_DATA4            8576
EA_DATA5            8579
EA_DATA6            857C
EA_DATA7            857F
EA_DN_ADD_REG0      27F0
EA_DN_ADD_REG0_OUT  2860
EA_DN_ADD_REG1      27FE
EA_DN_ADD_REG1_OUT  2868
EA_DN_ADD_REG2      280C
EA_DN_ADD_REG2_OUT  2870
EA_DN_ADD_REG3      281A
EA_DN_ADD_REG3_OUT  2878
EA_DN_ADD_REG4      2828
EA_DN_ADD_REG4_OUT  2880
EA_DN_ADD_REG5      2836
EA_DN_ADD_REG5_OUT  2888
EA_DN_ADD_REG6      2844
EA_DN_ADD_REG6_OUT  2890
EA_DN_ADD_REG7      2852
EA_DN_ADD_REG7_OUT  2898
EA_DN_AND_REG0      319E
EA_DN_AND_REG0_OUT  320E
EA_DN_AND_REG1      31AC
EA_DN_AND_REG1_OUT  3216
EA_DN_AND_REG2      31BA
EA_DN_AND_REG2_OUT  321E
EA_DN_AND_REG3      31C8
EA_DN_AND_REG3_OUT  3226
EA_DN_AND_REG4      31D6
EA_DN_AND_REG4_OUT  322E
EA_DN_AND_REG5      31E4
EA_DN_AND_REG5_OUT  3236
EA_DN_AND_REG6      31F2
EA_DN_AND_REG6_OUT  323E
EA_DN_AND_REG7      3200
EA_DN_AND_REG7_OUT  3246
EA_DN_OR_REG0       76CC
EA_DN_OR_REG0_OUT   773C
EA_DN_OR_REG1       76DA
EA_DN_OR_REG1_OUT   7744
EA_DN_OR_REG2       76E8
EA_DN_OR_REG2_OUT   774C
EA_DN_OR_REG3       76F6
EA_DN_OR_REG3_OUT   7754
EA_DN_OR_REG4       7704
EA_DN_OR_REG4_OUT   775C
EA_DN_OR_REG5       7712
EA_DN_OR_REG5_OUT   7764
EA_DN_OR_REG6       7720
EA_DN_OR_REG6_OUT   776C
EA_DN_OR_REG7       772E
EA_DN_OR_REG7_OUT   7774
EA_DN_SUB_REG0      5E7E
EA_DN_SUB_REG0_OUT  5EEE
EA_DN_SUB_REG1      5E8C
EA_DN_SUB_REG1_OUT  5EF6
EA_DN_SUB_REG2      5E9A
EA_DN_SUB_REG2_OUT  5EFE
EA_DN_SUB_REG3      5EA8
EA_DN_SUB_REG3_OUT  5F06
EA_DN_SUB_REG4      5EB6
EA_DN_SUB_REG4_OUT  5F0E
EA_DN_SUB_REG5      5EC4
EA_DN_SUB_REG5_OUT  5F16
EA_DN_SUB_REG6      5ED2
EA_DN_SUB_REG6_OUT  5F1E
EA_DN_SUB_REG7      5EE0
EA_DN_SUB_REG7_OUT  5F26
EA_INDIR_A0         84D4
EA_INDIR_A1         84D9
EA_INDIR_A2         84DE
EA_INDIR_A3         84E3
EA_INDIR_A4         84E8
EA_INDIR_A5         84ED
EA_INDIR_A6         84F2
EA_INDIR_A7         84F7
EA_INDIR_POSTINC_A0  84FC
EA_INDIR_POSTINC_A1  8502
EA_INDIR_POSTINC_A2  8508
EA_INDIR_POSTINC_A3  850E
EA_INDIR_POSTINC_A4  8514
EA_INDIR_POSTINC_A5  851A
EA_INDIR_POSTINC_A6  8520
EA_INDIR_POSTINC_A7  8526
EA_INDIR_PREDEC_A0  852C
EA_INDIR_PREDEC_A1  8532
EA_INDIR_PREDEC_A2  8538
EA_INDIR_PREDEC_A3  853E
EA_INDIR_PREDEC_A4  8544
EA_INDIR_PREDEC_A5  854A
EA_INDIR_PREDEC_A6  8550
EA_INDIR_PREDEC_A7  8556
EA_LB               8568
EA_PAREN_CLOSED     855E
EA_PAREN_OPEN       855C
EA_VAL0             84C4
EA_VAL1             84C6
EA_VAL2             84C8
EA_VAL3             84CA
EA_VAL4             84CC
EA_VAL5             84CE
EA_VAL6             84D0
EA_VAL7             84D2
END_ADR             73BA
END_AN              235C
END_AQ              2340
END_BAD             1172
END_DATA            238E
END_G1              21D8
END_G2              221E
END_G3              225C
END_G4              22EA
END_MOVEQ           2378
END_MV              2172
END_OP              2156
END_OR              236A
END_REQUEST         82B9
END_SB              234E
ENTR_LP             11A8
ERR                 1030
ERROR               71AA
ERROR_MESSAGE       8480
EXIT_LOOP           1216
GROUP1_DECODE       2184
GROUP2_DECODE       2208
GROUP3_DECODE       2232
GROUP4_DECODE       227A
HEX_CLEAR           0
HT                  9
INPUT1              106E
INPUT1PASS          10C6
INPUT2              10EA
INPUT2PASS          1142
INPUT_LOOP          1082
INPUT_LOOP2         10FE
IO_SUBROUTINE       1052
IPT_DONE            109C
IPT_DONE2           1118
JSR_ABS_ADD_LONG    45BA
JSR_ABS_ADD_LONG_OUT  4688
JSR_ABS_ADD_WORD    45A4
JSR_ABS_ADD_WORD_OUT  467E
JSR_ADD_REG_INDIR   4596
JSR_AN_INDIR_REG    45C8
JSR_AN_INDIR_REG0_OUT  463E
JSR_AN_INDIR_REG1   45DC
JSR_AN_INDIR_REG1_OUT  4646
JSR_AN_INDIR_REG2   45EA
JSR_AN_INDIR_REG2_OUT  464E
JSR_AN_INDIR_REG3   45F8
JSR_AN_INDIR_REG3_OUT  4656
JSR_AN_INDIR_REG4   4606
JSR_AN_INDIR_REG4_OUT  465E
JSR_AN_INDIR_REG5   4614
JSR_AN_INDIR_REG5_OUT  4666
JSR_AN_INDIR_REG6   4622
JSR_AN_INDIR_REG6_OUT  466E
JSR_AN_INDIR_REG7   4630
JSR_AN_INDIR_REG7_OUT  4676
JSR_SIZE            1634
JSR_SUB             4590
LEA_ABS_ADD_LONG    46BE
LEA_ABS_ADD_LONG_OUT  47B0
LEA_ABS_ADD_WORD    46A8
LEA_ABS_ADD_WORD_OUT  47A2
LEA_ADD_REG_INDIR   469A
LEA_AN_INDIR_REG    46CC
LEA_AN_INDIR_REG0_OUT  4742
LEA_AN_INDIR_REG1   46E0
LEA_AN_INDIR_REG1_OUT  474E
LEA_AN_INDIR_REG2   46EE
LEA_AN_INDIR_REG2_OUT  475A
LEA_AN_INDIR_REG3   46FC
LEA_AN_INDIR_REG3_OUT  4766
LEA_AN_INDIR_REG4   470A
LEA_AN_INDIR_REG4_OUT  4772
LEA_AN_INDIR_REG5   4718
LEA_AN_INDIR_REG5_OUT  477E
LEA_AN_INDIR_REG6   4726
LEA_AN_INDIR_REG6_OUT  478A
LEA_AN_INDIR_REG7   4734
LEA_AN_INDIR_REG7_OUT  4796
LEA_DETERMINE_SECOND_OP  47C0
LEA_REG0            47C8
LEA_REG0_OUT        4838
LEA_REG1            47D6
LEA_REG1_OUT        4840
LEA_REG2            47E4
LEA_REG2_OUT        4848
LEA_REG3            47F2
LEA_REG3_OUT        4850
LEA_REG4            4800
LEA_REG4_OUT        4858
LEA_REG5            480E
LEA_REG5_OUT        4860
LEA_REG6            481C
LEA_REG6_OUT        4868
LEA_REG7            482A
LEA_REG7_OUT        4870
LEA_SIZE            1610
LEA_SUB             4694
LETTER              103C
LF                  A
LINE_DONE           13D8
LINE_LOOP           13C4
LOAD2_MESSAGE       8200
LOAD_MESSAGE        8188
LONG_SIZE           3
LOOPM               1190
LOOPM_CONT          11D0
LOOPM_DONE          11DE
LSD_ABS_ADD_LONG    630C
LSD_ABS_ADD_LONG_OUT  6538
LSD_ABS_ADD_WORD    62F6
LSD_ABS_ADD_WORD_OUT  652E
LSD_AN_INDIR        62CC
LSD_AN_INDIR_PDEC_R0_OUT  64EE
LSD_AN_INDIR_PDEC_R1  648C
LSD_AN_INDIR_PDEC_R1_OUT  64F6
LSD_AN_INDIR_PDEC_R2  649A
LSD_AN_INDIR_PDEC_R2_OUT  64FE
LSD_AN_INDIR_PDEC_R3  64A8
LSD_AN_INDIR_PDEC_R3_OUT  6506
LSD_AN_INDIR_PDEC_R4  64B6
LSD_AN_INDIR_PDEC_R4_OUT  650E
LSD_AN_INDIR_PDEC_R5  64C4
LSD_AN_INDIR_PDEC_R5_OUT  6516
LSD_AN_INDIR_PDEC_R6  64D2
LSD_AN_INDIR_PDEC_R6_OUT  651E
LSD_AN_INDIR_PDEC_R7  64E0
LSD_AN_INDIR_PDEC_R7_OUT  6526
LSD_AN_INDIR_PINC_R0_OUT  643E
LSD_AN_INDIR_PINC_R1  63E0
LSD_AN_INDIR_PINC_R1_OUT  6446
LSD_AN_INDIR_PINC_R2  63EE
LSD_AN_INDIR_PINC_R2_OUT  644E
LSD_AN_INDIR_PINC_R3  63FC
LSD_AN_INDIR_PINC_R3_OUT  6456
LSD_AN_INDIR_PINC_R4  640A
LSD_AN_INDIR_PINC_R4_OUT  645E
LSD_AN_INDIR_PINC_R5  6418
LSD_AN_INDIR_PINC_R5_OUT  6466
LSD_AN_INDIR_PINC_R6  6426
LSD_AN_INDIR_PINC_R6_OUT  646E
LSD_AN_INDIR_PINC_R7  6430
LSD_AN_INDIR_PINC_R7_OUT  6476
LSD_AN_INDIR_POSTINC  62DA
LSD_AN_INDIR_POSTINC_REG  63D2
LSD_AN_INDIR_PREDEC  62E8
LSD_AN_INDIR_PREDEC_REG  647E
LSD_AN_INDIR_REG    631A
LSD_AN_INDIR_REG0_OUT  6392
LSD_AN_INDIR_REG1   6330
LSD_AN_INDIR_REG1_OUT  639A
LSD_AN_INDIR_REG2   633E
LSD_AN_INDIR_REG2_OUT  63A2
LSD_AN_INDIR_REG3   634C
LSD_AN_INDIR_REG3_OUT  63AA
LSD_AN_INDIR_REG4   635A
LSD_AN_INDIR_REG4_OUT  63B2
LSD_AN_INDIR_REG5   6368
LSD_AN_INDIR_REG5_OUT  63BA
LSD_AN_INDIR_REG6   6376
LSD_AN_INDIR_REG6_OUT  63C2
LSD_AN_INDIR_REG7   6384
LSD_AN_INDIR_REG7_OUT  63CA
LSD_COUNT_REG0      6562
LSD_COUNT_REG0_OUT  66A2
LSD_COUNT_REG1      6570
LSD_COUNT_REG1_OUT  66AE
LSD_COUNT_REG2      657E
LSD_COUNT_REG2_OUT  66BA
LSD_COUNT_REG3      658C
LSD_COUNT_REG3_OUT  66C6
LSD_COUNT_REG4      659A
LSD_COUNT_REG4_OUT  66D2
LSD_COUNT_REG5      65A8
LSD_COUNT_REG5_OUT  66DE
LSD_COUNT_REG6      65B6
LSD_COUNT_REG6_OUT  66EA
LSD_COUNT_REG7      65C4
LSD_COUNT_REG7_OUT  66F6
LSD_COUNT_VAL       65D2
LSD_COUNT_VAL0_OUT  6642
LSD_COUNT_VAL1      65E0
LSD_COUNT_VAL1_OUT  664E
LSD_COUNT_VAL2      65EE
LSD_COUNT_VAL2_OUT  665A
LSD_COUNT_VAL3      65FC
LSD_COUNT_VAL3_OUT  6666
LSD_COUNT_VAL4      660A
LSD_COUNT_VAL4_OUT  6672
LSD_COUNT_VAL5      6618
LSD_COUNT_VAL5_OUT  667E
LSD_COUNT_VAL6      6626
LSD_COUNT_VAL6_OUT  668A
LSD_COUNT_VAL7      6634
LSD_COUNT_VAL7_OUT  6696
LSD_D0_OUT          677A
LSD_D1_OUT          6782
LSD_D2_OUT          678A
LSD_D3_OUT          6792
LSD_D4_OUT          679A
LSD_D5_OUT          67A2
LSD_D6_OUT          67AA
LSD_D7_OUT          67B2
LSD_DN0             6702
LSD_DN1             6718
LSD_DN2             6726
LSD_DN3             6734
LSD_DN4             6742
LSD_DN5             6750
LSD_DN6             675E
LSD_DN7             676C
LSD_MEM_SHIFT       62C4
LSD_REG_SHIFT       6544
LSD_SHIFT_REG       655A
LSD_SHIFT_TYPE      62B0
LSD_SUB             62B0
LSLM_END            1AB0
LSLR_END            1A86
LSLR_FAIL           1A80
LSLR_L              1A5A
LSLR_W              1A34
LSL_M_SIZE          1A8C
LSL_R_SIZE          1A04
LSRM_END            1B62
LSRR_END            1B38
LSRR_FAIL           1B32
LSRR_L              1B0C
LSRR_W              1AE6
LSR_M_SIZE          1B3E
LSR_R_SIZE          1AB6
MAIN                1000
MAIN_LOOP           1182
MASK_ADDA           F0C0
MASK_ADDA_ABS_ADD   3F
MASK_ADDA_AN_REG    E00
MASK_ADDA_EA        FFF
MASK_ADDA_EA_MODE   38
MASK_ADDA_EA_REG    7
MASK_ADDA_EA_REG_AND_MODE  3F
MASK_ADDA_OPMODE    1C0
MASK_ADDA_REG       E00
MASK_ADDQ_ABS_ADD   3F
MASK_ADDQ_DATA      E00
MASK_ADDQ_EA        EFF
MASK_ADDQ_EA_MODE   38
MASK_ADDQ_EA_REG    7
MASK_ADDQ_EA_REG_AND_MODE  3F
MASK_ADDQ_REG       E00
MASK_ADDQ_SIZE      C0
MASK_ADD_ABS_ADD    3F
MASK_ADD_AN_REG     E00
MASK_ADD_EA         FFF
MASK_ADD_EA_MODE    38
MASK_ADD_EA_REG     7
MASK_ADD_EA_REG_AND_MODE  3F
MASK_ADD_OPMODE     1C0
MASK_ADD_REG        E00
MASK_AND_ABS_ADD    3F
MASK_AND_AN_REG     E00
MASK_AND_EA         FFF
MASK_AND_EA_MODE    38
MASK_AND_EA_REG     7
MASK_AND_EA_REG_AND_MODE  3F
MASK_AND_OPMODE     1C0
MASK_AND_REG        E00
MASK_ASD_COUNT_SHIFT  E00
MASK_ASD_DATA_REG   7
MASK_ASD_EA_MODE    38
MASK_ASD_EA_MODE_ABS_ADD  3F
MASK_ASD_EA_REG_AND_MODE  3F
MASK_ASD_REG_SHIFT  20
MASK_ASD_REG_SHIFT_IR  20
MASK_ASD_SHIFT_TYPE  C0
MASK_ASL_MEM_SHIFT_DIRECT  100
MASK_ASL_MEM_SHIFT_EA  13F
MASK_ASL_MEM_SHIFT_EA_MODE  38
MASK_ASL_MEM_SHIFT_EA_REG  7
MASK_ASL_REG_SHIFT_COUNT  E00
MASK_ASL_REG_SHIFT_DIRECT  100
MASK_ASL_REG_SHIFT_EA  FE7
MASK_ASL_REG_SHIFT_IR  20
MASK_ASL_REG_SHIFT_REG  7
MASK_ASL_REG_SHIFT_SIZE  C0
MASK_ASR_MEM_SHIFT_DIRECT  100
MASK_ASR_MEM_SHIFT_EA  13F
MASK_ASR_MEM_SHIFT_EA_MODE  38
MASK_ASR_MEM_SHIFT_EA_REG  7
MASK_ASR_REG_SHIFT_COUNT  E00
MASK_ASR_REG_SHIFT_DIRECT  100
MASK_ASR_REG_SHIFT_EA  FE7
MASK_ASR_REG_SHIFT_IR  20
MASK_ASR_REG_SHIFT_REG  7
MASK_ASR_REG_SHIFT_SIZE  C0
MASK_BCC            FF00
MASK_BCC_COND       E00
MASK_BCC_DISPLACE   FF
MASK_BCC_EA         FFF
MASK_BCC_SIZE       FF
MASK_BGT_DISPLACE   FF
MASK_BGT_EA         F00
MASK_BLE_DISPLACE   FF
MASK_BLE_EA         F00
MASK_BRA_EA         FF
MASK_JSR            FFC0
MASK_JSR_ABS_ADD    3F
MASK_JSR_AN_REG     E00
MASK_JSR_EA         3F
MASK_JSR_EA_MODE    38
MASK_JSR_EA_REG     7
MASK_JSR_EA_REG_AND_MODE  3F
MASK_LEA            F1C0
MASK_LEA_ABS_ADD    3F
MASK_LEA_AN_REG     E00
MASK_LEA_EA         E3F
MASK_LEA_EA_MODE    38
MASK_LEA_EA_REG     7
MASK_LEA_EA_REG_AND_MODE  3F
MASK_LEA_REG        E00
MASK_LSD_COUNT_SHIFT  E00
MASK_LSD_DATA_REG   7
MASK_LSD_EA_MODE    38
MASK_LSD_EA_MODE_ABS_ADD  3F
MASK_LSD_EA_REG_AND_MODE  3F
MASK_LSD_REG_SHIFT  20
MASK_LSD_REG_SHIFT_IR  20
MASK_LSD_SHIFT_TYPE  C0
MASK_LSL_MEM_SHIFT_DIRECT  100
MASK_LSL_MEM_SHIFT_EA  13F
MASK_LSL_MEM_SHIFT_EA_MODE  38
MASK_LSL_MEM_SHIFT_EA_REG  7
MASK_LSL_REG_SHIFT_COUNT  E00
MASK_LSL_REG_SHIFT_DIRECT  100
MASK_LSL_REG_SHIFT_EA  FE7
MASK_LSL_REG_SHIFT_IR  20
MASK_LSL_REG_SHIFT_REG  7
MASK_LSL_REG_SHIFT_SIZE  C0
MASK_LSR_MEM_SHIFT_DIRECT  100
MASK_LSR_MEM_SHIFT_EA  13F
MASK_LSR_MEM_SHIFT_EA_MODE  38
MASK_LSR_MEM_SHIFT_EA_REG  7
MASK_LSR_REG_SHIFT_COUNT  E00
MASK_LSR_REG_SHIFT_DIRECT  100
MASK_LSR_REG_SHIFT_EA  FE7
MASK_LSR_REG_SHIFT_IR  20
MASK_LSR_REG_SHIFT_REG  7
MASK_LSR_REG_SHIFT_SIZE  C0
MASK_MOVE           C000
MASK_MOVEA_ABS_ADD  3F
MASK_MOVEA_AN_REG   E00
MASK_MOVEA_DST_REG  E00
MASK_MOVEA_EA       E3F
MASK_MOVEA_EA_MODE  38
MASK_MOVEA_EA_REG_AND_MODE  3F
MASK_MOVEA_SRC_MODE  38
MASK_MOVEA_SRC_REG  7
MASK_MOVEM          FF80
MASK_MOVEM_ABS_ADD  38
MASK_MOVEM_DIR      400
MASK_MOVEM_DIRECT   400
MASK_MOVEM_EA       47F
MASK_MOVEM_EA_MODE  3C
MASK_MOVEM_EA_REG   7
MASK_MOVEM_EA_REG_AND_MODE  3F
MASK_MOVEM_MEM_REG_A0  100
MASK_MOVEM_MEM_REG_A1  200
MASK_MOVEM_MEM_REG_A2  400
MASK_MOVEM_MEM_REG_A3  800
MASK_MOVEM_MEM_REG_A4  1000
MASK_MOVEM_MEM_REG_A5  2000
MASK_MOVEM_MEM_REG_A6  4000
MASK_MOVEM_MEM_REG_A7  8000
MASK_MOVEM_MEM_REG_D0  100
MASK_MOVEM_MEM_REG_D1  200
MASK_MOVEM_MEM_REG_D2  400
MASK_MOVEM_MEM_REG_D3  800
MASK_MOVEM_MEM_REG_D4  1000
MASK_MOVEM_MEM_REG_D5  2000
MASK_MOVEM_MEM_REG_D6  4000
MASK_MOVEM_MEM_REG_D7  8000
MASK_MOVEM_REG_MEM_A0  80
MASK_MOVEM_REG_MEM_A1  40
MASK_MOVEM_REG_MEM_A2  20
MASK_MOVEM_REG_MEM_A3  10
MASK_MOVEM_REG_MEM_A4  8
MASK_MOVEM_REG_MEM_A5  4
MASK_MOVEM_REG_MEM_A6  2
MASK_MOVEM_REG_MEM_A7  1
MASK_MOVEM_REG_MEM_D0  8000
MASK_MOVEM_REG_MEM_D1  4000
MASK_MOVEM_REG_MEM_D2  2000
MASK_MOVEM_REG_MEM_D3  1000
MASK_MOVEM_REG_MEM_D4  800
MASK_MOVEM_REG_MEM_D5  400
MASK_MOVEM_REG_MEM_D6  200
MASK_MOVEM_REG_MEM_D7  100
MASK_MOVEM_SIZE     40
MASK_MOVEQ_DATA     FF
MASK_MOVEQ_EA       EFF
MASK_MOVEQ_FIRST_OPERAND  FF
MASK_MOVEQ_REG      E00
MASK_MOVEQ_SECOND_OP_DN  E00
MASK_MOVE_A         1C0
MASK_MOVE_DEST_ABS_ADD  1C0
MASK_MOVE_DEST_EA_MODE  1C0
MASK_MOVE_DEST_EA_REG_AND_MODE  FC0
MASK_MOVE_DST_MODE  1C0
MASK_MOVE_DST_REG   E00
MASK_MOVE_EA        FFF
MASK_MOVE_SRC_ABS_ADD  3F
MASK_MOVE_SRC_EA_MODE  38
MASK_MOVE_SRC_EA_REG_AND_MODE  3F
MASK_MOVE_SRC_MODE  7
MASK_MOVE_SRC_REG   38
MASK_NOT            FF00
MASK_NOT_EA         FF
MASK_NOT_EA_MODE    38
MASK_NOT_EA_MODE_ABS_ADD  3F
MASK_NOT_EA_REG     7
MASK_NOT_EA_REG_AND_MODE  3F
MASK_NOT_SIZE       C0
MASK_OPCODE         F000
MASK_OPMODE         1C0
MASK_OR_ABS_ADD     3F
MASK_OR_AN_REG      E00
MASK_OR_EA          FFF
MASK_OR_EA_MODE     38
MASK_OR_EA_REG      7
MASK_OR_EA_REG_OR_MODE  3F
MASK_OR_OPMODE      1C0
MASK_OR_REG         E00
MASK_ROD_COUNT_SHIFT  E00
MASK_ROD_DATA_REG   7
MASK_ROD_EA_MODE    38
MASK_ROD_EA_MODE_ABS_ADD  3F
MASK_ROD_EA_REG_AND_MODE  3F
MASK_ROD_REG_SHIFT  20
MASK_ROD_REG_SHIFT_IR  20
MASK_ROD_SHIFT_TYPE  C0
MASK_ROL_MEM_ROT_DIRECT  100
MASK_ROL_MEM_ROT_EA  13F
MASK_ROL_MEM_ROT_EA_MODE  38
MASK_ROL_MEM_ROT_EA_REG  7
MASK_ROL_REG_ROT_COUNT  E00
MASK_ROL_REG_ROT_DIRECT  100
MASK_ROL_REG_ROT_EA  FE7
MASK_ROL_REG_ROT_IR  20
MASK_ROL_REG_ROT_REG  7
MASK_ROL_REG_ROT_SIZE  C00
MASK_ROR_MEM_ROT_DIRECT  100
MASK_ROR_MEM_ROT_EA  13F
MASK_ROR_MEM_ROT_EA_MODE  38
MASK_ROR_MEM_ROT_EA_REG  7
MASK_ROR_REG_ROT_COUNT  E00
MASK_ROR_REG_ROT_DIRECT  100
MASK_ROR_REG_ROT_EA  FE7
MASK_ROR_REG_ROT_IR  20
MASK_ROR_REG_ROT_REG  7
MASK_ROR_REG_ROT_SIZE  C0
MASK_SHFT_M         FFC0
MASK_SHFT_R         F118
MASK_SIZE_ADD       C0
MASK_SIZE_ADDA      100
MASK_SIZE_LOGIC     C0
MASK_SIZE_MOVEM     40
MASK_SIZE_MOVEQ     F100
MASK_SIZE_MOVES     3000
MASK_SIZE_NOT       C0
MASK_SIZE_SHIFTS    C0
MASK_SIZE_SUB       C0
MASK_SUB_ABS_ADD    3F
MASK_SUB_AN_REG     E00
MASK_SUB_EA         FFF
MASK_SUB_EA_MODE    38
MASK_SUB_EA_REG     7
MASK_SUB_EA_REG_AND_MODE  3F
MASK_SUB_OPMODE     1C0
MASK_SUB_REG        E00
MATCH_ADDA          D0C0
MATCH_ADDA_A0       8
MATCH_ADDA_A1       9
MATCH_ADDA_A2       A
MATCH_ADDA_A3       B
MATCH_ADDA_A4       C
MATCH_ADDA_A5       D
MATCH_ADDA_A6       E
MATCH_ADDA_A7       F
MATCH_ADDA_ABS_ADD_LONG  39
MATCH_ADDA_ABS_ADD_WORD  38
MATCH_ADDA_AN       8
MATCH_ADDA_AN_INDIR  10
MATCH_ADDA_AN_INDIR_POSTINC  18
MATCH_ADDA_AN_INDIR_POSTINC_REG0  18
MATCH_ADDA_AN_INDIR_POSTINC_REG1  19
MATCH_ADDA_AN_INDIR_POSTINC_REG2  1A
MATCH_ADDA_AN_INDIR_POSTINC_REG3  1B
MATCH_ADDA_AN_INDIR_POSTINC_REG4  1C
MATCH_ADDA_AN_INDIR_POSTINC_REG5  1D
MATCH_ADDA_AN_INDIR_POSTINC_REG6  1E
MATCH_ADDA_AN_INDIR_POSTINC_REG7  1F
MATCH_ADDA_AN_INDIR_PREDEC  20
MATCH_ADDA_AN_INDIR_PREDEC_REG0  20
MATCH_ADDA_AN_INDIR_PREDEC_REG1  21
MATCH_ADDA_AN_INDIR_PREDEC_REG2  22
MATCH_ADDA_AN_INDIR_PREDEC_REG3  23
MATCH_ADDA_AN_INDIR_PREDEC_REG4  24
MATCH_ADDA_AN_INDIR_PREDEC_REG5  25
MATCH_ADDA_AN_INDIR_PREDEC_REG6  26
MATCH_ADDA_AN_INDIR_PREDEC_REG7  27
MATCH_ADDA_AN_INDIR_R0  10
MATCH_ADDA_AN_INDIR_R1  11
MATCH_ADDA_AN_INDIR_R2  12
MATCH_ADDA_AN_INDIR_R3  13
MATCH_ADDA_AN_INDIR_R4  14
MATCH_ADDA_AN_INDIR_R5  15
MATCH_ADDA_AN_INDIR_R6  16
MATCH_ADDA_AN_INDIR_R7  17
MATCH_ADDA_D0       0
MATCH_ADDA_D1       1
MATCH_ADDA_D2       2
MATCH_ADDA_D3       3
MATCH_ADDA_D4       4
MATCH_ADDA_D5       5
MATCH_ADDA_D6       6
MATCH_ADDA_D7       7
MATCH_ADDA_DN       0
MATCH_ADDA_IMM_ADD  3C
MATCH_ADDA_IMM_ADD_LONG  1FC
MATCH_ADDA_IMM_ADD_WORD  FC
MATCH_ADDA_REG0     0
MATCH_ADDA_REG1     200
MATCH_ADDA_REG2     400
MATCH_ADDA_REG3     600
MATCH_ADDA_REG4     800
MATCH_ADDA_REG5     A00
MATCH_ADDA_REG6     C00
MATCH_ADDA_REG7     E00
MATCH_ADDQ          5000
MATCH_ADDQ_A0       8
MATCH_ADDQ_A1       9
MATCH_ADDQ_A2       A
MATCH_ADDQ_A3       B
MATCH_ADDQ_A4       C
MATCH_ADDQ_A5       D
MATCH_ADDQ_A6       E
MATCH_ADDQ_A7       F
MATCH_ADDQ_ABS_ADD_LONG  39
MATCH_ADDQ_ABS_ADD_WORD  38
MATCH_ADDQ_AN       8
MATCH_ADDQ_AN_INDIR  10
MATCH_ADDQ_AN_INDIR_POSTINC  18
MATCH_ADDQ_AN_INDIR_POSTINC_REG0  18
MATCH_ADDQ_AN_INDIR_POSTINC_REG1  19
MATCH_ADDQ_AN_INDIR_POSTINC_REG2  1A
MATCH_ADDQ_AN_INDIR_POSTINC_REG3  1B
MATCH_ADDQ_AN_INDIR_POSTINC_REG4  1C
MATCH_ADDQ_AN_INDIR_POSTINC_REG5  1D
MATCH_ADDQ_AN_INDIR_POSTINC_REG6  1E
MATCH_ADDQ_AN_INDIR_POSTINC_REG7  1F
MATCH_ADDQ_AN_INDIR_PREDEC  20
MATCH_ADDQ_AN_INDIR_PREDEC_REG0  20
MATCH_ADDQ_AN_INDIR_PREDEC_REG1  21
MATCH_ADDQ_AN_INDIR_PREDEC_REG2  22
MATCH_ADDQ_AN_INDIR_PREDEC_REG3  23
MATCH_ADDQ_AN_INDIR_PREDEC_REG4  24
MATCH_ADDQ_AN_INDIR_PREDEC_REG5  25
MATCH_ADDQ_AN_INDIR_PREDEC_REG6  26
MATCH_ADDQ_AN_INDIR_PREDEC_REG7  27
MATCH_ADDQ_AN_INDIR_R0  10
MATCH_ADDQ_AN_INDIR_R1  11
MATCH_ADDQ_AN_INDIR_R2  12
MATCH_ADDQ_AN_INDIR_R3  13
MATCH_ADDQ_AN_INDIR_R4  14
MATCH_ADDQ_AN_INDIR_R5  15
MATCH_ADDQ_AN_INDIR_R6  16
MATCH_ADDQ_AN_INDIR_R7  17
MATCH_ADDQ_D0       0
MATCH_ADDQ_D1       1
MATCH_ADDQ_D2       2
MATCH_ADDQ_D3       3
MATCH_ADDQ_D4       4
MATCH_ADDQ_D5       5
MATCH_ADDQ_D6       6
MATCH_ADDQ_D7       7
MATCH_ADDQ_DN       0
MATCH_ADDQ_REG0     0
MATCH_ADDQ_REG1     200
MATCH_ADDQ_REG2     400
MATCH_ADDQ_REG3     600
MATCH_ADDQ_REG4     800
MATCH_ADDQ_REG5     A00
MATCH_ADDQ_REG6     C00
MATCH_ADDQ_REG7     E00
MATCH_ADD_A0        8
MATCH_ADD_A1        9
MATCH_ADD_A2        A
MATCH_ADD_A3        B
MATCH_ADD_A4        C
MATCH_ADD_A5        D
MATCH_ADD_A6        E
MATCH_ADD_A7        F
MATCH_ADD_ABS_ADD_LONG  39
MATCH_ADD_ABS_ADD_WORD  38
MATCH_ADD_AN        8
MATCH_ADD_AN_INDIR  10
MATCH_ADD_AN_INDIR_POSTINC  18
MATCH_ADD_AN_INDIR_POSTINC_R0  18
MATCH_ADD_AN_INDIR_POSTINC_R1  19
MATCH_ADD_AN_INDIR_POSTINC_R2  1A
MATCH_ADD_AN_INDIR_POSTINC_R3  1B
MATCH_ADD_AN_INDIR_POSTINC_R4  1C
MATCH_ADD_AN_INDIR_POSTINC_R5  1D
MATCH_ADD_AN_INDIR_POSTINC_R6  1E
MATCH_ADD_AN_INDIR_POSTINC_R7  1F
MATCH_ADD_AN_INDIR_PREDEC  20
MATCH_ADD_AN_INDIR_PREDEC_REG0  20
MATCH_ADD_AN_INDIR_PREDEC_REG1  21
MATCH_ADD_AN_INDIR_PREDEC_REG2  22
MATCH_ADD_AN_INDIR_PREDEC_REG3  23
MATCH_ADD_AN_INDIR_PREDEC_REG4  24
MATCH_ADD_AN_INDIR_PREDEC_REG5  25
MATCH_ADD_AN_INDIR_PREDEC_REG6  26
MATCH_ADD_AN_INDIR_PREDEC_REG7  27
MATCH_ADD_AN_INDIR_R0  10
MATCH_ADD_AN_INDIR_R1  11
MATCH_ADD_AN_INDIR_R2  12
MATCH_ADD_AN_INDIR_R3  13
MATCH_ADD_AN_INDIR_R4  14
MATCH_ADD_AN_INDIR_R5  15
MATCH_ADD_AN_INDIR_R6  16
MATCH_ADD_AN_INDIR_R7  17
MATCH_ADD_B_DN_EA   0
MATCH_ADD_B_EA_DN   100
MATCH_ADD_D0        0
MATCH_ADD_D1        1
MATCH_ADD_D2        2
MATCH_ADD_D3        3
MATCH_ADD_D4        4
MATCH_ADD_D5        5
MATCH_ADD_D6        6
MATCH_ADD_D7        7
MATCH_ADD_DN        0
MATCH_ADD_L_DN_EA   80
MATCH_ADD_L_EA_DN   180
MATCH_ADD_REG0      0
MATCH_ADD_REG1      200
MATCH_ADD_REG2      400
MATCH_ADD_REG3      600
MATCH_ADD_REG4      800
MATCH_ADD_REG5      A00
MATCH_ADD_REG6      C00
MATCH_ADD_REG7      E00
MATCH_ADD_W_DN_EA   40
MATCH_ADD_W_EA_DN   140
MATCH_AND           C000
MATCH_AND_A0        8
MATCH_AND_A1        9
MATCH_AND_A2        A
MATCH_AND_A3        B
MATCH_AND_A4        C
MATCH_AND_A5        D
MATCH_AND_A6        E
MATCH_AND_A7        F
MATCH_AND_ABS_ADD_LONG  39
MATCH_AND_ABS_ADD_WORD  38
MATCH_AND_AN_INDIR  10
MATCH_AND_AN_INDIR_POSTINC  18
MATCH_AND_AN_INDIR_POSTINC_R0  18
MATCH_AND_AN_INDIR_POSTINC_R1  19
MATCH_AND_AN_INDIR_POSTINC_R2  1A
MATCH_AND_AN_INDIR_POSTINC_R3  1B
MATCH_AND_AN_INDIR_POSTINC_R4  1C
MATCH_AND_AN_INDIR_POSTINC_R5  1D
MATCH_AND_AN_INDIR_POSTINC_R6  1E
MATCH_AND_AN_INDIR_POSTINC_R7  1F
MATCH_AND_AN_INDIR_PREDEC  20
MATCH_AND_AN_INDIR_PREDEC_REG0  20
MATCH_AND_AN_INDIR_PREDEC_REG1  21
MATCH_AND_AN_INDIR_PREDEC_REG2  22
MATCH_AND_AN_INDIR_PREDEC_REG3  23
MATCH_AND_AN_INDIR_PREDEC_REG4  24
MATCH_AND_AN_INDIR_PREDEC_REG5  25
MATCH_AND_AN_INDIR_PREDEC_REG6  26
MATCH_AND_AN_INDIR_PREDEC_REG7  27
MATCH_AND_AN_INDIR_R0  10
MATCH_AND_AN_INDIR_R1  11
MATCH_AND_AN_INDIR_R2  12
MATCH_AND_AN_INDIR_R3  13
MATCH_AND_AN_INDIR_R4  14
MATCH_AND_AN_INDIR_R5  15
MATCH_AND_AN_INDIR_R6  16
MATCH_AND_AN_INDIR_R7  17
MATCH_AND_B_DN_EA   0
MATCH_AND_B_EA_DN   100
MATCH_AND_D0        0
MATCH_AND_D1        1
MATCH_AND_D2        2
MATCH_AND_D3        3
MATCH_AND_D4        4
MATCH_AND_D5        5
MATCH_AND_D6        6
MATCH_AND_D7        7
MATCH_AND_DN        0
MATCH_AND_IMM_ADD   3C
MATCH_AND_IMM_ADD_LONG  1FC
MATCH_AND_IMM_ADD_WORD  FC
MATCH_AND_L_DN_EA   80
MATCH_AND_L_EA_DN   180
MATCH_AND_REG0      0
MATCH_AND_REG1      200
MATCH_AND_REG2      400
MATCH_AND_REG3      600
MATCH_AND_REG4      800
MATCH_AND_REG5      A00
MATCH_AND_REG6      C00
MATCH_AND_REG7      E00
MATCH_AND_W_DN_EA   40
MATCH_AND_W_EA_DN   140
MATCH_ASD_ABS_ADD_LONG  3C
MATCH_ASD_ABS_ADD_WORD  39
MATCH_ASD_AN_INDIR  10
MATCH_ASD_AN_INDIR_POSTINC  20
MATCH_ASD_AN_INDIR_POSTINC_R0  20
MATCH_ASD_AN_INDIR_POSTINC_R1  21
MATCH_ASD_AN_INDIR_POSTINC_R2  22
MATCH_ASD_AN_INDIR_POSTINC_R3  23
MATCH_ASD_AN_INDIR_POSTINC_R4  24
MATCH_ASD_AN_INDIR_POSTINC_R5  25
MATCH_ASD_AN_INDIR_POSTINC_R6  26
MATCH_ASD_AN_INDIR_POSTINC_R7  27
MATCH_ASD_AN_INDIR_PREDEC  18
MATCH_ASD_AN_INDIR_PREDEC_R0  18
MATCH_ASD_AN_INDIR_PREDEC_R1  19
MATCH_ASD_AN_INDIR_PREDEC_R2  1A
MATCH_ASD_AN_INDIR_PREDEC_R3  1B
MATCH_ASD_AN_INDIR_PREDEC_R4  1C
MATCH_ASD_AN_INDIR_PREDEC_R5  1D
MATCH_ASD_AN_INDIR_PREDEC_R6  1E
MATCH_ASD_AN_INDIR_PREDEC_R7  1F
MATCH_ASD_AN_INDIR_R0  10
MATCH_ASD_AN_INDIR_R1  11
MATCH_ASD_AN_INDIR_R2  12
MATCH_ASD_AN_INDIR_R3  13
MATCH_ASD_AN_INDIR_R4  14
MATCH_ASD_AN_INDIR_R5  15
MATCH_ASD_AN_INDIR_R6  16
MATCH_ASD_AN_INDIR_R7  17
MATCH_ASD_COUNT_REG0  0
MATCH_ASD_COUNT_REG1  200
MATCH_ASD_COUNT_REG2  400
MATCH_ASD_COUNT_REG3  600
MATCH_ASD_COUNT_REG4  800
MATCH_ASD_COUNT_REG5  A00
MATCH_ASD_COUNT_REG6  C00
MATCH_ASD_COUNT_REG7  E00
MATCH_ASD_COUNT_VAL0  0
MATCH_ASD_COUNT_VAL1  200
MATCH_ASD_COUNT_VAL2  400
MATCH_ASD_COUNT_VAL3  600
MATCH_ASD_COUNT_VAL4  800
MATCH_ASD_COUNT_VAL5  A00
MATCH_ASD_COUNT_VAL6  C00
MATCH_ASD_COUNT_VAL7  E00
MATCH_ASD_D_REG0    0
MATCH_ASD_D_REG1    1
MATCH_ASD_D_REG2    2
MATCH_ASD_D_REG3    3
MATCH_ASD_D_REG4    4
MATCH_ASD_D_REG5    5
MATCH_ASD_D_REG6    6
MATCH_ASD_D_REG7    7
MATCH_ASD_MEM_SHIFT  C0
MATCH_ASD_SHIFT_COUNT  20
MATCH_ASD_SHIFT_REG  20
MATCH_ASL_M         E1C0
MATCH_ASL_R         E100
MATCH_ASR_M         E0C0
MATCH_ASR_R         E000
MATCH_BEQ           6700
MATCH_BGT           6E00
MATCH_BLE           6F00
MATCH_BRA           6000
MATCH_G0100         4000
MATCH_G0110         6000
MATCH_G1101         D000
MATCH_G1110         E000
MATCH_IMM_ADD       3C
MATCH_IMM_ADD_LONG  1FC
MATCH_IMM_ADD_WORD  FC
MATCH_JSR           4E80
MATCH_JSR_ABS_ADD_LONG  39
MATCH_JSR_ABS_ADD_WORD  38
MATCH_JSR_AN_INDIR  10
MATCH_JSR_AN_INDIR_R0  10
MATCH_JSR_AN_INDIR_R1  11
MATCH_JSR_AN_INDIR_R2  12
MATCH_JSR_AN_INDIR_R3  13
MATCH_JSR_AN_INDIR_R4  14
MATCH_JSR_AN_INDIR_R5  15
MATCH_JSR_AN_INDIR_R6  16
MATCH_JSR_AN_INDIR_R7  17
MATCH_JSR_D0        0
MATCH_JSR_D1        1
MATCH_JSR_D2        2
MATCH_JSR_D3        3
MATCH_JSR_D4        4
MATCH_JSR_D5        5
MATCH_JSR_D6        6
MATCH_JSR_D7        7
MATCH_JSR_DN        0
MATCH_LEA           41C0
MATCH_LEA_ABS_ADD_LONG  39
MATCH_LEA_ABS_ADD_WORD  38
MATCH_LEA_AN_INDIR  10
MATCH_LEA_AN_INDIR_R0  10
MATCH_LEA_AN_INDIR_R1  11
MATCH_LEA_AN_INDIR_R2  12
MATCH_LEA_AN_INDIR_R3  13
MATCH_LEA_AN_INDIR_R4  14
MATCH_LEA_AN_INDIR_R5  15
MATCH_LEA_AN_INDIR_R6  16
MATCH_LEA_AN_INDIR_R7  17
MATCH_LEA_REG0      0
MATCH_LEA_REG1      200
MATCH_LEA_REG2      400
MATCH_LEA_REG3      600
MATCH_LEA_REG4      800
MATCH_LEA_REG5      A00
MATCH_LEA_REG6      C00
MATCH_LEA_REG7      E00
MATCH_LSD_ABS_ADD_LONG  3C
MATCH_LSD_ABS_ADD_WORD  39
MATCH_LSD_AN_INDIR  10
MATCH_LSD_AN_INDIR_POSTINC  20
MATCH_LSD_AN_INDIR_POSTINC_R0  20
MATCH_LSD_AN_INDIR_POSTINC_R1  21
MATCH_LSD_AN_INDIR_POSTINC_R2  22
MATCH_LSD_AN_INDIR_POSTINC_R3  23
MATCH_LSD_AN_INDIR_POSTINC_R4  24
MATCH_LSD_AN_INDIR_POSTINC_R5  25
MATCH_LSD_AN_INDIR_POSTINC_R6  26
MATCH_LSD_AN_INDIR_POSTINC_R7  27
MATCH_LSD_AN_INDIR_PREDEC  18
MATCH_LSD_AN_INDIR_PREDEC_R0  18
MATCH_LSD_AN_INDIR_PREDEC_R1  19
MATCH_LSD_AN_INDIR_PREDEC_R2  1A
MATCH_LSD_AN_INDIR_PREDEC_R3  1B
MATCH_LSD_AN_INDIR_PREDEC_R4  1C
MATCH_LSD_AN_INDIR_PREDEC_R5  1D
MATCH_LSD_AN_INDIR_PREDEC_R6  1E
MATCH_LSD_AN_INDIR_PREDEC_R7  1
MATCH_LSD_AN_INDIR_R0  10
MATCH_LSD_AN_INDIR_R1  11
MATCH_LSD_AN_INDIR_R2  12
MATCH_LSD_AN_INDIR_R3  13
MATCH_LSD_AN_INDIR_R4  14
MATCH_LSD_AN_INDIR_R5  15
MATCH_LSD_AN_INDIR_R6  16
MATCH_LSD_AN_INDIR_R7  17
MATCH_LSD_COUNT_REG0  0
MATCH_LSD_COUNT_REG1  200
MATCH_LSD_COUNT_REG2  400
MATCH_LSD_COUNT_REG3  600
MATCH_LSD_COUNT_REG4  800
MATCH_LSD_COUNT_REG5  A00
MATCH_LSD_COUNT_REG6  C00
MATCH_LSD_COUNT_REG7  E00
MATCH_LSD_COUNT_VAL0  0
MATCH_LSD_COUNT_VAL1  200
MATCH_LSD_COUNT_VAL2  400
MATCH_LSD_COUNT_VAL3  600
MATCH_LSD_COUNT_VAL4  800
MATCH_LSD_COUNT_VAL5  A00
MATCH_LSD_COUNT_VAL6  C00
MATCH_LSD_COUNT_VAL7  E00
MATCH_LSD_D_REG0    0
MATCH_LSD_D_REG1    1
MATCH_LSD_D_REG2    2
MATCH_LSD_D_REG3    3
MATCH_LSD_D_REG4    4
MATCH_LSD_D_REG5    5
MATCH_LSD_D_REG6    6
MATCH_LSD_D_REG7    7
MATCH_LSD_MEM_SHIFT  C0
MATCH_LSD_SHIFT_COUNT  20
MATCH_LSD_SHIFT_REG  20
MATCH_LSL_M         E3C0
MATCH_LSL_R         E108
MATCH_LSR_M         E2C0
MATCH_LSR_R         E008
MATCH_MOVE          0
MATCH_MOVEA         40
MATCH_MOVEA_A0      8
MATCH_MOVEA_A1      9
MATCH_MOVEA_A2      A
MATCH_MOVEA_A3      B
MATCH_MOVEA_A4      C
MATCH_MOVEA_A5      D
MATCH_MOVEA_A6      E
MATCH_MOVEA_A7      F
MATCH_MOVEA_ABS_ADD_LONG  39
MATCH_MOVEA_ABS_ADD_WORD  38
MATCH_MOVEA_AN      8
MATCH_MOVEA_AN_INDIR  10
MATCH_MOVEA_AN_INDIR_POSTINC  18
MATCH_MOVEA_AN_INDIR_POSTINC_R0  18
MATCH_MOVEA_AN_INDIR_POSTINC_R1  19
MATCH_MOVEA_AN_INDIR_POSTINC_R2  1A
MATCH_MOVEA_AN_INDIR_POSTINC_R3  1B
MATCH_MOVEA_AN_INDIR_POSTINC_R4  1C
MATCH_MOVEA_AN_INDIR_POSTINC_R5  1D
MATCH_MOVEA_AN_INDIR_POSTINC_R6  1E
MATCH_MOVEA_AN_INDIR_POSTINC_R7  1F
MATCH_MOVEA_AN_INDIR_PREDEC  20
MATCH_MOVEA_AN_INDIR_PREDEC_REG0  20
MATCH_MOVEA_AN_INDIR_PREDEC_REG1  21
MATCH_MOVEA_AN_INDIR_PREDEC_REG2  22
MATCH_MOVEA_AN_INDIR_PREDEC_REG3  23
MATCH_MOVEA_AN_INDIR_PREDEC_REG4  24
MATCH_MOVEA_AN_INDIR_PREDEC_REG5  25
MATCH_MOVEA_AN_INDIR_PREDEC_REG6  26
MATCH_MOVEA_AN_INDIR_PREDEC_REG7  27
MATCH_MOVEA_AN_INDIR_R0  10
MATCH_MOVEA_AN_INDIR_R1  11
MATCH_MOVEA_AN_INDIR_R2  12
MATCH_MOVEA_AN_INDIR_R3  13
MATCH_MOVEA_AN_INDIR_R4  14
MATCH_MOVEA_AN_INDIR_R5  15
MATCH_MOVEA_AN_INDIR_R6  16
MATCH_MOVEA_AN_INDIR_R7  17
MATCH_MOVEA_D0      0
MATCH_MOVEA_D1      1
MATCH_MOVEA_D2      2
MATCH_MOVEA_D3      3
MATCH_MOVEA_D4      4
MATCH_MOVEA_D5      5
MATCH_MOVEA_D6      6
MATCH_MOVEA_D7      7
MATCH_MOVEA_DN      0
MATCH_MOVEA_IMM_ADD  3C
MATCH_MOVEA_IMM_ADD_LONG  1FC
MATCH_MOVEA_IMM_ADD_WORD  FC
MATCH_MOVEA_REG0    0
MATCH_MOVEA_REG1    200
MATCH_MOVEA_REG2    400
MATCH_MOVEA_REG3    600
MATCH_MOVEA_REG4    800
MATCH_MOVEA_REG5    A00
MATCH_MOVEA_REG6    C00
MATCH_MOVEA_REG7    E00
MATCH_MOVEB         1000
MATCH_MOVEL         2000
MATCH_MOVEM_ABS_ADD_LONG  39
MATCH_MOVEM_ABS_ADD_WORD  38
MATCH_MOVEM_AN_INDIR  10
MATCH_MOVEM_AN_INDIR_PDEC  20
MATCH_MOVEM_AN_INDIR_PDEC_R0  20
MATCH_MOVEM_AN_INDIR_PDEC_R1  21
MATCH_MOVEM_AN_INDIR_PDEC_R2  22
MATCH_MOVEM_AN_INDIR_PDEC_R3  23
MATCH_MOVEM_AN_INDIR_PDEC_R4  24
MATCH_MOVEM_AN_INDIR_PDEC_R5  25
MATCH_MOVEM_AN_INDIR_PDEC_R6  26
MATCH_MOVEM_AN_INDIR_PDEC_R7  27
MATCH_MOVEM_AN_INDIR_PINC  10
MATCH_MOVEM_AN_INDIR_PINC_R0  18
MATCH_MOVEM_AN_INDIR_PINC_R1  19
MATCH_MOVEM_AN_INDIR_PINC_R2  1A
MATCH_MOVEM_AN_INDIR_PINC_R3  1B
MATCH_MOVEM_AN_INDIR_PINC_R4  1C
MATCH_MOVEM_AN_INDIR_PINC_R5  1D
MATCH_MOVEM_AN_INDIR_PINC_R6  1E
MATCH_MOVEM_AN_INDIR_PINC_R7  1F
MATCH_MOVEM_AN_INDIR_R0  10
MATCH_MOVEM_AN_INDIR_R1  11
MATCH_MOVEM_AN_INDIR_R2  12
MATCH_MOVEM_AN_INDIR_R3  13
MATCH_MOVEM_AN_INDIR_R4  14
MATCH_MOVEM_AN_INDIR_R5  15
MATCH_MOVEM_AN_INDIR_R6  16
MATCH_MOVEM_AN_INDIR_R7  17
MATCH_MOVEM_IMM_ADD  38
MATCH_MOVEM_IMM_ADD_LONG  39
MATCH_MOVEM_IMM_ADD_WORD  38
MATCH_MOVEM_MEM_REG  400
MATCH_MOVEM_MEM_REG_A0  100
MATCH_MOVEM_MEM_REG_A1  200
MATCH_MOVEM_MEM_REG_A2  400
MATCH_MOVEM_MEM_REG_A3  800
MATCH_MOVEM_MEM_REG_A4  1000
MATCH_MOVEM_MEM_REG_A5  2000
MATCH_MOVEM_MEM_REG_A6  4000
MATCH_MOVEM_MEM_REG_A7  8000
MATCH_MOVEM_MEM_REG_D0  100
MATCH_MOVEM_MEM_REG_D1  200
MATCH_MOVEM_MEM_REG_D2  400
MATCH_MOVEM_MEM_REG_D3  800
MATCH_MOVEM_MEM_REG_D4  1000
MATCH_MOVEM_MEM_REG_D5  2000
MATCH_MOVEM_MEM_REG_D6  4000
MATCH_MOVEM_MEM_REG_D7  8000
MATCH_MOVEM_MR      4C80
MATCH_MOVEM_REG_MEM  400
MATCH_MOVEM_REG_MEM_A0  80
MATCH_MOVEM_REG_MEM_A1  40
MATCH_MOVEM_REG_MEM_A2  20
MATCH_MOVEM_REG_MEM_A3  10
MATCH_MOVEM_REG_MEM_A4  8
MATCH_MOVEM_REG_MEM_A5  4
MATCH_MOVEM_REG_MEM_A6  2
MATCH_MOVEM_REG_MEM_A7  1
MATCH_MOVEM_REG_MEM_D0  8000
MATCH_MOVEM_REG_MEM_D1  4000
MATCH_MOVEM_REG_MEM_D2  2000
MATCH_MOVEM_REG_MEM_D3  1000
MATCH_MOVEM_REG_MEM_D4  800
MATCH_MOVEM_REG_MEM_D5  400
MATCH_MOVEM_REG_MEM_D6  200
MATCH_MOVEM_REG_MEM_D7  100
MATCH_MOVEM_RM      4880
MATCH_MOVEQ         7000
MATCH_MOVEQ_D0      0
MATCH_MOVEQ_D1      200
MATCH_MOVEQ_D2      400
MATCH_MOVEQ_D3      600
MATCH_MOVEQ_D4      800
MATCH_MOVEQ_D5      A00
MATCH_MOVEQ_D6      C00
MATCH_MOVEQ_D7      E00
MATCH_MOVEW         3000
MATCH_MOVE_DEST_A0  40
MATCH_MOVE_DEST_A1  240
MATCH_MOVE_DEST_A2  440
MATCH_MOVE_DEST_A3  640
MATCH_MOVE_DEST_A4  840
MATCH_MOVE_DEST_A5  A40
MATCH_MOVE_DEST_A6  C40
MATCH_MOVE_DEST_A7  E40
MATCH_MOVE_DEST_ABS_ADD_LONG  9C0
MATCH_MOVE_DEST_ABS_ADD_WORD  1C0
MATCH_MOVE_DEST_AN  40
MATCH_MOVE_DEST_AN_INDIR  80
MATCH_MOVE_DEST_AN_INDIR_PDEC_R0  100
MATCH_MOVE_DEST_AN_INDIR_PDEC_R1  300
MATCH_MOVE_DEST_AN_INDIR_PDEC_R2  500
MATCH_MOVE_DEST_AN_INDIR_PDEC_R3  700
MATCH_MOVE_DEST_AN_INDIR_PDEC_R4  900
MATCH_MOVE_DEST_AN_INDIR_PDEC_R5  B00
MATCH_MOVE_DEST_AN_INDIR_PDEC_R6  D00
MATCH_MOVE_DEST_AN_INDIR_PDEC_R7  F00
MATCH_MOVE_DEST_AN_INDIR_PINC_R0  C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R1  2C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R2  4C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R3  6C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R4  8C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R5  AC0
MATCH_MOVE_DEST_AN_INDIR_PINC_R6  CC0
MATCH_MOVE_DEST_AN_INDIR_PINC_R7  EC0
MATCH_MOVE_DEST_AN_INDIR_POSTINC  C0
MATCH_MOVE_DEST_AN_INDIR_PREDEC  100
MATCH_MOVE_DEST_AN_INDIR_R0  80
MATCH_MOVE_DEST_AN_INDIR_R1  280
MATCH_MOVE_DEST_AN_INDIR_R2  480
MATCH_MOVE_DEST_AN_INDIR_R3  680
MATCH_MOVE_DEST_AN_INDIR_R4  880
MATCH_MOVE_DEST_AN_INDIR_R5  A80
MATCH_MOVE_DEST_AN_INDIR_R6  C80
MATCH_MOVE_DEST_AN_INDIR_R7  E80
MATCH_MOVE_DEST_D0  0
MATCH_MOVE_DEST_D1  200
MATCH_MOVE_DEST_D2  400
MATCH_MOVE_DEST_D3  600
MATCH_MOVE_DEST_D4  800
MATCH_MOVE_DEST_D5  A00
MATCH_MOVE_DEST_D6  C00
MATCH_MOVE_DEST_D7  E00
MATCH_MOVE_DEST_DN  0
MATCH_MOVE_DEST_IMM_ADD  1C0
MATCH_MOVE_DEST_IMM_ADD_LONG  9C0
MATCH_MOVE_DEST_IMM_ADD_WORD  1C0
MATCH_MOVE_SRC_A0   8
MATCH_MOVE_SRC_A1   9
MATCH_MOVE_SRC_A2   A
MATCH_MOVE_SRC_A3   B
MATCH_MOVE_SRC_A4   C
MATCH_MOVE_SRC_A5   D
MATCH_MOVE_SRC_A6   E
MATCH_MOVE_SRC_A7   F
MATCH_MOVE_SRC_ABS_ADD_LONG  39
MATCH_MOVE_SRC_ABS_ADD_WORD  38
MATCH_MOVE_SRC_AN   8
MATCH_MOVE_SRC_AN_INDIR  10
MATCH_MOVE_SRC_AN_INDIR_PINC_R0  18
MATCH_MOVE_SRC_AN_INDIR_PINC_R1  19
MATCH_MOVE_SRC_AN_INDIR_PINC_R2  1A
MATCH_MOVE_SRC_AN_INDIR_PINC_R3  1B
MATCH_MOVE_SRC_AN_INDIR_PINC_R4  1C
MATCH_MOVE_SRC_AN_INDIR_PINC_R5  1D
MATCH_MOVE_SRC_AN_INDIR_PINC_R6  1E
MATCH_MOVE_SRC_AN_INDIR_PINC_R7  1F
MATCH_MOVE_SRC_AN_INDIR_POSTINC  18
MATCH_MOVE_SRC_AN_INDIR_PREDEC  20
MATCH_MOVE_SRC_AN_INDIR_PREDE_R0  20
MATCH_MOVE_SRC_AN_INDIR_PREDE_R1  21
MATCH_MOVE_SRC_AN_INDIR_PREDE_R2  22
MATCH_MOVE_SRC_AN_INDIR_PREDE_R3  23
MATCH_MOVE_SRC_AN_INDIR_PREDE_R4  24
MATCH_MOVE_SRC_AN_INDIR_PREDE_R5  25
MATCH_MOVE_SRC_AN_INDIR_PREDE_R6  26
MATCH_MOVE_SRC_AN_INDIR_PREDE_R7  27
MATCH_MOVE_SRC_AN_INDIR_R0  10
MATCH_MOVE_SRC_AN_INDIR_R1  11
MATCH_MOVE_SRC_AN_INDIR_R2  12
MATCH_MOVE_SRC_AN_INDIR_R3  13
MATCH_MOVE_SRC_AN_INDIR_R4  14
MATCH_MOVE_SRC_AN_INDIR_R5  15
MATCH_MOVE_SRC_AN_INDIR_R6  16
MATCH_MOVE_SRC_AN_INDIR_R7  17
MATCH_MOVE_SRC_D0   0
MATCH_MOVE_SRC_D1   1
MATCH_MOVE_SRC_D2   2
MATCH_MOVE_SRC_D3   3
MATCH_MOVE_SRC_D4   4
MATCH_MOVE_SRC_D5   5
MATCH_MOVE_SRC_D6   6
MATCH_MOVE_SRC_D7   7
MATCH_MOVE_SRC_DN   0
MATCH_MOVE_SRC_IMM_ADD  3C
MATCH_MOVE_SRC_IMM_ADD_LONG  1FC
MATCH_MOVE_SRC_IMM_ADD_WORD  FC
MATCH_NOP           4E71
MATCH_NOT           4600
MATCH_NOT_ABS_ADD_LONG  3C
MATCH_NOT_ABS_ADD_WORD  39
MATCH_NOT_AN_INDIR  10
MATCH_NOT_AN_INDIR_POSTINC  20
MATCH_NOT_AN_INDIR_POSTINC_R0  20
MATCH_NOT_AN_INDIR_POSTINC_R1  21
MATCH_NOT_AN_INDIR_POSTINC_R2  22
MATCH_NOT_AN_INDIR_POSTINC_R3  23
MATCH_NOT_AN_INDIR_POSTINC_R4  24
MATCH_NOT_AN_INDIR_POSTINC_R5  25
MATCH_NOT_AN_INDIR_POSTINC_R6  26
MATCH_NOT_AN_INDIR_POSTINC_R7  27
MATCH_NOT_AN_INDIR_PREDEC  18
MATCH_NOT_AN_INDIR_PREDEC_R0  18
MATCH_NOT_AN_INDIR_PREDEC_R1  19
MATCH_NOT_AN_INDIR_PREDEC_R2  1A
MATCH_NOT_AN_INDIR_PREDEC_R3  1B
MATCH_NOT_AN_INDIR_PREDEC_R4  1C
MATCH_NOT_AN_INDIR_PREDEC_R5  1D
MATCH_NOT_AN_INDIR_PREDEC_R6  1E
MATCH_NOT_AN_INDIR_PREDEC_R7  1F
MATCH_NOT_AN_INDIR_R0  10
MATCH_NOT_AN_INDIR_R1  11
MATCH_NOT_AN_INDIR_R2  12
MATCH_NOT_AN_INDIR_R3  13
MATCH_NOT_AN_INDIR_R4  14
MATCH_NOT_AN_INDIR_R5  15
MATCH_NOT_AN_INDIR_R6  16
MATCH_NOT_AN_INDIR_R7  17
MATCH_NOT_D0        0
MATCH_NOT_D1        1
MATCH_NOT_D2        2
MATCH_NOT_D3        3
MATCH_NOT_D4        4
MATCH_NOT_D5        5
MATCH_NOT_D6        6
MATCH_NOT_D7        7
MATCH_NOT_DN        0
MATCH_OR            8000
MATCH_OR_A0         8
MATCH_OR_A1         9
MATCH_OR_A2         A
MATCH_OR_A3         B
MATCH_OR_A4         C
MATCH_OR_A5         D
MATCH_OR_A6         E
MATCH_OR_A7         F
MATCH_OR_ABS_ADD_LONG  39
MATCH_OR_ABS_ADD_WORD  38
MATCH_OR_AN_INDIR   10
MATCH_OR_AN_INDIR_POSTINC  18
MATCH_OR_AN_INDIR_POSTINC_R0  18
MATCH_OR_AN_INDIR_POSTINC_R1  19
MATCH_OR_AN_INDIR_POSTINC_R2  1A
MATCH_OR_AN_INDIR_POSTINC_R3  1B
MATCH_OR_AN_INDIR_POSTINC_R4  1C
MATCH_OR_AN_INDIR_POSTINC_R5  1D
MATCH_OR_AN_INDIR_POSTINC_R6  1E
MATCH_OR_AN_INDIR_POSTINC_R7  1F
MATCH_OR_AN_INDIR_PREDEC  20
MATCH_OR_AN_INDIR_PREDEC_REG0  20
MATCH_OR_AN_INDIR_PREDEC_REG1  21
MATCH_OR_AN_INDIR_PREDEC_REG2  22
MATCH_OR_AN_INDIR_PREDEC_REG3  23
MATCH_OR_AN_INDIR_PREDEC_REG4  24
MATCH_OR_AN_INDIR_PREDEC_REG5  25
MATCH_OR_AN_INDIR_PREDEC_REG6  26
MATCH_OR_AN_INDIR_PREDEC_REG7  27
MATCH_OR_AN_INDIR_R0  10
MATCH_OR_AN_INDIR_R1  11
MATCH_OR_AN_INDIR_R2  12
MATCH_OR_AN_INDIR_R3  13
MATCH_OR_AN_INDIR_R4  14
MATCH_OR_AN_INDIR_R5  15
MATCH_OR_AN_INDIR_R6  16
MATCH_OR_AN_INDIR_R7  17
MATCH_OR_B_DN_EA    0
MATCH_OR_B_EA_DN    100
MATCH_OR_D0         0
MATCH_OR_D1         1
MATCH_OR_D2         2
MATCH_OR_D3         3
MATCH_OR_D4         4
MATCH_OR_D5         5
MATCH_OR_D6         6
MATCH_OR_D7         7
MATCH_OR_DN         0
MATCH_OR_IMM_ADD    3C
MATCH_OR_IMM_ADD_LONG  1FC
MATCH_OR_IMM_ADD_WORD  FC
MATCH_OR_L_DN_EA    80
MATCH_OR_L_EA_DN    180
MATCH_OR_REG0       0
MATCH_OR_REG1       200
MATCH_OR_REG2       400
MATCH_OR_REG3       600
MATCH_OR_REG4       800
MATCH_OR_REG5       A00
MATCH_OR_REG6       C00
MATCH_OR_REG7       E00
MATCH_OR_W_DN_EA    40
MATCH_OR_W_EA_DN    140
MATCH_ROD_ABS_ADD_LONG  3C
MATCH_ROD_ABS_ADD_WORD  39
MATCH_ROD_AN_INDIR  10
MATCH_ROD_AN_INDIR_POSTINC  20
MATCH_ROD_AN_INDIR_POSTINC_R0  20
MATCH_ROD_AN_INDIR_POSTINC_R1  21
MATCH_ROD_AN_INDIR_POSTINC_R2  22
MATCH_ROD_AN_INDIR_POSTINC_R3  23
MATCH_ROD_AN_INDIR_POSTINC_R4  24
MATCH_ROD_AN_INDIR_POSTINC_R5  25
MATCH_ROD_AN_INDIR_POSTINC_R6  26
MATCH_ROD_AN_INDIR_POSTINC_R7  27
MATCH_ROD_AN_INDIR_PREDEC  18
MATCH_ROD_AN_INDIR_PREDEC_R0  18
MATCH_ROD_AN_INDIR_PREDEC_R1  19
MATCH_ROD_AN_INDIR_PREDEC_R2  1A
MATCH_ROD_AN_INDIR_PREDEC_R3  1B
MATCH_ROD_AN_INDIR_PREDEC_R4  1C
MATCH_ROD_AN_INDIR_PREDEC_R5  1D
MATCH_ROD_AN_INDIR_PREDEC_R6  1E
MATCH_ROD_AN_INDIR_PREDEC_R7  1F
MATCH_ROD_AN_INDIR_R0  10
MATCH_ROD_AN_INDIR_R1  11
MATCH_ROD_AN_INDIR_R2  12
MATCH_ROD_AN_INDIR_R3  13
MATCH_ROD_AN_INDIR_R4  14
MATCH_ROD_AN_INDIR_R5  15
MATCH_ROD_AN_INDIR_R6  16
MATCH_ROD_AN_INDIR_R7  17
MATCH_ROD_COUNT_REG0  0
MATCH_ROD_COUNT_REG1  200
MATCH_ROD_COUNT_REG2  400
MATCH_ROD_COUNT_REG3  600
MATCH_ROD_COUNT_REG4  800
MATCH_ROD_COUNT_REG5  A00
MATCH_ROD_COUNT_REG6  C00
MATCH_ROD_COUNT_REG7  E00
MATCH_ROD_COUNT_VAL0  0
MATCH_ROD_COUNT_VAL1  200
MATCH_ROD_COUNT_VAL2  400
MATCH_ROD_COUNT_VAL3  600
MATCH_ROD_COUNT_VAL4  800
MATCH_ROD_COUNT_VAL5  A00
MATCH_ROD_COUNT_VAL6  C00
MATCH_ROD_COUNT_VAL7  E00
MATCH_ROD_D_REG0    0
MATCH_ROD_D_REG1    1
MATCH_ROD_D_REG2    2
MATCH_ROD_D_REG3    3
MATCH_ROD_D_REG4    4
MATCH_ROD_D_REG5    5
MATCH_ROD_D_REG6    6
MATCH_ROD_D_REG7    7
MATCH_ROD_MEM_SHIFT  C0
MATCH_ROD_SHIFT_COUNT  20
MATCH_ROD_SHIFT_REG  20
MATCH_ROL_M         E7C0
MATCH_ROL_R         E118
MATCH_ROR_M         E6C0
MATCH_ROR_R         E018
MATCH_RTS           4E75
MATCH_SUB           9000
MATCH_SUB_A0        8
MATCH_SUB_A1        9
MATCH_SUB_A2        A
MATCH_SUB_A3        B
MATCH_SUB_A4        C
MATCH_SUB_A5        D
MATCH_SUB_A6        E
MATCH_SUB_A7        F
MATCH_SUB_ABS_ADD_LONG  39
MATCH_SUB_ABS_ADD_WORD  38
MATCH_SUB_AN        8
MATCH_SUB_AN_INDIR  10
MATCH_SUB_AN_INDIR_POSTINC  18
MATCH_SUB_AN_INDIR_POSTINC_R0  18
MATCH_SUB_AN_INDIR_POSTINC_R1  19
MATCH_SUB_AN_INDIR_POSTINC_R2  1A
MATCH_SUB_AN_INDIR_POSTINC_R3  1B
MATCH_SUB_AN_INDIR_POSTINC_R4  1C
MATCH_SUB_AN_INDIR_POSTINC_R5  1D
MATCH_SUB_AN_INDIR_POSTINC_R6  1E
MATCH_SUB_AN_INDIR_POSTINC_R7  1F
MATCH_SUB_AN_INDIR_PREDEC  20
MATCH_SUB_AN_INDIR_PREDEC_REG0  20
MATCH_SUB_AN_INDIR_PREDEC_REG1  21
MATCH_SUB_AN_INDIR_PREDEC_REG2  22
MATCH_SUB_AN_INDIR_PREDEC_REG3  23
MATCH_SUB_AN_INDIR_PREDEC_REG4  24
MATCH_SUB_AN_INDIR_PREDEC_REG5  25
MATCH_SUB_AN_INDIR_PREDEC_REG6  26
MATCH_SUB_AN_INDIR_PREDEC_REG7  27
MATCH_SUB_AN_INDIR_R0  10
MATCH_SUB_AN_INDIR_R1  11
MATCH_SUB_AN_INDIR_R2  12
MATCH_SUB_AN_INDIR_R3  13
MATCH_SUB_AN_INDIR_R4  14
MATCH_SUB_AN_INDIR_R5  15
MATCH_SUB_AN_INDIR_R6  16
MATCH_SUB_AN_INDIR_R7  17
MATCH_SUB_B_DN_EA   0
MATCH_SUB_B_EA_DN   100
MATCH_SUB_D0        0
MATCH_SUB_D1        1
MATCH_SUB_D2        2
MATCH_SUB_D3        3
MATCH_SUB_D4        4
MATCH_SUB_D5        5
MATCH_SUB_D6        6
MATCH_SUB_D7        7
MATCH_SUB_DN        0
MATCH_SUB_IMM_ADD   3C
MATCH_SUB_IMM_ADD_LONG  1FC
MATCH_SUB_IMM_ADD_WORD  FC
MATCH_SUB_L_DN_EA   80
MATCH_SUB_L_EA_DN   180
MATCH_SUB_REG0      0
MATCH_SUB_REG1      200
MATCH_SUB_REG2      400
MATCH_SUB_REG3      600
MATCH_SUB_REG4      800
MATCH_SUB_REG5      A00
MATCH_SUB_REG6      C00
MATCH_SUB_REG7      E00
MATCH_SUB_W_DN_EA   40
MATCH_SUB_W_EA_DN   140
MA_END              148E
MA_FAIL             1488
MA_L                1462
MA_W                143C
MOVEA_A0_OUT        698E
MOVEA_A1_OUT        699C
MOVEA_A2_OUT        69AA
MOVEA_A3_OUT        69B8
MOVEA_A4_OUT        69C6
MOVEA_A5_OUT        69D4
MOVEA_A6_OUT        69E2
MOVEA_A7_OUT        69F0
MOVEA_ABS_ADD_LONG  6820
MOVEA_ABS_ADD_LONG_OUT  6CA8
MOVEA_ABS_ADD_WORD  6808
MOVEA_ABS_ADD_WORD_OUT  6C9E
MOVEA_ADD_REG_DIR   67D0
MOVEA_ADD_REG_INDIR  67DE
MOVEA_ADD_REG_INDIR_POSTINC  67FA
MOVEA_ADD_REG_INDIR_PREDEC  67EC
MOVEA_AN_INDIR_POSTINC_REG  6ADE
MOVEA_AN_INDIR_POSTINC_REG0_OUT  6B4E
MOVEA_AN_INDIR_POSTINC_REG1  6AEC
MOVEA_AN_INDIR_POSTINC_REG1_OUT  6B5C
MOVEA_AN_INDIR_POSTINC_REG2  6AFA
MOVEA_AN_INDIR_POSTINC_REG2_OUT  6B6A
MOVEA_AN_INDIR_POSTINC_REG3  6B08
MOVEA_AN_INDIR_POSTINC_REG3_OUT  6B78
MOVEA_AN_INDIR_POSTINC_REG4  6B16
MOVEA_AN_INDIR_POSTINC_REG4_OUT  6B86
MOVEA_AN_INDIR_POSTINC_REG5  6B24
MOVEA_AN_INDIR_POSTINC_REG5_OUT  6B94
MOVEA_AN_INDIR_POSTINC_REG6  6B32
MOVEA_AN_INDIR_POSTINC_REG6_OUT  6BA2
MOVEA_AN_INDIR_POSTINC_REG7  6B40
MOVEA_AN_INDIR_POSTINC_REG7_OUT  6BB0
MOVEA_AN_INDIR_PREDEC  6BBE
MOVEA_AN_INDIR_PREDEC_REG0_OUT  6C2E
MOVEA_AN_INDIR_PREDEC_REG1  6BCC
MOVEA_AN_INDIR_PREDEC_REG1_OUT  6C3C
MOVEA_AN_INDIR_PREDEC_REG2  6BDA
MOVEA_AN_INDIR_PREDEC_REG2_OUT  6C4A
MOVEA_AN_INDIR_PREDEC_REG3  6BE8
MOVEA_AN_INDIR_PREDEC_REG3_OUT  6C58
MOVEA_AN_INDIR_PREDEC_REG4  6BF6
MOVEA_AN_INDIR_PREDEC_REG4_OUT  6C66
MOVEA_AN_INDIR_PREDEC_REG5  6C04
MOVEA_AN_INDIR_PREDEC_REG5_OUT  6C74
MOVEA_AN_INDIR_PREDEC_REG6  6C12
MOVEA_AN_INDIR_PREDEC_REG6_OUT  6C82
MOVEA_AN_INDIR_PREDEC_REG7  6C20
MOVEA_AN_INDIR_PREDEC_REG7_OUT  6C90
MOVEA_AN_INDIR_REG  69FE
MOVEA_AN_INDIR_REG0_OUT  6A6E
MOVEA_AN_INDIR_REG1  6A0C
MOVEA_AN_INDIR_REG1_OUT  6A7C
MOVEA_AN_INDIR_REG2  6A1A
MOVEA_AN_INDIR_REG2_OUT  6A8A
MOVEA_AN_INDIR_REG3  6A28
MOVEA_AN_INDIR_REG3_OUT  6A98
MOVEA_AN_INDIR_REG4  6A36
MOVEA_AN_INDIR_REG4_OUT  6AA6
MOVEA_AN_INDIR_REG5  6A44
MOVEA_AN_INDIR_REG5_OUT  6AB4
MOVEA_AN_INDIR_REG6  6A52
MOVEA_AN_INDIR_REG6_OUT  6AC2
MOVEA_AN_INDIR_REG7  6A60
MOVEA_AN_INDIR_REG7_OUT  6AD0
MOVEA_AN_REG        691E
MOVEA_D0_OUT        68AE
MOVEA_D1_OUT        68BC
MOVEA_D2_OUT        68CA
MOVEA_D3_OUT        68D8
MOVEA_D4_OUT        68E6
MOVEA_D5_OUT        68F4
MOVEA_D6_OUT        6902
MOVEA_D7_OUT        6910
MOVEA_DATA_REG_DIR  67C2
MOVEA_DETERMINE_SECOND_OP  6CE8
MOVEA_DN_REG        6838
MOVEA_IMMEDIATE_ADD  682A
MOVEA_IMMEDIATE_ADD_OUT  6CB4
MOVEA_IMM_ADD_L     6CD6
MOVEA_IMM_ADD_W     6CC6
MOVEA_RA1           692C
MOVEA_RA2           693A
MOVEA_RA3           6948
MOVEA_RA4           6956
MOVEA_RA5           6964
MOVEA_RA6           6972
MOVEA_RA7           6980
MOVEA_RD1           684C
MOVEA_RD2           685A
MOVEA_RD3           6868
MOVEA_RD4           6876
MOVEA_RD5           6884
MOVEA_RD6           6892
MOVEA_RD7           68A0
MOVEA_REG0          6CF0
MOVEA_REG0_OUT      6D60
MOVEA_REG1          6CFE
MOVEA_REG1_OUT      6D68
MOVEA_REG2          6D0C
MOVEA_REG2_OUT      6D70
MOVEA_REG3          6D1A
MOVEA_REG3_OUT      6D78
MOVEA_REG4          6D28
MOVEA_REG4_OUT      6D80
MOVEA_REG5          6D36
MOVEA_REG5_OUT      6D88
MOVEA_REG6          6D44
MOVEA_REG6_OUT      6D90
MOVEA_REG7          6D52
MOVEA_REG7_OUT      6D98
MOVEA_SIZE          1432
MOVEA_SUB           67BA
MOVEM_A0_REG_LIST_OUT  529C
MOVEM_A1_REG_LIST_OUT  52A6
MOVEM_A2_REG_LIST_OUT  52B0
MOVEM_A3_REG_LIST_OUT  52BA
MOVEM_A4_REG_LIST_OUT  52C4
MOVEM_A5_REG_LIST_OUT  52CE
MOVEM_A6_REG_LIST_OUT  52D8
MOVEM_A7_REG_LIST_OUT  52E2
MOVEM_ABS_ADD_LONG  5328
MOVEM_ABS_ADD_LONG_OUT  54EA
MOVEM_ABS_ADD_WORD  5312
MOVEM_ABS_ADD_WORD_OUT  54DC
MOVEM_ADD_REG_INDIR  52F6
MOVEM_ADD_REG_INDIR_PREDEC  5304
MOVEM_AN_INDIR_PDEC_R0_OUT  547C
MOVEM_AN_INDIR_PDEC_R1  541A
MOVEM_AN_INDIR_PDEC_R1_OUT  5488
MOVEM_AN_INDIR_PDEC_R2  5428
MOVEM_AN_INDIR_PDEC_R2_OUT  5494
MOVEM_AN_INDIR_PDEC_R3  5436
MOVEM_AN_INDIR_PDEC_R3_OUT  54A0
MOVEM_AN_INDIR_PDEC_R4  5444
MOVEM_AN_INDIR_PDEC_R4_OUT  54AC
MOVEM_AN_INDIR_PDEC_R5  5452
MOVEM_AN_INDIR_PDEC_R5_OUT  54B8
MOVEM_AN_INDIR_PDEC_R6  5460
MOVEM_AN_INDIR_PDEC_R6_OUT  54C4
MOVEM_AN_INDIR_PDEC_R7  546E
MOVEM_AN_INDIR_PDEC_R7_OUT  54D0
MOVEM_AN_INDIR_PREDEC  540C
MOVEM_AN_INDIR_R0_OUT  53AC
MOVEM_AN_INDIR_R1   534A
MOVEM_AN_INDIR_R1_OUT  53B8
MOVEM_AN_INDIR_R2   5358
MOVEM_AN_INDIR_R2_OUT  53C4
MOVEM_AN_INDIR_R3   5366
MOVEM_AN_INDIR_R3_OUT  53D0
MOVEM_AN_INDIR_R4   5374
MOVEM_AN_INDIR_R4_OUT  53DC
MOVEM_AN_INDIR_R5   5382
MOVEM_AN_INDIR_R5_OUT  53E8
MOVEM_AN_INDIR_R6   5390
MOVEM_AN_INDIR_R6_OUT  53F4
MOVEM_AN_INDIR_R7   539E
MOVEM_AN_INDIR_R7_OUT  5400
MOVEM_AN_INDIR_REG  533C
MOVEM_D0_REG_LIST_OUT  524C
MOVEM_D1_REG_LIST_OUT  5256
MOVEM_D2_REG_LIST_OUT  5260
MOVEM_D3_REG_LIST_OUT  526A
MOVEM_D4_REG_LIST_OUT  5274
MOVEM_D5_REG_LIST_OUT  527E
MOVEM_D6_REG_LIST_OUT  5288
MOVEM_D7_REG_LIST_OUT  5292
MOVEM_DETERMINE_SECOND_OP  54FA
MOVEM_DETERMINE_SECOND_OPERAND  52EE
MOVEM_ERROR         59C8
MOVEM_M2R           57A8
MOVEM_M2R_A0        5866
MOVEM_M2R_A0_REG_LIST_OUT  5976
MOVEM_M2R_A1        587E
MOVEM_M2R_A1_REG_LIST_OUT  5980
MOVEM_M2R_A2        5896
MOVEM_M2R_A2_REG_LIST_OUT  598A
MOVEM_M2R_A3        58AE
MOVEM_M2R_A3_REG_LIST_OUT  5994
MOVEM_M2R_A4        58C6
MOVEM_M2R_A4_REG_LIST_OUT  599E
MOVEM_M2R_A5        58DE
MOVEM_M2R_A5_REG_LIST_OUT  59A8
MOVEM_M2R_A6        58F6
MOVEM_M2R_A6_REG_LIST_OUT  59B2
MOVEM_M2R_A7        590E
MOVEM_M2R_A7_REG_LIST_OUT  59BC
MOVEM_M2R_ABS_ADD_LONG  5534
MOVEM_M2R_ABS_ADD_LONG_OUT  5796
MOVEM_M2R_ABS_ADD_WORD  551E
MOVEM_M2R_ABS_ADD_WORD_OUT  5788
MOVEM_M2R_AN_INDIR  5502
MOVEM_M2R_AN_INDIR_PDEC_R0_OUT  5738
MOVEM_M2R_AN_INDIR_PDEC_R1  56D6
MOVEM_M2R_AN_INDIR_PDEC_R1_OUT  5742
MOVEM_M2R_AN_INDIR_PDEC_R2  56E4
MOVEM_M2R_AN_INDIR_PDEC_R2_OUT  574C
MOVEM_M2R_AN_INDIR_PDEC_R3  56F2
MOVEM_M2R_AN_INDIR_PDEC_R3_OUT  5756
MOVEM_M2R_AN_INDIR_PDEC_R4  5700
MOVEM_M2R_AN_INDIR_PDEC_R4_OUT  5760
MOVEM_M2R_AN_INDIR_PDEC_R5  570E
MOVEM_M2R_AN_INDIR_PDEC_R5_OUT  576A
MOVEM_M2R_AN_INDIR_PDEC_R6  571C
MOVEM_M2R_AN_INDIR_PDEC_R6_OUT  5774
MOVEM_M2R_AN_INDIR_PDEC_R7  572A
MOVEM_M2R_AN_INDIR_PDEC_R7_OUT  577E
MOVEM_M2R_AN_INDIR_PINC_R0_OUT  5678
MOVEM_M2R_AN_INDIR_PINC_R1  5616
MOVEM_M2R_AN_INDIR_PINC_R1_OUT  5682
MOVEM_M2R_AN_INDIR_PINC_R2  5624
MOVEM_M2R_AN_INDIR_PINC_R2_OUT  568C
MOVEM_M2R_AN_INDIR_PINC_R3  5632
MOVEM_M2R_AN_INDIR_PINC_R3_OUT  5696
MOVEM_M2R_AN_INDIR_PINC_R4  5640
MOVEM_M2R_AN_INDIR_PINC_R4_OUT  56A0
MOVEM_M2R_AN_INDIR_PINC_R5  564E
MOVEM_M2R_AN_INDIR_PINC_R5_OUT  56AA
MOVEM_M2R_AN_INDIR_PINC_R6  565C
MOVEM_M2R_AN_INDIR_PINC_R6_OUT  56B4
MOVEM_M2R_AN_INDIR_PINC_R7  566A
MOVEM_M2R_AN_INDIR_PINC_R7_OUT  56BE
MOVEM_M2R_AN_INDIR_PINC_REG  5608
MOVEM_M2R_AN_INDIR_POSTINC  5510
MOVEM_M2R_AN_INDIR_R0_OUT  55B8
MOVEM_M2R_AN_INDIR_R1  5556
MOVEM_M2R_AN_INDIR_R1_OUT  55C2
MOVEM_M2R_AN_INDIR_R2  5564
MOVEM_M2R_AN_INDIR_R2_OUT  55CC
MOVEM_M2R_AN_INDIR_R3  5572
MOVEM_M2R_AN_INDIR_R3_OUT  55D6
MOVEM_M2R_AN_INDIR_R4  5580
MOVEM_M2R_AN_INDIR_R4_OUT  55E0
MOVEM_M2R_AN_INDIR_R5  558E
MOVEM_M2R_AN_INDIR_R5_OUT  55EA
MOVEM_M2R_AN_INDIR_R6  559C
MOVEM_M2R_AN_INDIR_R6_OUT  55F4
MOVEM_M2R_AN_INDIR_R7  55AA
MOVEM_M2R_AN_INDIR_R7_OUT  55FE
MOVEM_M2R_AN_INDIR_REG  5548
MOVEM_M2R_D0_REG_LIST_OUT  5926
MOVEM_M2R_D1        57BE
MOVEM_M2R_D1_REG_LIST_OUT  5930
MOVEM_M2R_D2        57D6
MOVEM_M2R_D2_REG_LIST_OUT  593A
MOVEM_M2R_D3        57EE
MOVEM_M2R_D3_REG_LIST_OUT  5944
MOVEM_M2R_D4        5806
MOVEM_M2R_D4_REG_LIST_OUT  594E
MOVEM_M2R_D5        581E
MOVEM_M2R_D5_REG_LIST_OUT  5958
MOVEM_M2R_D6        5836
MOVEM_M2R_D6_REG_LIST_OUT  5962
MOVEM_M2R_D7        584E
MOVEM_M2R_D7_REG_LIST_OUT  596C
MOVEM_MEM_REG_MATCH  50BE
MOVEM_MR_END        15DA
MOVEM_MR_FAIL       15D4
MOVEM_MR_L          15AE
MOVEM_MR_SIZE       157E
MOVEM_REG_MEM       50CC
MOVEM_REG_MEM_A0    518C
MOVEM_REG_MEM_A1    51A4
MOVEM_REG_MEM_A2    51BC
MOVEM_REG_MEM_A3    51D4
MOVEM_REG_MEM_A4    51EC
MOVEM_REG_MEM_A5    5204
MOVEM_REG_MEM_A6    521C
MOVEM_REG_MEM_A7    5234
MOVEM_REG_MEM_D1    50E4
MOVEM_REG_MEM_D2    50FC
MOVEM_REG_MEM_D3    5114
MOVEM_REG_MEM_D4    512C
MOVEM_REG_MEM_D5    5144
MOVEM_REG_MEM_D6    515C
MOVEM_REG_MEM_D7    5174
MOVEM_RM_END        1578
MOVEM_RM_FAIL       1572
MOVEM_RM_L          154C
MOVEM_RM_SIZE       151C
MOVEM_SECOND_OPERAND  57A6
MOVEM_SUB           50A6
MOVEQ_D0_OUTPUT     6E2C
MOVEQ_D1_OUTPUT     6E34
MOVEQ_D2_OUTPUT     6E3C
MOVEQ_D3_OUTPUT     6E44
MOVEQ_D4_OUTPUT     6E4C
MOVEQ_D5_OUTPUT     6E54
MOVEQ_D6_OUTPUT     6E5C
MOVEQ_D7_OUTPUT     6E64
MOVEQ_DN_REG        6DBC
MOVEQ_END           2086
MOVEQ_FAIL          2080
MOVEQ_FIRST_OPERAND  6DA0
MOVEQ_RD1           6DCA
MOVEQ_RD2           6DD8
MOVEQ_RD3           6DE6
MOVEQ_RD4           6DF4
MOVEQ_RD5           6E02
MOVEQ_RD6           6E10
MOVEQ_RD7           6E1E
MOVEQ_SECOND_OPERAND  6DB6
MOVEQ_SIZE          2050
MOVEQ_SUB           6DA0
MOVE_ABS_ADD_LONG   48CC
MOVE_ABS_ADD_LONG_OUT  4C6A
MOVE_ABS_ADD_WORD   48B6
MOVE_ABS_ADD_WORD_OUT  4C60
MOVE_ADD_REG_INDIR  488C
MOVE_ADD_REG_INDIR_POSTINC  48A8
MOVE_ADD_REG_INDIR_PREDEC  489A
MOVE_AN_INDIR_POSTINC_REG  4AA0
MOVE_AN_INDIR_POSTINC_REG0_OUT  4B10
MOVE_AN_INDIR_POSTINC_REG1  4AAE
MOVE_AN_INDIR_POSTINC_REG1_OUT  4B1E
MOVE_AN_INDIR_POSTINC_REG2  4ABC
MOVE_AN_INDIR_POSTINC_REG2_OUT  4B2C
MOVE_AN_INDIR_POSTINC_REG3  4ACA
MOVE_AN_INDIR_POSTINC_REG3_OUT  4B3A
MOVE_AN_INDIR_POSTINC_REG4  4AD8
MOVE_AN_INDIR_POSTINC_REG4_OUT  4B48
MOVE_AN_INDIR_POSTINC_REG5  4AE6
MOVE_AN_INDIR_POSTINC_REG5_OUT  4B56
MOVE_AN_INDIR_POSTINC_REG6  4AF4
MOVE_AN_INDIR_POSTINC_REG6_OUT  4B64
MOVE_AN_INDIR_POSTINC_REG7  4B02
MOVE_AN_INDIR_POSTINC_REG7_OUT  4B72
MOVE_AN_INDIR_PREDEC  4B80
MOVE_AN_INDIR_PREDEC_REG0_OUT  4BF0
MOVE_AN_INDIR_PREDEC_REG1  4B8E
MOVE_AN_INDIR_PREDEC_REG1_OUT  4BFE
MOVE_AN_INDIR_PREDEC_REG2  4B9C
MOVE_AN_INDIR_PREDEC_REG2_OUT  4C0C
MOVE_AN_INDIR_PREDEC_REG3  4BAA
MOVE_AN_INDIR_PREDEC_REG3_OUT  4C1A
MOVE_AN_INDIR_PREDEC_REG4  4BB8
MOVE_AN_INDIR_PREDEC_REG4_OUT  4C28
MOVE_AN_INDIR_PREDEC_REG5  4BC6
MOVE_AN_INDIR_PREDEC_REG5_OUT  4C36
MOVE_AN_INDIR_PREDEC_REG6  4BD4
MOVE_AN_INDIR_PREDEC_REG6_OUT  4C44
MOVE_AN_INDIR_PREDEC_REG7  4BE2
MOVE_AN_INDIR_PREDEC_REG7_OUT  4C52
MOVE_AN_INDIR_REG   49C0
MOVE_AN_INDIR_REG0_OUT  4A30
MOVE_AN_INDIR_REG1  49CE
MOVE_AN_INDIR_REG1_OUT  4A3E
MOVE_AN_INDIR_REG2  49DC
MOVE_AN_INDIR_REG2_OUT  4A4C
MOVE_AN_INDIR_REG3  49EA
MOVE_AN_INDIR_REG3_OUT  4A5A
MOVE_AN_INDIR_REG4  49F8
MOVE_AN_INDIR_REG4_OUT  4A68
MOVE_AN_INDIR_REG5  4A06
MOVE_AN_INDIR_REG5_OUT  4A76
MOVE_AN_INDIR_REG6  4A14
MOVE_AN_INDIR_REG6_OUT  4A84
MOVE_AN_INDIR_REG7  4A22
MOVE_AN_INDIR_REG7_OUT  4A92
MOVE_D0_OUT         4950
MOVE_D1_OUT         495E
MOVE_D2_OUT         496C
MOVE_D3_OUT         497A
MOVE_D4_OUT         4988
MOVE_D5_OUT         4996
MOVE_D6_OUT         49A4
MOVE_D7_OUT         49B2
MOVE_DATA_REG_DIR   487E
MOVE_DECODE         215C
MOVE_DEST_A0_OUT    4E18
MOVE_DEST_A1_OUT    4E20
MOVE_DEST_A2_OUT    4E28
MOVE_DEST_A3_OUT    4E30
MOVE_DEST_A4_OUT    4E38
MOVE_DEST_A5_OUT    4E40
MOVE_DEST_A6_OUT    4E48
MOVE_DEST_A7_OUT    4E50
MOVE_DEST_ABS_ADD_LONG  4CDA
MOVE_DEST_ABS_ADD_LONG_OUT  5072
MOVE_DEST_ABS_ADD_WORD  4CC4
MOVE_DEST_ABS_ADD_WORD_OUT  5068
MOVE_DEST_ADD_REG_DIR  4C8C
MOVE_DEST_ADD_REG_INDIR  4C9A
MOVE_DEST_ADD_REG_INDIR_POSTINC  4CB6
MOVE_DEST_ADD_REG_INDIR_PREDEC  4CA8
MOVE_DEST_AN_INDIR_PDEC_R0_OUT  5028
MOVE_DEST_AN_INDIR_PDEC_R1  4FC6
MOVE_DEST_AN_INDIR_PDEC_R1_OUT  5030
MOVE_DEST_AN_INDIR_PDEC_R2  4FD4
MOVE_DEST_AN_INDIR_PDEC_R2_OUT  5038
MOVE_DEST_AN_INDIR_PDEC_R3  4FE2
MOVE_DEST_AN_INDIR_PDEC_R3_OUT  5040
MOVE_DEST_AN_INDIR_PDEC_R4  4FF0
MOVE_DEST_AN_INDIR_PDEC_R4_OUT  5048
MOVE_DEST_AN_INDIR_PDEC_R5  4FFE
MOVE_DEST_AN_INDIR_PDEC_R5_OUT  5050
MOVE_DEST_AN_INDIR_PDEC_R6  500C
MOVE_DEST_AN_INDIR_PDEC_R6_OUT  5058
MOVE_DEST_AN_INDIR_PDEC_R7  501A
MOVE_DEST_AN_INDIR_PDEC_R7_OUT  5060
MOVE_DEST_AN_INDIR_PINC_R  4F08
MOVE_DEST_AN_INDIR_PINC_R0_OUT  4F78
MOVE_DEST_AN_INDIR_PINC_R1  4F16
MOVE_DEST_AN_INDIR_PINC_R1_OUT  4F80
MOVE_DEST_AN_INDIR_PINC_R2  4F24
MOVE_DEST_AN_INDIR_PINC_R2_OUT  4F88
MOVE_DEST_AN_INDIR_PINC_R3  4F32
MOVE_DEST_AN_INDIR_PINC_R3_OUT  4F90
MOVE_DEST_AN_INDIR_PINC_R4  4F40
MOVE_DEST_AN_INDIR_PINC_R4_OUT  4F98
MOVE_DEST_AN_INDIR_PINC_R5  4F4E
MOVE_DEST_AN_INDIR_PINC_R5_OUT  4FA0
MOVE_DEST_AN_INDIR_PINC_R6  4F5C
MOVE_DEST_AN_INDIR_PINC_R6_OUT  4FA8
MOVE_DEST_AN_INDIR_PINC_R7  4F6A
MOVE_DEST_AN_INDIR_PINC_R7_OUT  4FB0
MOVE_DEST_AN_INDIR_PREDEC  4FB8
MOVE_DEST_AN_INDIR_REG  4E58
MOVE_DEST_AN_INDIR_REG0_OUT  4EC8
MOVE_DEST_AN_INDIR_REG1  4E66
MOVE_DEST_AN_INDIR_REG1_OUT  4ED0
MOVE_DEST_AN_INDIR_REG2  4E74
MOVE_DEST_AN_INDIR_REG2_OUT  4ED8
MOVE_DEST_AN_INDIR_REG3  4E82
MOVE_DEST_AN_INDIR_REG3_OUT  4EE0
MOVE_DEST_AN_INDIR_REG4  4E90
MOVE_DEST_AN_INDIR_REG4_OUT  4EE8
MOVE_DEST_AN_INDIR_REG5  4E9E
MOVE_DEST_AN_INDIR_REG5_OUT  4EF0
MOVE_DEST_AN_INDIR_REG6  4EAC
MOVE_DEST_AN_INDIR_REG6_OUT  4EF8
MOVE_DEST_AN_INDIR_REG7  4EBA
MOVE_DEST_AN_INDIR_REG7_OUT  4F00
MOVE_DEST_AN_REG    4DA8
MOVE_DEST_D0_OUT    4D68
MOVE_DEST_D1_OUT    4D70
MOVE_DEST_D2_OUT    4D78
MOVE_DEST_D3_OUT    4D80
MOVE_DEST_D4_OUT    4D88
MOVE_DEST_D5_OUT    4D90
MOVE_DEST_D6_OUT    4D98
MOVE_DEST_D7_OUT    4DA0
MOVE_DEST_DATA_REG_DIR  4C7E
MOVE_DEST_DN_REG    4CF8
MOVE_DEST_IMMEDIATE_ADD  4CE4
MOVE_DEST_IMMEDIATE_ADD_OUT  507E
MOVE_DEST_IMM_ADD_L  509A
MOVE_DEST_IMM_ADD_W  5090
MOVE_DEST_RA1       4DB6
MOVE_DEST_RA2       4DC4
MOVE_DEST_RA3       4DD2
MOVE_DEST_RA4       4DE0
MOVE_DEST_RA5       4DEE
MOVE_DEST_RA6       4DFC
MOVE_DEST_RA7       4E0A
MOVE_DEST_RD1       4D06
MOVE_DEST_RD2       4D14
MOVE_DEST_RD3       4D22
MOVE_DEST_RD4       4D30
MOVE_DEST_RD5       4D3E
MOVE_DEST_RD6       4D4C
MOVE_DEST_RD7       4D5A
MOVE_DETERMINE_SECOND_OP  4C76
MOVE_DN_REG         48E0
MOVE_M2R_AN_INDIR_PREDEC  56C8
MOVE_RD1            48EE
MOVE_RD2            48FC
MOVE_RD3            490A
MOVE_RD4            4918
MOVE_RD5            4926
MOVE_RD6            4934
MOVE_RD7            4942
MOVE_SIZE           1494
MOVE_SUB            4878
M_END               1516
M_FAIL              1510
M_L                 14EA
M_SIZE_B_ADD        0
M_SIZE_B_LOGIC      0
M_SIZE_B_MOVES      1000
M_SIZE_B_NOT        0
M_SIZE_B_SHFTS      0
M_SIZE_B_SUB        0
M_SIZE_L_ADD        80
M_SIZE_L_ADDA       100
M_SIZE_L_BCC        FF
M_SIZE_L_LOGIC      80
M_SIZE_L_MOVEM      40
M_SIZE_L_MOVEQ      7000
M_SIZE_L_MOVES      2000
M_SIZE_L_NOT        80
M_SIZE_L_SHFTS      80
M_SIZE_L_SUB        80
M_SIZE_W_ADD        40
M_SIZE_W_ADDA       0
M_SIZE_W_BCC        0
M_SIZE_W_LOGIC      40
M_SIZE_W_MOVEM      0
M_SIZE_W_MOVES      3000
M_SIZE_W_NOT        40
M_SIZE_W_SHFTS      40
M_SIZE_W_SUB        40
M_W                 14C4
NOP_SIZE            15E0
NOT_ABS_ADD_LONG    6EC0
NOT_ABS_ADD_LONG_OUT  719E
NOT_ABS_ADD_WORD    6EAA
NOT_ABS_ADD_WORD_OUT  7194
NOT_AN_INDIR        6E80
NOT_AN_INDIR_PDEC_R0_OUT  7154
NOT_AN_INDIR_PDEC_R1  70F2
NOT_AN_INDIR_PDEC_R1_OUT  715C
NOT_AN_INDIR_PDEC_R2  7100
NOT_AN_INDIR_PDEC_R2_OUT  7164
NOT_AN_INDIR_PDEC_R3  710E
NOT_AN_INDIR_PDEC_R3_OUT  716C
NOT_AN_INDIR_PDEC_R4  711C
NOT_AN_INDIR_PDEC_R4_OUT  7174
NOT_AN_INDIR_PDEC_R5  712A
NOT_AN_INDIR_PDEC_R5_OUT  717C
NOT_AN_INDIR_PDEC_R6  7138
NOT_AN_INDIR_PDEC_R6_OUT  7184
NOT_AN_INDIR_PDEC_R7  7146
NOT_AN_INDIR_PDEC_R7_OUT  718C
NOT_AN_INDIR_PINC_R0_OUT  70A4
NOT_AN_INDIR_PINC_R1  7044
NOT_AN_INDIR_PINC_R1_OUT  70AC
NOT_AN_INDIR_PINC_R2  7052
NOT_AN_INDIR_PINC_R2_OUT  70B4
NOT_AN_INDIR_PINC_R3  7060
NOT_AN_INDIR_PINC_R3_OUT  70BC
NOT_AN_INDIR_PINC_R4  706E
NOT_AN_INDIR_PINC_R4_OUT  70C4
NOT_AN_INDIR_PINC_R5  707C
NOT_AN_INDIR_PINC_R5_OUT  70CC
NOT_AN_INDIR_PINC_R6  708A
NOT_AN_INDIR_PINC_R6_OUT  70D4
NOT_AN_INDIR_PINC_R7  7096
NOT_AN_INDIR_PINC_R7_OUT  70DC
NOT_AN_INDIR_POSTINC  6E8E
NOT_AN_INDIR_POSTINC_REG  7036
NOT_AN_INDIR_PREDEC  6E9C
NOT_AN_INDIR_PREDEC_REG  70E4
NOT_AN_INDIR_REG    6F86
NOT_AN_INDIR_REG0_OUT  6FF6
NOT_AN_INDIR_REG1   6F94
NOT_AN_INDIR_REG1_OUT  6FFE
NOT_AN_INDIR_REG2   6FA2
NOT_AN_INDIR_REG2_OUT  7006
NOT_AN_INDIR_REG3   6FB0
NOT_AN_INDIR_REG3_OUT  700E
NOT_AN_INDIR_REG4   6FBE
NOT_AN_INDIR_REG4_OUT  7016
NOT_AN_INDIR_REG5   6FCC
NOT_AN_INDIR_REG5_OUT  701E
NOT_AN_INDIR_REG6   6FDA
NOT_AN_INDIR_REG6_OUT  7026
NOT_AN_INDIR_REG7   6FE8
NOT_AN_INDIR_REG7_OUT  702E
NOT_D0_OUTPUT       6F46
NOT_D1_OUTPUT       6F4E
NOT_D2_OUTPUT       6F56
NOT_D3_OUTPUT       6F5E
NOT_D4_OUTPUT       6F66
NOT_D5_OUTPUT       6F6E
NOT_D6_OUTPUT       6F76
NOT_D7_OUTPUT       6F7E
NOT_DATA_REG_DIR    6E72
NOT_DN_REG          6ECE
NOT_END             16DA
NOT_FAIL            16D4
NOT_HEX             FFFFFFFF
NOT_HEX_MSG         830F
NOT_L               16AE
NOT_RD1             6EE4
NOT_RD2             6EF2
NOT_RD3             6F00
NOT_RD4             6F0E
NOT_RD5             6F1C
NOT_RD6             6F2A
NOT_RD7             6F38
NOT_SIZE            1658
NOT_SUB             6E6C
NOT_W               1688
NO_SIZE             0
OPCODE_ADDAL        805A
OPCODE_ADDAW        8053
OPCODE_ADDB         8041
OPCODE_ADDL         804D
OPCODE_ADDQB        8061
OPCODE_ADDQL        806F
OPCODE_ADDQW        8068
OPCODE_ADDW         8047
OPCODE_ANDB         808C
OPCODE_ANDL         8098
OPCODE_ANDW         8092
OPCODE_ASLB         80E3
OPCODE_ASLL         80EF
OPCODE_ASLW         80E9
OPCODE_ASRB         80F5
OPCODE_ASRL         8101
OPCODE_ASRW         80FB
OPCODE_BEQ          814B
OPCODE_BEQB         814F
OPCODE_BEQW         8155
OPCODE_BGT          812B
OPCODE_BGTB         812F
OPCODE_BGTW         8135
OPCODE_BLE          813B
OPCODE_BLEB         813F
OPCODE_BLEW         8145
OPCODE_BRA          8163
OPCODE_BRAB         8167
OPCODE_BRAW         816D
OPCODE_DATA         8183
OPCODE_JSR          815B
OPCODE_LEA          8088
OPCODE_LSLB         80BF
OPCODE_LSLL         80CB
OPCODE_LSLW         80C5
OPCODE_LSRB         80D1
OPCODE_LSRL         80DD
OPCODE_LSRW         80D7
OPCODE_MOVEAB       8025
OPCODE_MOVEAL       8035
OPCODE_MOVEAW       802D
OPCODE_MOVEB        8004
OPCODE_MOVEL        8012
OPCODE_MOVEM        8019
OPCODE_MOVEML       817B
OPCODE_MOVEMW       8173
OPCODE_MOVEQ        801F
OPCODE_MOVEW        800B
OPCODE_NOP          803D
OPCODE_NOTB         80AD
OPCODE_NOTL         80B9
OPCODE_NOTW         80B3
OPCODE_ORB          809E
OPCODE_ORL          80A8
OPCODE_ORW          80A3
OPCODE_ROLB         8107
OPCODE_ROLL         8113
OPCODE_ROLW         810D
OPCODE_RORB         8119
OPCODE_RORL         8125
OPCODE_RORW         811F
OPCODE_RTS          815F
OPCODE_SUBB         8076
OPCODE_SUBL         8082
OPCODE_SUBROUTINE   208C
OPCODE_SUBW         807C
OPWD_DONE           142C
OPWD_LOOP           1418
OP_ADD              222C
OP_ADDA             2224
OP_ADDQ             2338
OP_AND              2354
OP_ASL_M            22FC
OP_ASL_R            2320
OP_ASR_M            2302
OP_ASR_R            2326
OP_BEQ              2268
OP_BGT              2262
OP_BLE              226E
OP_BRA              2274
OP_DATA             237E
OP_JSR              21FC
OP_LEA              21EA
OP_LSL_M            22F0
OP_LSL_R            2314
OP_LSR_M            22F6
OP_LSR_R            231A
OP_MOVE             217E
OP_MOVEA            2178
OP_MOVEM_MR         21F6
OP_MOVEM_RM         21F0
OP_MOVEQ            2370
OP_NOP              21DE
OP_NOT              2202
OP_OR               2362
OP_ROL_M            2308
OP_ROL_R            232C
OP_ROR_M            230E
OP_ROR_R            2332
OP_RTS              21E4
OP_SUB              2346
OR_DETERMINE_SECOND_OP  76C4
OR_DETERMINE_SECOND_OPERAND  7854
OR_DN_EA            777C
OR_DN_EA_ABS_ADD_LONG  789C
OR_DN_EA_ABS_ADD_LONG_OUT  7ACA
OR_DN_EA_ABS_ADD_WORD  7886
OR_DN_EA_ABS_ADD_WORD_OUT  7AC0
OR_DN_EA_ADD_REG_INDIR  785C
OR_DN_EA_ADD_REG_INDIR_PDEC  786A
OR_DN_EA_ADD_REG_INDIR_PINC  7878
OR_DN_EA_AN_INDIR_PDEC_R0_OUT  7A80
OR_DN_EA_AN_INDIR_PDEC_R1  7A1E
OR_DN_EA_AN_INDIR_PDEC_R1_OUT  7A88
OR_DN_EA_AN_INDIR_PDEC_R2  7A2C
OR_DN_EA_AN_INDIR_PDEC_R2_OUT  7A90
OR_DN_EA_AN_INDIR_PDEC_R3  7A3A
OR_DN_EA_AN_INDIR_PDEC_R3_OUT  7A98
OR_DN_EA_AN_INDIR_PDEC_R4  7A48
OR_DN_EA_AN_INDIR_PDEC_R4_OUT  7AA0
OR_DN_EA_AN_INDIR_PDEC_R5  7A56
OR_DN_EA_AN_INDIR_PDEC_R5_OUT  7AA8
OR_DN_EA_AN_INDIR_PDEC_R6  7A64
OR_DN_EA_AN_INDIR_PDEC_R6_OUT  7AB0
OR_DN_EA_AN_INDIR_PDEC_R7  7A72
OR_DN_EA_AN_INDIR_PDEC_R7_OUT  7AB8
OR_DN_EA_AN_INDIR_PINC_R0_OUT  79D0
OR_DN_EA_AN_INDIR_PINC_R1  796E
OR_DN_EA_AN_INDIR_PINC_R1_OUT  79D8
OR_DN_EA_AN_INDIR_PINC_R2  797C
OR_DN_EA_AN_INDIR_PINC_R2_OUT  79E0
OR_DN_EA_AN_INDIR_PINC_R3  798A
OR_DN_EA_AN_INDIR_PINC_R3_OUT  79E8
OR_DN_EA_AN_INDIR_PINC_R4  7998
OR_DN_EA_AN_INDIR_PINC_R4_OUT  79F0
OR_DN_EA_AN_INDIR_PINC_R5  79A6
OR_DN_EA_AN_INDIR_PINC_R5_OUT  79F8
OR_DN_EA_AN_INDIR_PINC_R6  79B4
OR_DN_EA_AN_INDIR_PINC_R6_OUT  7A00
OR_DN_EA_AN_INDIR_PINC_R7  79C2
OR_DN_EA_AN_INDIR_PINC_R7_OUT  7A08
OR_DN_EA_AN_INDIR_POSTINC_REG  7960
OR_DN_EA_AN_INDIR_PREDEC  7A10
OR_DN_EA_AN_INDIR_REG  78AA
OR_DN_EA_AN_INDIR_REG0_OUT  7920
OR_DN_EA_AN_INDIR_REG1  78BE
OR_DN_EA_AN_INDIR_REG1_OUT  7928
OR_DN_EA_AN_INDIR_REG2  78CC
OR_DN_EA_AN_INDIR_REG2_OUT  7930
OR_DN_EA_AN_INDIR_REG3  78DA
OR_DN_EA_AN_INDIR_REG3_OUT  7938
OR_DN_EA_AN_INDIR_REG4  78E8
OR_DN_EA_AN_INDIR_REG4_OUT  7940
OR_DN_EA_AN_INDIR_REG5  78F6
OR_DN_EA_AN_INDIR_REG5_OUT  7948
OR_DN_EA_AN_INDIR_REG6  7904
OR_DN_EA_AN_INDIR_REG6_OUT  7950
OR_DN_EA_AN_INDIR_REG7  7912
OR_DN_EA_AN_INDIR_REG7_OUT  7958
OR_DN_EA_MATCH      71B8
OR_DN_EA_MATCH_L    71D4
OR_DN_EA_MATCH_W    71C6
OR_EA_DN            720A
OR_EA_DN_A0_OUT     73A6
OR_EA_DN_A1_OUT     73B2
OR_EA_DN_A2_OUT     73BE
OR_EA_DN_A3_OUT     73CA
OR_EA_DN_A4_OUT     73D6
OR_EA_DN_A5_OUT     73E2
OR_EA_DN_A6_OUT     73EE
OR_EA_DN_A7_OUT     73FA
OR_EA_DN_ABS_ADD_LONG  7252
OR_EA_DN_ABS_ADD_LONG_OUT  7684
OR_EA_DN_ABS_ADD_WORD  723C
OR_EA_DN_ABS_ADD_WORD_OUT  7676
OR_EA_DN_ADD_REG_INDIR  7212
OR_EA_DN_ADD_REG_INDIR_POSTINC  722E
OR_EA_DN_ADD_REG_INDIR_PREDEC  7220
OR_EA_DN_AN_INDIR_PDEC_R0_OUT  7616
OR_EA_DN_AN_INDIR_PDEC_R1  75B4
OR_EA_DN_AN_INDIR_PDEC_R1_OUT  7622
OR_EA_DN_AN_INDIR_PDEC_R2  75C2
OR_EA_DN_AN_INDIR_PDEC_R2_OUT  762E
OR_EA_DN_AN_INDIR_PDEC_R3  75D0
OR_EA_DN_AN_INDIR_PDEC_R3_OUT  763A
OR_EA_DN_AN_INDIR_PDEC_R4  75DE
OR_EA_DN_AN_INDIR_PDEC_R4_OUT  7646
OR_EA_DN_AN_INDIR_PDEC_R5  75EC
OR_EA_DN_AN_INDIR_PDEC_R5_OUT  7652
OR_EA_DN_AN_INDIR_PDEC_R6  75FA
OR_EA_DN_AN_INDIR_PDEC_R6_OUT  765E
OR_EA_DN_AN_INDIR_PDEC_R7  7608
OR_EA_DN_AN_INDIR_PDEC_R7_OUT  766A
OR_EA_DN_AN_INDIR_PINC_R0_OUT  7546
OR_EA_DN_AN_INDIR_PINC_R1  74E4
OR_EA_DN_AN_INDIR_PINC_R1_OUT  7552
OR_EA_DN_AN_INDIR_PINC_R2  74F2
OR_EA_DN_AN_INDIR_PINC_R2_OUT  755E
OR_EA_DN_AN_INDIR_PINC_R3  7500
OR_EA_DN_AN_INDIR_PINC_R3_OUT  756A
OR_EA_DN_AN_INDIR_PINC_R4  750E
OR_EA_DN_AN_INDIR_PINC_R4_OUT  7576
OR_EA_DN_AN_INDIR_PINC_R5  751C
OR_EA_DN_AN_INDIR_PINC_R5_OUT  7582
OR_EA_DN_AN_INDIR_PINC_R6  752A
OR_EA_DN_AN_INDIR_PINC_R6_OUT  758E
OR_EA_DN_AN_INDIR_PINC_R7  7538
OR_EA_DN_AN_INDIR_PINC_R7_OUT  759A
OR_EA_DN_AN_INDIR_POSTINC_REG  74D6
OR_EA_DN_AN_INDIR_PREDEC  75A6
OR_EA_DN_AN_INDIR_REG  7406
OR_EA_DN_AN_INDIR_REG0_OUT  7476
OR_EA_DN_AN_INDIR_REG1  7414
OR_EA_DN_AN_INDIR_REG1_OUT  7482
OR_EA_DN_AN_INDIR_REG2  7422
OR_EA_DN_AN_INDIR_REG2_OUT  748E
OR_EA_DN_AN_INDIR_REG3  7430
OR_EA_DN_AN_INDIR_REG3_OUT  749A
OR_EA_DN_AN_INDIR_REG4  743E
OR_EA_DN_AN_INDIR_REG4_OUT  74A6
OR_EA_DN_AN_INDIR_REG5  744C
OR_EA_DN_AN_INDIR_REG5_OUT  74B2
OR_EA_DN_AN_INDIR_REG6  745A
OR_EA_DN_AN_INDIR_REG6_OUT  74BE
OR_EA_DN_AN_INDIR_REG7  7468
OR_EA_DN_AN_INDIR_REG7_OUT  74CA
OR_EA_DN_AN_REG     7336
OR_EA_DN_D0_OUT     72D6
OR_EA_DN_D1_OUT     72E2
OR_EA_DN_D2_OUT     72EE
OR_EA_DN_D3_OUT     72FA
OR_EA_DN_D4_OUT     7306
OR_EA_DN_D5_OUT     7312
OR_EA_DN_D6_OUT     731E
OR_EA_DN_D7_OUT     732A
OR_EA_DN_DN_REG     7260
OR_EA_DN_IMMEDIATE_ADD_OUT  7694
OR_EA_DN_IMM_ADD_L  76B4
OR_EA_DN_IMM_ADD_W  76A6
OR_EA_DN_MATCH      71E2
OR_EA_DN_MATCH_L    71FE
OR_EA_DN_MATCH_W    71F0
OR_EA_DN_RA1        7344
OR_EA_DN_RA2        7352
OR_EA_DN_RA3        7360
OR_EA_DN_RA4        736E
OR_EA_DN_RA5        737C
OR_EA_DN_RA6        738A
OR_EA_DN_RA7        7398
OR_EA_DN_RD1        7274
OR_EA_DN_RD2        7282
OR_EA_DN_RD3        7290
OR_EA_DN_RD4        729E
OR_EA_DN_RD5        72AC
OR_EA_DN_RD6        72BA
OR_EA_DN_RD7        72C8
OR_END              204A
OR_FAIL             2044
OR_L                201E
OR_SIZE             1FC8
OR_SUB              71B2
OR_W                1FF8
PRESS_ENTER         8421
PRINT_BCC           1342
PRINT_DATA          12F0
PRINT_DISPLACEDADDRESS  138C
PRINT_EA            13EE
PRINT_EAT           13DE
PRINT_HEX           1228
PRINT_LINE_NUMBER   13B4
PRINT_OPCODE_WORD   140A
PRINT_STRING        1218
PRINT_STRING_OP_NL  1270
PRINT_STRING_OP_NN  123C
PRINT_STRING_SIZED  12A4
QT                  71
RESTART_Q           843E
ROD_ABS_ADD_LONG    7B32
ROD_ABS_ADD_LONG_OUT  7D62
ROD_ABS_ADD_WORD    7B1C
ROD_ABS_ADD_WORD_OUT  7D58
ROD_AN_INDIR        7AF2
ROD_AN_INDIR_PDEC_R0_OUT  7D18
ROD_AN_INDIR_PDEC_R1  7CB6
ROD_AN_INDIR_PDEC_R1_OUT  7D20
ROD_AN_INDIR_PDEC_R2  7CC4
ROD_AN_INDIR_PDEC_R2_OUT  7D28
ROD_AN_INDIR_PDEC_R3  7CD2
ROD_AN_INDIR_PDEC_R3_OUT  7D30
ROD_AN_INDIR_PDEC_R4  7CE0
ROD_AN_INDIR_PDEC_R4_OUT  7D38
ROD_AN_INDIR_PDEC_R5  7CEE
ROD_AN_INDIR_PDEC_R5_OUT  7D40
ROD_AN_INDIR_PDEC_R6  7CFC
ROD_AN_INDIR_PDEC_R6_OUT  7D48
ROD_AN_INDIR_PDEC_R7  7D0A
ROD_AN_INDIR_PDEC_R7_OUT  7D50
ROD_AN_INDIR_PINC_R0_OUT  7C68
ROD_AN_INDIR_PINC_R1  7C06
ROD_AN_INDIR_PINC_R1_OUT  7C70
ROD_AN_INDIR_PINC_R2  7C14
ROD_AN_INDIR_PINC_R2_OUT  7C78
ROD_AN_INDIR_PINC_R3  7C22
ROD_AN_INDIR_PINC_R3_OUT  7C80
ROD_AN_INDIR_PINC_R4  7C30
ROD_AN_INDIR_PINC_R4_OUT  7C88
ROD_AN_INDIR_PINC_R5  7C3E
ROD_AN_INDIR_PINC_R5_OUT  7C90
ROD_AN_INDIR_PINC_R6  7C4C
ROD_AN_INDIR_PINC_R6_OUT  7C98
ROD_AN_INDIR_PINC_R7  7C5A
ROD_AN_INDIR_PINC_R7_OUT  7CA0
ROD_AN_INDIR_POSTINC  7B00
ROD_AN_INDIR_POSTINC_REG  7BF8
ROD_AN_INDIR_PREDEC  7B0E
ROD_AN_INDIR_PREDEC_REG  7CA8
ROD_AN_INDIR_REG    7B40
ROD_AN_INDIR_REG0_OUT  7BB8
ROD_AN_INDIR_REG1   7B56
ROD_AN_INDIR_REG1_OUT  7BC0
ROD_AN_INDIR_REG2   7B64
ROD_AN_INDIR_REG2_OUT  7BC8
ROD_AN_INDIR_REG3   7B72
ROD_AN_INDIR_REG3_OUT  7BD0
ROD_AN_INDIR_REG4   7B80
ROD_AN_INDIR_REG4_OUT  7BD8
ROD_AN_INDIR_REG5   7B8E
ROD_AN_INDIR_REG5_OUT  7BE0
ROD_AN_INDIR_REG6   7B9C
ROD_AN_INDIR_REG6_OUT  7BE8
ROD_AN_INDIR_REG7   7BAA
ROD_AN_INDIR_REG7_OUT  7BF0
ROD_COUNT_REG0      7D8C
ROD_COUNT_REG0_OUT  7EDC
ROD_COUNT_REG1      7D9A
ROD_COUNT_REG1_OUT  7EEA
ROD_COUNT_REG2      7DA8
ROD_COUNT_REG2_OUT  7EF8
ROD_COUNT_REG3      7DB6
ROD_COUNT_REG3_OUT  7F06
ROD_COUNT_REG4      7DC4
ROD_COUNT_REG4_OUT  7F14
ROD_COUNT_REG5      7DD2
ROD_COUNT_REG5_OUT  7F22
ROD_COUNT_REG6      7DE0
ROD_COUNT_REG6_OUT  7F30
ROD_COUNT_REG7      7DEE
ROD_COUNT_REG7_OUT  7F3E
ROD_COUNT_VAL       7DFC
ROD_COUNT_VAL0_OUT  7E6C
ROD_COUNT_VAL1      7E0A
ROD_COUNT_VAL1_OUT  7E7A
ROD_COUNT_VAL2      7E18
ROD_COUNT_VAL2_OUT  7E88
ROD_COUNT_VAL3      7E26
ROD_COUNT_VAL3_OUT  7E96
ROD_COUNT_VAL4      7E34
ROD_COUNT_VAL4_OUT  7EA4
ROD_COUNT_VAL5      7E42
ROD_COUNT_VAL5_OUT  7EB2
ROD_COUNT_VAL6      7E50
ROD_COUNT_VAL6_OUT  7EC0
ROD_COUNT_VAL7      7E5E
ROD_COUNT_VAL7_OUT  7ECE
ROD_D0_OUT          7FC4
ROD_D1_OUT          7FCC
ROD_D2_OUT          7FD4
ROD_D3_OUT          7FDC
ROD_D4_OUT          7FE4
ROD_D5_OUT          7FEC
ROD_D6_OUT          7FF4
ROD_D7_OUT          7FFC
ROD_DN0             7F4C
ROD_DN1             7F62
ROD_DN2             7F70
ROD_DN3             7F7E
ROD_DN4             7F8C
ROD_DN5             7F9A
ROD_DN6             7FA8
ROD_DN7             7FB6
ROD_MEM_SHIFT       7AEA
ROD_REG_SHIFT       7D6E
ROD_SHIFT_REG       7D84
ROD_SHIFT_TYPE      7AD6
ROD_SUB             7AD6
ROLM_END            1D78
ROLR_END            1D4E
ROLR_FAIL           1D48
ROLR_L              1D22
ROLR_W              1CFC
ROL_M_SIZE          1D54
ROL_R_SIZE          1CCC
RORM_END            1E2A
RORR_END            1E00
RORR_FAIL           1DFA
RORR_L              1DD4
RORR_W              1DAE
ROR_M_SIZE          1E06
ROR_R_SIZE          1D7E
RT                  72
RTS_SIZE            15F8
RUN_AGAIN           1206
RUN_PROG            1006
SHIFT_TYPE          407A
SKIP1               20A8
SKIP2               20C0
SKIP3               20D2
SKIP4               20E4
SKIP5               20F6
SKIP6               2108
SKIP7               211A
SKIP8               212C
SKIP9               213E
SPACE               841E
START_ADR           7000
START_REQUEST       8265
STOP                8582
SUB_DETERMINE_SECOND_OP  5E76
SUB_DETERMINE_SECOND_OPERAND  6006
SUB_DN_EA           5F2E
SUB_DN_EA_ABS_ADD_LONG  604E
SUB_DN_EA_ABS_ADD_LONG_OUT  627C
SUB_DN_EA_ABS_ADD_WORD  6038
SUB_DN_EA_ABS_ADD_WORD_OUT  6272
SUB_DN_EA_ADD_REG_INDIR  600E
SUB_DN_EA_ADD_REG_INDIR_POSTINC  602A
SUB_DN_EA_ADD_REG_INDIR_PREDEC  601C
SUB_DN_EA_AN_INDIR_PDEC_R0_OUT  6232
SUB_DN_EA_AN_INDIR_PDEC_R1  61D0
SUB_DN_EA_AN_INDIR_PDEC_R1_OUT  623A
SUB_DN_EA_AN_INDIR_PDEC_R2  61DE
SUB_DN_EA_AN_INDIR_PDEC_R2_OUT  6242
SUB_DN_EA_AN_INDIR_PDEC_R3  61EC
SUB_DN_EA_AN_INDIR_PDEC_R3_OUT  624A
SUB_DN_EA_AN_INDIR_PDEC_R4  61FA
SUB_DN_EA_AN_INDIR_PDEC_R4_OUT  6252
SUB_DN_EA_AN_INDIR_PDEC_R5  6208
SUB_DN_EA_AN_INDIR_PDEC_R5_OUT  625A
SUB_DN_EA_AN_INDIR_PDEC_R6  6216
SUB_DN_EA_AN_INDIR_PDEC_R6_OUT  6262
SUB_DN_EA_AN_INDIR_PDEC_R7  6224
SUB_DN_EA_AN_INDIR_PDEC_R7_OUT  626A
SUB_DN_EA_AN_INDIR_PINC_R0_OUT  6182
SUB_DN_EA_AN_INDIR_PINC_R1  6120
SUB_DN_EA_AN_INDIR_PINC_R1_OUT  618A
SUB_DN_EA_AN_INDIR_PINC_R2  612E
SUB_DN_EA_AN_INDIR_PINC_R2_OUT  6192
SUB_DN_EA_AN_INDIR_PINC_R3  613C
SUB_DN_EA_AN_INDIR_PINC_R3_OUT  619A
SUB_DN_EA_AN_INDIR_PINC_R4  614A
SUB_DN_EA_AN_INDIR_PINC_R4_OUT  61A2
SUB_DN_EA_AN_INDIR_PINC_R5  6158
SUB_DN_EA_AN_INDIR_PINC_R5_OUT  61AA
SUB_DN_EA_AN_INDIR_PINC_R6  6166
SUB_DN_EA_AN_INDIR_PINC_R6_OUT  61B2
SUB_DN_EA_AN_INDIR_PINC_R7  6174
SUB_DN_EA_AN_INDIR_PINC_R7_OUT  61BA
SUB_DN_EA_AN_INDIR_POSTINC_REG  6112
SUB_DN_EA_AN_INDIR_PREDEC  61C2
SUB_DN_EA_AN_INDIR_REG  605C
SUB_DN_EA_AN_INDIR_REG0_OUT  60D2
SUB_DN_EA_AN_INDIR_REG1  6070
SUB_DN_EA_AN_INDIR_REG1_OUT  60DA
SUB_DN_EA_AN_INDIR_REG2  607E
SUB_DN_EA_AN_INDIR_REG2_OUT  60E2
SUB_DN_EA_AN_INDIR_REG3  608C
SUB_DN_EA_AN_INDIR_REG3_OUT  60EA
SUB_DN_EA_AN_INDIR_REG4  609A
SUB_DN_EA_AN_INDIR_REG4_OUT  60F2
SUB_DN_EA_AN_INDIR_REG5  60A8
SUB_DN_EA_AN_INDIR_REG5_OUT  60FA
SUB_DN_EA_AN_INDIR_REG6  60B6
SUB_DN_EA_AN_INDIR_REG6_OUT  6102
SUB_DN_EA_AN_INDIR_REG7  60C4
SUB_DN_EA_AN_INDIR_REG7_OUT  610A
SUB_DN_EA_IMMEDIATE_ADD_OUT  6288
SUB_DN_EA_IMM_ADD_L  62A4
SUB_DN_EA_IMM_ADD_W  629A
SUB_DN_EA_MATCH     59FE
SUB_DN_EA_MATCH_L   5A1A
SUB_DN_EA_MATCH_W   5A0C
SUB_EA_DN           5A28
SUB_EA_DN_ABS_ADD_LONG  5A7E
SUB_EA_DN_ABS_ADD_LONG_OUT  5E30
SUB_EA_DN_ABS_ADD_WORD  5A68
SUB_EA_DN_ABS_ADD_WORD_OUT  5E20
SUB_EA_DN_ADD_REG_INDIR  5A3E
SUB_EA_DN_ADD_REG_INDIR_POSTINC  5A5A
SUB_EA_DN_ADD_REG_INDIR_PREDEC  5A4C
SUB_EA_DN_AN_INDIR_PDEC_R0_OUT  5DB0
SUB_EA_DN_AN_INDIR_PDEC_R1  5D4E
SUB_EA_DN_AN_INDIR_PDEC_R1_OUT  5DBE
SUB_EA_DN_AN_INDIR_PDEC_R2  5D5C
SUB_EA_DN_AN_INDIR_PDEC_R2_OUT  5DCC
SUB_EA_DN_AN_INDIR_PDEC_R3  5D6A
SUB_EA_DN_AN_INDIR_PDEC_R3_OUT  5DDA
SUB_EA_DN_AN_INDIR_PDEC_R4  5D78
SUB_EA_DN_AN_INDIR_PDEC_R4_OUT  5DE8
SUB_EA_DN_AN_INDIR_PDEC_R5  5D86
SUB_EA_DN_AN_INDIR_PDEC_R5_OUT  5DF6
SUB_EA_DN_AN_INDIR_PDEC_R6  5D94
SUB_EA_DN_AN_INDIR_PDEC_R6_OUT  5E04
SUB_EA_DN_AN_INDIR_PDEC_R7  5DA2
SUB_EA_DN_AN_INDIR_PDEC_R7_OUT  5E12
SUB_EA_DN_AN_INDIR_PINC_R0_OUT  5CD0
SUB_EA_DN_AN_INDIR_PINC_R1  5C6E
SUB_EA_DN_AN_INDIR_PINC_R1_OUT  5CDE
SUB_EA_DN_AN_INDIR_PINC_R2  5C7C
SUB_EA_DN_AN_INDIR_PINC_R2_OUT  5CEC
SUB_EA_DN_AN_INDIR_PINC_R3  5C8A
SUB_EA_DN_AN_INDIR_PINC_R3_OUT  5CFA
SUB_EA_DN_AN_INDIR_PINC_R4  5C98
SUB_EA_DN_AN_INDIR_PINC_R4_OUT  5D08
SUB_EA_DN_AN_INDIR_PINC_R5  5CA6
SUB_EA_DN_AN_INDIR_PINC_R5_OUT  5D16
SUB_EA_DN_AN_INDIR_PINC_R6  5CB4
SUB_EA_DN_AN_INDIR_PINC_R6_OUT  5D24
SUB_EA_DN_AN_INDIR_PINC_R7  5CC2
SUB_EA_DN_AN_INDIR_PINC_R7_OUT  5D32
SUB_EA_DN_AN_INDIR_POSTINC_REG  5C60
SUB_EA_DN_AN_INDIR_PREDEC  5D40
SUB_EA_DN_AN_INDIR_REG  5B80
SUB_EA_DN_AN_INDIR_REG0_OUT  5BF0
SUB_EA_DN_AN_INDIR_REG1  5B8E
SUB_EA_DN_AN_INDIR_REG1_OUT  5BFE
SUB_EA_DN_AN_INDIR_REG2  5B9C
SUB_EA_DN_AN_INDIR_REG2_OUT  5C0C
SUB_EA_DN_AN_INDIR_REG3  5BAA
SUB_EA_DN_AN_INDIR_REG3_OUT  5C1A
SUB_EA_DN_AN_INDIR_REG4  5BB8
SUB_EA_DN_AN_INDIR_REG4_OUT  5C28
SUB_EA_DN_AN_INDIR_REG5  5BC6
SUB_EA_DN_AN_INDIR_REG5_OUT  5C36
SUB_EA_DN_AN_INDIR_REG6  5BD4
SUB_EA_DN_AN_INDIR_REG6_OUT  5C44
SUB_EA_DN_AN_INDIR_REG7  5BE2
SUB_EA_DN_AN_INDIR_REG7_OUT  5C52
SUB_EA_DN_D0_OUT    5B10
SUB_EA_DN_D1_OUT    5B1E
SUB_EA_DN_D2_OUT    5B2C
SUB_EA_DN_D3_OUT    5B3A
SUB_EA_DN_D4_OUT    5B48
SUB_EA_DN_D5_OUT    5B56
SUB_EA_DN_D6_OUT    5B64
SUB_EA_DN_D7_OUT    5B72
SUB_EA_DN_DATA_REG_DIR  5A30
SUB_EA_DN_DN_REG    5A9A
SUB_EA_DN_IMMEDIATE_ADD  5A8C
SUB_EA_DN_IMMEDIATE_ADD_OUT  5E42
SUB_EA_DN_IMM_ADD_L  5E64
SUB_EA_DN_IMM_ADD_W  5E54
SUB_EA_DN_MATCH     59D6
SUB_EA_DN_MATCH_L   59F2
SUB_EA_DN_MATCH_W   59E4
SUB_EA_DN_RD1       5AAE
SUB_EA_DN_RD2       5ABC
SUB_EA_DN_RD3       5ACA
SUB_EA_DN_RD4       5AD8
SUB_EA_DN_RD5       5AE6
SUB_EA_DN_RD6       5AF4
SUB_EA_DN_RD7       5B02
SUB_END             1F3A
SUB_FAIL            1F34
SUB_L               1F0E
SUB_SIZE            1EB8
SUB_SUB             59D0
SUB_W               1EE8
TAB                 843C
TEST_ENDS           1166
TOHEX               1016
WORD_SIZE           2
