00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 6/7/2020 6:09:37 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main File
00000000                             3  *-----------------------------------------------------------
00001000                             4              ORG $1000
00001000                             5  MAIN:
00001000  2E7C 00100000              6              MOVEA.L #$00100000,SP
00001006                             7      
00001006  4EB9 00001052              8  run_prog    JSR     io_subroutine
0000100C  4EB9 000011D2              9              JSR     main_loop
00001012                            10  
00001012  FFFF FFFF                 11              SIMHALT             ; halt simulator   
00001016                            12          
00001016                            13              INCLUDE 'toHex.x68'
00001016                            14  toHex:
00001016  48E7 DDFE                 15              MOVEM.L     A0-A6/D0-D1/D3-D5/D7,-(SP)
0000101A  0C06 0030                 16              CMPI.B      #$30,D6
0000101E  6D10                      17              BLT.B       ERR
00001020  BC3C 0039                 18              CMP.B       #$39,D6
00001024  6E16                      19              BGT.B       letter
00001026  0406 0030                 20              SUBI.B      #$30,D6
0000102A  4CDF 7FBB                 21              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
0000102E  4E75                      22              RTS
00001030                            23        
00001030  243C FFFFFFFF             24  ERR         MOVE.L      #not_hex,D2
00001036  4CDF 7FBB                 25              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
0000103A  4E75                      26              RTS
0000103C                            27          
0000103C  0C06 0041                 28  letter      CMPI.B      #$41,D6
00001040  6DEE                      29              BLT.B       ERR
00001042  0C06 0046                 30              CMPI.B      #$46,D6
00001046  6EE8                      31              BGT.B       ERR
00001048  0406 0037                 32              SUBI.B      #$37,D6
0000104C  4CDF 7FBB                 33              MOVEM.L     (SP)+,A0-A6/D0-D1/D3-D5/D7
00001050  4E75                      34              RTS
00001052                            35  
00001052                            36  
00001052                            37  
00001052                            38  
00001052                            39  
00001052                            40  
00001052                            41  -------------------- end include --------------------
00001052                            42              INCLUDE 'io_subroutine.x68'
00001052                            43  
00001052                            44  io_subroutine:
00001052  48E7 CFFE                 45              MOVEM.L      D0-D1/D4-D7/A0-A6,-(SP)
00001056                            46              *display the intro message to the user
00001056  43F9 00006620             47              LEA         LOAD_MESSAGE, A1
0000105C  103C 000D                 48              MOVE.B      #13, D0
00001060  4E4F                      49              TRAP        #15
00001062                            50              *display the intro message to the user
00001062  43F9 00006689             51              LEA         LOAD2_MESSAGE, A1
00001068  103C 000D                 52              MOVE.B      #13, D0
0000106C  4E4F                      53              TRAP        #15
0000106E                            54  
0000106E  43F9 000066F0             55  INPUT1      LEA         START_REQUEST, A1
00001074  103C 000E                 56              MOVE.B      #14, D0
00001078  4E4F                      57              TRAP        #15
0000107A                            58  
0000107A                            59              *------Code for input-----
0000107A  183C 0000                 60              MOVE.B      #0,D4           *counter 
0000107E  1A3C 0008                 61              MOVE.B      #8,D5
00001082  BA04                      62  input_loop  CMP.B       D4,D5           *loop 8 time for a long info
00001084  6700 0016                 63              BEQ         ipt_done
00001088                            64              *inside loop code
00001088  103C 0005                 65              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
0000108C  4E4F                      66              TRAP        #15
0000108E  1C01                      67              MOVE.B      D1,D6
00001090  4EB8 1016                 68              JSR         toHex           *convert the value to hex
00001094  E98F                      69              LSL.L       #4,D7           *Move the hex value one byte left
00001096  DE86                      70              ADD.L       D6,D7           *append the character to the input
00001098                            71              *loop code done
00001098  5204                      72  cont        ADDQ.B      #1,D4           *increment the counter
0000109A  60E6                      73              BRA         input_loop
0000109C                            74              
0000109C                            75              
0000109C                            76  ipt_done    *provide a new line
0000109C  43F9 000068A5             77              LEA         SPACE, A1
000010A2  103C 000E                 78              MOVE.B      #14, D0
000010A6  4E4F                      79              TRAP        #15
000010A8                            80              *test if there was a non hex value inputted
000010A8  B4BC FFFFFFFF             81              CMP.L       #not_hex,D2
000010AE  6600 0016                 82              BNE         input1pass
000010B2                            83              *else, display message
000010B2  43F9 000067A4             84              LEA         NOT_HEX_MSG, A1
000010B8  103C 000D                 85              MOVE.B      #13, D0
000010BC  4E4F                      86              TRAP        #15
000010BE  243C 00000000             87              MOVE.L      #hex_clear,D2
000010C4  60A8                      88              BRA         INPUT1
000010C6                            89              
000010C6  2607                      90  input1pass  MOVE.L      D7,D3   *move the hex value to D3
000010C8                            91       
000010C8                            92  range_check1:
000010C8                            93              *test if input is less than lowest address
000010C8  B6BC 00007000             94              CMP.L       #start_Adr,D3
000010CE  6D00 0010                 95              BLT         wrong_range1
000010D2                            96              *test if the input is greater than lowest address
000010D2  B6BC 000073BA             97              CMP.L       #end_Adr,D3
000010D8  6E00 0006                 98              BGT         wrong_range1
000010DC                            99              *noting wrong, continue
000010DC  6000 0010                100              BRA         boundary1
000010E0                           101  
000010E0                           102  wrong_range1:
000010E0                           103              *not in correct range
000010E0  43F9 000067CF            104              LEA         BAD_RANGE, A1
000010E6  103C 000D                105              MOVE.B      #13, D0
000010EA  4E4F                     106              TRAP        #15
000010EC                           107              *return to input
000010EC  6080                     108              BRA         INPUT1
000010EE                           109  
000010EE                           110  boundary1:
000010EE                           111              *test if input is on the word boundary
000010EE  2803                     112              MOVE.L      D3,D4
000010F0  88FC 0002                113              DIVU        #2,D4
000010F4  4244                     114              CLR.W       D4
000010F6  4844                     115              SWAP        D4
000010F8                           116              
000010F8  B8BC 00000000            117              CMP.L       #hex_clear,D4
000010FE  6700 0012                118              BEQ         INPUT2
00001102                           119              *else, not on boundary
00001102  43F9 0000685B            120              LEA         BAD_BOUND, A1
00001108  103C 000D                121              MOVE.B      #13, D0
0000110C  4E4F                     122              TRAP        #15   
0000110E                           123              *go back to start
0000110E  6000 FF5E                124              BRA         INPUT1  
00001112                           125              
00001112  43F9 0000674B            126  INPUT2      LEA         END_REQUEST, A1
00001118  103C 000E                127              MOVE.B      #14, D0
0000111C  4E4F                     128              TRAP        #15
0000111E                           129  
0000111E                           130              *------Code for input-----
0000111E  183C 0000                131              MOVE.B      #0,D4           *counter 
00001122  1A3C 0008                132              MOVE.B      #8,D5
00001126  BA04                     133  input_loop2 CMP.B       D4,D5           *loop 8 time for a long info
00001128  6700 0016                134              BEQ         ipt_done2
0000112C                           135              *inside loop code
0000112C  103C 0005                136              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
00001130  4E4F                     137              TRAP        #15
00001132  1C01                     138              MOVE.B      D1,D6
00001134  4EB8 1016                139              JSR         toHex           *convert the value to hex
00001138  E98F                     140              LSL.L       #4,D7           *Move the hex value one byte left
0000113A  DE86                     141              ADD.L       D6,D7           *append the character to the input
0000113C                           142              *loop code done
0000113C  5204                     143  cont2       ADDQ.B      #1,D4           *increment the counter
0000113E  60E6                     144              BRA         input_loop2
00001140                           145              
00001140                           146              
00001140                           147  ipt_done2   *provide a new line
00001140  43F9 000068A5            148              LEA         SPACE, A1
00001146  103C 000E                149              MOVE.B      #14, D0
0000114A  4E4F                     150              TRAP        #15
0000114C                           151              *test if there was a non hex value inputted
0000114C  B4BC FFFFFFFF            152              CMP.L       #not_hex,D2
00001152  6600 0016                153              BNE         input2pass
00001156                           154              *else, display message
00001156  43F9 000067A4            155              LEA         NOT_HEX_MSG, A1
0000115C  103C 000D                156              MOVE.B      #13, D0
00001160  4E4F                     157              TRAP        #15
00001162  243C 00000000            158              MOVE.L      #hex_clear,D2
00001168  60A8                     159              BRA         INPUT2
0000116A                           160              
0000116A  2407                     161  input2pass  MOVE.L      D7,D2   *move the hex value to D2
0000116C                           162              
0000116C                           163  range_check2:
0000116C                           164              *test if input is less than lowest address
0000116C  B4BC 00007000            165              CMP.L       #start_Adr,D2
00001172  6D00 0010                166              BLT         wrong_range2
00001176                           167              *test if the input is greater than lowest address
00001176  B4BC 000073BA            168              CMP.L       #end_Adr,D2
0000117C  6E00 0006                169              BGT         wrong_range2
00001180                           170              *noting wrong, continue
00001180  6000 0010                171              BRA         boundary2
00001184                           172  
00001184                           173  wrong_range2:
00001184                           174              *not in correct range
00001184  43F9 000067CF            175              LEA         BAD_RANGE, A1
0000118A  103C 000D                176              MOVE.B      #13, D0
0000118E  4E4F                     177              TRAP        #15
00001190                           178              *get input 2 again
00001190  6080                     179              BRA         INPUT2
00001192                           180              
00001192                           181  boundary2:
00001192                           182              *test if input is on the word boundary
00001192  2802                     183              MOVE.L      D2,D4
00001194  88FC 0002                184              DIVU        #2,D4
00001198  4244                     185              CLR.W       D4
0000119A  4844                     186              SWAP        D4
0000119C                           187              
0000119C  B8BC 00000000            188              CMP.L       #hex_clear,D4
000011A2  6700 0012                189              BEQ         test_ends
000011A6                           190              *else, not on boundary
000011A6  43F9 0000685B            191              LEA         BAD_BOUND, A1
000011AC  103C 000D                192              MOVE.B      #13, D0
000011B0  4E4F                     193              TRAP        #15   
000011B2                           194              *go back to start
000011B2  6000 FF5E                195              BRA         INPUT2  
000011B6                           196  
000011B6                           197  test_ends:  
000011B6                           198              *test if the starting address is less than the ending address
000011B6  B483                     199              CMP.L       D3,D2
000011B8  6F00 0008                200              BLE         end_bad
000011BC  4CDF 7FF3                201              MOVEM.L      (SP)+,D0-D1/D4-D7/A0-A6
000011C0  4E75                     202              RTS
000011C2                           203  
000011C2                           204  end_bad:    
000011C2                           205              *not in correct range
000011C2  43F9 0000680B            206              LEA         BAD_END, A1
000011C8  103C 000D                207              MOVE.B      #13, D0
000011CC  4E4F                     208              TRAP        #15   
000011CE                           209              *go back to start
000011CE  6000 FE9E                210              BRA         INPUT1  
000011D2                           211  
000011D2                           212      
000011D2                           213  
000011D2                           214  
000011D2                           215  
000011D2                           216  -------------------- end include --------------------
000011D2                           217              INCLUDE 'main_loop.x68'
000011D2                           218  main_loop:
000011D2  183C 0000                219              MOVE.B      #0,D4           *counter 
000011D6  1A3C 001E                220              MOVE.B      #30,D5
000011DA                           221  
000011DA  2043                     222              MOVE.L      D3,A0   *move the starting address to A0
000011DC  5482                     223              ADDQ.L      #2,D2   *add 1 word to ending address so it gets covered
000011DE  2442                     224              MOVE.L      D2,A2   *move the ending address to A2
000011E0  B5C8                     225  loopM       CMP.L       A0,A2
000011E2  6700 004A                226              BEQ         loopM_done
000011E6                           227              *inside loop code
000011E6  88FC 001D                228              DIVU        #29,D4      *test if full page has been reached
000011EA  4244                     229              CLR.W       D4
000011EC  4844                     230              SWAP        D4
000011EE  B8BC 00000000            231              CMP.L       #hex_clear,D4
000011F4  6600 002A                232              BNE         loopM_Cont
000011F8                           233              *pause till enter inputted
000011F8                           234              *display the prompt message to the user
000011F8  43F9 000068A8            235  entr_lp     LEA         PRESS_ENTER, A1
000011FE  103C 000E                236              MOVE.B      #14, D0
00001202  4E4F                     237              TRAP        #15
00001204                           238              *look for enter key
00001204  103C 0005                239              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
00001208  4E4F                     240              TRAP        #15
0000120A  B2BC 0000000D            241              CMP.L       #CR,D1          
00001210  6700 000E                242              BEQ         loopM_Cont      *continue if enter pressed
00001214  B2BC 0000000A            243              CMP.L       #LF,D1
0000121A  6700 0004                244              BEQ         loopM_Cont
0000121E  60D8                     245              BRA         entr_lp
00001220                           246              *resume
00001220  3010                     247  loopM_Cont  MOVE.W      (A0),D0 *move the opcode into D0 for testing
00001222  4EB9 00001F7C            248              JSR         opcode_subroutine
00001228                           249              *loop code end
00001228  5448                     250              ADDQ        #2,A0   *move the pointer one word
0000122A  5244                     251              ADDQ        #1,D4   *add one to the output counter
0000122C  60B2                     252              BRA         loopM   
0000122E                           253                
0000122E                           254              *ask if the user wants to test again  
0000122E  43F9 000068C5            255  loopM_done  LEA         RESTART_Q, A1
00001234  103C 000D                256              MOVE.B      #13, D0
00001238  4E4F                     257              TRAP        #15
0000123A                           258              *look for q or r key
0000123A  103C 0005                259              MOVE.B      #5,D0           *Trap task 5: read a character from keyboard into D1.L
0000123E  4E4F                     260              TRAP        #15
00001240  B2BC 00000072            261              CMP.L       #RT,D1          
00001246  6700 000E                262              BEQ         run_again       *r pressed, restart
0000124A  B2BC 00000071            263              CMP.L       #QT,D1
00001250  6700 0014                264              BEQ         exit_loop       *q pressed, exit
00001254  60D8                     265              BRA         loopM_done      *neither, ask again
00001256                           266             
00001256                           267  run_again   *print new line
00001256  43F9 000068A5            268              LEA         SPACE,A1
0000125C  103C 000E                269              MOVE.B      #14,D0              *move number 14 into d0 for string
00001260  4E4F                     270              TRAP        #15                 *print the data
00001262  4EB8 1006                271              JSR         run_prog   *go back for input
00001266                           272              
00001266  4E75                     273  exit_loop   RTS
00001268                           274  
00001268                           275  
00001268                           276  
00001268                           277  
00001268                           278  -------------------- end include --------------------
00001268                           279              INCLUDE 'output.x68'
00001268                           280  print_string:
00001268  48E7 FFFE                281      MOVEM.L     D0-D7/A0-A6, -(SP)
0000126C  103C 000E                282      MOVE.B      #14,D0              *move number 14 into d0 for string plus
00001270  4E4F                     283      TRAP        #15
00001272  4CDF 7FFF                284      MOVEM.L     (SP)+, D0-D7/A0-A6
00001276  4E75                     285      RTS
00001278                           286      
00001278                           287  print_hex:
00001278  48E7 FFFE                288      MOVEM.L     D0-D7/A0-A6, -(SP)
0000127C  103C 000F                289      MOVE.B      #15,D0
00001280  143C 0010                290      MOVE.B      #16,D2          *display in base 16 (hex)
00001284  4E4F                     291      TRAP        #15
00001286  4CDF 7FFF                292      MOVEM.L     (SP)+, D0-D7/A0-A6
0000128A  4E75                     293      RTS
0000128C                           294  
0000128C                           295  print_string_op_nn:
0000128C  48E7 FFFE                296      MOVEM.L     D0-D7/A0-A6, -(SP)
00001290  3600                     297      MOVE.W      D0,D3           *move full opcode to D2 temporarily
00001292  2449                     298      MOVEA.L     A1,A2           *move string into A2 temp
00001294                           299      *print the line number
00001294  4EB9 0000141C            300      JSR         print_line_number
0000129A                           301      *print a tab
0000129A  43F9 000068C3            302      LEA         TAB,A1
000012A0  103C 000E                303      MOVE.B      #14,D0              *move number 14 into d0 for string
000012A4  4E4F                     304      TRAP        #15                 *print the data
000012A6                           305      *print data
000012A6  224A                     306      MOVE.L      A2,A1
000012A8  103C 000E                307      MOVE.B      #14,D0              *move number 14 into d0 for string
000012AC  4E4F                     308      TRAP        #15                 *print the data
000012AE                           309      *print a tab
000012AE  43F9 000068C3            310      LEA         TAB,A1
000012B4  103C 000E                311      MOVE.B      #14,D0              *move number 14 into d0 for string
000012B8  4E4F                     312      TRAP        #15                 *print the data
000012BA                           313      
000012BA  4CDF 7FFF                314      MOVEM.L     (SP)+, D0-D7/A0-A6
000012BE  4E75                     315      RTS
000012C0                           316  
000012C0                           317  
000012C0                           318  print_string_op_nl:
000012C0  48E7 FFFE                319      MOVEM.L     D0-D7/A0-A6, -(SP)
000012C4  3600                     320      MOVE.W      D0,D3           *move full opcode to D2 temporarily
000012C6  2449                     321      MOVEA.L     A1,A2           *move string into A2 temp
000012C8                           322      *print the line number
000012C8  4EB9 0000141C            323      JSR         print_line_number
000012CE                           324      *print a tab
000012CE  43F9 000068C3            325      LEA         TAB,A1
000012D4  103C 000E                326      MOVE.B      #14,D0              *move number 14 into d0 for string
000012D8  4E4F                     327      TRAP        #15                 *print the data
000012DA                           328      *print data
000012DA  224A                     329      MOVE.L      A2,A1
000012DC  103C 000E                330      MOVE.B      #14,D0              *move number 14 into d0 for string
000012E0  4E4F                     331      TRAP        #15                 *print the data
000012E2                           332      *print a tab
000012E2  43F9 000068C3            333      LEA         TAB,A1
000012E8  103C 000E                334      MOVE.B      #14,D0              *move number 14 into d0 for string
000012EC  4E4F                     335      TRAP        #15                 *print the data
000012EE                           336      *print opcode
000012EE  3203                     337      MOVE.W      D3,D1
000012F0  103C 000F                338      MOVE.B      #15,D0
000012F4  143C 0010                339      MOVE.B      #16,D2          *display in base 16 (hex)
000012F8  4E4F                     340      TRAP        #15
000012FA                           341      *print new line
000012FA  43F9 000068A5            342      LEA         SPACE,A1
00001300  103C 000E                343      MOVE.B      #14,D0              *move number 14 into d0 for string
00001304  4E4F                     344      TRAP        #15                 *print the data
00001306                           345      
00001306  4CDF 7FFF                346      MOVEM.L     (SP)+, D0-D7/A0-A6
0000130A  4E75                     347      RTS
0000130C                           348  
0000130C                           349  print_string_sized:
0000130C  48E7 FFFE                350      MOVEM.L     D0-D7/A0-A6, -(SP)
00001310  2601                     351      MOVE.L      D1,D3           *move full opcode to D2 temporarily
00001312  2449                     352      MOVEA.L     A1,A2           *move string into A2 temp
00001314                           353      *print the line number
00001314  4EB9 0000141C            354      JSR         print_line_number
0000131A                           355      *print a tab
0000131A  43F9 000068C3            356      LEA         TAB,A1
00001320  103C 000E                357      MOVE.B      #14,D0              *move number 14 into d0 for string
00001324  4E4F                     358      TRAP        #15                 *print the data
00001326                           359      *print data
00001326  224A                     360      MOVE.L      A2,A1
00001328  103C 000E                361      MOVE.B      #14,D0              *move number 14 into d0 for string
0000132C  4E4F                     362      TRAP        #15                 *print the data
0000132E                           363      *print a tab
0000132E  43F9 000068C3            364      LEA         TAB,A1
00001334  103C 000E                365      MOVE.B      #14,D0              *move number 14 into d0 for string
00001338  4E4F                     366      TRAP        #15                 *print the data
0000133A                           367      *print opcode
0000133A  2201                     368      MOVE.L      D1,D1
0000133C  103C 000F                369      MOVE.B      #15,D0
00001340  143C 0010                370      MOVE.B      #16,D2          *display in base 16 (hex)
00001344  4E4F                     371      TRAP        #15
00001346                           372      *print new line
00001346  43F9 000068A5            373      LEA         SPACE,A1
0000134C  103C 000E                374      MOVE.B      #14,D0              *move number 14 into d0 for string
00001350  4E4F                     375      TRAP        #15                 *print the data
00001352                           376      
00001352  4CDF 7FFF                377      MOVEM.L     (SP)+, D0-D7/A0-A6
00001356  4E75                     378      RTS
00001358                           379  
00001358                           380  print_data:
00001358  48E7 FFFE                381      MOVEM.L     D0-D7/A0-A6, -(SP)
0000135C  3600                     382      MOVE.W      D0,D3           *move full opcode to D2 temporarily
0000135E  2449                     383      MOVEA.L     A1,A2           *move string into A2 temp
00001360                           384      *print the line number
00001360  4EB9 0000141C            385      JSR         print_line_number
00001366                           386      *print a tab
00001366  43F9 000068C3            387      LEA         TAB,A1
0000136C  103C 000E                388      MOVE.B      #14,D0              *move number 14 into d0 for string
00001370  4E4F                     389      TRAP        #15                 *print the data
00001372                           390      *print data
00001372  224A                     391      MOVE.L      A2,A1
00001374  103C 000E                392      MOVE.B      #14,D0              *move number 14 into d0 for string
00001378  4E4F                     393      TRAP        #15                 *print the data
0000137A                           394      *print a tab
0000137A  43F9 000068C3            395      LEA         TAB,A1
00001380  103C 000E                396      MOVE.B      #14,D0              *move number 14 into d0 for string
00001384  4E4F                     397      TRAP        #15                 *print the data
00001386                           398      *print $
00001386  43F9 000069ED            399      LEA         ea_$,A1
0000138C  103C 000E                400      MOVE.B      #14,D0              *move number 14 into d0 for string
00001390  4E4F                     401      TRAP        #15                 *print the data
00001392                           402      *print opcode
00001392  4EB9 00001472            403      JSR         print_opcode_word   *print the opcode in 4 digits
00001398                           404      *print new line
00001398  43F9 000068A5            405      LEA         SPACE,A1
0000139E  103C 000E                406      MOVE.B      #14,D0              *move number 14 into d0 for string
000013A2  4E4F                     407      TRAP        #15                 *print the data
000013A4                           408      
000013A4  4CDF 7FFF                409      MOVEM.L     (SP)+, D0-D7/A0-A6
000013A8  4E75                     410      RTS
000013AA                           411  
000013AA                           412  print_bcc:
000013AA  48E7 FFFE                413      MOVEM.L     D0-D7/A0-A6, -(SP)
000013AE  2803                     414      MOVE.L      D3,D4
000013B0  3600                     415      MOVE.W      D0,D3           *move full opcode to D2 temporarily
000013B2  2449                     416      MOVEA.L     A1,A2           *move string into A2 temp
000013B4                           417      *print the line number
000013B4  4EB9 0000141C            418      JSR         print_line_number
000013BA                           419      *print a tab
000013BA  43F9 000068C3            420      LEA         TAB,A1
000013C0  103C 000E                421      MOVE.B      #14,D0              *move number 14 into d0 for string
000013C4  4E4F                     422      TRAP        #15                 *print the data
000013C6                           423      *print data
000013C6  224A                     424      MOVE.L      A2,A1
000013C8  103C 000E                425      MOVE.B      #14,D0              *move number 14 into d0 for string
000013CC  4E4F                     426      TRAP        #15                 *print the data
000013CE                           427      *print a tab
000013CE  43F9 000068C3            428      LEA         TAB,A1
000013D4  103C 000E                429      MOVE.B      #14,D0              *move number 14 into d0 for string
000013D8  4E4F                     430      TRAP        #15                 *print the data
000013DA                           431      *print displaced address
000013DA  2604                     432      MOVE.L      D4,D3
000013DC  4EB9 000013F4            433      JSR         print_displacedAddress
000013E2                           434      *print new line
000013E2  43F9 000068A5            435      LEA         SPACE,A1
000013E8  103C 000E                436      MOVE.B      #14,D0              *move number 14 into d0 for string
000013EC  4E4F                     437      TRAP        #15                 *print the data
000013EE                           438      
000013EE  4CDF 7FFF                439      MOVEM.L     (SP)+, D0-D7/A0-A6
000013F2  4E75                     440      RTS
000013F4                           441  
000013F4                           442  print_displacedAddress:
000013F4  48E7 FFFE                443              MOVEM.L     D0-D7/A0-A6, -(SP)
000013F8  7800                     444              MOVE.L      #0,D4           *counter 
000013FA  7A08                     445              MOVE.L      #8,D5
000013FC  4281                     446              CLR.L       D1
000013FE  700F                     447              MOVE.L      #15,D0
00001400  7410                     448              MOVE.L      #16,D2          *display in base 16 (hex)
00001402  BA04                     449  disp_loop   CMP.B       D4,D5           *loop 8 time for a long of info
00001404  6700 0010                450              BEQ         disp_done
00001408                           451              *inside loop code
00001408  E99B                     452              ROL.L       #4,D3          *rotate bits so last is first
0000140A  1203                     453              MOVE.B      D3,D1
0000140C  E909                     454              LSL.B       #4,D1           *rotate left then right to get rid 
0000140E  E809                     455              LSR.B       #4,D1           *of the other character
00001410  4E4F                     456              TRAP        #15             *print 1 hex character
00001412                           457              
00001412                           458              *loop code done
00001412  5204                     459              ADDQ.B  #1,D4           *increment the counter
00001414  60EC                     460              BRA     disp_loop
00001416                           461              
00001416  4CDF 7FFF                462  disp_done   MOVEM.L     (SP)+, D0-D7/A0-A6
0000141A  4E75                     463              RTS
0000141C                           464  
0000141C                           465  print_line_number:
0000141C  48E7 FFFE                466              MOVEM.L     D0-D7/A0-A6, -(SP)
00001420  2608                     467              MOVE.L      A0,D3
00001422  7800                     468              MOVE.L      #0,D4           *counter 
00001424  7A08                     469              MOVE.L      #8,D5
00001426  4281                     470              CLR.L       D1
00001428  700F                     471              MOVE.L      #15,D0
0000142A  7410                     472              MOVE.L      #16,D2          *display in base 16 (hex)
0000142C  BA04                     473  line_loop   CMP.B       D4,D5           *loop 2 time for a byte of info
0000142E  6700 0010                474              BEQ         line_done
00001432                           475              *inside loop code
00001432  E99B                     476              ROL.L       #4,D3          *rotate bits so last is first
00001434  1203                     477              MOVE.B      D3,D1
00001436  E909                     478              LSL.B       #4,D1           *rotate left then right to get rid 
00001438  E809                     479              LSR.B       #4,D1           *of the other character
0000143A  4E4F                     480              TRAP        #15             *print 1 hex character
0000143C                           481              
0000143C                           482              *loop code done
0000143C  5204                     483              ADDQ.B  #1,D4           *increment the counter
0000143E  60EC                     484              BRA     line_loop
00001440                           485              
00001440  4CDF 7FFF                486  line_done   MOVEM.L     (SP)+, D0-D7/A0-A6
00001444  4E75                     487              RTS
00001446                           488              
00001446                           489  print_eat:
00001446  48E7 FFFE                490      MOVEM.L     D0-D7/A0-A6, -(SP)
0000144A                           491      *print data
0000144A  103C 000E                492      MOVE.B      #14,D0              *move number 14 into d0 for string
0000144E  4E4F                     493      TRAP        #15                 *print the data
00001450  4CDF 7FFF                494      MOVEM.L     (SP)+, D0-D7/A0-A6
00001454  4E75                     495      RTS
00001456                           496      
00001456                           497  print_ea:
00001456  48E7 FFFE                498      MOVEM.L     D0-D7/A0-A6, -(SP)
0000145A                           499      *print data
0000145A  103C 000E                500      MOVE.B      #14,D0              *move number 14 into d0 for string
0000145E  4E4F                     501      TRAP        #15                 *print the data in A1
00001460                           502      *print new line
00001460  43F9 000068A5            503      LEA         SPACE,A1
00001466  103C 000E                504      MOVE.B      #14,D0              *move number 14 into d0 for string
0000146A  4E4F                     505      TRAP        #15                 *print the data
0000146C  4CDF 7FFF                506      MOVEM.L     (SP)+, D0-D7/A0-A6
00001470  4E75                     507      RTS
00001472                           508  
00001472                           509  print_opcode_word:
00001472  48E7 FFFE                510              MOVEM.L     D0-D7/A0-A6, -(SP)
00001476                           511              *MOVE.L      A0,D3
00001476  7800                     512              MOVE.L      #0,D4           *counter 
00001478  7A04                     513              MOVE.L      #4,D5
0000147A  4281                     514              CLR.L       D1
0000147C  700F                     515              MOVE.L      #15,D0
0000147E  7410                     516              MOVE.L      #16,D2          *display in base 16 (hex)
00001480  BA04                     517  opWd_loop   CMP.B       D4,D5           *loop 4 time for a word of info
00001482  6700 0010                518              BEQ         opWd_done
00001486                           519              *inside loop code
00001486  E95B                     520              ROL.W       #4,D3          *rotate bits so last is first
00001488  1203                     521              MOVE.B      D3,D1
0000148A  E909                     522              LSL.B       #4,D1           *rotate left then right to get rid 
0000148C  E809                     523              LSR.B       #4,D1           *of the other character
0000148E  4E4F                     524              TRAP        #15             *print 1 hex character
00001490                           525              
00001490                           526              *loop code done
00001490  5204                     527              ADDQ.B      #1,D4           *increment the counter
00001492  60EC                     528              BRA         opWd_loop
00001494                           529              
00001494  4CDF 7FFF                530  opWd_done   MOVEM.L     (SP)+, D0-D7/A0-A6
00001498  4E75                     531              RTS
0000149A                           532  
0000149A                           533  
0000149A                           534  
0000149A                           535  
0000149A                           536  
0000149A                           537  
0000149A                           538  
0000149A                           539  -------------------- end include --------------------
0000149A                           540              INCLUDE 'opcode_size.X68'
0000149A                           541  movea_size:
0000149A  48E7 FDFE                542          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000149E  3200                     543          MOVE.W      D0,D1           *put the full opcode into D1
000014A0  C27C 3000                544          AND.W       #mask_size_MOVES,D1 *mask to only see the size bits
000014A4                           545          
000014A4                           546          *test for word size
000014A4  B27C 3000                547  MA_W    CMP.W       #m_size_W_MOVES,D1
000014A8  6600 0014                548          BNE         MA_L
000014AC  43F9 000064C5            549          LEA         opcode_MOVEAW,A1
000014B2  1C3C 0002                550          MOVE.B      #word_size,D6
000014B6  4EB8 128C                551          JSR         print_string_op_nn  *print the opcode
000014BA  6000 0022                552          BRA         MA_END
000014BE                           553          
000014BE                           554          *test for long size
000014BE  B27C 2000                555  MA_L    CMP.W       #m_size_L_MOVES,D1
000014C2  6600 0014                556          BNE         MA_FAIL
000014C6  43F9 000064CD            557          LEA         opcode_MOVEAL,A1
000014CC  1C3C 0003                558          MOVE.B      #long_size,D6
000014D0  4EB8 128C                559          JSR         print_string_op_nn  *print the opcode
000014D4  6000 0008                560          BRA         MA_END
000014D8                           561          
000014D8                           562          *did not match, its data
000014D8  4EB9 0000226E            563  MA_FAIL JSR         op_DATA
000014DE                           564          
000014DE  4CDF 7FBF                565  MA_END  MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000014E2  4E75                     566          RTS
000014E4                           567  
000014E4                           568  move_size:
000014E4  48E7 FDFE                569          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000014E8  3200                     570          MOVE.W      D0,D1           *put the full opcode into D1
000014EA  C27C 3000                571          AND.W       #mask_size_MOVES,D1 *mask to only see the size bits
000014EE                           572          
000014EE                           573          *test for byte size
000014EE  B27C 1000                574          CMP.W       #m_size_B_MOVES,D1
000014F2  6600 0020                575          BNE         M_W
000014F6  43F9 0000649C            576          LEA         opcode_MOVEB,A1    *move the value for printing
000014FC  1C3C 0001                577          MOVE.B      #byte_size,D6
00001500  4EB8 128C                578          JSR         print_string_op_nn  *print the opcode
00001504  3200                     579          MOVE.W      D0,D1               *reload full address
00001506  4EB9 0000498C            580          JSR         MOVE_MOVE
0000150C  4EB8 1456                581          JSR         print_ea
00001510  6000 0054                582          BRA         M_END
00001514                           583          
00001514                           584          *test for word size
00001514  B27C 3000                585  M_W     CMP.W       #m_size_W_MOVES,D1
00001518  6600 0020                586          BNE         M_L
0000151C  43F9 000064A3            587          LEA         opcode_MOVEW,A1
00001522  1C3C 0002                588          MOVE.B      #word_size,D6
00001526  4EB8 128C                589          JSR         print_string_op_nn  *print the opcode
0000152A  3200                     590          MOVE.W      D0,D1               *reload full address
0000152C  4EB9 0000498C            591          JSR         MOVE_MOVE
00001532  4EB8 1456                592          JSR         print_ea
00001536  6000 002E                593          BRA         M_END
0000153A                           594          
0000153A                           595          *test for long size
0000153A  B27C 2000                596  M_L     CMP.W       #m_size_L_MOVES,D1
0000153E  6600 0020                597          BNE         M_FAIL
00001542  43F9 000064AA            598          LEA         opcode_MOVEL,A1
00001548  1C3C 0003                599          MOVE.B      #long_size,D6
0000154C  4EB8 128C                600          JSR         print_string_op_nn  *print the opcode
00001550  3200                     601          MOVE.W      D0,D1               *reload full address
00001552  4EB9 0000498C            602          JSR         MOVE_MOVE
00001558  4EB8 1456                603          JSR         print_ea
0000155C  6000 0008                604          BRA         M_END
00001560                           605          
00001560  4EB9 0000226E            606  M_FAIL  JSR         op_DATA
00001566                           607          
00001566  4CDF 7FBF                608  M_END   MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000156A  4E75                     609          RTS
0000156C                           610          
0000156C                           611  movem_rm_size:
0000156C  48E7 FDFE                612          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001570  3200                     613          MOVE.W      D0,D1           *put the full opcode into D1
00001572  C27C 0040                614          AND.W       #mask_size_MOVEM,D1 *mask to only see the size bits
00001576                           615          
00001576                           616          *test for word size
00001576  B27C 0000                617          CMP.W       #m_size_W_MOVEM,D1
0000157A  6600 001E                618          BNE         MOVEM_rm_L 
0000157E  43F9 0000660B            619          LEA         opcode_MOVEMW,A1    *move the value for printing
00001584  1C3C 0002                620          MOVE.B      #word_size,D6
00001588  4EB8 128C                621          JSR         print_string_op_nn  *print the opcode
0000158C  4EB9 00005242            622          JSR         MOVEM_sub
00001592  4EB8 1456                623          JSR         print_ea
00001596  6000 002C                624          BRA         MOVEM_rm_END
0000159A                           625          
0000159A                           626          *test for long size
0000159A                           627  MOVEM_rm_L  
0000159A  B27C 0040                628          CMP.W       #m_size_L_MOVEM,D1
0000159E  6600 001E                629          BNE         MOVEM_rm_FAIL
000015A2  43F9 00006613            630          LEA         opcode_MOVEML,A1
000015A8  1C3C 0003                631          MOVE.B      #long_size,D6
000015AC  4EB8 128C                632          JSR         print_string_op_nn  *print the opcode
000015B0  4EB9 00005242            633          JSR         MOVEM_sub
000015B6  4EB8 1456                634          JSR         print_ea
000015BA  6000 0008                635          BRA         MOVEM_rm_END
000015BE                           636          
000015BE                           637  MOVEM_rm_FAIL 
000015BE  4EB9 0000226E            638          JSR         op_DATA
000015C4                           639  
000015C4                           640  MOVEM_rm_END 
000015C4  4CDF 7FBF                641          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000015C8  4E75                     642          RTS
000015CA                           643  
000015CA                           644  movem_mr_size:
000015CA  48E7 FDFE                645          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000015CE  3200                     646          MOVE.W      D0,D1           *put the full opcode into D1
000015D0  C27C 0040                647          AND.W       #mask_size_MOVEM,D1 *mask to only see the size bits
000015D4                           648          
000015D4                           649          *test for word size
000015D4  B27C 0000                650          CMP.W       #m_size_W_MOVEM,D1
000015D8  6600 0014                651          BNE         MOVEM_mr_L
000015DC  43F9 0000660B            652          LEA         opcode_MOVEMW,A1    *move the value for printing
000015E2  1C3C 0002                653          MOVE.B      #word_size,D6
000015E6  4EB8 128C                654          JSR         print_string_op_nn  *print the opcode
000015EA  6000 0022                655          BRA         MOVEM_mr_END
000015EE                           656          
000015EE                           657          *test for long size
000015EE                           658  MOVEM_mr_L  
000015EE  B27C 0040                659          CMP.W       #m_size_L_MOVEM,D1
000015F2  6600 0014                660          BNE         MOVEM_mr_FAIL
000015F6  43F9 00006613            661          LEA         opcode_MOVEML,A1
000015FC  1C3C 0003                662          MOVE.B      #long_size,D6
00001600  4EB8 128C                663          JSR         print_string_op_nn  *print the opcode
00001604  6000 0008                664          BRA         MOVEM_mr_END
00001608                           665          
00001608                           666  MOVEM_mr_FAIL 
00001608  4EB9 0000226E            667          JSR         op_DATA
0000160E                           668  
0000160E                           669  MOVEM_mr_END 
0000160E  4CDF 7FBF                670          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001612  4E75                     671          RTS
00001614                           672  
00001614                           673          
00001614                           674  nop_size:
00001614  48E7 FDFE                675          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001618  43F9 000064D5            676          LEA         opcode_NOP,A1
0000161E  1C3C 0000                677          MOVE.B      #no_size,D6
00001622  4EB8 12C0                678          JSR         print_string_op_nl  *print the opcode
00001626  4CDF 7FBF                679          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000162A  4E75                     680          RTS
0000162C                           681          
0000162C                           682  rts_size:
0000162C  48E7 FDFE                683          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001630  43F9 000065F7            684          LEA         opcode_RTS,A1
00001636  1C3C 0000                685          MOVE.B      #no_size,D6
0000163A  4EB8 12C0                686          JSR         print_string_op_nl  *print the opcode
0000163E  4CDF 7FBF                687          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001642  4E75                     688          RTS
00001644                           689          
00001644                           690          
00001644                           691  lea_size:
00001644  48E7 FDFE                692          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001648  43F9 00006520            693          LEA         opcode_LEA,A1
0000164E  1C3C 0003                694          MOVE.B      #long_size,D6
00001652  4EB8 128C                695          JSR         print_string_op_nn  *print the opcode
00001656  4EB9 00004784            696          JSR         LEA_sub
0000165C  4EB8 1456                697          JSR         print_ea
00001660  4CDF 7FBF                698          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001664  4E75                     699          RTS
00001666                           700          
00001666                           701  jsr_size:
00001666  48E7 FDFE                702          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000166A  43F9 000065F3            703          LEA         opcode_JSR,A1
00001670  1C3C 0000                704          MOVE.B      #no_size,D6
00001674  4EB8 128C                705          JSR         print_string_op_nn  *print the opcode
00001678  4EB9 00004654            706          JSR         JSR_sub
0000167E  4EB8 1456                707          JSR         print_ea
00001682  4CDF 7FBF                708          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001686  4E75                     709          RTS
00001688                           710          
00001688                           711  not_size:
00001688  48E7 FDFE                712          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000168C  3200                     713          MOVE.W      D0,D1           *put the full opcode into D1
0000168E  C27C 00C0                714          AND.W       #mask_size_NOT,D1 *mask to only see the size bits
00001692                           715          
00001692                           716          *test for byte size
00001692  B27C 0000                717          CMP.W       #m_size_B_NOT,D1
00001696  6600 0014                718          BNE         NOT_W
0000169A  43F9 00006545            719          LEA         opcode_NOTB,A1    *move the value for printing
000016A0  1C3C 0001                720          MOVE.B      #byte_size,D6
000016A4  4EB8 128C                721          JSR         print_string_op_nn  *print the opcode
000016A8  6000 003C                722          BRA         NOT_END
000016AC                           723          
000016AC                           724          *test for word size
000016AC  B27C 0040                725  NOT_W   CMP.W       #m_size_W_NOT,D1
000016B0  6600 0014                726          BNE         NOT_L
000016B4  43F9 0000654B            727          LEA         opcode_NOTW,A1
000016BA  1C3C 0002                728          MOVE.B      #word_size,D6
000016BE  4EB8 128C                729          JSR         print_string_op_nn  *print the opcode
000016C2  6000 0022                730          BRA         NOT_END
000016C6                           731          
000016C6                           732          *test for long size
000016C6  B27C 0080                733  NOT_L   CMP.W       #m_size_L_NOT,D1
000016CA  6600 0014                734          BNE         NOT_FAIL
000016CE  43F9 00006551            735          LEA         opcode_NOTL,A1
000016D4  1C3C 0003                736          MOVE.B      #long_size,D6
000016D8  4EB8 128C                737          JSR         print_string_op_nn  *print the opcode
000016DC  6000 0008                738          BRA         NOT_END
000016E0                           739          
000016E0                           740          *does not match any
000016E0  4EB9 0000226E            741  NOT_FAIL JSR         op_DATA
000016E6                           742          
000016E6  4CDF 7FBF                743  NOT_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000016EA  4E75                     744          RTS
000016EC                           745  
000016EC                           746  
000016EC                           747  adda_size:
000016EC  48E7 FDFE                748          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000016F0  3200                     749          MOVE.W      D0,D1           *put the full opcode into D1
000016F2  C27C 0100                750          AND.W       #mask_size_ADDA,D1 *mask to only see the size bits
000016F6                           751          
000016F6                           752          *test for word size
000016F6  B27C 0000                753          CMP.W       #m_size_W_ADDA,D1
000016FA  6600 001E                754          BNE         ADDA_L
000016FE  43F9 000064EB            755          LEA         opcode_ADDAW,A1    *move the value for printing
00001704  1C3C 0002                756          MOVE.B      #word_size,D6
00001708  4EB8 128C                757          JSR         print_string_op_nn  *print the opcode
0000170C  4EB9 00003578            758          JSR         ADDA_sub
00001712  4EB8 1456                759          JSR         print_ea
00001716  6000 002C                760          BRA         ADDA_END
0000171A                           761          
0000171A                           762          *test for long size
0000171A  B27C 0100                763  ADDA_L  CMP.W       #m_size_L_ADDA,D1
0000171E  6600 001E                764          BNE         ADDA_FAIL
00001722  43F9 000064F2            765          LEA         opcode_ADDAL,A1
00001728  1C3C 0003                766          MOVE.B      #long_size,D6
0000172C  4EB8 128C                767          JSR         print_string_op_nn  *print the opcode
00001730  4EB9 00003578            768          JSR         ADDA_sub
00001736  4EB8 1456                769          JSR         print_ea
0000173A  6000 0008                770          BRA         ADDA_END
0000173E                           771          
0000173E  4EB9 0000226E            772  ADDA_FAIL JSR         op_DATA
00001744                           773  
00001744  4CDF 7FBF                774  ADDA_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001748  4E75                     775          RTS
0000174A                           776          
0000174A                           777  add_size:
0000174A  48E7 FDFE                778          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
0000174E  3200                     779          MOVE.W      D0,D1           *put the full opcode into D1
00001750  C27C 00C0                780          AND.W       #mask_size_ADD,D1 *mask to only see the size bits
00001754                           781          
00001754                           782          *test for byte size
00001754  B27C 0000                783          CMP.W       #m_size_B_ADD,D1
00001758  6600 001E                784          BNE         ADD_W
0000175C  43F9 000064D9            785          LEA         opcode_ADDB,A1    *move the value for printing
00001762  1C3C 0001                786          MOVE.B      #byte_size,D6
00001766  4EB8 128C                787          JSR         print_string_op_nn  *print the opcode
0000176A  4EB9 00002284            788          JSR         ADD_ADD             *calculate ea and print
00001770  4EB8 1456                789          JSR         print_ea
00001774  6000 0050                790          BRA         ADD_END
00001778                           791          
00001778                           792          *test for word size
00001778  B27C 0040                793  ADD_W   CMP.W       #m_size_W_ADD,D1
0000177C  6600 001E                794          BNE         ADD_L
00001780  43F9 000064DF            795          LEA         opcode_ADDW,A1
00001786  1C3C 0002                796          MOVE.B      #word_size,D6
0000178A  4EB8 128C                797          JSR         print_string_op_nn  *print the opcode
0000178E  4EB9 00002284            798          JSR         ADD_ADD             *calculate ea and print
00001794  4EB8 1456                799          JSR         print_ea
00001798  6000 002C                800          BRA         ADD_END
0000179C                           801          
0000179C                           802          *test for long size
0000179C  B27C 0080                803  ADD_L   CMP.W       #m_size_L_ADD,D1
000017A0  6600 001E                804          BNE         ADD_FAIL
000017A4  43F9 000064E5            805          LEA         opcode_ADDL,A1
000017AA  1C3C 0003                806          MOVE.B      #long_size,D6
000017AE  4EB8 128C                807          JSR         print_string_op_nn  *print the opcode
000017B2  4EB9 00002284            808          JSR         ADD_ADD             *calculate ea and print
000017B8  4EB8 1456                809          JSR         print_ea
000017BC  6000 0008                810          BRA         ADD_END
000017C0                           811          
000017C0  4EB9 0000226E            812  ADD_FAIL JSR         op_DATA
000017C6                           813          
000017C6  4CDF 7FBF                814  ADD_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000017CA  4E75                     815          RTS
000017CC                           816  
000017CC                           817  bcc_size:
000017CC  48E7 FDFE                818          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000017D0  3200                     819          MOVE.W      D0,D1           *refresh the entire opcode into D1
000017D2  C27C 00FF                820          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
000017D6                           821          
000017D6                           822          *test for long displacement size
000017D6  B27C 00FF                823  BCC_L   CMP.W       #m_size_L_bcc,D1
000017DA  6600 000E                824          BNE         BCC_W
000017DE                           825          *grab the next 32 bits
000017DE  2210                     826          MOVE.L      (A0),D1         *move the long value into D1
000017E0  5848                     827          ADDQ        #4,A0           *increment the pointer by 1 long
000017E2  4EB8 130C                828          JSR         print_string_sized  *print the output
000017E6  6000 001E                829          BRA         BCC_END
000017EA                           830          
000017EA                           831          *test for word displacement size
000017EA  B27C 0000                832  BCC_W   CMP.W       #m_size_W_bcc,D1
000017EE  6600 000E                833          BNE         BCC_B
000017F2                           834          *grab the next 16 bits
000017F2  3210                     835          MOVE.W      (A0),D1         *move the long value into D1
000017F4  5448                     836          ADDQ        #2,A0           *increment the pointer by 1 word
000017F6  4EB8 130C                837          JSR         print_string_sized  *print the output
000017FA  6000 000A                838          BRA         BCC_END
000017FE                           839          
000017FE                           840          *neither so it is byte size, print byte
000017FE  4EB8 12C0                841  BCC_B   JSR         print_string_op_nl
00001802  6000 0002                842          BRA         BCC_END
00001806                           843          
00001806  4CDF 7FBF                844  BCC_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000180A  4E75                     845          RTS
0000180C                           846  
0000180C                           847  
0000180C                           848  bgt_size:
0000180C  48E7 FDFE                849          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001810  3200                     850          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001812  C27C 00FF                851          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001816                           852          
00001816                           853          *test for long displacement size
00001816  B27C 00FF                854  BGT_L   CMP.W       #m_size_L_bcc,D1
0000181A  6600 001E                855          BNE         BGT_W
0000181E  43F9 000065C3            856          LEA         opcode_BGT,A1
00001824                           857          *grab the next 32 bits
00001824  5448                     858          ADDQ        #2,A0           *increment the pointer by 1 word
00001826  2610                     859          MOVE.L      (A0),D3         *move the data to D3
00001828  2408                     860          MOVE.L      A0,D2           *move the address location to D2
0000182A  5448                     861          ADDQ        #2,A0           *increment the pointer by another 1 word
0000182C  4EB9 000019E4            862          JSR         bcc_address
00001832  4EB8 13AA                863          JSR         print_bcc       *print the output
00001836  6000 0044                864          BRA         BGT_END
0000183A                           865          
0000183A                           866          *test for word displacement size
0000183A  B27C 0000                867  BGT_W   CMP.W       #m_size_W_bcc,D1
0000183E  6600 001E                868          BNE         BGT_B
00001842  43F9 000065CD            869          LEA         opcode_BGTW,A1
00001848                           870          *grab the next 16 bits
00001848  5448                     871          ADDQ        #2,A0           *increment the pointer by 1 word
0000184A  3610                     872          MOVE.W      (A0),D3         *move the data to D3
0000184C  2408                     873          MOVE.L      A0,D2           *move the address location to D2
0000184E  48C3                     874          EXT.L       D3              *make the word into long
00001850  4EB9 000019E4            875          JSR         bcc_address
00001856  4EB8 13AA                876          JSR         print_bcc       *print the output
0000185A  6000 0020                877          BRA         BGT_END
0000185E                           878          
0000185E                           879          *neither so it is byte size, print byte
0000185E  43F9 000065C7            880  BGT_B   LEA         opcode_BGTB,A1
00001864  3610                     881          MOVE.W      (A0),D3         *move the data to D3
00001866  E14B                     882          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
00001868  E04B                     883          LSR.W       #8,D3
0000186A  2408                     884          MOVE.L      A0,D2           *move the address location to D2
0000186C  48C3                     885          EXT.L       D3              *make the word into long
0000186E  4EB9 000019E4            886          JSR         bcc_address
00001874  4EB8 13AA                887          JSR         print_bcc       *print the output
00001878  6000 0002                888          BRA         BGT_END
0000187C                           889          
0000187C  4CDF 7FBF                890  BGT_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001880  4E75                     891          RTS
00001882                           892          
00001882                           893  beq_size:
00001882  48E7 FDFE                894          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001886  3200                     895          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001888  C27C 00FF                896          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
0000188C                           897          
0000188C                           898          *test for long displacement size
0000188C  B27C 00FF                899  BEQ_L   CMP.W       #m_size_L_bcc,D1
00001890  6600 001E                900          BNE         BEQ_W
00001894  43F9 000065E3            901          LEA         opcode_BEQ,A1
0000189A                           902          *grab the next 32 bits
0000189A  5448                     903          ADDQ        #2,A0           *increment the pointer by 1 word
0000189C  2610                     904          MOVE.L      (A0),D3         *move the data to D3
0000189E  2408                     905          MOVE.L      A0,D2           *move the address location to D2
000018A0  5448                     906          ADDQ        #2,A0           *increment the pointer by another 1 word
000018A2  4EB9 000019E4            907          JSR         bcc_address
000018A8  4EB8 13AA                908          JSR         print_bcc       *print the output
000018AC  6000 0044                909          BRA         BEQ_END
000018B0                           910          
000018B0                           911          *test for word displacement size
000018B0  B27C 0000                912  BEQ_W   CMP.W       #m_size_W_bcc,D1
000018B4  6600 001E                913          BNE         BEQ_B
000018B8  43F9 000065ED            914          LEA         opcode_BEQW,A1
000018BE                           915          *grab the next 16 bits
000018BE  5448                     916          ADDQ        #2,A0           *increment the pointer by 1 word
000018C0  3610                     917          MOVE.W      (A0),D3         *move the data to D3
000018C2  2408                     918          MOVE.L      A0,D2           *move the address location to D2
000018C4  48C3                     919          EXT.L       D3              *make the word into long
000018C6  4EB9 000019E4            920          JSR         bcc_address
000018CC  4EB8 13AA                921          JSR         print_bcc       *print the output
000018D0  6000 0020                922          BRA         BEQ_END
000018D4                           923          
000018D4                           924          *neither so it is byte size, print byte
000018D4  43F9 000065E7            925  BEQ_B   LEA         opcode_BEQB,A1
000018DA  3610                     926          MOVE.W      (A0),D3         *move the data to D3
000018DC  E14B                     927          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
000018DE  E04B                     928          LSR.W       #8,D3
000018E0  2408                     929          MOVE.L      A0,D2           *move the address location to D2
000018E2  48C3                     930          EXT.L       D3              *make the word into long
000018E4  4EB9 000019E4            931          JSR         bcc_address
000018EA  4EB8 13AA                932          JSR         print_bcc       *print the output
000018EE  6000 0002                933          BRA         BEQ_END
000018F2                           934          
000018F2  4CDF 7FBF                935  BEQ_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000018F6  4E75                     936          RTS
000018F8                           937          
000018F8                           938  ble_size:
000018F8  48E7 FDFE                939          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
000018FC  3200                     940          MOVE.W      D0,D1           *refresh the entire opcode into D1
000018FE  C27C 00FF                941          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001902                           942          
00001902                           943          *test for long displacement size
00001902  B27C 00FF                944  BLE_L   CMP.W       #m_size_L_bcc,D1
00001906  6600 001E                945          BNE         BLE_W
0000190A  43F9 000065D3            946          LEA         opcode_BLE,A1
00001910                           947          *grab the next 32 bits
00001910  5448                     948          ADDQ        #2,A0           *increment the pointer by 1 word
00001912  2610                     949          MOVE.L      (A0),D3         *move the data to D3
00001914  2408                     950          MOVE.L      A0,D2           *move the address location to D2
00001916  5448                     951          ADDQ        #2,A0           *increment the pointer by another 1 word
00001918  4EB9 000019E4            952          JSR         bcc_address
0000191E  4EB8 13AA                953          JSR         print_bcc       *print the output
00001922  6000 0044                954          BRA         BLE_END
00001926                           955          
00001926                           956          *test for word displacement size
00001926  B27C 0000                957  BLE_W   CMP.W       #m_size_W_bcc,D1
0000192A  6600 001E                958          BNE         BLE_B
0000192E  43F9 000065DD            959          LEA         opcode_BLEW,A1
00001934                           960          *grab the next 16 bits
00001934  5448                     961          ADDQ        #2,A0           *increment the pointer by 1 word
00001936  3610                     962          MOVE.W      (A0),D3         *move the data to D3
00001938  2408                     963          MOVE.L      A0,D2           *move the address location to D2
0000193A  48C3                     964          EXT.L       D3              *make the word into long
0000193C  4EB9 000019E4            965          JSR         bcc_address
00001942  4EB8 13AA                966          JSR         print_bcc       *print the output
00001946  6000 0020                967          BRA         BLE_END
0000194A                           968          
0000194A                           969          *neither so it is byte size, print byte
0000194A  43F9 000065D7            970  BLE_B   LEA         opcode_BLEB,A1
00001950  3610                     971          MOVE.W      (A0),D3         *move the data to D3
00001952  E14B                     972          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
00001954  E04B                     973          LSR.W       #8,D3
00001956  2408                     974          MOVE.L      A0,D2           *move the address location to D2
00001958  48C3                     975          EXT.L       D3              *make the word into long
0000195A  4EB9 000019E4            976          JSR         bcc_address
00001960  4EB8 13AA                977          JSR         print_bcc       *print the output
00001964  6000 0002                978          BRA         BLE_END
00001968                           979          
00001968  4CDF 7FBF                980  BLE_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
0000196C  4E75                     981          RTS
0000196E                           982  
0000196E                           983  
0000196E                           984          
0000196E                           985  bra_size:
0000196E  48E7 FDFE                986          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001972  3200                     987          MOVE.W      D0,D1           *refresh the entire opcode into D1
00001974  C27C 00FF                988          AND.W       #mask_BCC_SIZE,D1  *look at only the last 2 bits
00001978                           989          
00001978                           990          *test for long displacement size
00001978  B27C 00FF                991  BRA_L   CMP.W       #m_size_L_bcc,D1
0000197C  6600 001E                992          BNE         BRA_W
00001980  43F9 000065FB            993          LEA         opcode_BRA,A1
00001986                           994          *grab the next 32 bits
00001986  5448                     995          ADDQ        #2,A0           *increment the pointer by 1 word
00001988  2610                     996          MOVE.L      (A0),D3         *move the data to D3
0000198A  2408                     997          MOVE.L      A0,D2           *move the address location to D2
0000198C  5448                     998          ADDQ        #2,A0           *increment the pointer by another 1 word
0000198E  4EB9 000019E4            999          JSR         bcc_address
00001994  4EB8 13AA               1000          JSR         print_bcc       *print the output
00001998  6000 0044               1001          BRA         BRA_END
0000199C                          1002          
0000199C                          1003          *test for word displacement size
0000199C  B27C 0000               1004  BRA_W   CMP.W       #m_size_W_bcc,D1
000019A0  6600 001E               1005          BNE         BRA_B
000019A4  43F9 00006605           1006          LEA         opcode_BRAW,A1
000019AA                          1007          *grab the next 16 bits
000019AA  5448                    1008          ADDQ        #2,A0           *increment the pointer by 1 word
000019AC  3610                    1009          MOVE.W      (A0),D3         *move the data to D3
000019AE  2408                    1010          MOVE.L      A0,D2           *move the address location to D2
000019B0  48C3                    1011          EXT.L       D3              *make the word into long
000019B2  4EB9 000019E4           1012          JSR         bcc_address
000019B8  4EB8 13AA               1013          JSR         print_bcc       *print the output
000019BC  6000 0020               1014          BRA         BRA_END
000019C0                          1015          
000019C0                          1016          *neither so it is byte size, print byte
000019C0  43F9 000065FF           1017  BRA_B   LEA         opcode_BRAB,A1
000019C6  3610                    1018          MOVE.W      (A0),D3         *move the data to D3
000019C8  E14B                    1019          LSL.W       #8,D3           *get rid of the first byte, rotate left then right
000019CA  E04B                    1020          LSR.W       #8,D3
000019CC  2408                    1021          MOVE.L      A0,D2           *move the address location to D2
000019CE  48C3                    1022          EXT.L       D3              *make the word into long
000019D0  4EB9 000019E4           1023          JSR         bcc_address
000019D6  4EB8 13AA               1024          JSR         print_bcc       *print the output
000019DA  6000 0002               1025          BRA         BRA_END
000019DE                          1026          
000019DE  4CDF 7FBF               1027  BRA_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
000019E2  4E75                    1028          RTS
000019E4                          1029  
000019E4                          1030  bcc_address:
000019E4  48E7 EFFE               1031          MOVEM.L     D0-D2/D4-D7/A0-A6, -(SP)
000019E8  B6BC 00000000           1032          CMP.L       #0,D3           *compare against 0
000019EE  6D00 0008               1033          BLT         bcc_negative    *branch if the value is negative
000019F2                          1034          *else
000019F2  D682                    1035          ADD.L       D2,D3           *add address by displacement
000019F4  6000 000A               1036          BRA         bcc_add_end     *return for printing
000019F8                          1037  bcc_negative
000019F8  7800                    1038          MOVE.L      #0,D4
000019FA  9883                    1039          SUB.L       D3,D4           *flip the bits
000019FC  9484                    1040          SUB.L       D4,D2           *get the address of displacemnt
000019FE  2602                    1041          MOVE.L      D2,D3           *move back for printing
00001A00                          1042  bcc_add_end  
00001A00  4CDF 7FF7               1043          MOVEM.L     (SP)+, D0-D2/D4-D7/A0-A6
00001A04  4E75                    1044          RTS
00001A06                          1045                  
00001A06                          1046  lsl_r_size:
00001A06  48E7 FDFE               1047          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001A0A  3200                    1048          MOVE.W      D0,D1           *put the full opcode into D1
00001A0C  C27C 00C0               1049          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001A10                          1050          
00001A10                          1051          *test for byte size
00001A10  B27C 0000               1052          CMP.W       #m_size_B_shfts,D1
00001A14  6600 0014               1053          BNE         LSLR_W
00001A18  43F9 00006557           1054          LEA         opcode_LSLB,A1    *move the value for printing
00001A1E  1C3C 0001               1055          MOVE.B      #byte_size,D6
00001A22  4EB8 128C               1056          JSR         print_string_op_nn  *print the opcode
00001A26  6000 003C               1057          BRA         LSLR_END
00001A2A                          1058          
00001A2A                          1059          *test for word size
00001A2A  B27C 0040               1060  LSLR_W  CMP.W       #m_size_W_shfts,D1
00001A2E  6600 0014               1061          BNE         LSLR_L
00001A32  43F9 0000655D           1062          LEA         opcode_LSLW,A1
00001A38  1C3C 0002               1063          MOVE.B      #word_size,D6
00001A3C  4EB8 128C               1064          JSR         print_string_op_nn  *print the opcode
00001A40  6000 0022               1065          BRA         LSLR_END
00001A44                          1066          
00001A44                          1067          *test for long size
00001A44  B27C 0080               1068  LSLR_L  CMP.W       #m_size_L_shfts,D1
00001A48  6600 0014               1069          BNE         LSLR_FAIL
00001A4C  43F9 00006563           1070          LEA         opcode_LSLL,A1
00001A52  1C3C 0003               1071          MOVE.B      #long_size,D6
00001A56  4EB8 128C               1072          JSR         print_string_op_nn  *print the opcode
00001A5A  6000 0008               1073          BRA         LSLR_END
00001A5E                          1074          
00001A5E                          1075          *did not match any
00001A5E  4EB9 0000226E           1076  LSLR_FAIL JSR         op_DATA
00001A64                          1077          
00001A64  4CDF 7FBF               1078  LSLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001A68  4E75                    1079          RTS
00001A6A                          1080  
00001A6A                          1081  lsl_m_size:
00001A6A  48E7 FDFE               1082          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001A6E  3200                    1083          MOVE.W      D0,D1           *put the full opcode into D1
00001A70                          1084          *memory only works on word size
00001A70  43F9 0000655D           1085          LEA         opcode_LSLW,A1
00001A76  1C3C 0002               1086          MOVE.B      #word_size,D6
00001A7A  4EB8 128C               1087          JSR         print_string_op_nn  *print the opcode
00001A7E  6000 0002               1088          BRA         LSLM_END
00001A82                          1089          
00001A82  4CDF 7FBF               1090  LSLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001A86  4E75                    1091          RTS
00001A88                          1092  
00001A88                          1093  
00001A88                          1094  lsr_r_size:
00001A88  48E7 FDFE               1095          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001A8C  3200                    1096          MOVE.W      D0,D1           *put the full opcode into D1
00001A8E  C27C 00C0               1097          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001A92                          1098          
00001A92                          1099          *test for byte size
00001A92  B27C 0000               1100          CMP.W       #m_size_B_shfts,D1
00001A96  6600 0014               1101          BNE         LSRR_W
00001A9A  43F9 00006569           1102          LEA         opcode_LSRB,A1    *move the value for printing
00001AA0  1C3C 0001               1103          MOVE.B      #byte_size,D6
00001AA4  4EB8 128C               1104          JSR         print_string_op_nn  *print the opcode
00001AA8  6000 003C               1105          BRA         LSRR_END
00001AAC                          1106          
00001AAC                          1107          *test for word size
00001AAC  B27C 0040               1108  LSRR_W  CMP.W       #m_size_W_shfts,D1
00001AB0  6600 0014               1109          BNE         LSRR_L
00001AB4  43F9 0000656F           1110          LEA         opcode_LSRW,A1
00001ABA  1C3C 0002               1111          MOVE.B      #word_size,D6
00001ABE  4EB8 128C               1112          JSR         print_string_op_nn  *print the opcode
00001AC2  6000 0022               1113          BRA         LSRR_END
00001AC6                          1114          
00001AC6                          1115          *test for long size
00001AC6  B27C 0080               1116  LSRR_L  CMP.W       #m_size_L_shfts,D1
00001ACA  6600 0014               1117          BNE         LSRR_FAIL
00001ACE  43F9 00006575           1118          LEA         opcode_LSRL,A1
00001AD4  1C3C 0003               1119          MOVE.B      #long_size,D6
00001AD8  4EB8 128C               1120          JSR         print_string_op_nn  *print the opcode
00001ADC  6000 0008               1121          BRA         LSRR_END
00001AE0                          1122          
00001AE0  4EB9 0000226E           1123  LSRR_FAIL JSR         op_DATA
00001AE6                          1124          
00001AE6  4CDF 7FBF               1125  LSRR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001AEA  4E75                    1126          RTS
00001AEC                          1127          
00001AEC                          1128  lsr_m_size:
00001AEC  48E7 FDFE               1129          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001AF0  3200                    1130          MOVE.W      D0,D1           *put the full opcode into D1
00001AF2                          1131          *memory only works on word size
00001AF2  43F9 0000656F           1132          LEA         opcode_LSRW,A1
00001AF8  1C3C 0002               1133          MOVE.B      #word_size,D6
00001AFC  4EB8 128C               1134          JSR         print_string_op_nn  *print the opcode
00001B00  6000 0002               1135          BRA         LSRM_END
00001B04                          1136          
00001B04  4CDF 7FBF               1137  LSRM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001B08  4E75                    1138          RTS
00001B0A                          1139  
00001B0A                          1140  asl_r_size:
00001B0A  48E7 FDFE               1141          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001B0E  3200                    1142          MOVE.W      D0,D1           *put the full opcode into D1
00001B10  C27C 00C0               1143          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001B14                          1144          
00001B14                          1145          *test for byte size
00001B14  B27C 0000               1146          CMP.W       #m_size_B_shfts,D1
00001B18  6600 001E               1147          BNE         ASLR_W
00001B1C  43F9 0000657B           1148          LEA         opcode_ASLB,A1    *move the value for printing
00001B22  1C3C 0001               1149          MOVE.B      #byte_size,D6
00001B26  4EB8 128C               1150          JSR         print_string_op_nn  *print the opcode
00001B2A  4EB9 000040B2           1151          JSR         ASD_sub
00001B30  4EB8 1456               1152          JSR         print_ea
00001B34  6000 0050               1153          BRA         ASLR_END
00001B38                          1154          
00001B38                          1155          *test for word size
00001B38  B27C 0040               1156  ASLR_W  CMP.W       #m_size_W_shfts,D1
00001B3C  6600 001E               1157          BNE         ASLR_L
00001B40  43F9 00006581           1158          LEA         opcode_ASLW,A1
00001B46  1C3C 0002               1159          MOVE.B      #word_size,D6
00001B4A  4EB8 128C               1160          JSR         print_string_op_nn  *print the opcode
00001B4E  4EB9 000040B2           1161          JSR         ASD_sub
00001B54  4EB8 1456               1162          JSR         print_ea
00001B58  6000 002C               1163          BRA         ASLR_END
00001B5C                          1164          
00001B5C                          1165          *test for long size
00001B5C  B27C 0080               1166  ASLR_L  CMP.W       #m_size_L_shfts,D1
00001B60  6600 001E               1167          BNE         ASLR_FAIL
00001B64  43F9 00006587           1168          LEA         opcode_ASLL,A1
00001B6A  1C3C 0003               1169          MOVE.B      #long_size,D6
00001B6E  4EB8 128C               1170          JSR         print_string_op_nn  *print the opcode
00001B72  4EB9 000040B2           1171          JSR         ASD_sub
00001B78  4EB8 1456               1172          JSR         print_ea
00001B7C  6000 0008               1173          BRA         ASLR_END
00001B80                          1174         
00001B80  4EB9 0000226E           1175  ASLR_FAIL JSR         op_DATA
00001B86                          1176          
00001B86  4CDF 7FBF               1177  ASLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001B8A  4E75                    1178          RTS
00001B8C                          1179          
00001B8C                          1180  asl_m_size:
00001B8C  48E7 FDFE               1181          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001B90  3200                    1182          MOVE.W      D0,D1           *put the full opcode into D1
00001B92                          1183          *memory only works on word size
00001B92  43F9 00006581           1184          LEA         opcode_ASLW,A1
00001B98  1C3C 0002               1185          MOVE.B      #word_size,D6
00001B9C  4EB8 128C               1186          JSR         print_string_op_nn  *print the opcode
00001BA0  4EB9 000040B2           1187          JSR         ASD_sub
00001BA6  4EB8 1456               1188          JSR         print_ea
00001BAA  6000 0002               1189          BRA         ASLM_END
00001BAE                          1190          
00001BAE  4CDF 7FBF               1191  ASLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001BB2  4E75                    1192          RTS
00001BB4                          1193          
00001BB4                          1194  
00001BB4                          1195  asr_r_size:
00001BB4  48E7 FDFE               1196          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001BB8  3200                    1197          MOVE.W      D0,D1           *put the full opcode into D1
00001BBA  C27C 00C0               1198          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001BBE                          1199          
00001BBE                          1200          *test for byte size
00001BBE  B27C 0000               1201          CMP.W       #m_size_B_shfts,D1
00001BC2  6600 001E               1202          BNE         ASRR_W
00001BC6  43F9 0000658D           1203          LEA         opcode_ASRB,A1    *move the value for printing
00001BCC  1C3C 0001               1204          MOVE.B      #byte_size,D6
00001BD0  4EB8 128C               1205          JSR         print_string_op_nn  *print the opcode
00001BD4  4EB9 000040B2           1206          JSR         ASD_sub
00001BDA  4EB8 1456               1207          JSR         print_ea
00001BDE  6000 0050               1208          BRA         ASRR_END
00001BE2                          1209          
00001BE2                          1210          *test for word size
00001BE2  B27C 0040               1211  ASRR_W  CMP.W       #m_size_W_shfts,D1
00001BE6  6600 001E               1212          BNE         ASRR_L
00001BEA  43F9 00006593           1213          LEA         opcode_ASRW,A1
00001BF0  1C3C 0002               1214          MOVE.B      #word_size,D6
00001BF4  4EB8 128C               1215          JSR         print_string_op_nn  *print the opcode
00001BF8  4EB9 000040B2           1216          JSR         ASD_sub
00001BFE  4EB8 1456               1217          JSR         print_ea
00001C02  6000 002C               1218          BRA         ASRR_END
00001C06                          1219          
00001C06                          1220          *test for long size
00001C06  B27C 0080               1221  ASRR_L  CMP.W       #m_size_L_shfts,D1
00001C0A  6600 001E               1222          BNE         ASRR_FAIL
00001C0E  43F9 00006599           1223          LEA         opcode_ASRL,A1
00001C14  1C3C 0003               1224          MOVE.B      #long_size,D6
00001C18  4EB8 128C               1225          JSR         print_string_op_nn  *print the opcode
00001C1C  4EB9 000040B2           1226          JSR         ASD_sub
00001C22  4EB8 1456               1227          JSR         print_ea
00001C26  6000 0008               1228          BRA         ASRR_END
00001C2A                          1229          
00001C2A  4EB9 0000226E           1230  ASRR_FAIL JSR         op_DATA
00001C30                          1231          
00001C30  4CDF 7FBF               1232  ASRR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001C34  4E75                    1233          RTS
00001C36                          1234  
00001C36                          1235  asr_m_size:
00001C36  48E7 FDFE               1236          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001C3A  3200                    1237          MOVE.W      D0,D1           *put the full opcode into D1
00001C3C                          1238          *memory only works on word size
00001C3C  43F9 00006593           1239          LEA         opcode_ASRW,A1
00001C42  1C3C 0002               1240          MOVE.B      #word_size,D6
00001C46  4EB8 128C               1241          JSR         print_string_op_nn  *print the opcode
00001C4A  4EB9 000040B2           1242          JSR         ASD_sub
00001C50  4EB8 1456               1243          JSR         print_ea
00001C54  6000 0002               1244          BRA         ASRM_END
00001C58                          1245          
00001C58  4CDF 7FBF               1246  ASRM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001C5C  4E75                    1247          RTS
00001C5E                          1248          
00001C5E                          1249  
00001C5E                          1250  rol_r_size:
00001C5E  48E7 FDFE               1251          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001C62  3200                    1252          MOVE.W      D0,D1           *put the full opcode into D1
00001C64  C27C 00C0               1253          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001C68                          1254          
00001C68                          1255          *test for byte size
00001C68  B27C 0000               1256          CMP.W       #m_size_B_shfts,D1
00001C6C  6600 0014               1257          BNE         ROLR_W
00001C70  43F9 0000659F           1258          LEA         opcode_ROLB,A1    *move the value for printing
00001C76  1C3C 0001               1259          MOVE.B      #byte_size,D6
00001C7A  4EB8 128C               1260          JSR         print_string_op_nn  *print the opcode
00001C7E  6000 003C               1261          BRA         ROLR_END
00001C82                          1262          
00001C82                          1263          *test for word size
00001C82  B27C 0040               1264  ROLR_W  CMP.W       #m_size_W_shfts,D1
00001C86  6600 0014               1265          BNE         ROLR_L
00001C8A  43F9 000065A5           1266          LEA         opcode_ROLW,A1
00001C90  1C3C 0002               1267          MOVE.B      #word_size,D6
00001C94  4EB8 128C               1268          JSR         print_string_op_nn  *print the opcode
00001C98  6000 0022               1269          BRA         ROLR_END
00001C9C                          1270          
00001C9C                          1271          *test for long size
00001C9C  B27C 0080               1272  ROLR_L  CMP.W       #m_size_L_shfts,D1
00001CA0  6600 0014               1273          BNE         ROLR_FAIL
00001CA4  43F9 000065AB           1274          LEA         opcode_ROLL,A1
00001CAA  1C3C 0003               1275          MOVE.B      #long_size,D6
00001CAE  4EB8 128C               1276          JSR         print_string_op_nn  *print the opcode
00001CB2  6000 0008               1277          BRA         ROLR_END
00001CB6                          1278          
00001CB6  4EB9 0000226E           1279  ROLR_FAIL JSR         op_DATA
00001CBC                          1280          
00001CBC  4CDF 7FBF               1281  ROLR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001CC0  4E75                    1282          RTS
00001CC2                          1283  
00001CC2                          1284  rol_m_size:
00001CC2  48E7 FDFE               1285          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001CC6  3200                    1286          MOVE.W      D0,D1           *put the full opcode into D1
00001CC8                          1287          *memory only works on word size
00001CC8  43F9 000065A5           1288          LEA         opcode_ROLW,A1
00001CCE  1C3C 0002               1289          MOVE.B      #word_size,D6
00001CD2  4EB8 128C               1290          JSR         print_string_op_nn  *print the opcode
00001CD6  6000 0002               1291          BRA         ROLM_END
00001CDA                          1292          
00001CDA  4CDF 7FBF               1293  ROLM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001CDE  4E75                    1294          RTS
00001CE0                          1295          
00001CE0                          1296  
00001CE0                          1297  ror_r_size:
00001CE0  48E7 FDFE               1298          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001CE4  3200                    1299          MOVE.W      D0,D1           *put the full opcode into D1
00001CE6  C27C 00C0               1300          AND.W       #mask_size_shifts,D1 *mask to only see the size bits
00001CEA                          1301          
00001CEA                          1302          *test for byte size
00001CEA  B27C 0000               1303          CMP.W       #m_size_B_shfts,D1
00001CEE  6600 0014               1304          BNE         RORR_W
00001CF2  43F9 000065B1           1305          LEA         opcode_RORB,A1    *move the value for printing
00001CF8  1C3C 0001               1306          MOVE.B      #byte_size,D6
00001CFC  4EB8 128C               1307          JSR         print_string_op_nn  *print the opcode
00001D00  6000 003C               1308          BRA         RORR_END
00001D04                          1309          
00001D04                          1310          *test for word size
00001D04  B27C 0040               1311  RORR_W  CMP.W       #m_size_W_shfts,D1
00001D08  6600 0014               1312          BNE         RORR_L
00001D0C  43F9 000065B7           1313          LEA         opcode_RORW,A1
00001D12  1C3C 0002               1314          MOVE.B      #word_size,D6
00001D16  4EB8 128C               1315          JSR         print_string_op_nn  *print the opcode
00001D1A  6000 0022               1316          BRA         RORR_END
00001D1E                          1317          
00001D1E                          1318          *test for long size
00001D1E  B27C 0080               1319  RORR_L  CMP.W       #m_size_L_shfts,D1
00001D22  6600 0014               1320          BNE         RORR_FAIL
00001D26  43F9 000065BD           1321          LEA         opcode_RORL,A1
00001D2C  1C3C 0003               1322          MOVE.B      #long_size,D6
00001D30  4EB8 128C               1323          JSR         print_string_op_nn  *print the opcode
00001D34  6000 0008               1324          BRA         RORR_END
00001D38                          1325          
00001D38  4EB9 0000226E           1326  RORR_FAIL JSR         op_DATA
00001D3E                          1327          
00001D3E  4CDF 7FBF               1328  RORR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001D42  4E75                    1329          RTS
00001D44                          1330  
00001D44                          1331  ror_m_size:
00001D44  48E7 FDFE               1332          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001D48  3200                    1333          MOVE.W      D0,D1           *put the full opcode into D1
00001D4A                          1334          *memory only works on word size
00001D4A  43F9 000065B7           1335          LEA         opcode_RORW,A1
00001D50  1C3C 0002               1336          MOVE.B      #word_size,D6
00001D54  4EB8 128C               1337          JSR         print_string_op_nn  *print the opcode
00001D58  6000 0002               1338          BRA         RORM_END
00001D5C                          1339          
00001D5C  4CDF 7FBF               1340  RORM_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001D60  4E75                    1341          RTS
00001D62                          1342          
00001D62                          1343  
00001D62                          1344  addq_size:
00001D62  48E7 FDFE               1345          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001D66  3200                    1346          MOVE.W      D0,D1           *put the full opcode into D1
00001D68  C27C 00C0               1347          AND.W       #mask_size_ADD,D1 *mask to only see the size bits
00001D6C                          1348          
00001D6C                          1349          *test for byte size
00001D6C  B27C 0000               1350          CMP.W       #m_size_B_ADD,D1
00001D70  6600 001E               1351          BNE         ADDQ_W
00001D74  43F9 000064F9           1352          LEA         opcode_ADDQB,A1    *move the value for printing
00001D7A  1C3C 0001               1353          MOVE.B      #byte_size,D6
00001D7E  4EB8 128C               1354          JSR         print_string_op_nn  *print the opcode
00001D82  4EB9 00003B32           1355          JSR         ADDQ_sub
00001D88  4EB8 1456               1356          JSR         print_ea
00001D8C  6000 0050               1357          BRA         ADDQ_END
00001D90                          1358          
00001D90                          1359          *test for word size
00001D90  B27C 0040               1360  ADDQ_W  CMP.W       #m_size_W_ADD,D1
00001D94  6600 001E               1361          BNE         ADDQ_L
00001D98  43F9 00006500           1362          LEA         opcode_ADDQW,A1
00001D9E  1C3C 0002               1363          MOVE.B      #word_size,D6
00001DA2  4EB8 128C               1364          JSR         print_string_op_nn  *print the opcode
00001DA6  4EB9 00003B32           1365          JSR         ADDQ_sub
00001DAC  4EB8 1456               1366          JSR         print_ea
00001DB0  6000 002C               1367          BRA         ADDQ_END
00001DB4                          1368          
00001DB4                          1369          *test for long size
00001DB4  B27C 0080               1370  ADDQ_L  CMP.W       #m_size_L_ADD,D1
00001DB8  6600 001E               1371          BNE         ADDQ_FAIL
00001DBC  43F9 00006507           1372          LEA         opcode_ADDQL,A1
00001DC2  1C3C 0003               1373          MOVE.B      #long_size,D6
00001DC6  4EB8 128C               1374          JSR         print_string_op_nn  *print the opcode
00001DCA  4EB9 00003B32           1375          JSR         ADDQ_sub
00001DD0  4EB8 1456               1376          JSR         print_ea
00001DD4  6000 0008               1377          BRA         ADDQ_END
00001DD8                          1378          
00001DD8  4EB9 0000226E           1379  ADDQ_FAIL JSR         op_DATA
00001DDE                          1380          
00001DDE  4CDF 7FBF               1381  ADDQ_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001DE2  4E75                    1382          RTS
00001DE4                          1383  
00001DE4                          1384  
00001DE4                          1385  sub_size:
00001DE4  48E7 FDFE               1386          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001DE8  3200                    1387          MOVE.W      D0,D1           *put the full opcode into D1
00001DEA  C27C 00C0               1388          AND.W       #mask_size_SUB,D1 *mask to only see the size bits
00001DEE                          1389          
00001DEE                          1390          *test for byte size
00001DEE  B27C 0000               1391          CMP.W       #m_size_B_SUB,D1
00001DF2  6600 001E               1392          BNE         SUB_W
00001DF6  43F9 0000650E           1393          LEA         opcode_SUBB,A1    *move the value for printing
00001DFC  1C3C 0001               1394          MOVE.B      #byte_size,D6
00001E00  4EB8 128C               1395          JSR         print_string_op_nn  *print the opcode
00001E04  4EB9 00005B70           1396          JSR         SUB_sub
00001E0A  4EB8 1456               1397          JSR         print_ea
00001E0E  6000 0050               1398          BRA         SUB_END
00001E12                          1399          
00001E12                          1400          *test for word size
00001E12  B27C 0040               1401  SUB_W   CMP.W       #m_size_W_SUB,D1
00001E16  6600 001E               1402          BNE         SUB_L
00001E1A  43F9 00006514           1403          LEA         opcode_SUBW,A1
00001E20  1C3C 0002               1404          MOVE.B      #word_size,D6
00001E24  4EB8 128C               1405          JSR         print_string_op_nn  *print the opcode
00001E28  4EB9 00005B70           1406          JSR         SUB_sub
00001E2E  4EB8 1456               1407          JSR         print_ea
00001E32  6000 002C               1408          BRA         SUB_END
00001E36                          1409          
00001E36                          1410          *test for long size
00001E36  B27C 0080               1411  SUB_L   CMP.W       #m_size_L_SUB,D1
00001E3A  6600 001E               1412          BNE         SUB_FAIL
00001E3E  43F9 0000651A           1413          LEA         opcode_SUBL,A1
00001E44  1C3C 0003               1414          MOVE.B      #long_size,D6
00001E48  4EB8 128C               1415          JSR         print_string_op_nn  *print the opcode
00001E4C  4EB9 00005B70           1416          JSR         SUB_sub
00001E52  4EB8 1456               1417          JSR         print_ea
00001E56  6000 0008               1418          BRA         SUB_END
00001E5A                          1419          
00001E5A  4EB9 0000226E           1420  SUB_FAIL JSR         op_DATA
00001E60                          1421          
00001E60  4CDF 7FBF               1422  SUB_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001E64  4E75                    1423          RTS
00001E66                          1424  
00001E66                          1425  and_size:
00001E66  48E7 FDFE               1426          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001E6A  3200                    1427          MOVE.W      D0,D1           *put the full opcode into D1
00001E6C  C27C 00C0               1428          AND.W       #mask_size_logic,D1 *mask to only see the size bits
00001E70                          1429          
00001E70                          1430          *test for byte size
00001E70  B27C 0000               1431          CMP.W       #m_size_B_logic,D1
00001E74  6600 001E               1432          BNE         AND_W
00001E78  43F9 00006524           1433          LEA         opcode_ANDB,A1    *move the value for printing
00001E7E  1C3C 0001               1434          MOVE.B      #byte_size,D6
00001E82  4EB8 128C               1435          JSR         print_string_op_nn  *print the opcode
00001E86  4EB9 00002BBA           1436          JSR         AND_sub
00001E8C  4EB8 1456               1437          JSR         print_ea
00001E90  6000 0050               1438          BRA         AND_END
00001E94                          1439          
00001E94                          1440          *test for word size
00001E94  B27C 0040               1441  AND_W   CMP.W       #m_size_W_logic,D1
00001E98  6600 001E               1442          BNE         AND_L
00001E9C  43F9 0000652A           1443          LEA         opcode_ANDW,A1
00001EA2  1C3C 0002               1444          MOVE.B      #word_size,D6
00001EA6  4EB8 128C               1445          JSR         print_string_op_nn  *print the opcode
00001EAA  4EB9 00002BBA           1446          JSR         AND_sub
00001EB0  4EB8 1456               1447          JSR         print_ea
00001EB4  6000 002C               1448          BRA         AND_END
00001EB8                          1449          
00001EB8                          1450          *test for long size
00001EB8  B27C 0080               1451  AND_L   CMP.W       #m_size_L_logic,D1
00001EBC  6600 001E               1452          BNE         AND_FAIL
00001EC0  43F9 00006530           1453          LEA         opcode_ANDL,A1
00001EC6  1C3C 0003               1454          MOVE.B      #long_size,D6
00001ECA  4EB8 128C               1455          JSR         print_string_op_nn  *print the opcode
00001ECE  4EB9 00002BBA           1456          JSR         AND_sub
00001ED4  4EB8 1456               1457          JSR         print_ea
00001ED8  6000 0008               1458          BRA         AND_END
00001EDC                          1459          
00001EDC  4EB9 0000226E           1460  AND_FAIL JSR         op_DATA
00001EE2                          1461          
00001EE2  4CDF 7FBF               1462  AND_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001EE6  4E75                    1463          RTS
00001EE8                          1464          
00001EE8                          1465  or_size:
00001EE8  48E7 FDFE               1466          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001EEC  3200                    1467          MOVE.W      D0,D1           *put the full opcode into D1
00001EEE  C27C 00C0               1468          AND.W       #mask_size_logic,D1 *mask to only see the size bits
00001EF2                          1469          
00001EF2                          1470          *test for byte size
00001EF2  B27C 0000               1471          CMP.W       #m_size_B_logic,D1
00001EF6  6600 0014               1472          BNE         OR_W
00001EFA  43F9 00006536           1473          LEA         opcode_ORB,A1    *move the value for printing
00001F00  1C3C 0001               1474          MOVE.B      #byte_size,D6
00001F04  4EB8 128C               1475          JSR         print_string_op_nn  *print the opcode
00001F08  6000 003C               1476          BRA         OR_END
00001F0C                          1477          
00001F0C                          1478          *test for word size
00001F0C  B27C 0040               1479  OR_W    CMP.W       #m_size_W_logic,D1
00001F10  6600 0014               1480          BNE         OR_L
00001F14  43F9 0000653B           1481          LEA         opcode_ORW,A1
00001F1A  1C3C 0002               1482          MOVE.B      #word_size,D6
00001F1E  4EB8 128C               1483          JSR         print_string_op_nn  *print the opcode
00001F22  6000 0022               1484          BRA         OR_END
00001F26                          1485          
00001F26                          1486          *test for long size
00001F26  B27C 0080               1487  OR_L    CMP.W       #m_size_L_logic,D1
00001F2A  6600 0014               1488          BNE         OR_FAIL
00001F2E  43F9 00006540           1489          LEA         opcode_ORL,A1
00001F34  1C3C 0003               1490          MOVE.B      #long_size,D6
00001F38  4EB8 128C               1491          JSR         print_string_op_nn  *print the opcode
00001F3C  6000 0008               1492          BRA         OR_END
00001F40                          1493          
00001F40  4EB9 0000226E           1494  OR_FAIL JSR         op_DATA
00001F46                          1495          
00001F46  4CDF 7FBF               1496  OR_END MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001F4A  4E75                    1497          RTS
00001F4C                          1498  
00001F4C                          1499  moveq_size:
00001F4C  48E7 FDFE               1500          MOVEM.L     D0-D5/D7/A0-A6, -(SP)
00001F50  3200                    1501          MOVE.W      D0,D1           *put the full opcode into D1
00001F52  C27C F100               1502          AND.W       #mask_size_MOVEQ,D1 *mask to only see the size bits
00001F56                          1503          
00001F56                          1504          *test for long size (only)
00001F56  B27C 7000               1505          CMP.W       #m_size_L_MOVEQ,D1
00001F5A  6600 0014               1506          BNE         MOVEQ_FAIL
00001F5E  43F9 000064B7           1507          LEA         opcode_MOVEQ,A1    *move the value for printing
00001F64  1C3C 0003               1508          MOVE.B      #long_size,D6
00001F68  4EB8 128C               1509          JSR         print_string_op_nn  *print the opcode
00001F6C  6000 0008               1510          BRA         MOVEQ_END
00001F70                          1511          
00001F70                          1512  MOVEQ_FAIL 
00001F70  4EB9 0000226E           1513          JSR         op_DATA
00001F76                          1514          
00001F76                          1515  MOVEQ_END 
00001F76  4CDF 7FBF               1516          MOVEM.L     (SP)+, D0-D5/D7/A0-A6
00001F7A  4E75                    1517          RTS
00001F7C                          1518  
00001F7C                          1519  
00001F7C                          1520  
00001F7C                          1521  
00001F7C                          1522  
00001F7C                          1523  
00001F7C                          1524  
00001F7C                          1525  
00001F7C                          1526  
00001F7C                          1527  
00001F7C                          1528  
00001F7C                          1529  
00001F7C                          1530  
00001F7C                          1531  -------------------- end include --------------------
00001F7C                          1532              INCLUDE 'opcode_subroutine.x68'
00001F7C                          1533  opcode_subroutine:
00001F7C  48E7 FFFE               1534          MOVEM.L     D0-D7/A0-A6, -(SP)
00001F80  3200                    1535          MOVE.W      D0,D1
00001F82                          1536          *MOVE.W      #mask_opcode,D2      *move the mask into D2
00001F82  C27C C000               1537          AND.W       #mask_MOVE,D1               *mask to only see the first 2 bits
00001F86                          1538          
00001F86                          1539          *test the move operations (00SS)
00001F86  B27C 0000               1540          CMP.W       #match_MOVE,D1
00001F8A  6600 000C               1541          BNE         skip1
00001F8E  4EB9 0000204C           1542          JSR         move_decode
00001F94  6000 00B0               1543          BRA         end_op
00001F98                          1544          
00001F98                          1545          *test the 0100 clump and jump to subroutine (nop,lea,not,jsr,rts,movem)
00001F98  3200                    1546  skip1   MOVE.W      D0,D1
00001F9A  C27C F000               1547          AND.W       #mask_opcode,D1               *mask the full machine code by the opcode mask
00001F9E  B27C 4000               1548          CMP.W       #match_G0100,D1
00001FA2  6600 000C               1549          BNE         skip2       
00001FA6  4EB9 00002074           1550          JSR         group1_decode   *opcode matches group starting with 0100
00001FAC  6000 0098               1551          BRA         end_op
00001FB0                          1552  
00001FB0                          1553          *test the 1101 clump and jump to subroutine (add,adda)
00001FB0  B27C D000               1554  skip2   CMP.W       #match_G1101,D1
00001FB4  6600 000C               1555          BNE         skip3
00001FB8  4EB9 000020F8           1556          JSR         group2_decode
00001FBE  6000 0086               1557          BRA         end_op
00001FC2                          1558          
00001FC2                          1559          *test the 0110 clump and jump to subroutine (bra,bgt,beq)
00001FC2  B27C 6000               1560  skip3   CMP.W       #match_G0110,D1
00001FC6  6600 000C               1561          BNE         skip4
00001FCA  4EB9 00002122           1562          JSR         group3_decode
00001FD0  6000 0074               1563          BRA         end_op
00001FD4                          1564          
00001FD4                          1565          *test the 1110 clump and jump to subroutine (lsl/lsr,asl/asr,rol/ror)
00001FD4  B27C E000               1566  skip4   CMP.W       #match_G1110,D1
00001FD8  6600 000C               1567          BNE         skip5
00001FDC  4EB9 0000216A           1568          JSR         group4_decode
00001FE2  6000 0062               1569          BRA         end_op
00001FE6                          1570  
00001FE6                          1571          *test addq
00001FE6  B27C 5000               1572  skip5   CMP.W       #match_ADDQ,D1
00001FEA  6600 000C               1573          BNE         skip6
00001FEE  4EB9 00002228           1574          JSR         op_ADDQ
00001FF4  6000 0050               1575          BRA         end_op
00001FF8                          1576          
00001FF8                          1577          *test sub
00001FF8  B27C 9000               1578  skip6   CMP.W       #match_SUB,D1
00001FFC  6600 000C               1579          BNE         skip7
00002000  4EB9 00002236           1580          JSR         op_SUB
00002006  6000 003E               1581          BRA         end_op
0000200A                          1582          
0000200A                          1583          *test and
0000200A  B27C C000               1584  skip7   CMP.W       #match_AND,D1
0000200E  6600 000C               1585          BNE         skip8
00002012  4EB9 00002244           1586          JSR         op_AND
00002018  6000 002C               1587          BRA         end_op
0000201C                          1588          
0000201C                          1589          *test or
0000201C  B27C 8000               1590  skip8   CMP.W       #match_OR,D1
00002020  6600 000C               1591          BNE         skip9
00002024  4EB9 00002252           1592          JSR         op_OR
0000202A  6000 001A               1593          BRA         end_op
0000202E                          1594          
0000202E  B27C 7000               1595  skip9   CMP.W       #match_MOVEQ,D1
00002032  6600 000C               1596          BNE         data
00002036  4EB9 00002260           1597          JSR         op_MOVEQ
0000203C  6000 0008               1598          BRA         end_op
00002040                          1599          
00002040  4EB9 0000226E           1600  data    JSR         op_DATA
00002046                          1601          
00002046  4CDF 7FFF               1602  end_op  MOVEM.L     (SP)+, D0-D7/A0-A6
0000204A  4E75                    1603          RTS
0000204C                          1604          
0000204C                          1605  move_decode:
0000204C  48E7 FFFE               1606          MOVEM.L     D0-D7/A0-A6, -(SP)
00002050  3200                    1607          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002052  C27C 01C0               1608          AND.W       #mask_MOVE_A,D1  *get only the differentiating bits of move/movea
00002056                          1609          
00002056  B27C 0040               1610          CMP.W       #match_MOVEA,D1
0000205A  6700 000C               1611          BEQ         op_MOVEA
0000205E                          1612          
0000205E  6000 000E               1613          BRA         op_MOVE
00002062                          1614          
00002062  4CDF 7FFF               1615  end_MV  MOVEM.L     (SP)+, D0-D7/A0-A6
00002066  4E75                    1616          RTS
00002068                          1617          
00002068                          1618  op_MOVEA:
00002068  4EB8 149A               1619          JSR         movea_size  *find the size of the operation
0000206C  60F4                    1620          BRA         end_MV
0000206E                          1621  
0000206E                          1622  op_MOVE:
0000206E  4EB8 14E4               1623          JSR         move_size
00002072  60EE                    1624          BRA         end_MV
00002074                          1625  
00002074                          1626  group1_decode:
00002074  48E7 FFFE               1627          MOVEM.L     D0-D7/A0-A6, -(SP)
00002078  3200                    1628          MOVE.W      D0,D1           *put the full opcode back into D1
0000207A                          1629          
0000207A  B27C 4E71               1630          CMP.W       #match_NOP,D1   *test the full opcode against NOP
0000207E  6700 004E               1631          BEQ         op_NOP
00002082                          1632          
00002082  B27C 4E75               1633          CMP.W       #match_RTS,D1   *test the full opcode against RTS
00002086  6700 004C               1634          BEQ         op_RTS
0000208A                          1635          
0000208A  C27C F1C0               1636          AND.W       #mask_LEA,D1    *test the masked opcode against LEA
0000208E  B27C 41C0               1637          CMP.W       #match_LEA,D1   *look for 0100 xxx1 11xx
00002092  6700 0046               1638          BEQ         op_LEA
00002096                          1639          
00002096  3200                    1640          MOVE.W      D0,D1           *refresh D1 back into the full opcode
00002098  C27C FF80               1641          AND.W       #mask_MOVEM,D1    *test the masked opcode against movem
0000209C  B27C 4880               1642          CMP.W       #match_MOVEM_RM,D1   *look for 0100 1000 1000
000020A0  6700 003E               1643          BEQ         op_MOVEM_RM
000020A4  B27C 4C80               1644          CMP.W       #match_MOVEM_MR,D1   *look for 0100 1100 1000
000020A8  6700 003C               1645          BEQ         op_MOVEM_MR
000020AC                          1646          
000020AC  3200                    1647          MOVE.W      D0,D1           *refresh D1 back into the full opcode
000020AE  C27C FFC0               1648          AND.W       #mask_JSR,D1    *test the masked opcode against JSR
000020B2  B27C 4E80               1649          CMP.W       #match_JSR,D1   *look for 0100 1110 10xx
000020B6  6700 0034               1650          BEQ         op_JSR
000020BA                          1651          
000020BA  3200                    1652          MOVE.W      D0,D1           *refresh D1 back into the full opcode
000020BC  C27C FF00               1653          AND.W       #mask_NOT,D1    *test the masked opcode against NOT
000020C0  B27C 4600               1654          CMP.W       #match_NOT,D1   *look for 0100 0110
000020C4  6700 002C               1655          BEQ         op_NOT
000020C8                          1656          
000020C8  4CDF 7FFF               1657  end_G1  MOVEM.L     (SP)+, D0-D7/A0-A6
000020CC  4E75                    1658          RTS
000020CE                          1659          
000020CE                          1660  op_NOP:
000020CE  4EB8 1614               1661          JSR         nop_size
000020D2  60F4                    1662          BRA         end_G1
000020D4                          1663  
000020D4                          1664  op_RTS:
000020D4  4EB8 162C               1665          JSR         rts_size
000020D8  60EE                    1666          BRA         end_G1
000020DA                          1667  
000020DA                          1668  op_LEA:
000020DA  4EB8 1644               1669          JSR         lea_size
000020DE  60E8                    1670          BRA         end_G1
000020E0                          1671          
000020E0                          1672  op_MOVEM_RM:
000020E0  4EB8 156C               1673          JSR         movem_rm_size
000020E4  60E2                    1674          BRA         end_G1
000020E6                          1675          
000020E6                          1676  op_MOVEM_MR:
000020E6  4EB8 15CA               1677          JSR         movem_mr_size
000020EA  60DC                    1678          BRA         end_G1
000020EC                          1679          
000020EC                          1680  op_JSR:
000020EC  4EB8 1666               1681          JSR         jsr_size
000020F0  60D6                    1682          BRA         end_G1
000020F2                          1683  
000020F2                          1684  op_NOT:
000020F2  4EB8 1688               1685          JSR         not_size
000020F6  60D0                    1686          BRA         end_G1
000020F8                          1687  
000020F8                          1688  group2_decode:
000020F8  48E7 FFFE               1689          MOVEM.L     D0-D7/A0-A6, -(SP)
000020FC  3200                    1690          MOVE.W      D0,D1       *refresh the entire opcode into D1
000020FE                          1691          
000020FE  C27C F0C0               1692          AND.W       #mask_ADDA,D1   *test the masked opcode against the 
00002102  B27C D0C0               1693          CMP.W       #match_ADDA,D1  *difference between add/adda
00002106  6700 000C               1694          BEQ         op_ADDA         
0000210A                          1695          
0000210A  6000 0010               1696          BRA         op_ADD          *if its not adda, it is add
0000210E                          1697          
0000210E  4CDF 7FFF               1698  end_G2  MOVEM.L     (SP)+, D0-D7/A0-A6
00002112  4E75                    1699          RTS
00002114                          1700  
00002114                          1701  op_ADDA:
00002114  4EB8 16EC               1702          JSR         adda_size
00002118  3200                    1703          MOVE.W      D0,D1
0000211A                          1704          *JSR         ADDA_sub
0000211A                          1705          *JSR         print_ea
0000211A  60F2                    1706          BRA         end_G2
0000211C                          1707  
0000211C                          1708  op_ADD:
0000211C  4EB8 174A               1709          JSR         add_size
00002120  60EC                    1710          BRA         end_G2
00002122                          1711  
00002122                          1712  group3_decode:
00002122  48E7 FFFE               1713          MOVEM.L     D0-D7/A0-A6, -(SP)
00002126  3200                    1714          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002128  C27C FF00               1715          AND.W       #mask_BCC,D1
0000212C                          1716          
0000212C  B27C 6E00               1717          CMP.W       #match_BGT,D1   *test the first 8 bits against the BGT cond
00002130  6700 0020               1718          BEQ         op_BGT
00002134                          1719          
00002134  B27C 6700               1720          CMP.W       #match_BEQ,D1   *test the first 8 bits against the BEQ cond
00002138  6700 001E               1721          BEQ         op_BEQ
0000213C                          1722          
0000213C  B27C 6F00               1723          CMP.W       #match_BLE,D1
00002140  6700 001C               1724          BEQ         op_BLE
00002144                          1725          
00002144  B27C 6000               1726          CMP.W       #match_BRA,D1   *test the first 8 bits against the BRA cond
00002148  6700 001A               1727          BEQ         op_BRA
0000214C                          1728          
0000214C                          1729          
0000214C                          1730          
0000214C  4CDF 7FFF               1731  end_G3  MOVEM.L     (SP)+, D0-D7/A0-A6
00002150  4E75                    1732          RTS
00002152                          1733          
00002152                          1734  op_BGT:
00002152  4EB8 180C               1735          JSR         bgt_size
00002156  60F4                    1736          BRA         end_G3
00002158                          1737  
00002158                          1738  op_BEQ:
00002158  4EB8 1882               1739          JSR         beq_size
0000215C  60EE                    1740          BRA         end_G3
0000215E                          1741          
0000215E                          1742  op_BLE:
0000215E  4EB8 18F8               1743          JSR         ble_size
00002162  60E8                    1744          BRA         end_G3
00002164                          1745  
00002164                          1746  op_BRA:
00002164  4EB8 196E               1747          JSR         bra_size
00002168  60E2                    1748          BRA         end_G3
0000216A                          1749  
0000216A                          1750  group4_decode:
0000216A  48E7 FFFE               1751          MOVEM.L     D0-D7/A0-A6, -(SP)
0000216E  3200                    1752          MOVE.W      D0,D1       *refresh the entire opcode into D1
00002170  C27C FFC0               1753          AND.W       #mask_SHFT_M,D1   *look at the first 10 bits for memory shift
00002174                          1754          
00002174                          1755          *test memory shift left
00002174  B27C E3C0               1756          CMP.W       #match_LSL_M,D1  
00002178  6700 0066               1757          BEQ         op_LSL_M      
0000217C                          1758          
0000217C                          1759          *test memory shift right
0000217C  B27C E2C0               1760          CMP.W       #match_LSR_M,D1  
00002180  6700 0064               1761          BEQ         op_LSR_M    
00002184                          1762          
00002184                          1763          *test memory shift left
00002184  B27C E1C0               1764          CMP.W       #match_ASL_M,D1  
00002188  6700 0062               1765          BEQ         op_ASL_M      
0000218C                          1766          
0000218C                          1767          *test memory shift right
0000218C  B27C E0C0               1768          CMP.W       #match_ASR_M,D1  
00002190  6700 0060               1769          BEQ         op_ASR_M  
00002194                          1770          
00002194                          1771          *test memory rotate left
00002194  B27C E7C0               1772          CMP.W       #match_ROL_M,D1  
00002198  6700 005E               1773          BEQ         op_ROL_M      
0000219C                          1774  
0000219C                          1775          *test memory rotate right
0000219C  B27C E6C0               1776          CMP.W       #match_ROR_M,D1  
000021A0  6700 005C               1777          BEQ         op_ROR_M  
000021A4                          1778          
000021A4                          1779          *look at select bits for the register shifts
000021A4  3200                    1780          MOVE.W      D0,D1       *refresh the entire opcode into D1
000021A6  C27C F118               1781          AND.W       #mask_SHFT_R,D1
000021AA                          1782          
000021AA  B27C E108               1783          CMP.W       #match_LSL_R,D1
000021AE  6700 0054               1784          BEQ         op_LSL_R
000021B2                          1785          
000021B2  B27C E008               1786          CMP.W       #match_LSR_R,D1
000021B6  6700 0052               1787          BEQ         op_LSR_R
000021BA                          1788          
000021BA  B27C E100               1789          CMP.W       #match_ASL_R,D1
000021BE  6700 0050               1790          BEQ         op_ASL_R
000021C2                          1791          
000021C2  B27C E000               1792          CMP.W       #match_ASR_R,D1
000021C6  6700 004E               1793          BEQ         op_ASR_R
000021CA                          1794          
000021CA  B27C E118               1795          CMP.W       #match_ROL_R,D1
000021CE  6700 004C               1796          BEQ         op_ROL_R
000021D2                          1797          
000021D2  B27C E018               1798          CMP.W       #match_ROR_R,D1
000021D6  6700 004A               1799          BEQ         op_ROR_R
000021DA                          1800          
000021DA  4CDF 7FFF               1801  end_G4  MOVEM.L     (SP)+, D0-D7/A0-A6
000021DE  4E75                    1802          RTS
000021E0                          1803          
000021E0                          1804  op_LSL_M:
000021E0  4EB8 1A6A               1805          JSR     lsl_m_size
000021E4  60F4                    1806          BRA     end_G4
000021E6                          1807          
000021E6                          1808  op_LSR_M:
000021E6  4EB8 1AEC               1809          JSR     lsr_m_size
000021EA  60EE                    1810          BRA     end_G4
000021EC                          1811          
000021EC                          1812  op_ASL_M:
000021EC  4EB8 1B8C               1813          JSR     asl_m_size
000021F0  60E8                    1814          BRA     end_G4
000021F2                          1815          
000021F2                          1816  op_ASR_M:
000021F2  4EB8 1C36               1817          JSR     asr_m_size
000021F6  60E2                    1818          BRA     end_G4
000021F8                          1819  
000021F8                          1820  op_ROL_M:
000021F8  4EB8 1CC2               1821          JSR     rol_m_size
000021FC  60DC                    1822          BRA     end_G4
000021FE                          1823  
000021FE                          1824  op_ROR_M:
000021FE  4EB8 1D44               1825          JSR     ror_m_size
00002202  60D6                    1826          BRA     end_G4
00002204                          1827          
00002204                          1828  op_LSL_R:
00002204  4EB8 1A06               1829          JSR     lsl_r_size
00002208  60D0                    1830          BRA     end_G4
0000220A                          1831  
0000220A                          1832  op_LSR_R:
0000220A  4EB8 1A88               1833          JSR     lsr_r_size
0000220E  60CA                    1834          BRA     end_G4
00002210                          1835  
00002210                          1836  op_ASL_R:
00002210  4EB8 1B0A               1837          JSR     asl_r_size
00002214  60C4                    1838          BRA     end_G4
00002216                          1839  
00002216                          1840  op_ASR_R:
00002216  4EB8 1BB4               1841          JSR     asr_r_size
0000221A  60BE                    1842          BRA     end_G4
0000221C                          1843  
0000221C                          1844  op_ROL_R:
0000221C  4EB8 1C5E               1845          JSR     rol_r_size
00002220  60B8                    1846          BRA     end_G4
00002222                          1847  
00002222                          1848  op_ROR_R:
00002222  4EB8 1CE0               1849          JSR     ror_r_size
00002226  60B2                    1850          BRA     end_G4
00002228                          1851  
00002228                          1852  op_ADDQ:
00002228  48E7 FFFE               1853          MOVEM.L     D0-D7/A0-A6, -(SP)
0000222C                          1854          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000222C  4EB8 1D62               1855          JSR         addq_size
00002230                          1856          
00002230  4CDF 7FFF               1857  end_AQ  MOVEM.L     (SP)+, D0-D7/A0-A6
00002234  4E75                    1858          RTS
00002236                          1859  
00002236                          1860          
00002236                          1861  op_SUB:
00002236  48E7 FFFE               1862          MOVEM.L     D0-D7/A0-A6, -(SP)
0000223A                          1863          *MOVE.W      D0,D1       *refresh the entire opcode into D1
0000223A  4EB8 1DE4               1864          JSR         sub_size
0000223E                          1865          
0000223E  4CDF 7FFF               1866  end_SB  MOVEM.L     (SP)+, D0-D7/A0-A6
00002242  4E75                    1867          RTS
00002244                          1868        
00002244                          1869  
00002244                          1870  op_AND:
00002244  48E7 FFFE               1871          MOVEM.L     D0-D7/A0-A6, -(SP)
00002248                          1872          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002248  4EB8 1E66               1873          JSR         and_size
0000224C                          1874          
0000224C  4CDF 7FFF               1875  end_AN  MOVEM.L     (SP)+, D0-D7/A0-A6
00002250  4E75                    1876          RTS
00002252                          1877          
00002252                          1878  op_OR:
00002252  48E7 FFFE               1879          MOVEM.L     D0-D7/A0-A6, -(SP)
00002256                          1880          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002256  4EB8 1EE8               1881          JSR         or_size
0000225A                          1882          
0000225A  4CDF 7FFF               1883  end_OR  MOVEM.L     (SP)+, D0-D7/A0-A6
0000225E  4E75                    1884          RTS
00002260                          1885          
00002260                          1886  op_MOVEQ:
00002260  48E7 FFFE               1887          MOVEM.L     D0-D7/A0-A6, -(SP)
00002264                          1888          *MOVE.W      D0,D1       *refresh the entire opcode into D1
00002264  4EB8 1F4C               1889          JSR         moveq_size
00002268                          1890          
00002268                          1891  end_MOVEQ  
00002268  4CDF 7FFF               1892          MOVEM.L     (SP)+, D0-D7/A0-A6
0000226C  4E75                    1893          RTS
0000226E                          1894  
0000226E                          1895  op_DATA:
0000226E  48E7 FFFE               1896          MOVEM.L     D0-D7/A0-A6, -(SP)
00002272  43F9 0000661B           1897          LEA         opcode_DATA,A1  *move data string into 
00002278  3200                    1898          MOVE.W      D0,D1           *move the full data into D1 for printing
0000227A  4EB8 1358               1899          JSR         print_data
0000227E                          1900          
0000227E  4CDF 7FFF               1901  end_DATA MOVEM.L     (SP)+, D0-D7/A0-A6
00002282  4E75                    1902          RTS
00002284                          1903  
00002284                          1904  
00002284                          1905  
00002284                          1906  
00002284                          1907  
00002284                          1908  
00002284                          1909  
00002284                          1910  
00002284                          1911  
00002284                          1912  
00002284                          1913  -------------------- end include --------------------
00002284                          1914              INCLUDE 'ADD Subroutine.x68'
00002284  48E7 7D3E               1915  ADD_ADD                                MOVEM.L            D1-D5/D7/A2-A6, -(SP)                     ;preserve the registers, 
00002288                          1916  ;-----------------------------ea,Dn-----------------------------------------------------------------------------------------------------
00002288  C2BC 000001C0           1917                                         AND.L              #mask_opmode,D1                              ;load mask to determine the operand order
0000228E                          1918                                  
0000228E  B2BC 00000000           1919  ADD_ea_Dn_match                        CMP.L              #match_ADD_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00002294  6700 004C               1920                                         BEQ                ADD_ea_Dn                                 ;if equal go figure out data register
00002298  6600 0002               1921                                         BNE                ADD_ea_Dn_match_w                         ;if not check word size for same order
0000229C                          1922  
0000229C  B2BC 00000040           1923  ADD_ea_Dn_match_w                      CMP.L              #match_ADD_w_Dn_ea,D1                 ;check to see if it's Dn,ea
000022A2  6700 003E               1924                                         BEQ                ADD_ea_Dn                                 ;if equal go figure out data register
000022A6  6600 0002               1925                                         BNE                ADD_ea_Dn_match_l                         ;if not check long size for same order
000022AA                          1926  
000022AA  B2BC 00000080           1927  ADD_ea_Dn_match_l                      CMP.L              #match_ADD_l_Dn_ea,D1                 ;check to see if it's Dn,ea
000022B0  6700 050A               1928                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out data register
000022B4  6600 0002               1929                                         BNE                ADD_Dn_ea_match                           ;if not check other order
000022B8                          1930  
000022B8  B2BC 00000100           1931  ADD_Dn_ea_match                        CMP.L              #match_ADD_b_ea_Dn,D1                 ;check to see if it's ea,Dn
000022BE  6700 04FC               1932                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000022C2  6600 0002               1933                                         BNE                ADD_Dn_ea_match_w                         ;if not go check word size for same order
000022C6                          1934  
000022C6  B2BC 00000140           1935  ADD_Dn_ea_match_w                      CMP.L              #match_ADD_w_ea_Dn,D1                 ;check to see if it's ea,Dn
000022CC  6700 04EE               1936                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000022D0  6600 0002               1937                                         BNE                ADD_Dn_ea_match_l                         ;if not go check word size for same order
000022D4                          1938  
000022D4  B2BC 00000180           1939  ADD_Dn_ea_match_l                      CMP.L              #match_ADD_l_ea_Dn,D1                 ;check to see if it's ea,Dn
000022DA  6700 04E0               1940                                         BEQ                ADD_Dn_ea                                 ;if equal go figure out ea mode
000022DE  6600 08CE               1941                                         BNE                ADD_ERROR                                 ;if not go to error message
000022E2                          1942  ;--------------------------------------------------------------------------------------------------------------------------
000022E2                          1943  ;-------------------------------------------------------------------------------------------------------------------------
000022E2  4241                    1944  ADD_ea_Dn                            CLR               D1                                            ;clear D1 to load new mask                                
000022E4  C2BC 00000038           1945                                   AND.L             #mask_ADD_ea_mode,D1                          ;move the mask to D1
000022EA                          1946  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
000022EA  B2BC 00000000           1947  ADD_ea_Dn_data_reg_dir           CMP.L             #match_ADD_Dn,D1                              ;check to see if mode is data reg direct
000022F0  6600 0006               1948                                   BNE               ADD_ea_Dn_add_reg_indir                             ;if not, go check add reg dir
000022F4  6700 0060               1949                                   BEQ               ADD_ea_Dn_Dn_reg                                  ;if equal go figure out the register
000022F8                          1950  
000022F8  B2BC 00000010           1951  ADD_ea_Dn_add_reg_indir          CMP.L             #match_ADD_An_indir,D1                        ;check to see if mode is add reg indir
000022FE  6600 0006               1952                                   BNE               ADD_ea_Dn_add_reg_indir_predec                    ;if not, go check add reg indir predec 
00002302  6700 0122               1953                                   BEQ               ADD_ea_Dn_An_indir_reg                            ;if equal go figure out the register           
00002306                          1954             
00002306  B2BC 00000020           1955  ADD_ea_Dn_add_reg_indir_predec   CMP.L             #match_ADD_An_indir_predec,D1                  ;check to see if mode is add reg indor w/ postinc
0000230C  6600 0006               1956                                   BNE               ADD_ea_Dn_add_reg_indir_postinc                    ;if not go check add reg indir/predec
00002310  6700 02B4               1957                                   BEQ               ADD_ea_Dn_An_indir_predec                          ;if equal go figure out the register
00002314                          1958                        
00002314  B2BC 00000018           1959  ADD_ea_Dn_add_reg_indir_postinc  CMP.L             #match_ADD_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
0000231A  6600 0006               1960                                   BNE               ADD_ea_Dn_abs_add_word                                  ;if not go check abs add word
0000231E  6700 01D6               1961                                   BEQ               ADD_ea_Dn_An_indir_postinc_reg                          ;if equal go figure out the register
00002322                          1962  
00002322  C4BC 0000003F           1963  ADD_ea_Dn_abs_add_word           AND.L             #mask_ADD_abs_add,D2                        ;load mask to determine if abs add word or long
00002328                          1964                                   
00002328  B4BC 00000038           1965                                   CMP.L             #match_ADD_abs_add_word,D2                  ;check if abs add word
0000232E  2A18                    1966                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00002330  6600 0006               1967                                   BNE               ADD_ea_Dn_abs_add_long                                  ;if not go check abs add long
00002334  6700 0360               1968                                   BEQ               ADD_ea_Dn_abs_add_word_out                              ;if equal go to output
00002338                          1969    
00002338  B4BC 00000039           1970  ADD_ea_Dn_abs_add_long           CMP.L             #match_ADD_abs_add_long,D2                  ;check to see if abs add long
0000233E  6700 0364               1971                                   BEQ               ADD_ea_Dn_abs_add_long_out                              ;if equal go to output
00002342                          1972                                   
00002342  B2BC 0000003C           1973  ADD_ea_Dn_immediate_add          CMP.L             #match_imm_add,D1                             ;check if immediate address
00002348  6700 036A               1974                                   BEQ               ADD_ea_Dn_immediate_add_out                             ;if equal go to immediate add ADD routine
0000234C  6600 0860               1975                                   BNE               ADD_ERROR                                         ;if not equal go to error mesage ADD routine
00002350                          1976  
00002350                          1977  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00002350                          1978                                   
00002350  C4BC 0000003F           1979                                   AND.L              #mask_ADD_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00002356                          1980  ;-----------------------------------Data Register Direct--------------------------------
00002356  B4BC 00000000           1981  ADD_ea_Dn_Dn_reg                 CMP.L              #match_ADD_D0,D2                       ;check to see in the register is 0
0000235C  6600 0006               1982                                   BNE                ADD_ea_Dn_rD1                                     ;if not go check register 1
00002360  6700 0064               1983                                   BEQ                ADD_ea_Dn_D0_out                              ;if equal go to output ADDroutine
00002364                          1984  
00002364  B4BC 00000001           1985  ADD_ea_Dn_rD1                    CMP.L              #match_ADD_D1,D2                       ;check to see in the register is 1
0000236A  6600 0006               1986                                   BNE                ADD_ea_Dn_rD2                                     ;if not go check register 2
0000236E  6700 0062               1987                                   BEQ                ADD_ea_Dn_D1_out                              ;if equal go to output ADDroutine
00002372                          1988  
00002372  B4BC 00000002           1989  ADD_ea_Dn_rD2                    CMP.L              #match_ADD_D2,D2                       ;check to see in the register is 2
00002378  6600 0006               1990                                   BNE                ADD_ea_Dn_rD3                                     ;if not go check register 3
0000237C  6700 0060               1991                                   BEQ                ADD_ea_Dn_D2_out                              ;if equal go to output ADDroutine
00002380                          1992  
00002380  B4BC 00000003           1993  ADD_ea_Dn_rD3                    CMP.L              #match_ADD_D3,D2                       ;check to see in the register is 3
00002386  6600 0006               1994                                   BNE                ADD_ea_Dn_rD4                                     ;if not go check register 4
0000238A  6700 005E               1995                                   BEQ                ADD_ea_Dn_D3_out                              ;if equal go to output ADDroutine
0000238E                          1996  
0000238E  B4BC 00000004           1997  ADD_ea_Dn_rD4                    CMP.L              #match_ADD_D4,D2                       ;check to see in the register is 4
00002394  6600 0006               1998                                   BNE                ADD_ea_Dn_rD5                                     ;if not go check register 5
00002398  6700 005C               1999                                   BEQ                ADD_ea_Dn_D4_out                              ;if equal go to output ADDroutine
0000239C                          2000  
0000239C  B4BC 00000005           2001  ADD_ea_Dn_rD5                    CMP.L              #match_ADD_D5,D2                       ;check to see in the register is 5
000023A2  6600 0006               2002                                   BNE                ADD_ea_Dn_rD6                                     ;if not go check register 6
000023A6  6700 005A               2003                                   BEQ                ADD_ea_Dn_D5_out                              ;if equal go to output ADDroutine
000023AA                          2004  
000023AA  B4BC 00000006           2005  ADD_ea_Dn_rD6                    CMP.L              #match_ADD_D6,D2                       ;check to see in the register is 6
000023B0  6600 0006               2006                                   BNE                ADD_ea_Dn_rD7                                     ;if not go check register 7
000023B4  6700 0058               2007                                   BEQ                ADD_ea_Dn_D6_out                              ;if equal go to output ADDroutine
000023B8                          2008  
000023B8  B4BC 00000007           2009  ADD_ea_Dn_rD7                    CMP.L              #match_ADD_D7,D2                       ;check to see in the register is 7
000023BE  6700 005A               2010                                   BEQ                ADD_ea_Dn_D7_out                              ;if equal go to output ADDroutine
000023C2  6600 07EA               2011                                   BNE                ADD_ERROR                               ;if not equal, got to error message
000023C6                          2012  ;--------------------Data Register Direct Output-----------------------
000023C6  227C 0000691B           2013  ADD_ea_Dn_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
000023CC  4EB9 000026E4           2014                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000023D2                          2015  
000023D2  227C 0000691E           2016  ADD_ea_Dn_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
000023D8  4EB9 000026E4           2017                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000023DE                          2018  
000023DE                          2019  
000023DE  227C 00006921           2020  ADD_ea_Dn_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
000023E4  4EB9 000026E4           2021                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000023EA                          2022  
000023EA  227C 00006924           2023  ADD_ea_Dn_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
000023F0  4EB9 000026E4           2024                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000023F6                          2025  
000023F6                          2026  
000023F6  227C 00006927           2027  ADD_ea_Dn_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
000023FC  4EB9 000026E4           2028                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002402                          2029  
00002402                          2030  
00002402  227C 0000692A           2031  ADD_ea_Dn_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00002408  4EB9 000026E4           2032                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000240E                          2033  
0000240E                          2034  
0000240E  227C 0000692D           2035  ADD_ea_Dn_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00002414  4EB9 000026E4           2036                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000241A                          2037  
0000241A                          2038  
0000241A  227C 00006930           2039  ADD_ea_Dn_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00002420  4EB9 000026E4           2040                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002426                          2041  
00002426                          2042  ;------------------Address Register Indirect-----------------------
00002426  B4BC 00000010           2043  ADD_ea_Dn_An_indir_reg           CMP.L          #match_ADD_An_indir_r0,D2              ;check reg is equal to 0
0000242C  6600 0006               2044                                   BNE             ADD_ea_Dn_An_indir_reg1                           ;if not try reg 1
00002430  6700 0064               2045                                   BEQ             ADD_ea_Dn_An_indir_reg0_out                       ;if equal go to output ADDroutine
00002434                          2046  
00002434  B4BC 00000011           2047  ADD_ea_Dn_An_indir_reg1          CMP.L           #match_ADD_An_indir_r1,D2              ;check reg is equal to 1
0000243A  6600 0006               2048                                   BNE             ADD_ea_Dn_An_indir_reg2                           ;if not try reg 2
0000243E  6700 0062               2049                                   BEQ             ADD_ea_Dn_An_indir_reg1_out                       ;if equal go to output ADDroutine
00002442                          2050  
00002442  B4BC 00000012           2051  ADD_ea_Dn_An_indir_reg2          CMP.L           #match_ADD_An_indir_r2,D2              ;check reg is equal to 2
00002448  6600 0006               2052                                   BNE             ADD_ea_Dn_An_indir_reg3                           ;if not try reg 3
0000244C  6700 0060               2053                                   BEQ             ADD_ea_Dn_An_indir_reg2_out                       ;if equal go to output ADDroutine
00002450                          2054  
00002450  B4BC 00000013           2055  ADD_ea_Dn_An_indir_reg3          CMP.L           #match_ADD_An_indir_r3,D2              ;check reg is equal to 3
00002456  6600 0006               2056                                   BNE             ADD_ea_Dn_An_indir_reg4                           ;if not try reg 4
0000245A  6700 005E               2057                                   BEQ             ADD_ea_Dn_An_indir_reg3_out                       ;if equal go to output ADDroutine
0000245E                          2058      
0000245E  B4BC 00000014           2059  ADD_ea_Dn_An_indir_reg4          CMP.L           #match_ADD_An_indir_r4,D2              ;check reg is equal to 4
00002464  6600 0006               2060                                   BNE             ADD_ea_Dn_An_indir_reg5                           ;if not try reg 5
00002468  6700 005C               2061                                   BEQ             ADD_ea_Dn_An_indir_reg4_out                       ;if equal go to output ADDroutine
0000246C                          2062          
0000246C  B4BC 00000015           2063  ADD_ea_Dn_An_indir_reg5          CMP.L           #match_ADD_An_indir_r5,D2              ;check reg is equal to 5
00002472  6600 0006               2064                                   BNE             ADD_ea_Dn_An_indir_reg6                           ;if not try reg 6
00002476  6700 005A               2065                                   BEQ             ADD_ea_Dn_An_indir_reg5_out                       ;if equal go to output ADDroutine
0000247A                          2066  
0000247A  B4BC 00000016           2067  ADD_ea_Dn_An_indir_reg6          CMP.L           #match_ADD_An_indir_r6,D2              ;check reg is equal to 6
00002480  6600 0006               2068                                   BNE             ADD_ea_Dn_An_indir_reg7                           ;if not try reg 7
00002484  6700 0058               2069                                   BEQ             ADD_ea_Dn_An_indir_reg6_out                       ;if equal go to output ADDroutine
00002488                          2070  
00002488  B4BC 00000017           2071  ADD_ea_Dn_An_indir_reg7          CMP.L           #match_ADD_An_indir_r7,D2              ;check reg is equal to 7
0000248E  6700 005A               2072                                   BEQ             ADD_ea_Dn_An_indir_reg7_out                       ;if equal go to output ADDroutine
00002492  6600 071A               2073                                   BNE             ADD_ERROR                                   :if not equal to an addresssing mode, pritn error
00002496                          2074  
00002496                          2075  ;--------------------Address Register Indirect Output-----------------------
00002496  227C 0000695B           2076  ADD_ea_Dn_An_indir_reg0_out             MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
0000249C  4EB9 000026E4           2077                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024A2                          2078  
000024A2  227C 00006960           2079  ADD_ea_Dn_An_indir_reg1_out             MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
000024A8  4EB9 000026E4           2080                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024AE                          2081  
000024AE  227C 00006965           2082  ADD_ea_Dn_An_indir_reg2_out             MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
000024B4  4EB9 000026E4           2083                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024BA                          2084  
000024BA  227C 0000696A           2085  ADD_ea_Dn_An_indir_reg3_out             MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
000024C0  4EB9 000026E4           2086                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024C6                          2087  
000024C6  227C 0000696F           2088  ADD_ea_Dn_An_indir_reg4_out             MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
000024CC  4EB9 000026E4           2089                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024D2                          2090  
000024D2  227C 00006974           2091  ADD_ea_Dn_An_indir_reg5_out             MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
000024D8  4EB9 000026E4           2092                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024DE                          2093  
000024DE  227C 00006979           2094  ADD_ea_Dn_An_indir_reg6_out             MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
000024E4  4EB9 000026E4           2095                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024EA                          2096                                          
000024EA  227C 0000697E           2097  ADD_ea_Dn_An_indir_reg7_out             MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
000024F0  4EB9 000026E4           2098                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000024F6                          2099  
000024F6                          2100  ;------------------Address Register Indirect with Post Increment-----------------------
000024F6  B4BC 00000018           2101  ADD_ea_Dn_An_indir_postinc_reg              CMP.L      #match_ADD_An_indir_postinc_r0,D2        ;check reg is equal to 0
000024FC  6600 0006               2102                                              BNE        ADD_ea_Dn_An_indir_postinc_reg1                      ;if not try reg 1
00002500  6700 0064               2103                                              BEQ        ADD_ea_Dn_An_indir_postin_r0_out               ;if equal go to output ADDroutine
00002504                          2104  
00002504  B4BC 00000019           2105  ADD_ea_Dn_An_indir_postinc_reg1             CMP.L      #match_ADD_An_indir_postinc_r1,D2        ;check reg is equal to 1
0000250A  6600 0006               2106                                              BNE        ADD_ea_Dn_An_indir_postinc_reg2                      ;if not try reg 2
0000250E  6700 0062               2107                                              BEQ        ADD_ea_Dn_An_indir_postin_r1_out               ;if equal go to output ADDroutine
00002512                          2108  
00002512  B4BC 0000001A           2109  ADD_ea_Dn_An_indir_postinc_reg2             CMP.L      #match_ADD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00002518  6600 0006               2110                                              BNE        ADD_ea_Dn_An_indir_postinc_reg3                      ;if not try reg 3
0000251C  6700 0060               2111                                              BEQ        ADD_ea_Dn_An_indir_postin_r2_out               ;if equal go to output ADDroutine
00002520                          2112  
00002520  B4BC 0000001B           2113  ADD_ea_Dn_An_indir_postinc_reg3             CMP.L      #match_ADD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00002526  6600 0006               2114                                              BNE        ADD_ea_Dn_An_indir_postinc_reg4                      ;if not try reg 4
0000252A  6700 005E               2115                                              BEQ        ADD_ea_Dn_An_indir_postin_r3_out               ;if equal go to output ADDroutine
0000252E                          2116   
0000252E  B4BC 0000001C           2117  ADD_ea_Dn_An_indir_postinc_reg4             CMP.L      #match_ADD_An_indir_postinc_r4,D2        ;check reg is equal to 4
00002534  6600 0006               2118                                              BNE        ADD_ea_Dn_An_indir_postinc_reg5                      ;if not try reg 5
00002538  6700 005C               2119                                              BEQ        ADD_ea_Dn_An_indir_postin_r4_out               ;if equal go to output ADDroutine
0000253C                          2120  
0000253C  B4BC 0000001D           2121  ADD_ea_Dn_An_indir_postinc_reg5             CMP.L      #match_ADD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00002542  6600 0006               2122                                              BNE        ADD_ea_Dn_An_indir_postinc_reg6                      ;if not try reg 6
00002546  6700 005A               2123                                              BEQ        ADD_ea_Dn_An_indir_postin_r5_out               ;if equal go to output ADDroutine
0000254A                          2124  
0000254A  B4BC 0000001E           2125  ADD_ea_Dn_An_indir_postinc_reg6             CMP.L      #match_ADD_An_indir_postinc_r6,D2         ;check reg is equal to 6
00002550  6600 0006               2126                                              BNE        ADD_ea_Dn_An_indir_postinc_reg7                        ;if not try reg 7
00002554  6700 0058               2127                                              BEQ        ADD_ea_Dn_An_indir_postin_r6_out                    ;if equal go to output ADDroutine
00002558                          2128  
00002558  B4BC 0000001F           2129  ADD_ea_Dn_An_indir_postinc_reg7             CMP.L      #match_ADD_An_indir_postinc_r7,D2         ;check reg is equal to 7
0000255E  6700 005A               2130                                              BEQ        ADD_ea_Dn_An_indir_postin_r7_out                    ;if equal go to output ADDroutine
00002562  6600 064A               2131                                              BNE        ADD_ERROR                                        :if not equal to an addresssing mode, pritn error
00002566                          2132  
00002566                          2133  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00002566  227C 00006983           2134  ADD_ea_Dn_An_indir_postin_r0_out                MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
0000256C  4EB9 000026E4           2135                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002572                          2136  
00002572  227C 00006989           2137  ADD_ea_Dn_An_indir_postin_r1_out                MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00002578  4EB9 000026E4           2138                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000257E                          2139  
0000257E  227C 0000698F           2140  ADD_ea_Dn_An_indir_postin_r2_out                MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00002584  4EB9 000026E4           2141                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000258A                          2142  
0000258A  227C 00006995           2143  ADD_ea_Dn_An_indir_postin_r3_out                MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00002590  4EB9 000026E4           2144                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002596                          2145  
00002596  227C 0000699B           2146  ADD_ea_Dn_An_indir_postin_r4_out                MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
0000259C  4EB9 000026E4           2147                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025A2                          2148  
000025A2  227C 000069A1           2149  ADD_ea_Dn_An_indir_postin_r5_out                MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
000025A8  4EB9 000026E4           2150                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025AE                          2151  
000025AE  227C 000069A7           2152  ADD_ea_Dn_An_indir_postin_r6_out                MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
000025B4  4EB9 000026E4           2153                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025BA                          2154  
000025BA  227C 000069AD           2155  ADD_ea_Dn_An_indir_postin_r7_out                MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
000025C0  4EB9 000026E4           2156                                                  JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000025C6                          2157  
000025C6                          2158  ;------------------Address Register Indirect with Pre Decrement-----------------------
000025C6  B4BC 00000020           2159  ADD_ea_Dn_An_indir_predec                   CMP.L      #match_ADD_An_indir_predec_reg0,D2       ;check reg is equal to 0
000025CC  6600 0006               2160                                              BNE        ADD_ea_Dn_An_indir_predec_reg1                      ;if not try reg 1
000025D0  6700 0064               2161                                              BEQ        ADD_ea_Dn_An_indir_prede_r0_out               ;if equal go to output ADDroutine
000025D4                          2162  
000025D4  B4BC 00000021           2163  ADD_ea_Dn_An_indir_predec_reg1              CMP.L      #match_ADD_An_indir_predec_reg1,D2       ;check reg is equal to 1
000025DA  6600 0006               2164                                              BNE        ADD_ea_Dn_An_indir_predec_reg2                      ;if not try reg 2
000025DE  6700 0062               2165                                              BEQ        ADD_ea_Dn_An_indir_prede_r1_out               ;if equal go to output ADDroutine
000025E2                          2166  
000025E2  B4BC 00000022           2167  ADD_ea_Dn_An_indir_predec_reg2              CMP.L      #match_ADD_An_indir_predec_reg2,D2       ;check reg is equal to 2
000025E8  6600 0006               2168                                              BNE        ADD_ea_Dn_An_indir_predec_reg3                      ;if not try reg 3
000025EC  6700 0060               2169                                              BEQ        ADD_ea_Dn_An_indir_prede_r2_out               ;if equal go to output ADDroutine
000025F0                          2170  
000025F0  B4BC 00000023           2171  ADD_ea_Dn_An_indir_predec_reg3              CMP.L      #match_ADD_An_indir_predec_reg3,D2       ;check reg is equal to 3
000025F6  6600 0006               2172                                              BNE        ADD_ea_Dn_An_indir_predec_reg4                      ;if not try reg 4
000025FA  6700 005E               2173                                              BEQ        ADD_ea_Dn_An_indir_prede_r3_out               ;if equal go to output ADDroutine
000025FE                          2174  
000025FE  B4BC 00000024           2175  ADD_ea_Dn_An_indir_predec_reg4              CMP.L      #match_ADD_An_indir_predec_reg4,D2       ;check reg is equal to 4
00002604  6600 0006               2176                                              BNE        ADD_ea_Dn_An_indir_predec_reg5                      ;if not try reg 5
00002608  6700 005C               2177                                              BEQ        ADD_ea_Dn_An_indir_prede_r4_out               ;if equal go to output ADDroutine
0000260C                          2178  
0000260C  B4BC 00000025           2179  ADD_ea_Dn_An_indir_predec_reg5              CMP.L      #match_ADD_An_indir_predec_reg5,D2       ;check reg is equal to 5
00002612  6600 0006               2180                                              BNE        ADD_ea_Dn_An_indir_predec_reg6                     ;if not try reg 6
00002616  6700 005A               2181                                              BEQ        ADD_ea_Dn_An_indir_prede_r5_out               ;if equal go to output ADDroutine
0000261A                          2182  
0000261A  B4BC 00000026           2183  ADD_ea_Dn_An_indir_predec_reg6              CMP.L      #match_ADD_An_indir_predec_reg6,D2       ;check reg is equal to 6
00002620  6600 0006               2184                                              BNE        ADD_ea_Dn_An_indir_predec_reg7                     ;if not try reg 7
00002624  6700 0058               2185                                              BEQ        ADD_ea_Dn_An_indir_prede_r6_out               ;if equal go to output ADDroutine
00002628                          2186  
00002628  B4BC 00000027           2187  ADD_ea_Dn_An_indir_predec_reg7              CMP.L      #match_ADD_An_indir_predec_reg7,D2       ;check reg is equal to 7
0000262E  6700 005A               2188                                              BEQ        ADD_ea_Dn_An_indir_prede_r7_out               ;if equal go to output ADDroutine
00002632  6600 057A               2189                                              BNE        ADD_ERROR                                    :if not equal to an addresssing mode, pritn error
00002636                          2190  
00002636                          2191  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00002636  227C 000069B3           2192  ADD_ea_Dn_An_indir_prede_r0_out         MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
0000263C  4EB9 000026E4           2193                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002642                          2194                                              
00002642  227C 000069B9           2195  ADD_ea_Dn_An_indir_prede_r1_out         MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
00002648  4EB9 000026E4           2196                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000264E                          2197  
0000264E  227C 000069BF           2198  ADD_ea_Dn_An_indir_prede_r2_out         MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
00002654  4EB9 000026E4           2199                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000265A                          2200  
0000265A  227C 000069C5           2201  ADD_ea_Dn_An_indir_prede_r3_out         MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
00002660  4EB9 000026E4           2202                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002666                          2203  
00002666  227C 000069CB           2204  ADD_ea_Dn_An_indir_prede_r4_out         MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
0000266C  4EB9 000026E4           2205                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002672                          2206  
00002672  227C 000069D1           2207  ADD_ea_Dn_An_indir_prede_r5_out         MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
00002678  4EB9 000026E4           2208                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000267E                          2209  
0000267E  227C 000069D7           2210  ADD_ea_Dn_An_indir_prede_r6_out         MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
00002684  4EB9 000026E4           2211                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
0000268A                          2212  
0000268A  227C 000069DD           2213  ADD_ea_Dn_An_indir_prede_r7_out         MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00002690  4EB9 000026E4           2214                                          JSR             ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
00002696                          2215          
00002696                          2216  ;------------------Absolute Addressing Output-----------------------
00002696  22FC 000069ED           2217  ADD_ea_Dn_abs_add_word_out               MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000269C  22C5                    2218                                        MOVE.L      D5,(A1)+                           ;load address                  
0000269E  4CDF 7CBE               2219                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000026A2  4E75                    2220                                        RTS                                            :return to ADDroutine
000026A4                          2221                                             
000026A4                          2222  
000026A4  2A18                    2223  ADD_ea_Dn_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000026A6  22FC 000069ED           2224                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000026AC  22C5                    2225                                        MOVE.L      D5,(A1)+                           ;load address                  
000026AE  4CDF 7CBE               2226                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000026B2  4E75                    2227                                        RTS                                            :return to ADDroutine                                            
000026B4                          2228  ;---------------Immediate Addresing---------------------------
000026B4  2A18                    2229  ADD_ea_Dn_immediate_add_out          MOVE.L     (A0)+,D5                             ;capture the immediate address
000026B6  BCBC 000000FC           2230                                       CMP.L       #match_imm_add_word,D6               ;check to see if need to pull word
000026BC  2A18                    2231                                       MOVE.L      (A0)+,D5                            ;pull the word
000026BE  6700 0006               2232                                       BEQ         ADD_ea_Dn_imm_add_w                           ;if equal go pull word    
000026C2  6600 0010               2233                                       BNE         ADD_ea_Dn_imm_add_l                           ;if not equal, go check long
000026C6                          2234                                           
000026C6  22FC 000069ED           2235  ADD_ea_Dn_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
000026CC  32C5                    2236                                        MOVE.W     D5,(A1)+                             ;load the word address                           
000026CE  4EB9 000026E4           2237                                        JSR        ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026D4                          2238                                           
000026D4  2A18                    2239  ADD_ea_Dn_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
000026D6  22FC 000069ED           2240                                        MOVE.L     #ea_$,(A1)+                          ;load the $
000026DC  2245                    2241                                        MOVE.L     D5,A1                               ;move to A1
000026DE  4EB9 000026E4           2242                                        JSR        ADD_determine_second_op                 ;jump to ADDroutine to determine second operand
000026E4                          2243  
000026E4                          2244  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000026E4  4282                    2245  ADD_determine_second_op                         CLR.L       D2                          ;clear D2 
000026E6  C4BC 00000E00           2246                                                  AND.L       #mask_ADD_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
000026EC                          2247                                                  
000026EC  B4BC 00000000           2248  ea_Dn_ADD_reg0                                  CMP.L       #match_ADD_reg0,D2      ;check to see if reg equal 0
000026F2  6600 0006               2249                                                  BNE         ea_Dn_ADD_reg1                  ;if not equal got check reg 1
000026F6  6700 0064               2250                                                  BEQ         ea_Dn_ADD_reg0_out              ;if equal go to output
000026FA                          2251                                                  
000026FA  B4BC 00000200           2252  ea_Dn_ADD_reg1                                  CMP.L       #match_ADD_reg1,D2      ;check to see if reg equal 1
00002700  6600 0006               2253                                                  BNE         ea_Dn_ADD_reg2                  ;if not equal got check reg 2
00002704  6700 0062               2254                                                  BEQ         ea_Dn_ADD_reg1_out              ;if equal go to output
00002708                          2255  
00002708  B4BC 00000400           2256  ea_Dn_ADD_reg2                                  CMP.L       #match_ADD_reg2,D2      ;check to see if reg equal 2
0000270E  6600 0006               2257                                                  BNE         ea_Dn_ADD_reg3                  ;if not equal got check reg 3
00002712  6700 0060               2258                                                  BEQ         ea_Dn_ADD_reg2_out              ;if equal go to output
00002716                          2259  
00002716  B4BC 00000600           2260  ea_Dn_ADD_reg3                                  CMP.L       #match_ADD_reg3,D2      ;check to see if reg equal 3
0000271C  6600 0006               2261                                                  BNE         ea_Dn_ADD_reg4                  ;if not equal got check reg 4
00002720  6700 005E               2262                                                  BEQ         ea_Dn_ADD_reg3_out              ;if equal go to output
00002724                          2263                                                  
00002724  B4BC 00000800           2264  ea_Dn_ADD_reg4                                  CMP.L       #match_ADD_reg4,D2      ;check to see if reg equal 4
0000272A  6600 0006               2265                                                  BNE         ea_Dn_ADD_reg5                  ;if not equal got check reg 5
0000272E  6700 005C               2266                                                  BEQ         ea_Dn_ADD_reg4_out              ;if equal go to output
00002732                          2267  
00002732  B4BC 00000A00           2268  ea_Dn_ADD_reg5                                  CMP.L       #match_ADD_reg5,D2      ;check to see if reg equal 5
00002738  6600 0006               2269                                                  BNE         ea_Dn_ADD_reg6                  ;if not equal got check reg 6
0000273C  6700 005A               2270                                                  BEQ         ea_Dn_ADD_reg5_out              ;if equal go to output
00002740                          2271  
00002740  B4BC 00000C00           2272  ea_Dn_ADD_reg6                                  CMP.L       #match_ADD_reg6,D2      ;check to see if reg equal 6
00002746  6600 0006               2273                                                  BNE         ea_Dn_ADD_reg7                  ;if not equal got check reg 7
0000274A  6700 0058               2274                                                  BEQ         ea_Dn_ADD_reg6_out              ;if equal go to output          
0000274E                          2275  
0000274E  B4BC 00000E00           2276  ea_Dn_ADD_reg7                                  CMP.L       #match_ADD_reg7,D2      ;check to see if reg equal 7
00002754  6700 005A               2277                                                  BEQ         ea_Dn_ADD_reg7_out              ;if equal go to output
00002758  6600 0454               2278                                                  BNE         ADD_ERROR                         ;if not equal to an addresssing mode, pritn error
0000275C                          2279                                  
0000275C                          2280  
0000275C                          2281  ;--------------------Data Output-----------------------
0000275C  227C 0000691B           2282  ea_Dn_ADD_reg0_out                         MOVE.L           #ea_D0,A1                                          ;load string constant into A1
00002762  4CDF 7CBE               2283                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002766  4E75                    2284                                              RTS
00002768                          2285                                              
00002768  227C 0000691E           2286  ea_Dn_ADD_reg1_out                         MOVE.L           #ea_D1,A1                                       ;load string constant into A1
0000276E  4CDF 7CBE               2287                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002772  4E75                    2288                                              RTS
00002774                          2289                                              
00002774  227C 00006921           2290  ea_Dn_ADD_reg2_out                         MOVE.L           #ea_D2,A1                                       ;load string constant into A1
0000277A  4CDF 7CBE               2291                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000277E  4E75                    2292                                              RTS
00002780                          2293                                              
00002780  227C 00006924           2294  ea_Dn_ADD_reg3_out                         MOVE.L           #ea_D3,A1                                           ;load string constant into A1
00002786  4CDF 7CBE               2295                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000278A  4E75                    2296                                              RTS
0000278C                          2297                                              
0000278C  227C 00006927           2298  ea_Dn_ADD_reg4_out                         MOVE.L           #ea_D4,A1                                           ;load string constant into A1
00002792  4CDF 7CBE               2299                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002796  4E75                    2300                                              RTS
00002798                          2301                                              
00002798  227C 0000692A           2302  ea_Dn_ADD_reg5_out                         MOVE.L           #ea_D5,A1                                           ;load string constant into A1
0000279E  4CDF 7CBE               2303                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000027A2  4E75                    2304                                              RTS
000027A4                          2305                                              
000027A4  227C 0000692D           2306  ea_Dn_ADD_reg6_out                         MOVE.L           #ea_D6,A1                                           ;load string constant into A1
000027AA  4CDF 7CBE               2307                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000027AE  4E75                    2308                                              RTS
000027B0                          2309                                              
000027B0  227C 00006930           2310  ea_Dn_ADD_reg7_out                         MOVE.L           #ea_D7,A1                                           ;load string constant into A1
000027B6  4CDF 7CBE               2311                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000027BA  4E75                    2312                                              RTS             
000027BC                          2313                                              
000027BC                          2314                      
000027BC                          2315  
000027BC                          2316  
000027BC                          2317  
000027BC                          2318  
000027BC                          2319  
000027BC                          2320  
000027BC                          2321  
000027BC                          2322  
000027BC                          2323  
000027BC                          2324  
000027BC                          2325  
000027BC                          2326  
000027BC                          2327  
000027BC                          2328  
000027BC                          2329  
000027BC                          2330  
000027BC                          2331  
000027BC                          2332  
000027BC                          2333  
000027BC                          2334  
000027BC                          2335  
000027BC                          2336  
000027BC                          2337  
000027BC                          2338  
000027BC                          2339  
000027BC                          2340  
000027BC                          2341  
000027BC                          2342  
000027BC                          2343  
000027BC                          2344  
000027BC                          2345                          
000027BC                          2346  ;------------------------------------------------------------------------------------------------------------------------------------------
000027BC                          2347  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
000027BC                          2348  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000027BC  4282                    2349  ADD_Dn_ea                                               CLR.L       D2                                ;clear D2 
000027BE  C4BC 00000E00           2350                                                  AND.L       #mask_ADD_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
000027C4                          2351                                                  
000027C4  B4BC 00000000           2352  Dn_ea_ADD_reg0                                  CMP.L       #match_ADD_reg0,D2                  ;check to see if reg equal 0
000027CA  6600 0006               2353                                                  BNE         Dn_ea_ADD_reg1                  ;if not equal got check reg 1
000027CE  6700 0064               2354                                                  BEQ         Dn_ea_ADD_reg0_out              ;if equal go to output
000027D2                          2355                                                  
000027D2  B4BC 00000200           2356  Dn_ea_ADD_reg1                                  CMP.L       #match_ADD_reg1,D2                  ;check to see if reg equal 1
000027D8  6600 0006               2357                                                  BNE         Dn_ea_ADD_reg2                  ;if not equal got check reg 2
000027DC  6700 0062               2358                                                  BEQ         Dn_ea_ADD_reg1_out              ;if equal go to output
000027E0                          2359  
000027E0  B4BC 00000400           2360  Dn_ea_ADD_reg2                                  CMP.L       #match_ADD_reg2,D2                  ;check to see if reg equal 2
000027E6  6600 0006               2361                                                  BNE         Dn_ea_ADD_reg3                  ;if not equal got check reg 3
000027EA  6700 0060               2362                                                  BEQ         Dn_ea_ADD_reg2_out              ;if equal go to output
000027EE                          2363  
000027EE  B4BC 00000600           2364  Dn_ea_ADD_reg3                                  CMP.L       #match_ADD_reg3,D2                  ;check to see if reg equal 3
000027F4  6600 0006               2365                                                  BNE         Dn_ea_ADD_reg4                  ;if not equal got check reg 4
000027F8  6700 005E               2366                                                  BEQ         Dn_ea_ADD_reg3_out              ;if equal go to output
000027FC                          2367                                                  
000027FC  B4BC 00000800           2368  Dn_ea_ADD_reg4                                  CMP.L       #match_ADD_reg4,D2                  ;check to see if reg equal 4
00002802  6600 0006               2369                                                  BNE         Dn_ea_ADD_reg5                  ;if not equal got check reg 5
00002806  6700 005C               2370                                                  BEQ         Dn_ea_ADD_reg4_out              ;if equal go to output
0000280A                          2371  
0000280A  B4BC 00000A00           2372  Dn_ea_ADD_reg5                                  CMP.L       #match_ADD_reg5,D2                  ;check to see if reg equal 5
00002810  6600 0006               2373                                                  BNE         Dn_ea_ADD_reg6                  ;if not equal got check reg 6
00002814  6700 005A               2374                                                  BEQ         Dn_ea_ADD_reg5_out              ;if equal go to output
00002818                          2375  
00002818  B4BC 00000C00           2376  Dn_ea_ADD_reg6                                  CMP.L       #match_ADD_reg6,D2                  ;check to see if reg equal 6
0000281E  6600 0006               2377                                                  BNE         Dn_ea_ADD_reg7                  ;if not equal got check reg 7
00002822  6700 0058               2378                                                  BEQ         Dn_ea_ADD_reg6_out              ;if equal go to output          
00002826                          2379  
00002826  B4BC 00000E00           2380  Dn_ea_ADD_reg7                                  CMP.L       #match_ADD_reg7,D2                  ;check to see if reg equal 7
0000282C  6700 005A               2381                                                  BEQ         Dn_ea_ADD_reg7_out              ;if equal go to output
00002830  6600 037C               2382                                                  BNE         ADD_ERROR                                ;if not equal to an addresssing mode, pritn error
00002834                          2383                                  
00002834                          2384  
00002834                          2385  ;--------------------Data Output-----------------------
00002834  227C 0000691B           2386  Dn_ea_ADD_reg0_out               MOVE.L         #ea_D0,A1                                          ;load string constant into A1
0000283A  4EB9 00002894           2387                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002840                          2388  
00002840                          2389                                              
00002840  227C 0000691E           2390  Dn_ea_ADD_reg1_out               MOVE.L         #ea_D1,A1                                       ;load string constant into A1
00002846  4EB9 00002894           2391                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
0000284C                          2392                                              
0000284C  227C 00006921           2393  Dn_ea_ADD_reg2_out               MOVE.L         #ea_D2,A1                                       ;load string constant into A1
00002852  4EB9 00002894           2394                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002858                          2395                                              
00002858  227C 00006924           2396  Dn_ea_ADD_reg3_out               MOVE.L         #ea_D3,A1                                           ;load string constant into A1
0000285E  4EB9 00002894           2397                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002864                          2398                                              
00002864  227C 00006927           2399  Dn_ea_ADD_reg4_out               MOVE.L         #ea_D4,A1                                           ;load string constant into A1
0000286A  4EB9 00002894           2400                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002870                          2401                                              
00002870  227C 0000692A           2402  Dn_ea_ADD_reg5_out               MOVE.L         #ea_D5,A1                                           ;load string constant into A1
00002876  4EB9 00002894           2403                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
0000287C                          2404                                              
0000287C  227C 0000692D           2405  Dn_ea_ADD_reg6_out               MOVE.L         #ea_D6,A1                                           ;load string constant into A1
00002882  4EB9 00002894           2406                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002888                          2407                                              
00002888  227C 00006930           2408  Dn_ea_ADD_reg7_out               MOVE.L         #ea_D7,A1                                           ;load string constant into A1
0000288E  4EB9 00002894           2409                                   JSR            ADD_determine_second_operand                 ;jump to ADDroutine to determine second operand
00002894                          2410                                              
00002894                          2411  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00002894  4241                    2412  ADD_determine_second_operand     CLR               D1                                            ;clear D1 to load new mask                                
00002896  C2BC 00000038           2413                                   AND.L             #mask_ADD_ea_mode,D1                        ;move the mask to D1
0000289C                          2414  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000289C  B2BC 00000010           2415  ADD_Dn_ea_add_reg_indir          CMP.L             #match_ADD_An_indir,D1                      ;check to see if mode is add reg indir
000028A2  6600 0006               2416                                   BNE               ADD_Dn_ea_add_reg_indir_predec                          ;if not, go check add reg indir predec 
000028A6  6700 0048               2417                                   BEQ               ADD_Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
000028AA                          2418             
000028AA  B2BC 00000020           2419  ADD_Dn_ea_add_reg_indir_predec   CMP.L             #match_ADD_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
000028B0  6600 0006               2420                                   BNE               ADD_Dn_ea_add_reg_indir_postinc                         ;if not go check add reg indir/predec
000028B4  6700 01DA               2421                                   BEQ               ADD_Dn_ea_An_indir_predec                               ;if equal go figure out the register
000028B8                          2422                        
000028B8  B2BC 00000018           2423  ADD_Dn_ea_add_reg_indir_postinc  CMP.L             #match_ADD_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
000028BE  6600 0006               2424                                   BNE               ADD_Dn_ea_abs_add_word                                  ;if not go check abs add word
000028C2  6700 00FC               2425                                   BEQ               ADD_Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
000028C6                          2426  
000028C6  C4BC 0000003F           2427  ADD_Dn_ea_abs_add_word           AND.L             #mask_ADD_abs_add,D2                        ;load mask to determine if abs add word or long
000028CC                          2428                                   
000028CC  B4BC 00000038           2429                                   CMP.L             #match_ADD_abs_add_word,D2                  ;check if abs add word
000028D2  2A18                    2430                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000028D4  6600 0006               2431                                   BNE               ADD_Dn_ea_abs_add_long                                  ;if not go check abs add long
000028D8  6700 0286               2432                                   BEQ               ADD_Dn_ea_abs_add_word_out                              ;if equal go to output
000028DC                          2433    
000028DC  B4BC 00000039           2434  ADD_Dn_ea_abs_add_long           CMP.L             #match_ADD_abs_add_long,D2                  ;check to see if abs add long
000028E2  6700 028A               2435                                   BEQ               ADD_Dn_ea_abs_add_long_out                              ;if equal go to output
000028E6  6600 02C6               2436                                   BNE               ADD_ERROR                                         ;if not equal go to error mesage ADD routine
000028EA                          2437  
000028EA                          2438  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000028EA                          2439                                   
000028EA  C4BC 0000003F           2440                                   AND.L              #mask_ADD_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
000028F0                          2441  ;------------------Address Register Indirect-----------------------
000028F0  B4BC 00000010           2442  ADD_Dn_ea_An_indir_reg           CMP.L          #match_ADD_An_indir_r0,D2              ;check reg is equal to 0
000028F6  6600 0006               2443                                   BNE             ADD_Dn_ea_An_indir_reg1                           ;if not try reg 1
000028FA  6700 0064               2444                                   BEQ             ADD_Dn_ea_An_indir_reg0_out                       ;if equal go to output ADDroutine
000028FE                          2445  
000028FE  B4BC 00000011           2446  ADD_Dn_ea_An_indir_reg1          CMP.L           #match_ADD_An_indir_r1,D2              ;check reg is equal to 1
00002904  6600 0006               2447                                   BNE             ADD_Dn_ea_An_indir_reg2                           ;if not try reg 2
00002908  6700 0062               2448                                   BEQ             ADD_Dn_ea_An_indir_reg1_out                       ;if equal go to output ADDroutine
0000290C                          2449  
0000290C  B4BC 00000012           2450  ADD_Dn_ea_An_indir_reg2          CMP.L           #match_ADD_An_indir_r2,D2              ;check reg is equal to 2
00002912  6600 0006               2451                                   BNE             ADD_Dn_ea_An_indir_reg3                           ;if not try reg 3
00002916  6700 0060               2452                                   BEQ             ADD_Dn_ea_An_indir_reg2_out                       ;if equal go to output ADDroutine
0000291A                          2453  
0000291A  B4BC 00000013           2454  ADD_Dn_ea_An_indir_reg3          CMP.L           #match_ADD_An_indir_r3,D2              ;check reg is equal to 3
00002920  6600 0006               2455                                   BNE             ADD_Dn_ea_An_indir_reg4                           ;if not try reg 4
00002924  6700 005E               2456                                   BEQ             ADD_Dn_ea_An_indir_reg3_out                       ;if equal go to output ADDroutine
00002928                          2457      
00002928  B4BC 00000014           2458  ADD_Dn_ea_An_indir_reg4          CMP.L           #match_ADD_An_indir_r4,D2              ;check reg is equal to 4
0000292E  6600 0006               2459                                   BNE             ADD_Dn_ea_An_indir_reg5                           ;if not try reg 5
00002932  6700 005C               2460                                   BEQ             ADD_Dn_ea_An_indir_reg4_out                       ;if equal go to output ADDroutine
00002936                          2461          
00002936  B4BC 00000015           2462  ADD_Dn_ea_An_indir_reg5          CMP.L           #match_ADD_An_indir_r5,D2              ;check reg is equal to 5
0000293C  6600 0006               2463                                   BNE             ADD_Dn_ea_An_indir_reg6                           ;if not try reg 6
00002940  6700 005A               2464                                   BEQ             ADD_Dn_ea_An_indir_reg5_out                       ;if equal go to output ADDroutine
00002944                          2465  
00002944  B4BC 00000016           2466  ADD_Dn_ea_An_indir_reg6          CMP.L           #match_ADD_An_indir_r6,D2              ;check reg is equal to 6
0000294A  6600 0006               2467                                   BNE             ADD_Dn_ea_An_indir_reg7                           ;if not try reg 7
0000294E  6700 0058               2468                                   BEQ             ADD_Dn_ea_An_indir_reg6_out                       ;if equal go to output ADDroutine
00002952                          2469  
00002952  B4BC 00000017           2470  ADD_Dn_ea_An_indir_reg7          CMP.L           #match_ADD_An_indir_r7,D2              ;check reg is equal to 7
00002958  6700 005A               2471                                   BEQ             ADD_Dn_ea_An_indir_reg7_out                       ;if equal go to output ADDroutine
0000295C  6600 0250               2472                                   BNE             ADD_ERROR                                   :if not equal to an addresssing mode, pritn error
00002960                          2473  
00002960                          2474  ;--------------------Address Register Indirect Output-----------------------
00002960  227C 0000695B           2475  ADD_Dn_ea_An_indir_reg0_out         MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00002966  4CDF 7CBE               2476                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000296A  4E75                    2477                                       RTS
0000296C                          2478  
0000296C  227C 00006960           2479  ADD_Dn_ea_An_indir_reg1_out         MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00002972  4CDF 7CBE               2480                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002976  4E75                    2481                                       RTS
00002978                          2482  
00002978  227C 00006965           2483  ADD_Dn_ea_An_indir_reg2_out         MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
0000297E  4CDF 7CBE               2484                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002982  4E75                    2485                                       RTS
00002984                          2486  
00002984  227C 0000696A           2487  ADD_Dn_ea_An_indir_reg3_out         MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
0000298A  4CDF 7CBE               2488                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000298E  4E75                    2489                                       RTS
00002990                          2490  
00002990  227C 0000696F           2491  ADD_Dn_ea_An_indir_reg4_out         MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00002996  4CDF 7CBE               2492                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000299A  4E75                    2493                                       RTS
0000299C                          2494  
0000299C  227C 00006974           2495  ADD_Dn_ea_An_indir_reg5_out         MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
000029A2  4CDF 7CBE               2496                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000029A6  4E75                    2497                                       RTS
000029A8                          2498  
000029A8  227C 00006979           2499  ADD_Dn_ea_An_indir_reg6_out         MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
000029AE  4CDF 7CBE               2500                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000029B2  4E75                    2501                                       RTS
000029B4                          2502                                          
000029B4  227C 0000697E           2503  ADD_Dn_ea_An_indir_reg7_out         MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
000029BA  4CDF 7CBE               2504                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000029BE  4E75                    2505                                       RTS
000029C0                          2506  
000029C0                          2507  ;------------------Address Register Indirect with Post Increment-----------------------
000029C0  B4BC 00000018           2508  ADD_Dn_ea_An_indir_postinc_reg              CMP.L      #match_ADD_An_indir_postinc_r0,D2        ;check reg is equal to 0
000029C6  6600 0006               2509                                              BNE        ADD_Dn_ea_An_indir_postinc_reg1                      ;if not try reg 1
000029CA  6700 0064               2510                                              BEQ        ADD_Dn_ea_An_indir_postin_r0_out                  ;if equal go to output ADDroutine
000029CE                          2511  
000029CE  B4BC 00000019           2512  ADD_Dn_ea_An_indir_postinc_reg1             CMP.L      #match_ADD_An_indir_postinc_r1,D2        ;check reg is equal to 1
000029D4  6600 0006               2513                                              BNE        ADD_Dn_ea_An_indir_postinc_reg2                      ;if not try reg 2
000029D8  6700 0062               2514                                              BEQ        ADD_Dn_ea_An_indir_postin_r1_out                  ;if equal go to output ADDroutine
000029DC                          2515  
000029DC  B4BC 0000001A           2516  ADD_Dn_ea_An_indir_postinc_reg2             CMP.L      #match_ADD_An_indir_postinc_r2,D2        ;check reg is equal to 2
000029E2  6600 0006               2517                                              BNE        ADD_Dn_ea_An_indir_postinc_reg3                      ;if not try reg 3
000029E6  6700 0060               2518                                              BEQ        ADD_Dn_ea_An_indir_postin_r2_out                  ;if equal go to output ADDroutine
000029EA                          2519  
000029EA  B4BC 0000001B           2520  ADD_Dn_ea_An_indir_postinc_reg3             CMP.L      #match_ADD_An_indir_postinc_r3,D2        ;check reg is equal to 3
000029F0  6600 0006               2521                                              BNE        ADD_Dn_ea_An_indir_postinc_reg4                      ;if not try reg 4
000029F4  6700 005E               2522                                              BEQ        ADD_Dn_ea_An_indir_postin_r3_out                  ;if equal go to output ADDroutine
000029F8                          2523   
000029F8  B4BC 0000001C           2524  ADD_Dn_ea_An_indir_postinc_reg4             CMP.L      #match_ADD_An_indir_postinc_r4,D2        ;check reg is equal to 4
000029FE  6600 0006               2525                                              BNE        ADD_Dn_ea_An_indir_postinc_reg5                      ;if not try reg 5
00002A02  6700 005C               2526                                              BEQ        ADD_Dn_ea_An_indir_postin_r4_out                  ;if equal go to output ADDroutine
00002A06                          2527  
00002A06  B4BC 0000001D           2528  ADD_Dn_ea_An_indir_postinc_reg5             CMP.L      #match_ADD_An_indir_postinc_r5,D2        ;check reg is equal to 5
00002A0C  6600 0006               2529                                              BNE        ADD_Dn_ea_An_indir_postinc_reg6                      ;if not try reg 6
00002A10  6700 005A               2530                                              BEQ        ADD_Dn_ea_An_indir_postin_r5_out                  ;if equal go to output ADDroutine
00002A14                          2531  
00002A14  B4BC 0000001E           2532  ADD_Dn_ea_An_indir_postinc_reg6             CMP.L      #match_ADD_An_indir_postinc_r6,D2         ;check reg is equal to 6
00002A1A  6600 0006               2533                                              BNE        ADD_Dn_ea_An_indir_postinc_reg7                        ;if not try reg 7
00002A1E  6700 0058               2534                                              BEQ        ADD_Dn_ea_An_indir_postin_r6_out                    ;if equal go to output ADDroutine
00002A22                          2535  
00002A22  B4BC 0000001F           2536  ADD_Dn_ea_An_indir_postinc_reg7             CMP.L      #match_ADD_An_indir_postinc_r7,D2         ;check reg is equal to 7
00002A28  6700 005A               2537                                              BEQ        ADD_Dn_ea_An_indir_postin_r7_out                    ;if equal go to output ADDroutine
00002A2C  6600 0180               2538                                              BNE        ADD_ERROR                                        :if not equal to an addresssing mode, pritn error
00002A30                          2539  
00002A30                          2540  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00002A30  227C 00006983           2541  ADD_Dn_ea_An_indir_postin_r0_out                MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00002A36  4CDF 7CBE               2542                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A3A  4E75                    2543                                                  RTS
00002A3C                          2544  
00002A3C  227C 00006989           2545  ADD_Dn_ea_An_indir_postin_r1_out                MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00002A42  4CDF 7CBE               2546                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A46  4E75                    2547                                                  RTS
00002A48                          2548  
00002A48  227C 0000698F           2549  ADD_Dn_ea_An_indir_postin_r2_out                MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00002A4E  4CDF 7CBE               2550                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A52  4E75                    2551                                                  RTS
00002A54                          2552  
00002A54  227C 00006995           2553  ADD_Dn_ea_An_indir_postin_r3_out                MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00002A5A  4CDF 7CBE               2554                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A5E  4E75                    2555                                                  RTS
00002A60                          2556  
00002A60  227C 0000699B           2557  ADD_Dn_ea_An_indir_postin_r4_out                MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00002A66  4CDF 7CBE               2558                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A6A  4E75                    2559                                                  RTS
00002A6C                          2560  
00002A6C  227C 000069A1           2561  ADD_Dn_ea_An_indir_postin_r5_out                MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00002A72  4CDF 7CBE               2562                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A76  4E75                    2563                                                  RTS
00002A78                          2564  
00002A78  227C 000069A7           2565  ADD_Dn_ea_An_indir_postin_r6_out                MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00002A7E  4CDF 7CBE               2566                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A82  4E75                    2567                                                  RTS
00002A84                          2568  
00002A84  227C 000069AD           2569  ADD_Dn_ea_An_indir_postin_r7_out                MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00002A8A  4CDF 7CBE               2570                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002A8E  4E75                    2571                                                  RTS
00002A90                          2572  
00002A90                          2573  ;------------------Address Register Indirect with Pre Decrement-----------------------
00002A90  B4BC 00000020           2574  ADD_Dn_ea_An_indir_predec                   CMP.L      #match_ADD_An_indir_predec_reg0,D2       ;check reg is equal to 0
00002A96  6600 0006               2575                                              BNE        ADD_Dn_ea_An_indir_predec_reg1                      ;if not try reg 1
00002A9A  6700 0064               2576                                              BEQ        ADD_Dn_ea_An_indir_prede_r0_out               ;if equal go to output ADDroutine
00002A9E                          2577  
00002A9E  B4BC 00000021           2578  ADD_Dn_ea_An_indir_predec_reg1              CMP.L      #match_ADD_An_indir_predec_reg1,D2       ;check reg is equal to 1
00002AA4  6600 0006               2579                                              BNE        ADD_Dn_ea_An_indir_predec_reg2                      ;if not try reg 2
00002AA8  6700 0062               2580                                              BEQ        ADD_Dn_ea_An_indir_prede_r1_out               ;if equal go to output ADDroutine
00002AAC                          2581  
00002AAC  B4BC 00000022           2582  ADD_Dn_ea_An_indir_predec_reg2              CMP.L      #match_ADD_An_indir_predec_reg2,D2       ;check reg is equal to 2
00002AB2  6600 0006               2583                                              BNE        ADD_Dn_ea_An_indir_predec_reg3                      ;if not try reg 3
00002AB6  6700 0060               2584                                              BEQ        ADD_Dn_ea_An_indir_prede_r2_out               ;if equal go to output ADDroutine
00002ABA                          2585  
00002ABA  B4BC 00000023           2586  ADD_Dn_ea_An_indir_predec_reg3              CMP.L      #match_ADD_An_indir_predec_reg3,D2       ;check reg is equal to 3
00002AC0  6600 0006               2587                                              BNE        ADD_Dn_ea_An_indir_predec_reg4                      ;if not try reg 4
00002AC4  6700 005E               2588                                              BEQ        ADD_Dn_ea_An_indir_prede_r3_out               ;if equal go to output ADDroutine
00002AC8                          2589  
00002AC8  B4BC 00000024           2590  ADD_Dn_ea_An_indir_predec_reg4              CMP.L      #match_ADD_An_indir_predec_reg4,D2       ;check reg is equal to 4
00002ACE  6600 0006               2591                                              BNE        ADD_Dn_ea_An_indir_predec_reg5                      ;if not try reg 5
00002AD2  6700 005C               2592                                              BEQ        ADD_Dn_ea_An_indir_prede_r4_out               ;if equal go to output ADDroutine
00002AD6                          2593  
00002AD6  B4BC 00000025           2594  ADD_Dn_ea_An_indir_predec_reg5              CMP.L      #match_ADD_An_indir_predec_reg5,D2       ;check reg is equal to 5
00002ADC  6600 0006               2595                                              BNE        ADD_Dn_ea_An_indir_predec_reg6                     ;if not try reg 6
00002AE0  6700 005A               2596                                              BEQ        ADD_Dn_ea_An_indir_prede_r5_out               ;if equal go to output ADDroutine
00002AE4                          2597  
00002AE4  B4BC 00000026           2598  ADD_Dn_ea_An_indir_predec_reg6              CMP.L      #match_ADD_An_indir_predec_reg6,D2       ;check reg is equal to 6
00002AEA  6600 0006               2599                                              BNE        ADD_Dn_ea_An_indir_predec_reg7                     ;if not try reg 7
00002AEE  6700 0058               2600                                              BEQ        ADD_Dn_ea_An_indir_prede_r6_out               ;if equal go to output ADDroutine
00002AF2                          2601  
00002AF2  B4BC 00000027           2602  ADD_Dn_ea_An_indir_predec_reg7              CMP.L      #match_ADD_An_indir_predec_reg7,D2       ;check reg is equal to 7
00002AF8  6700 005A               2603                                              BEQ        ADD_Dn_ea_An_indir_prede_r7_out               ;if equal go to output ADDroutine
00002AFC  6600 00B0               2604                                              BNE        ADD_ERROR                                    :if not equal to an addresssing mode, pritn error
00002B00                          2605  
00002B00                          2606  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00002B00  227C 000069B3           2607  ADD_Dn_ea_An_indir_prede_r0_out            MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00002B06  4CDF 7CBE               2608                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B0A  4E75                    2609                                                 RTS
00002B0C                          2610                                              
00002B0C  227C 000069B9           2611  ADD_Dn_ea_An_indir_prede_r1_out            MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00002B12  4CDF 7CBE               2612                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B16  4E75                    2613                                                 RTS
00002B18                          2614  
00002B18  227C 000069BF           2615  ADD_Dn_ea_An_indir_prede_r2_out            MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00002B1E  4CDF 7CBE               2616                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B22  4E75                    2617                                                 RTS
00002B24                          2618  
00002B24  227C 000069C5           2619  ADD_Dn_ea_An_indir_prede_r3_out            MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00002B2A  4CDF 7CBE               2620                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B2E  4E75                    2621                                                 RTS
00002B30                          2622  
00002B30  227C 000069CB           2623  ADD_Dn_ea_An_indir_prede_r4_out            MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00002B36  4CDF 7CBE               2624                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B3A  4E75                    2625                                                 RTS
00002B3C                          2626  
00002B3C  227C 000069D1           2627  ADD_Dn_ea_An_indir_prede_r5_out            MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00002B42  4CDF 7CBE               2628                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B46  4E75                    2629                                                 RTS
00002B48                          2630  
00002B48  227C 000069D7           2631  ADD_Dn_ea_An_indir_prede_r6_out            MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00002B4E  4CDF 7CBE               2632                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B52  4E75                    2633                                                 RTS
00002B54                          2634  
00002B54  227C 000069DD           2635  ADD_Dn_ea_An_indir_prede_r7_out            MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00002B5A  4CDF 7CBE               2636                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B5E  4E75                    2637                                                 RTS
00002B60                          2638                                              
00002B60                          2639  ;------------------Absolute Addressing Output-----------------------
00002B60  22FC 000069ED           2640  ADD_Dn_ea_abs_add_word_out            MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002B66  22C5                    2641                                        MOVE.L      D5,(A1)+                           ;load address                  
00002B68  4CDF 7CBE               2642                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B6C  4E75                    2643                                        RTS                                            :return to ADDroutine
00002B6E                          2644                                             
00002B6E                          2645  
00002B6E                          2646  
00002B6E  2A18                    2647  ADD_Dn_ea_abs_add_long_out            MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00002B70  22FC 000069ED           2648                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00002B76  22C5                    2649                                        MOVE.L      D5,(A1)+                           ;load address                  
00002B78  4CDF 7CBE               2650                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B7C  4E75                    2651                                        RTS                                            :return to ADDroutine                                            
00002B7E                          2652  ;---------------Immediate Addresing--------------------------
00002B7E  2A18                    2653  ADD_Dn_ea_immediate_add_out           MOVE.L        (A0)+,D5                             ;capture the immediate address
00002B80  BCBC 000000FC           2654                                        CMP.L       #match_imm_add_word,D6               ;check to see if need to pull word
00002B86  2A18                    2655                                        MOVE.L      (A0)+,D5                            ;pull the word
00002B88  6700 0006               2656                                        BEQ         ADD_Dn_ea_imm_add_w                           ;if equal go pull word    
00002B8C  6600 0010               2657                                        BNE         ADD_Dn_ea_imm_add_l                           ;if not equal, go check long
00002B90                          2658                                           
00002B90  22FC 000069ED           2659  ADD_Dn_ea_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
00002B96  32C5                    2660                                        MOVE.W     D5,(A1)+                             ;load the word address                           
00002B98  4CDF 7CBE               2661                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002B9C  4E75                    2662                                        RTS
00002B9E                          2663                                           
00002B9E  2A18                    2664  ADD_Dn_ea_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
00002BA0  22FC 000069ED           2665                                        MOVE.L     #ea_$,(A1)+                          ;load the $
00002BA6  2245                    2666                                        MOVE.L     D5,A1                               ;move to A1
00002BA8  4CDF 7CBE               2667                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002BAC  4E75                    2668                                        RTS
00002BAE                          2669  
00002BAE                          2670  
00002BAE                          2671  
00002BAE                          2672  
00002BAE                          2673  
00002BAE                          2674  
00002BAE                          2675  
00002BAE                          2676  
00002BAE                          2677  
00002BAE                          2678  
00002BAE                          2679  
00002BAE                          2680                                   
00002BAE                          2681  ;----------------------Error Handling----------------------------------------
00002BAE  43F9 00006907           2682  ADD_ERROR                                           LEA     ERROR_MESSAGE,A1                                         ;load error messge into A3
00002BB4  4CDF 7CBE               2683                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00002BB8  4E75                    2684                                                  RTS
00002BBA                          2685                                                  
00002BBA                          2686                                                  
00002BBA  =000001C0               2687  mask_opmode                          EQU         $01C0                   ;mask for the opmode to determine operand order
00002BBA                          2688  
00002BBA  =00000038               2689  mask_ADD_ea_mode                    EQU         $0038
00002BBA  =0000003F               2690  mask_ADD_abs_add                    EQU         $003F
00002BBA  =0000003F               2691  mask_ADD_ea_reg_and_mode            EQU         $003F
00002BBA  =00000E00               2692  mask_ADD_An_reg                 EQU         $0E00
00002BBA                          2693  
00002BBA                          2694  
00002BBA  =00000100               2695  match_ADD_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
00002BBA  =00000140               2696  match_ADD_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
00002BBA  =00000180               2697  match_ADD_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
00002BBA                          2698  
00002BBA  =00000000               2699  match_ADD_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
00002BBA  =00000040               2700  match_ADD_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
00002BBA  =00000080               2701  match_ADD_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
00002BBA                          2702  
00002BBA                          2703  
00002BBA                          2704  
00002BBA  =00000000               2705  match_ADD_Dn                        EQU         $0000
00002BBA  =00000008               2706  match_ADD_An                        EQU         $0008
00002BBA  =00000010               2707  match_ADD_An_indir                  EQU         $0010
00002BBA  =00000020               2708  match_ADD_An_indir_predec           EQU         $0020
00002BBA  =00000018               2709  match_ADD_An_indir_postinc          EQU         $0018
00002BBA  =00000038               2710  match_ADD_abs_add_word              EQU         $0038
00002BBA  =00000039               2711  match_ADD_abs_add_long              EQU         $0039
00002BBA                          2712  
00002BBA  =00000000               2713  match_ADD_D0                            EQU         $0000
00002BBA  =00000001               2714  match_ADD_D1                            EQU         $0001
00002BBA  =00000002               2715  match_ADD_D2                            EQU         $0002
00002BBA  =00000003               2716  match_ADD_D3                            EQU         $0003
00002BBA  =00000004               2717  match_ADD_D4                            EQU         $0004
00002BBA  =00000005               2718  match_ADD_D5                            EQU         $0005
00002BBA  =00000006               2719  match_ADD_D6                            EQU         $0006
00002BBA  =00000007               2720  match_ADD_D7                            EQU         $0007
00002BBA                          2721  
00002BBA  =00000008               2722  match_ADD_A0                            EQU         $0008
00002BBA  =00000009               2723  match_ADD_A1                            EQU         $0009
00002BBA  =0000000A               2724  match_ADD_A2                            EQU         $000A
00002BBA  =0000000B               2725  match_ADD_A3                            EQU         $000B
00002BBA  =0000000C               2726  match_ADD_A4                            EQU         $000C
00002BBA  =0000000D               2727  match_ADD_A5                            EQU         $000D
00002BBA  =0000000E               2728  match_ADD_A6                            EQU         $000E
00002BBA  =0000000F               2729  match_ADD_A7                            EQU         $000F
00002BBA                          2730  
00002BBA  =00000010               2731  match_ADD_An_indir_r0                   EQU         $0010
00002BBA  =00000011               2732  match_ADD_An_indir_r1                   EQU         $0011
00002BBA  =00000012               2733  match_ADD_An_indir_r2                   EQU         $0012
00002BBA  =00000013               2734  match_ADD_An_indir_r3                   EQU         $0013
00002BBA  =00000014               2735  match_ADD_An_indir_r4                   EQU         $0014
00002BBA  =00000015               2736  match_ADD_An_indir_r5                   EQU         $0015
00002BBA  =00000016               2737  match_ADD_An_indir_r6                   EQU         $0016
00002BBA  =00000017               2738  match_ADD_An_indir_r7                   EQU         $0017
00002BBA                          2739  
00002BBA  =00000018               2740  match_ADD_An_indir_postinc_r0       EQU         $0018
00002BBA  =00000019               2741  match_ADD_An_indir_postinc_r1       EQU         $0019
00002BBA  =0000001A               2742  match_ADD_An_indir_postinc_r2       EQU         $001A
00002BBA  =0000001B               2743  match_ADD_An_indir_postinc_r3       EQU         $001B
00002BBA  =0000001C               2744  match_ADD_An_indir_postinc_r4       EQU         $001C
00002BBA  =0000001D               2745  match_ADD_An_indir_postinc_r5       EQU         $001D
00002BBA  =0000001E               2746  match_ADD_An_indir_postinc_r6       EQU         $001E
00002BBA  =0000001F               2747  match_ADD_An_indir_postinc_r7       EQU         $001F
00002BBA                          2748  
00002BBA  =00000020               2749  match_ADD_An_indir_predec_reg0          EQU         $0020
00002BBA  =00000021               2750  match_ADD_An_indir_predec_reg1          EQU         $0021
00002BBA  =00000022               2751  match_ADD_An_indir_predec_reg2          EQU         $0022
00002BBA  =00000023               2752  match_ADD_An_indir_predec_reg3          EQU         $0023
00002BBA  =00000024               2753  match_ADD_An_indir_predec_reg4          EQU         $0024
00002BBA  =00000025               2754  match_ADD_An_indir_predec_reg5          EQU         $0025
00002BBA  =00000026               2755  match_ADD_An_indir_predec_reg6          EQU         $0026
00002BBA  =00000027               2756  match_ADD_An_indir_predec_reg7          EQU         $0027
00002BBA                          2757  
00002BBA  =0000003C               2758  match_imm_add                           EQU         $003C
00002BBA  =000000FC               2759  match_imm_add_word                      EQU         $00FC
00002BBA  =000001FC               2760  match_imm_add_long                      EQU         $01FC
00002BBA                          2761  
00002BBA  =00000000               2762  match_ADD_reg0                          EQU         $0000
00002BBA  =00000200               2763  match_ADD_reg1                          EQU         $0200
00002BBA  =00000400               2764  match_ADD_reg2                          EQU         $0400
00002BBA  =00000600               2765  match_ADD_reg3                          EQU         $0600
00002BBA  =00000800               2766  match_ADD_reg4                          EQU         $0800
00002BBA  =00000A00               2767  match_ADD_reg5                          EQU         $0A00
00002BBA  =00000C00               2768  match_ADD_reg6                          EQU         $0C00
00002BBA  =00000E00               2769  match_ADD_reg7                          EQU         $0E00
00002BBA                          2770  
00002BBA                          2771  
00002BBA                          2772  
00002BBA                          2773  
00002BBA                          2774  
00002BBA                          2775  
00002BBA                          2776  
00002BBA                          2777  
00002BBA                          2778  
00002BBA                          2779  
00002BBA                          2780  
00002BBA                          2781  
00002BBA                          2782  
00002BBA                          2783  
00002BBA                          2784  -------------------- end include --------------------
00002BBA                          2785              INCLUDE 'AND Subroutine.x68'
00002BBA                          2786     
00002BBA                          2787  ;--------------------------------------------------------AND ANDroutine-----------------------------------------------------------------------
00002BBA  48E7 7D3E               2788  AND_sub                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)              ;preserve the registers, 
00002BBE                          2789                                   
00002BBE  C2BC 000001C0           2790                                         AND.L              #mask_opmode,D1                       ;load mask to determine the operand order
00002BC4                          2791                                  
00002BC4  B2BC 00000000           2792  AND_Dn_ea_match                        CMP.L              #match_AND_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00002BCA  6700 05DE               2793                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002BCE  6600 0002               2794                                         BNE                AND_Dn_ea_match_w                     ;if not check word size for same order
00002BD2                          2795  
00002BD2  B2BC 00000040           2796  AND_Dn_ea_match_w                      CMP.L              #match_AND_w_Dn_ea,D1                 ;check to see if it's Dn,ea
00002BD8  6700 05D0               2797                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002BDC  6600 0002               2798                                         BNE                AND_Dn_ea_match_l                     ;if not check long size for same order
00002BE0                          2799  
00002BE0  B2BC 00000080           2800  AND_Dn_ea_match_l                      CMP.L              #match_AND_l_Dn_ea,D1                 ;check to see if it's Dn,ea
00002BE6  6700 05C2               2801                                         BEQ                AND_Dn_ea                             ;if equal go figure out data register
00002BEA  6600 0002               2802                                         BNE                AND_ea_Dn_match                           ;if not check other order
00002BEE                          2803  
00002BEE  B2BC 00000100           2804  AND_ea_Dn_match                        CMP.L              #match_AND_b_ea_Dn,D1                 ;check to see if it's ea,Dn
00002BF4  6700 0022               2805                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002BF8  6600 0002               2806                                         BNE                AND_ea_Dn_match_w                     ;if not go check word size for same order
00002BFC                          2807  
00002BFC  B2BC 00000140           2808  AND_ea_Dn_match_w                      CMP.L              #match_AND_w_ea_Dn,D1                 ;check to see if it's ea,Dn
00002C02  6700 0014               2809                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002C06  6600 0002               2810                                         BNE                AND_ea_Dn_match_l                     ;if not go check word size for same order
00002C0A                          2811  
00002C0A  B2BC 00000180           2812  AND_ea_Dn_match_l                      CMP.L              #match_AND_l_ea_Dn,D1                 ;check to see if it's ea,Dn
00002C10  6700 0006               2813                                         BEQ                AND_ea_Dn                             ;if equal go figure out ea mode
00002C14  6600 0956               2814                                         BNE                ERROR                                 ;if not go to error message
00002C18                          2815  ;--------------------------------------------------------------------------------------------------------------------------
00002C18                          2816  ;-------------------------------------------------------------------------------------------------------------------------
00002C18  4241                    2817  AND_ea_Dn                            CLR               D1                                          ;clear D1 to load new mask                                
00002C1A  C2BC 00000038           2818                                       AND.L             #mask_AND_ea_mode,D1                        ;move the mask to D1
00002C20                          2819  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00002C20  B2BC 00000010           2820  AND_ea_Dn_add_reg_indir              CMP.L             #match_AND_An_indir,D1                       ;check to see if mode is add reg indir
00002C26  6600 0006               2821                                       BNE               AND_ea_Dn_add_reg_indir_pdec                 ;if not, go check add reg indir predec 
00002C2A  6700 01E8               2822                                       BEQ               AND_ea_Dn_An_indir_reg                       ;if equal go figure out the register           
00002C2E                          2823             
00002C2E  B2BC 00000020           2824  AND_ea_Dn_add_reg_indir_pdec         CMP.L             #match_AND_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00002C34  6600 0006               2825                                       BNE               AND_ea_Dn_add_reg_indir_pinc                 ;if not go check add reg indir/predec
00002C38  6700 037A               2826                                       BEQ               AND_ea_Dn_An_indir_predec                      ;if equal go figure out the register
00002C3C                          2827                        
00002C3C  B2BC 00000018           2828  AND_ea_Dn_add_reg_indir_pinc         CMP.L             #match_AND_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00002C42  6600 0006               2829                                       BNE               AND_ea_Dn_abs_add_word                       ;if not go check abs add word
00002C46  6700 029C               2830                                       BEQ               AND_ea_Dn_An_indir_pinc_reg                    ;if equal go figure out the register
00002C4A                          2831  
00002C4A  C4BC 0000003F           2832  AND_ea_Dn_abs_add_word               AND.L             #mask_AND_abs_add,D2                         ;load mask to determine if abs add word or long
00002C50                          2833                                   
00002C50  B4BC 00000038           2834                                       CMP.L             #match_AND_abs_add_word,D2                   ;check if abs add word
00002C56  2A18                    2835                                       MOVE.L            (A0)+,D5                                     ;pull the next word instruction that holds the address
00002C58  6600 0006               2836                                       BNE               AND_ea_Dn_abs_add_long                       ;if not go check abs add long
00002C5C  6700 0426               2837                                       BEQ               AND_ea_Dn_abs_add_word_out                   ;if equal go to output
00002C60                          2838    
00002C60  B4BC 00000039           2839  AND_ea_Dn_abs_add_long               CMP.L             #match_AND_abs_add_long,D2                   ;check to see if abs add long
00002C66  6700 042A               2840                                       BEQ               AND_ea_Dn_abs_add_long_out                   ;if equal go to output
00002C6A  6600 0900               2841                                       BNE               ERROR                                        ;if not equal go to error mesage AND routine
00002C6E                          2842  
00002C6E                          2843  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00002C6E                          2844                                   
00002C6E  C4BC 0000003F           2845                                   AND.L              #mask_AND_ea_reg_and_mode,D2             ;load the mask into D2 for the mode and the register
00002C74                          2846  ;-----------------------------------Data Register Direct--------------------------------
00002C74  B4BC 00000000           2847  AND_ea_Dn_Dn_reg                 CMP.L              #match_AND_D0,D2                         ;check to see in the register is 0
00002C7A  6600 0006               2848                                   BNE                AND_ea_Dn_rD1                            ;if not go check register 1
00002C7E  6700 0064               2849                                   BEQ                AND_ea_Dn_D0_out                         ;if equal go to output ANDroutine
00002C82                          2850  
00002C82  B4BC 00000001           2851  AND_ea_Dn_rD1                    CMP.L              #match_AND_D1,D2                          ;check to see in the register is 1
00002C88  6600 0006               2852                                   BNE                AND_ea_Dn_rD2                             ;if not go check register 2
00002C8C  6700 0062               2853                                   BEQ                AND_ea_Dn_D1_out                          ;if equal go to output ANDroutine
00002C90                          2854  
00002C90  B4BC 00000002           2855  AND_ea_Dn_rD2                    CMP.L              #match_AND_D2,D2                          ;check to see in the register is 2
00002C96  6600 0006               2856                                   BNE                AND_ea_Dn_rD3                             ;if not go check register 3
00002C9A  6700 0060               2857                                   BEQ                AND_ea_Dn_D2_out                          ;if equal go to output ANDroutine
00002C9E                          2858  
00002C9E  B4BC 00000003           2859  AND_ea_Dn_rD3                    CMP.L              #match_AND_D3,D2                          ;check to see in the register is 3
00002CA4  6600 0006               2860                                   BNE                AND_ea_Dn_rD4                             ;if not go check register 4
00002CA8  6700 005E               2861                                   BEQ                AND_ea_Dn_D3_out                          ;if equal go to output ANDroutine
00002CAC                          2862  
00002CAC  B4BC 00000004           2863  AND_ea_Dn_rD4                    CMP.L              #match_AND_D4,D2                          ;check to see in the register is 4
00002CB2  6600 0006               2864                                   BNE                AND_ea_Dn_rD5                             ;if not go check register 5
00002CB6  6700 005C               2865                                   BEQ                AND_ea_Dn_D4_out                          ;if equal go to output ANDroutine
00002CBA                          2866  
00002CBA  B4BC 00000005           2867  AND_ea_Dn_rD5                    CMP.L              #match_AND_D5,D2                          ;check to see in the register is 5
00002CC0  6600 0006               2868                                   BNE                AND_ea_Dn_rD6                             ;if not go check register 6
00002CC4  6700 005A               2869                                   BEQ                AND_ea_Dn_D5_out                          ;if equal go to output ANDroutine
00002CC8                          2870  
00002CC8  B4BC 00000006           2871  AND_ea_Dn_rD6                    CMP.L              #match_AND_D6,D2                          ;check to see in the register is 6
00002CCE  6600 0006               2872                                   BNE                AND_ea_Dn_rD7                             ;if not go check register 7
00002CD2  6700 0058               2873                                   BEQ                AND_ea_Dn_D6_out                          ;if equal go to output ANDroutine
00002CD6                          2874  
00002CD6  B4BC 00000007           2875  AND_ea_Dn_rD7                    CMP.L              #match_AND_D7,D2                          ;check to see in the register is 7
00002CDC  6700 005A               2876                                   BEQ                AND_ea_Dn_D7_out                          ;if equal go to output ANDroutine
00002CE0  6600 088A               2877                                   BNE                ERROR                                     ;if not equal, got to error message
00002CE4                          2878  ;--------------------Data Register Direct Output-----------------------
00002CE4  227C 0000691B           2879  AND_ea_Dn_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
00002CEA  4EB9 000030D2           2880                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002CF0                          2881  
00002CF0  227C 0000691E           2882  AND_ea_Dn_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
00002CF6  4EB9 000030D2           2883                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002CFC                          2884  
00002CFC  227C 00006921           2885  AND_ea_Dn_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
00002D02  4EB9 000030D2           2886                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D08                          2887  
00002D08  227C 00006924           2888  AND_ea_Dn_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
00002D0E  4EB9 000030D2           2889                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D14                          2890  
00002D14  227C 00006927           2891  AND_ea_Dn_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
00002D1A  4EB9 000030D2           2892                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D20                          2893  
00002D20  227C 0000692A           2894  AND_ea_Dn_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00002D26  4EB9 000030D2           2895                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D2C                          2896  
00002D2C  227C 0000692D           2897  AND_ea_Dn_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00002D32  4EB9 000030D2           2898                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D38                          2899  
00002D38  227C 00006930           2900  AND_ea_Dn_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00002D3E  4EB9 000030D2           2901                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002D44                          2902  
00002D44                          2903  ;------------------Address Register Direct-----------------------
00002D44  B4BC 00000008           2904  AND_ea_Dn_An_reg                 CMP.L           #match_AND_A0,D2                        ;check reg is equal to 0
00002D4A  6600 0006               2905                                   BNE             AND_ea_Dn_rA1                           ;if not try reg 1
00002D4E  6700 0134               2906                                   BEQ             AND_ea_Dn_An_indir_reg0_out             ;if equal go to output ANDroutine
00002D52                          2907  
00002D52  B4BC 00000009           2908  AND_ea_Dn_rA1                    CMP.L           #match_AND_A1,D2                        ;check reg is equal to 1
00002D58  6600 0006               2909                                   BNE             AND_ea_Dn_rA2                           ;if not try reg 2
00002D5C  6700 0132               2910                                   BEQ             AND_ea_Dn_An_indir_reg1_out             ;if equal go to output ANDroutine
00002D60                          2911  
00002D60  B4BC 0000000A           2912  AND_ea_Dn_rA2                    CMP.L           #match_AND_A2,D2                        ;check reg is equal to 2
00002D66  6600 0006               2913                                   BNE             AND_ea_Dn_rA3                           ;if not try reg 3
00002D6A  6700 0130               2914                                   BEQ             AND_ea_Dn_An_indir_reg2_out             ;if equal go to output ANDroutine
00002D6E                          2915  
00002D6E  B4BC 0000000B           2916  AND_ea_Dn_rA3                    CMP.L           #match_AND_A3,D2                        ;check reg is equal to 3
00002D74  6600 0006               2917                                   BNE             AND_ea_Dn_rA4                           ;if not try reg 4
00002D78  6700 012E               2918                                   BEQ             AND_ea_Dn_An_indir_reg3_out             ;if equal go to output ANDroutine
00002D7C                          2919  
00002D7C  B4BC 0000000C           2920  AND_ea_Dn_rA4                    CMP.L           #match_AND_A4,D2                        ;check reg is equal to 4
00002D82  6600 0006               2921                                   BNE             AND_ea_Dn_rA5                           ;if not try reg 5
00002D86  6700 012C               2922                                   BEQ             AND_ea_Dn_An_indir_reg4_out             ;if equal go to output ANDroutine
00002D8A                          2923              
00002D8A  B4BC 0000000D           2924  AND_ea_Dn_rA5                    CMP.L           #match_AND_A5,D2                        ;check reg is equal to 5
00002D90  6600 0006               2925                                   BNE             AND_ea_Dn_rA6                           ;if not try reg 6
00002D94  6700 012A               2926                                   BEQ             AND_ea_Dn_An_indir_reg5_out             ;if equal go to output ANDroutine
00002D98                          2927  
00002D98  B4BC 0000000E           2928  AND_ea_Dn_rA6                    CMP.L           #match_AND_A6,D2                        ;check reg is equal to 6
00002D9E  6600 0006               2929                                   BNE             AND_ea_Dn_rA7                           ;if not try reg 7
00002DA2  6700 0128               2930                                   BEQ             AND_ea_Dn_An_indir_reg6_out             ;if equal go to output ANDroutine
00002DA6                          2931  
00002DA6  B4BC 0000000F           2932  AND_ea_Dn_rA7                    CMP.L           #match_AND_A7,D2                        ;check reg is equal to 7
00002DAC  6700 012A               2933                                   BEQ             AND_ea_Dn_An_indir_reg7_out             ;if equal go to output ANDroutine
00002DB0  6600 07BA               2934                                   BNE             ERROR                                   ;if not equal to an addresssing mode, pritn error
00002DB4                          2935  
00002DB4                          2936  ;--------------------Address Register Direct Output-----------------------
00002DB4  227C 00006933           2937  AND_ea_Dn_A0_out                MOVE.L          #ea_A0,A1                               ;load string constant into A1
00002DBA  4EB9 000030D2           2938                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DC0                          2939                                  
00002DC0  227C 00006936           2940  AND_ea_Dn_A1_out                MOVE.L          #ea_A1,A1                               ;load string constant into A1
00002DC6  4EB9 000030D2           2941                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DCC                          2942                                  
00002DCC  227C 00006939           2943  AND_ea_Dn_A2_out                MOVE.L          #ea_A2,A1                               ;load string constant into A1
00002DD2  4EB9 000030D2           2944                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DD8                          2945                                  
00002DD8  227C 0000693C           2946  AND_ea_Dn_A3_out                MOVE.L          #ea_A3,A1                               ;load string constant into A1
00002DDE  4EB9 000030D2           2947                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DE4                          2948  
00002DE4  227C 0000693F           2949  AND_ea_Dn_A4_out                MOVE.L          #ea_A4,A1                               ;load string constant into A1
00002DEA  4EB9 000030D2           2950                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DF0                          2951  
00002DF0  227C 00006942           2952  AND_ea_Dn_A5_out                MOVE.L          #ea_A5,A1                               ;load string constant into A1
00002DF6  4EB9 000030D2           2953                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002DFC                          2954  
00002DFC  227C 00006945           2955  AND_ea_Dn_A6_out                MOVE.L          #ea_A6,A1                               ;load string constant into A1
00002E02  4EB9 000030D2           2956                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E08                          2957  
00002E08  227C 00006948           2958  AND_ea_Dn_A7_out                MOVE.L          #ea_A7,A1                               ;load string constant into A1
00002E0E  4EB9 000030D2           2959                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E14                          2960  
00002E14                          2961  ;------------------Address Register Indirect-----------------------
00002E14  B4BC 00000010           2962  AND_ea_Dn_An_indir_reg           CMP.L          #match_AND_An_indir_r0,D2              ;check reg is equal to 0
00002E1A  6600 0006               2963                                   BNE             AND_ea_Dn_An_indir_reg1               ;if not try reg 1
00002E1E  6700 0064               2964                                   BEQ             AND_ea_Dn_An_indir_reg0_out           ;if equal go to output ANDroutine
00002E22                          2965  
00002E22  B4BC 00000011           2966  AND_ea_Dn_An_indir_reg1          CMP.L           #match_AND_An_indir_r1,D2             ;check reg is equal to 1
00002E28  6600 0006               2967                                   BNE             AND_ea_Dn_An_indir_reg2               ;if not try reg 2
00002E2C  6700 0062               2968                                   BEQ             AND_ea_Dn_An_indir_reg1_out           ;if equal go to output ANDroutine
00002E30                          2969  
00002E30  B4BC 00000012           2970  AND_ea_Dn_An_indir_reg2          CMP.L           #match_AND_An_indir_r2,D2             ;check reg is equal to 2
00002E36  6600 0006               2971                                   BNE             AND_ea_Dn_An_indir_reg3               ;if not try reg 3
00002E3A  6700 0060               2972                                   BEQ             AND_ea_Dn_An_indir_reg2_out           ;if equal go to output ANDroutine
00002E3E                          2973  
00002E3E  B4BC 00000013           2974  AND_ea_Dn_An_indir_reg3          CMP.L           #match_AND_An_indir_r3,D2             ;check reg is equal to 3
00002E44  6600 0006               2975                                   BNE             AND_ea_Dn_An_indir_reg4               ;if not try reg 4
00002E48  6700 005E               2976                                   BEQ             AND_ea_Dn_An_indir_reg3_out           ;if equal go to output ANDroutine
00002E4C                          2977      
00002E4C  B4BC 00000014           2978  AND_ea_Dn_An_indir_reg4          CMP.L           #match_AND_An_indir_r4,D2             ;check reg is equal to 4
00002E52  6600 0006               2979                                   BNE             AND_ea_Dn_An_indir_reg5               ;if not try reg 5
00002E56  6700 005C               2980                                   BEQ             AND_ea_Dn_An_indir_reg4_out           ;if equal go to output ANDroutine
00002E5A                          2981          
00002E5A  B4BC 00000015           2982  AND_ea_Dn_An_indir_reg5          CMP.L           #match_AND_An_indir_r5,D2             ;check reg is equal to 5
00002E60  6600 0006               2983                                   BNE             AND_ea_Dn_An_indir_reg6               ;if not try reg 6
00002E64  6700 005A               2984                                   BEQ             AND_ea_Dn_An_indir_reg5_out           ;if equal go to output ANDroutine
00002E68                          2985  
00002E68  B4BC 00000016           2986  AND_ea_Dn_An_indir_reg6          CMP.L           #match_AND_An_indir_r6,D2             ;check reg is equal to 6
00002E6E  6600 0006               2987                                   BNE             AND_ea_Dn_An_indir_reg7               ;if not try reg 7
00002E72  6700 0058               2988                                   BEQ             AND_ea_Dn_An_indir_reg6_out           ;if equal go to output ANDroutine
00002E76                          2989  
00002E76  B4BC 00000017           2990  AND_ea_Dn_An_indir_reg7          CMP.L           #match_AND_An_indir_r7,D2             ;check reg is equal to 7
00002E7C  6700 005A               2991                                   BEQ             AND_ea_Dn_An_indir_reg7_out           ;if equal go to output ANDroutine
00002E80  6600 06EA               2992                                   BNE             ERROR                                 ;if not equal to an addresssing mode, pritn error
00002E84                          2993  
00002E84                          2994  ;--------------------Address Register Indirect Output-----------------------
00002E84  227C 0000695B           2995  AND_ea_Dn_An_indir_reg0_out                 MOVE.L          #ea_indir_A0,A1                       ;load string constant into A1
00002E8A  4EB9 000030D2           2996                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E90                          2997  
00002E90  227C 00006960           2998  AND_ea_Dn_An_indir_reg1_out                 MOVE.L          #ea_indir_A1,A1                     ;load string constant into A1
00002E96  4EB9 000030D2           2999                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002E9C                          3000  
00002E9C  227C 00006965           3001  AND_ea_Dn_An_indir_reg2_out                 MOVE.L          #ea_indir_A2,A1                     ;load string constant into A1
00002EA2  4EB9 000030D2           3002                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EA8                          3003  
00002EA8  227C 0000696A           3004  AND_ea_Dn_An_indir_reg3_out                 MOVE.L          #ea_indir_A3,A1                     ;load string constant into A1
00002EAE  4EB9 000030D2           3005                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EB4                          3006  
00002EB4  227C 0000696F           3007  AND_ea_Dn_An_indir_reg4_out                 MOVE.L          #ea_indir_A4,A1                     ;load string constant into A1
00002EBA  4EB9 000030D2           3008                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EC0                          3009  
00002EC0  227C 00006974           3010  AND_ea_Dn_An_indir_reg5_out                 MOVE.L          #ea_indir_A5,A1                     ;load string constant into A1
00002EC6  4EB9 000030D2           3011                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002ECC                          3012  
00002ECC  227C 00006979           3013  AND_ea_Dn_An_indir_reg6_out                 MOVE.L          #ea_indir_A6,A1                     ;load string constant into A1
00002ED2  4EB9 000030D2           3014                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002ED8                          3015                                          
00002ED8  227C 0000697E           3016  AND_ea_Dn_An_indir_reg7_out                 MOVE.L          #ea_indir_A7,A1                     ;load string constant into A1
00002EDE  4EB9 000030D2           3017                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002EE4                          3018  
00002EE4                          3019  ;------------------Address Register Indirect with Post Increment-----------------------
00002EE4  B4BC 00000018           3020  AND_ea_Dn_An_indir_pinc_reg                 CMP.L      #match_AND_An_indir_postinc_r0,D2                    ;check reg is equal to 0
00002EEA  6600 0006               3021                                              BNE        AND_ea_Dn_An_indir_pinc_r1                      ;if not try reg 1
00002EEE  6700 0064               3022                                              BEQ        AND_ea_Dn_An_indir_pinc_r0_out                  ;if equal go to output ANDroutine
00002EF2                          3023  
00002EF2  B4BC 00000019           3024  AND_ea_Dn_An_indir_pinc_r1                  CMP.L      #match_AND_An_indir_postinc_r1,D2                    ;check reg is equal to 1
00002EF8  6600 0006               3025                                              BNE        AND_ea_Dn_An_indir_pinc_r2                      ;if not try reg 2
00002EFC  6700 0062               3026                                              BEQ        AND_ea_Dn_An_indir_pinc_r1_out                  ;if equal go to output ANDroutine
00002F00                          3027  
00002F00  B4BC 0000001A           3028  AND_ea_Dn_An_indir_pinc_r2                  CMP.L      #match_AND_An_indir_postinc_r2,D2                    ;check reg is equal to 2
00002F06  6600 0006               3029                                              BNE        AND_ea_Dn_An_indir_pinc_r3                      ;if not try reg 3
00002F0A  6700 0060               3030                                              BEQ        AND_ea_Dn_An_indir_pinc_r2_out                  ;if equal go to output ANDroutine
00002F0E                          3031  
00002F0E  B4BC 0000001B           3032  AND_ea_Dn_An_indir_pinc_r3                  CMP.L      #match_AND_An_indir_postinc_r3,D2                    ;check reg is equal to 3
00002F14  6600 0006               3033                                              BNE        AND_ea_Dn_An_indir_pinc_r4                      ;if not try reg 4
00002F18  6700 005E               3034                                              BEQ        AND_ea_Dn_An_indir_pinc_r3_out                  ;if equal go to output ANDroutine
00002F1C                          3035   
00002F1C  B4BC 0000001C           3036  AND_ea_Dn_An_indir_pinc_r4                  CMP.L      #match_AND_An_indir_postinc_r4,D2                    ;check reg is equal to 4
00002F22  6600 0006               3037                                              BNE        AND_ea_Dn_An_indir_pinc_r5                      ;if not try reg 5
00002F26  6700 005C               3038                                              BEQ        AND_ea_Dn_An_indir_pinc_r4_out                  ;if equal go to output ANDroutine
00002F2A                          3039  
00002F2A  B4BC 0000001D           3040  AND_ea_Dn_An_indir_pinc_r5                  CMP.L      #match_AND_An_indir_postinc_r5,D2                    ;check reg is equal to 5
00002F30  6600 0006               3041                                              BNE        AND_ea_Dn_An_indir_pinc_r6                      ;if not try reg 6
00002F34  6700 005A               3042                                              BEQ        AND_ea_Dn_An_indir_pinc_r5_out                  ;if equal go to output ANDroutine
00002F38                          3043  
00002F38  B4BC 0000001E           3044  AND_ea_Dn_An_indir_pinc_r6                  CMP.L      #match_AND_An_indir_postinc_r6,D2                      ;check reg is equal to 6
00002F3E  6600 0006               3045                                              BNE        AND_ea_Dn_An_indir_pinc_r7                        ;if not try reg 7
00002F42  6700 0058               3046                                              BEQ        AND_ea_Dn_An_indir_pinc_r6_out                    ;if equal go to output ANDroutine
00002F46                          3047  
00002F46  B4BC 0000001F           3048  AND_ea_Dn_An_indir_pinc_r7                  CMP.L      #match_AND_An_indir_postinc_r7,D2                      ;check reg is equal to 7
00002F4C  6700 005A               3049                                              BEQ        AND_ea_Dn_An_indir_pinc_r7_out                    ;if equal go to output ANDroutine
00002F50  6600 061A               3050                                              BNE        ERROR                                                  ;if not equal to an addresssing mode, pritn error
00002F54                          3051  
00002F54                          3052  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00002F54  227C 00006983           3053  AND_ea_Dn_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1               ;load string constant into A1
00002F5A  4EB9 000030D2           3054                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F60                          3055  
00002F60  227C 00006989           3056  AND_ea_Dn_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1               ;load string constant into A1
00002F66  4EB9 000030D2           3057                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F6C                          3058  
00002F6C  227C 0000698F           3059  AND_ea_Dn_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1               ;load string constant into A1
00002F72  4EB9 000030D2           3060                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F78                          3061  
00002F78  227C 00006995           3062  AND_ea_Dn_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1               ;load string constant into A1
00002F7E  4EB9 000030D2           3063                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F84                          3064  
00002F84  227C 0000699B           3065  AND_ea_Dn_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1               ;load string constant into A1
00002F8A  4EB9 000030D2           3066                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F90                          3067  
00002F90  227C 000069A1           3068  AND_ea_Dn_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1               ;load string constant into A1
00002F96  4EB9 000030D2           3069                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002F9C                          3070  
00002F9C  227C 000069A7           3071  AND_ea_Dn_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1               ;load string constant into A1
00002FA2  4EB9 000030D2           3072                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FA8                          3073  
00002FA8  227C 000069AD           3074  AND_ea_Dn_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1               ;load string constant into A1
00002FAE  4EB9 000030D2           3075                                              JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00002FB4                          3076  
00002FB4                          3077  
00002FB4                          3078  ;------------------Address Register Indirect with Pre Decrement-----------------------
00002FB4  B4BC 00000020           3079  AND_ea_Dn_An_indir_predec                       CMP.L      #match_AND_An_indir_predec_reg0,D2               ;check reg is equal to 0
00002FBA  6600 0006               3080                                                  BNE        AND_ea_Dn_An_indir_pdec_r1                   ;if not try reg 1
00002FBE  6700 0064               3081                                                  BEQ        AND_ea_Dn_An_indir_pdec_r0_out               ;if equal go to output ANDroutine
00002FC2                          3082  
00002FC2  B4BC 00000021           3083  AND_ea_Dn_An_indir_pdec_r1                      CMP.L      #match_AND_An_indir_predec_reg1,D2               ;check reg is equal to 1
00002FC8  6600 0006               3084                                                  BNE        AND_ea_Dn_An_indir_pdec_r2                   ;if not try reg 2
00002FCC  6700 0062               3085                                                  BEQ        AND_ea_Dn_An_indir_pdec_r1_out               ;if equal go to output ANDroutine
00002FD0                          3086  
00002FD0  B4BC 00000022           3087  AND_ea_Dn_An_indir_pdec_r2                      CMP.L      #match_AND_An_indir_predec_reg2,D2               ;check reg is equal to 2
00002FD6  6600 0006               3088                                                  BNE        AND_ea_Dn_An_indir_pdec_r3                   ;if not try reg 3
00002FDA  6700 0060               3089                                                  BEQ        AND_ea_Dn_An_indir_pdec_r2_out               ;if equal go to output ANDroutine
00002FDE                          3090  
00002FDE  B4BC 00000023           3091  AND_ea_Dn_An_indir_pdec_r3                      CMP.L      #match_AND_An_indir_predec_reg3,D2               ;check reg is equal to 3
00002FE4  6600 0006               3092                                                  BNE        AND_ea_Dn_An_indir_pdec_r4                   ;if not try reg 4
00002FE8  6700 005E               3093                                                  BEQ        AND_ea_Dn_An_indir_pdec_r3_out               ;if equal go to output ANDroutine
00002FEC                          3094  
00002FEC  B4BC 00000024           3095  AND_ea_Dn_An_indir_pdec_r4                      CMP.L      #match_AND_An_indir_predec_reg4,D2               ;check reg is equal to 4
00002FF2  6600 0006               3096                                                  BNE        AND_ea_Dn_An_indir_pdec_r5                   ;if not try reg 5
00002FF6  6700 005C               3097                                                  BEQ        AND_ea_Dn_An_indir_pdec_r4_out               ;if equal go to output ANDroutine
00002FFA                          3098  
00002FFA  B4BC 00000025           3099  AND_ea_Dn_An_indir_pdec_r5                      CMP.L      #match_AND_An_indir_predec_reg5,D2               ;check reg is equal to 5
00003000  6600 0006               3100                                                  BNE        AND_ea_Dn_An_indir_pdec_r6                   ;if not try reg 6
00003004  6700 005A               3101                                                  BEQ        AND_ea_Dn_An_indir_pdec_r5_out               ;if equal go to output ANDroutine
00003008                          3102  
00003008  B4BC 00000026           3103  AND_ea_Dn_An_indir_pdec_r6                      CMP.L      #match_AND_An_indir_predec_reg6,D2               ;check reg is equal to 6
0000300E  6600 0006               3104                                                  BNE        AND_ea_Dn_An_indir_pdec_r7                   ;if not try reg 7
00003012  6700 0058               3105                                                  BEQ        AND_ea_Dn_An_indir_pdec_r6_out               ;if equal go to output ANDroutine
00003016                          3106  
00003016  B4BC 00000027           3107  AND_ea_Dn_An_indir_pdec_r7                      CMP.L      #match_AND_An_indir_predec_reg7,D2               ;check reg is equal to 7
0000301C  6700 005A               3108                                                  BEQ        AND_ea_Dn_An_indir_pdec_r7_out               ;if equal go to output ANDroutine
00003020  6600 054A               3109                                                  BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
00003024                          3110  
00003024                          3111  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00003024  227C 000069B3           3112  AND_ea_Dn_An_indir_pdec_r0_out                  MOVE.L          #ea_indir_predec_A0,A1           ;load string constant into A1
0000302A  4EB9 000030D2           3113                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003030                          3114                                              
00003030  227C 000069B9           3115  AND_ea_Dn_An_indir_pdec_r1_out                  MOVE.L          #ea_indir_predec_A1,A1           ;load string constant into A1
00003036  4EB9 000030D2           3116                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
0000303C                          3117  
0000303C  227C 000069BF           3118  AND_ea_Dn_An_indir_pdec_r2_out                  MOVE.L          #ea_indir_predec_A2,A1           ;load string constant into A1
00003042  4EB9 000030D2           3119                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003048                          3120  
00003048  227C 000069C5           3121  AND_ea_Dn_An_indir_pdec_r3_out                  MOVE.L          #ea_indir_predec_A3,A1           ;load string constant into A1
0000304E  4EB9 000030D2           3122                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003054                          3123  
00003054  227C 000069CB           3124  AND_ea_Dn_An_indir_pdec_r4_out                  MOVE.L          #ea_indir_predec_A4,A1           ;load string constant into A1
0000305A  4EB9 000030D2           3125                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003060                          3126  
00003060  227C 000069D1           3127  AND_ea_Dn_An_indir_pdec_r5_out                  MOVE.L          #ea_indir_predec_A5,A1           ;load string constant into A1
00003066  4EB9 000030D2           3128                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
0000306C                          3129  
0000306C  227C 000069D7           3130  AND_ea_Dn_An_indir_pdec_r6_out                  MOVE.L          #ea_indir_predec_A6,A1           ;load string constant into A1
00003072  4EB9 000030D2           3131                                                  JSR             AND_determine_second_op                  ;jump to ANDroutine to determine second operand
00003078                          3132  
00003078  227C 000069DD           3133  AND_ea_Dn_An_indir_pdec_r7_out                  MOVE.L          #ea_indir_predec_A7,A1           ;load string constant into A1
0000307E  4EB9 000030D2           3134                                                  JSR             AND_determine_second_op                 ;jump to ANDroutine to determine second operand
00003084                          3135          
00003084                          3136  ;------------------Absolute Addressing Output-----------------------
00003084  22FC 000069ED           3137  AND_ea_Dn_abs_add_word_out                MOVE.L      #ea_$,(A1)+                       ;load $ for hex and increment A1
0000308A  22C5                    3138                                            MOVE.L      D5,(A1)+                          ;load address                  
0000308C  4EB9 000030D2           3139                                            JSR         AND_determine_second_op           ;jump to ANDroutine to determine second operand
00003092                          3140                                             
00003092                          3141  
00003092  2A18                    3142  AND_ea_Dn_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00003094  22FC 000069ED           3143                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000309A  22C5                    3144                                           MOVE.L      D5,(A1)+                           ;load address                  
0000309C  4EB9 000030D2           3145                                           JSR         AND_determine_second_op            ;jump to ANDroutine to determine second operand
000030A2                          3146  
000030A2                          3147  ;---------------Immediate Addresing---------------------------
000030A2  2A18                    3148  AND_ea_Dn_immediate_add_out         MOVE.L      (A0)+,D5                           ;capture the immediate address
000030A4  BCBC 000000FC           3149                                      CMP.L       #match_AND_imm_add_word,D6         ;check to see if need to pull word
000030AA  2A18                    3150                                      MOVE.L      (A0)+,D5                           ;pull the word
000030AC  6700 0006               3151                                      BEQ         AND_ea_Dn_imm_add_w                ;if equal go pull word    
000030B0  6600 0010               3152                                      BNE         AND_ea_Dn_imm_add_l                ;if not equal, go check long
000030B4                          3153                                           
000030B4  22FC 000069ED           3154  AND_ea_Dn_imm_add_w                 MOVE.L     #ea_$,(A1)+                         ;load the $
000030BA  32C5                    3155                                      MOVE.W     D5,(A1)+                            ;load the word address                           
000030BC  4EB9 000030D2           3156                                      JSR        AND_determine_second_op             ;jump to ANDroutine to determine second operand
000030C2                          3157                                           
000030C2  2A18                    3158  AND_ea_Dn_imm_add_l                 MOVE.L     (A0)+,D5                            ;pull the long and increase the pointer
000030C4  22FC 000069ED           3159                                      MOVE.L     #ea_$,(A1)+                         ;load the $
000030CA  2245                    3160                                      MOVE.L     D5,A1                               ;move to A1
000030CC  4EB9 000030D2           3161                                      JSR        AND_determine_second_op             ;jump to ANDroutine to determine second operand
000030D2                          3162  
000030D2                          3163  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000030D2  4282                    3164  AND_determine_second_op                         CLR.L       D2                          ;clear D2 
000030D4  C4BC 00000E00           3165                                                  AND.L       #mask_AND_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
000030DA                          3166                                                  
000030DA  B4BC 00000000           3167  ea_Dn_AND_reg0                                  CMP.L       #match_AND_reg0,D2            ;check to see if reg equal 0
000030E0  6600 0006               3168                                                  BNE         ea_Dn_AND_reg1              ;if not equal got check reg 1
000030E4  6700 0064               3169                                                  BEQ         ea_Dn_AND_reg0_out          ;if equal go to output
000030E8                          3170                                                  
000030E8  B4BC 00000200           3171  ea_Dn_AND_reg1                                  CMP.L       #match_AND_reg1,D2             ;check to see if reg equal 1
000030EE  6600 0006               3172                                                  BNE         ea_Dn_AND_reg2               ;if not equal got check reg 2
000030F2  6700 0062               3173                                                  BEQ         ea_Dn_AND_reg1_out           ;if equal go to output
000030F6                          3174  
000030F6  B4BC 00000400           3175  ea_Dn_AND_reg2                                  CMP.L       #match_AND_reg2,D2             ;check to see if reg equal 2
000030FC  6600 0006               3176                                                  BNE         ea_Dn_AND_reg3               ;if not equal got check reg 3
00003100  6700 0060               3177                                                  BEQ         ea_Dn_AND_reg2_out           ;if equal go to output
00003104                          3178  
00003104  B4BC 00000600           3179  ea_Dn_AND_reg3                                  CMP.L       #match_AND_reg3,D2             ;check to see if reg equal 3
0000310A  6600 0006               3180                                                  BNE         ea_Dn_AND_reg4               ;if not equal got check reg 4
0000310E  6700 005E               3181                                                  BEQ         ea_Dn_AND_reg3_out           ;if equal go to output
00003112                          3182                                                  
00003112  B4BC 00000800           3183  ea_Dn_AND_reg4                                  CMP.L       #match_AND_reg4,D2             ;check to see if reg equal 4
00003118  6600 0006               3184                                                  BNE         ea_Dn_AND_reg5               ;if not equal got check reg 5
0000311C  6700 005C               3185                                                  BEQ         ea_Dn_AND_reg4_out           ;if equal go to output
00003120                          3186  
00003120  B4BC 00000A00           3187  ea_Dn_AND_reg5                                  CMP.L       #match_AND_reg5,D2             ;check to see if reg equal 5
00003126  6600 0006               3188                                                  BNE         ea_Dn_AND_reg6               ;if not equal got check reg 6
0000312A  6700 005A               3189                                                  BEQ         ea_Dn_AND_reg5_out           ;if equal go to output
0000312E                          3190  
0000312E  B4BC 00000C00           3191  ea_Dn_AND_reg6                                  CMP.L       #match_AND_reg6,D2             ;check to see if reg equal 6
00003134  6600 0006               3192                                                  BNE         ea_Dn_AND_reg7               ;if not equal got check reg 7
00003138  6700 0058               3193                                                  BEQ         ea_Dn_AND_reg6_out           ;if equal go to output         
0000313C                          3194  
0000313C  B4BC 00000E00           3195  ea_Dn_AND_reg7                                  CMP.L       #match_AND_reg7,D2             ;check to see if reg equal 7
00003142  6700 005A               3196                                                  BEQ         ea_Dn_AND_reg7_out           ;if equal go to output
00003146  6600 0424               3197                                                  BNE         ERROR                          ;if not equal to an addresssing mode, pritn error
0000314A                          3198                                  
0000314A                          3199  
0000314A                          3200  ;--------------------Data Output-----------------------
0000314A  227C 0000691B           3201  ea_Dn_AND_reg0_out                              MOVE.L          #ea_D0,A1                        ;load string constant into A1
00003150  4CDF 7CBE               3202                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003154  4E75                    3203                                                  RTS
00003156                          3204                                              
00003156  227C 0000691E           3205  ea_Dn_AND_reg1_out                              MOVE.L          #ea_D1,A1                       ;load string constant into A1
0000315C  4CDF 7CBE               3206                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003160  4E75                    3207                                                  RTS
00003162                          3208                                              
00003162  227C 00006921           3209  ea_Dn_AND_reg2_out                              MOVE.L          #ea_D2,A1                       ;load string constant into A1
00003168  4CDF 7CBE               3210                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000316C  4E75                    3211                                                  RTS
0000316E                          3212                                              
0000316E  227C 00006924           3213  ea_Dn_AND_reg3_out                              MOVE.L          #ea_D3,A1                       ;load string constant into A1
00003174  4CDF 7CBE               3214                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003178  4E75                    3215                                                  RTS
0000317A                          3216                                              
0000317A  227C 00006927           3217  ea_Dn_AND_reg4_out                              MOVE.L          #ea_D4,A1                       ;load string constant into A1
00003180  4CDF 7CBE               3218                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003184  4E75                    3219                                                  RTS
00003186                          3220                                              
00003186  227C 0000692A           3221  ea_Dn_AND_reg5_out                              MOVE.L          #ea_D5,A1                       ;load string constant into A1
0000318C  4CDF 7CBE               3222                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003190  4E75                    3223                                                  RTS
00003192                          3224                                              
00003192  227C 0000692D           3225  ea_Dn_AND_reg6_out                              MOVE.L          #ea_D6,A1                       ;load string constant into A1
00003198  4CDF 7CBE               3226                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000319C  4E75                    3227                                                  RTS
0000319E                          3228                                              
0000319E  227C 00006930           3229  ea_Dn_AND_reg7_out                              MOVE.L          #ea_D7,A1                       ;load string constant into A1
000031A4  4CDF 7CBE               3230                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000031A8  4E75                    3231                                                  RTS             
000031AA                          3232                                              
000031AA                          3233                      
000031AA                          3234  
000031AA                          3235  
000031AA                          3236  
000031AA                          3237  
000031AA                          3238  
000031AA                          3239  
000031AA                          3240  
000031AA                          3241  
000031AA                          3242  
000031AA                          3243  
000031AA                          3244  
000031AA                          3245  
000031AA                          3246  
000031AA                          3247  
000031AA                          3248  
000031AA                          3249  
000031AA                          3250  
000031AA                          3251  
000031AA                          3252  
000031AA                          3253  
000031AA                          3254  
000031AA                          3255  
000031AA                          3256  
000031AA                          3257  
000031AA                          3258  
000031AA                          3259  
000031AA                          3260  
000031AA                          3261  
000031AA                          3262  
000031AA                          3263  
000031AA                          3264                          
000031AA                          3265  ;------------------------------------------------------------------------------------------------------------------------------------------
000031AA                          3266  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
000031AA                          3267  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000031AA  4282                    3268  AND_Dn_ea                                       CLR.L       D2                                ;clear D2 
000031AC  C4BC 00000E00           3269                                                  AND.L       #mask_AND_An_reg,D2           ;load the mask for the register into D2, masks bit 11-9
000031B2                          3270                                                  
000031B2  B4BC 00000000           3271  Dn_ea_AND_reg0                                  CMP.L       #match_AND_reg0,D2                  ;check to see if reg equal 0
000031B8  6600 0006               3272                                                  BNE         Dn_ea_AND_reg1                  ;if not equal got check reg 1
000031BC  6700 0064               3273                                                  BEQ         Dn_ea_AND_reg0_out              ;if equal go to output
000031C0                          3274                                                  
000031C0  B4BC 00000200           3275  Dn_ea_AND_reg1                                  CMP.L       #match_AND_reg1,D2                  ;check to see if reg equal 1
000031C6  6600 0006               3276                                                  BNE         Dn_ea_AND_reg2                  ;if not equal got check reg 2
000031CA  6700 0062               3277                                                  BEQ         Dn_ea_AND_reg1_out              ;if equal go to output
000031CE                          3278  
000031CE  B4BC 00000400           3279  Dn_ea_AND_reg2                                  CMP.L       #match_AND_reg2,D2                  ;check to see if reg equal 2
000031D4  6600 0006               3280                                                  BNE         Dn_ea_AND_reg3                  ;if not equal got check reg 3
000031D8  6700 0060               3281                                                  BEQ         Dn_ea_AND_reg2_out              ;if equal go to output
000031DC                          3282  
000031DC  B4BC 00000600           3283  Dn_ea_AND_reg3                                  CMP.L       #match_AND_reg3,D2                  ;check to see if reg equal 3
000031E2  6600 0006               3284                                                  BNE         Dn_ea_AND_reg4                  ;if not equal got check reg 4
000031E6  6700 005E               3285                                                  BEQ         Dn_ea_AND_reg3_out              ;if equal go to output
000031EA                          3286                                                  
000031EA  B4BC 00000800           3287  Dn_ea_AND_reg4                                  CMP.L       #match_AND_reg4,D2                  ;check to see if reg equal 4
000031F0  6600 0006               3288                                                  BNE         Dn_ea_AND_reg5                  ;if not equal got check reg 5
000031F4  6700 005C               3289                                                  BEQ         Dn_ea_AND_reg4_out              ;if equal go to output
000031F8                          3290  
000031F8  B4BC 00000A00           3291  Dn_ea_AND_reg5                                  CMP.L       #match_AND_reg5,D2                  ;check to see if reg equal 5
000031FE  6600 0006               3292                                                  BNE         Dn_ea_AND_reg6                  ;if not equal got check reg 6
00003202  6700 005A               3293                                                  BEQ         Dn_ea_AND_reg5_out              ;if equal go to output
00003206                          3294  
00003206  B4BC 00000C00           3295  Dn_ea_AND_reg6                                  CMP.L       #match_AND_reg6,D2                  ;check to see if reg equal 6
0000320C  6600 0006               3296                                                  BNE         Dn_ea_AND_reg7                  ;if not equal got check reg 7
00003210  6700 0058               3297                                                  BEQ         Dn_ea_AND_reg6_out              ;if equal go to output          
00003214                          3298  
00003214  B4BC 00000E00           3299  Dn_ea_AND_reg7                                  CMP.L       #match_AND_reg7,D2                  ;check to see if reg equal 7
0000321A  6700 005A               3300                                                  BEQ         Dn_ea_AND_reg7_out              ;if equal go to output
0000321E  6600 034C               3301                                                  BNE          ERROR                                ;if not equal to an addresssing mode, pritn error
00003222                          3302                                  
00003222                          3303  
00003222                          3304  ;--------------------Data Output-----------------------
00003222  227C 0000691B           3305  Dn_ea_AND_reg0_out               MOVE.L         #ea_D0,A1                                          ;load string constant into A1
00003228  4EB9 00003282           3306                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
0000322E                          3307                                              
0000322E  227C 0000691E           3308  Dn_ea_AND_reg1_out               MOVE.L         #ea_D1,A1                                       ;load string constant into A1
00003234  4EB9 00003282           3309                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
0000323A                          3310                                              
0000323A  227C 00006921           3311  Dn_ea_AND_reg2_out               MOVE.L         #ea_D2,A1                                       ;load string constant into A1
00003240  4EB9 00003282           3312                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003246                          3313                                              
00003246  227C 00006924           3314  Dn_ea_AND_reg3_out               MOVE.L         #ea_D3,A1                                           ;load string constant into A1
0000324C  4EB9 00003282           3315                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003252                          3316                                              
00003252  227C 00006927           3317  Dn_ea_AND_reg4_out               MOVE.L         #ea_D4,A1                                           ;load string constant into A1
00003258  4EB9 00003282           3318                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
0000325E                          3319                                              
0000325E  227C 0000692A           3320  Dn_ea_AND_reg5_out               MOVE.L         #ea_D5,A1                                           ;load string constant into A1
00003264  4EB9 00003282           3321                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
0000326A                          3322                                              
0000326A  227C 0000692D           3323  Dn_ea_AND_reg6_out               MOVE.L         #ea_D6,A1                                           ;load string constant into A1
00003270  4EB9 00003282           3324                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003276                          3325                                              
00003276  227C 00006930           3326  Dn_ea_AND_reg7_out               MOVE.L         #ea_D7,A1                                           ;load string constant into A1
0000327C  4EB9 00003282           3327                                   JSR            AND_determine_second_operand                 ;jump to ANDroutine to determine second operand
00003282                          3328                                              
00003282                          3329  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00003282  4241                    3330  AND_determine_second_operand         CLR               D1                                            ;clear D1 to load new mask                                
00003284  C2BC 00000038           3331                                   AND.L             #mask_AND_ea_mode,D1                        ;move the mask to D1
0000328A                          3332  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000328A  B2BC 00000010           3333  Dn_ea_add_reg_indir              CMP.L             #match_AND_An_indir,D1                      ;check to see if mode is add reg indir
00003290  6600 0006               3334                                   BNE               Dn_ea_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00003294  6700 0048               3335                                   BEQ               Dn_ea_An_indir_reg                                  ;if equal go figure out the register           
00003298                          3336             
00003298  B2BC 00000020           3337  Dn_ea_add_reg_indir_predec       CMP.L             #match_AND_An_indir_predec,D1               ;check to see if mode is add reg indor w/ postinc
0000329E  6600 0006               3338                                   BNE               Dn_ea_add_reg_indir_postinc                         ;if not go check add reg indir/predec
000032A2  6700 01DA               3339                                   BEQ               Dn_ea_An_indir_predec                               ;if equal go figure out the register
000032A6                          3340                        
000032A6  B2BC 00000018           3341  Dn_ea_add_reg_indir_postinc      CMP.L             #match_AND_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
000032AC  6600 0006               3342                                   BNE               Dn_ea_abs_add_word                                  ;if not go check abs add word
000032B0  6700 00FC               3343                                   BEQ               Dn_ea_An_indir_postinc_reg                          ;if equal go figure out the register
000032B4                          3344  
000032B4  C4BC 0000003F           3345  Dn_ea_abs_add_word               AND.L             #mask_AND_abs_add,D2                        ;load mask to determine if abs add word or long
000032BA                          3346                                   
000032BA  B4BC 00000038           3347                                   CMP.L             #match_AND_abs_add_word,D2                  ;check if abs add word
000032C0  2A18                    3348                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000032C2  6600 0006               3349                                   BNE               Dn_ea_abs_add_long                                  ;if not go check abs add long
000032C6  6700 0286               3350                                   BEQ               Dn_ea_abs_add_word_out                              ;if equal go to output
000032CA                          3351    
000032CA  B4BC 00000039           3352  Dn_ea_abs_add_long               CMP.L             #match_AND_abs_add_long,D2                  ;check to see if abs add long
000032D0  6700 028A               3353                                   BEQ               Dn_ea_abs_add_long_out                              ;if equal go to output
000032D4  6600 0296               3354                                   BNE               ERROR                                         ;if not equal go to error mesage AND routine
000032D8                          3355  
000032D8                          3356  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000032D8                          3357                                   
000032D8  C4BC 0000003F           3358                                   AND.L              #mask_AND_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
000032DE                          3359  ;------------------Address Register Indirect-----------------------
000032DE  B4BC 00000010           3360  Dn_ea_An_indir_reg               CMP.L          #match_AND_An_indir_r0,D2              ;check reg is equal to 0
000032E4  6600 0006               3361                                   BNE             Dn_ea_An_indir_reg1                           ;if not try reg 1
000032E8  6700 0064               3362                                   BEQ             Dn_ea_An_indir_reg0_out                       ;if equal go to output ANDroutine
000032EC                          3363  
000032EC  B4BC 00000011           3364  Dn_ea_An_indir_reg1              CMP.L           #match_AND_An_indir_r1,D2              ;check reg is equal to 1
000032F2  6600 0006               3365                                   BNE             Dn_ea_An_indir_reg2                           ;if not try reg 2
000032F6  6700 0062               3366                                   BEQ             Dn_ea_An_indir_reg1_out                       ;if equal go to output ANDroutine
000032FA                          3367  
000032FA  B4BC 00000012           3368  Dn_ea_An_indir_reg2              CMP.L           #match_AND_An_indir_r2,D2              ;check reg is equal to 2
00003300  6600 0006               3369                                   BNE             Dn_ea_An_indir_reg3                           ;if not try reg 3
00003304  6700 0060               3370                                   BEQ             Dn_ea_An_indir_reg2_out                       ;if equal go to output ANDroutine
00003308                          3371  
00003308  B4BC 00000013           3372  Dn_ea_An_indir_reg3              CMP.L           #match_AND_An_indir_r3,D2              ;check reg is equal to 3
0000330E  6600 0006               3373                                   BNE             Dn_ea_An_indir_reg4                           ;if not try reg 4
00003312  6700 005E               3374                                   BEQ             Dn_ea_An_indir_reg3_out                       ;if equal go to output ANDroutine
00003316                          3375      
00003316  B4BC 00000014           3376  Dn_ea_An_indir_reg4              CMP.L           #match_AND_An_indir_r4,D2              ;check reg is equal to 4
0000331C  6600 0006               3377                                   BNE             Dn_ea_An_indir_reg5                           ;if not try reg 5
00003320  6700 005C               3378                                   BEQ             Dn_ea_An_indir_reg4_out                       ;if equal go to output ANDroutine
00003324                          3379          
00003324  B4BC 00000015           3380  Dn_ea_An_indir_reg5              CMP.L           #match_AND_An_indir_r5,D2              ;check reg is equal to 5
0000332A  6600 0006               3381                                   BNE             Dn_ea_An_indir_reg6                           ;if not try reg 6
0000332E  6700 005A               3382                                   BEQ             Dn_ea_An_indir_reg5_out                       ;if equal go to output ANDroutine
00003332                          3383  
00003332  B4BC 00000016           3384  Dn_ea_An_indir_reg6              CMP.L           #match_AND_An_indir_r6,D2              ;check reg is equal to 6
00003338  6600 0006               3385                                   BNE             Dn_ea_An_indir_reg7                           ;if not try reg 7
0000333C  6700 0058               3386                                   BEQ             Dn_ea_An_indir_reg6_out                       ;if equal go to output ANDroutine
00003340                          3387  
00003340  B4BC 00000017           3388  Dn_ea_An_indir_reg7              CMP.L           #match_AND_An_indir_r7,D2              ;check reg is equal to 7
00003346  6700 005A               3389                                   BEQ             Dn_ea_An_indir_reg7_out                       ;if equal go to output ANDroutine
0000334A  6600 0220               3390                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
0000334E                          3391  
0000334E                          3392  ;--------------------Address Register Indirect Output-----------------------
0000334E  227C 0000695B           3393  Dn_ea_An_indir_reg0_out         MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00003354  4CDF 7CBE               3394                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003358  4E75                    3395                                   RTS
0000335A                          3396  
0000335A  227C 00006960           3397  Dn_ea_An_indir_reg1_out         MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00003360  4CDF 7CBE               3398                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003364  4E75                    3399                                   RTS
00003366                          3400  
00003366  227C 00006965           3401  Dn_ea_An_indir_reg2_out         MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
0000336C  4CDF 7CBE               3402                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003370  4E75                    3403                                   RTS
00003372                          3404  
00003372  227C 0000696A           3405  Dn_ea_An_indir_reg3_out         MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00003378  4CDF 7CBE               3406                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000337C  4E75                    3407                                   RTS
0000337E                          3408  
0000337E  227C 0000696F           3409  Dn_ea_An_indir_reg4_out         MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
00003384  4CDF 7CBE               3410                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003388  4E75                    3411                                   RTS
0000338A                          3412  
0000338A  227C 00006974           3413  Dn_ea_An_indir_reg5_out         MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00003390  4CDF 7CBE               3414                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003394  4E75                    3415                                   RTS
00003396                          3416  
00003396  227C 00006979           3417  Dn_ea_An_indir_reg6_out         MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
0000339C  4CDF 7CBE               3418                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000033A0  4E75                    3419                                   RTS
000033A2                          3420                                          
000033A2  227C 0000697E           3421  Dn_ea_An_indir_reg7_out         MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
000033A8  4CDF 7CBE               3422                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000033AC  4E75                    3423                                   RTS
000033AE                          3424  
000033AE                          3425  ;------------------Address Register Indirect with Post Increment-----------------------
000033AE  B4BC 00000018           3426  Dn_ea_An_indir_postinc_reg                  CMP.L      #match_AND_An_indir_postinc_r0,D2        ;check reg is equal to 0
000033B4  6600 0006               3427                                              BNE        Dn_ea_An_indir_postinc_reg1                      ;if not try reg 1
000033B8  6700 0064               3428                                              BEQ        Dn_ea_An_indir_postinc_reg0_out                  ;if equal go to output ANDroutine
000033BC                          3429  
000033BC  B4BC 00000019           3430  Dn_ea_An_indir_postinc_reg1                 CMP.L      #match_AND_An_indir_postinc_r1,D2        ;check reg is equal to 1
000033C2  6600 0006               3431                                              BNE        Dn_ea_An_indir_postinc_reg2                      ;if not try reg 2
000033C6  6700 0062               3432                                              BEQ        Dn_ea_An_indir_postinc_reg1_out                  ;if equal go to output ANDroutine
000033CA                          3433  
000033CA  B4BC 0000001A           3434  Dn_ea_An_indir_postinc_reg2                 CMP.L      #match_AND_An_indir_postinc_r2,D2        ;check reg is equal to 2
000033D0  6600 0006               3435                                              BNE        Dn_ea_An_indir_postinc_reg3                      ;if not try reg 3
000033D4  6700 0060               3436                                              BEQ        Dn_ea_An_indir_postinc_reg2_out                  ;if equal go to output ANDroutine
000033D8                          3437  
000033D8  B4BC 0000001B           3438  Dn_ea_An_indir_postinc_reg3                 CMP.L      #match_AND_An_indir_postinc_r3,D2        ;check reg is equal to 3
000033DE  6600 0006               3439                                              BNE        Dn_ea_An_indir_postinc_reg4                      ;if not try reg 4
000033E2  6700 005E               3440                                              BEQ        Dn_ea_An_indir_postinc_reg3_out                  ;if equal go to output ANDroutine
000033E6                          3441   
000033E6  B4BC 0000001C           3442  Dn_ea_An_indir_postinc_reg4                 CMP.L      #match_AND_An_indir_postinc_r4,D2        ;check reg is equal to 4
000033EC  6600 0006               3443                                              BNE        Dn_ea_An_indir_postinc_reg5                      ;if not try reg 5
000033F0  6700 005C               3444                                              BEQ        Dn_ea_An_indir_postinc_reg4_out                  ;if equal go to output ANDroutine
000033F4                          3445  
000033F4  B4BC 0000001D           3446  Dn_ea_An_indir_postinc_reg5                 CMP.L      #match_AND_An_indir_postinc_r5,D2        ;check reg is equal to 5
000033FA  6600 0006               3447                                              BNE        Dn_ea_An_indir_postinc_reg6                      ;if not try reg 6
000033FE  6700 005A               3448                                              BEQ        Dn_ea_An_indir_postinc_reg5_out                  ;if equal go to output ANDroutine
00003402                          3449  
00003402  B4BC 0000001E           3450  Dn_ea_An_indir_postinc_reg6                 CMP.L      #match_AND_An_indir_postinc_r6,D2         ;check reg is equal to 6
00003408  6600 0006               3451                                              BNE        Dn_ea_An_indir_postinc_reg7                        ;if not try reg 7
0000340C  6700 0058               3452                                              BEQ        Dn_ea_An_indir_postinc_reg6_out                    ;if equal go to output ANDroutine
00003410                          3453  
00003410  B4BC 0000001F           3454  Dn_ea_An_indir_postinc_reg7                 CMP.L      #match_AND_An_indir_postinc_r7,D2         ;check reg is equal to 7
00003416  6700 005A               3455                                              BEQ        Dn_ea_An_indir_postinc_reg7_out                    ;if equal go to output ANDroutine
0000341A  6600 0150               3456                                              BNE        ERROR                                        :if not equal to an addresssing mode, pritn error
0000341E                          3457  
0000341E                          3458  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000341E  227C 00006983           3459  Dn_ea_An_indir_postinc_reg0_out             MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00003424  4CDF 7CBE               3460                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003428  4E75                    3461                                          RTS
0000342A                          3462  
0000342A  227C 00006989           3463  Dn_ea_An_indir_postinc_reg1_out             MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00003430  4CDF 7CBE               3464                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003434  4E75                    3465                                          RTS
00003436                          3466  
00003436  227C 0000698F           3467  Dn_ea_An_indir_postinc_reg2_out             MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
0000343C  4CDF 7CBE               3468                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003440  4E75                    3469                                          RTS
00003442                          3470  
00003442  227C 00006995           3471  Dn_ea_An_indir_postinc_reg3_out             MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00003448  4CDF 7CBE               3472                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000344C  4E75                    3473                                          RTS
0000344E                          3474  
0000344E  227C 0000699B           3475  Dn_ea_An_indir_postinc_reg4_out             MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00003454  4CDF 7CBE               3476                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003458  4E75                    3477                                          RTS
0000345A                          3478  
0000345A  227C 000069A1           3479  Dn_ea_An_indir_postinc_reg5_out             MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00003460  4CDF 7CBE               3480                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003464  4E75                    3481                                          RTS
00003466                          3482  
00003466  227C 000069A7           3483  Dn_ea_An_indir_postinc_reg6_out             MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
0000346C  4CDF 7CBE               3484                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003470  4E75                    3485                                          RTS
00003472                          3486  
00003472  227C 000069AD           3487  Dn_ea_An_indir_postinc_reg7_out             MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00003478  4CDF 7CBE               3488                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000347C  4E75                    3489                                          RTS
0000347E                          3490  
0000347E                          3491  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000347E  B4BC 00000020           3492  Dn_ea_An_indir_predec                       CMP.L      #match_AND_An_indir_predec_reg0,D2       ;check reg is equal to 0
00003484  6600 0006               3493                                              BNE        Dn_ea_An_indir_predec_reg1                      ;if not try reg 1
00003488  6700 0064               3494                                              BEQ        Dn_ea_An_indir_predec_reg0_out               ;if equal go to output ANDroutine
0000348C                          3495  
0000348C  B4BC 00000021           3496  Dn_ea_An_indir_predec_reg1                  CMP.L      #match_AND_An_indir_predec_reg1,D2       ;check reg is equal to 1
00003492  6600 0006               3497                                              BNE        Dn_ea_An_indir_predec_reg2                      ;if not try reg 2
00003496  6700 0062               3498                                              BEQ        Dn_ea_An_indir_predec_reg1_out               ;if equal go to output ANDroutine
0000349A                          3499  
0000349A  B4BC 00000022           3500  Dn_ea_An_indir_predec_reg2                  CMP.L      #match_AND_An_indir_predec_reg2,D2       ;check reg is equal to 2
000034A0  6600 0006               3501                                              BNE        Dn_ea_An_indir_predec_reg3                      ;if not try reg 3
000034A4  6700 0060               3502                                              BEQ        Dn_ea_An_indir_predec_reg2_out               ;if equal go to output ANDroutine
000034A8                          3503  
000034A8  B4BC 00000023           3504  Dn_ea_An_indir_predec_reg3                  CMP.L      #match_AND_An_indir_predec_reg3,D2       ;check reg is equal to 3
000034AE  6600 0006               3505                                              BNE        Dn_ea_An_indir_predec_reg4                      ;if not try reg 4
000034B2  6700 005E               3506                                              BEQ        Dn_ea_An_indir_predec_reg3_out               ;if equal go to output ANDroutine
000034B6                          3507  
000034B6  B4BC 00000024           3508  Dn_ea_An_indir_predec_reg4                  CMP.L      #match_AND_An_indir_predec_reg4,D2       ;check reg is equal to 4
000034BC  6600 0006               3509                                              BNE        Dn_ea_An_indir_predec_reg5                      ;if not try reg 5
000034C0  6700 005C               3510                                              BEQ        Dn_ea_An_indir_predec_reg4_out               ;if equal go to output ANDroutine
000034C4                          3511  
000034C4  B4BC 00000025           3512  Dn_ea_An_indir_predec_reg5                  CMP.L      #match_AND_An_indir_predec_reg5,D2       ;check reg is equal to 5
000034CA  6600 0006               3513                                              BNE        Dn_ea_An_indir_predec_reg6                     ;if not try reg 6
000034CE  6700 005A               3514                                              BEQ        Dn_ea_An_indir_predec_reg5_out               ;if equal go to output ANDroutine
000034D2                          3515  
000034D2  B4BC 00000026           3516  Dn_ea_An_indir_predec_reg6                  CMP.L      #match_AND_An_indir_predec_reg6,D2       ;check reg is equal to 6
000034D8  6600 0006               3517                                              BNE        Dn_ea_An_indir_predec_reg7                     ;if not try reg 7
000034DC  6700 0058               3518                                              BEQ        Dn_ea_An_indir_predec_reg6_out               ;if equal go to output ANDroutine
000034E0                          3519  
000034E0  B4BC 00000027           3520  Dn_ea_An_indir_predec_reg7                  CMP.L      #match_AND_An_indir_predec_reg7,D2       ;check reg is equal to 7
000034E6  6700 005A               3521                                              BEQ        Dn_ea_An_indir_predec_reg7_out               ;if equal go to output ANDroutine
000034EA  6600 0080               3522                                              BNE        ERROR                                    :if not equal to an addresssing mode, pritn error
000034EE                          3523  
000034EE                          3524  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000034EE  227C 000069B3           3525  Dn_ea_An_indir_predec_reg0_out             MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
000034F4  4CDF 7CBE               3526                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000034F8  4E75                    3527                                              RTS
000034FA                          3528                                              
000034FA  227C 000069B9           3529  Dn_ea_An_indir_predec_reg1_out             MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00003500  4CDF 7CBE               3530                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003504  4E75                    3531                                              RTS
00003506                          3532  
00003506  227C 000069BF           3533  Dn_ea_An_indir_predec_reg2_out             MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
0000350C  4CDF 7CBE               3534                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003510  4E75                    3535                                              RTS
00003512                          3536  
00003512  227C 000069C5           3537  Dn_ea_An_indir_predec_reg3_out             MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00003518  4CDF 7CBE               3538                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000351C  4E75                    3539                                              RTS
0000351E                          3540  
0000351E  227C 000069CB           3541  Dn_ea_An_indir_predec_reg4_out             MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00003524  4CDF 7CBE               3542                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003528  4E75                    3543                                              RTS
0000352A                          3544  
0000352A  227C 000069D1           3545  Dn_ea_An_indir_predec_reg5_out             MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00003530  4CDF 7CBE               3546                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003534  4E75                    3547                                              RTS
00003536                          3548  
00003536  227C 000069D7           3549  Dn_ea_An_indir_predec_reg6_out             MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
0000353C  4CDF 7CBE               3550                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003540  4E75                    3551                                              RTS
00003542                          3552  
00003542  227C 000069DD           3553  Dn_ea_An_indir_predec_reg7_out             MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00003548  4CDF 7CBE               3554                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000354C  4E75                    3555                                              RTS
0000354E                          3556                                              
0000354E                          3557  ;------------------Absolute Addressing Output-----------------------
0000354E  22FC 000069ED           3558  Dn_ea_abs_add_word_out                       MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00003554  22C5                    3559                                        MOVE.L      D5,(A1)+                           ;load address                  
00003556  4CDF 7CBE               3560                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000355A  4E75                    3561                                        RTS                                            :return to ANDroutine
0000355C                          3562                                             
0000355C                          3563  
0000355C  2A18                    3564  Dn_ea_abs_add_long_out                       MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
0000355E  22FC 000069ED           3565                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00003564  22C5                    3566                                        MOVE.L      D5,(A1)+                           ;load address                  
00003566  4CDF 7CBE               3567                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000356A  4E75                    3568                                        RTS                                            :return to ANDroutine                                                                             
0000356C                          3569  ;----------------------Error Handling----------------------------------------
0000356C  43F9 00006907           3570  ERROR                                           LEA     ERROR_MESSAGE,A1                                          ;load error messge into A3
00003572  4CDF 7CBE               3571                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003576  4E75                    3572                                                  RTS
00003578                          3573  
00003578  =000001C0               3574  mask_opmode                          EQU         $01C0                   ;mask for the opmode to determine operand order
00003578                          3575  
00003578  =00000038               3576  mask_AND_ea_mode                    EQU         $0038
00003578  =0000003F               3577  mask_AND_abs_add                    EQU         $003F
00003578  =0000003F               3578  mask_AND_ea_reg_and_mode            EQU         $003F
00003578  =00000E00               3579  mask_AND_An_reg                 EQU         $0E00
00003578                          3580  
00003578                          3581  
00003578  =00000100               3582  match_AND_b_ea_Dn                    EQU         $0100                ;match for ea,Dn byte size
00003578  =00000140               3583  match_AND_w_ea_Dn                    EQU         $0140                ;match for ea,Dn word size
00003578  =00000180               3584  match_AND_l_ea_Dn                    EQU         $0180                ;match for ea,Dn long size
00003578                          3585  
00003578  =00000000               3586  match_AND_b_Dn_ea                    EQU         $0000                ;match for Dn,ea byte size
00003578  =00000040               3587  match_AND_w_Dn_ea                    EQU         $0040                ;match for Dn,ea word size
00003578  =00000080               3588  match_AND_l_Dn_ea                    EQU         $0080                ;match for Dn,ea long size
00003578                          3589  
00003578                          3590  
00003578                          3591  
00003578  =00000000               3592  match_AND_Dn                        EQU         $0000
00003578  =00000010               3593  match_AND_An_indir                  EQU         $0010
00003578  =00000020               3594  match_AND_An_indir_predec           EQU         $0020
00003578  =00000018               3595  match_AND_An_indir_postinc          EQU         $0018
00003578  =00000038               3596  match_AND_abs_add_word              EQU         $0038
00003578  =00000039               3597  match_AND_abs_add_long              EQU         $0039
00003578                          3598  
00003578  =00000000               3599  match_AND_D0                            EQU         $0000
00003578  =00000001               3600  match_AND_D1                            EQU         $0001
00003578  =00000002               3601  match_AND_D2                            EQU         $0002
00003578  =00000003               3602  match_AND_D3                            EQU         $0003
00003578  =00000004               3603  match_AND_D4                            EQU         $0004
00003578  =00000005               3604  match_AND_D5                            EQU         $0005
00003578  =00000006               3605  match_AND_D6                            EQU         $0006
00003578  =00000007               3606  match_AND_D7                            EQU         $0007
00003578                          3607  
00003578  =00000008               3608  match_AND_A0                            EQU         $0008
00003578  =00000009               3609  match_AND_A1                            EQU         $0009
00003578  =0000000A               3610  match_AND_A2                            EQU         $000A
00003578  =0000000B               3611  match_AND_A3                            EQU         $000B
00003578  =0000000C               3612  match_AND_A4                            EQU         $000C
00003578  =0000000D               3613  match_AND_A5                            EQU         $000D
00003578  =0000000E               3614  match_AND_A6                            EQU         $000E
00003578  =0000000F               3615  match_AND_A7                            EQU         $000F
00003578                          3616  
00003578  =00000010               3617  match_AND_An_indir_r0                   EQU         $0010
00003578  =00000011               3618  match_AND_An_indir_r1                   EQU         $0011
00003578  =00000012               3619  match_AND_An_indir_r2                   EQU         $0012
00003578  =00000013               3620  match_AND_An_indir_r3                   EQU         $0013
00003578  =00000014               3621  match_AND_An_indir_r4                   EQU         $0014
00003578  =00000015               3622  match_AND_An_indir_r5                   EQU         $0015
00003578  =00000016               3623  match_AND_An_indir_r6                   EQU         $0016
00003578  =00000017               3624  match_AND_An_indir_r7                   EQU         $0017
00003578                          3625  
00003578  =00000018               3626  match_AND_An_indir_postinc_r0       EQU         $0018
00003578  =00000019               3627  match_AND_An_indir_postinc_r1       EQU         $0019
00003578  =0000001A               3628  match_AND_An_indir_postinc_r2       EQU         $001A
00003578  =0000001B               3629  match_AND_An_indir_postinc_r3       EQU         $001B
00003578  =0000001C               3630  match_AND_An_indir_postinc_r4       EQU         $001C
00003578  =0000001D               3631  match_AND_An_indir_postinc_r5       EQU         $001D
00003578  =0000001E               3632  match_AND_An_indir_postinc_r6       EQU         $001E
00003578  =0000001F               3633  match_AND_An_indir_postinc_r7       EQU         $001F
00003578                          3634  
00003578  =00000020               3635  match_AND_An_indir_predec_reg0          EQU         $0020
00003578  =00000021               3636  match_AND_An_indir_predec_reg1          EQU         $0021
00003578  =00000022               3637  match_AND_An_indir_predec_reg2          EQU         $0022
00003578  =00000023               3638  match_AND_An_indir_predec_reg3          EQU         $0023
00003578  =00000024               3639  match_AND_An_indir_predec_reg4          EQU         $0024
00003578  =00000025               3640  match_AND_An_indir_predec_reg5          EQU         $0025
00003578  =00000026               3641  match_AND_An_indir_predec_reg6          EQU         $0026
00003578  =00000027               3642  match_AND_An_indir_predec_reg7          EQU         $0027
00003578                          3643  
00003578  =0000003C               3644  match_AND_imm_add                           EQU         $003C
00003578  =000000FC               3645  match_AND_imm_add_word                      EQU         $00FC
00003578  =000001FC               3646  match_AND_imm_add_long                      EQU         $01FC
00003578                          3647  
00003578  =00000000               3648  match_AND_reg0                          EQU         $0000
00003578  =00000200               3649  match_AND_reg1                          EQU         $0200
00003578  =00000400               3650  match_AND_reg2                          EQU         $0400
00003578  =00000600               3651  match_AND_reg3                          EQU         $0600
00003578  =00000800               3652  match_AND_reg4                          EQU         $0800
00003578  =00000A00               3653  match_AND_reg5                          EQU         $0A00
00003578  =00000C00               3654  match_AND_reg6                          EQU         $0C00
00003578  =00000E00               3655  match_AND_reg7                          EQU         $0E00
00003578                          3656  
00003578                          3657  
00003578                          3658  
00003578                          3659  
00003578                          3660  
00003578                          3661  
00003578                          3662  
00003578                          3663  
00003578                          3664  
00003578                          3665  
00003578                          3666  -------------------- end include --------------------
00003578                          3667              INCLUDE 'ADDA Subroutine.x68'
00003578  48E7 7D3E               3668  ADDA_sub                         MOVEM.L           D1-D5/D7/A2-A6, -(SP)                         ;preserve the registers, 
0000357C  C2BC 00000038           3669                                   AND.L             #mask_ADDA_ea_mode,D1                         ;move the mask to D1
00003582                          3670  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00003582  B2BC 00000000           3671  ADDA_data_reg_dir                CMP.L             #match_ADDA_Dn,D1                             ;check to see if mode is data reg direct
00003588  6600 0006               3672                                   BNE               ADDA_add_reg_dir                              ;if not, go check add reg dir
0000358C  6700 006E               3673                                   BEQ               ADDA_Dn_reg                                   ;if equal go figure out the register
00003590                          3674  
00003590  B2BC 00000008           3675  ADDA_add_reg_dir                 CMP.L             #match_ADDA_An,D1                             ;check if mode is add reg direct
00003596  6600 0006               3676                                   BNE               ADDA_add_reg_indir                            ;if not, go check add reg indir
0000359A  6700 0130               3677                                   BEQ               ADDA_An_reg                                   ;if equal go figure out the reg
0000359E                          3678   
0000359E  B2BC 00000010           3679  ADDA_add_reg_indir               CMP.L             #match_ADDA_An_indir,D1                       ;check to see if mode is add reg indir
000035A4  6600 0006               3680                                   BNE               ADDA_add_reg_indir_predec                     ;if not, go check add reg indir predec 
000035A8  6700 01F2               3681                                   BEQ               ADDA_An_indir_reg                             ;if equal go figure out the register           
000035AC                          3682             
000035AC  B2BC 00000020           3683  ADDA_add_reg_indir_predec        CMP.L             #match_ADDA_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
000035B2  6600 0006               3684                                   BNE               ADDA_add_reg_indir_postinc                    ;if not go check add reg indir/predec
000035B6  6700 0384               3685                                   BEQ               ADDA_An_indir_predec                          ;if equal go figure out the register
000035BA                          3686                        
000035BA  B2BC 00000018           3687  ADDA_add_reg_indir_postinc       CMP.L             #match_ADDA_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
000035C0  6600 0006               3688                                   BNE               ADDA_abs_add_word                             ;if not go check abs add word
000035C4  6700 02A6               3689                                   BEQ               ADDA_An_indir_postinc_reg                     ;if equal go figure out the register
000035C8                          3690  
000035C8  C4BC 0000003F           3691  ADDA_abs_add_word                AND.L             #mask_ADDA_abs_add,D2                         ;load mask to determine if abs add word or long
000035CE                          3692                                   
000035CE  B4BC 00000038           3693                                   CMP.L             #match_ADDA_abs_add_word,D2                   ;check if abs add word
000035D4  2A18                    3694                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000035D6  6600 0006               3695                                   BNE               ADDA_abs_add_long                             ;if not go check abs add long
000035DA  6700 0430               3696                                   BEQ               ADDA_abs_add_word_out                         ;if equal go to output
000035DE                          3697    
000035DE  B4BC 00000039           3698  ADDA_abs_add_long                CMP.L             #match_ADDA_abs_add_long,D2                   ;check to see if abs add long
000035E4  6700 0434               3699                                   BEQ               ADDA_abs_add_long_out                         ;if equal go to output
000035E8                          3700                                   
000035E8  B2BC 0000003C           3701  ADDA_immediate_add               CMP.L             #match_ADDA_imm_add,D1                             ;check if immediate address
000035EE  6700 043A               3702                                   BEQ               ADDA_immediate_add_out                        ;if equal go to immediate add sub routine
000035F2  6600 FF78               3703                                   BNE               ERROR                                         ;if not equal go to error mesage sub routine
000035F6                          3704  
000035F6                          3705  
000035F6                          3706  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000035F6                          3707                                   
000035F6  C4BC 0000003F           3708                                   AND.L              #mask_ADDA_ea_reg_and_mode,D2                ;load the mask into D2 for the mode and the register
000035FC                          3709  ;-----------------------------------Data Register Direct--------------------------------
000035FC  B4BC 00000000           3710  ADDA_Dn_reg                      CMP.L              #match_ADDA_D0,D2                            ;check to see in the register is 0
00003602  6600 0006               3711                                   BNE                ADDA_rD1                                     ;if not go check register 1
00003606  6700 0064               3712                                   BEQ                ADDA_D0_out                                  ;if equal go to output subroutine
0000360A                          3713  
0000360A  B4BC 00000001           3714  ADDA_rD1                         CMP.L              #match_ADDA_D1,D2                            ;check to see in the register is 1
00003610  6600 0006               3715                                   BNE                ADDA_rD2                                     ;if not go check register 2
00003614  6700 0062               3716                                   BEQ                ADDA_D1_out                                  ;if equal go to output subroutine
00003618                          3717  
00003618  B4BC 00000002           3718  ADDA_rD2                         CMP.L              #match_ADDA_D2,D2                            ;check to see in the register is 2
0000361E  6600 0006               3719                                   BNE                ADDA_rD3                                     ;if not go check register 3
00003622  6700 0060               3720                                   BEQ                ADDA_D2_out                                  ;if equal go to output subroutine
00003626                          3721  
00003626  B4BC 00000003           3722  ADDA_rD3                         CMP.L              #match_ADDA_D3,D2                            ;check to see in the register is 3
0000362C  6600 0006               3723                                   BNE                ADDA_rD4                                     ;if not go check register 4
00003630  6700 005E               3724                                   BEQ                ADDA_D3_out                                  ;if equal go to output subroutine
00003634                          3725  
00003634  B4BC 00000004           3726  ADDA_rD4                         CMP.L              #match_ADDA_D4,D2                            ;check to see in the register is 4
0000363A  6600 0006               3727                                   BNE                ADDA_rD5                                     ;if not go check register 5
0000363E  6700 005C               3728                                   BEQ                ADDA_D4_out                                  ;if equal go to output subroutine
00003642                          3729  
00003642  B4BC 00000005           3730  ADDA_rD5                         CMP.L              #match_ADDA_D5,D2                            ;check to see in the register is 5
00003648  6600 0006               3731                                   BNE                ADDA_rD6                                     ;if not go check register 6
0000364C  6700 005A               3732                                   BEQ                ADDA_D5_out                                  ;if equal go to output subroutine
00003650                          3733  
00003650  B4BC 00000006           3734  ADDA_rD6                         CMP.L              #match_ADDA_D6,D2                            ;check to see in the register is 6
00003656  6600 0006               3735                                   BNE                ADDA_rD7                                     ;if not go check register 7
0000365A  6700 0058               3736                                   BEQ                ADDA_D6_out                                  ;if equal go to output subroutine
0000365E                          3737  
0000365E  B4BC 00000007           3738  ADDA_rD7                         CMP.L              #match_ADDA_D7,D2                            ;check to see in the register is 7
00003664  6700 005A               3739                                   BEQ                ADDA_D7_out                                  ;if equal go to output subroutine
00003668  6600 FF02               3740                                   BNE                ERROR                                        ;if not equal, got to error message
0000366C                          3741  
0000366C                          3742  
0000366C                          3743  ;--------------------Data Register Direct Output-----------------------
0000366C  227C 0000691B           3744  ADDA_D0_out                     MOVE.L              #ea_D0,A1                    ;load string constant into A1
00003672  4EB9 00003A5A           3745                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003678                          3746  
00003678  227C 0000691E           3747  ADDA_D1_out                     MOVE.L              #ea_D1,A1                    ;load string constant into A1
0000367E  4EB9 00003A5A           3748                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003684                          3749  
00003684                          3750  
00003684  227C 00006921           3751  ADDA_D2_out                     MOVE.L              #ea_D2,A1                    ;load string constant into A1
0000368A  4EB9 00003A5A           3752                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003690                          3753  
00003690  227C 00006924           3754  ADDA_D3_out                     MOVE.L          #ea_D3,A1                    ;load string constant into A1
00003696  4EB9 00003A5A           3755                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000369C                          3756  
0000369C                          3757  
0000369C  227C 00006927           3758  ADDA_D4_out                     MOVE.L          #ea_D4,A1                        ;load string constant into A1
000036A2  4EB9 00003A5A           3759                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000036A8                          3760  
000036A8                          3761  
000036A8  227C 0000692A           3762  ADDA_D5_out                     MOVE.L          #ea_D5,A1                    ;load string constant into A1
000036AE  4EB9 00003A5A           3763                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000036B4                          3764  
000036B4                          3765  
000036B4  227C 0000692D           3766  ADDA_D6_out                     MOVE.L          #ea_D6,A1                    ;load string constant into A1
000036BA  4EB9 00003A5A           3767                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000036C0                          3768  
000036C0                          3769  
000036C0  227C 00006930           3770  ADDA_D7_out                     MOVE.L          #ea_D7,A1                    ;load string constant into A1
000036C6  4EB9 00003A5A           3771                                  JSR                 ADDA_determine_second_op                     ;jump to subroutine to determine second operand
000036CC                          3772  
000036CC                          3773  
000036CC                          3774  ;------------------Address Register Direct-----------------------
000036CC  B4BC 00000008           3775  ADDA_An_reg                      CMP.L           #match_ADDA_A0,D2                               ;check reg is equal to 0
000036D2  6600 0006               3776                                   BNE             ADDA_rA1                                        ;if not try reg 1
000036D6  6700 0134               3777                                   BEQ             ADDA_An_indir_reg0_out                          ;if equal go to output subroutine
000036DA                          3778  
000036DA  B4BC 00000009           3779  ADDA_rA1                         CMP.L           #match_ADDA_A1,D2                               ;check reg is equal to 1
000036E0  6600 0006               3780                                   BNE             ADDA_rA2                                        ;if not try reg 2
000036E4  6700 0132               3781                                   BEQ             ADDA_An_indir_reg1_out                          ;if equal go to output subroutine
000036E8                          3782  
000036E8  B4BC 0000000A           3783  ADDA_rA2                         CMP.L           #match_ADDA_A2,D2                               ;check reg is equal to 2
000036EE  6600 0006               3784                                   BNE             ADDA_rA3                                        ;if not try reg 3
000036F2  6700 0130               3785                                   BEQ             ADDA_An_indir_reg2_out                          ;if equal go to output subroutine
000036F6                          3786  
000036F6  B4BC 0000000B           3787  ADDA_rA3                         CMP.L           #match_ADDA_A3,D2                               ;check reg is equal to 3
000036FC  6600 0006               3788                                   BNE             ADDA_rA4                                        ;if not try reg 4
00003700  6700 012E               3789                                   BEQ             ADDA_An_indir_reg3_out                          ;if equal go to output subroutine
00003704                          3790  
00003704  B4BC 0000000C           3791  ADDA_rA4                         CMP.L           #match_ADDA_A4,D2                               ;check reg is equal to 4
0000370A  6600 0006               3792                                   BNE             ADDA_rA5                                        ;if not try reg 5
0000370E  6700 012C               3793                                   BEQ             ADDA_An_indir_reg4_out                          ;if equal go to output subroutine
00003712                          3794              
00003712  B4BC 0000000D           3795  ADDA_rA5                         CMP.L           #match_ADDA_A5,D2                               ;check reg is equal to 5
00003718  6600 0006               3796                                   BNE             ADDA_rA6                                        ;if not try reg 6
0000371C  6700 012A               3797                                   BEQ             ADDA_An_indir_reg5_out                          ;if equal go to output subroutine
00003720                          3798  
00003720  B4BC 0000000E           3799  ADDA_rA6                         CMP.L           #match_ADDA_A6,D2                               ;check reg is equal to 6
00003726  6600 0006               3800                                   BNE             ADDA_rA7                                        ;if not try reg 7
0000372A  6700 0128               3801                                   BEQ             ADDA_An_indir_reg6_out                          ;if equal go to output subroutine
0000372E                          3802  
0000372E  B4BC 0000000F           3803  ADDA_rA7                         CMP.L           #match_ADDA_A7,D2                               ;check reg is equal to 7
00003734  6700 012A               3804                                   BEQ             ADDA_An_indir_reg7_out                          ;if equal go to output subroutine
00003738  6600 FE32               3805                                   BNE             ERROR                                           ;if not equal to an addresssing mode, pritn error
0000373C                          3806  
0000373C                          3807  
0000373C                          3808  ;--------------------Address Register Direct Output-----------------------
0000373C  227C 00006933           3809  ADDA_A0_out                      MOVE.L              #ea_A0,A1                                       ;load string constant into A1
00003742  4EB9 00003A5A           3810                                   JSR                ADDA_determine_second_op                         ;jump to subroutine to determine second operand
00003748                          3811                                  
00003748  227C 00006936           3812  ADDA_A1_out                      MOVE.L             #ea_A1,A1                                    ;load string constant into A1
0000374E  4EB9 00003A5A           3813                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003754                          3814                                  
00003754  227C 00006939           3815  ADDA_A2_out                      MOVE.L             #ea_A2,A1                                    ;load string constant into A1
0000375A  4EB9 00003A5A           3816                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003760                          3817                                  
00003760  227C 0000693C           3818  ADDA_A3_out                      MOVE.L             #ea_A3,A1                                    ;load string constant into A1
00003766  4EB9 00003A5A           3819                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000376C                          3820  
0000376C  227C 0000693F           3821  ADDA_A4_out                      MOVE.L             #ea_A4,A1                                    ;load string constant into A1
00003772  4EB9 00003A5A           3822                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003778                          3823  
00003778  227C 00006942           3824  ADDA_A5_out                      MOVE.L             #ea_A5,A1                                     ;load string constant into A1
0000377E  4EB9 00003A5A           3825                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003784                          3826  
00003784  227C 00006945           3827  ADDA_A6_out                      MOVE.L             #ea_A6,A1                                    ;load string constant into A1
0000378A  4EB9 00003A5A           3828                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003790                          3829  
00003790  227C 00006948           3830  ADDA_A7_out                      MOVE.L             #ea_A7,A1                                    ;load string constant into A1
00003796  4EB9 00003A5A           3831                                   JSR                ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000379C                          3832  
0000379C                          3833  
0000379C                          3834  ;------------------Address Register Indirect-----------------------
0000379C  B4BC 00000010           3835  ADDA_An_indir_reg                CMP.L              #match_ADDA_An_indir_r0,D2                   ;check reg is equal to 0
000037A2  6600 0006               3836                                   BNE                ADDA_An_indir_reg1                           ;if not try reg 1
000037A6  6700 0064               3837                                   BEQ                ADDA_An_indir_reg0_out                       ;if equal go to output subroutine
000037AA                          3838  
000037AA  B4BC 00000011           3839  ADDA_An_indir_reg1               CMP.L              #match_ADDA_An_indir_r1,D2                   ;check reg is equal to 1
000037B0  6600 0006               3840                                   BNE                ADDA_An_indir_reg2                           ;if not try reg 2
000037B4  6700 0062               3841                                   BEQ                ADDA_An_indir_reg1_out                       ;if equal go to output subroutine
000037B8                          3842  
000037B8  B4BC 00000012           3843  ADDA_An_indir_reg2               CMP.L              #match_ADDA_An_indir_r2,D2                   ;check reg is equal to 2
000037BE  6600 0006               3844                                   BNE                ADDA_An_indir_reg3                           ;if not try reg 3
000037C2  6700 0060               3845                                   BEQ                ADDA_An_indir_reg2_out                       ;if equal go to output subroutine
000037C6                          3846  
000037C6  B4BC 00000013           3847  ADDA_An_indir_reg3               CMP.L              #match_ADDA_An_indir_r3,D2                   ;check reg is equal to 3
000037CC  6600 0006               3848                                   BNE                ADDA_An_indir_reg4                           ;if not try reg 4
000037D0  6700 005E               3849                                   BEQ                ADDA_An_indir_reg3_out                       ;if equal go to output subroutine
000037D4                          3850      
000037D4  B4BC 00000014           3851  ADDA_An_indir_reg4               CMP.L              #match_ADDA_An_indir_r4,D2                   ;check reg is equal to 4
000037DA  6600 0006               3852                                   BNE                ADDA_An_indir_reg5                           ;if not try reg 5
000037DE  6700 005C               3853                                   BEQ                ADDA_An_indir_reg4_out                       ;if equal go to output subroutine
000037E2                          3854          
000037E2  B4BC 00000015           3855  ADDA_An_indir_reg5               CMP.L              #match_ADDA_An_indir_r5,D2                   ;check reg is equal to 5
000037E8  6600 0006               3856                                   BNE                ADDA_An_indir_reg6                           ;if not try reg 6
000037EC  6700 005A               3857                                   BEQ                ADDA_An_indir_reg5_out                       ;if equal go to output subroutine
000037F0                          3858  
000037F0  B4BC 00000016           3859  ADDA_An_indir_reg6               CMP.L              #match_ADDA_An_indir_r6,D2                   ;check reg is equal to 6
000037F6  6600 0006               3860                                   BNE                ADDA_An_indir_reg7                           ;if not try reg 7
000037FA  6700 0058               3861                                   BEQ                ADDA_An_indir_reg6_out                       ;if equal go to output subroutine
000037FE                          3862  
000037FE  B4BC 00000017           3863  ADDA_An_indir_reg7               CMP.L              #match_ADDA_An_indir_r7,D2                   ;check reg is equal to 7
00003804  6700 005A               3864                                   BEQ                ADDA_An_indir_reg7_out                       ;if equal go to output subroutine
00003808  6600 FD62               3865                                   BNE                ERROR                                        ;if not equal to an addresssing mode, pritn error
0000380C                          3866  
0000380C                          3867  
0000380C                          3868  ;--------------------Address Register Indirect Output-----------------------
0000380C  227C 0000695B           3869  ADDA_An_indir_reg0_out           MOVE.L         #ea_indir_A0,A1                             ;load string constant into A1
00003812  4EB9 00003A5A           3870                                   JSR            ADDA_determine_second_op                    ;jump to subroutine to determine second operand
00003818                          3871  
00003818  227C 00006960           3872  ADDA_An_indir_reg1_out           MOVE.L         #ea_indir_A1,A1                             ;load string constant into A1
0000381E  4EB9 00003A5A           3873                                   JSR            ADDA_determine_second_op                    ;jump to subroutine to determine second operand
00003824                          3874  
00003824  227C 00006965           3875  ADDA_An_indir_reg2_out           MOVE.L         #ea_indir_A2,A1                              ;load string constant into A1
0000382A  4EB9 00003A5A           3876                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003830                          3877  
00003830  227C 0000696A           3878  ADDA_An_indir_reg3_out           MOVE.L         #ea_indir_A3,A1                              ;load string constant into A1
00003836  4EB9 00003A5A           3879                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
0000383C                          3880  
0000383C  227C 0000696F           3881  ADDA_An_indir_reg4_out           MOVE.L         #ea_indir_A4,A1                            ;load string constant into A1
00003842  4EB9 00003A5A           3882                                   JSR            ADDA_determine_second_op                     ;jump to subroutine to determine second operand
00003848                          3883  
00003848  227C 00006974           3884  ADDA_An_indir_reg5_out           MOVE.L         #ea_indir_A5,A1                             ;load string constant into A1
0000384E  4EB9 00003A5A           3885                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
00003854                          3886  
00003854  227C 00006979           3887  ADDA_An_indir_reg6_out          MOVE.L          #ea_indir_A6,A1                             ;load string constant into A1
0000385A  4EB9 00003A5A           3888                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
00003860                          3889                                          
00003860  227C 0000697E           3890  ADDA_An_indir_reg7_out           MOVE.L         #ea_indir_A7,A1                             ;load string constant into A1
00003866  4EB9 00003A5A           3891                                   JSR            ADDA_determine_second_op                      ;jump to subroutine to determine second operand
0000386C                          3892  
0000386C                          3893  
0000386C                          3894  ;------------------Address Register Indirect with Post Increment-----------------------
0000386C  B4BC 00000018           3895  ADDA_An_indir_postinc_reg        CMP.L              #match_ADDA_An_indir_postinc_reg0,D2         ;check reg is equal to 0
00003872  6600 0006               3896                                   BNE                ADDA_An_indir_postinc_reg1                   ;if not try reg 1
00003876  6700 0064               3897                                   BEQ                ADDA_An_indir_postinc_reg0_out               ;if equal go to output subroutine
0000387A                          3898  
0000387A  B4BC 00000019           3899  ADDA_An_indir_postinc_reg1       CMP.L              #match_ADDA_An_indir_postinc_reg1,D2         ;check reg is equal to 1
00003880  6600 0006               3900                                   BNE            ADDA_An_indir_postinc_reg2                   ;if not try reg 2
00003884  6700 0062               3901                                   BEQ            ADDA_An_indir_postinc_reg1_out               ;if equal go to output subroutine
00003888                          3902  
00003888  B4BC 0000001A           3903  ADDA_An_indir_postinc_reg2       CMP.L          #match_ADDA_An_indir_postinc_reg2,D2         ;check reg is equal to 2
0000388E  6600 0006               3904                                   BNE            ADDA_An_indir_postinc_reg3                   ;if not try reg 3
00003892  6700 0060               3905                                   BEQ            ADDA_An_indir_postinc_reg2_out               ;if equal go to output subroutine
00003896                          3906  
00003896  B4BC 0000001B           3907  ADDA_An_indir_postinc_reg3       CMP.L          #match_ADDA_An_indir_postinc_reg3,D2         ;check reg is equal to 3
0000389C  6600 0006               3908                                   BNE            ADDA_An_indir_postinc_reg4                   ;if not try reg 4
000038A0  6700 005E               3909                                   BEQ            ADDA_An_indir_postinc_reg3_out               ;if equal go to output subroutine
000038A4                          3910   
000038A4  B4BC 0000001C           3911  ADDA_An_indir_postinc_reg4       CMP.L          #match_ADDA_An_indir_postinc_reg4,D2         ;check reg is equal to 4
000038AA  6600 0006               3912                                   BNE            ADDA_An_indir_postinc_reg5                   ;if not try reg 5
000038AE  6700 005C               3913                                   BEQ            ADDA_An_indir_postinc_reg4_out               ;if equal go to output subroutine
000038B2                          3914  
000038B2  B4BC 0000001D           3915  ADDA_An_indir_postinc_reg5       CMP.L          #match_ADDA_An_indir_postinc_reg5,D2         ;check reg is equal to 5
000038B8  6600 0006               3916                                   BNE            ADDA_An_indir_postinc_reg6                   ;if not try reg 6
000038BC  6700 005A               3917                                   BEQ            ADDA_An_indir_postinc_reg5_out               ;if equal go to output subroutine
000038C0                          3918  
000038C0  B4BC 0000001E           3919  ADDA_An_indir_postinc_reg6       CMP.L          #match_ADDA_An_indir_postinc_reg6,D2         ;check reg is equal to 6
000038C6  6600 0006               3920                                   BNE            ADDA_An_indir_postinc_reg7                   ;if not try reg 7
000038CA  6700 0058               3921                                   BEQ            ADDA_An_indir_postinc_reg6_out               ;if equal go to output subroutine
000038CE                          3922  
000038CE  B4BC 0000001F           3923  ADDA_An_indir_postinc_reg7       CMP.L          #match_ADDA_An_indir_postinc_reg7,D2         ;check reg is equal to 7
000038D4  6700 005A               3924                                   BEQ            ADDA_An_indir_postinc_reg7_out               ;if equal go to output subroutine
000038D8  6600 FC92               3925                                   BNE                ERROR                                        ;if not equal to an addresssing mode, pritn error
000038DC                          3926  
000038DC                          3927  
000038DC                          3928  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000038DC  227C 00006983           3929  ADDA_An_indir_postinc_reg0_out        MOVE.L            #ea_indir_postinc_A0,A1              ;load string constant into A1
000038E2  4EB9 00003A5A           3930                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
000038E8                          3931  
000038E8  227C 00006989           3932  ADDA_An_indir_postinc_reg1_out        MOVE.L            #ea_indir_postinc_A1,A1              ;load string constant into A1
000038EE  4EB9 00003A5A           3933                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
000038F4                          3934  
000038F4  227C 0000698F           3935  ADDA_An_indir_postinc_reg2_out        MOVE.L            #ea_indir_postinc_A2,A1              ;load string constant into A1
000038FA  4EB9 00003A5A           3936                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003900                          3937  
00003900  227C 00006995           3938  ADDA_An_indir_postinc_reg3_out        MOVE.L            #ea_indir_postinc_A3,A1              ;load string constant into A1
00003906  4EB9 00003A5A           3939                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
0000390C                          3940  
0000390C  227C 0000699B           3941  ADDA_An_indir_postinc_reg4_out        MOVE.L            #ea_indir_postinc_A4,A1          ;load string constant into A1
00003912  4EB9 00003A5A           3942                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003918                          3943  
00003918  227C 000069A1           3944  ADDA_An_indir_postinc_reg5_out        MOVE.L            #ea_indir_postinc_A5,A1              ;load string constant into A1
0000391E  4EB9 00003A5A           3945                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003924                          3946  
00003924  227C 000069A7           3947  ADDA_An_indir_postinc_reg6_out        MOVE.L            #ea_indir_postinc_A6,A1              ;load string constant into A1
0000392A  4EB9 00003A5A           3948                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
00003930                          3949  
00003930  227C 000069AD           3950  ADDA_An_indir_postinc_reg7_out        MOVE.L            #ea_indir_postinc_A7,A1              ;load string constant into A1
00003936  4EB9 00003A5A           3951                                        JSR               ADDA_determine_second_op                 ;jump to subroutine to determine second operand
0000393C                          3952  
0000393C                          3953  
0000393C                          3954  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000393C  B4BC 00000020           3955  ADDA_An_indir_predec                  CMP.L             #match_ADDA_An_indir_predec_reg0,D2        ;check reg is equal to 0
00003942  6600 0006               3956                                        BNE               ADDA_An_indir_predec_reg1                  ;if not try reg 1
00003946  6700 0064               3957                                        BEQ               ADDA_An_indir_predec_reg0_out              ;if equal go to output subroutine
0000394A                          3958  
0000394A  B4BC 00000021           3959  ADDA_An_indir_predec_reg1             CMP.L             #match_ADDA_An_indir_predec_reg1,D2        ;check reg is equal to 1
00003950  6600 0006               3960                                        BNE               ADDA_An_indir_predec_reg2                  ;if not try reg 2
00003954  6700 0062               3961                                        BEQ               ADDA_An_indir_predec_reg1_out              ;if equal go to output subroutine
00003958                          3962  
00003958  B4BC 00000022           3963  ADDA_An_indir_predec_reg2             CMP.L             #match_ADDA_An_indir_predec_reg2,D2        ;check reg is equal to 2
0000395E  6600 0006               3964                                        BNE               ADDA_An_indir_predec_reg3                  ;if not try reg 3
00003962  6700 0060               3965                                        BEQ               ADDA_An_indir_predec_reg2_out              ;if equal go to output subroutine
00003966                          3966  
00003966  B4BC 00000023           3967  ADDA_An_indir_predec_reg3             CMP.L             #match_ADDA_An_indir_predec_reg3,D2        ;check reg is equal to 3
0000396C  6600 0006               3968                                        BNE               ADDA_An_indir_predec_reg4                  ;if not try reg 4
00003970  6700 005E               3969                                        BEQ               ADDA_An_indir_predec_reg3_out              ;if equal go to output subroutine
00003974                          3970  
00003974  B4BC 00000024           3971  ADDA_An_indir_predec_reg4             CMP.L             #match_ADDA_An_indir_predec_reg4,D2        ;check reg is equal to 4
0000397A  6600 0006               3972                                        BNE               ADDA_An_indir_predec_reg5                  ;if not try reg 5
0000397E  6700 005C               3973                                        BEQ               ADDA_An_indir_predec_reg4_out              ;if equal go to output subroutine
00003982                          3974  
00003982  B4BC 00000025           3975  ADDA_An_indir_predec_reg5             CMP.L             #match_ADDA_An_indir_predec_reg5,D2        ;check reg is equal to 5
00003988  6600 0006               3976                                        BNE               ADDA_An_indir_predec_reg6                  ;if not try reg 6
0000398C  6700 005A               3977                                        BEQ               ADDA_An_indir_predec_reg5_out              ;if equal go to output subroutine
00003990                          3978  
00003990  B4BC 00000026           3979  ADDA_An_indir_predec_reg6             CMP.L             #match_ADDA_An_indir_predec_reg6,D2        ;check reg is equal to 6
00003996  6600 0006               3980                                        BNE               ADDA_An_indir_predec_reg7                  ;if not try reg 7
0000399A  6700 0058               3981                                        BEQ               ADDA_An_indir_predec_reg6_out              ;if equal go to output subroutine
0000399E                          3982  
0000399E  B4BC 00000027           3983  ADDA_An_indir_predec_reg7             CMP.L             #match_ADDA_An_indir_predec_reg7,D2        ;check reg is equal to 7
000039A4  6700 005A               3984                                        BEQ               ADDA_An_indir_predec_reg7_out              ;if equal go to output subroutine
000039A8  6600 FBC2               3985                                        BNE               ERROR                                      ;if not equal to an addresssing mode, pritn error
000039AC                          3986  
000039AC                          3987  
000039AC                          3988  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000039AC  227C 000069B3           3989  ADDA_An_indir_predec_reg0_out         MOVE.L        #ea_indir_predec_A0,A1             ;load string constant into A1
000039B2  4EB9 00003A5A           3990                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
000039B8                          3991                                              
000039B8  227C 000069B9           3992  ADDA_An_indir_predec_reg1_out         MOVE.L        #ea_indir_predec_A1,A1             ;load string constant into A1
000039BE  4EB9 00003A5A           3993                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
000039C4                          3994  
000039C4  227C 000069BF           3995  ADDA_An_indir_predec_reg2_out         MOVE.L        #ea_indir_predec_A2,A1             ;load string constant into A1
000039CA  4EB9 00003A5A           3996                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
000039D0                          3997  
000039D0  227C 000069C5           3998  ADDA_An_indir_predec_reg3_out         MOVE.L        #ea_indir_predec_A3,A1             ;load string constant into A1
000039D6  4EB9 00003A5A           3999                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
000039DC                          4000  
000039DC  227C 000069CB           4001  ADDA_An_indir_predec_reg4_out         MOVE.L        #ea_indir_predec_A4,A1             ;load string constant into A1
000039E2  4EB9 00003A5A           4002                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
000039E8                          4003  
000039E8  227C 000069D1           4004  ADDA_An_indir_predec_reg5_out         MOVE.L        #ea_indir_predec_A5,A1             ;load string constant into A1
000039EE  4EB9 00003A5A           4005                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
000039F4                          4006  
000039F4  227C 000069D7           4007  ADDA_An_indir_predec_reg6_out         MOVE.L        #ea_indir_predec_A6,A1             ;load string constant into A1
000039FA  4EB9 00003A5A           4008                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A00                          4009  
00003A00  227C 000069DD           4010  ADDA_An_indir_predec_reg7_out         MOVE.L        #ea_indir_predec_A7,A1             ;load string constant into A1
00003A06  4EB9 00003A5A           4011                                        JSR               ADDA_determine_second_op                   ;jump to subroutine to determine second operand
00003A0C                          4012          
00003A0C                          4013  
00003A0C                          4014  ;------------------Absolute Addressing Output-----------------------
00003A0C  22FC 000069ED           4015  ADDA_abs_add_word_out                    MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003A12  22C5                    4016                                           MOVE.L      D5,(A1)+                           ;load address                  
00003A14  4CDF 7CBE               4017                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003A18  4E75                    4018                                           RTS                                            :return to subroutine
00003A1A                          4019                                             
00003A1A                          4020  
00003A1A  2A18                    4021  ADDA_abs_add_long_out                    MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00003A1C  22FC 000069ED           4022                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
00003A22  22C5                    4023                                           MOVE.L      D5,(A1)+                           ;load address                  
00003A24  4CDF 7CBE               4024                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003A28  4E75                    4025                                           RTS                                            :return to subroutine                                            
00003A2A                          4026  ;---------------Immediate Addresing---------------------------
00003A2A  2A18                    4027  ADDA_immediate_add_out                  MOVE.L       (A0)+,D5                           ;capture the immediate address
00003A2C  BCBC 000000FC           4028                                          CMP.L       #match_ADDA_imm_add_word,D6             ;check to see if need to pull word
00003A32  2A18                    4029                                          MOVE.L      (A0)+,D5                           ;pull the word
00003A34  6700 0006               4030                                          BEQ         ADDA_imm_add_w                     ;if equal go pull word    
00003A38  6600 0010               4031                                          BNE         ADDA_imm_add_l                     ;if not equal, go check long
00003A3C                          4032                                           
00003A3C  22FC 000069ED           4033  ADDA_imm_add_w                           MOVE.L      #ea_$,(A1)+                        ;load the $
00003A42  32C5                    4034                                           MOVE.W      D5,(A1)+                           ;load the word address                           
00003A44  4EB9 00003A5A           4035                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003A4A                          4036                                           
00003A4A  2A18                    4037  ADDA_imm_add_l                           MOVE.L      (A0)+,D5                           ;pull the long and increase the pointer
00003A4C  22FC 000069ED           4038                                           MOVE.L      #ea_$,(A1)+                        ;load the $
00003A52  2245                    4039                                           MOVE.L      D5,A1                              ;move to A1
00003A54  4EB9 00003A5A           4040                                           JSR         ADDA_determine_second_op           ;jump to subroutine to determine second operand
00003A5A                          4041                                                
00003A5A                          4042  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003A5A  4282                    4043  ADDA_determine_second_op        CLR.L       D2              ;clear D2 
00003A5C  C4BC 00000E00           4044                                  AND.L       #mask_ADDA_An_reg,D2        ;load the mask for the register into D2, masks bit 11-9
00003A62                          4045                                                  
00003A62  B4BC 00000000           4046  ADDA_reg0                       CMP.L       #match_ADDA_reg0,D2     ;check to see if reg equal 0
00003A68  6600 0006               4047                                  BNE         ADDA_reg1           ;if not equal got check reg 1
00003A6C  6700 0064               4048                                  BEQ         ADDA_reg0_out           ;if equal go to output
00003A70                          4049                                                  
00003A70  B4BC 00000200           4050  ADDA_reg1                       CMP.L       #match_ADDA_reg1,D2     ;check to see if reg equal 1
00003A76  6600 0006               4051                                  BNE         ADDA_reg2           ;if not equal got check reg 2
00003A7A  6700 0062               4052                                  BEQ         ADDA_reg1_out           ;if equal go to output
00003A7E                          4053  
00003A7E  B4BC 00000400           4054  ADDA_reg2                       CMP.L       #match_ADDA_reg2,D2     ;check to see if reg equal 2
00003A84  6600 0006               4055                                  BNE         ADDA_reg3           ;if not equal got check reg 3
00003A88  6700 0060               4056                                  BEQ         ADDA_reg2_out           ;if equal go to output
00003A8C                          4057  
00003A8C  B4BC 00000600           4058  ADDA_reg3                       CMP.L       #match_ADDA_reg3,D2     ;check to see if reg equal 3
00003A92  6600 0006               4059                                  BNE         ADDA_reg4           ;if not equal got check reg 4
00003A96  6700 005E               4060                                  BEQ         ADDA_reg3_out           ;if equal go to output
00003A9A                          4061                                                  
00003A9A  B4BC 00000800           4062  ADDA_reg4                       CMP.L       #match_ADDA_reg4,D2     ;check to see if reg equal 4
00003AA0  6600 0006               4063                                  BNE         ADDA_reg5           ;if not equal got check reg 5
00003AA4  6700 005C               4064                                  BEQ         ADDA_reg4_out           ;if equal go to output
00003AA8                          4065  
00003AA8  B4BC 00000A00           4066  ADDA_reg5                       CMP.L       #match_ADDA_reg5,D2     ;check to see if reg equal 5
00003AAE  6600 0006               4067                                  BNE         ADDA_reg6           ;if not equal got check reg 6
00003AB2  6700 005A               4068                                  BEQ         ADDA_reg5_out           ;if equal go to output
00003AB6                          4069  
00003AB6  B4BC 00000C00           4070  ADDA_reg6                       CMP.L       #match_ADDA_reg6,D2     ;check to see if reg equal 6
00003ABC  6600 0006               4071                                  BNE         ADDA_reg7           ;if not equal got check reg 7
00003AC0  6700 0058               4072                                  BEQ         ADDA_reg6_out           ;if equal go to output          
00003AC4                          4073  
00003AC4  B4BC 00000E00           4074  ADDA_reg7                       CMP.L       #match_ADDA_reg7,D2     ;check to see if reg equal 7
00003ACA  6700 005A               4075                                  BEQ         ADDA_reg7_out           ;if equal go to output
00003ACE  6600 FA9C               4076                                  BNE         ERROR                           ;if not equal to an addresssing mode, pritn error
00003AD2                          4077                                  
00003AD2                          4078  
00003AD2                          4079  ;--------------------Data Output-----------------------
00003AD2  227C 00006933           4080  ADDA_reg0_out                   MOVE.L      #ea_A0,A1               ;load string constant into A1
00003AD8  4CDF 7CBE               4081                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003ADC  4E75                    4082                                  RTS
00003ADE                          4083                                              
00003ADE  227C 00006936           4084  ADDA_reg1_out                   MOVE.L      #ea_A1,A1           ;load string constant into A1
00003AE4  4CDF 7CBE               4085                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003AE8  4E75                    4086                                  RTS
00003AEA                          4087                                              
00003AEA  227C 00006939           4088  ADDA_reg2_out                   MOVE.L      #ea_A2,A1           ;load string constant into A1
00003AF0  4CDF 7CBE               4089                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003AF4  4E75                    4090                                  RTS
00003AF6                          4091                                              
00003AF6  227C 0000693C           4092  ADDA_reg3_out                   MOVE.L      #ea_A3,A1           ;load string constant into A1
00003AFC  4CDF 7CBE               4093                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003B00  4E75                    4094                                  RTS
00003B02                          4095                                              
00003B02  227C 0000693F           4096  ADDA_reg4_out                   MOVE.L      #ea_A4,A1           ;load string constant into A1
00003B08  4CDF 7CBE               4097                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003B0C  4E75                    4098                                  RTS
00003B0E                          4099                                              
00003B0E  227C 00006942           4100  ADDA_reg5_out                   MOVE.L      #ea_A5,A1           ;load string constant into A1
00003B14  4CDF 7CBE               4101                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003B18  4E75                    4102                                  RTS
00003B1A                          4103                                              
00003B1A  227C 00006945           4104  ADDA_reg6_out                   MOVE.L      #ea_A6,A1           ;load string constant into A1
00003B20  4CDF 7CBE               4105                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003B24  4E75                    4106                                  RTS
00003B26                          4107                                              
00003B26  227C 00006948           4108  ADDA_reg7_out                   MOVE.L      #ea_A7,A1           ;load string constant into A1
00003B2C  4CDF 7CBE               4109                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003B30  4E75                    4110                                  RTS
00003B32                          4111                                  
00003B32                          4112  
00003B32                          4113  ;----------------------Error Handling----------------------------------------
00003B32  =00000038               4114  mask_ADDA_ea_mode               EQU         $0038
00003B32  =0000003F               4115  mask_ADDA_abs_add               EQU         $003F
00003B32  =0000003F               4116  mask_ADDA_ea_reg_and_mode       EQU         $003F
00003B32  =00000E00               4117  mask_ADDA_An_reg                EQU         $0E00
00003B32                          4118  
00003B32  =00000000               4119  match_ADDA_Dn                   EQU         $0000
00003B32  =00000008               4120  match_ADDA_An                   EQU         $0008
00003B32  =00000010               4121  match_ADDA_An_indir             EQU         $0010
00003B32  =00000020               4122  match_ADDA_An_indir_predec      EQU         $0020
00003B32  =00000018               4123  match_ADDA_An_indir_postinc     EQU         $0018
00003B32  =00000038               4124  match_ADDA_abs_add_word         EQU         $0038
00003B32  =00000039               4125  match_ADDA_abs_add_long         EQU         $0039
00003B32                          4126  
00003B32  =00000000               4127  match_ADDA_D0               EQU         $0000
00003B32  =00000001               4128  match_ADDA_D1               EQU         $0001
00003B32  =00000002               4129  match_ADDA_D2               EQU         $0002
00003B32  =00000003               4130  match_ADDA_D3               EQU         $0003
00003B32  =00000004               4131  match_ADDA_D4               EQU         $0004
00003B32  =00000005               4132  match_ADDA_D5               EQU         $0005
00003B32  =00000006               4133  match_ADDA_D6               EQU         $0006
00003B32  =00000007               4134  match_ADDA_D7               EQU         $0007
00003B32                          4135  
00003B32  =00000008               4136  match_ADDA_A0               EQU         $0008
00003B32  =00000009               4137  match_ADDA_A1               EQU         $0009
00003B32  =0000000A               4138  match_ADDA_A2               EQU         $000A
00003B32  =0000000B               4139  match_ADDA_A3               EQU         $000B
00003B32  =0000000C               4140  match_ADDA_A4               EQU         $000C
00003B32  =0000000D               4141  match_ADDA_A5               EQU         $000D
00003B32  =0000000E               4142  match_ADDA_A6               EQU         $000E
00003B32  =0000000F               4143  match_ADDA_A7               EQU         $000F
00003B32                          4144  
00003B32  =00000010               4145  match_ADDA_An_indir_r0          EQU         $0010
00003B32  =00000011               4146  match_ADDA_An_indir_r1          EQU         $0011
00003B32  =00000012               4147  match_ADDA_An_indir_r2          EQU         $0012
00003B32  =00000013               4148  match_ADDA_An_indir_r3          EQU         $0013
00003B32  =00000014               4149  match_ADDA_An_indir_r4          EQU         $0014
00003B32  =00000015               4150  match_ADDA_An_indir_r5          EQU         $0015
00003B32  =00000016               4151  match_ADDA_An_indir_r6          EQU         $0016
00003B32  =00000017               4152  match_ADDA_An_indir_r7          EQU         $0017
00003B32                          4153  
00003B32  =00000018               4154  match_ADDA_An_indir_postinc_reg0    EQU         $0018
00003B32  =00000019               4155  match_ADDA_An_indir_postinc_reg1    EQU         $0019
00003B32  =0000001A               4156  match_ADDA_An_indir_postinc_reg2    EQU         $001A
00003B32  =0000001B               4157  match_ADDA_An_indir_postinc_reg3    EQU         $001B
00003B32  =0000001C               4158  match_ADDA_An_indir_postinc_reg4    EQU         $001C
00003B32  =0000001D               4159  match_ADDA_An_indir_postinc_reg5    EQU         $001D
00003B32  =0000001E               4160  match_ADDA_An_indir_postinc_reg6    EQU         $001E
00003B32  =0000001F               4161  match_ADDA_An_indir_postinc_reg7    EQU         $001F
00003B32                          4162  
00003B32  =00000020               4163  match_ADDA_An_indir_predec_reg0     EQU         $0020
00003B32  =00000021               4164  match_ADDA_An_indir_predec_reg1     EQU         $0021
00003B32  =00000022               4165  match_ADDA_An_indir_predec_reg2     EQU         $0022
00003B32  =00000023               4166  match_ADDA_An_indir_predec_reg3     EQU         $0023
00003B32  =00000024               4167  match_ADDA_An_indir_predec_reg4     EQU         $0024
00003B32  =00000025               4168  match_ADDA_An_indir_predec_reg5     EQU         $0025
00003B32  =00000026               4169  match_ADDA_An_indir_predec_reg6     EQU         $0026
00003B32  =00000027               4170  match_ADDA_An_indir_predec_reg7     EQU         $0027
00003B32                          4171  
00003B32  =0000003C               4172  match_ADDA_imm_add                      EQU                 $003C
00003B32  =000000FC               4173  match_ADDA_imm_add_word                 EQU                 $00FC
00003B32  =000001FC               4174  match_ADDA_imm_add_long                 EQU                 $01FC
00003B32                          4175  
00003B32  =00000000               4176  match_ADDA_reg0             EQU         $0000
00003B32  =00000200               4177  match_ADDA_reg1             EQU         $0200
00003B32  =00000400               4178  match_ADDA_reg2             EQU         $0400
00003B32  =00000600               4179  match_ADDA_reg3             EQU         $0600
00003B32  =00000800               4180  match_ADDA_reg4             EQU         $0800
00003B32  =00000A00               4181  match_ADDA_reg5             EQU         $0A00
00003B32  =00000C00               4182  match_ADDA_reg6             EQU         $0C00
00003B32  =00000E00               4183  match_ADDA_reg7             EQU         $0E00
00003B32                          4184  
00003B32                          4185  
00003B32                          4186  
00003B32                          4187  
00003B32                          4188  
00003B32                          4189  
00003B32                          4190  
00003B32                          4191  -------------------- end include --------------------
00003B32                          4192              INCLUDE 'ADDQ Subroutine.x68'
00003B32  48E7 7D3E               4193  ADDQ_sub                         MOVEM.L           D1-D5/D7/A2-A6, -(SP)                               ;preserve the registers, 
00003B36  C2BC 00000038           4194                                   AND.L             #mask_ADDQ_ea_mode,D1                                   ;move the mask to D1
00003B3C                          4195                                   
00003B3C                          4196  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00003B3C  4282                    4197                                  CLR.L       D2                                              ;clear D2 
00003B3E  C4BC 00000E00           4198                                  AND.L       #mask_ADDQ_reg,D2                               ;load the mask for the register into D2, masks bit 11-9
00003B44                          4199                                                  
00003B44  B4BC 00000000           4200  ADDQ_reg0                       CMP.L       #match_ADDQ_reg0,D2                             ;check to see if reg equal 0
00003B4A  6600 0006               4201                                  BNE         ADDQ_reg1                                       ;if not equal got check reg 1
00003B4E  6700 0064               4202                                  BEQ         ADDQ_reg0_out                                   ;if equal go to output
00003B52                          4203                                              
00003B52  B4BC 00000200           4204  ADDQ_reg1                       CMP.L       #match_ADDQ_reg1,D2                             ;check to see if reg equal 1
00003B58  6600 0006               4205                                  BNE         ADDQ_reg2                                       ;if not equal got check reg 2
00003B5C  6700 0062               4206                                  BEQ         ADDQ_reg1_out                                   ;if equal go to output
00003B60                          4207  
00003B60  B4BC 00000400           4208  ADDQ_reg2                       CMP.L       #match_ADDQ_reg2,D2                             ;check to see if reg equal 2
00003B66  6600 0006               4209                                  BNE         ADDQ_reg3                                       ;if not equal got check reg 3
00003B6A  6700 0060               4210                                  BEQ         ADDQ_reg2_out                                   ;if equal go to output
00003B6E                          4211  
00003B6E  B4BC 00000600           4212  ADDQ_reg3                       CMP.L       #match_ADDQ_reg3,D2                             ;check to see if reg equal 3
00003B74  6600 0006               4213                                  BNE         ADDQ_reg4                                       ;if not equal got check reg 4
00003B78  6700 005E               4214                                  BEQ         ADDQ_reg3_out                                   ;if equal go to output
00003B7C                          4215                                                  
00003B7C  B4BC 00000800           4216  ADDQ_reg4                       CMP.L       #match_ADDQ_reg4,D2                             ;check to see if reg equal 4
00003B82  6600 0006               4217                                  BNE         ADDQ_reg5                                       ;if not equal got check reg 5
00003B86  6700 005C               4218                                  BEQ         ADDQ_reg4_out                                   ;if equal go to output
00003B8A                          4219  
00003B8A  B4BC 00000A00           4220  ADDQ_reg5                       CMP.L       #match_ADDQ_reg5,D2                             ;check to see if reg equal 5
00003B90  6600 0006               4221                                  BNE         ADDQ_reg6                                       ;if not equal got check reg 6
00003B94  6700 005A               4222                                  BEQ         ADDQ_reg5_out                                   ;if equal go to output
00003B98                          4223  
00003B98  B4BC 00000C00           4224  ADDQ_reg6                       CMP.L       #match_ADDQ_reg6,D2                             ;check to see if reg equal 6
00003B9E  6600 0006               4225                                  BNE         ADDQ_reg7                                       ;if not equal got check reg 7
00003BA2  6700 0058               4226                                  BEQ         ADDQ_reg6_out                                   ;if equal go to output          
00003BA6                          4227  
00003BA6  B4BC 00000E00           4228  ADDQ_reg7                       CMP.L       #match_ADDQ_reg7,D2                             ;check to see if reg equal 7
00003BAC  6700 005A               4229                                  BEQ         ADDQ_reg7_out                                   ;if equal go to output
00003BB0  6600 F9BA               4230                                  BNE         ERROR                                                ;if not equal to an addresssing mode, pritn error
00003BB4                          4231                                  
00003BB4                          4232  
00003BB4                          4233  ;--------------------Data Output-----------------------
00003BB4  227C 000069EF           4234  ADDQ_reg0_out                               MOVE.L      #ea_data0,A1                               ;load string constant into A1
00003BBA  4EB9 00003C14           4235                                              JSR         ADDQ_determine_second_operand                ;jump to subroutine to determine the second operand
00003BC0                          4236                                              
00003BC0  227C 000069F2           4237  ADDQ_reg1_out                               MOVE.L      #ea_data1,A1                            ;load string constant into A1
00003BC6  4EB9 00003C14           4238                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003BCC                          4239  
00003BCC  227C 000069F5           4240  ADDQ_reg2_out                               MOVE.L      #ea_data2,A1                                ;load string constant into A1
00003BD2  4EB9 00003C14           4241                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003BD8                          4242  
00003BD8  227C 000069F8           4243  ADDQ_reg3_out                               MOVE.L      #ea_data3,A1                                    ;load string constant into A1
00003BDE  4EB9 00003C14           4244                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003BE4                          4245   
00003BE4  227C 000069FB           4246  ADDQ_reg4_out                               MOVE.L      #ea_data4,A1                            ;load string constant into A1
00003BEA  4EB9 00003C14           4247                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003BF0                          4248  
00003BF0  227C 000069FE           4249  ADDQ_reg5_out                               MOVE.L      #ea_data5,A1                            ;load string constant into A1
00003BF6  4EB9 00003C14           4250                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003BFC                          4251  
00003BFC  227C 00006A01           4252  ADDQ_reg6_out                               MOVE.L      #ea_data6,A1                            ;load string constant into A1
00003C02  4EB9 00003C14           4253                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003C08                          4254  
00003C08  227C 00006A04           4255  ADDQ_reg7_out                               MOVE.L      #ea_data7,A1                            ;load string constant into A1
00003C0E  4EB9 00003C14           4256                                              JSR         ADDQ_determine_second_operand                 ;jump to subroutine to determine the second operand
00003C14                          4257                  
00003C14                          4258  
00003C14                          4259  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00003C14                          4260  ADDQ_determine_second_operand
00003C14  B2BC 00000000           4261  ADDQ_data_reg_dir                CMP.L             #match_ADDQ_Dn,D1                             ;check to see if mode is data reg direct
00003C1A  6600 0006               4262                                   BNE               ADDQ_add_reg_dir                                   ;if not, go check add reg dir
00003C1E  6700 005E               4263                                   BEQ               ADDQ_Dn_reg                                        ;if equal go figure out the register
00003C22                          4264  
00003C22  B2BC 00000008           4265  ADDQ_add_reg_dir                 CMP.L             #match_ADDQ_An,D1                             ;check if mode is add reg direct
00003C28  6600 0006               4266                                   BNE               ADDQ_add_reg_indir                                 ;if not, go check add reg indir
00003C2C  6700 0126               4267                                   BEQ               ADDQ_An_reg                                        ;if equal go figure out the reg
00003C30                          4268   
00003C30  B2BC 00000010           4269  ADDQ_add_reg_indir               CMP.L             #match_ADDQ_An_indir,D1                       ;check to see if mode is add reg indir
00003C36  6600 0006               4270                                   BNE               ADDQ_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00003C3A  6700 01E8               4271                                   BEQ               ADDQ_An_indir_reg                                  ;if equal go figure out the register           
00003C3E                          4272             
00003C3E  B2BC 00000020           4273  ADDQ_add_reg_indir_predec        CMP.L             #match_ADDQ_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00003C44  6600 0006               4274                                   BNE               ADDQ_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00003C48  6700 037A               4275                                   BEQ               ADDQ_An_indir_predec                               ;if equal go figure out the register
00003C4C                          4276                        
00003C4C  B2BC 00000018           4277  ADDQ_add_reg_indir_postinc       CMP.L             #match_ADDQ_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00003C52  6600 0006               4278                                   BNE               ADDQ_abs_add_word                                  ;if not go check abs add word
00003C56  6700 029C               4279                                   BEQ               ADDQ_An_indir_pinc_reg                          ;if equal go figure out the register
00003C5A                          4280  
00003C5A  C4BC 0000003F           4281  ADDQ_abs_add_word                AND.L             #mask_ADDQ_abs_add,D2                         ;load mask to determine if abs add word or long
00003C60                          4282                                   
00003C60  B4BC 00000038           4283                                   CMP.L             #match_ADDQ_abs_add_word,D2                   ;check if abs add word
00003C66  2A18                    4284                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00003C68  6600 0006               4285                                   BNE               ADDQ_abs_add_long                                  ;if not go check abs add long
00003C6C  6700 0426               4286                                   BEQ               ADDQ_abs_add_word_out                              ;if equal go to output
00003C70                          4287    
00003C70  B4BC 00000039           4288  ADDQ_abs_add_long                CMP.L             #match_ADDQ_abs_add_long,D2                    ;check to see if abs add long
00003C76  6700 042A               4289                                   BEQ               ADDQ_abs_add_long_out                               ;if equal go to output
00003C7A  6600 F8F0               4290                                   BNE               ERROR
00003C7E                          4291  
00003C7E                          4292  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00003C7E                          4293                                   
00003C7E                          4294                                   
00003C7E                          4295  ;-----------------------------------Data Register Direct--------------------------------
00003C7E  C4BC 0000003F           4296  ADDQ_Dn_reg                      AND.L              #mask_ADDQ_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00003C84  B4BC 00000000           4297                                   CMP.L              #match_ADDQ_D0,D2                       ;check to see in the register is 0
00003C8A  6600 0006               4298                                   BNE                ADDQ_rD1                                     ;if not go check register 1
00003C8E  6700 0064               4299                                   BEQ                ADDQ_D0_out                              ;if equal go to output subroutine
00003C92                          4300  
00003C92  B4BC 00000001           4301  ADDQ_rD1                         CMP.L              #match_ADDQ_D1,D2                       ;check to see in the register is 1
00003C98  6600 0006               4302                                   BNE                ADDQ_rD2                                     ;if not go check register 2
00003C9C  6700 0062               4303                                   BEQ                ADDQ_D1_out                              ;if equal go to output subroutine
00003CA0                          4304  
00003CA0  B4BC 00000002           4305  ADDQ_rD2                         CMP.L              #match_ADDQ_D2,D2                       ;check to see in the register is 2
00003CA6  6600 0006               4306                                   BNE                ADDQ_rD3                                     ;if not go check register 3
00003CAA  6700 0060               4307                                   BEQ                ADDQ_D2_out                              ;if equal go to output subroutine
00003CAE                          4308  
00003CAE  B4BC 00000003           4309  ADDQ_rD3                         CMP.L              #match_ADDQ_D3,D2                       ;check to see in the register is 3
00003CB4  6600 0006               4310                                   BNE                ADDQ_rD4                                     ;if not go check register 4
00003CB8  6700 005E               4311                                   BEQ                ADDQ_D3_out                              ;if equal go to output subroutine
00003CBC                          4312  
00003CBC  B4BC 00000004           4313  ADDQ_rD4                         CMP.L              #match_ADDQ_D4,D2                       ;check to see in the register is 4
00003CC2  6600 0006               4314                                   BNE                ADDQ_rD5                                     ;if not go check register 5
00003CC6  6700 005C               4315                                   BEQ                ADDQ_D4_out                              ;if equal go to output subroutine
00003CCA                          4316  
00003CCA  B4BC 00000005           4317  ADDQ_rD5                         CMP.L              #match_ADDQ_D5,D2                       ;check to see in the register is 5
00003CD0  6600 0006               4318                                   BNE                ADDQ_rD6                                     ;if not go check register 6
00003CD4  6700 005A               4319                                   BEQ                ADDQ_D5_out                              ;if equal go to output subroutine
00003CD8                          4320  
00003CD8  B4BC 00000006           4321  ADDQ_rD6                         CMP.L              #match_ADDQ_D6,D2                       ;check to see in the register is 6
00003CDE  6600 0006               4322                                   BNE                ADDQ_rD7                                     ;if not go check register 7
00003CE2  6700 0058               4323                                   BEQ                ADDQ_D6_out                              ;if equal go to output subroutine
00003CE6                          4324  
00003CE6  B4BC 00000007           4325  ADDQ_rD7                         CMP.L              #match_ADDQ_D7,D2                       ;check to see in the register is 7
00003CEC  6700 005A               4326                                   BEQ                ADDQ_D7_out                              ;if equal go to output subroutine
00003CF0  6600 F87A               4327                                   BNE                ERROR                                   ;if not equal, got to error message
00003CF4                          4328  ;--------------------Data Register Direct Output-----------------------
00003CF4  227C 0000691B           4329  ADDQ_D0_out                     MOVE.L              #ea_D0,A1                           ;load string constant into A1
00003CFA  4CDF 7CBE               4330                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003CFE  4E75                    4331                                  RTS                                                     ;return to subroutine
00003D00                          4332  
00003D00  227C 0000691E           4333  ADDQ_D1_out                     MOVE.L              #ea_D1,A1                           ;load string constant into A1
00003D06  4CDF 7CBE               4334                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003D0A  4E75                    4335                                  RTS                                                     ;return to subroutine
00003D0C                          4336  
00003D0C                          4337  
00003D0C  227C 00006921           4338  ADDQ_D2_out                     MOVE.L              #ea_D2,A1                           ;load string constant into A1
00003D12  4CDF 7CBE               4339                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003D16  4E75                    4340                                  RTS                                                     ;return to subroutine
00003D18                          4341  
00003D18  227C 00006924           4342  ADDQ_D3_out                     MOVE.L              #ea_D3,A1                           ;load string constant into A1
00003D1E  4CDF 7CBE               4343                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003D22  4E75                    4344                                  RTS                                                     ;return to subroutine
00003D24                          4345  
00003D24                          4346  
00003D24  227C 00006927           4347  ADDQ_D4_out                     MOVE.L              #ea_D4,A1                           ;load string constant into A1
00003D2A  4CDF 7CBE               4348                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003D2E  4E75                    4349                                  RTS                                                     ;return to subroutine
00003D30                          4350      
00003D30                          4351  
00003D30  227C 0000692A           4352  ADDQ_D5_out                     MOVE.L              #ea_D5,A1                           ;load string constant into A1
00003D36  4CDF 7CBE               4353                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003D3A  4E75                    4354                                  RTS                                                     ;return to subroutine
00003D3C                          4355  
00003D3C                          4356  
00003D3C  227C 0000692D           4357  ADDQ_D6_out                     MOVE.L              #ea_D6,A1                           ;load string constant into A1
00003D42  4CDF 7CBE               4358                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003D46  4E75                    4359                                  RTS                                                     ;return to subroutine
00003D48                          4360  
00003D48                          4361  
00003D48  227C 00006930           4362  ADDQ_D7_out                     MOVE.L              #ea_D7,A1                           ;load string constant into A1
00003D4E  4CDF 7CBE               4363                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003D52  4E75                    4364                                  RTS                                                     ;return to subroutine
00003D54                          4365  
00003D54                          4366  ;------------------Address Register Direct-----------------------
00003D54  B4BC 00000008           4367  ADDQ_An_reg                      CMP.L           #match_ADDQ_A0,D2                           ;check reg is equal to 0
00003D5A  6600 0006               4368                                   BNE             ADDQ_rA1                                    ;if not try reg 1
00003D5E  6700 0134               4369                                   BEQ             ADDQ_An_indir_reg0_out                      ;if equal go to output subroutine
00003D62                          4370  
00003D62  B4BC 00000009           4371  ADDQ_rA1                         CMP.L           #match_ADDQ_A1,D2                           ;check reg is equal to 1
00003D68  6600 0006               4372                                   BNE             ADDQ_rA2                                    ;if not try reg 2
00003D6C  6700 0132               4373                                   BEQ             ADDQ_An_indir_reg1_out                      ;if equal go to output subroutine
00003D70                          4374  
00003D70  B4BC 0000000A           4375  ADDQ_rA2                         CMP.L           #match_ADDQ_A2,D2                           ;check reg is equal to 2
00003D76  6600 0006               4376                                   BNE             ADDQ_rA3                                    ;if not try reg 3
00003D7A  6700 0130               4377                                   BEQ             ADDQ_An_indir_reg2_out                      ;if equal go to output subroutine
00003D7E                          4378  
00003D7E  B4BC 0000000B           4379  ADDQ_rA3                         CMP.L           #match_ADDQ_A3,D2                           ;check reg is equal to 3
00003D84  6600 0006               4380                                   BNE             ADDQ_rA4                                    ;if not try reg 4
00003D88  6700 012E               4381                                   BEQ             ADDQ_An_indir_reg3_out                      ;if equal go to output subroutine
00003D8C                          4382  
00003D8C  B4BC 0000000C           4383  ADDQ_rA4                         CMP.L           #match_ADDQ_A4,D2                           ;check reg is equal to 4
00003D92  6600 0006               4384                                   BNE             ADDQ_rA5                                    ;if not try reg 5
00003D96  6700 012C               4385                                   BEQ             ADDQ_An_indir_reg4_out                      ;if equal go to output subroutine
00003D9A                          4386              
00003D9A  B4BC 0000000D           4387  ADDQ_rA5                         CMP.L           #match_ADDQ_A5,D2                           ;check reg is equal to 5
00003DA0  6600 0006               4388                                   BNE             ADDQ_rA6                                    ;if not try reg 6
00003DA4  6700 012A               4389                                   BEQ             ADDQ_An_indir_reg5_out                      ;if equal go to output subroutine
00003DA8                          4390  
00003DA8  B4BC 0000000E           4391  ADDQ_rA6                         CMP.L           #match_ADDQ_A6,D2                           ;check reg is equal to 6
00003DAE  6600 0006               4392                                   BNE             ADDQ_rA7                                    ;if not try reg 7
00003DB2  6700 0128               4393                                   BEQ             ADDQ_An_indir_reg6_out                      ;if equal go to output subroutine
00003DB6                          4394  
00003DB6  B4BC 0000000F           4395  ADDQ_rA7                         CMP.L           #match_ADDQ_A7,D2                           ;check reg is equal to 7
00003DBC  6700 012A               4396                                   BEQ             ADDQ_An_indir_reg7_out                      ;if equal go to output subroutine
00003DC0  6600 F7AA               4397                                   BNE             ERROR                                       ;if not equal to an addresssing mode, pritn error
00003DC4                          4398  
00003DC4                          4399  ;--------------------Address Register Direct Output-----------------------
00003DC4  227C 00006948           4400  ADDQ_A0_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003DCA  4CDF 7CBE               4401                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003DCE  4E75                    4402                                       RTS                                            return to subroutine
00003DD0                          4403                                  
00003DD0  227C 00006948           4404  ADDQ_A1_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003DD6  4CDF 7CBE               4405                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003DDA  4E75                    4406                                       RTS                                            ;return to subroutine
00003DDC                          4407                                  
00003DDC  227C 00006948           4408  ADDQ_A2_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003DE2  4CDF 7CBE               4409                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003DE6  4E75                    4410                                       RTS                                            ;return to subroutine
00003DE8                          4411                                  
00003DE8  227C 00006948           4412  ADDQ_A3_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003DEE  4CDF 7CBE               4413                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003DF2  4E75                    4414                                       RTS                                            ;return to subroutine
00003DF4                          4415  
00003DF4  227C 00006948           4416  ADDQ_A4_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003DFA  4CDF 7CBE               4417                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003DFE  4E75                    4418                                       RTS                                            ;return to subroutine
00003E00                          4419  
00003E00  227C 00006948           4420  ADDQ_A5_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E06  4CDF 7CBE               4421                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E0A  4E75                    4422                                       RTS                                            ;return to subroutine
00003E0C                          4423  
00003E0C  227C 00006948           4424  ADDQ_A6_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E12  4CDF 7CBE               4425                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E16  4E75                    4426                                       RTS                                            ;return to subroutine
00003E18                          4427  
00003E18  227C 00006948           4428  ADDQ_A7_out                          MOVE.L      #ea_A7,A1                          ;load string constant into A1
00003E1E  4CDF 7CBE               4429                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E22  4E75                    4430                                       RTS                                            ;return to subroutine
00003E24                          4431  
00003E24                          4432  ;------------------Address Register Indirect-----------------------
00003E24  B4BC 00000010           4433  ADDQ_An_indir_reg                CMP.L           #match_ADDQ_An_indir_r0,D2              ;check reg is equal to 0
00003E2A  6600 0006               4434                                   BNE             ADDQ_An_indir_reg1                      ;if not try reg 1
00003E2E  6700 0064               4435                                   BEQ             ADDQ_An_indir_reg0_out                  ;if equal go to output subroutine
00003E32                          4436  
00003E32  B4BC 00000011           4437  ADDQ_An_indir_reg1               CMP.L           #match_ADDQ_An_indir_r1,D2              ;check reg is equal to 1
00003E38  6600 0006               4438                                   BNE             ADDQ_An_indir_reg2                      ;if not try reg 2
00003E3C  6700 0062               4439                                   BEQ             ADDQ_An_indir_reg1_out                  ;if equal go to output subroutine
00003E40                          4440  
00003E40  B4BC 00000012           4441  ADDQ_An_indir_reg2               CMP.L           #match_ADDQ_An_indir_r2,D2              ;check reg is equal to 2
00003E46  6600 0006               4442                                   BNE             ADDQ_An_indir_reg3                      ;if not try reg 3
00003E4A  6700 0060               4443                                   BEQ             ADDQ_An_indir_reg2_out                  ;if equal go to output subroutine
00003E4E                          4444  
00003E4E  B4BC 00000013           4445  ADDQ_An_indir_reg3               CMP.L           #match_ADDQ_An_indir_r3,D2              ;check reg is equal to 3
00003E54  6600 0006               4446                                   BNE             ADDQ_An_indir_reg4                      ;if not try reg 4
00003E58  6700 005E               4447                                   BEQ             ADDQ_An_indir_reg3_out                  ;if equal go to output subroutine
00003E5C                          4448      
00003E5C  B4BC 00000014           4449  ADDQ_An_indir_reg4               CMP.L           #match_ADDQ_An_indir_r4,D2              ;check reg is equal to 4
00003E62  6600 0006               4450                                   BNE             ADDQ_An_indir_reg5                      ;if not try reg 5
00003E66  6700 005C               4451                                   BEQ             ADDQ_An_indir_reg4_out                  ;if equal go to output subroutine
00003E6A                          4452          
00003E6A  B4BC 00000015           4453  ADDQ_An_indir_reg5               CMP.L           #match_ADDQ_An_indir_r5,D2              ;check reg is equal to 5
00003E70  6600 0006               4454                                   BNE             ADDQ_An_indir_reg6                      ;if not try reg 6
00003E74  6700 005A               4455                                   BEQ             ADDQ_An_indir_reg5_out                  ;if equal go to output subroutine
00003E78                          4456  
00003E78  B4BC 00000016           4457  ADDQ_An_indir_reg6               CMP.L           #match_ADDQ_An_indir_r6,D2              ;check reg is equal to 6
00003E7E  6600 0006               4458                                   BNE             ADDQ_An_indir_reg7                      ;if not try reg 7
00003E82  6700 0058               4459                                   BEQ             ADDQ_An_indir_reg6_out                  ;if equal go to output subroutine
00003E86                          4460  
00003E86  B4BC 00000017           4461  ADDQ_An_indir_reg7               CMP.L           #match_ADDQ_An_indir_r7,D2              ;check reg is equal to 7
00003E8C  6700 005A               4462                                   BEQ             ADDQ_An_indir_reg7_out                  ;if equal go to output subroutine
00003E90  6600 F6DA               4463                                   BNE             ERROR                                   ;if not equal to an addresssing mode, pritn error
00003E94                          4464  
00003E94                          4465  ;--------------------Address Register Indirect Output-----------------------
00003E94  227C 0000695B           4466  ADDQ_An_indir_reg0_out                      MOVE.L      #ea_indir_A0,A1                           ;load string constant into A1
00003E9A  4CDF 7CBE               4467                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003E9E  4E75                    4468                                              RTS                                                     ;return to subroutine
00003EA0                          4469  
00003EA0  227C 00006960           4470  ADDQ_An_indir_reg1_out                      MOVE.L      #ea_indir_A1,A1                           ;load string constant into A1
00003EA6  4CDF 7CBE               4471                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EAA  4E75                    4472                                              RTS                                                     ;return to subroutine
00003EAC                          4473  
00003EAC  227C 00006965           4474  ADDQ_An_indir_reg2_out                      MOVE.L      #ea_indir_A2,A1                           ;load string constant into A1
00003EB2  4CDF 7CBE               4475                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EB6  4E75                    4476                                              RTS                                                     ;return to subroutine
00003EB8                          4477  
00003EB8  227C 0000696A           4478  ADDQ_An_indir_reg3_out                      MOVE.L      #ea_indir_A3,A1                           ;load string constant into A1
00003EBE  4CDF 7CBE               4479                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EC2  4E75                    4480                                              RTS                                                     ;return to subroutine
00003EC4                          4481  
00003EC4  227C 0000696F           4482  ADDQ_An_indir_reg4_out                      MOVE.L      #ea_indir_A4,A1                           ;load string constant into A1
00003ECA  4CDF 7CBE               4483                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003ECE  4E75                    4484                                              RTS                                                     ;return to subroutine
00003ED0                          4485  
00003ED0  227C 00006974           4486  ADDQ_An_indir_reg5_out                      MOVE.L      #ea_indir_A5,A1                           ;load string constant into A1
00003ED6  4CDF 7CBE               4487                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EDA  4E75                    4488                                              RTS                                                     ;return to subroutine
00003EDC                          4489  
00003EDC  227C 00006979           4490  ADDQ_An_indir_reg6_out                      MOVE.L      #ea_indir_A6,A1                           ;load string constant into A1
00003EE2  4CDF 7CBE               4491                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EE6  4E75                    4492                                              RTS                                                     ;return to subroutine
00003EE8                          4493                                          
00003EE8  227C 0000697E           4494  ADDQ_An_indir_reg7_out                      MOVE.L      #ea_indir_A7,A1                           ;load string constant into A1
00003EEE  4CDF 7CBE               4495                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003EF2  4E75                    4496                                              RTS                                                     ;return to subroutine
00003EF4                          4497  
00003EF4                          4498  ;------------------Address Register Indirect with Post Increment-----------------------
00003EF4  B4BC 00000018           4499  ADDQ_An_indir_pinc_reg                      CMP.L      #match_ADDQ_An_indir_postinc_reg0,D2            ;check reg is equal to 0
00003EFA  6600 0006               4500                                              BNE        ADDQ_An_indir_pinc_r1                           ;if not try reg 1
00003EFE  6700 0064               4501                                              BEQ        ADDQ_An_indir_pinc_r0_out                       ;if equal go to output subroutine
00003F02                          4502  
00003F02  B4BC 00000019           4503  ADDQ_An_indir_pinc_r1                       CMP.L      #match_ADDQ_An_indir_postinc_reg1,D2            ;check reg is equal to 1
00003F08  6600 0006               4504                                              BNE        ADDQ_An_indir_pinc_r2                           ;if not try reg 2
00003F0C  6700 0062               4505                                              BEQ        ADDQ_An_indir_pinc_r1_out                       ;if equal go to output subroutine
00003F10                          4506  
00003F10  B4BC 0000001A           4507  ADDQ_An_indir_pinc_r2                       CMP.L      #match_ADDQ_An_indir_postinc_reg2,D2            ;check reg is equal to 2
00003F16  6600 0006               4508                                              BNE        ADDQ_An_indir_pinc_r3                           ;if not try reg 3
00003F1A  6700 0060               4509                                              BEQ        ADDQ_An_indir_pinc_r2_out                       ;if equal go to output subroutine
00003F1E                          4510  
00003F1E  B4BC 0000001B           4511  ADDQ_An_indir_pinc_r3                       CMP.L      #match_ADDQ_An_indir_postinc_reg3,D2            ;check reg is equal to 3
00003F24  6600 0006               4512                                              BNE        ADDQ_An_indir_pinc_r4                           ;if not try reg 4
00003F28  6700 005E               4513                                              BEQ        ADDQ_An_indir_pinc_r3_out                       ;if equal go to output subroutine
00003F2C                          4514   
00003F2C  B4BC 0000001C           4515  ADDQ_An_indir_pinc_r4                       CMP.L      #match_ADDQ_An_indir_postinc_reg4,D2            ;check reg is equal to 4
00003F32  6600 0006               4516                                              BNE        ADDQ_An_indir_pinc_r5                           ;if not try reg 5
00003F36  6700 005C               4517                                              BEQ        ADDQ_An_indir_pinc_r4_out                       ;if equal go to output subroutine
00003F3A                          4518  
00003F3A  B4BC 0000001D           4519  ADDQ_An_indir_pinc_r5                       CMP.L      #match_ADDQ_An_indir_postinc_reg5,D2            ;check reg is equal to 5
00003F40  6600 0006               4520                                              BNE        ADDQ_An_indir_pinc_r6                           ;if not try reg 6
00003F44  6700 005A               4521                                              BEQ        ADDQ_An_indir_pinc_r5_out                       ;if equal go to output subroutine
00003F48                          4522  
00003F48  B4BC 0000001E           4523  ADDQ_An_indir_pinc_r6                       CMP.L      #match_ADDQ_An_indir_postinc_reg6,D2             ;check reg is equal to 6
00003F4E  6600 0006               4524                                              BNE        ADDQ_An_indir_pinc_r7                            ;if not try reg 7
00003F52  6700 0058               4525                                              BEQ        ADDQ_An_indir_pinc_r6_out                        ;if equal go to output subroutine
00003F56                          4526  
00003F56  B4BC 0000001F           4527  ADDQ_An_indir_pinc_r7                       CMP.L      #match_ADDQ_An_indir_postinc_reg7,D2             ;check reg is equal to 7
00003F5C  6700 005A               4528                                              BEQ        ADDQ_An_indir_pinc_r7_out                        ;if equal go to output subroutine
00003F60  6600 F60A               4529                                              BNE        ERROR                                            ;if not equal to an addresssing mode, pritn error
00003F64                          4530  
00003F64                          4531  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00003F64  227C 00006983           4532  ADDQ_An_indir_pinc_r0_out                       MOVE.L      #ea_indir_postinc_A0,A1                           ;load string constant into A1
00003F6A  4CDF 7CBE               4533                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003F6E  4E75                    4534                                                  RTS                                                         ;return to subroutine
00003F70                          4535  
00003F70  227C 00006989           4536  ADDQ_An_indir_pinc_r1_out                       MOVE.L      #ea_indir_postinc_A1,A1                           ;load string constant into A1
00003F76  4CDF 7CBE               4537                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003F7A  4E75                    4538                                                  RTS                                                         ;return to subroutine
00003F7C                          4539  
00003F7C  227C 0000698F           4540  ADDQ_An_indir_pinc_r2_out                       MOVE.L      #ea_indir_postinc_A2,A1                           ;load string constant into A1
00003F82  4CDF 7CBE               4541                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003F86  4E75                    4542                                                  RTS                                                         ;return to subroutine
00003F88                          4543  
00003F88  227C 00006995           4544  ADDQ_An_indir_pinc_r3_out                       MOVE.L      #ea_indir_postinc_A3,A1                           ;load string constant into A1
00003F8E  4CDF 7CBE               4545                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003F92  4E75                    4546                                                  RTS                                                         ;return to subroutine
00003F94                          4547  
00003F94  227C 0000699B           4548  ADDQ_An_indir_pinc_r4_out                       MOVE.L      #ea_indir_postinc_A4,A1                           ;load string constant into A1
00003F9A  4CDF 7CBE               4549                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003F9E  4E75                    4550                                                  RTS                                                         ;return to subroutine
00003FA0                          4551  
00003FA0  227C 000069A1           4552  ADDQ_An_indir_pinc_r5_out                       MOVE.L      #ea_indir_postinc_A5,A1                           ;load string constant into A1
00003FA6  4CDF 7CBE               4553                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FAA  4E75                    4554                                                  RTS                                                         ;return to subroutine
00003FAC                          4555  
00003FAC  227C 000069A7           4556  ADDQ_An_indir_pinc_r6_out                       MOVE.L      #ea_indir_postinc_A6,A1                           ;load string constant into A1
00003FB2  4CDF 7CBE               4557                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FB6  4E75                    4558                                                  RTS                                                         ;return to subroutine
00003FB8                          4559  
00003FB8  227C 000069AD           4560  ADDQ_An_indir_pinc_r7_out                       MOVE.L      #ea_indir_postinc_A7,A1                           ;load string constant into A1
00003FBE  4CDF 7CBE               4561                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00003FC2  4E75                    4562                                                  RTS                                                         ;return to subroutine
00003FC4                          4563  
00003FC4                          4564  ;------------------Address Register Indirect with Pre Decrement-----------------------
00003FC4  B4BC 00000020           4565  ADDQ_An_indir_predec                        CMP.L      #match_ADDQ_An_indir_predec_reg0,D2           ;check reg is equal to 0
00003FCA  6600 0006               4566                                              BNE        ADDQ_An_indir_pdec_r1                         ;if not try reg 1
00003FCE  6700 0064               4567                                              BEQ        ADDQ_An_indir_pdec_r0_out                     ;if equal go to output subroutine
00003FD2                          4568  
00003FD2  B4BC 00000021           4569  ADDQ_An_indir_pdec_r1                       CMP.L      #match_ADDQ_An_indir_predec_reg1,D2           ;check reg is equal to 1
00003FD8  6600 0006               4570                                              BNE        ADDQ_An_indir_pdec_r2                         ;if not try reg 2
00003FDC  6700 0062               4571                                              BEQ        ADDQ_An_indir_pdec_r1_out                     ;if equal go to output subroutine
00003FE0                          4572  
00003FE0  B4BC 00000022           4573  ADDQ_An_indir_pdec_r2                       CMP.L      #match_ADDQ_An_indir_predec_reg2,D2           ;check reg is equal to 2
00003FE6  6600 0006               4574                                              BNE        ADDQ_An_indir_pdec_r3                         ;if not try reg 3
00003FEA  6700 0060               4575                                              BEQ        ADDQ_An_indir_pdec_r2_out                     ;if equal go to output subroutine
00003FEE                          4576  
00003FEE  B4BC 00000023           4577  ADDQ_An_indir_pdec_r3                       CMP.L      #match_ADDQ_An_indir_predec_reg3,D2           ;check reg is equal to 3
00003FF4  6600 0006               4578                                              BNE        ADDQ_An_indir_pdec_r4                         ;if not try reg 4
00003FF8  6700 005E               4579                                              BEQ        ADDQ_An_indir_pdec_r3_out                     ;if equal go to output subroutine
00003FFC                          4580  
00003FFC  B4BC 00000024           4581  ADDQ_An_indir_pdec_r4                       CMP.L      #match_ADDQ_An_indir_predec_reg4,D2           ;check reg is equal to 4
00004002  6600 0006               4582                                              BNE        ADDQ_An_indir_pdec_r5                         ;if not try reg 5
00004006  6700 005C               4583                                              BEQ        ADDQ_An_indir_pdec_r4_out                     ;if equal go to output subroutine
0000400A                          4584  
0000400A  B4BC 00000025           4585  ADDQ_An_indir_pdec_r5                       CMP.L      #match_ADDQ_An_indir_predec_reg5,D2           ;check reg is equal to 5
00004010  6600 0006               4586                                              BNE        ADDQ_An_indir_pdec_r6                         ;if not try reg 6
00004014  6700 005A               4587                                              BEQ        ADDQ_An_indir_pdec_r5_out                     ;if equal go to output subroutine
00004018                          4588  
00004018  B4BC 00000026           4589  ADDQ_An_indir_pdec_r6                       CMP.L      #match_ADDQ_An_indir_predec_reg6,D2           ;check reg is equal to 6
0000401E  6600 0006               4590                                              BNE        ADDQ_An_indir_pdec_r7                         ;if not try reg 7
00004022  6700 0058               4591                                              BEQ        ADDQ_An_indir_pdec_r6_out                     ;if equal go to output subroutine
00004026                          4592  
00004026  B4BC 00000027           4593  ADDQ_An_indir_pdec_r7                       CMP.L      #match_ADDQ_An_indir_predec_reg7,D2           ;check reg is equal to 7
0000402C  6700 005A               4594                                              BEQ        ADDQ_An_indir_pdec_r7_out                    ;if equal go to output subroutine
00004030  6600 F53A               4595                                              BNE        ERROR                                        ;if not equal to an addresssing mode, pritn error
00004034                          4596  
00004034                          4597  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00004034  227C 000069B3           4598  ADDQ_An_indir_pdec_r0_out                   MOVE.L      #ea_indir_predec_A0,A1                        ;load string constant into A1
0000403A  4CDF 7CBE               4599                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000403E  4E75                    4600                                              RTS                                                     ;return to subroutine
00004040                          4601                                              
00004040  227C 000069B9           4602  ADDQ_An_indir_pdec_r1_out                   MOVE.L      #ea_indir_predec_A1,A1                      ;load string constant into A1
00004046  4CDF 7CBE               4603                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000404A  4E75                    4604                                              RTS                                                     ;return to subroutine
0000404C                          4605  
0000404C  227C 000069BF           4606  ADDQ_An_indir_pdec_r2_out                   MOVE.L      #ea_indir_predec_A2,A1                      ;load string constant into A1
00004052  4CDF 7CBE               4607                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004056  4E75                    4608                                              RTS                                                     ;return to subroutine
00004058                          4609  
00004058  227C 000069C5           4610  ADDQ_An_indir_pdec_r3_out                   MOVE.L      #ea_indir_predec_A3,A1                      ;load string constant into A1
0000405E  4CDF 7CBE               4611                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004062  4E75                    4612                                              RTS                                                     ;return to subroutine
00004064                          4613  
00004064  227C 000069CB           4614  ADDQ_An_indir_pdec_r4_out                   MOVE.L      #ea_indir_predec_A4,A1                      ;load string constant into A1
0000406A  4CDF 7CBE               4615                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000406E  4E75                    4616                                              RTS                                                     ;return to subroutine
00004070                          4617  
00004070  227C 000069D1           4618  ADDQ_An_indir_pdec_r5_out                   MOVE.L      #ea_indir_predec_A5,A1                      ;load string constant into A1
00004076  4CDF 7CBE               4619                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000407A  4E75                    4620                                              RTS                                                     ;return to subroutine
0000407C                          4621  
0000407C  227C 000069D7           4622  ADDQ_An_indir_pdec_r6_out                   MOVE.L      #ea_indir_predec_A6,A1                      ;load string constant into A1
00004082  4CDF 7CBE               4623                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004086  4E75                    4624                                              RTS                                                     ;return to subroutine
00004088                          4625  
00004088  227C 000069DD           4626  ADDQ_An_indir_pdec_r7_out                   MOVE.L      #ea_indir_predec_A7,A1                      ;load string constant into A1
0000408E  4CDF 7CBE               4627                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004092  4E75                    4628                                              RTS                                                     ;return to subroutine
00004094                          4629  
00004094                          4630  ;------------------Absolute Addressing Output-----------------------
00004094  22FC 000069ED           4631  ADDQ_abs_add_word_out                    MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000409A  22C5                    4632                                           MOVE.L      D5,(A1)+                           ;load address                  
0000409C  4CDF 7CBE               4633                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000040A0  4E75                    4634                                           RTS                                            :return to subroutine
000040A2                          4635                                             
000040A2                          4636  
000040A2  2A18                    4637  ADDQ_abs_add_long_out                    MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000040A4  22FC 000069ED           4638                                           MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
000040AA  22C5                    4639                                           MOVE.L      D5,(A1)+                           ;load address                  
000040AC  4CDF 7CBE               4640                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000040B0  4E75                    4641                                           RTS                                           
000040B2                          4642  ;----------------------Error Handling----------------------------------------
000040B2                          4643  
000040B2                          4644  
000040B2  =00000038               4645  mask_ADDQ_ea_mode           EQU         $0038
000040B2  =0000003F               4646  mask_ADDQ_abs_add           EQU         $003F
000040B2  =0000003F               4647  mask_ADDQ_ea_reg_and_mode   EQU         $003F
000040B2  =00000E00               4648  mask_ADDQ_reg               EQU         $0E00
000040B2                          4649  
000040B2  =00000000               4650  match_ADDQ_Dn               EQU         $0000
000040B2  =00000008               4651  match_ADDQ_An               EQU         $0008
000040B2  =00000010               4652  match_ADDQ_An_indir         EQU         $0010
000040B2  =00000020               4653  match_ADDQ_An_indir_predec  EQU         $0020
000040B2  =00000018               4654  match_ADDQ_An_indir_postinc EQU         $0018
000040B2  =00000038               4655  match_ADDQ_abs_add_word     EQU         $0038
000040B2  =00000039               4656  match_ADDQ_abs_add_long     EQU         $0039
000040B2                          4657  
000040B2  =00000000               4658  match_ADDQ_D0               EQU         $0000
000040B2  =00000001               4659  match_ADDQ_D1               EQU         $0001
000040B2  =00000002               4660  match_ADDQ_D2               EQU         $0002
000040B2  =00000003               4661  match_ADDQ_D3               EQU         $0003
000040B2  =00000004               4662  match_ADDQ_D4               EQU         $0004
000040B2  =00000005               4663  match_ADDQ_D5               EQU         $0005
000040B2  =00000006               4664  match_ADDQ_D6               EQU         $0006
000040B2  =00000007               4665  match_ADDQ_D7               EQU         $0007
000040B2                          4666  
000040B2  =00000008               4667  match_ADDQ_A0               EQU         $0008
000040B2  =00000009               4668  match_ADDQ_A1               EQU         $0009
000040B2  =0000000A               4669  match_ADDQ_A2               EQU         $000A
000040B2  =0000000B               4670  match_ADDQ_A3               EQU         $000B
000040B2  =0000000C               4671  match_ADDQ_A4               EQU         $000C
000040B2  =0000000D               4672  match_ADDQ_A5               EQU         $000D
000040B2  =0000000E               4673  match_ADDQ_A6               EQU         $000E
000040B2  =0000000F               4674  match_ADDQ_A7               EQU         $000F
000040B2                          4675  
000040B2  =00000010               4676  match_ADDQ_An_indir_r0      EQU         $0010
000040B2  =00000011               4677  match_ADDQ_An_indir_r1      EQU         $0011
000040B2  =00000012               4678  match_ADDQ_An_indir_r2      EQU         $0012
000040B2  =00000013               4679  match_ADDQ_An_indir_r3      EQU         $0013
000040B2  =00000014               4680  match_ADDQ_An_indir_r4      EQU         $0014
000040B2  =00000015               4681  match_ADDQ_An_indir_r5      EQU         $0015
000040B2  =00000016               4682  match_ADDQ_An_indir_r6      EQU         $0016
000040B2  =00000017               4683  match_ADDQ_An_indir_r7      EQU         $0017
000040B2                          4684  
000040B2  =00000018               4685  match_ADDQ_An_indir_postinc_reg0        EQU         $0018
000040B2  =00000019               4686  match_ADDQ_An_indir_postinc_reg1        EQU         $0019
000040B2  =0000001A               4687  match_ADDQ_An_indir_postinc_reg2        EQU         $001A
000040B2  =0000001B               4688  match_ADDQ_An_indir_postinc_reg3        EQU         $001B
000040B2  =0000001C               4689  match_ADDQ_An_indir_postinc_reg4        EQU         $001C
000040B2  =0000001D               4690  match_ADDQ_An_indir_postinc_reg5        EQU         $001D
000040B2  =0000001E               4691  match_ADDQ_An_indir_postinc_reg6        EQU         $001E
000040B2  =0000001F               4692  match_ADDQ_An_indir_postinc_reg7        EQU         $001F
000040B2                          4693  
000040B2  =00000020               4694  match_ADDQ_An_indir_predec_reg0         EQU         $0020
000040B2  =00000021               4695  match_ADDQ_An_indir_predec_reg1         EQU         $0021
000040B2  =00000022               4696  match_ADDQ_An_indir_predec_reg2         EQU         $0022
000040B2  =00000023               4697  match_ADDQ_An_indir_predec_reg3         EQU         $0023
000040B2  =00000024               4698  match_ADDQ_An_indir_predec_reg4         EQU         $0024
000040B2  =00000025               4699  match_ADDQ_An_indir_predec_reg5         EQU         $0025
000040B2  =00000026               4700  match_ADDQ_An_indir_predec_reg6         EQU         $0026
000040B2  =00000027               4701  match_ADDQ_An_indir_predec_reg7         EQU         $0027
000040B2                          4702  
000040B2                          4703  
000040B2  =00000000               4704  match_ADDQ_reg0                         EQU         $0000
000040B2  =00000200               4705  match_ADDQ_reg1                         EQU         $0200
000040B2  =00000400               4706  match_ADDQ_reg2                         EQU         $0400
000040B2  =00000600               4707  match_ADDQ_reg3                         EQU         $0600
000040B2  =00000800               4708  match_ADDQ_reg4                         EQU         $0800
000040B2  =00000A00               4709  match_ADDQ_reg5                         EQU         $0A00
000040B2  =00000C00               4710  match_ADDQ_reg6                         EQU         $0C00
000040B2  =00000E00               4711  match_ADDQ_reg7                         EQU         $0E00
000040B2                          4712  
000040B2                          4713  
000040B2                          4714  
000040B2                          4715  
000040B2                          4716  
000040B2                          4717  
000040B2                          4718  
000040B2                          4719  -------------------- end include --------------------
000040B2                          4720              INCLUDE 'ASD Subroutine.x68'
000040B2                          4721  
000040B2  48E7 7D3E               4722  ASD_sub                          MOVEM.L           D1-D5/D7/A2-A6, -(SP)                     ;preserve the registers,\ 
000040B6                          4723                                   
000040B6                          4724  ;------------------------Determine Shift Type-----------------------------------------------------------------
000040B6  C2BC 000000C0           4725  shift_type                       AND.L              #mask_ASD_shift_type,D1                 ;load mask into D1
000040BC  B2BC 000000C0           4726                                   CMP.L              #match_ASD_mem_shift,D1                 ;check to see if memory shift
000040C2  6700 0006               4727                                   BEQ                ASD_mem_shift                               ;if equal go to mem shift subroutine
000040C6  6600 02F6               4728                                   BNE                ASD_reg_shift                               ;if ASD mem shift, go to reg shift
000040CA                          4729  
000040CA                          4730  ;--------------Determine EFFECTIVE ADDRESS Mode-------------MEMORY SHIFT-----------------------------------                
000040CA  4241                    4731  ASD_mem_shift                    CLR               D1                                        ;clear shift mask
000040CC  C2BC 00000038           4732                                   AND.L             #mask_ASD_ea_mode,D1                      ;move the mask to D1
000040D2                          4733  
000040D2  B2BC 00000010           4734  ASD_An_indir                     CMP.L             #match_ASD_An_indir,D1                    ;check to see if mode is add reg indir
000040D8  6600 0014               4735                                   BNE               ASD_An_indir_predec                           ;if ASD, go check add reg indir predec 
000040DC  6700 0042               4736                                   BEQ               ASD_An_indir_reg                              ;if equal go figure out the register           
000040E0                          4737            
000040E0  B2BC 00000020           4738  ASD_An_indir_postinc             CMP.L             #match_ASD_An_indir_postinc,D1            ;check to see if mode is add reg indor w/ postinc
000040E6  6600 0006               4739                                   BNE               ASD_An_indir_predec                           ;if ASD go check add reg indir/predec
000040EA  6700 010C               4740                                   BEQ               ASD_An_indir_postinc_reg                      ;if equal go figure out the register
000040EE                          4741                        
000040EE  B2BC 00000018           4742  ASD_An_indir_predec              CMP.L             #match_ASD_An_indir_predec,D1             ;check to see if mode is add reg indir w/predec
000040F4  6600 0006               4743                                   BNE               ASD_abs_add_word                              ;if ASD go check abs add word
000040F8  6700 01D6               4744                                   BEQ               ASD_An_indir_predec_reg                       ;if equal go figure out the register
000040FC                          4745  
000040FC  C4BC 0000003F           4746  ASD_abs_add_word                 AND.L             #mask_ASD_ea_mode_abs_add,D2              ;load mask to determine if abs add word or long
00004102                          4747                                   
00004102  B4BC 00000039           4748                                   CMP.L             #match_ASD_abs_add_word,D2                ;check if abs add word
00004108  2A18                    4749                                   MOVE.L            (A0)+,D5                                  ;pull the next word instruction that holds the address 
0000410A  6600 0006               4750                                   BNE               ASD_abs_add_long                              ;if ASD go check abs add long
0000410E  6700 0290               4751                                   BEQ               ASD_abs_add_word_out                          ;if equal go to output
00004112                          4752    
00004112  B4BC 0000003C           4753  ASD_abs_add_long                 CMP.L             #match_ASD_abs_add_long,D2                ;check to see if abs add long
00004118  6700 0294               4754                                   BEQ               ASD_abs_add_long_out                          ;if equal go to output
0000411C  6600 F44E               4755                                   BNE               ERROR                                     ;if ASD equal to an addresssing mode, pritn error
00004120                          4756                               
00004120                          4757  
00004120                          4758  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004120                          4759                                              
00004120                          4760  ;------------------Address Register Indirect-----------------------
00004120  4242                    4761  ASD_An_indir_reg                            CLR             D2                                      ;make sure D2 is empty
00004122  C4BC 0000003F           4762                                              AND.L           #mask_ASD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00004128                          4763                                              
00004128  B4BC 00000010           4764                                              CMP.L           #match_ASD_An_indir_r0,D2              ;check reg is equal to 0
0000412E  6600 0006               4765                                              BNE             ASD_An_indir_reg1                            ;if ASD try reg 1
00004132  6700 0064               4766                                              BEQ             ASD_An_indir_reg0_out                     ;if equal go to output subroutine
00004136                          4767  
00004136  B4BC 00000011           4768  ASD_An_indir_reg1                           CMP.L           #match_ASD_An_indir_r1,D2              ;check reg is equal to 1
0000413C  6600 0006               4769                                              BNE             ASD_An_indir_reg2                            ;if ASD try reg 2
00004140  6700 0062               4770                                              BEQ             ASD_An_indir_reg1_out                     ;if equal go to output subroutine
00004144                          4771  
00004144  B4BC 00000012           4772  ASD_An_indir_reg2                           CMP.L           #match_ASD_An_indir_r2,D2              ;check reg is equal to 2
0000414A  6600 0006               4773                                              BNE             ASD_An_indir_reg3                            ;if ASD try reg 3
0000414E  6700 0060               4774                                              BEQ             ASD_An_indir_reg2_out                     ;if equal go to output subroutine
00004152                          4775  
00004152  B4BC 00000013           4776  ASD_An_indir_reg3                           CMP.L           #match_ASD_An_indir_r3,D2              ;check reg is equal to 3
00004158  6600 0006               4777                                              BNE             ASD_An_indir_reg4                            ;if ASD try reg 4
0000415C  6700 005E               4778                                              BEQ             ASD_An_indir_reg3_out                     ;if equal go to output subroutine
00004160                          4779  
00004160  B4BC 00000014           4780  ASD_An_indir_reg4                           CMP.L           #match_ASD_An_indir_r4,D2              ;check reg is equal to 4
00004166  6600 0006               4781                                              BNE             ASD_An_indir_reg5                            ;if ASD try reg 5
0000416A  6700 005C               4782                                              BEQ             ASD_An_indir_reg4_out                    ;if equal go to output subroutine
0000416E                          4783  
0000416E  B4BC 00000015           4784  ASD_An_indir_reg5                           CMP.L           #match_ASD_An_indir_r5,D2              ;check reg is equal to 5
00004174  6600 0006               4785                                              BNE             ASD_An_indir_reg6                            ;if ASD try reg 6
00004178  6700 005A               4786                                              BEQ             ASD_An_indir_reg5_out                     ;if equal go to output subroutine
0000417C                          4787  
0000417C  B4BC 00000016           4788  ASD_An_indir_reg6                           CMP.L           #match_ASD_An_indir_r6,D2              ;check reg is equal to 6
00004182  6700 005C               4789                                              BEQ             ASD_An_indir_reg6_out                     ;if equal go to output subroutine
00004186  6600 0002               4790                                              BNE             ASD_An_indir_reg7                            ;if ASD try reg 7
0000418A                          4791  
0000418A  B4BC 00000017           4792  ASD_An_indir_reg7                           CMP.L           #match_ASD_An_indir_r7,D2              ;check reg is equal to 6
00004190  6700 005A               4793                                              BEQ             ASD_An_indir_reg7_out                     ;if equal go to output subroutine
00004194  6600 F3D6               4794                                              BNE             ERROR                                        :if ASD equal to an addresssing mode, pritn error
00004198                          4795  
00004198                          4796  ;--------------------Address Register Indirect Output-----------------------
00004198  227C 0000695B           4797  ASD_An_indir_reg0_out                       MOVE.L          #ea_indir_A0,A1                         ;load string constant into A1
0000419E  4CDF 7CBE               4798                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000041A2  4E75                    4799                                              RTS                                                         ;return to subroutine
000041A4                          4800                                      
000041A4  227C 00006960           4801  ASD_An_indir_reg1_out                       MOVE.L          #ea_indir_A1,A1                         ;load string constant into A1
000041AA  4CDF 7CBE               4802                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000041AE  4E75                    4803                                              RTS                                                         ;return to subroutine
000041B0                          4804                                              
000041B0  227C 00006965           4805  ASD_An_indir_reg2_out                       MOVE.L          #ea_indir_A2,A1                         ;load string constant into A1
000041B6  4CDF 7CBE               4806                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000041BA  4E75                    4807                                              RTS                                                     ;return to subroutine
000041BC                          4808  
000041BC  227C 0000696A           4809  ASD_An_indir_reg3_out                       MOVE.L          #ea_indir_A3,A1                         ;load string constant into A1
000041C2  4CDF 7CBE               4810                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000041C6  4E75                    4811                                              RTS                                                         ;return to subroutine
000041C8                          4812                                              
000041C8  227C 0000696F           4813  ASD_An_indir_reg4_out                       MOVE.L          #ea_indir_A4,A1                         ;load string constant into A1
000041CE  4CDF 7CBE               4814                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000041D2  4E75                    4815                                              RTS                                                         ;return to subroutine
000041D4                          4816                                          
000041D4  227C 00006974           4817  ASD_An_indir_reg5_out                       MOVE.L          #ea_indir_A5,A1                         ;load string constant into A1
000041DA  4CDF 7CBE               4818                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000041DE  4E75                    4819                                              RTS                                                     ;return to subroutine
000041E0                          4820  
000041E0  227C 00006979           4821  ASD_An_indir_reg6_out                       MOVE.L          #ea_indir_A6,A1                           ;load string constant into A1
000041E6  4CDF 7CBE               4822                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000041EA  4E75                    4823                                              RTS                                                         ;return to subroutine
000041EC                          4824  
000041EC  227C 0000697E           4825  ASD_An_indir_reg7_out                       MOVE.L          #ea_indir_A7,A1                           ;load string constant into A1
000041F2  4CDF 7CBE               4826                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000041F6  4E75                    4827                                              RTS                                                         ;return to subroutine
000041F8                          4828  
000041F8                          4829  
000041F8                          4830  ;------------------Address Register Indirect with Post Increment-----------------------
000041F8  4242                    4831  ASD_An_indir_postinc_reg                    CLR        D2                                      ;make sure D2 is empty
000041FA  C4BC 0000003F           4832                                              AND.L      #mask_ASD_ea_reg_and_mode,D2            ;load the mask into D2 for the mode and the register
00004200                          4833  
00004200  B4BC 00000020           4834                                              CMP.L      #match_ASD_An_indir_postinc_r0,D2        ;check reg is equal to 0
00004206  6600 0006               4835                                              BNE        ASD_An_indir_pinc_r1                      ;if ASD try reg 1
0000420A  6700 0064               4836                                              BEQ        ASD_An_indir_pinc_r0_out               ;if equal go to output subroutine
0000420E                          4837  
0000420E  B4BC 00000021           4838  ASD_An_indir_pinc_r1                        CMP.L      #match_ASD_An_indir_postinc_r1,D2        ;check reg is equal to 1
00004214  6600 0006               4839                                              BNE        ASD_An_indir_pinc_r2                      ;if ASD try reg 2
00004218  6700 0062               4840                                              BEQ        ASD_An_indir_pinc_r1_out               ;if equal go to output subroutine
0000421C                          4841  
0000421C  B4BC 00000022           4842  ASD_An_indir_pinc_r2                        CMP.L      #match_ASD_An_indir_postinc_r2,D2        ;check reg is equal to 2
00004222  6600 0006               4843                                              BNE        ASD_An_indir_pinc_r3                      ;if ASD try reg 3
00004226  6700 0060               4844                                              BEQ        ASD_An_indir_pinc_r2_out               ;if equal go to output subroutine
0000422A                          4845      
0000422A  B4BC 00000023           4846  ASD_An_indir_pinc_r3                        CMP.L      #match_ASD_An_indir_postinc_r3,D2        ;check reg is equal to 3
00004230  6600 0006               4847                                              BNE        ASD_An_indir_pinc_r4                      ;if ASD try reg 4
00004234  6700 005E               4848                                              BEQ        ASD_An_indir_pinc_r3_out               ;if equal go to output subroutine
00004238                          4849  
00004238  B4BC 00000024           4850  ASD_An_indir_pinc_r4                        CMP.L      #match_ASD_An_indir_postinc_r4,D2        ;check reg is equal to 4
0000423E  6600 0006               4851                                              BNE        ASD_An_indir_pinc_r5                      ;if ASD try reg 5
00004242  6700 005C               4852                                              BEQ        ASD_An_indir_pinc_r4_out               ;if equal go to output subroutine
00004246                          4853  
00004246  B4BC 00000025           4854  ASD_An_indir_pinc_r5                        CMP.L      #match_ASD_An_indir_postinc_r5,D2        ;check reg is equal to 5
0000424C  6600 0006               4855                                              BNE        ASD_An_indir_pinc_r6                      ;if ASD try reg 6
00004250  6700 005A               4856                                              BEQ        ASD_An_indir_pinc_r5_out               ;if equal go to output subroutine
00004254                          4857  
00004254  B4BC 00000026           4858  ASD_An_indir_pinc_r6                        CMP.L      #match_ASD_An_indir_postinc_r6,D2        ;check reg is equal to 6
0000425A  6700 005C               4859                                              BEQ        ASD_An_indir_pinc_r6_out              ;if equal go to output subroutine
0000425E  6600 0002               4860                                              BNE        ASD_An_indir_pinc_r7
00004262                          4861  
00004262                          4862  
00004262  B4BC 00000026           4863  ASD_An_indir_pinc_r7                        CMP.L      #match_ASD_An_indir_postinc_r6,D2        ;check reg is equal to 6
00004268  6700 005A               4864                                              BEQ        ASD_An_indir_pinc_r7_out              ;if equal go to output subroutine
0000426C  6600 F2FE               4865                                              BNE        ERROR                                        :if ASD equal to an addresssing mode, pritn error
00004270                          4866  
00004270                          4867  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00004270  227C 00006989           4868  ASD_An_indir_pinc_r0_out                        MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
00004276  4CDF 7CBE               4869                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000427A  4E75                    4870                                                  RTS                                             ;return to subroutine
0000427C                          4871  
0000427C  227C 00006989           4872  ASD_An_indir_pinc_r1_out                        MOVE.L          #ea_indir_postinc_A1,A1         ;load string constant into A1
00004282  4CDF 7CBE               4873                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004286  4E75                    4874                                                  RTS                                             ;return to subroutine
00004288                          4875  
00004288  227C 0000698F           4876  ASD_An_indir_pinc_r2_out                        MOVE.L          #ea_indir_postinc_A2,A1         ;load string constant into A1
0000428E  4CDF 7CBE               4877                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004292  4E75                    4878                                                  RTS                                             ;return to subroutine
00004294                          4879  
00004294  227C 00006995           4880  ASD_An_indir_pinc_r3_out                        MOVE.L          #ea_indir_postinc_A3,A1         ;load string constant into A1
0000429A  4CDF 7CBE               4881                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000429E  4E75                    4882                                                  RTS                                             ;return to subroutine
000042A0                          4883  
000042A0  227C 0000699B           4884  ASD_An_indir_pinc_r4_out                        MOVE.L          #ea_indir_postinc_A4,A1         ;load string constant into A1
000042A6  4CDF 7CBE               4885                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042AA  4E75                    4886                                                  RTS                                             ;return to subroutine
000042AC                          4887  
000042AC  227C 000069A1           4888  ASD_An_indir_pinc_r5_out                        MOVE.L          #ea_indir_postinc_A5,A1         ;load string constant into A1
000042B2  4CDF 7CBE               4889                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042B6  4E75                    4890                                                  RTS                                             ;return to subroutine
000042B8                          4891   
000042B8  227C 000069A7           4892  ASD_An_indir_pinc_r6_out                        MOVE.L          #ea_indir_postinc_A6,A1         ;load string constant into A1
000042BE  4CDF 7CBE               4893                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042C2  4E75                    4894                                                  RTS                                             ;return to subroutine
000042C4                          4895  
000042C4  227C 000069AD           4896  ASD_An_indir_pinc_r7_out                        MOVE.L          #ea_indir_postinc_A7,A1         ;load string constant into A1
000042CA  4CDF 7CBE               4897                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000042CE  4E75                    4898                                                  RTS                                             ;return to subroutine
000042D0                          4899  
000042D0                          4900                                                      
000042D0                          4901  ;------------------Address Register Indirect with Pre Decrement-----------------------
000042D0  B4BC 00000018           4902  ASD_An_indir_predec_reg                     CMP.L      #match_ASD_An_indir_predec_r0,D2         ;check reg is equal to 0
000042D6  6600 0006               4903                                              BNE        ASD_An_indir_pdec_r1                      ;if ASD try reg 1
000042DA  6700 0064               4904                                              BEQ        ASD_An_indir_pdec_r0_out               ;if equal go to output subroutine
000042DE                          4905  
000042DE  B4BC 00000019           4906  ASD_An_indir_pdec_r1                        CMP.L      #match_ASD_An_indir_predec_r1,D2         ;check reg is equal to 1
000042E4  6600 0006               4907                                              BNE        ASD_An_indir_pdec_r2                      ;if ASD try reg 2
000042E8  6700 0062               4908                                              BEQ        ASD_An_indir_pdec_r1_out               ;if equal go to output subroutine
000042EC                          4909  
000042EC  B4BC 0000001A           4910  ASD_An_indir_pdec_r2                        CMP.L      #match_ASD_An_indir_predec_r2,D2         ;check reg is equal to 2
000042F2  6600 0006               4911                                              BNE        ASD_An_indir_pdec_r3                      ;if ASD try reg 3
000042F6  6700 0060               4912                                              BEQ        ASD_An_indir_pdec_r2_out               ;if equal go to output subroutine
000042FA                          4913  
000042FA  B4BC 0000001B           4914  ASD_An_indir_pdec_r3                        CMP.L      #match_ASD_An_indir_predec_r3,D2         ;check reg is equal to 3
00004300  6600 0006               4915                                              BNE        ASD_An_indir_pdec_r4                      ;if ASD try reg 4
00004304  6700 005E               4916                                              BEQ        ASD_An_indir_pdec_r3_out               ;if equal go to output subroutine
00004308                          4917  
00004308  B4BC 0000001C           4918  ASD_An_indir_pdec_r4                        CMP.L      #match_ASD_An_indir_predec_r4,D2         ;check reg is equal to 4
0000430E  6600 0006               4919                                              BNE        ASD_An_indir_pdec_r5                      ;if ASD try reg 5
00004312  6700 005C               4920                                              BEQ        ASD_An_indir_pdec_r4_out               ;if equal go to output subroutine
00004316                          4921  
00004316  B4BC 0000001D           4922  ASD_An_indir_pdec_r5                        CMP.L        #match_ASD_An_indir_predec_r5,D2         ;check reg is equal to 5
0000431C  6600 0006               4923                                              BNE        ASD_An_indir_pdec_r6                      ;if ASD try reg 6
00004320  6700 005A               4924                                              BEQ        ASD_An_indir_pdec_r5_out               ;if equal go to output subroutine
00004324                          4925  
00004324  B4BC 0000001E           4926  ASD_An_indir_pdec_r6                        CMP.L        #match_ASD_An_indir_predec_r6,D2         ;check reg is equal to 6
0000432A  6700 005C               4927                                              BEQ        ASD_An_indir_pdec_r6_out               ;if equal go to output subroutine
0000432E  6600 0002               4928                                              BNE        ASD_An_indir_pdec_r7
00004332                          4929  
00004332  B4BC 0000001E           4930  ASD_An_indir_pdec_r7                        CMP.L        #match_ASD_An_indir_predec_r6,D2         ;check reg is equal to 6
00004338  6700 005A               4931                                              BEQ        ASD_An_indir_pdec_r7_out               ;if equal go to output subroutine
0000433C  6600 F22E               4932                                              BNE        ERROR                                        :if ASD equal to an addresssing mode, pritn error
00004340                          4933  
00004340                          4934  
00004340                          4935  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00004340  227C 000069B3           4936  ASD_An_indir_pdec_r0_out                    MOVE.L          #ea_indir_predec_A0,A1                          ;load string constant into A1
00004346  4CDF 7CBE               4937                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000434A  4E75                    4938                                              RTS                                                     ;return to subroutine
0000434C                          4939  
0000434C  227C 000069B9           4940  ASD_An_indir_pdec_r1_out                    MOVE.L          #ea_indir_predec_A1,A1                          ;load string constant into A1
00004352  4CDF 7CBE               4941                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004356  4E75                    4942                                              RTS                                                     ;return to subroutine
00004358                          4943                                                      
00004358  227C 000069BF           4944  ASD_An_indir_pdec_r2_out                    MOVE.L          #ea_indir_predec_A2,A1                          ;load string constant into A1
0000435E  4CDF 7CBE               4945                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004362  4E75                    4946                                              RTS                                                     ;return to subroutine
00004364                          4947  
00004364  227C 000069C5           4948  ASD_An_indir_pdec_r3_out                    MOVE.L          #ea_indir_predec_A3,A1                          ;load string constant into A1
0000436A  4CDF 7CBE               4949                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000436E  4E75                    4950                                              RTS                                                     ;return to subroutine
00004370                          4951  
00004370  227C 000069CB           4952  ASD_An_indir_pdec_r4_out                    MOVE.L          #ea_indir_predec_A4,A1                          ;load string constant into A1
00004376  4CDF 7CBE               4953                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000437A  4E75                    4954                                              RTS                                                     ;return to subroutine
0000437C                          4955      
0000437C  227C 000069D1           4956  ASD_An_indir_pdec_r5_out                    MOVE.L          #ea_indir_predec_A5,A1                          ;load string constant into A1
00004382  4CDF 7CBE               4957                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004386  4E75                    4958                                              RTS                                                     ;return to subroutine
00004388                          4959      
00004388  227C 000069D7           4960  ASD_An_indir_pdec_r6_out                    MOVE.L          #ea_indir_predec_A6,A1                          ;load string constant into A1
0000438E  4CDF 7CBE               4961                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004392  4E75                    4962                                              RTS                                                     ;return to subroutine
00004394                          4963  
00004394  227C 000069DD           4964  ASD_An_indir_pdec_r7_out                    MOVE.L          #ea_indir_predec_A7,A1                          ;load string constant into A1
0000439A  4CDF 7CBE               4965                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000439E  4E75                    4966                                              RTS                                                     ;return to subroutine
000043A0                          4967  
000043A0                          4968                                                      
000043A0                          4969  ;------------------Absolute Addressing Output-----------------------
000043A0  22FC 000069ED           4970  ASD_abs_add_word_out                      MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
000043A6  22C5                    4971                                           MOVE.L      D5,(A1)+                           ;load address                  
000043A8  4CDF 7CBE               4972                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000043AC  4E75                    4973                                           RTS                                            :return to subroutine
000043AE                          4974                                             
000043AE                          4975  
000043AE  2A18                    4976  ASD_abs_add_long_out                      MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000043B0  22FC 000069ED           4977                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000043B6  22C5                    4978                                           MOVE.L      D5,(A1)+                           ;load address                  
000043B8  4CDF 7CBE               4979                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000043BC  4E75                    4980                                           RTS                                            :return to subroutine                                            
000043BE                          4981  ;----------------------Error Handling----------------------------------------
000043BE                          4982                                         ;return to subroutine
000043BE                          4983                                                  
000043BE                          4984  ;-----------------------------------------------------------------Register Shift-----------------------------------------------------------
000043BE                          4985  ; determine if the shift is a data register or a immediate value
000043BE  4241                    4986  ASD_reg_shift                       CLR         D1                              ;clear D1
000043C0  C2BC 00000020           4987                                      AND.L       #mask_ASD_reg_shift_ir,D1           ;load the mask into D1
000043C6  B2BC 00000020           4988                                      CMP.L       #match_ASD_shift_reg,D1             ;check to see if the shift is a data register
000043CC  6700 0006               4989                                       BEQ         ASD_shift_reg                       ;if the shift is a register, go to subroutine
000043D0  6600 007A               4990                                      BNE         ASD_count_val                       ;if ASD go to immediate value subroutine
000043D4                          4991  
000043D4                          4992  ;i/r = 1, the shift is a Data register                                    
000043D4                          4993  ; this the subroutine for the data register shift
000043D4  4241                    4994  ASD_shift_reg                           CLR         D1                              ;clear D1
000043D6  C2BC 00000020           4995                                          AND.L       #mask_ASD_reg_shift,D1              ;load mask into D1 for bits 11-9
000043DC                          4996  
000043DC  B2BC 00000000           4997  ASD_count_reg0                          CMP.L       #match_ASD_count_reg0,D1            ;check to see if count/shift = 0
000043E2  6600 0006               4998                                          BNE         ASD_count_reg1                    ;if ASD go check 1
000043E6  6700 0134               4999                                          BEQ         ASD_count_reg0_out                ;got to output
000043EA                          5000                                      
000043EA  B2BC 00000200           5001  ASD_count_reg1                          CMP.L       #match_ASD_count_reg1,D1            ;check to see if count/shift = 1
000043F0  6600 0006               5002                                          BNE         ASD_count_reg2                    ;if ASD go check 2
000043F4  6700 0132               5003                                          BEQ         ASD_count_reg1_out                ;got to output
000043F8                          5004  
000043F8  B2BC 00000400           5005  ASD_count_reg2                          CMP.L       #match_ASD_count_reg2,D1            ;check to see if count/shift = 2
000043FE  6600 0006               5006                                          BNE         ASD_count_reg3                    ;if ASD go check 3
00004402  6700 0130               5007                                          BEQ         ASD_count_reg2_out                ;got to output
00004406                          5008  
00004406  B2BC 00000600           5009  ASD_count_reg3                          CMP.L       #match_ASD_count_reg3,D1            ;check to see if count/shift = 3
0000440C  6600 0006               5010                                          BNE         ASD_count_reg4                    ;if ASD go check 4
00004410  6700 012E               5011                                          BEQ         ASD_count_reg3_out                ;got to output
00004414                          5012  
00004414  B2BC 00000800           5013  ASD_count_reg4                          CMP.L       #match_ASD_count_reg4,D1            ;check to see if count/shift = 4
0000441A  6600 0006               5014                                          BNE         ASD_count_reg5                    ;if ASD go check 5
0000441E  6700 012C               5015                                          BEQ         ASD_count_reg4_out                ;got to output
00004422                          5016    
00004422  B2BC 00000A00           5017  ASD_count_reg5                          CMP.L       #match_ASD_count_reg5,D1            ;check to see if count/shift = 5
00004428  6600 0006               5018                                          BNE         ASD_count_reg6                      ;if ASD go check 6
0000442C  6700 012A               5019                                          BEQ         ASD_count_reg5_out                  ;got to output
00004430                          5020  
00004430  B2BC 00000C00           5021  ASD_count_reg6                          CMP.L       #match_ASD_count_reg6,D1            ;check to see if count/shift = 6
00004436  6600 0006               5022                                          BNE         ASD_count_reg7                      ;if ASD go check 7
0000443A  6700 0128               5023                                          BEQ         ASD_count_reg6_out                  ;got to output
0000443E                          5024  
0000443E  B2BC 00000E00           5025  ASD_count_reg7                          CMP.L       #match_ASD_count_reg7,D1            ;check to see if count/shift = 7
00004444  6600 F126               5026                                          BNE         ERROR                           ; if none of the registers, then print error message
00004448  6700 0126               5027                                          BEQ         ASD_count_reg7_out                  ;got to output
0000444C                          5028  
0000444C                          5029  
0000444C                          5030  
0000444C                          5031  ;i/r = 0, the shift is an immediate value
0000444C                          5032  ;1-7 = 1-7
0000444C                          5033  ;0 = 8
0000444C                          5034  ; this is the subroutine for the immedite value shift
0000444C  B2BC 00000000           5035  ASD_count_val                       CMP.L       #match_ASD_count_val0,D1          ;check to see if shift count is 0
00004452  6600 0006               5036                                      BNE         ASD_count_val1                    ;if ASD 0 check 1
00004456  6700 0064               5037                                      BEQ         ASD_count_val0_out                ;if 0 got to output
0000445A                          5038  
0000445A  B2BC 00000200           5039  ASD_count_val1                      CMP.L       #match_ASD_count_val1,D1          ;check to see if shift count is 0
00004460  6600 0006               5040                                      BNE         ASD_count_val2                    ;if ASD 0 check 1
00004464  6700 0062               5041                                      BEQ         ASD_count_val1_out                ;if 0 got to output
00004468                          5042  
00004468  B2BC 00000400           5043  ASD_count_val2                      CMP.L       #match_ASD_count_val2,D1          ;check to see if shift count is 0
0000446E  6600 0006               5044                                      BNE         ASD_count_val3                    ;if ASD 0 check 1
00004472  6700 0060               5045                                      BEQ         ASD_count_val2_out                ;if 0 got to output
00004476                          5046  
00004476  B2BC 00000600           5047  ASD_count_val3                      CMP.L       #match_ASD_count_val3,D1          ;check to see if shift count is 0
0000447C  6600 0006               5048                                      BNE         ASD_count_val4                    ;if ASD 0 check 1
00004480  6700 005E               5049                                      BEQ         ASD_count_val3_out                ;if 0 got to output
00004484                          5050  
00004484  B2BC 00000800           5051  ASD_count_val4                      CMP.L       #match_ASD_count_val4,D1          ;check to see if shift count is 0
0000448A  6600 0006               5052                                      BNE         ASD_count_val5                    ;if ASD 0 check 1
0000448E  6700 005C               5053                                      BEQ         ASD_count_val4_out                ;if 0 got to output
00004492                          5054  
00004492  B2BC 00000A00           5055  ASD_count_val5                      CMP.L       #match_ASD_count_val5,D1          ;check to see if shift count is 0
00004498  6600 0006               5056                                      BNE         ASD_count_val6                    ;if ASD 0 check 1
0000449C  6700 005A               5057                                      BEQ         ASD_count_val5_out                ;if 0 got to output
000044A0                          5058  
000044A0  B2BC 00000C00           5059  ASD_count_val6                      CMP.L       #match_ASD_count_val6,D1          ;check to see if shift count is 0
000044A6  6600 0006               5060                                      BNE         ASD_count_val7                    ;if ASD 0 check 1
000044AA  6700 0058               5061                                      BEQ         ASD_count_val6_out                ;if 0 got to output
000044AE                          5062  
000044AE  B2BC 00000E00           5063  ASD_count_val7                      CMP.L       #match_ASD_count_val7,D1          ;check to see if shift count is 0
000044B4  6600 F0B6               5064                                      BNE         ERROR                           ;if none of the registers, invlid EA mode
000044B8  6700 0056               5065                                      BEQ         ASD_count_val7_out                ;if 0 got to output
000044BC                          5066  
000044BC                          5067  ;-----------------------------------Count Shift Immedite Value Output---------------------------
000044BC  227C 0000694B           5068  ASD_count_val0_out                MOVE.L            #ea_val0,A1             ;load string constant into A1
000044C2  4EB9 0000457C           5069                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000044C8                          5070                                
000044C8  227C 0000694D           5071  ASD_count_val1_out                MOVE.L            #ea_val1,A1             ;load string constant into A1
000044CE  4EB9 0000457C           5072                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000044D4                          5073  
000044D4  227C 0000694F           5074  ASD_count_val2_out                MOVE.L            #ea_val2,A1             ;load string constant into A1
000044DA  4EB9 0000457C           5075                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000044E0                          5076  
000044E0  227C 00006951           5077  ASD_count_val3_out                MOVE.L            #ea_val3,A1             ;load string constant into A1
000044E6  4EB9 0000457C           5078                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000044EC                          5079  
000044EC  227C 00006953           5080  ASD_count_val4_out                MOVE.L            #ea_val4,A1             ;load string constant into A1
000044F2  4EB9 0000457C           5081                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
000044F8                          5082      
000044F8  227C 00006955           5083  ASD_count_val5_out                MOVE.L            #ea_val5,A1             ;load string constant into A1
000044FE  4EB9 0000457C           5084                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004504                          5085  
00004504  227C 00006957           5086  ASD_count_val6_out                MOVE.L            #ea_val6,A1             ;load string constant into A1
0000450A  4EB9 0000457C           5087                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004510                          5088  
00004510  227C 00006959           5089  ASD_count_val7_out                MOVE.L            #ea_val7,A1             ;load string constant into A1
00004516  4EB9 0000457C           5090                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
0000451C                          5091  
0000451C                          5092  ;-------------------------Count Shift Output (Dn)-----------------------------------------
0000451C  227C 0000691B           5093  ASD_count_reg0_out                MOVE.L            #ea_D0,A1           ;load string constant into A1
00004522  4EB9 0000457C           5094                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004528                          5095                                
00004528  227C 0000691E           5096  ASD_count_reg1_out                MOVE.L            #ea_D1,A1           ;load string constant into A1
0000452E  4EB9 0000457C           5097                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004534                          5098                                
00004534  227C 00006921           5099  ASD_count_reg2_out                MOVE.L            #ea_D2,A1           ;load string constant into A1
0000453A  4EB9 0000457C           5100                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004540                          5101                                
00004540  227C 00006924           5102  ASD_count_reg3_out                MOVE.L            #ea_D3,A1           ;load string constant into A1
00004546  4EB9 0000457C           5103                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
0000454C                          5104                                
0000454C  227C 00006927           5105  ASD_count_reg4_out                MOVE.L            #ea_D4,A1           ;load string constant into A1
00004552  4EB9 0000457C           5106                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004558                          5107                                
00004558  227C 0000692A           5108  ASD_count_reg5_out                MOVE.L            #ea_D5,A1           ;load string constant into A1
0000455E  4EB9 0000457C           5109                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004564                          5110                                
00004564  227C 0000692D           5111  ASD_count_reg6_out                MOVE.L            #ea_D6,A1           ;load string constant into A1
0000456A  4EB9 0000457C           5112                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand
00004570                          5113                                
00004570  227C 00006930           5114  ASD_count_reg7_out                MOVE.L            #ea_D7,A1           ;load string constant into A1
00004576  4EB9 0000457C           5115                                    JSR               ASD_Dn0                 ;jump to subroutine to determine the second operand                                    
0000457C                          5116                                      
0000457C                          5117                                      
0000457C                          5118  ;----------------------------------------------Determine Second Operand Data Register-----------------------------------------------------
0000457C  4241                    5119  ASD_Dn0                         CLR             D1                  ;clear D1
0000457E  C2BC 00000007           5120                                  AND.L           #mask_ASD_data_reg,D1   ;load data register mask for second operand
00004584                          5121                                  
00004584  B2BC 00000000           5122                                  CMP.L           #match_ASD_D_reg0,D1          ;check if data register is D0
0000458A  6700 0068               5123                                  BEQ             ASD_D0_out              ;if equal got to output subroutine
0000458E  6600 0002               5124                                  BNE             ASD_Dn1                 ;if ASD check D1
00004592                          5125                                  
00004592  B2BC 00000001           5126  ASD_Dn1                         CMP.L           #match_ASD_D_reg1,D1          ;check if data register is D0
00004598  6700 0066               5127                                  BEQ             ASD_D1_out              ;if equal got to output subroutine
0000459C  6600 0002               5128                                  BNE             ASD_Dn2                 ;if ASD check D2
000045A0                          5129  
000045A0  B2BC 00000002           5130  ASD_Dn2                         CMP.L           #match_ASD_D_reg2,D1          ;check if data register is D0
000045A6  6700 0064               5131                                  BEQ             ASD_D2_out              ;if equal got to output subroutine
000045AA  6600 0002               5132                                  BNE             ASD_Dn3                 ;if ASD check D3
000045AE                          5133  
000045AE  B2BC 00000003           5134  ASD_Dn3                         CMP.L           #match_ASD_D_reg3,D1          ;check if data register is D0
000045B4  6700 0062               5135                                  BEQ             ASD_D3_out              ;if equal got to output subroutine
000045B8  6600 0002               5136                                  BNE             ASD_Dn4                 ;if ASD check D4
000045BC                          5137  
000045BC  B2BC 00000004           5138  ASD_Dn4                         CMP.L           #match_ASD_D_reg4,D1          ;check if data register is D0
000045C2  6700 0060               5139                                  BEQ             ASD_D4_out              ;if equal got to output subroutine
000045C6  6600 0002               5140                                  BNE             ASD_Dn5                 ;if ASD check D5
000045CA                          5141  
000045CA  B2BC 00000005           5142  ASD_Dn5                         CMP.L           #match_ASD_D_reg5,D1          ;check if data register is D0
000045D0  6700 005E               5143                                  BEQ             ASD_D5_out              ;if equal got to output subroutine
000045D4  6600 0002               5144                                  BNE             ASD_Dn6                 ;if ASD check D6
000045D8                          5145  
000045D8  B2BC 00000006           5146  ASD_Dn6                         CMP.L           #match_ASD_D_reg6,D1          ;check if data register is D0
000045DE  6700 005C               5147                                  BEQ             ASD_D6_out              ;if equal got to output subroutine
000045E2  6600 0002               5148                                  BNE             ASD_Dn7                 ;if ASD check D7
000045E6                          5149  
000045E6  B2BC 00000007           5150  ASD_Dn7                         CMP.L           #match_ASD_D_reg7,D1          ;check if data register is D0
000045EC  6700 005A               5151                                  BEQ             ASD_D7_out              ;if equal got to output subroutine
000045F0  6600 EF7A               5152                                  BNE             ERROR               :if none of the registers go to error sub routine
000045F4                          5153                                  
000045F4                          5154                                  
000045F4                          5155  ;-------------------------------Dn Second Operand Output-----------------------------------------------------------------
000045F4  227C 0000691B           5156  ASD_D0_out                        MOVE.L            #ea_D0,A1           ;load string constant into A1
000045FA  4CDF 7CBE               5157                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000045FE  4E75                    5158                                   RTS                                    ;return to subroutine
00004600                          5159  
00004600  227C 0000691E           5160  ASD_D1_out                        MOVE.L            #ea_D1,A1           ;load string constant into A1
00004606  4CDF 7CBE               5161                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000460A  4E75                    5162                                    RTS                                   ;return to subroutine
0000460C                          5163  
0000460C  227C 00006921           5164  ASD_D2_out                        MOVE.L            #ea_D2,A1           ;load string constant into A1
00004612  4CDF 7CBE               5165                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004616  4E75                    5166                                    RTS                                   ;return to subroutine
00004618                          5167              
00004618  227C 00006924           5168  ASD_D3_out                        MOVE.L            #ea_D3,A1           ;load string constant into A1
0000461E  4CDF 7CBE               5169                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004622  4E75                    5170                                    RTS                                   ;return to subroutine
00004624                          5171  
00004624  227C 00006927           5172  ASD_D4_out                        MOVE.L            #ea_D4,A1           ;load string constant into A1
0000462A  4CDF 7CBE               5173                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000462E  4E75                    5174                                    RTS                                   ;return to subroutine
00004630                          5175  
00004630  227C 0000692A           5176  ASD_D5_out                        MOVE.L            #ea_D5,A1           ;load string constant into A1
00004636  4CDF 7CBE               5177                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000463A  4E75                    5178                                    RTS                                   ;return to subroutine
0000463C                          5179  
0000463C  227C 0000692D           5180  ASD_D6_out                        MOVE.L            #ea_D6,A1           ;load string constant into A1
00004642  4CDF 7CBE               5181                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004646  4E75                    5182                                    RTS                                   ;return to subroutine
00004648                          5183  
00004648  227C 00006930           5184  ASD_D7_out                        MOVE.L            #ea_D7,A1           ;load string constant into A1
0000464E  4CDF 7CBE               5185                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004652  4E75                    5186                                    RTS                                   ;return to subroutine
00004654                          5187  
00004654                          5188  
00004654                          5189                                      
00004654  =000000C0               5190  mask_ASD_shift_type                         EQU             $00C0              ;masks bits 6&7 to determine if mem shift or reg shift
00004654  =00000038               5191  mask_ASD_ea_mode                            EQU             $0038              ;masks bits 5-3 to determine ea mode
00004654  =0000003F               5192  mask_ASD_ea_reg_and_mode                    EQU             $003F              ;masks bits 5-0 to determine the register with the given mode
00004654  =0000003F               5193  mask_ASD_ea_mode_abs_add                    EQU             $003F              ;masks ea absolute addressing mode 
00004654  =00000020               5194  mask_ASD_reg_shift_ir                           EQU             $0020              ;masks bit 5 to determine if the shift is immediate value or register
00004654  =00000E00               5195  mask_ASD_count_shift                            EQU             $0E00              ;masks bits 11-9 to determine data register or immediate value
00004654  =00000020               5196  mask_ASD_reg_shift                              EQU             $0020              ;mask to determine if reg shift or value shift
00004654  =00000007               5197  mask_ASD_data_reg                               EQU             $0007              ;masks bits 2-0 to determine the data register in the second operand
00004654                          5198  
00004654  =00000000               5199  match_ASD_D_reg0                                EQU             $0000               ;match for second operand data register 0
00004654  =00000001               5200  match_ASD_D_reg1                                EQU             $0001               ;match for second operand data register 1
00004654  =00000002               5201  match_ASD_D_reg2                                EQU             $0002               ;match for second operand data register 2
00004654  =00000003               5202  match_ASD_D_reg3                                EQU             $0003               ;match for second operand data register 3
00004654  =00000004               5203  match_ASD_D_reg4                                EQU             $0004               ;match for second operand data register 4
00004654  =00000005               5204  match_ASD_D_reg5                                EQU             $0005               ;match for second operand data register 5
00004654  =00000006               5205  match_ASD_D_reg6                                EQU             $0006               ;match for second operand data register 6
00004654  =00000007               5206  match_ASD_D_reg7                                EQU             $0007               ;match for second operand data register 7
00004654                          5207  
00004654  =00000000               5208  match_ASD_count_reg0                            EQU             $0000               ;match for bits 11-9 output D0
00004654  =00000200               5209  match_ASD_count_reg1                            EQU             $0200               ;match for bits 11-9 output D1
00004654  =00000400               5210  match_ASD_count_reg2                            EQU             $0400               ;match for bits 11-9 output D2
00004654  =00000600               5211  match_ASD_count_reg3                            EQU             $0600               ;match for bits 11-9 output D3
00004654  =00000800               5212  match_ASD_count_reg4                            EQU             $0800               ;match for bits 11-9 output D4
00004654  =00000A00               5213  match_ASD_count_reg5                            EQU             $0A00               ;match for bits 11-9 output D5
00004654  =00000C00               5214  match_ASD_count_reg6                            EQU             $0C00               ;match for bits 11-9 output D6
00004654  =00000E00               5215  match_ASD_count_reg7                            EQU             $0E00               ;match for bits 11-9 output D7
00004654                          5216  
00004654  =00000020               5217  match_ASD_shift_reg                             EQU             $0020               ;match to for a register shift
00004654  =00000000               5218  match_ASD_count_val0                            EQU             $0000               ;match for shift reg 0
00004654  =00000200               5219  match_ASD_count_val1                           EQU             $0200               ;match for shift reg 1
00004654  =00000400               5220  match_ASD_count_val2                            EQU             $0400               ;match for shift reg 2
00004654  =00000600               5221  match_ASD_count_val3                            EQU             $0600               ;match for shift reg 3
00004654  =00000800               5222  match_ASD_count_val4                            EQU             $0800               ;match for shift reg 4
00004654  =00000A00               5223  match_ASD_count_val5                            EQU             $0A00               ;match for shift reg 5
00004654  =00000C00               5224  match_ASD_count_val6                            EQU             $0C00               ;match for shift reg 6
00004654  =00000E00               5225  match_ASD_count_val7                            EQU             $0E00               ;match for shift reg 7
00004654                          5226  
00004654  =00000020               5227  match_ASD_shift_count                           EQU             $0020
00004654  =000000C0               5228  match_ASD_mem_shift                         EQU             $00C0              ;match for memory shift
00004654  =00000010               5229  match_ASD_An_indir                          EQU             $0010              ;match for add reg indir
00004654  =00000020               5230  match_ASD_An_indir_postinc                  EQU             $0020              ;match for add reg indir with postinc
00004654  =00000018               5231  match_ASD_An_indir_predec                   EQU             $0018              ;match for add reg indir with predec
00004654  =00000039               5232  match_ASD_abs_add_word                      EQU             $0039              ;match for word abs add 
00004654  =0000003C               5233  match_ASD_abs_add_long                      EQU             $003C              ;match for long abs add
00004654                          5234  
00004654                          5235  
00004654  =00000010               5236  match_ASD_An_indir_r0                       EQU             $0010              ;match for add reg indir with add reg 0
00004654  =00000011               5237  match_ASD_An_indir_r1                       EQU             $0011              ;match for add reg indir with add reg 1
00004654  =00000012               5238  match_ASD_An_indir_r2                       EQU             $0012              ;match for add reg indir with add reg 2
00004654  =00000013               5239  match_ASD_An_indir_r3                       EQU             $0013              ;match for add reg indir with add reg 3
00004654  =00000014               5240  match_ASD_An_indir_r4                       EQU             $0014              ;match for add reg indir with add reg 4
00004654  =00000015               5241  match_ASD_An_indir_r5                       EQU             $0015              ;match for add reg indir with add reg 5
00004654  =00000016               5242  match_ASD_An_indir_r6                       EQU             $0016              ;match for add reg indir with add reg 6
00004654  =00000017               5243  match_ASD_An_indir_r7                       EQU             $0017              ;match for add reg indir with add reg 7
00004654                          5244  
00004654                          5245  
00004654  =00000020               5246  match_ASD_An_indir_postinc_r0               EQU             $0020              ;match for add reg indir with postinc with add reg 0
00004654  =00000021               5247  match_ASD_An_indir_postinc_r1               EQU             $0021              ;match for add reg indir with postinc with add reg 1
00004654  =00000022               5248  match_ASD_An_indir_postinc_r2               EQU             $0022              ;match for add reg indir with postinc with add reg 2
00004654  =00000023               5249  match_ASD_An_indir_postinc_r3               EQU             $0023              ;match for add reg indir with postinc with add reg 3
00004654  =00000024               5250  match_ASD_An_indir_postinc_r4               EQU             $0024              ;match for add reg indir with postinc with add reg 4
00004654  =00000025               5251  match_ASD_An_indir_postinc_r5               EQU             $0025              ;match for add reg indir with postinc with add reg 5
00004654  =00000026               5252  match_ASD_An_indir_postinc_r6               EQU             $0026              ;match for add reg indir with postinc with add reg 6
00004654  =00000027               5253  match_ASD_An_indir_postinc_r7               EQU             $0027              ;match for add reg indir with postinc with add reg 7
00004654                          5254  
00004654                          5255  
00004654                          5256  
00004654  =00000018               5257  match_ASD_An_indir_predec_r0                EQU             $0018              ;match for add reg indir with predec with add reg 0
00004654  =00000019               5258  match_ASD_An_indir_predec_r1                EQU             $0019              ;match for add reg indir with predec with add reg 1
00004654  =0000001A               5259  match_ASD_An_indir_predec_r2                EQU             $001A              ;match for add reg indir with predec with add reg 2
00004654  =0000001B               5260  match_ASD_An_indir_predec_r3                EQU             $001B              ;match for add reg indir with predec with add reg 3
00004654  =0000001C               5261  match_ASD_An_indir_predec_r4                EQU             $001C              ;match for add reg indir with predec with add reg 4
00004654  =0000001D               5262  match_ASD_An_indir_predec_r5                EQU             $001D              ;match for add reg indir with predec with add reg 5
00004654  =0000001E               5263  match_ASD_An_indir_predec_r6                EQU             $001E              ;match for add reg indir with predec with add reg 6
00004654  =0000001F               5264  match_ASD_An_indir_predec_r7                EQU             $001F              ;match for add reg indir with predec with add reg 7
00004654                          5265  
00004654                          5266  
00004654                          5267  
00004654                          5268  
00004654                          5269  
00004654                          5270  
00004654                          5271  
00004654                          5272  -------------------- end include --------------------
00004654                          5273              INCLUDE 'JSR Subroutine.x68'
00004654                          5274  
00004654                          5275     
00004654  48E7 7D3E               5276  JSR_sub                          MOVEM.L           D1-D5/D7/A2-A6, -(SP)                                    ;preserve the registers, 
00004658  C2BC 00000038           5277                                   AND.L             #mask_JSR_ea_mode,D1                                   ;move the mask to D1
0000465E                          5278  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000465E  B2BC 00000010           5279  JSR_add_reg_indir                CMP.L             #match_JSR_An_indir,D1                       ;check to see if mode is add reg indir
00004664  6600 0006               5280                                   BNE               JSR_abs_add_word                                 ;if not, go check add reg indir predec 
00004668  6700 0026               5281                                   BEQ               JSR_An_indir_reg                                  ;if equal go figure out the register           
0000466C                          5282             
0000466C  C4BC 0000003F           5283  JSR_abs_add_word                 AND.L             #mask_JSR_abs_add,D2                          ;load mask to determine if abs add word or long
00004672                          5284                                   
00004672  B4BC 00000038           5285                                   CMP.L             #match_JSR_abs_add_word,D2                    ;check if abs add word
00004678  2A18                    5286                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address 
0000467A  6600 0006               5287                                   BNE               JSR_abs_add_long                                  ;if not go check abs add long
0000467E  6700 00E6               5288                                   BEQ               JSR_abs_add_word_out                              ;if equal go to output
00004682                          5289    
00004682  B4BC 00000039           5290  JSR_abs_add_long                 CMP.L             #match_JSR_abs_add_long,D2                     ;check to see if abs add long
00004688  6700 00EA               5291                                   BEQ               JSR_abs_add_long_out                               ;if equal go to output
0000468C  6600 EEDE               5292                                   BNE               ERROR                                         ;if not equal go to error mesage sub routine
00004690                          5293  
00004690                          5294  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004690                          5295                                   
00004690                          5296                       
00004690                          5297  ;------------------Address Register Indirect-----------------------
00004690  C4BC 0000003F           5298  JSR_An_indir_reg                 AND.L           #mask_JSR_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00004696  B4BC 00000010           5299                                   CMP.L           #match_JSR_An_indir_r0,D2              ;check reg is equal to 0
0000469C  6600 0006               5300                                   BNE             JSR_An_indir_reg1                           ;if not try reg 1
000046A0  6700 0064               5301                                   BEQ             JSR_An_indir_reg0_out                       ;if equal go to output subroutine
000046A4                          5302  
000046A4  B4BC 00000011           5303  JSR_An_indir_reg1                CMP.L           #match_JSR_An_indir_r1,D2              ;check reg is equal to 1
000046AA  6600 0006               5304                                   BNE             JSR_An_indir_reg2                           ;if not try reg 2
000046AE  6700 0062               5305                                   BEQ             JSR_An_indir_reg1_out                       ;if equal go to output subroutine
000046B2                          5306  
000046B2  B4BC 00000012           5307  JSR_An_indir_reg2                CMP.L           #match_JSR_An_indir_r2,D2              ;check reg is equal to 2
000046B8  6600 0006               5308                                   BNE             JSR_An_indir_reg3                           ;if not try reg 3
000046BC  6700 0060               5309                                   BEQ             JSR_An_indir_reg2_out                       ;if equal go to output subroutine
000046C0                          5310  
000046C0  B4BC 00000013           5311  JSR_An_indir_reg3                CMP.L           #match_JSR_An_indir_r3,D2              ;check reg is equal to 3
000046C6  6600 0006               5312                                   BNE             JSR_An_indir_reg4                           ;if not try reg 4
000046CA  6700 005E               5313                                   BEQ             JSR_An_indir_reg3_out                       ;if equal go to output subroutine
000046CE                          5314      
000046CE  B4BC 00000014           5315  JSR_An_indir_reg4                CMP.L           #match_JSR_An_indir_r4,D2              ;check reg is equal to 4
000046D4  6600 0006               5316                                   BNE             JSR_An_indir_reg5                           ;if not try reg 5
000046D8  6700 005C               5317                                   BEQ             JSR_An_indir_reg4_out                       ;if equal go to output subroutine
000046DC                          5318          
000046DC  B4BC 00000015           5319  JSR_An_indir_reg5                CMP.L           #match_JSR_An_indir_r5,D2              ;check reg is equal to 5
000046E2  6600 0006               5320                                   BNE             JSR_An_indir_reg6                           ;if not try reg 6
000046E6  6700 005A               5321                                   BEQ             JSR_An_indir_reg5_out                       ;if equal go to output subroutine
000046EA                          5322  
000046EA  B4BC 00000016           5323  JSR_An_indir_reg6                CMP.L           #match_JSR_An_indir_r6,D2              ;check reg is equal to 6
000046F0  6600 0006               5324                                   BNE             JSR_An_indir_reg7                           ;if not try reg 7
000046F4  6700 0058               5325                                   BEQ             JSR_An_indir_reg6_out                       ;if equal go to output subroutine
000046F8                          5326  
000046F8  B4BC 00000017           5327  JSR_An_indir_reg7                CMP.L           #match_JSR_An_indir_r7,D2              ;check reg is equal to 7
000046FE  6700 005A               5328                                   BEQ             JSR_An_indir_reg7_out                       ;if equal go to output subroutine
00004702  6600 EE68               5329                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00004706                          5330  
00004706                          5331  ;--------------------Address Register Indirect Output-----------------------
00004706  227C 0000695B           5332  JSR_An_indir_reg0_out                       MOVE.L          #ea_indir_A0,A1                 ;load string constant into A1
0000470C  4CDF 7CBE               5333                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                         
00004710  4E75                    5334                                              RTS                                                 ;return to subroutine
00004712                          5335  
00004712  227C 00006960           5336  JSR_An_indir_reg1_out                       MOVE.L          #ea_indir_A1,A1                 ;load string constant into A1
00004718  4CDF 7CBE               5337                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000471C  4E75                    5338                                              RTS                                                 ;return to subroutine
0000471E                          5339  
0000471E  227C 00006965           5340  JSR_An_indir_reg2_out                       MOVE.L          #ea_indir_A2,A1                 ;load string constant into A1
00004724  4CDF 7CBE               5341                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004728  4E75                    5342                                              RTS                                                 ;return to subroutine
0000472A                          5343  
0000472A  227C 0000696A           5344  JSR_An_indir_reg3_out                       MOVE.L          #ea_indir_A3,A1                 ;load string constant into A1
00004730  4CDF 7CBE               5345                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004734  4E75                    5346                                              RTS                                                 ;return to subroutine
00004736                          5347  
00004736  227C 0000696F           5348  JSR_An_indir_reg4_out                       MOVE.L          #ea_indir_A4,A1                 ;load string constant into A1
0000473C  4CDF 7CBE               5349                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004740  4E75                    5350                                              RTS                                                 ;return to subroutine
00004742                          5351  
00004742  227C 00006974           5352  JSR_An_indir_reg5_out                       MOVE.L          #ea_indir_A5,A1                 ;load string constant into A1
00004748  4CDF 7CBE               5353                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000474C  4E75                    5354                                              RTS                                                 ;return to subroutine
0000474E                          5355  
0000474E  227C 00006979           5356  JSR_An_indir_reg6_out                       MOVE.L          #ea_indir_A6,A1                 ;load string constant into A1
00004754  4CDF 7CBE               5357                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004758  4E75                    5358                                              RTS                                                 ;return to subroutine
0000475A                          5359                                          
0000475A  227C 0000697E           5360  JSR_An_indir_reg7_out                       MOVE.L          #ea_indir_A7,A1                 ;load string constant into A1
00004760  4CDF 7CBE               5361                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004764  4E75                    5362                                              RTS                                                 ;return to subroutine
00004766                          5363  
00004766                          5364  ;------------------Absolute Addressing Output-----------------------
00004766  22FC 000069ED           5365  JSR_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                        ;load $ for hex and increment A1
0000476C  22C5                    5366                                           MOVE.L      D5,(A1)+                           ;load address                  
0000476E  4CDF 7CBE               5367                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004772  4E75                    5368                                           RTS                                            :return to subroutine
00004774                          5369                                             
00004774                          5370  
00004774  2A18                    5371  JSR_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00004776  22FC 000069ED           5372                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000477C  22C5                    5373                                           MOVE.L      D5,(A1)+                           ;load address                  
0000477E  4CDF 7CBE               5374                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004782  4E75                    5375                                           RTS                                            :return to subroutine                                            
00004784                          5376  
00004784                          5377  
00004784  =00000038               5378  mask_JSR_ea_mode                        EQU         $0038
00004784  =0000003F               5379  mask_JSR_abs_add                        EQU         $003F
00004784  =0000003F               5380  mask_JSR_ea_reg_and_mode                EQU         $003F
00004784  =00000E00               5381  mask_JSR_An_reg                     EQU         $0E00
00004784                          5382  
00004784  =00000000               5383  match_JSR_Dn                            EQU         $0000
00004784  =00000010               5384  match_JSR_An_indir                  EQU         $0010
00004784  =00000038               5385  match_JSR_abs_add_word              EQU         $0038
00004784  =00000039               5386  match_JSR_abs_add_long              EQU         $0039
00004784                          5387  
00004784  =00000000               5388  match_JSR_D0                            EQU         $0000
00004784  =00000001               5389  match_JSR_D1                            EQU         $0001
00004784  =00000002               5390  match_JSR_D2                            EQU         $0002
00004784  =00000003               5391  match_JSR_D3                            EQU         $0003
00004784  =00000004               5392  match_JSR_D4                            EQU         $0004
00004784  =00000005               5393  match_JSR_D5                            EQU         $0005
00004784  =00000006               5394  match_JSR_D6                            EQU         $0006
00004784  =00000007               5395  match_JSR_D7                            EQU         $0007
00004784                          5396  
00004784  =00000010               5397  match_JSR_An_indir_r0               EQU         $0010
00004784  =00000011               5398  match_JSR_An_indir_r1               EQU         $0011
00004784  =00000012               5399  match_JSR_An_indir_r2               EQU         $0012
00004784  =00000013               5400  match_JSR_An_indir_r3               EQU         $0013
00004784  =00000014               5401  match_JSR_An_indir_r4               EQU         $0014
00004784  =00000015               5402  match_JSR_An_indir_r5               EQU         $0015
00004784  =00000016               5403  match_JSR_An_indir_r6               EQU         $0016
00004784  =00000017               5404  match_JSR_An_indir_r7               EQU         $0017
00004784                          5405  
00004784                          5406  
00004784                          5407  
00004784                          5408  
00004784                          5409  
00004784                          5410  -------------------- end include --------------------
00004784                          5411              INCLUDE 'LEA Subroutine.x68'
00004784                          5412  
00004784                          5413     
00004784  48E7 7D3E               5414  LEA_sub                          MOVEM.L           D1-D5/D7/A2-A6, -(SP)                      ;preserve the registers, 
00004788  C2BC 00000038           5415                                   AND.L             #mask_LEA_ea_mode,D1                         ;move the mask to D1
0000478E                          5416  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000478E  B2BC 00000010           5417  LEA_add_reg_indir                CMP.L             #match_LEA_An_indir,D1                       ;check to see if mode is add reg indir
00004794  6600 0006               5418                                   BNE               LEA_abs_add_word                             ;if not, go check add reg indir predec 
00004798  6700 0026               5419                                   BEQ               LEA_An_indir_reg                             ;if equal go figure out the register           
0000479C                          5420             
0000479C  C4BC 0000003F           5421  LEA_abs_add_word                 AND.L             #mask_LEA_abs_add,D2                         ;load mask to determine if abs add word or long
000047A2                          5422                                   
000047A2  B4BC 00000038           5423                                   CMP.L             #match_LEA_abs_add_word,D2                   ;check if abs add word
000047A8  2A18                    5424                                   MOVE.L            (A0)+,D5                                     ;pull the next word instruction that holds the address
000047AA  6600 0006               5425                                   BNE               LEA_abs_add_long                             ;if not go check abs add long
000047AE  6700 00E6               5426                                   BEQ               LEA_abs_add_word_out                         ;if equal go to output
000047B2                          5427    
000047B2  B4BC 00000039           5428  LEA_abs_add_long                 CMP.L             #match_LEA_abs_add_long,D2                   ;check to see if abs add long
000047B8  6700 00EA               5429                                   BEQ               LEA_abs_add_long_out                         ;if equal go to output
000047BC  6600 EDAE               5430                                   BNE               ERROR                                        ;if not equal go to error mesage sub routine
000047C0                          5431  
000047C0                          5432  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000047C0                          5433                                  
000047C0                          5434                                 
000047C0                          5435  ;------------------Address Register Indirect-----------------------
000047C0  C4BC 0000003F           5436  LEA_An_indir_reg                 AND.L           #mask_LEA_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register 
000047C6  B4BC 00000010           5437                                   CMP.L           #match_LEA_An_indir_r0,D2              ;check reg is equal to 0
000047CC  6600 0006               5438                                   BNE             LEA_An_indir_reg1                           ;if not try reg 1
000047D0  6700 0064               5439                                   BEQ             LEA_An_indir_reg0_out                       ;if equal go to output subroutine
000047D4                          5440  
000047D4  B4BC 00000011           5441  LEA_An_indir_reg1                CMP.L           #match_LEA_An_indir_r1,D2              ;check reg is equal to 1
000047DA  6600 0006               5442                                   BNE             LEA_An_indir_reg2                           ;if not try reg 2
000047DE  6700 0062               5443                                   BEQ             LEA_An_indir_reg1_out                       ;if equal go to output subroutine
000047E2                          5444  
000047E2  B4BC 00000012           5445  LEA_An_indir_reg2                CMP.L           #match_LEA_An_indir_r2,D2              ;check reg is equal to 2
000047E8  6600 0006               5446                                   BNE             LEA_An_indir_reg3                           ;if not try reg 3
000047EC  6700 0060               5447                                   BEQ             LEA_An_indir_reg2_out                       ;if equal go to output subroutine
000047F0                          5448  
000047F0  B4BC 00000013           5449  LEA_An_indir_reg3                CMP.L           #match_LEA_An_indir_r3,D2              ;check reg is equal to 3
000047F6  6600 0006               5450                                   BNE             LEA_An_indir_reg4                           ;if not try reg 4
000047FA  6700 005E               5451                                   BEQ             LEA_An_indir_reg3_out                       ;if equal go to output subroutine
000047FE                          5452      
000047FE  B4BC 00000014           5453  LEA_An_indir_reg4                CMP.L           #match_LEA_An_indir_r4,D2              ;check reg is equal to 4
00004804  6600 0006               5454                                   BNE             LEA_An_indir_reg5                           ;if not try reg 5
00004808  6700 005C               5455                                   BEQ             LEA_An_indir_reg4_out                       ;if equal go to output subroutine
0000480C                          5456          
0000480C  B4BC 00000015           5457  LEA_An_indir_reg5                CMP.L           #match_LEA_An_indir_r5,D2              ;check reg is equal to 5
00004812  6600 0006               5458                                   BNE             LEA_An_indir_reg6                           ;if not try reg 6
00004816  6700 005A               5459                                   BEQ             LEA_An_indir_reg5_out                       ;if equal go to output subroutine
0000481A                          5460  
0000481A  B4BC 00000016           5461  LEA_An_indir_reg6                CMP.L           #match_LEA_An_indir_r6,D2              ;check reg is equal to 6
00004820  6600 0006               5462                                   BNE             LEA_An_indir_reg7                           ;if not try reg 7
00004824  6700 0058               5463                                   BEQ             LEA_An_indir_reg6_out                       ;if equal go to output subroutine
00004828                          5464  
00004828  B4BC 00000017           5465  LEA_An_indir_reg7                CMP.L           #match_LEA_An_indir_r7,D2              ;check reg is equal to 7
0000482E  6700 005A               5466                                   BEQ             LEA_An_indir_reg7_out                       ;if equal go to output subroutine
00004832  6600 ED38               5467                                   BNE             ERROR                                   :if not equal to an addresssing mode, pritn error
00004836                          5468  
00004836                          5469  ;--------------------Address Register Indirect Output-----------------------
00004836  227C 0000695B           5470  LEA_An_indir_reg0_out                   MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
0000483C  4EB9 000048B4           5471                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004842                          5472  
00004842  227C 00006960           5473  LEA_An_indir_reg1_out                   MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00004848  4EB9 000048B4           5474                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000484E                          5475  
0000484E  227C 00006965           5476  LEA_An_indir_reg2_out                   MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00004854  4EB9 000048B4           5477                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000485A                          5478  
0000485A  227C 0000696A           5479  LEA_An_indir_reg3_out                   MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00004860  4EB9 000048B4           5480                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004866                          5481  
00004866  227C 0000696F           5482  LEA_An_indir_reg4_out                   MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
0000486C  4EB9 000048B4           5483                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004872                          5484  
00004872  227C 00006974           5485  LEA_An_indir_reg5_out                   MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
00004878  4EB9 000048B4           5486                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000487E                          5487  
0000487E  227C 00006979           5488  LEA_An_indir_reg6_out                   MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00004884  4EB9 000048B4           5489                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
0000488A                          5490                                          
0000488A  227C 0000697E           5491  LEA_An_indir_reg7_out                   MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00004890  4EB9 000048B4           5492                                          JSR             LEA_determine_second_op                 ;jump to subroutine to determine second operand
00004896                          5493  
00004896                          5494  ;------------------Absolute Addressing Output-----------------------
00004896  22FC 000069ED           5495  LEA_abs_add_word_out                     MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000489C  22C5                    5496                                           MOVE.L      D5,(A1)+                           ;load address                  
0000489E  4EB9 000048B4           5497                                           JSR         LEA_determine_second_op                 ;jump to subroutine to determine second operand
000048A4                          5498                                             
000048A4                          5499  
000048A4  2A18                    5500  LEA_abs_add_long_out                     MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000048A6  22FC 000069ED           5501                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000048AC  22C5                    5502                                           MOVE.L      D5,(A1)+                           ;load address                  
000048AE  4EB9 000048B4           5503                                           JSR         LEA_determine_second_op                 ;jump to subroutine to determine second operand
000048B4                          5504                                                
000048B4                          5505  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000048B4  4282                    5506  LEA_determine_second_op                         CLR.L       D2                                              ;clear D2 
000048B6  C4BC 00000E00           5507                                                  AND.L       #mask_LEA_An_reg,D2                             ;load the mask for the register into D2, masks bit 11-9
000048BC                          5508                                                  
000048BC  B4BC 00000000           5509  LEA_reg0                                        CMP.L       #match_LEA_reg0,D2                              ;check to see if reg equal 0
000048C2  6600 0006               5510                                                  BNE         LEA_reg1                                        ;if not equal got check reg 1
000048C6  6700 0064               5511                                                  BEQ         LEA_reg0_out                                    ;if equal go to output
000048CA                          5512                                                  
000048CA  B4BC 00000200           5513  LEA_reg1                                        CMP.L       #match_LEA_reg1,D2                              ;check to see if reg equal 1
000048D0  6600 0006               5514                                                  BNE         LEA_reg2                                        ;if not equal got check reg 2
000048D4  6700 0062               5515                                                  BEQ         LEA_reg1_out                                    ;if equal go to output
000048D8                          5516  
000048D8  B4BC 00000400           5517  LEA_reg2                                        CMP.L       #match_LEA_reg2,D2                              ;check to see if reg equal 2
000048DE  6600 0006               5518                                                  BNE         LEA_reg3                                        ;if not equal got check reg 3
000048E2  6700 0060               5519                                                  BEQ         LEA_reg2_out                                    ;if equal go to output
000048E6                          5520  
000048E6  B4BC 00000600           5521  LEA_reg3                                        CMP.L       #match_LEA_reg3,D2                              ;check to see if reg equal 3
000048EC  6600 0006               5522                                                  BNE         LEA_reg4                                        ;if not equal got check reg 4
000048F0  6700 005E               5523                                                  BEQ         LEA_reg3_out                                    ;if equal go to output
000048F4                          5524                                                  
000048F4  B4BC 00000800           5525  LEA_reg4                                        CMP.L       #match_LEA_reg4,D2                              ;check to see if reg equal 4
000048FA  6600 0006               5526                                                  BNE         LEA_reg5                                        ;if not equal got check reg 5
000048FE  6700 005C               5527                                                  BEQ         LEA_reg4_out                                    ;if equal go to output
00004902                          5528  
00004902  B4BC 00000A00           5529  LEA_reg5                                        CMP.L       #match_LEA_reg5,D2                              ;check to see if reg equal 5
00004908  6600 0006               5530                                                  BNE         LEA_reg6                                        ;if not equal got check reg 6
0000490C  6700 005A               5531                                                  BEQ         LEA_reg5_out                                    ;if equal go to output
00004910                          5532  
00004910  B4BC 00000C00           5533  LEA_reg6                                        CMP.L       #match_LEA_reg6,D2                              ;check to see if reg equal 6
00004916  6600 0006               5534                                                  BNE         LEA_reg7                                        ;if not equal got check reg 7
0000491A  6700 0058               5535                                                  BEQ         LEA_reg6_out                                    ;if equal go to output          
0000491E                          5536  
0000491E  B4BC 00000E00           5537  LEA_reg7                                        CMP.L       #match_LEA_reg7,D2                              ;check to see if reg equal 7
00004924  6700 005A               5538                                                  BEQ         LEA_reg7_out                                    ;if equal go to output
00004928  6600 EC42               5539                                                  BNE         ERROR                                                       ;if not equal to an addresssing mode, pritn error
0000492C                          5540                                  
0000492C                          5541  
0000492C                          5542  ;--------------------Data Output-----------------------
0000492C  227C 00006933           5543  LEA_reg0_out                                MOVE.L          #ea_A0,A1                                          ;load string constant into A1
00004932  4CDF 7CBE               5544                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004936  4E75                    5545                                              RTS
00004938                          5546                                              
00004938  227C 00006936           5547  LEA_reg1_out                                MOVE.L          #ea_A1,A1                                       ;load string constant into A1
0000493E  4CDF 7CBE               5548                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004942  4E75                    5549                                              RTS
00004944                          5550                                              
00004944  227C 00006939           5551  LEA_reg2_out                                MOVE.L          #ea_A2,A1                                       ;load string constant into A1
0000494A  4CDF 7CBE               5552                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000494E  4E75                    5553                                              RTS
00004950                          5554                                              
00004950  227C 0000693C           5555  LEA_reg3_out                                MOVE.L          #ea_A3,A1                                           ;load string constant into A1
00004956  4CDF 7CBE               5556                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000495A  4E75                    5557                                              RTS
0000495C                          5558                                              
0000495C  227C 0000693F           5559  LEA_reg4_out                                MOVE.L          #ea_A4,A1                                           ;load string constant into A1
00004962  4CDF 7CBE               5560                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004966  4E75                    5561                                              RTS
00004968                          5562                                              
00004968  227C 00006942           5563  LEA_reg5_out                                MOVE.L          #ea_A5,A1                                           ;load string constant into A1
0000496E  4CDF 7CBE               5564                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00004972  4E75                    5565                                              RTS
00004974                          5566                                              
00004974  227C 00006945           5567  LEA_reg6_out                                MOVE.L          #ea_A6,A1                                           ;load string constant into A1
0000497A  4CDF 7CBE               5568                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000497E  4E75                    5569                                              RTS
00004980                          5570                                              
00004980  227C 00006948           5571  LEA_reg7_out                                MOVE.L          #ea_A7,A1                                           ;load string constant into A1
00004986  4CDF 7CBE               5572                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000498A  4E75                    5573                                              RTS             
0000498C                          5574  
0000498C  =00000038               5575  mask_LEA_ea_mode                        EQU         $0038
0000498C  =0000003F               5576  mask_LEA_abs_add                        EQU         $003F
0000498C  =0000003F               5577  mask_LEA_ea_reg_and_mode                EQU         $003F
0000498C  =00000E00               5578  mask_LEA_An_reg                     EQU         $0E00
0000498C                          5579  
0000498C  =00000010               5580  match_LEA_An_indir                      EQU         $0010
0000498C  =00000038               5581  match_LEA_abs_add_word                  EQU         $0038
0000498C  =00000039               5582  match_LEA_abs_add_long                  EQU         $0039
0000498C                          5583  
0000498C  =00000010               5584  match_LEA_An_indir_r0                   EQU         $0010
0000498C  =00000011               5585  match_LEA_An_indir_r1                   EQU         $0011
0000498C  =00000012               5586  match_LEA_An_indir_r2                   EQU         $0012
0000498C  =00000013               5587  match_LEA_An_indir_r3                   EQU         $0013
0000498C  =00000014               5588  match_LEA_An_indir_r4                   EQU         $0014
0000498C  =00000015               5589  match_LEA_An_indir_r5                   EQU         $0015
0000498C  =00000016               5590  match_LEA_An_indir_r6                   EQU         $0016
0000498C  =00000017               5591  match_LEA_An_indir_r7                   EQU         $0017
0000498C                          5592  
0000498C  =0000003C               5593  match_imm_add                           EQU         $003C
0000498C  =000000FC               5594  match_imm_add_word                      EQU         $00FC
0000498C  =000001FC               5595  match_imm_add_long                      EQU         $01FC
0000498C                          5596  
0000498C  =00000000               5597  match_LEA_reg0                          EQU         $0000
0000498C  =00000200               5598  match_LEA_reg1                          EQU         $0200
0000498C  =00000400               5599  match_LEA_reg2                          EQU         $0400
0000498C  =00000600               5600  match_LEA_reg3                          EQU         $0600
0000498C  =00000800               5601  match_LEA_reg4                          EQU         $0800
0000498C  =00000A00               5602  match_LEA_reg5                          EQU         $0A00
0000498C  =00000C00               5603  match_LEA_reg6                          EQU         $0C00
0000498C  =00000E00               5604  match_LEA_reg7                          EQU         $0E00
0000498C                          5605  
0000498C                          5606  
0000498C                          5607  
0000498C                          5608  
0000498C                          5609  
0000498C                          5610  
0000498C                          5611  
0000498C                          5612  
0000498C                          5613  -------------------- end include --------------------
0000498C                          5614              INCLUDE 'MOVE Subroutine.x68'
0000498C                          5615  
0000498C  48E7 7D3E               5616  MOVE_MOVE                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)                      ;preserve the registers, 
00004990                          5617  
00004990  C2BC 00000038           5618                                  AND.L             #mask_MOVE_src_ea_mode,D1                          ;move the mask to D1
00004996                          5619  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004996  B2BC 00000000           5620  MOVE_data_reg_dir               CMP.L             #match_MOVE_src_Dn,D1                              ;check to see if mode is data reg direct
0000499C  6600 0006               5621                                   BNE               MOVE_add_reg_indir                             ;if not, go check add reg dir
000049A0  6700 0056               5622                                   BEQ               MOVE_Dn_reg                                  ;if equal go figure out the register
000049A4                          5623  
000049A4  B2BC 00000010           5624  MOVE_add_reg_indir              CMP.L             #match_MOVE_src_An_indir,D1                        ;check to see if mode is add reg indir
000049AA  6600 0006               5625                                   BNE               MOVE_add_reg_indir_predec                    ;if not, go check add reg indir predec 
000049AE  6700 0118               5626                                   BEQ               MOVE_An_indir_reg                            ;if equal go figure out the register           
000049B2                          5627             
000049B2  B2BC 00000020           5628  MOVE_add_reg_indir_predec       CMP.L             #match_MOVE_src_An_indir_predec,D1                  ;check to see if mode is add reg indor w/ postinc
000049B8  6600 0006               5629                                   BNE               MOVE_add_reg_indir_postinc                    ;if not go check add reg indir/predec
000049BC  6700 02AA               5630                                   BEQ               MOVE_An_indir_predec                          ;if equal go figure out the register
000049C0                          5631                        
000049C0  B2BC 00000018           5632  MOVE_add_reg_indir_postinc      CMP.L             #match_MOVE_src_An_indir_postinc,D1              ;check to see if mode is add reg indir w/predec
000049C6  6600 0006               5633                                   BNE               MOVE_abs_add_word                                  ;if not go check abs add word
000049CA  6700 01CC               5634                                   BEQ               MOVE_An_indir_postinc_reg                          ;if equal go figure out the register
000049CE                          5635  
000049CE  C4BC 0000003F           5636  MOVE_abs_add_word               AND.L             #mask_MOVE_src_abs_add,D2                        ;load mask to determine if abs add word or long
000049D4                          5637                                   
000049D4  B4BC 00000038           5638                                   CMP.L             #match_MOVE_src_abs_add_word,D2                  ;check if abs add word
000049DA  2A18                    5639                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000049DC  6600 0006               5640                                   BNE               MOVE_abs_add_long                                  ;if not go check abs add long
000049E0  6700 0356               5641                                   BEQ               MOVE_abs_add_word_out                              ;if equal go to output
000049E4                          5642    
000049E4  B4BC 00000039           5643  MOVE_abs_add_long               CMP.L             #match_MOVE_src_abs_add_long,D2                  ;check to see if abs add long
000049EA  6700 035A               5644                                   BEQ               MOVE_abs_add_long_out                              ;if equal go to output
000049EE  6600 0846               5645                                   BNE               MOVE_ERROR                                         ;if not equal go to error mesage MOVE routine
000049F2                          5646  
000049F2                          5647  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000049F2                          5648                                   
000049F2  C4BC 0000003F           5649                                   AND.L              #mask_MOVE_src_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
000049F8                          5650  ;-----------------------------------Data Register Direct--------------------------------
000049F8  B4BC 00000000           5651  MOVE_Dn_reg                    CMP.L              #match_MOVE_src_D0,D2                       ;check to see in the register is 0
000049FE  6600 0006               5652                                   BNE                MOVE_rD1                                     ;if not go check register 1
00004A02  6700 0064               5653                                   BEQ                MOVE_D0_out                              ;if equal go to output MOVEroutine
00004A06                          5654  
00004A06  B4BC 00000001           5655  MOVE_rD1                        CMP.L              #match_MOVE_src_D1,D2                       ;check to see in the register is 1
00004A0C  6600 0006               5656                                   BNE                MOVE_rD2                                     ;if not go check register 2
00004A10  6700 0062               5657                                   BEQ                MOVE_D1_out                              ;if equal go to output MOVEroutine
00004A14                          5658  
00004A14  B4BC 00000002           5659  MOVE_rD2                        CMP.L              #match_MOVE_src_D2,D2                       ;check to see in the register is 2
00004A1A  6600 0006               5660                                   BNE                MOVE_rD3                                     ;if not go check register 3
00004A1E  6700 0060               5661                                   BEQ                MOVE_D2_out                              ;if equal go to output MOVEroutine
00004A22                          5662  
00004A22  B4BC 00000003           5663  MOVE_rD3                        CMP.L              #match_MOVE_src_D3,D2                       ;check to see in the register is 3
00004A28  6600 0006               5664                                   BNE                MOVE_rD4                                     ;if not go check register 4
00004A2C  6700 005E               5665                                   BEQ                MOVE_D3_out                              ;if equal go to output MOVEroutine
00004A30                          5666  
00004A30  B4BC 00000004           5667  MOVE_rD4                        CMP.L              #match_MOVE_src_D4,D2                       ;check to see in the register is 4
00004A36  6600 0006               5668                                   BNE                MOVE_rD5                                     ;if not go check register 5
00004A3A  6700 005C               5669                                   BEQ                MOVE_D4_out                              ;if equal go to output MOVEroutine
00004A3E                          5670  
00004A3E  B4BC 00000005           5671  MOVE_rD5                        CMP.L              #match_MOVE_src_D5,D2                       ;check to see in the register is 5
00004A44  6600 0006               5672                                   BNE                MOVE_rD6                                     ;if not go check register 6
00004A48  6700 005A               5673                                   BEQ                MOVE_D5_out                              ;if equal go to output MOVEroutine
00004A4C                          5674  
00004A4C  B4BC 00000006           5675  MOVE_rD6                        CMP.L              #match_MOVE_src_D6,D2                       ;check to see in the register is 6
00004A52  6600 0006               5676                                   BNE                MOVE_rD7                                     ;if not go check register 7
00004A56  6700 0058               5677                                   BEQ                MOVE_D6_out                              ;if equal go to output MOVEroutine
00004A5A                          5678  
00004A5A  B4BC 00000007           5679  MOVE_rD7                        CMP.L              #match_MOVE_src_D7,D2                       ;check to see in the register is 7
00004A60  6700 005A               5680                                   BEQ                MOVE_D7_out                              ;if equal go to output MOVEroutine
00004A64  6600 07D0               5681                                   BNE                MOVE_ERROR                               ;if not equal, got to error message
00004A68                          5682  ;--------------------Data Register Direct Output-----------------------
00004A68  227C 0000691B           5683  MOVE_D0_out                    MOVE.L          #ea_D0,A1                            ;load string constant into A1
00004A6E  4EB9 00004D56           5684                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A74                          5685  
00004A74  227C 0000691E           5686  MOVE_D1_out                    MOVE.L          #ea_D1,A1                            ;load string constant into A1
00004A7A  4EB9 00004D56           5687                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A80                          5688  
00004A80                          5689  
00004A80  227C 00006921           5690  MOVE_D2_out                    MOVE.L          #ea_D2,A1                            ;load string constant into A1
00004A86  4EB9 00004D56           5691                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A8C                          5692  
00004A8C  227C 00006924           5693  MOVE_D3_out                    MOVE.L           #ea_D3,A1                           ;load string constant into A1
00004A92  4EB9 00004D56           5694                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004A98                          5695  
00004A98                          5696  
00004A98  227C 00006927           5697  MOVE_D4_out                    MOVE.L           #ea_D4,A1                           ;load string constant into A1
00004A9E  4EB9 00004D56           5698                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004AA4                          5699  
00004AA4                          5700  
00004AA4  227C 0000692A           5701  MOVE_D5_out                    MOVE.L           #ea_D5,A1                           ;load string constant into A1
00004AAA  4EB9 00004D56           5702                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004AB0                          5703  
00004AB0                          5704  
00004AB0  227C 0000692D           5705  MOVE_D6_out                    MOVE.L           #ea_D6,A1                           ;load string constant into A1
00004AB6  4EB9 00004D56           5706                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004ABC                          5707  
00004ABC                          5708  
00004ABC  227C 00006930           5709  MOVE_D7_out                    MOVE.L           #ea_D7,A1                           ;load string constant into A1
00004AC2  4EB9 00004D56           5710                                  JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004AC8                          5711  
00004AC8                          5712  ;------------------Address Register Indirect-----------------------
00004AC8  B4BC 00000010           5713  MOVE_An_indir_reg               CMP.L          #match_MOVE_src_An_indir_r0,D2              ;check reg is equal to 0
00004ACE  6600 0006               5714                                   BNE             MOVE_An_indir_reg1                           ;if not try reg 1
00004AD2  6700 0064               5715                                   BEQ             MOVE_An_indir_reg0_out                       ;if equal go to output MOVEroutine
00004AD6                          5716  
00004AD6  B4BC 00000011           5717  MOVE_An_indir_reg1              CMP.L           #match_MOVE_src_An_indir_r1,D2              ;check reg is equal to 1
00004ADC  6600 0006               5718                                   BNE             MOVE_An_indir_reg2                           ;if not try reg 2
00004AE0  6700 0062               5719                                   BEQ             MOVE_An_indir_reg1_out                       ;if equal go to output MOVEroutine
00004AE4                          5720  
00004AE4  B4BC 00000012           5721  MOVE_An_indir_reg2              CMP.L           #match_MOVE_src_An_indir_r2,D2              ;check reg is equal to 2
00004AEA  6600 0006               5722                                   BNE             MOVE_An_indir_reg3                           ;if not try reg 3
00004AEE  6700 0060               5723                                   BEQ             MOVE_An_indir_reg2_out                       ;if equal go to output MOVEroutine
00004AF2                          5724  
00004AF2  B4BC 00000013           5725  MOVE_An_indir_reg3              CMP.L           #match_MOVE_src_An_indir_r3,D2              ;check reg is equal to 3
00004AF8  6600 0006               5726                                   BNE             MOVE_An_indir_reg4                           ;if not try reg 4
00004AFC  6700 005E               5727                                   BEQ             MOVE_An_indir_reg3_out                       ;if equal go to output MOVEroutine
00004B00                          5728      
00004B00  B4BC 00000014           5729  MOVE_An_indir_reg4              CMP.L           #match_MOVE_src_An_indir_r4,D2              ;check reg is equal to 4
00004B06  6600 0006               5730                                   BNE             MOVE_An_indir_reg5                           ;if not try reg 5
00004B0A  6700 005C               5731                                   BEQ             MOVE_An_indir_reg4_out                       ;if equal go to output MOVEroutine
00004B0E                          5732          
00004B0E  B4BC 00000015           5733  MOVE_An_indir_reg5              CMP.L           #match_MOVE_src_An_indir_r5,D2              ;check reg is equal to 5
00004B14  6600 0006               5734                                   BNE             MOVE_An_indir_reg6                           ;if not try reg 6
00004B18  6700 005A               5735                                   BEQ             MOVE_An_indir_reg5_out                       ;if equal go to output MOVEroutine
00004B1C                          5736  
00004B1C  B4BC 00000016           5737  MOVE_An_indir_reg6              CMP.L           #match_MOVE_src_An_indir_r6,D2              ;check reg is equal to 6
00004B22  6600 0006               5738                                   BNE             MOVE_An_indir_reg7                           ;if not try reg 7
00004B26  6700 0058               5739                                   BEQ             MOVE_An_indir_reg6_out                       ;if equal go to output MOVEroutine
00004B2A                          5740  
00004B2A  B4BC 00000017           5741  MOVE_An_indir_reg7              CMP.L           #match_MOVE_src_An_indir_r7,D2              ;check reg is equal to 7
00004B30  6700 005A               5742                                   BEQ             MOVE_An_indir_reg7_out                       ;if equal go to output MOVEroutine
00004B34  6600 0700               5743                                   BNE             MOVE_ERROR                                   :if not equal to an addresssing mode, pritn error
00004B38                          5744  
00004B38                          5745  ;--------------------Address Register Indirect Output-----------------------
00004B38  227C 0000695B           5746  MOVE_An_indir_reg0_out                 MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
00004B3E  4EB9 00004D56           5747                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B44                          5748  
00004B44  227C 00006960           5749  MOVE_An_indir_reg1_out                 MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
00004B4A  4EB9 00004D56           5750                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B50                          5751  
00004B50  227C 00006965           5752  MOVE_An_indir_reg2_out                 MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
00004B56  4EB9 00004D56           5753                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B5C                          5754  
00004B5C  227C 0000696A           5755  MOVE_An_indir_reg3_out                 MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
00004B62  4EB9 00004D56           5756                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B68                          5757  
00004B68  227C 0000696F           5758  MOVE_An_indir_reg4_out                 MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
00004B6E  4EB9 00004D56           5759                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B74                          5760  
00004B74  227C 00006974           5761  MOVE_An_indir_reg5_out                 MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
00004B7A  4EB9 00004D56           5762                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B80                          5763  
00004B80  227C 00006979           5764  MOVE_An_indir_reg6_out                 MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
00004B86  4EB9 00004D56           5765                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B8C                          5766                                          
00004B8C  227C 0000697E           5767  MOVE_An_indir_reg7_out                 MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
00004B92  4EB9 00004D56           5768                                          JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004B98                          5769  
00004B98                          5770  ;------------------Address Register Indirect with Post Increment-----------------------
00004B98  B4BC 00000018           5771  MOVE_An_indir_postinc_reg                  CMP.L      #match_MOVE_src_An_indir_pinc_r0,D2        ;check reg is equal to 0
00004B9E  6600 0006               5772                                              BNE        MOVE_An_indir_postinc_reg1                      ;if not try reg 1
00004BA2  6700 0064               5773                                              BEQ        MOVE_An_indir_postinc_reg0_out               ;if equal go to output MOVEroutine
00004BA6                          5774  
00004BA6  B4BC 00000019           5775  MOVE_An_indir_postinc_reg1                 CMP.L      #match_MOVE_src_An_indir_pinc_r1,D2        ;check reg is equal to 1
00004BAC  6600 0006               5776                                              BNE        MOVE_An_indir_postinc_reg2                      ;if not try reg 2
00004BB0  6700 0062               5777                                              BEQ        MOVE_An_indir_postinc_reg1_out               ;if equal go to output MOVEroutine
00004BB4                          5778  
00004BB4  B4BC 0000001A           5779  MOVE_An_indir_postinc_reg2                 CMP.L      #match_MOVE_src_An_indir_pinc_r2,D2        ;check reg is equal to 2
00004BBA  6600 0006               5780                                              BNE        MOVE_An_indir_postinc_reg3                      ;if not try reg 3
00004BBE  6700 0060               5781                                              BEQ        MOVE_An_indir_postinc_reg2_out               ;if equal go to output MOVEroutine
00004BC2                          5782  
00004BC2  B4BC 0000001B           5783  MOVE_An_indir_postinc_reg3                 CMP.L      #match_MOVE_src_An_indir_pinc_r3,D2        ;check reg is equal to 3
00004BC8  6600 0006               5784                                              BNE        MOVE_An_indir_postinc_reg4                      ;if not try reg 4
00004BCC  6700 005E               5785                                              BEQ        MOVE_An_indir_postinc_reg3_out               ;if equal go to output MOVEroutine
00004BD0                          5786   
00004BD0  B4BC 0000001C           5787  MOVE_An_indir_postinc_reg4                 CMP.L      #match_MOVE_src_An_indir_pinc_r4,D2        ;check reg is equal to 4
00004BD6  6600 0006               5788                                              BNE        MOVE_An_indir_postinc_reg5                      ;if not try reg 5
00004BDA  6700 005C               5789                                              BEQ        MOVE_An_indir_postinc_reg4_out               ;if equal go to output MOVEroutine
00004BDE                          5790  
00004BDE  B4BC 0000001D           5791  MOVE_An_indir_postinc_reg5                 CMP.L      #match_MOVE_src_An_indir_pinc_r5,D2        ;check reg is equal to 5
00004BE4  6600 0006               5792                                              BNE        MOVE_An_indir_postinc_reg6                      ;if not try reg 6
00004BE8  6700 005A               5793                                              BEQ        MOVE_An_indir_postinc_reg5_out               ;if equal go to output MOVEroutine
00004BEC                          5794  
00004BEC  B4BC 0000001E           5795  MOVE_An_indir_postinc_reg6                 CMP.L      #match_MOVE_src_An_indir_pinc_r6,D2         ;check reg is equal to 6
00004BF2  6600 0006               5796                                              BNE        MOVE_An_indir_postinc_reg7                        ;if not try reg 7
00004BF6  6700 0058               5797                                              BEQ        MOVE_An_indir_postinc_reg6_out                    ;if equal go to output MOVEroutine
00004BFA                          5798  
00004BFA  B4BC 0000001F           5799  MOVE_An_indir_postinc_reg7                 CMP.L      #match_MOVE_src_An_indir_pinc_r7,D2         ;check reg is equal to 7
00004C00  6700 005A               5800                                              BEQ        MOVE_An_indir_postinc_reg7_out                    ;if equal go to output MOVEroutine
00004C04  6600 0630               5801                                              BNE        MOVE_ERROR                                        :if not equal to an addresssing mode, pritn error
00004C08                          5802  
00004C08                          5803  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00004C08  227C 00006983           5804  MOVE_An_indir_postinc_reg0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
00004C0E  4EB9 00004D56           5805                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C14                          5806  
00004C14  227C 00006989           5807  MOVE_An_indir_postinc_reg1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00004C1A  4EB9 00004D56           5808                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C20                          5809  
00004C20  227C 0000698F           5810  MOVE_An_indir_postinc_reg2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
00004C26  4EB9 00004D56           5811                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C2C                          5812  
00004C2C  227C 00006995           5813  MOVE_An_indir_postinc_reg3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00004C32  4EB9 00004D56           5814                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C38                          5815  
00004C38  227C 0000699B           5816  MOVE_An_indir_postinc_reg4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00004C3E  4EB9 00004D56           5817                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C44                          5818  
00004C44  227C 000069A1           5819  MOVE_An_indir_postinc_reg5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
00004C4A  4EB9 00004D56           5820                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C50                          5821  
00004C50  227C 000069A7           5822  MOVE_An_indir_postinc_reg6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00004C56  4EB9 00004D56           5823                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C5C                          5824  
00004C5C  227C 000069AD           5825  MOVE_An_indir_postinc_reg7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00004C62  4EB9 00004D56           5826                                               JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004C68                          5827  
00004C68                          5828  ;------------------Address Register Indirect with Pre Decrement-----------------------
00004C68  B4BC 00000020           5829  MOVE_An_indir_predec                       CMP.L      #match_MOVE_src_An_indir_prede_r0,D2       ;check reg is equal to 0
00004C6E  6600 0006               5830                                              BNE        MOVE_An_indir_predec_reg1                      ;if not try reg 1
00004C72  6700 0064               5831                                              BEQ        MOVE_An_indir_predec_reg0_out               ;if equal go to output MOVEroutine
00004C76                          5832  
00004C76  B4BC 00000021           5833  MOVE_An_indir_predec_reg1                  CMP.L      #match_MOVE_src_An_indir_prede_r1,D2       ;check reg is equal to 1
00004C7C  6600 0006               5834                                              BNE        MOVE_An_indir_predec_reg2                      ;if not try reg 2
00004C80  6700 0062               5835                                              BEQ        MOVE_An_indir_predec_reg1_out               ;if equal go to output MOVEroutine
00004C84                          5836  
00004C84  B4BC 00000022           5837  MOVE_An_indir_predec_reg2                  CMP.L      #match_MOVE_src_An_indir_prede_r2,D2       ;check reg is equal to 2
00004C8A  6600 0006               5838                                              BNE        MOVE_An_indir_predec_reg3                      ;if not try reg 3
00004C8E  6700 0060               5839                                              BEQ        MOVE_An_indir_predec_reg2_out               ;if equal go to output MOVEroutine
00004C92                          5840  
00004C92  B4BC 00000023           5841  MOVE_An_indir_predec_reg3                  CMP.L      #match_MOVE_src_An_indir_prede_r3,D2       ;check reg is equal to 3
00004C98  6600 0006               5842                                              BNE        MOVE_An_indir_predec_reg4                      ;if not try reg 4
00004C9C  6700 005E               5843                                              BEQ        MOVE_An_indir_predec_reg3_out               ;if equal go to output MOVEroutine
00004CA0                          5844  
00004CA0  B4BC 00000024           5845  MOVE_An_indir_predec_reg4                  CMP.L      #match_MOVE_src_An_indir_prede_r4,D2       ;check reg is equal to 4
00004CA6  6600 0006               5846                                              BNE        MOVE_An_indir_predec_reg5                      ;if not try reg 5
00004CAA  6700 005C               5847                                              BEQ        MOVE_An_indir_predec_reg4_out               ;if equal go to output MOVEroutine
00004CAE                          5848  
00004CAE  B4BC 00000025           5849  MOVE_An_indir_predec_reg5                  CMP.L      #match_MOVE_src_An_indir_prede_r5,D2       ;check reg is equal to 5
00004CB4  6600 0006               5850                                              BNE        MOVE_An_indir_predec_reg6                     ;if not try reg 6
00004CB8  6700 005A               5851                                              BEQ        MOVE_An_indir_predec_reg5_out               ;if equal go to output MOVEroutine
00004CBC                          5852  
00004CBC  B4BC 00000026           5853  MOVE_An_indir_predec_reg6                  CMP.L      #match_MOVE_src_An_indir_prede_r6,D2       ;check reg is equal to 6
00004CC2  6600 0006               5854                                              BNE        MOVE_An_indir_predec_reg7                     ;if not try reg 7
00004CC6  6700 0058               5855                                              BEQ        MOVE_An_indir_predec_reg6_out               ;if equal go to output MOVEroutine
00004CCA                          5856  
00004CCA  B4BC 00000027           5857  MOVE_An_indir_predec_reg7                  CMP.L      #match_MOVE_src_An_indir_prede_r7,D2       ;check reg is equal to 7
00004CD0  6700 005A               5858                                              BEQ        MOVE_An_indir_predec_reg7_out               ;if equal go to output MOVEroutine
00004CD4  6600 0560               5859                                              BNE        MOVE_ERROR                                    :if not equal to an addresssing mode, pritn error
00004CD8                          5860  
00004CD8                          5861  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00004CD8  227C 000069B3           5862  MOVE_An_indir_predec_reg0_out              MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
00004CDE  4EB9 00004D56           5863                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004CE4                          5864                                              
00004CE4  227C 000069B9           5865  MOVE_An_indir_predec_reg1_out              MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
00004CEA  4EB9 00004D56           5866                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004CF0                          5867  
00004CF0  227C 000069BF           5868  MOVE_An_indir_predec_reg2_out              MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00004CF6  4EB9 00004D56           5869                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004CFC                          5870  
00004CFC  227C 000069C5           5871  MOVE_An_indir_predec_reg3_out              MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00004D02  4EB9 00004D56           5872                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D08                          5873  
00004D08  227C 000069CB           5874  MOVE_An_indir_predec_reg4_out              MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
00004D0E  4EB9 00004D56           5875                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D14                          5876  
00004D14  227C 000069D1           5877  MOVE_An_indir_predec_reg5_out              MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
00004D1A  4EB9 00004D56           5878                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D20                          5879  
00004D20  227C 000069D7           5880  MOVE_An_indir_predec_reg6_out              MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00004D26  4EB9 00004D56           5881                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D2C                          5882  
00004D2C  227C 000069DD           5883  MOVE_An_indir_predec_reg7_out              MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00004D32  4EB9 00004D56           5884                                              JSR             MOVE_determine_second_op                 ;jump to MOVEroutine to determine second operand
00004D38                          5885          
00004D38                          5886  ;------------------Absolute Addressing Output-----------------------
00004D38  22FC 000069ED           5887  MOVE_abs_add_word_out                MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004D3E  22C5                    5888                                        MOVE.L      D5,(A1)+                           ;load address                  
00004D40  4CDF 7CBE               5889                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004D44  4E75                    5890                                       RTS                                            :return to MOVEroutine
00004D46                          5891                                             
00004D46                          5892  
00004D46  2A18                    5893  MOVE_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00004D48  22FC 000069ED           5894                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
00004D4E  22C5                    5895                                        MOVE.L      D5,(A1)+                           ;load address                  
00004D50  4CDF 7CBE               5896                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004D54  4E75                    5897                                        RTS                                            :return to MOVEroutine                                            
00004D56                          5898  
00004D56  4241                    5899  MOVE_determine_second_op                CLR         D1
00004D58                          5900  
00004D58  C2BC 000001C0           5901                                   AND.L             #mask_MOVE_dest_ea_mode,D1                                   ;move the mask to D1
00004D5E                          5902  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00004D5E  B2BC 00000000           5903  MOVE_dest_data_reg_dir           CMP.L             #match_MOVE_dest_Dn,D1                             ;check to see if mode is data reg direct
00004D64  6600 0006               5904                                   BNE               MOVE_dest_add_reg_dir                                   ;if not, go check add reg dir
00004D68  6700 006E               5905                                   BEQ               MOVE_dest_Dn_reg                                        ;if equal go figure out the register
00004D6C                          5906  
00004D6C  B2BC 00000040           5907  MOVE_dest_add_reg_dir            CMP.L             #match_MOVE_dest_An,D1                             ;check if mode is add reg direct
00004D72  6600 0006               5908                                   BNE               MOVE_dest_add_reg_indir                                 ;if not, go check add reg indir
00004D76  6700 0130               5909                                   BEQ               MOVE_dest_An_reg                                        ;if equal go figure out the reg
00004D7A                          5910   
00004D7A  B2BC 00000080           5911  MOVE_dest_add_reg_indir          CMP.L             #match_MOVE_dest_An_indir,D1                       ;check to see if mode is add reg indir
00004D80  6600 0006               5912                                   BNE               MOVE_dest_add_reg_indir_predec                          ;if not, go check add reg indir predec 
00004D84  6700 01F2               5913                                   BEQ               MOVE_dest_An_indir_reg                                  ;if equal go figure out the register           
00004D88                          5914             
00004D88  B2BC 00000100           5915  MOVE_dest_add_reg_indir_predec   CMP.L             #match_MOVE_dest_An_indir_predec,D1                ;check to see if mode is add reg indor w/ postinc
00004D8E  6600 0006               5916                                   BNE               MOVE_dest_add_reg_indir_postinc                         ;if not go check add reg indir/predec
00004D92  6700 0384               5917                                   BEQ               MOVE_dest_An_indir_predec                               ;if equal go figure out the register
00004D96                          5918                        
00004D96  B2BC 000000C0           5919  MOVE_dest_add_reg_indir_postinc  CMP.L             #match_MOVE_dest_An_indir_postinc,D1               ;check to see if mode is add reg indir w/predec
00004D9C  6600 0006               5920                                   BNE               MOVE_dest_abs_add_word                                  ;if not go check abs add word
00004DA0  6700 02A6               5921                                   BEQ               MOVE_dest_An_indir_pinc_r                          ;if equal go figure out the register
00004DA4                          5922  
00004DA4  C4BC 000001C0           5923  MOVE_dest_abs_add_word           AND.L             #mask_MOVE_dest_abs_add,D2                         ;load mask to determine if abs add word or long
00004DAA                          5924                                   
00004DAA  B4BC 000001C0           5925                                   CMP.L             #match_MOVE_dest_abs_add_word,D2                   ;check if abs add word
00004DB0  2A18                    5926                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
00004DB2  6600 0006               5927                                   BNE               MOVE_dest_abs_add_long                                  ;if not go check abs add long
00004DB6  6700 0430               5928                                   BEQ               MOVE_dest_abs_add_word_out                              ;if equal go to output
00004DBA                          5929    
00004DBA  B4BC 000009C0           5930  MOVE_dest_abs_add_long           CMP.L             #match_MOVE_dest_abs_add_long,D2                    ;check to see if abs add long
00004DC0  6700 0434               5931                                   BEQ               MOVE_dest_abs_add_long_out                               ;if equal go to output
00004DC4                          5932                                   
00004DC4  B2BC 000001C0           5933  MOVE_dest_immediate_add          CMP.L             #match_MOVE_dest_imm_add,D1                                ;check if immediate address
00004DCA  6700 043A               5934                                   BEQ               MOVE_dest_immediate_add_out                                    ;if equal go to immediate add MOVE routine
00004DCE  6600 0466               5935                                   BNE               MOVE_ERROR                                            ;if not equal go to error mesage MOVE routine
00004DD2                          5936  
00004DD2                          5937  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00004DD2                          5938                                   
00004DD2  C4BC 00000FC0           5939                                   AND.L              #mask_MOVE_dest_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
00004DD8                          5940  ;-----------------------------------Data Register Direct--------------------------------
00004DD8  B4BC 00000000           5941  MOVE_dest_Dn_reg                 CMP.L              #match_MOVE_dest_D0,D2                       ;check to see in the register is 0
00004DDE  6600 0006               5942                                   BNE                MOVE_dest_rD1                                     ;if not go check register 1
00004DE2  6700 0064               5943                                   BEQ                MOVE_dest_D0_out                              ;if equal go to output MOVEroutine
00004DE6                          5944  
00004DE6  B4BC 00000200           5945  MOVE_dest_rD1                    CMP.L              #match_MOVE_dest_D1,D2                       ;check to see in the register is 1
00004DEC  6600 0006               5946                                   BNE                MOVE_dest_rD2                                     ;if not go check register 2
00004DF0  6700 0062               5947                                   BEQ                MOVE_dest_D1_out                              ;if equal go to output MOVEroutine
00004DF4                          5948  
00004DF4  B4BC 00000400           5949  MOVE_dest_rD2                    CMP.L              #match_MOVE_dest_D2,D2                       ;check to see in the register is 2
00004DFA  6600 0006               5950                                   BNE                MOVE_dest_rD3                                     ;if not go check register 3
00004DFE  6700 0060               5951                                   BEQ                MOVE_dest_D2_out                              ;if equal go to output MOVEroutine
00004E02                          5952  
00004E02  B4BC 00000600           5953  MOVE_dest_rD3                    CMP.L              #match_MOVE_dest_D3,D2                       ;check to see in the register is 3
00004E08  6600 0006               5954                                   BNE                MOVE_dest_rD4                                     ;if not go check register 4
00004E0C  6700 005E               5955                                   BEQ                MOVE_dest_D3_out                              ;if equal go to output MOVEroutine
00004E10                          5956  
00004E10  B4BC 00000800           5957  MOVE_dest_rD4                    CMP.L              #match_MOVE_dest_D4,D2                       ;check to see in the register is 4
00004E16  6600 0006               5958                                   BNE                MOVE_dest_rD5                                     ;if not go check register 5
00004E1A  6700 005C               5959                                   BEQ                MOVE_dest_D4_out                              ;if equal go to output MOVEroutine
00004E1E                          5960  
00004E1E  B4BC 00000A00           5961  MOVE_dest_rD5                    CMP.L              #match_MOVE_dest_D5,D2                       ;check to see in the register is 5
00004E24  6600 0006               5962                                   BNE                MOVE_dest_rD6                                     ;if not go check register 6
00004E28  6700 005A               5963                                   BEQ                MOVE_dest_D5_out                              ;if equal go to output MOVEroutine
00004E2C                          5964  
00004E2C  B4BC 00000C00           5965  MOVE_dest_rD6                    CMP.L              #match_MOVE_dest_D6,D2                       ;check to see in the register is 6
00004E32  6600 0006               5966                                   BNE                MOVE_dest_rD7                                     ;if not go check register 7
00004E36  6700 0058               5967                                   BEQ                MOVE_dest_D6_out                              ;if equal go to output MOVEroutine
00004E3A                          5968  
00004E3A  B4BC 00000E00           5969  MOVE_dest_rD7                    CMP.L              #match_MOVE_dest_D7,D2                       ;check to see in the register is 7
00004E40  6700 005A               5970                                   BEQ                MOVE_dest_D7_out                              ;if equal go to output MOVEroutine
00004E44  6600 03F0               5971                                   BNE                MOVE_ERROR                               ;if not equal, got to error message
00004E48                          5972  ;--------------------Data Register Direct Output-----------------------
00004E48  227C 0000691B           5973  MOVE_dest_D0_out                MOVE.L          #ea_D0,A1                           ;load string constant into A1
00004E4E  4CDF 7CBE               5974                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004E52  4E75                    5975                                  RTS
00004E54                          5976  
00004E54  227C 0000691E           5977  MOVE_dest_D1_out                MOVE.L          #ea_D1,A1                           ;load string constant into A1
00004E5A  4CDF 7CBE               5978                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004E5E  4E75                    5979                                  RTS
00004E60                          5980  
00004E60  227C 00006921           5981  MOVE_dest_D2_out                MOVE.L          #ea_D2,A1                           ;load string constant into A1
00004E66  4CDF 7CBE               5982                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004E6A  4E75                    5983                                  RTS
00004E6C                          5984  
00004E6C  227C 00006924           5985  MOVE_dest_D3_out                MOVE.L          #ea_D3,A1                           ;load string constant into A1
00004E72  4CDF 7CBE               5986                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004E76  4E75                    5987                                  RTS
00004E78                          5988  
00004E78  227C 00006927           5989  MOVE_dest_D4_out                MOVE.L          #ea_D4,A1                           ;load string constant into A1
00004E7E  4CDF 7CBE               5990                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004E82  4E75                    5991                                  RTS
00004E84                          5992  
00004E84  227C 0000692A           5993  MOVE_dest_D5_out                MOVE.L          #ea_D5,A1                           ;load string constant into A1
00004E8A  4CDF 7CBE               5994                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004E8E  4E75                    5995                                  RTS
00004E90                          5996  
00004E90  227C 0000692D           5997  MOVE_dest_D6_out                MOVE.L          #ea_D6,A1                           ;load string constant into A1
00004E96  4CDF 7CBE               5998                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004E9A  4E75                    5999                                  RTS
00004E9C                          6000  
00004E9C  227C 00006930           6001  MOVE_dest_D7_out                MOVE.L          #ea_D7,A1                           ;load string constant into A1
00004EA2  4CDF 7CBE               6002                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004EA6  4E75                    6003                                  RTS
00004EA8                          6004  
00004EA8                          6005  ;------------------Address Register Direct-----------------------
00004EA8  B4BC 00000040           6006  MOVE_dest_An_reg                  CMP.L           #match_MOVE_dest_A0,D2                      ;check reg is equal to 0
00004EAE  6600 0006               6007                                   BNE             MOVE_dest_rA1                                  ;if not try reg 1
00004EB2  6700 0134               6008                                   BEQ             MOVE_dest_An_indir_reg0_out                     ;if equal go to output MOVEroutine
00004EB6                          6009  
00004EB6  B4BC 00000240           6010  MOVE_dest_rA1                     CMP.L           #match_MOVE_dest_A1,D2                      ;check reg is equal to 1
00004EBC  6600 0006               6011                                   BNE             MOVE_dest_rA2                                  ;if not try reg 2
00004EC0  6700 0132               6012                                   BEQ             MOVE_dest_An_indir_reg1_out                     ;if equal go to output MOVEroutine
00004EC4                          6013  
00004EC4  B4BC 00000440           6014  MOVE_dest_rA2                     CMP.L           #match_MOVE_dest_A2,D2                     ;check reg is equal to 2
00004ECA  6600 0006               6015                                   BNE             MOVE_dest_rA3                                  ;if not try reg 3
00004ECE  6700 0130               6016                                   BEQ             MOVE_dest_An_indir_reg2_out                     ;if equal go to output MOVEroutine
00004ED2                          6017  
00004ED2  B4BC 00000640           6018  MOVE_dest_rA3                     CMP.L           #match_MOVE_dest_A3,D2                       ;check reg is equal to 3
00004ED8  6600 0006               6019                                   BNE             MOVE_dest_rA4                                    ;if not try reg 4
00004EDC  6700 012E               6020                                   BEQ             MOVE_dest_An_indir_reg3_out                     ;if equal go to output MOVEroutine
00004EE0                          6021  
00004EE0  B4BC 00000840           6022  MOVE_dest_rA4                     CMP.L           #match_MOVE_dest_A4,D2                       ;check reg is equal to 4
00004EE6  6600 0006               6023                                   BNE             MOVE_dest_rA5                                    ;if not try reg 5
00004EEA  6700 012C               6024                                   BEQ             MOVE_dest_An_indir_reg4_out                     ;if equal go to output MOVEroutine
00004EEE                          6025              
00004EEE  B4BC 00000A40           6026  MOVE_dest_rA5                     CMP.L           #match_MOVE_dest_A5,D2                      ;check reg is equal to 5
00004EF4  6600 0006               6027                                   BNE             MOVE_dest_rA6                                  ;if not try reg 6
00004EF8  6700 012A               6028                                   BEQ             MOVE_dest_An_indir_reg5_out                     ;if equal go to output MOVEroutine
00004EFC                          6029  
00004EFC  B4BC 00000C40           6030  MOVE_dest_rA6                     CMP.L           #match_MOVE_dest_A6,D2                                     ;check reg is equal to 6
00004F02  6600 0006               6031                                   BNE             MOVE_dest_rA7                                  ;if not try reg 7
00004F06  6700 0128               6032                                   BEQ             MOVE_dest_An_indir_reg6_out                     ;if equal go to output MOVEroutine
00004F0A                          6033  
00004F0A  B4BC 00000E40           6034  MOVE_dest_rA7                     CMP.L           #match_MOVE_dest_A7,D2                      ;check reg is equal to 7
00004F10  6700 012A               6035                                   BEQ             MOVE_dest_An_indir_reg7_out                      ;if equal go to output MOVEroutine
00004F14  6600 0320               6036                                   BNE             MOVE_ERROR                                  :if not equal to an addresssing mode, pritn error
00004F18                          6037  
00004F18                          6038  ;--------------------Address Register Direct Output-----------------------
00004F18  227C 00006933           6039  MOVE_dest_A0_out                 MOVE.L         #ea_A0,A1                           ;load string constant into A1
00004F1E  4CDF 7CBE               6040                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F22  4E75                    6041                                  RTS
00004F24                          6042                                  
00004F24  227C 00006936           6043  MOVE_dest_A1_out                 MOVE.L         #ea_A1,A1                           ;load string constant into A1
00004F2A  4CDF 7CBE               6044                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F2E  4E75                    6045                                  RTS
00004F30                          6046                                  
00004F30  227C 00006939           6047  MOVE_dest_A2_out                 MOVE.L         #ea_A2,A1                           ;load string constant into A1
00004F36  4CDF 7CBE               6048                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F3A  4E75                    6049                                  RTS
00004F3C                          6050                                  
00004F3C  227C 0000693C           6051  MOVE_dest_A3_out                 MOVE.L         #ea_A3,A1                           ;load string constant into A1
00004F42  4CDF 7CBE               6052                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F46  4E75                    6053                                  RTS
00004F48                          6054  
00004F48  227C 0000693F           6055  MOVE_dest_A4_out                 MOVE.L         #ea_A4,A1                           ;load string constant into A1
00004F4E  4CDF 7CBE               6056                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F52  4E75                    6057                                  RTS
00004F54                          6058  
00004F54  227C 00006942           6059  MOVE_dest_A5_out                 MOVE.L         #ea_A5,A1                           ;load string constant into A1
00004F5A  4CDF 7CBE               6060                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F5E  4E75                    6061                                  RTS
00004F60                          6062  
00004F60  227C 00006945           6063  MOVE_dest_A6_out                 MOVE.L         #ea_A6,A1                           ;load string constant into A1
00004F66  4CDF 7CBE               6064                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F6A  4E75                    6065                                  RTS
00004F6C                          6066  
00004F6C  227C 00006948           6067  MOVE_dest_A7_out                 MOVE.L         #ea_A7,A1                           ;load string constant into A1
00004F72  4CDF 7CBE               6068                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004F76  4E75                    6069                                  RTS
00004F78                          6070  
00004F78                          6071  ;------------------Address Register Indirect-----------------------
00004F78  B4BC 00000080           6072  MOVE_dest_An_indir_reg            CMP.L          #match_MOVE_dest_An_indir_r0,D2              ;check reg is equal to 0
00004F7E  6600 0006               6073                                   BNE             MOVE_dest_An_indir_reg1                           ;if not try reg 1
00004F82  6700 0064               6074                                   BEQ             MOVE_dest_An_indir_reg0_out                       ;if equal go to output MOVEroutine
00004F86                          6075  
00004F86  B4BC 00000280           6076  MOVE_dest_An_indir_reg1           CMP.L           #match_MOVE_dest_An_indir_r1,D2              ;check reg is equal to 1
00004F8C  6600 0006               6077                                   BNE             MOVE_dest_An_indir_reg2                           ;if not try reg 2
00004F90  6700 0062               6078                                   BEQ             MOVE_dest_An_indir_reg1_out                       ;if equal go to output MOVEroutine
00004F94                          6079  
00004F94  B4BC 00000480           6080  MOVE_dest_An_indir_reg2           CMP.L           #match_MOVE_dest_An_indir_r2,D2              ;check reg is equal to 2
00004F9A  6600 0006               6081                                   BNE             MOVE_dest_An_indir_reg3                           ;if not try reg 3
00004F9E  6700 0060               6082                                   BEQ             MOVE_dest_An_indir_reg2_out                       ;if equal go to output MOVEroutine
00004FA2                          6083  
00004FA2  B4BC 00000680           6084  MOVE_dest_An_indir_reg3           CMP.L           #match_MOVE_dest_An_indir_r3,D2              ;check reg is equal to 3
00004FA8  6600 0006               6085                                   BNE             MOVE_dest_An_indir_reg4                           ;if not try reg 4
00004FAC  6700 005E               6086                                   BEQ             MOVE_dest_An_indir_reg3_out                       ;if equal go to output MOVEroutine
00004FB0                          6087      
00004FB0  B4BC 00000880           6088  MOVE_dest_An_indir_reg4           CMP.L           #match_MOVE_dest_An_indir_r4,D2              ;check reg is equal to 4
00004FB6  6600 0006               6089                                   BNE             MOVE_dest_An_indir_reg5                           ;if not try reg 5
00004FBA  6700 005C               6090                                   BEQ             MOVE_dest_An_indir_reg4_out                       ;if equal go to output MOVEroutine
00004FBE                          6091          
00004FBE  B4BC 00000A80           6092  MOVE_dest_An_indir_reg5           CMP.L           #match_MOVE_dest_An_indir_r5,D2              ;check reg is equal to 5
00004FC4  6600 0006               6093                                   BNE             MOVE_dest_An_indir_reg6                           ;if not try reg 6
00004FC8  6700 005A               6094                                   BEQ             MOVE_dest_An_indir_reg5_out                       ;if equal go to output MOVEroutine
00004FCC                          6095  
00004FCC  B4BC 00000C80           6096  MOVE_dest_An_indir_reg6           CMP.L           #match_MOVE_dest_An_indir_r6,D2              ;check reg is equal to 6
00004FD2  6600 0006               6097                                   BNE             MOVE_dest_An_indir_reg7                           ;if not try reg 7
00004FD6  6700 0058               6098                                   BEQ             MOVE_dest_An_indir_reg6_out                       ;if equal go to output MOVEroutine
00004FDA                          6099  
00004FDA  B4BC 00000E80           6100  MOVE_dest_An_indir_reg7           CMP.L           #match_MOVE_dest_An_indir_r7,D2              ;check reg is equal to 7
00004FE0  6700 005A               6101                                   BEQ             MOVE_dest_An_indir_reg7_out                       ;if equal go to output MOVEroutine
00004FE4  6600 0250               6102                                   BNE             MOVE_ERROR                                   :if not equal to an addresssing mode, pritn error
00004FE8                          6103  
00004FE8                          6104  ;--------------------Address Register Indirect Output-----------------------
00004FE8  227C 0000695B           6105  MOVE_dest_An_indir_reg0_out                     MOVE.L          #ea_indir_A0,A1                     ;load string constant into A1
00004FEE  4CDF 7CBE               6106                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004FF2  4E75                    6107                                                  RTS
00004FF4                          6108  
00004FF4  227C 00006960           6109  MOVE_dest_An_indir_reg1_out                     MOVE.L          #ea_indir_A1,A1                   ;load string constant into A1
00004FFA  4CDF 7CBE               6110                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00004FFE  4E75                    6111                                                  RTS
00005000                          6112  
00005000  227C 00006965           6113  MOVE_dest_An_indir_reg2_out                     MOVE.L          #ea_indir_A2,A1                   ;load string constant into A1
00005006  4CDF 7CBE               6114                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000500A  4E75                    6115                                                  RTS
0000500C                          6116  
0000500C  227C 0000696A           6117  MOVE_dest_An_indir_reg3_out                     MOVE.L          #ea_indir_A3,A1                   ;load string constant into A1
00005012  4CDF 7CBE               6118                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005016  4E75                    6119                                                  RTS
00005018                          6120  
00005018  227C 0000696F           6121  MOVE_dest_An_indir_reg4_out                     MOVE.L          #ea_indir_A4,A1                   ;load string constant into A1
0000501E  4CDF 7CBE               6122                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005022  4E75                    6123                                                  RTS
00005024                          6124  
00005024  227C 00006974           6125  MOVE_dest_An_indir_reg5_out                     MOVE.L          #ea_indir_A5,A1                   ;load string constant into A1
0000502A  4CDF 7CBE               6126                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000502E  4E75                    6127                                                  RTS
00005030                          6128  
00005030  227C 00006979           6129  MOVE_dest_An_indir_reg6_out                     MOVE.L          #ea_indir_A6,A1                   ;load string constant into A1
00005036  4CDF 7CBE               6130                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000503A  4E75                    6131                                                  RTS
0000503C                          6132                                          
0000503C  227C 0000697E           6133  MOVE_dest_An_indir_reg7_out                     MOVE.L          #ea_indir_A7,A1                   ;load string constant into A1
00005042  4CDF 7CBE               6134                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005046  4E75                    6135                                                  RTS
00005048                          6136  
00005048                          6137  ;------------------Address Register Indirect with Post Increment-----------------------
00005048  B4BC 000000C0           6138  MOVE_dest_An_indir_pinc_r                    CMP.L      #match_MOVE_dest_An_indir_pinc_r0,D2        ;check reg is equal to 0
0000504E  6600 0006               6139                                              BNE        MOVE_dest_An_indir_pinc_r1                      ;if not try reg 1
00005052  6700 0064               6140                                              BEQ        MOVE_dest_An_indir_pinc_r0_out               ;if equal go to output MOVEroutine
00005056                          6141  
00005056  B4BC 000002C0           6142  MOVE_dest_An_indir_pinc_r1                   CMP.L      #match_MOVE_dest_An_indir_pinc_r1,D2        ;check reg is equal to 1
0000505C  6600 0006               6143                                              BNE        MOVE_dest_An_indir_pinc_r2                      ;if not try reg 2
00005060  6700 0062               6144                                              BEQ        MOVE_dest_An_indir_pinc_r1_out               ;if equal go to output MOVEroutine
00005064                          6145  
00005064  B4BC 000004C0           6146  MOVE_dest_An_indir_pinc_r2                   CMP.L      #match_MOVE_dest_An_indir_pinc_r2,D2        ;check reg is equal to 2
0000506A  6600 0006               6147                                              BNE        MOVE_dest_An_indir_pinc_r3                      ;if not try reg 3
0000506E  6700 0060               6148                                              BEQ        MOVE_dest_An_indir_pinc_r2_out               ;if equal go to output MOVEroutine
00005072                          6149  
00005072  B4BC 000006C0           6150  MOVE_dest_An_indir_pinc_r3                   CMP.L      #match_MOVE_dest_An_indir_pinc_r3,D2        ;check reg is equal to 3
00005078  6600 0006               6151                                              BNE        MOVE_dest_An_indir_pinc_r4                      ;if not try reg 4
0000507C  6700 005E               6152                                              BEQ        MOVE_dest_An_indir_pinc_r3_out               ;if equal go to output MOVEroutine
00005080                          6153   
00005080  B4BC 000008C0           6154  MOVE_dest_An_indir_pinc_r4                   CMP.L      #match_MOVE_dest_An_indir_pinc_r4,D2        ;check reg is equal to 4
00005086  6600 0006               6155                                              BNE        MOVE_dest_An_indir_pinc_r5                      ;if not try reg 5
0000508A  6700 005C               6156                                              BEQ        MOVE_dest_An_indir_pinc_r4_out               ;if equal go to output MOVEroutine
0000508E                          6157  
0000508E  B4BC 00000AC0           6158  MOVE_dest_An_indir_pinc_r5                   CMP.L      #match_MOVE_dest_An_indir_pinc_r5,D2        ;check reg is equal to 5
00005094  6600 0006               6159                                              BNE        MOVE_dest_An_indir_pinc_r6                      ;if not try reg 6
00005098  6700 005A               6160                                              BEQ        MOVE_dest_An_indir_pinc_r5_out               ;if equal go to output MOVEroutine
0000509C                          6161      
0000509C  B4BC 00000CC0           6162  MOVE_dest_An_indir_pinc_r6                   CMP.L      #match_MOVE_dest_An_indir_pinc_r6,D2         ;check reg is equal to 6
000050A2  6600 0006               6163                                              BNE        MOVE_dest_An_indir_pinc_r7                        ;if not try reg 7
000050A6  6700 0058               6164                                              BEQ        MOVE_dest_An_indir_pinc_r6_out                    ;if equal go to output MOVEroutine
000050AA                          6165  
000050AA  B4BC 00000EC0           6166  MOVE_dest_An_indir_pinc_r7                   CMP.L      #match_MOVE_dest_An_indir_pinc_r7,D2         ;check reg is equal to 7
000050B0  6700 005A               6167                                              BEQ        MOVE_dest_An_indir_pinc_r7_out                    ;if equal go to output MOVEroutine
000050B4  6600 0180               6168                                              BNE        MOVE_ERROR                                        :if not equal to an addresssing mode, pritn error
000050B8                          6169  
000050B8                          6170  ;--------------------Address Register Indirect with Post Increment Output-----------------------
000050B8  227C 00006983           6171  MOVE_dest_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
000050BE  4CDF 7CBE               6172                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000050C2  4E75                    6173                                              RTS
000050C4                          6174  
000050C4  227C 00006989           6175  MOVE_dest_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
000050CA  4CDF 7CBE               6176                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000050CE  4E75                    6177                                              RTS
000050D0                          6178  
000050D0  227C 0000698F           6179  MOVE_dest_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
000050D6  4CDF 7CBE               6180                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000050DA  4E75                    6181                                              RTS
000050DC                          6182  
000050DC  227C 00006995           6183  MOVE_dest_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
000050E2  4CDF 7CBE               6184                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000050E6  4E75                    6185                                              RTS
000050E8                          6186  
000050E8  227C 0000699B           6187  MOVE_dest_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
000050EE  4CDF 7CBE               6188                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000050F2  4E75                    6189                                              RTS
000050F4                          6190  
000050F4  227C 000069A1           6191  MOVE_dest_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
000050FA  4CDF 7CBE               6192                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000050FE  4E75                    6193                                              RTS
00005100                          6194  
00005100  227C 000069A7           6195  MOVE_dest_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00005106  4CDF 7CBE               6196                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000510A  4E75                    6197                                              RTS
0000510C                          6198  
0000510C  227C 000069AD           6199  MOVE_dest_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00005112  4CDF 7CBE               6200                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005116  4E75                    6201                                              RTS
00005118                          6202  
00005118                          6203  ;------------------Address Register Indirect with Pre Decrement-----------------------
00005118  B4BC 00000100           6204  MOVE_dest_An_indir_predec                    CMP.L      #match_MOVE_dest_An_indir_pdec_r0,D2       ;check reg is equal to 0
0000511E  6600 0006               6205                                              BNE        MOVE_dest_An_indir_pdec_r1                      ;if not try reg 1
00005122  6700 0064               6206                                              BEQ        MOVE_dest_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
00005126                          6207  
00005126  B4BC 00000300           6208  MOVE_dest_An_indir_pdec_r1                   CMP.L      #match_MOVE_dest_An_indir_pdec_r1,D2       ;check reg is equal to 1
0000512C  6600 0006               6209                                              BNE        MOVE_dest_An_indir_pdec_r2                      ;if not try reg 2
00005130  6700 0062               6210                                              BEQ        MOVE_dest_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
00005134                          6211  
00005134  B4BC 00000500           6212  MOVE_dest_An_indir_pdec_r2                   CMP.L      #match_MOVE_dest_An_indir_pdec_r2,D2       ;check reg is equal to 2
0000513A  6600 0006               6213                                              BNE        MOVE_dest_An_indir_pdec_r3                      ;if not try reg 3
0000513E  6700 0060               6214                                              BEQ        MOVE_dest_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
00005142                          6215  
00005142  B4BC 00000700           6216  MOVE_dest_An_indir_pdec_r3                   CMP.L      #match_MOVE_dest_An_indir_pdec_r3,D2       ;check reg is equal to 3
00005148  6600 0006               6217                                              BNE        MOVE_dest_An_indir_pdec_r4                      ;if not try reg 4
0000514C  6700 005E               6218                                              BEQ        MOVE_dest_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
00005150                          6219  
00005150  B4BC 00000900           6220  MOVE_dest_An_indir_pdec_r4                   CMP.L      #match_MOVE_dest_An_indir_pdec_r4,D2       ;check reg is equal to 4
00005156  6600 0006               6221                                              BNE        MOVE_dest_An_indir_pdec_r5                      ;if not try reg 5
0000515A  6700 005C               6222                                              BEQ        MOVE_dest_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
0000515E                          6223  
0000515E  B4BC 00000B00           6224  MOVE_dest_An_indir_pdec_r5                   CMP.L      #match_MOVE_dest_An_indir_pdec_r5,D2       ;check reg is equal to 5
00005164  6600 0006               6225                                              BNE        MOVE_dest_An_indir_pdec_r6                     ;if not try reg 6
00005168  6700 005A               6226                                              BEQ        MOVE_dest_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
0000516C                          6227  
0000516C  B4BC 00000D00           6228  MOVE_dest_An_indir_pdec_r6                   CMP.L      #match_MOVE_dest_An_indir_pdec_r6,D2       ;check reg is equal to 6
00005172  6600 0006               6229                                              BNE        MOVE_dest_An_indir_pdec_r7                     ;if not try reg 7
00005176  6700 0058               6230                                              BEQ        MOVE_dest_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
0000517A                          6231  
0000517A  B4BC 00000F00           6232  MOVE_dest_An_indir_pdec_r7                   CMP.L      #match_MOVE_dest_An_indir_pdec_r7,D2       ;check reg is equal to 7
00005180  6700 005A               6233                                              BEQ        MOVE_dest_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
00005184  6600 00B0               6234                                              BNE        MOVE_ERROR                                    :if not equal to an addresssing mode, pritn error
00005188                          6235  
00005188                          6236  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00005188  227C 000069B3           6237  MOVE_dest_An_indir_pdec_r0_out              MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
0000518E  4CDF 7CBE               6238                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005192  4E75                    6239                                              RTS
00005194                          6240                                              
00005194  227C 000069B9           6241  MOVE_dest_An_indir_pdec_r1_out              MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
0000519A  4CDF 7CBE               6242                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
0000519E  4E75                    6243                                              RTS
000051A0                          6244  
000051A0  227C 000069BF           6245  MOVE_dest_An_indir_pdec_r2_out              MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
000051A6  4CDF 7CBE               6246                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051AA  4E75                    6247                                              RTS
000051AC                          6248  
000051AC  227C 000069C5           6249  MOVE_dest_An_indir_pdec_r3_out              MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
000051B2  4CDF 7CBE               6250                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051B6  4E75                    6251                                              RTS
000051B8                          6252  
000051B8  227C 000069CB           6253  MOVE_dest_An_indir_pdec_r4_out              MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
000051BE  4CDF 7CBE               6254                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051C2  4E75                    6255                                              RTS
000051C4                          6256  
000051C4  227C 000069D1           6257  MOVE_dest_An_indir_pdec_r5_out              MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
000051CA  4CDF 7CBE               6258                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051CE  4E75                    6259                                              RTS
000051D0                          6260  
000051D0  227C 000069D7           6261  MOVE_dest_An_indir_pdec_r6_out              MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
000051D6  4CDF 7CBE               6262                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051DA  4E75                    6263                                              RTS
000051DC                          6264  
000051DC  227C 000069DD           6265  MOVE_dest_An_indir_pdec_r7_out              MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
000051E2  4CDF 7CBE               6266                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051E6  4E75                    6267                                              RTS
000051E8                          6268  ;------------------Absolute Addressing Output-----------------------
000051E8  22FC 000069ED           6269  MOVE_dest_abs_add_word_out               MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000051EE  22C5                    6270                                           MOVE.L      D5,(A1)+                           ;load address                  
000051F0  4CDF 7CBE               6271                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
000051F4  4E75                    6272                                           RTS                                            :return to MOVEroutine
000051F6                          6273                                             
000051F6                          6274  
000051F6  2A18                    6275  MOVE_dest_abs_add_long_out               MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
000051F8  22FC 000069ED           6276                                           MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
000051FE  22C5                    6277                                           MOVE.L      D5,(A1)+                           ;load address                  
00005200  4CDF 7CBE               6278                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005204  4E75                    6279                                           RTS                                            :return to MOVEroutine                                            
00005206                          6280  ;---------------Immediate Addresing---------------------------
00005206  2A18                    6281  MOVE_dest_immediate_add_out               MOVE.L        (A0)+,D5                             ;capture the immediate address
00005208  BCBC 000001C0           6282                                           CMP.L       #match_MOVE_dest_imm_add_word,D6               ;check to see if need to pull word
0000520E  2A18                    6283                                           MOVE.L      (A0)+,D5                            ;pull the word
00005210  6700 0006               6284                                           BEQ         MOVE_dest_imm_add_w                           ;if equal go pull word    
00005214  6600 0010               6285                                           BNE         MOVE_dest_imm_add_l                           ;if not equal, go check long
00005218                          6286                                           
00005218  22FC 000069ED           6287  MOVE_dest_imm_add_w                       MOVE.L     #ea_$,(A1)+                          ;load the $
0000521E  32C5                    6288                                           MOVE.W     D5,(A1)+                             ;load the word address                           
00005220  4CDF 7CBE               6289                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005224  4E75                    6290                                           RTS
00005226                          6291                                           
00005226  2A18                    6292  MOVE_dest_imm_add_l                       MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
00005228  22FC 000069ED           6293                                           MOVE.L     #ea_$,(A1)+                          ;load the $
0000522E  2245                    6294                                           MOVE.L      D5,A1                               ;move to A1
00005230  4CDF 7CBE               6295                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005234  4E75                    6296                                           RTS
00005236                          6297  
00005236                          6298  
00005236                          6299  ;----------------------Error Handling----------------------------------------
00005236  43F9 00006907           6300  MOVE_ERROR                                      LEA     ERROR_MESSAGE,A1                                          ;load error messge into A3
0000523C  4CDF 7CBE               6301                                              MOVEM.L           (SP)+, D1-D5/D7/A2-A6 
00005240  4E75                    6302                                                  RTS
00005242  =00000038               6303  mask_MOVE_src_ea_mode           EQU         $0038
00005242  =0000003F               6304  mask_MOVE_src_abs_add           EQU         $003F
00005242  =0000003F               6305  mask_MOVE_src_ea_reg_and_mode   EQU         $003F
00005242                          6306  
00005242                          6307  
00005242  =00000000               6308  match_MOVE_src_Dn               EQU         $0000
00005242  =00000008               6309  match_MOVE_src_An               EQU         $0008
00005242  =00000010               6310  match_MOVE_src_An_indir         EQU         $0010
00005242  =00000020               6311  match_MOVE_src_An_indir_predec  EQU         $0020
00005242  =00000018               6312  match_MOVE_src_An_indir_postinc EQU         $0018
00005242  =00000038               6313  match_MOVE_src_abs_add_word     EQU         $0038
00005242  =00000039               6314  match_MOVE_src_abs_add_long     EQU         $0039
00005242                          6315  
00005242  =00000000               6316  match_MOVE_src_D0               EQU         $0000
00005242  =00000001               6317  match_MOVE_src_D1               EQU         $0001
00005242  =00000002               6318  match_MOVE_src_D2               EQU         $0002
00005242  =00000003               6319  match_MOVE_src_D3               EQU         $0003
00005242  =00000004               6320  match_MOVE_src_D4               EQU         $0004
00005242  =00000005               6321  match_MOVE_src_D5               EQU         $0005
00005242  =00000006               6322  match_MOVE_src_D6               EQU         $0006
00005242  =00000007               6323  match_MOVE_src_D7               EQU         $0007
00005242                          6324  
00005242  =00000008               6325  match_MOVE_src_A0               EQU         $0008
00005242  =00000009               6326  match_MOVE_src_A1               EQU         $0009
00005242  =0000000A               6327  match_MOVE_src_A2               EQU         $000A
00005242  =0000000B               6328  match_MOVE_src_A3               EQU         $000B
00005242  =0000000C               6329  match_MOVE_src_A4               EQU         $000C
00005242  =0000000D               6330  match_MOVE_src_A5               EQU         $000D
00005242  =0000000E               6331  match_MOVE_src_A6               EQU         $000E
00005242  =0000000F               6332  match_MOVE_src_A7               EQU         $000F
00005242                          6333  
00005242  =00000010               6334  match_MOVE_src_An_indir_r0      EQU         $0010
00005242  =00000011               6335  match_MOVE_src_An_indir_r1      EQU         $0011
00005242  =00000012               6336  match_MOVE_src_An_indir_r2      EQU         $0012
00005242  =00000013               6337  match_MOVE_src_An_indir_r3      EQU         $0013
00005242  =00000014               6338  match_MOVE_src_An_indir_r4      EQU         $0014
00005242  =00000015               6339  match_MOVE_src_An_indir_r5      EQU         $0015
00005242  =00000016               6340  match_MOVE_src_An_indir_r6      EQU         $0016
00005242  =00000017               6341  match_MOVE_src_An_indir_r7      EQU         $0017
00005242                          6342  
00005242  =00000018               6343  match_MOVE_src_An_indir_pinc_r0     EQU         $0018
00005242  =00000019               6344  match_MOVE_src_An_indir_pinc_r1     EQU         $0019
00005242  =0000001A               6345  match_MOVE_src_An_indir_pinc_r2     EQU         $001A
00005242  =0000001B               6346  match_MOVE_src_An_indir_pinc_r3     EQU         $001B
00005242  =0000001C               6347  match_MOVE_src_An_indir_pinc_r4     EQU         $001C
00005242  =0000001D               6348  match_MOVE_src_An_indir_pinc_r5     EQU         $001D
00005242  =0000001E               6349  match_MOVE_src_An_indir_pinc_r6     EQU         $001E
00005242  =0000001F               6350  match_MOVE_src_An_indir_pinc_r7     EQU         $001F
00005242                          6351  
00005242  =00000020               6352  match_MOVE_src_An_indir_prede_r0            EQU         $0020
00005242  =00000021               6353  match_MOVE_src_An_indir_prede_r1            EQU         $0021
00005242  =00000022               6354  match_MOVE_src_An_indir_prede_r2            EQU         $0022
00005242  =00000023               6355  match_MOVE_src_An_indir_prede_r3            EQU         $0023
00005242  =00000024               6356  match_MOVE_src_An_indir_prede_r4            EQU         $0024
00005242  =00000025               6357  match_MOVE_src_An_indir_prede_r5            EQU         $0025
00005242  =00000026               6358  match_MOVE_src_An_indir_prede_r6            EQU         $0026
00005242  =00000027               6359  match_MOVE_src_An_indir_prede_r7            EQU         $0027
00005242                          6360  
00005242  =0000003C               6361  match_MOVE_src_imm_add                           EQU         $003C
00005242  =000000FC               6362  match_MOVE_src_imm_add_word                      EQU         $00FC
00005242  =000001FC               6363  match_MOVE_src_imm_add_long                      EQU         $01FC
00005242                          6364  
00005242                          6365  
00005242                          6366  
00005242                          6367  
00005242                          6368  
00005242  =000001C0               6369  mask_MOVE_dest_ea_mode          EQU         $01C0
00005242  =000001C0               6370  mask_MOVE_dest_abs_add          EQU         $01C0
00005242  =00000FC0               6371  mask_MOVE_dest_ea_reg_and_mode  EQU         $0FC0
00005242                          6372  
00005242                          6373  
00005242  =00000000               6374  match_MOVE_dest_Dn              EQU         $0000
00005242  =00000040               6375  match_MOVE_dest_An              EQU         $0040
00005242  =00000080               6376  match_MOVE_dest_An_indir            EQU         $0080
00005242  =00000100               6377  match_MOVE_dest_An_indir_predec EQU         $0100
00005242  =000000C0               6378  match_MOVE_dest_An_indir_postinc    EQU         $00C0
00005242  =000001C0               6379  match_MOVE_dest_abs_add_word        EQU         $01C0
00005242  =000009C0               6380  match_MOVE_dest_abs_add_long        EQU         $09C0
00005242                          6381  
00005242  =00000000               6382  match_MOVE_dest_D0              EQU         $0000
00005242  =00000200               6383  match_MOVE_dest_D1              EQU         $0200
00005242  =00000400               6384  match_MOVE_dest_D2              EQU         $0400
00005242  =00000600               6385  match_MOVE_dest_D3              EQU         $0600
00005242  =00000800               6386  match_MOVE_dest_D4              EQU         $0800
00005242  =00000A00               6387  match_MOVE_dest_D5              EQU         $0A00
00005242  =00000C00               6388  match_MOVE_dest_D6              EQU         $0C00
00005242  =00000E00               6389  match_MOVE_dest_D7              EQU         $0E00
00005242                          6390  
00005242  =00000040               6391  match_MOVE_dest_A0              EQU         $0040
00005242  =00000240               6392  match_MOVE_dest_A1              EQU         $0240
00005242  =00000440               6393  match_MOVE_dest_A2              EQU         $0440
00005242  =00000640               6394  match_MOVE_dest_A3              EQU         $0640
00005242  =00000840               6395  match_MOVE_dest_A4              EQU         $0840
00005242  =00000A40               6396  match_MOVE_dest_A5              EQU         $0A40
00005242  =00000C40               6397  match_MOVE_dest_A6              EQU         $0C40
00005242  =00000E40               6398  match_MOVE_dest_A7              EQU         $0E40
00005242                          6399  
00005242  =00000080               6400  match_MOVE_dest_An_indir_r0     EQU         $0080
00005242  =00000280               6401  match_MOVE_dest_An_indir_r1     EQU         $0280
00005242  =00000480               6402  match_MOVE_dest_An_indir_r2     EQU         $0480
00005242  =00000680               6403  match_MOVE_dest_An_indir_r3     EQU         $0680
00005242  =00000880               6404  match_MOVE_dest_An_indir_r4     EQU         $0880
00005242  =00000A80               6405  match_MOVE_dest_An_indir_r5     EQU         $0A80
00005242  =00000C80               6406  match_MOVE_dest_An_indir_r6     EQU         $0C80
00005242  =00000E80               6407  match_MOVE_dest_An_indir_r7     EQU         $0E80
00005242                          6408  
00005242  =000000C0               6409  match_MOVE_dest_An_indir_pinc_r0        EQU         $00C0
00005242  =000002C0               6410  match_MOVE_dest_An_indir_pinc_r1        EQU         $02C0
00005242  =000004C0               6411  match_MOVE_dest_An_indir_pinc_r2        EQU         $04C0
00005242  =000006C0               6412  match_MOVE_dest_An_indir_pinc_r3        EQU         $06C0
00005242  =000008C0               6413  match_MOVE_dest_An_indir_pinc_r4        EQU         $08C0
00005242  =00000AC0               6414  match_MOVE_dest_An_indir_pinc_r5        EQU         $0AC0
00005242  =00000CC0               6415  match_MOVE_dest_An_indir_pinc_r6        EQU         $0CC0
00005242  =00000EC0               6416  match_MOVE_dest_An_indir_pinc_r7        EQU         $0EC0
00005242                          6417  
00005242  =00000100               6418  match_MOVE_dest_An_indir_pdec_r0            EQU         $0100
00005242  =00000300               6419  match_MOVE_dest_An_indir_pdec_r1            EQU         $0300
00005242  =00000500               6420  match_MOVE_dest_An_indir_pdec_r2            EQU         $0500
00005242  =00000700               6421  match_MOVE_dest_An_indir_pdec_r3            EQU         $0700
00005242  =00000900               6422  match_MOVE_dest_An_indir_pdec_r4            EQU         $0900
00005242  =00000B00               6423  match_MOVE_dest_An_indir_pdec_r5            EQU         $0B00
00005242  =00000D00               6424  match_MOVE_dest_An_indir_pdec_r6            EQU         $0D00
00005242  =00000F00               6425  match_MOVE_dest_An_indir_pdec_r7            EQU         $0F00
00005242                          6426  
00005242  =000001C0               6427  match_MOVE_dest_imm_add                           EQU         $01C0
00005242  =000001C0               6428  match_MOVE_dest_imm_add_word                      EQU         $01C0
00005242  =000009C0               6429  match_MOVE_dest_imm_add_long                      EQU         $09C0
00005242                          6430  
00005242                          6431  
00005242                          6432  
00005242                          6433  
00005242                          6434  
00005242                          6435  -------------------- end include --------------------
00005242                          6436              INCLUDE 'MOVEM Subroutine.x68'
00005242                          6437  
00005242  48E7 7D3E               6438  MOVEM_sub                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)                           ;preserve the registers, 
00005246  C2BC 00000400           6439                                           AND.L             #mask_MOVEM_dir,D1                          ;load the mask to determine the direction
0000524C                          6440                                           
0000524C  B2BC 00000400           6441                                           CMP.L             #match_MOVEM_reg_mem,D1                     ;check to see if it's reg to mem
00005252  6700 0014               6442                                           BEQ               MOVEM_reg_mem                               ;if equal go figure out list
00005256  6600 0002               6443                                           BNE               MOVEM_mem_reg_match                         ;if not go check mem to reg
0000525A                          6444                                           
0000525A                          6445                                           
0000525A  B2BC 00000400           6446  MOVEM_mem_reg_match                     CMP.L              #match_MOVEM_mem_reg,D1                     ;check if mem to reg 
00005260  6700 0434               6447                                          BEQ                MOVEM_determine_second_op                   ;if equal go figure out the register
00005264  6600 08FE               6448                                          BNE                MOVEM_ERROR                                       ;if not equal go to error message
00005268  2A18                    6449  MOVEM_reg_mem                            MOVE.L         (A0)+,D5                                ;pull the register list
0000526A  4241                    6450                                           CLR            D1
0000526C  223C 00008000           6451                                           MOVE.L         #mask_MOVEM_reg_mem_D0,D1                     ;load mask into register
00005272  B2BC 00008000           6452                                           CMP.L          #match_MOVEM_reg_mem_D0,D1                    ;check to see if the D0 is on the list
00005278  6700 016E               6453                                           BEQ            MOVEM_D0_reg_list_out
0000527C  6600 0002               6454                                           BNE            MOVEM_reg_mem_D1
00005280                          6455  
00005280  2A18                    6456  MOVEM_reg_mem_D1                         MOVE.L         (A0)+,D5                                ;pull the register list
00005282  4241                    6457                                           CLR            D1
00005284  223C 00004000           6458                                           MOVE.L         #mask_MOVEM_reg_mem_D1,D1                     ;load mask into register
0000528A  B2BC 00004000           6459                                           CMP.L          #match_MOVEM_reg_mem_D1,D1                    ;check to see if the D0 is on the list
00005290  6700 0160               6460                                           BEQ            MOVEM_D1_reg_list_out
00005294  6600 0002               6461                                           BNE            MOVEM_reg_mem_D2
00005298                          6462  
00005298  2A18                    6463  MOVEM_reg_mem_D2                         MOVE.L         (A0)+,D5                                ;pull the register list
0000529A  4241                    6464                                           CLR            D1
0000529C  223C 00002000           6465                                           MOVE.L         #mask_MOVEM_reg_mem_D2,D1                     ;load mask into register
000052A2  B2BC 00002000           6466                                           CMP.L          #match_MOVEM_reg_mem_D2,D1                    ;check to see if the D0 is on the list
000052A8  6700 0152               6467                                           BEQ            MOVEM_D2_reg_list_out
000052AC  6600 0002               6468                                           BNE            MOVEM_reg_mem_D3
000052B0                          6469  
000052B0  2A18                    6470  MOVEM_reg_mem_D3                         MOVE.L         (A0)+,D5                                ;pull the register list
000052B2  4241                    6471                                           CLR            D1
000052B4  223C 00001000           6472                                           MOVE.L         #mask_MOVEM_reg_mem_D3,D1                     ;load mask into register
000052BA  B2BC 00001000           6473                                           CMP.L          #match_MOVEM_reg_mem_D3,D1                    ;check to see if the D0 is on the list
000052C0  6700 0144               6474                                           BEQ            MOVEM_D3_reg_list_out
000052C4  6600 0002               6475                                           BNE            MOVEM_reg_mem_D4
000052C8                          6476  
000052C8  2A18                    6477  MOVEM_reg_mem_D4                         MOVE.L         (A0)+,D5                                ;pull the register list
000052CA  4241                    6478                                           CLR            D1
000052CC  223C 00000800           6479                                           MOVE.L         #mask_MOVEM_reg_mem_D4,D1                     ;load mask into register
000052D2  B2BC 00000800           6480                                           CMP.L          #match_MOVEM_reg_mem_D4,D1                    ;check to see if the D0 is on the list
000052D8  6700 0136               6481                                           BEQ            MOVEM_D4_reg_list_out
000052DC  6600 0002               6482                                           BNE            MOVEM_reg_mem_D5
000052E0                          6483  
000052E0  2A18                    6484  MOVEM_reg_mem_D5                         MOVE.L         (A0)+,D5                                ;pull the register list
000052E2  4241                    6485                                           CLR            D1
000052E4  223C 00000400           6486                                           MOVE.L         #mask_MOVEM_reg_mem_D5,D1                     ;load mask into register
000052EA  B2BC 00000400           6487                                           CMP.L          #match_MOVEM_reg_mem_D5,D1                    ;check to see if the D0 is on the list
000052F0  6700 0128               6488                                           BEQ            MOVEM_D5_reg_list_out
000052F4  6600 0002               6489                                           BNE            MOVEM_reg_mem_D6
000052F8                          6490  
000052F8  2A18                    6491  MOVEM_reg_mem_D6                         MOVE.L         (A0)+,D5                                ;pull the register list
000052FA  4241                    6492                                           CLR            D1
000052FC  223C 00000200           6493                                           MOVE.L         #mask_MOVEM_reg_mem_D6,D1                     ;load mask into register
00005302  B2BC 00000200           6494                                           CMP.L          #match_MOVEM_reg_mem_D6,D1                    ;check to see if the D0 is on the list
00005308  6700 011A               6495                                           BEQ            MOVEM_D6_reg_list_out
0000530C  6600 0002               6496                                           BNE            MOVEM_reg_mem_D7
00005310                          6497  
00005310  2A18                    6498  MOVEM_reg_mem_D7                         MOVE.L         (A0)+,D5                                ;pull the register list
00005312  4241                    6499                                           CLR            D1
00005314  223C 00000100           6500                                           MOVE.L         #mask_MOVEM_reg_mem_D7,D1                     ;load mask into register
0000531A  B2BC 00000100           6501                                           CMP.L          #match_MOVEM_reg_mem_D7,D1                    ;check to see if the D0 is on the list
00005320  6700 010C               6502                                           BEQ            MOVEM_D7_reg_list_out
00005324  6600 0002               6503                                           BNE            MOVEM_reg_mem_A0
00005328                          6504  
00005328                          6505  
00005328  2A18                    6506  MOVEM_reg_mem_A0                         MOVE.L         (A0)+,D5                                ;pull the register list
0000532A  4241                    6507                                           CLR            D1
0000532C  227C 00000080           6508                                           MOVE.L         #mask_MOVEM_reg_mem_A0,A1                     ;load mask into register
00005332  B3FC 00000080           6509                                           CMP.L          #match_MOVEM_reg_mem_A0,A1                    ;check to see if the A0 is on the list
00005338  6700 00FE               6510                                           BEQ            MOVEM_A0_reg_list_out
0000533C  6600 0002               6511                                           BNE            MOVEM_reg_mem_A1
00005340                          6512  
00005340  2A18                    6513  MOVEM_reg_mem_A1                         MOVE.L         (A0)+,D5                                ;pull the register list
00005342  4241                    6514                                           CLR            D1
00005344  227C 00000040           6515                                           MOVE.L         #mask_MOVEM_reg_mem_A1,A1                     ;load mask into register
0000534A  B3FC 00000040           6516                                           CMP.L          #match_MOVEM_reg_mem_A1,A1                    ;check to see if the A0 is on the list
00005350  6700 00F0               6517                                           BEQ            MOVEM_A1_reg_list_out
00005354  6600 0002               6518                                           BNE            MOVEM_reg_mem_A2
00005358                          6519  
00005358  2A18                    6520  MOVEM_reg_mem_A2                         MOVE.L         (A0)+,D5                                ;pull the register list
0000535A  4241                    6521                                           CLR            D1
0000535C  227C 00000020           6522                                           MOVE.L         #mask_MOVEM_reg_mem_A2,A1                     ;load mask into register
00005362  B3FC 00000020           6523                                           CMP.L          #match_MOVEM_reg_mem_A2,A1                    ;check to see if the A0 is on the list
00005368  6700 00E2               6524                                           BEQ            MOVEM_A2_reg_list_out
0000536C  6600 0002               6525                                           BNE            MOVEM_reg_mem_A3
00005370                          6526  
00005370  2A18                    6527  MOVEM_reg_mem_A3                         MOVE.L         (A0)+,D5                                ;pull the register list
00005372  4241                    6528                                           CLR            D1
00005374  227C 00000010           6529                                           MOVE.L         #mask_MOVEM_reg_mem_A3,A1                     ;load mask into register
0000537A  B3FC 00000010           6530                                           CMP.L          #match_MOVEM_reg_mem_A3,A1                    ;check to see if the A0 is on the list
00005380  6700 00D4               6531                                           BEQ            MOVEM_A3_reg_list_out
00005384  6600 0002               6532                                           BNE            MOVEM_reg_mem_A4
00005388                          6533  
00005388  2A18                    6534  MOVEM_reg_mem_A4                         MOVE.L         (A0)+,D5                                ;pull the register list
0000538A  4241                    6535                                           CLR            D1
0000538C  227C 00000008           6536                                           MOVE.L         #mask_MOVEM_reg_mem_A4,A1                     ;load mask into register
00005392  B3FC 00000008           6537                                           CMP.L          #match_MOVEM_reg_mem_A4,A1                    ;check to see if the A0 is on the list
00005398  6700 00C6               6538                                           BEQ            MOVEM_A4_reg_list_out
0000539C  6600 0002               6539                                           BNE            MOVEM_reg_mem_A5
000053A0                          6540  
000053A0  2A18                    6541  MOVEM_reg_mem_A5                         MOVE.L         (A0)+,D5                                ;pull the register list
000053A2  4241                    6542                                           CLR            D1
000053A4  227C 00000004           6543                                           MOVE.L         #mask_MOVEM_reg_mem_A5,A1                     ;load mask into register
000053AA  B3FC 00000004           6544                                           CMP.L          #match_MOVEM_reg_mem_A5,A1                    ;check to see if the A0 is on the list
000053B0  6700 00B8               6545                                           BEQ            MOVEM_A5_reg_list_out
000053B4  6600 0002               6546                                           BNE            MOVEM_reg_mem_A6
000053B8                          6547  
000053B8  2A18                    6548  MOVEM_reg_mem_A6                         MOVE.L         (A0)+,D5                                ;pull the register list
000053BA  4241                    6549                                           CLR            D1
000053BC  227C 00000002           6550                                           MOVE.L         #mask_MOVEM_reg_mem_A6,A1                     ;load mask into register
000053C2  B3FC 00000002           6551                                           CMP.L          #match_MOVEM_reg_mem_A6,A1                    ;check to see if the A0 is on the list
000053C8  6700 00AA               6552                                           BEQ            MOVEM_A6_reg_list_out
000053CC  6600 0002               6553                                           BNE            MOVEM_reg_mem_A7
000053D0                          6554  
000053D0  2A18                    6555  MOVEM_reg_mem_A7                         MOVE.L         (A0)+,D5                                ;pull the register list
000053D2  4241                    6556                                           CLR            D1
000053D4  227C 00000001           6557                                           MOVE.L         #mask_MOVEM_reg_mem_A7,A1                     ;load mask into register
000053DA  B3FC 00000001           6558                                           CMP.L          #match_MOVEM_reg_mem_A7,A1                    ;check to see if the A0 is on the list
000053E0  6700 009C               6559                                           BEQ            MOVEM_A7_reg_list_out
000053E4  6600 00A4               6560                                           BNE            MOVEM_determine_second_operand
000053E8                          6561  
000053E8                          6562  ;------------------------------------------------------Register List Output----------------------------------------
000053E8  22FC 0000691B           6563  MOVEM_D0_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
000053EE  4EB8 5280               6564                                          JSR             MOVEM_reg_mem_D1            ;go check D1
000053F2                          6565                                          
000053F2  22FC 0000691B           6566  MOVEM_D1_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
000053F8  4EB8 5298               6567                                          JSR             MOVEM_reg_mem_D2            ;go check D2
000053FC                          6568  
000053FC  22FC 0000691B           6569  MOVEM_D2_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005402  4EB8 52B0               6570                                          JSR             MOVEM_reg_mem_D3            ;go check D3
00005406                          6571  
00005406  22FC 0000691B           6572  MOVEM_D3_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000540C  4EB8 52C8               6573                                          JSR             MOVEM_reg_mem_D4            ;go check D4
00005410                          6574  
00005410  22FC 0000691B           6575  MOVEM_D4_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005416  4EB8 52E0               6576                                          JSR             MOVEM_reg_mem_D5            ;go check D5
0000541A                          6577  
0000541A  22FC 0000691B           6578  MOVEM_D5_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005420  4EB8 52F8               6579                                          JSR             MOVEM_reg_mem_D6            ;go check D6
00005424                          6580  
00005424  22FC 0000691B           6581  MOVEM_D6_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
0000542A  4EB8 5310               6582                                          JSR             MOVEM_reg_mem_D7            ;go check D7
0000542E                          6583  
0000542E  22FC 0000691B           6584  MOVEM_D7_reg_list_out                   MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005434  4EB8 5328               6585                                          JSR             MOVEM_reg_mem_A0            ;go check A0
00005438                          6586  
00005438  22FC 00006933           6587  MOVEM_A0_reg_list_out                   MOVE.L          #ea_A0,(A1)+                ;load the register into A1
0000543E  4EB8 5340               6588                                          JSR             MOVEM_reg_mem_A1            ;go check D1
00005442                          6589                                          
00005442  22FC 00006936           6590  MOVEM_A1_reg_list_out                   MOVE.L          #ea_A1,(A1)+                ;load the register into A1
00005448  4EB8 5358               6591                                          JSR             MOVEM_reg_mem_A2            ;go check D2
0000544C                          6592  
0000544C  22FC 00006939           6593  MOVEM_A2_reg_list_out                   MOVE.L          #ea_A2,(A1)+                ;load the register into A1
00005452  4EB8 5370               6594                                          JSR             MOVEM_reg_mem_A3            ;go check D3
00005456                          6595  
00005456  22FC 0000693C           6596  MOVEM_A3_reg_list_out                   MOVE.L          #ea_A3,(A1)+                ;load the register into A1
0000545C  4EB8 5388               6597                                          JSR             MOVEM_reg_mem_A4            ;go check D4
00005460                          6598  
00005460  22FC 0000693F           6599  MOVEM_A4_reg_list_out                   MOVE.L          #ea_A4,(A1)+                ;load the register into A1
00005466  4EB8 53A0               6600                                          JSR             MOVEM_reg_mem_A5            ;go check D5
0000546A                          6601  
0000546A  22FC 00006942           6602  MOVEM_A5_reg_list_out                   MOVE.L          #ea_A5,(A1)+                ;load the register into A1
00005470  4EB8 53B8               6603                                          JSR             MOVEM_reg_mem_A6            ;go check D6
00005474                          6604  
00005474  22FC 00006945           6605  MOVEM_A6_reg_list_out                   MOVE.L          #ea_A6,(A1)+                ;load the register into A1
0000547A  4EB8 53D0               6606                                          JSR             MOVEM_reg_mem_A7            ;go check D7
0000547E                          6607  
0000547E  22FC 00006948           6608  MOVEM_A7_reg_list_out                   MOVE.L          #ea_A7,(A1)+                ;load the register into A1
00005484  4EB9 00005696           6609                                          JSR             MOVEM_determine_second_op   ;go figure out the second operand
0000548A                          6610  
0000548A                          6611  
0000548A  4241                    6612  MOVEM_determine_second_operand          CLR             D1
0000548C  C2BC 0000003C           6613                                          AND.L           #mask_MOVEM_ea_mode,D1                          ;move the mask to D1
00005492                          6614  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00005492  B2BC 00000010           6615  MOVEM_add_reg_indir              CMP.L             #match_MOVEM_An_indir,D1                        ;check to see if mode is add reg indir
00005498  6600 0006               6616                                   BNE               MOVEM_add_reg_indir_predec                    ;if not, go check add reg indir predec 
0000549C  6700 003A               6617                                   BEQ               MOVEM_An_indir_reg                            ;if equal go figure out the register           
000054A0                          6618             
000054A0  B2BC 00000020           6619  MOVEM_add_reg_indir_predec       CMP.L             #match_MOVEM_An_indir_pdec,D1                  ;check to see if mode is add reg indor w/ postinc
000054A6  6600 0006               6620                                   BNE               MOVEM_abs_add_word                          ;if not go check add reg indir/predec
000054AA  6700 00FC               6621                                   BEQ               MOVEM_An_indir_predec                          ;if equal go figure out the register
000054AE                          6622                        
000054AE                          6623  
000054AE  C4BC 00000038           6624  MOVEM_abs_add_word               AND.L             #mask_MOVEM_abs_add,D2                        ;load mask to determine if abs add word or long
000054B4                          6625                                   
000054B4  B4BC 00000038           6626                                   CMP.L             #match_MOVEM_abs_add_word,D2                  ;check if abs add word
000054BA  2A18                    6627                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000054BC  6600 0006               6628                                   BNE               MOVEM_abs_add_long                                  ;if not go check abs add long
000054C0  6700 01B6               6629                                   BEQ               MOVEM_abs_add_word_out                              ;if equal go to output
000054C4                          6630    
000054C4  B4BC 00000039           6631  MOVEM_abs_add_long               CMP.L             #match_MOVEM_abs_add_long,D2                  ;check to see if abs add long
000054CA  6700 01BA               6632                                   BEQ               MOVEM_abs_add_long_out                              ;if equal go to output
000054CE  6600 0694               6633                                   BNE               MOVEM_ERROR                                         ;if not equal go to error mesage MOVE routine
000054D2                          6634  
000054D2                          6635  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000054D2                          6636                                   
000054D2  C4BC 0000003F           6637                                   AND.L           #mask_MOVEM_ea_reg_and_mode,D2                       ;load the mask into D2 for the mode and the register
000054D8                          6638  ;------------------Address Register Indirect-----------------------
000054D8  B4BC 00000010           6639  MOVEM_An_indir_reg                CMP.L          #match_MOVEM_An_indir_r0,D2              ;check reg is equal to 0
000054DE  6600 0006               6640                                   BNE             MOVEM_An_indir_r1                           ;if not try reg 1
000054E2  6700 0064               6641                                   BEQ             MOVEM_An_indir_r0_out                       ;if equal go to output MOVEroutine
000054E6                          6642  
000054E6  B4BC 00000011           6643  MOVEM_An_indir_r1                 CMP.L           #match_MOVEM_An_indir_r1,D2              ;check reg is equal to 1
000054EC  6600 0006               6644                                   BNE             MOVEM_An_indir_r2                           ;if not try reg 2
000054F0  6700 0062               6645                                   BEQ             MOVEM_An_indir_r1_out                       ;if equal go to output MOVEroutine
000054F4                          6646  
000054F4  B4BC 00000012           6647  MOVEM_An_indir_r2                 CMP.L           #match_MOVEM_An_indir_r2,D2              ;check reg is equal to 2
000054FA  6600 0006               6648                                   BNE             MOVEM_An_indir_r3                           ;if not try reg 3
000054FE  6700 0060               6649                                   BEQ             MOVEM_An_indir_r2_out                       ;if equal go to output MOVEroutine
00005502                          6650  
00005502  B4BC 00000013           6651  MOVEM_An_indir_r3                 CMP.L           #match_MOVEM_An_indir_r3,D2              ;check reg is equal to 3
00005508  6600 0006               6652                                   BNE             MOVEM_An_indir_r4                           ;if not try reg 4
0000550C  6700 005E               6653                                   BEQ             MOVEM_An_indir_r3_out                       ;if equal go to output MOVEroutine
00005510                          6654      
00005510  B4BC 00000014           6655  MOVEM_An_indir_r4                 CMP.L           #match_MOVEM_An_indir_r4,D2              ;check reg is equal to 4
00005516  6600 0006               6656                                   BNE             MOVEM_An_indir_r5                           ;if not try reg 5
0000551A  6700 005C               6657                                   BEQ             MOVEM_An_indir_r4_out                       ;if equal go to output MOVEroutine
0000551E                          6658          
0000551E  B4BC 00000015           6659  MOVEM_An_indir_r5                 CMP.L           #match_MOVEM_An_indir_r5,D2              ;check reg is equal to 5
00005524  6600 0006               6660                                   BNE             MOVEM_An_indir_r6                           ;if not try reg 6
00005528  6700 005A               6661                                   BEQ             MOVEM_An_indir_r5_out                       ;if equal go to output MOVEroutine
0000552C                          6662  
0000552C  B4BC 00000016           6663  MOVEM_An_indir_r6                 CMP.L           #match_MOVEM_An_indir_r6,D2              ;check reg is equal to 6
00005532  6600 0006               6664                                   BNE             MOVEM_An_indir_r7                           ;if not try reg 7
00005536  6700 0058               6665                                   BEQ             MOVEM_An_indir_r6_out                       ;if equal go to output MOVEroutine
0000553A                          6666  
0000553A  B4BC 00000017           6667  MOVEM_An_indir_r7                 CMP.L           #match_MOVEM_An_indir_r7,D2              ;check reg is equal to 7
00005540  6700 005A               6668                                   BEQ             MOVEM_An_indir_r7_out                       ;if equal go to output MOVEroutine
00005544  6600 061E               6669                                   BNE             MOVEM_ERROR                                   :if not equal to an addresssing mode, pritn error
00005548                          6670  
00005548                          6671  ;--------------------Address Register Indirect Output-----------------------
00005548  227C 0000695B           6672  MOVEM_An_indir_r0_out                  MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
0000554E  4EB9 00005696           6673                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005554                          6674  
00005554  227C 00006960           6675  MOVEM_An_indir_r1_out                  MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
0000555A  4EB9 00005696           6676                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005560                          6677  
00005560  227C 00006965           6678  MOVEM_An_indir_r2_out                  MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
00005566  4EB9 00005696           6679                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000556C                          6680  
0000556C  227C 0000696A           6681  MOVEM_An_indir_r3_out                  MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
00005572  4EB9 00005696           6682                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005578                          6683  
00005578  227C 0000696F           6684  MOVEM_An_indir_r4_out                  MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
0000557E  4EB9 00005696           6685                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005584                          6686  
00005584  227C 00006974           6687  MOVEM_An_indir_r5_out                  MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
0000558A  4EB9 00005696           6688                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005590                          6689  
00005590  227C 00006979           6690  MOVEM_An_indir_r6_out                  MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
00005596  4EB9 00005696           6691                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000559C                          6692                                          
0000559C  227C 0000697E           6693  MOVEM_An_indir_r7_out                  MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
000055A2  4EB9 00005696           6694                                          JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000055A8                          6695  
000055A8                          6696  ;------------------Address Register Indirect with Pre Decrement-----------------------
000055A8  B4BC 00000020           6697  MOVEM_An_indir_predec                       CMP.L      #match_MOVEM_An_indir_pdec_r0,D2       ;check reg is equal to 0
000055AE  6600 0006               6698                                              BNE        MOVEM_An_indir_pdec_r1                      ;if not try reg 1
000055B2  6700 0064               6699                                              BEQ        MOVEM_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
000055B6                          6700  
000055B6  B4BC 00000021           6701  MOVEM_An_indir_pdec_r1                      CMP.L      #match_MOVEM_An_indir_pdec_r1,D2       ;check reg is equal to 1
000055BC  6600 0006               6702                                              BNE        MOVEM_An_indir_pdec_r2                      ;if not try reg 2
000055C0  6700 0062               6703                                              BEQ        MOVEM_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
000055C4                          6704  
000055C4  B4BC 00000022           6705  MOVEM_An_indir_pdec_r2                      CMP.L      #match_MOVEM_An_indir_pdec_r2,D2       ;check reg is equal to 2
000055CA  6600 0006               6706                                              BNE        MOVEM_An_indir_pdec_r3                      ;if not try reg 3
000055CE  6700 0060               6707                                              BEQ        MOVEM_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
000055D2                          6708  
000055D2  B4BC 00000023           6709  MOVEM_An_indir_pdec_r3                      CMP.L      #match_MOVEM_An_indir_pdec_r3,D2       ;check reg is equal to 3
000055D8  6600 0006               6710                                              BNE        MOVEM_An_indir_pdec_r4                      ;if not try reg 4
000055DC  6700 005E               6711                                              BEQ        MOVEM_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
000055E0                          6712  
000055E0  B4BC 00000024           6713  MOVEM_An_indir_pdec_r4                      CMP.L      #match_MOVEM_An_indir_pdec_r4,D2       ;check reg is equal to 4
000055E6  6600 0006               6714                                              BNE        MOVEM_An_indir_pdec_r5                      ;if not try reg 5
000055EA  6700 005C               6715                                              BEQ        MOVEM_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
000055EE                          6716  
000055EE  B4BC 00000025           6717  MOVEM_An_indir_pdec_r5                      CMP.L      #match_MOVEM_An_indir_pdec_r5,D2       ;check reg is equal to 5
000055F4  6600 0006               6718                                              BNE        MOVEM_An_indir_pdec_r6                     ;if not try reg 6
000055F8  6700 005A               6719                                              BEQ        MOVEM_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
000055FC                          6720  
000055FC  B4BC 00000026           6721  MOVEM_An_indir_pdec_r6                      CMP.L      #match_MOVEM_An_indir_pdec_r6,D2       ;check reg is equal to 6
00005602  6600 0006               6722                                              BNE        MOVEM_An_indir_pdec_r7                     ;if not try reg 7
00005606  6700 0058               6723                                              BEQ        MOVEM_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
0000560A                          6724  
0000560A  B4BC 00000027           6725  MOVEM_An_indir_pdec_r7                      CMP.L      #match_MOVEM_An_indir_pdec_r7,D2       ;check reg is equal to 7
00005610  6700 005A               6726                                              BEQ        MOVEM_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
00005614  6600 054E               6727                                              BNE        MOVEM_ERROR                                    :if not equal to an addresssing mode, pritn error
00005618                          6728  
00005618                          6729  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00005618  227C 000069B3           6730  MOVEM_An_indir_pdec_r0_out                 MOVE.L           #ea_indir_predec_A0,A1                        ;load string constant into A1
0000561E  4EB9 00005696           6731                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005624                          6732                                              
00005624  227C 000069B9           6733  MOVEM_An_indir_pdec_r1_out                 MOVE.L           #ea_indir_predec_A1,A1                      ;load string constant into A1
0000562A  4EB9 00005696           6734                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005630                          6735  
00005630  227C 000069BF           6736  MOVEM_An_indir_pdec_r2_out                 MOVE.L           #ea_indir_predec_A2,A1                      ;load string constant into A1
00005636  4EB9 00005696           6737                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000563C                          6738  
0000563C  227C 000069C5           6739  MOVEM_An_indir_pdec_r3_out                 MOVE.L           #ea_indir_predec_A3,A1                      ;load string constant into A1
00005642  4EB9 00005696           6740                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005648                          6741  
00005648  227C 000069CB           6742  MOVEM_An_indir_pdec_r4_out                 MOVE.L           #ea_indir_predec_A4,A1                      ;load string constant into A1
0000564E  4EB9 00005696           6743                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005654                          6744  
00005654  227C 000069D1           6745  MOVEM_An_indir_pdec_r5_out                 MOVE.L           #ea_indir_predec_A5,A1                      ;load string constant into A1
0000565A  4EB9 00005696           6746                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005660                          6747  
00005660  227C 000069D7           6748  MOVEM_An_indir_pdec_r6_out                 MOVE.L           #ea_indir_predec_A6,A1                      ;load string constant into A1
00005666  4EB9 00005696           6749                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000566C                          6750  
0000566C  227C 000069DD           6751  MOVEM_An_indir_pdec_r7_out                 MOVE.L           #ea_indir_predec_A7,A1                      ;load string constant into A1
00005672  4EB9 00005696           6752                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005678                          6753          
00005678                          6754  ;------------------Absolute Addressing Output-----------------------
00005678  22FC 000069ED           6755  MOVEM_abs_add_word_out                MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000567E  22C5                    6756                                        MOVE.L      D5,(A1)+                           ;load address                  
00005680  4CDF 7CBE               6757                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005684  4E75                    6758                                        RTS                                            :return to MOVEroutine
00005686                          6759                                             
00005686                          6760  
00005686  2A18                    6761  MOVEM_abs_add_long_out                MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00005688  22FC 000069ED           6762                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000568E  22C5                    6763                                        MOVE.L      D5,(A1)+                           ;load address                  
00005690  4CDF 7CBE               6764                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005694  4E75                    6765                                        RTS                                            :return to MOVEroutine
00005696                          6766                                              ;return to MOVEroutine                                            
00005696                          6767  
00005696  4241                    6768  MOVEM_determine_second_op         CLR             D1
00005698                          6769  
00005698  C2BC 0000003C           6770                                   AND.L             #mask_MOVEM_ea_mode,D1                          ;move the mask to D1
0000569E                          6771  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000569E  B2BC 00000010           6772  MOVEM_m2r_An_indir               CMP.L             #match_MOVEM_An_indir,D1                        ;check to see if mode is add reg indir
000056A4  6600 0006               6773                                   BNE               MOVEM_m2r_An_indir_postinc                    ;if not, go check add reg indir predec 
000056A8  6700 003A               6774                                   BEQ               MOVEM_m2r_An_indir_reg                            ;if equal go figure out the register           
000056AC                          6775                                   
000056AC  B2BC 00000010           6776  MOVEM_m2r_An_indir_postinc       CMP.L             #match_MOVEM_An_indir_pinc,D1              ;check to see if mode is add reg indir w/predec
000056B2  6600 0006               6777                                   BNE               MOVEM_m2r_abs_add_word                                  ;if not go check abs add word
000056B6  6700 00EC               6778                                   BEQ               MOVEM_m2r_An_indir_pinc_reg                          ;if equal go figure out the register
000056BA                          6779  
000056BA  C4BC 00000038           6780  MOVEM_m2r_abs_add_word           AND.L             #mask_MOVEM_abs_add,D2                        ;load mask to determine if abs add word or long
000056C0                          6781                                   
000056C0  B4BC 00000038           6782                                   CMP.L             #match_MOVEM_abs_add_word,D2                  ;check if abs add word
000056C6  2A18                    6783                                   MOVE.L            (A0)+,D5                                      ;pull the next word instruction that holds the address
000056C8  6600 0006               6784                                   BNE               MOVEM_m2r_abs_add_long                                  ;if not go check abs add long
000056CC  6700 0256               6785                                   BEQ               MOVEM_m2r_abs_add_word_out                              ;if equal go to output
000056D0                          6786    
000056D0  B4BC 00000039           6787  MOVEM_m2r_abs_add_long           CMP.L             #match_MOVEM_abs_add_long,D2                  ;check to see if abs add long
000056D6  6700 025A               6788                                   BEQ               MOVEM_m2r_abs_add_long_out                              ;if equal go to output
000056DA  6600 0488               6789                                   BNE               MOVEM_ERROR                                         ;if not equal go to error mesage MOVE routine
000056DE                          6790  
000056DE                          6791  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000056DE                          6792                                   
000056DE  C4BC 0000003F           6793                                   AND.L              #mask_MOVEM_ea_reg_and_mode,D2             ;load the mask into D2 for the mode and the register
000056E4                          6794  ;------------------Address Register Indirect-----------------------
000056E4  B4BC 00000010           6795  MOVEM_m2r_An_indir_reg          CMP.L          #match_MOVEM_An_indir_r0,D2              ;check reg is equal to 0
000056EA  6600 0006               6796                                   BNE             MOVEM_m2r_An_indir_r1                           ;if not try reg 1
000056EE  6700 0064               6797                                   BEQ             MOVEM_m2r_An_indir_r0_out                       ;if equal go to output MOVEroutine
000056F2                          6798  
000056F2  B4BC 00000011           6799  MOVEM_m2r_An_indir_r1           CMP.L           #match_MOVEM_An_indir_r1,D2              ;check reg is equal to 1
000056F8  6600 0006               6800                                   BNE             MOVEM_m2r_An_indir_r2                           ;if not try reg 2
000056FC  6700 0060               6801                                   BEQ             MOVEM_m2r_An_indir_r1_out                       ;if equal go to output MOVEroutine
00005700                          6802  
00005700  B4BC 00000012           6803  MOVEM_m2r_An_indir_r2           CMP.L           #match_MOVEM_An_indir_r2,D2              ;check reg is equal to 2
00005706  6600 0006               6804                                   BNE             MOVEM_m2r_An_indir_r3                           ;if not try reg 3
0000570A  6700 005C               6805                                   BEQ             MOVEM_m2r_An_indir_r2_out                       ;if equal go to output MOVEroutine
0000570E                          6806  
0000570E  B4BC 00000013           6807  MOVEM_m2r_An_indir_r3           CMP.L           #match_MOVEM_An_indir_r3,D2              ;check reg is equal to 3
00005714  6600 0006               6808                                   BNE             MOVEM_m2r_An_indir_r4                           ;if not try reg 4
00005718  6700 0058               6809                                   BEQ             MOVEM_m2r_An_indir_r3_out                       ;if equal go to output MOVEroutine
0000571C                          6810      
0000571C  B4BC 00000014           6811  MOVEM_m2r_An_indir_r4           CMP.L           #match_MOVEM_An_indir_r4,D2              ;check reg is equal to 4
00005722  6600 0006               6812                                   BNE             MOVEM_m2r_An_indir_r5                           ;if not try reg 5
00005726  6700 0054               6813                                   BEQ             MOVEM_m2r_An_indir_r4_out                       ;if equal go to output MOVEroutine
0000572A                          6814          
0000572A  B4BC 00000015           6815  MOVEM_m2r_An_indir_r5           CMP.L           #match_MOVEM_An_indir_r5,D2              ;check reg is equal to 5
00005730  6600 0006               6816                                   BNE             MOVEM_m2r_An_indir_r6                           ;if not try reg 6
00005734  6700 0050               6817                                   BEQ             MOVEM_m2r_An_indir_r5_out                       ;if equal go to output MOVEroutine
00005738                          6818  
00005738  B4BC 00000016           6819  MOVEM_m2r_An_indir_r6           CMP.L           #match_MOVEM_An_indir_r6,D2              ;check reg is equal to 6
0000573E  6600 0006               6820                                   BNE             MOVEM_m2r_An_indir_r7                           ;if not try reg 7
00005742  6700 004C               6821                                   BEQ             MOVEM_m2r_An_indir_r6_out                       ;if equal go to output MOVEroutine
00005746                          6822  
00005746  B4BC 00000017           6823  MOVEM_m2r_An_indir_r7           CMP.L           #match_MOVEM_An_indir_r7,D2              ;check reg is equal to 7
0000574C  6700 004C               6824                                   BEQ             MOVEM_m2r_An_indir_r7_out                       ;if equal go to output MOVEroutine
00005750  6600 0412               6825                                   BNE             MOVEM_ERROR                                   :if not equal to an addresssing mode, pritn error
00005754                          6826  
00005754                          6827  ;--------------------Address Register Indirect Output-----------------------
00005754  227C 0000695B           6828  MOVEM_m2r_An_indir_r0_out                  MOVE.L           #ea_indir_A0,A1                     ;load string constant into A1
0000575A  4EB8 5696               6829                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000575E                          6830  
0000575E  227C 00006960           6831  MOVEM_m2r_An_indir_r1_out                  MOVE.L           #ea_indir_A1,A1                   ;load string constant into A1
00005764  4EB8 5696               6832                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005768                          6833  
00005768  227C 00006965           6834  MOVEM_m2r_An_indir_r2_out                  MOVE.L           #ea_indir_A2,A1                   ;load string constant into A1
0000576E  4EB8 5696               6835                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005772                          6836  
00005772  227C 0000696A           6837  MOVEM_m2r_An_indir_r3_out                  MOVE.L           #ea_indir_A3,A1                   ;load string constant into A1
00005778  4EB8 5696               6838                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000577C                          6839  
0000577C  227C 0000696F           6840  MOVEM_m2r_An_indir_r4_out                  MOVE.L           #ea_indir_A4,A1                   ;load string constant into A1
00005782  4EB8 5696               6841                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005786                          6842  
00005786  227C 00006974           6843  MOVEM_m2r_An_indir_r5_out                  MOVE.L           #ea_indir_A5,A1                   ;load string constant into A1
0000578C  4EB8 5696               6844                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005790                          6845  
00005790  227C 00006979           6846  MOVEM_m2r_An_indir_r6_out                  MOVE.L           #ea_indir_A6,A1                   ;load string constant into A1
00005796  4EB8 5696               6847                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000579A                          6848                                          
0000579A  227C 0000697E           6849  MOVEM_m2r_An_indir_r7_out                  MOVE.L           #ea_indir_A7,A1                   ;load string constant into A1
000057A0  4EB8 5696               6850                                              JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000057A4                          6851  
000057A4                          6852  ;------------------Address Register Indirect with Post Increment-----------------------
000057A4  B4BC 00000018           6853  MOVEM_m2r_An_indir_pinc_reg                 CMP.L      #match_MOVEM_An_indir_pinc_r0,D2        ;check reg is equal to 0
000057AA  6600 0006               6854                                              BNE        MOVEM_m2r_An_indir_pinc_r1                      ;if not try reg 1
000057AE  6700 0064               6855                                              BEQ        MOVEM_m2r_An_indir_pinc_r0_out               ;if equal go to output MOVEroutine
000057B2                          6856  
000057B2  B4BC 00000019           6857  MOVEM_m2r_An_indir_pinc_r1                  CMP.L      #match_MOVEM_An_indir_pinc_r1,D2        ;check reg is equal to 1
000057B8  6600 0006               6858                                              BNE        MOVEM_m2r_An_indir_pinc_r2                      ;if not try reg 2
000057BC  6700 0060               6859                                              BEQ        MOVEM_m2r_An_indir_pinc_r1_out               ;if equal go to output MOVEroutine
000057C0                          6860  
000057C0  B4BC 0000001A           6861  MOVEM_m2r_An_indir_pinc_r2                  CMP.L      #match_MOVEM_An_indir_pinc_r2,D2        ;check reg is equal to 2
000057C6  6600 0006               6862                                              BNE        MOVEM_m2r_An_indir_pinc_r3                      ;if not try reg 3
000057CA  6700 005C               6863                                              BEQ        MOVEM_m2r_An_indir_pinc_r2_out               ;if equal go to output MOVEroutine
000057CE                          6864  
000057CE  B4BC 0000001B           6865  MOVEM_m2r_An_indir_pinc_r3                  CMP.L      #match_MOVEM_An_indir_pinc_r3,D2        ;check reg is equal to 3
000057D4  6600 0006               6866                                              BNE        MOVEM_m2r_An_indir_pinc_r4                      ;if not try reg 4
000057D8  6700 0058               6867                                              BEQ        MOVEM_m2r_An_indir_pinc_r3_out               ;if equal go to output MOVEroutine
000057DC                          6868   
000057DC  B4BC 0000001C           6869  MOVEM_m2r_An_indir_pinc_r4                  CMP.L      #match_MOVEM_An_indir_pinc_r4,D2        ;check reg is equal to 4
000057E2  6600 0006               6870                                              BNE        MOVEM_m2r_An_indir_pinc_r5                      ;if not try reg 5
000057E6  6700 0054               6871                                              BEQ        MOVEM_m2r_An_indir_pinc_r4_out               ;if equal go to output MOVEroutine
000057EA                          6872  
000057EA  B4BC 0000001D           6873  MOVEM_m2r_An_indir_pinc_r5                  CMP.L      #match_MOVEM_An_indir_pinc_r5,D2        ;check reg is equal to 5
000057F0  6600 0006               6874                                              BNE        MOVEM_m2r_An_indir_pinc_r6                      ;if not try reg 6
000057F4  6700 0050               6875                                              BEQ        MOVEM_m2r_An_indir_pinc_r5_out               ;if equal go to output MOVEroutine
000057F8                          6876  
000057F8  B4BC 0000001E           6877  MOVEM_m2r_An_indir_pinc_r6                  CMP.L      #match_MOVEM_An_indir_pinc_r6,D2         ;check reg is equal to 6
000057FE  6600 0006               6878                                              BNE        MOVEM_m2r_An_indir_pinc_r7                        ;if not try reg 7
00005802  6700 004C               6879                                              BEQ        MOVEM_m2r_An_indir_pinc_r6_out                    ;if equal go to output MOVEroutine
00005806                          6880  
00005806  B4BC 0000001F           6881  MOVEM_m2r_An_indir_pinc_r7                  CMP.L      #match_MOVEM_An_indir_pinc_r7,D2         ;check reg is equal to 7
0000580C  6700 004C               6882                                              BEQ        MOVEM_m2r_An_indir_pinc_r7_out                    ;if equal go to output MOVEroutine
00005810  6600 0352               6883                                              BNE        MOVEM_ERROR                                        :if not equal to an addresssing mode, pritn error
00005814                          6884  
00005814                          6885  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00005814  227C 00006983           6886  MOVEM_m2r_An_indir_pinc_r0_out              MOVE.L          #ea_indir_postinc_A0,A1                           ;load string constant into A1
0000581A  4EB8 5696               6887                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000581E                          6888  
0000581E  227C 00006989           6889  MOVEM_m2r_An_indir_pinc_r1_out              MOVE.L          #ea_indir_postinc_A1,A1                           ;load string constant into A1
00005824  4EB8 5696               6890                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005828                          6891  
00005828  227C 0000698F           6892  MOVEM_m2r_An_indir_pinc_r2_out              MOVE.L          #ea_indir_postinc_A2,A1                           ;load string constant into A1
0000582E  4EB8 5696               6893                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005832                          6894  
00005832  227C 00006995           6895  MOVEM_m2r_An_indir_pinc_r3_out              MOVE.L          #ea_indir_postinc_A3,A1                           ;load string constant into A1
00005838  4EB8 5696               6896                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000583C                          6897  
0000583C  227C 0000699B           6898  MOVEM_m2r_An_indir_pinc_r4_out              MOVE.L          #ea_indir_postinc_A4,A1                           ;load string constant into A1
00005842  4EB8 5696               6899                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005846                          6900  
00005846  227C 000069A1           6901  MOVEM_m2r_An_indir_pinc_r5_out              MOVE.L          #ea_indir_postinc_A5,A1                           ;load string constant into A1
0000584C  4EB8 5696               6902                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005850                          6903  
00005850  227C 000069A7           6904  MOVEM_m2r_An_indir_pinc_r6_out              MOVE.L          #ea_indir_postinc_A6,A1                           ;load string constant into A1
00005856  4EB8 5696               6905                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000585A                          6906  
0000585A  227C 000069AD           6907  MOVEM_m2r_An_indir_pinc_r7_out              MOVE.L          #ea_indir_postinc_A7,A1                           ;load string constant into A1
00005860  4EB8 5696               6908                                               JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005864                          6909  
00005864                          6910  ;------------------Address Register Indirect with Pre Decrement-----------------------
00005864  B4BC 00000020           6911  MOVE_m2r_An_indir_predec                    CMP.L      #match_MOVEM_An_indir_pdec_r0,D2       ;check reg is equal to 0
0000586A  6600 0006               6912                                              BNE        MOVEM_m2r_An_indir_pdec_r1                      ;if not try reg 1
0000586E  6700 0064               6913                                              BEQ        MOVEM_m2r_An_indir_pdec_r0_out               ;if equal go to output MOVEroutine
00005872                          6914  
00005872  B4BC 00000021           6915  MOVEM_m2r_An_indir_pdec_r1                  CMP.L      #match_MOVEM_An_indir_pdec_r1,D2       ;check reg is equal to 1
00005878  6600 0006               6916                                              BNE        MOVEM_m2r_An_indir_pdec_r2                      ;if not try reg 2
0000587C  6700 0060               6917                                              BEQ        MOVEM_m2r_An_indir_pdec_r1_out               ;if equal go to output MOVEroutine
00005880                          6918  
00005880  B4BC 00000022           6919  MOVEM_m2r_An_indir_pdec_r2                  CMP.L      #match_MOVEM_An_indir_pdec_r2,D2       ;check reg is equal to 2
00005886  6600 0006               6920                                              BNE        MOVEM_m2r_An_indir_pdec_r3                      ;if not try reg 3
0000588A  6700 005C               6921                                              BEQ        MOVEM_m2r_An_indir_pdec_r2_out               ;if equal go to output MOVEroutine
0000588E                          6922  
0000588E  B4BC 00000023           6923  MOVEM_m2r_An_indir_pdec_r3                  CMP.L      #match_MOVEM_An_indir_pdec_r3,D2       ;check reg is equal to 3
00005894  6600 0006               6924                                              BNE        MOVEM_m2r_An_indir_pdec_r4                      ;if not try reg 4
00005898  6700 0058               6925                                              BEQ        MOVEM_m2r_An_indir_pdec_r3_out               ;if equal go to output MOVEroutine
0000589C                          6926  
0000589C  B4BC 00000024           6927  MOVEM_m2r_An_indir_pdec_r4                  CMP.L      #match_MOVEM_An_indir_pdec_r4,D2       ;check reg is equal to 4
000058A2  6600 0006               6928                                              BNE        MOVEM_m2r_An_indir_pdec_r5                      ;if not try reg 5
000058A6  6700 0054               6929                                              BEQ        MOVEM_m2r_An_indir_pdec_r4_out               ;if equal go to output MOVEroutine
000058AA                          6930  
000058AA  B4BC 00000025           6931  MOVEM_m2r_An_indir_pdec_r5                  CMP.L      #match_MOVEM_An_indir_pdec_r5,D2       ;check reg is equal to 5
000058B0  6600 0006               6932                                              BNE        MOVEM_m2r_An_indir_pdec_r6                     ;if not try reg 6
000058B4  6700 0050               6933                                              BEQ        MOVEM_m2r_An_indir_pdec_r5_out               ;if equal go to output MOVEroutine
000058B8                          6934  
000058B8  B4BC 00000026           6935  MOVEM_m2r_An_indir_pdec_r6                  CMP.L      #match_MOVEM_An_indir_pdec_r6,D2       ;check reg is equal to 6
000058BE  6600 0006               6936                                              BNE        MOVEM_m2r_An_indir_pdec_r7                     ;if not try reg 7
000058C2  6700 004C               6937                                              BEQ        MOVEM_m2r_An_indir_pdec_r6_out               ;if equal go to output MOVEroutine
000058C6                          6938  
000058C6  B4BC 00000027           6939  MOVEM_m2r_An_indir_pdec_r7                  CMP.L      #match_MOVEM_An_indir_pdec_r7,D2       ;check reg is equal to 7
000058CC  6700 004C               6940                                              BEQ        MOVEM_m2r_An_indir_pdec_r7_out               ;if equal go to output MOVEroutine
000058D0  6600 0292               6941                                              BNE        MOVEM_ERROR                                    :if not equal to an addresssing mode, pritn error
000058D4                          6942  
000058D4                          6943  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000058D4  227C 000069B3           6944  MOVEM_m2r_An_indir_pdec_r0_out                  MOVE.L          #ea_indir_predec_A0,A1                        ;load string constant into A1
000058DA  4EB8 5696               6945                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000058DE                          6946                                              
000058DE  227C 000069B9           6947  MOVEM_m2r_An_indir_pdec_r1_out                  MOVE.L          #ea_indir_predec_A1,A1                      ;load string constant into A1
000058E4  4EB8 5696               6948                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000058E8                          6949  
000058E8  227C 000069BF           6950  MOVEM_m2r_An_indir_pdec_r2_out                  MOVE.L          #ea_indir_predec_A2,A1                      ;load string constant into A1
000058EE  4EB8 5696               6951                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000058F2                          6952  
000058F2  227C 000069C5           6953  MOVEM_m2r_An_indir_pdec_r3_out                  MOVE.L          #ea_indir_predec_A3,A1                      ;load string constant into A1
000058F8  4EB8 5696               6954                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
000058FC                          6955  
000058FC  227C 000069CB           6956  MOVEM_m2r_An_indir_pdec_r4_out                  MOVE.L          #ea_indir_predec_A4,A1                      ;load string constant into A1
00005902  4EB8 5696               6957                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005906                          6958  
00005906  227C 000069D1           6959  MOVEM_m2r_An_indir_pdec_r5_out                  MOVE.L          #ea_indir_predec_A5,A1                      ;load string constant into A1
0000590C  4EB8 5696               6960                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005910                          6961  
00005910  227C 000069D7           6962  MOVEM_m2r_An_indir_pdec_r6_out                  MOVE.L          #ea_indir_predec_A6,A1                      ;load string constant into A1
00005916  4EB8 5696               6963                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
0000591A                          6964  
0000591A  227C 000069DD           6965  MOVEM_m2r_An_indir_pdec_r7_out                  MOVE.L          #ea_indir_predec_A7,A1                      ;load string constant into A1
00005920  4EB8 5696               6966                                                  JSR             MOVEM_determine_second_op                 ;jump to MOVEroutine to determine second operand
00005924                          6967          
00005924                          6968  ;------------------Absolute Addressing Output-----------------------
00005924  22FC 000069ED           6969  MOVEM_m2r_abs_add_word_out            MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000592A  22C5                    6970                                        MOVE.L      D5,(A1)+                           ;load address                  
0000592C  4CDF 7CBE               6971                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005930  4E75                    6972                                        RTS                                            :return to MOVEroutine
00005932                          6973                                              ;return to MOVEroutine
00005932                          6974                                             
00005932                          6975  
00005932  2A18                    6976  MOVEM_m2r_abs_add_long_out            MOVE.L      (A0)+,D5                           ;pull the next long instruction that holds the address
00005934  22FC 000069ED           6977                                        MOVE.L      #ea_$,(A1)+                         ;load $ for hex and increment A1
0000593A  22C5                    6978                                        MOVE.L      D5,(A1)+                           ;load address                  
0000593C  4CDF 7CBE               6979                                        MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005940  4E75                    6980                                        RTS                                            :return to MOVEroutine
00005942                          6981                                              ;return to MOVEroutine                                            
00005942                          6982  
00005942  4241                    6983  MOVEM_second_operand                     CLR            D1   
00005944                          6984  
00005944  2A18                    6985  MOVEM_m2r                                MOVE.L         (A0)+,D5                                ;pull the register list
00005946                          6986                                           
00005946  223C 00008000           6987                                           MOVE.L         #mask_MOVEM_reg_mem_D0,D1                     ;load mask into register
0000594C  B2BC 00008000           6988                                           CMP.L          #match_MOVEM_reg_mem_D0,D1                    ;check to see if the D0 is on the list
00005952  6700 016E               6989                                           BEQ            MOVEM_m2r_D0_reg_list_out
00005956  6600 0002               6990                                           BNE            MOVEM_m2r_D1
0000595A                          6991  
0000595A  2A18                    6992  MOVEM_m2r_D1                             MOVE.L         (A0)+,D5                                ;pull the register list
0000595C  4241                    6993                                           CLR            D1
0000595E  223C 00004000           6994                                           MOVE.L         #mask_MOVEM_reg_mem_D1,D1                     ;load mask into register
00005964  B2BC 00004000           6995                                           CMP.L          #match_MOVEM_reg_mem_D1,D1                    ;check to see if the D0 is on the list
0000596A  6700 0160               6996                                           BEQ            MOVEM_m2r_D1_reg_list_out
0000596E  6600 0002               6997                                           BNE            MOVEM_m2r_D2
00005972                          6998  
00005972  2A18                    6999  MOVEM_m2r_D2                             MOVE.L         (A0)+,D5                                ;pull the register list
00005974  4241                    7000                                           CLR            D1
00005976  223C 00002000           7001                                           MOVE.L         #mask_MOVEM_reg_mem_D2,D1                     ;load mask into register
0000597C  B2BC 00002000           7002                                           CMP.L          #match_MOVEM_reg_mem_D2,D1                    ;check to see if the D0 is on the list
00005982  6700 0152               7003                                           BEQ            MOVEM_m2r_D2_reg_list_out
00005986  6600 0002               7004                                           BNE            MOVEM_m2r_D3
0000598A                          7005  
0000598A  2A18                    7006  MOVEM_m2r_D3                             MOVE.L         (A0)+,D5                                ;pull the register list
0000598C  4241                    7007                                           CLR            D1
0000598E  223C 00001000           7008                                           MOVE.L         #mask_MOVEM_reg_mem_D3,D1                     ;load mask into register
00005994  B2BC 00001000           7009                                           CMP.L          #match_MOVEM_reg_mem_D3,D1                    ;check to see if the D0 is on the list
0000599A  6700 0144               7010                                           BEQ            MOVEM_m2r_D3_reg_list_out
0000599E  6600 0002               7011                                           BNE            MOVEM_m2r_D4
000059A2                          7012  
000059A2  2A18                    7013  MOVEM_m2r_D4                             MOVE.L         (A0)+,D5                                ;pull the register list
000059A4  4241                    7014                                           CLR            D1
000059A6  223C 00000800           7015                                           MOVE.L         #mask_MOVEM_reg_mem_D4,D1                     ;load mask into register
000059AC  B2BC 00000800           7016                                           CMP.L          #match_MOVEM_reg_mem_D4,D1                    ;check to see if the D0 is on the list
000059B2  6700 0136               7017                                           BEQ            MOVEM_m2r_D4_reg_list_out
000059B6  6600 0002               7018                                           BNE            MOVEM_m2r_D5
000059BA                          7019  
000059BA  2A18                    7020  MOVEM_m2r_D5                             MOVE.L         (A0)+,D5                                ;pull the register list
000059BC  4241                    7021                                           CLR            D1
000059BE  223C 00000400           7022                                           MOVE.L         #mask_MOVEM_reg_mem_D5,D1                     ;load mask into register
000059C4  B2BC 00000400           7023                                           CMP.L          #match_MOVEM_reg_mem_D5,D1                    ;check to see if the D0 is on the list
000059CA  6700 0128               7024                                           BEQ            MOVEM_m2r_D5_reg_list_out
000059CE  6600 0002               7025                                           BNE            MOVEM_m2r_D6
000059D2                          7026  
000059D2  2A18                    7027  MOVEM_m2r_D6                             MOVE.L         (A0)+,D5                                ;pull the register list
000059D4  4241                    7028                                           CLR            D1
000059D6  223C 00000200           7029                                           MOVE.L         #mask_MOVEM_reg_mem_D6,D1                     ;load mask into register
000059DC  B2BC 00000200           7030                                           CMP.L          #match_MOVEM_reg_mem_D6,D1                    ;check to see if the D0 is on the list
000059E2  6700 011A               7031                                           BEQ            MOVEM_m2r_D6_reg_list_out
000059E6  6600 0002               7032                                           BNE            MOVEM_m2r_D7
000059EA                          7033  
000059EA  2A18                    7034  MOVEM_m2r_D7                             MOVE.L         (A0)+,D5                                ;pull the register list
000059EC  4241                    7035                                           CLR            D1
000059EE  223C 00000100           7036                                           MOVE.L         #mask_MOVEM_reg_mem_D7,D1                     ;load mask into register
000059F4  B2BC 00000100           7037                                           CMP.L          #match_MOVEM_reg_mem_D7,D1                    ;check to see if the D0 is on the list
000059FA  6700 010C               7038                                           BEQ            MOVEM_m2r_D7_reg_list_out
000059FE  6600 0002               7039                                           BNE            MOVEM_m2r_A0
00005A02                          7040  
00005A02                          7041  
00005A02  2A18                    7042  MOVEM_m2r_A0                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A04  4241                    7043                                           CLR            D1
00005A06  227C 00000080           7044                                           MOVE.L         #mask_MOVEM_reg_mem_A0,A1                     ;load mask into register
00005A0C  B3FC 00000080           7045                                           CMP.L          #match_MOVEM_reg_mem_A0,A1                    ;check to see if the A0 is on the list
00005A12  6700 00FE               7046                                           BEQ            MOVEM_m2r_A0_reg_list_out
00005A16  6600 0002               7047                                           BNE            MOVEM_m2r_A1
00005A1A                          7048  
00005A1A  2A18                    7049  MOVEM_m2r_A1                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A1C  4241                    7050                                           CLR            D1
00005A1E  227C 00000040           7051                                           MOVE.L         #mask_MOVEM_reg_mem_A1,A1                     ;load mask into register
00005A24  B3FC 00000040           7052                                           CMP.L          #match_MOVEM_reg_mem_A1,A1                    ;check to see if the A0 is on the list
00005A2A  6700 00F0               7053                                           BEQ            MOVEM_m2r_A1_reg_list_out
00005A2E  6600 0002               7054                                           BNE            MOVEM_m2r_A2
00005A32                          7055  
00005A32  2A18                    7056  MOVEM_m2r_A2                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A34  4241                    7057                                           CLR            D1
00005A36  227C 00000020           7058                                           MOVE.L         #mask_MOVEM_reg_mem_A2,A1                     ;load mask into register
00005A3C  B3FC 00000020           7059                                           CMP.L          #match_MOVEM_reg_mem_A2,A1                    ;check to see if the A0 is on the list
00005A42  6700 00E2               7060                                           BEQ            MOVEM_m2r_A2_reg_list_out
00005A46  6600 0002               7061                                           BNE            MOVEM_m2r_A3
00005A4A                          7062  
00005A4A  2A18                    7063  MOVEM_m2r_A3                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A4C  4241                    7064                                           CLR            D1
00005A4E  227C 00000010           7065                                           MOVE.L         #mask_MOVEM_reg_mem_A3,A1                     ;load mask into register
00005A54  B3FC 00000010           7066                                           CMP.L          #match_MOVEM_reg_mem_A3,A1                    ;check to see if the A0 is on the list
00005A5A  6700 00D4               7067                                           BEQ            MOVEM_m2r_A3_reg_list_out
00005A5E  6600 0002               7068                                           BNE            MOVEM_m2r_A4
00005A62                          7069  
00005A62  2A18                    7070  MOVEM_m2r_A4                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A64  4241                    7071                                           CLR            D1
00005A66  227C 00000008           7072                                           MOVE.L         #mask_MOVEM_reg_mem_A4,A1                     ;load mask into register
00005A6C  B3FC 00000008           7073                                           CMP.L          #match_MOVEM_reg_mem_A4,A1                    ;check to see if the A0 is on the list
00005A72  6700 00C6               7074                                           BEQ            MOVEM_m2r_A4_reg_list_out
00005A76  6600 0002               7075                                           BNE            MOVEM_m2r_A5
00005A7A                          7076  
00005A7A  2A18                    7077  MOVEM_m2r_A5                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A7C  4241                    7078                                           CLR            D1
00005A7E  227C 00000004           7079                                           MOVE.L         #mask_MOVEM_reg_mem_A5,A1                     ;load mask into register
00005A84  B3FC 00000004           7080                                           CMP.L          #match_MOVEM_reg_mem_A5,A1                    ;check to see if the A0 is on the list
00005A8A  6700 00B8               7081                                           BEQ            MOVEM_m2r_A5_reg_list_out
00005A8E  6600 0002               7082                                           BNE            MOVEM_m2r_A6
00005A92                          7083  
00005A92  2A18                    7084  MOVEM_m2r_A6                             MOVE.L         (A0)+,D5                                ;pull the register list
00005A94  4241                    7085                                           CLR            D1
00005A96  227C 00000002           7086                                           MOVE.L         #mask_MOVEM_reg_mem_A6,A1                     ;load mask into register
00005A9C  B3FC 00000002           7087                                           CMP.L          #match_MOVEM_reg_mem_A6,A1                    ;check to see if the A0 is on the list
00005AA2  6700 00AA               7088                                           BEQ            MOVEM_m2r_A6_reg_list_out
00005AA6  6600 0002               7089                                           BNE            MOVEM_m2r_A7
00005AAA                          7090  
00005AAA  2A18                    7091  MOVEM_m2r_A7                             MOVE.L         (A0)+,D5                                ;pull the register list
00005AAC  4241                    7092                                           CLR            D1
00005AAE  227C 00000001           7093                                           MOVE.L         #mask_MOVEM_reg_mem_A7,A1                     ;load mask into register
00005AB4  B3FC 00000001           7094                                           CMP.L          #match_MOVEM_reg_mem_A7,A1                    ;check to see if the A0 is on the list
00005ABA  6700 009C               7095                                           BEQ            MOVEM_m2r_A7_reg_list_out
00005ABE  6600 F9CA               7096                                           BNE            MOVEM_determine_second_operand
00005AC2                          7097  
00005AC2                          7098  ;------------------------------------------------------Register List Output----------------------------------------
00005AC2  22FC 0000691B           7099  MOVEM_m2r_D0_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005AC8  4EB8 5280               7100                                          JSR             MOVEM_reg_mem_D1            ;go check D1
00005ACC                          7101                                          
00005ACC  22FC 0000691B           7102  MOVEM_m2r_D1_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005AD2  4EB8 5298               7103                                          JSR             MOVEM_reg_mem_D2            ;go check D2
00005AD6                          7104  
00005AD6  22FC 0000691B           7105  MOVEM_m2r_D2_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005ADC  4EB8 52B0               7106                                          JSR             MOVEM_reg_mem_D3            ;go check D3
00005AE0                          7107  
00005AE0  22FC 0000691B           7108  MOVEM_m2r_D3_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005AE6  4EB8 52C8               7109                                          JSR             MOVEM_reg_mem_D4            ;go check D4
00005AEA                          7110  
00005AEA  22FC 0000691B           7111  MOVEM_m2r_D4_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005AF0  4EB8 52E0               7112                                          JSR             MOVEM_reg_mem_D5            ;go check D5
00005AF4                          7113  
00005AF4  22FC 0000691B           7114  MOVEM_m2r_D5_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005AFA  4EB8 52F8               7115                                          JSR             MOVEM_reg_mem_D6            ;go check D6
00005AFE                          7116  
00005AFE  22FC 0000691B           7117  MOVEM_m2r_D6_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005B04  4EB8 5310               7118                                          JSR             MOVEM_reg_mem_D7            ;go check D7
00005B08                          7119  
00005B08  22FC 0000691B           7120  MOVEM_m2r_D7_reg_list_out               MOVE.L          #ea_D0,(A1)+                ;load the register into A1
00005B0E  4EB8 5328               7121                                          JSR             MOVEM_reg_mem_A0            ;go check A0
00005B12                          7122  
00005B12  22FC 00006933           7123  MOVEM_m2r_A0_reg_list_out               MOVE.L          #ea_A0,(A1)+                ;load the register into A1
00005B18  4EB8 5340               7124                                          JSR             MOVEM_reg_mem_A1            ;go check D1
00005B1C                          7125                                          
00005B1C  22FC 00006936           7126  MOVEM_m2r_A1_reg_list_out               MOVE.L          #ea_A1,(A1)+                ;load the register into A1
00005B22  4EB8 5358               7127                                          JSR             MOVEM_reg_mem_A2            ;go check D2
00005B26                          7128  
00005B26  22FC 00006939           7129  MOVEM_m2r_A2_reg_list_out               MOVE.L          #ea_A2,(A1)+                ;load the register into A1
00005B2C  4EB8 5370               7130                                          JSR             MOVEM_reg_mem_A3            ;go check D3
00005B30                          7131  
00005B30  22FC 0000693C           7132  MOVEM_m2r_A3_reg_list_out               MOVE.L          #ea_A3,(A1)+                ;load the register into A1
00005B36  4EB8 5388               7133                                          JSR             MOVEM_reg_mem_A4            ;go check D4
00005B3A                          7134  
00005B3A  22FC 0000693F           7135  MOVEM_m2r_A4_reg_list_out               MOVE.L          #ea_A4,(A1)+                ;load the register into A1
00005B40  4EB8 53A0               7136                                          JSR             MOVEM_reg_mem_A5            ;go check D5
00005B44                          7137  
00005B44  22FC 00006942           7138  MOVEM_m2r_A5_reg_list_out               MOVE.L          #ea_A5,(A1)+                ;load the register into A1
00005B4A  4EB8 53B8               7139                                          JSR             MOVEM_reg_mem_A6            ;go check D6
00005B4E                          7140  
00005B4E  22FC 00006945           7141  MOVEM_m2r_A6_reg_list_out               MOVE.L          #ea_A6,(A1)+                ;load the register into A1
00005B54  4EB8 53D0               7142                                          JSR             MOVEM_reg_mem_A7            ;go check D7
00005B58                          7143  
00005B58  22FC 00006948           7144  MOVEM_m2r_A7_reg_list_out               MOVE.L          #ea_A7,(A1)+                ;load the register into A1
00005B5E  4CDF 7CBE               7145                                          MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005B62  4E75                    7146                                        RTS                                            :return to MOVEroutine
00005B64                          7147  
00005B64                          7148  
00005B64                          7149  
00005B64                          7150  ;----------------------Error Handling----------------------------------------
00005B64  43F9 00006907           7151  MOVEM_ERROR                                     LEA     ERROR_MESSAGE,A1                                          ;load error messge into A3
00005B6A  4CDF 7CBE               7152                                                  MOVEM.L           (SP)+, D1-D5/D7/A2-A6                                      
00005B6E  4E75                    7153                                                  RTS                                            :return to MOVEroutine
00005B70                          7154  
00005B70                          7155                                                  
00005B70                          7156                                                 
00005B70                          7157  
00005B70  =00000400               7158  mask_MOVEM_dir         EQU         $0400
00005B70                          7159  
00005B70                          7160  
00005B70  =00008000               7161  mask_MOVEM_reg_mem_D0        EQU         $8000
00005B70  =00004000               7162  mask_MOVEM_reg_mem_D1        EQU         $4000
00005B70  =00002000               7163  mask_MOVEM_reg_mem_D2        EQU         $2000
00005B70  =00001000               7164  mask_MOVEM_reg_mem_D3        EQU         $1000
00005B70  =00000800               7165  mask_MOVEM_reg_mem_D4        EQU         $0800
00005B70  =00000400               7166  mask_MOVEM_reg_mem_D5        EQU         $0400
00005B70  =00000200               7167  mask_MOVEM_reg_mem_D6        EQU         $0200
00005B70  =00000100               7168  mask_MOVEM_reg_mem_D7        EQU         $0100
00005B70                          7169  
00005B70  =00000080               7170  mask_MOVEM_reg_mem_A0        EQU         $0080
00005B70  =00000040               7171  mask_MOVEM_reg_mem_A1        EQU         $0040
00005B70  =00000020               7172  mask_MOVEM_reg_mem_A2        EQU         $0020
00005B70  =00000010               7173  mask_MOVEM_reg_mem_A3        EQU         $0010
00005B70  =00000008               7174  mask_MOVEM_reg_mem_A4        EQU         $0008
00005B70  =00000004               7175  mask_MOVEM_reg_mem_A5        EQU         $0004
00005B70  =00000002               7176  mask_MOVEM_reg_mem_A6        EQU         $0002
00005B70  =00000001               7177  mask_MOVEM_reg_mem_A7        EQU         $0001
00005B70                          7178  
00005B70                          7179  
00005B70  =00008000               7180  mask_MOVEM_mem_reg_A7        EQU         $8000
00005B70  =00004000               7181  mask_MOVEM_mem_reg_A6        EQU         $4000
00005B70  =00002000               7182  mask_MOVEM_mem_reg_A5        EQU         $2000
00005B70  =00001000               7183  mask_MOVEM_mem_reg_A4        EQU         $1000
00005B70  =00000800               7184  mask_MOVEM_mem_reg_A3        EQU         $0800
00005B70  =00000400               7185  mask_MOVEM_mem_reg_A2        EQU         $0400
00005B70  =00000200               7186  mask_MOVEM_mem_reg_A1        EQU         $0200
00005B70  =00000100               7187  mask_MOVEM_mem_reg_A0        EQU         $0100
00005B70                          7188  
00005B70  =00008000               7189  mask_MOVEM_mem_reg_D7        EQU         $8000
00005B70  =00004000               7190  mask_MOVEM_mem_reg_D6        EQU         $4000
00005B70  =00002000               7191  mask_MOVEM_mem_reg_D5        EQU         $2000
00005B70  =00001000               7192  mask_MOVEM_mem_reg_D4        EQU         $1000
00005B70  =00000800               7193  mask_MOVEM_mem_reg_D3        EQU         $0800
00005B70  =00000400               7194  mask_MOVEM_mem_reg_D2        EQU         $0400
00005B70  =00000200               7195  mask_MOVEM_mem_reg_D1        EQU         $0200
00005B70  =00000100               7196  mask_MOVEM_mem_reg_D0        EQU         $0100
00005B70                          7197  
00005B70                          7198  
00005B70  =0000003F               7199  mask_MOVEM_ea_reg_and_mode      EQU         $003F
00005B70  =0000003C               7200  mask_MOVEM_ea_mode              EQU         $003C
00005B70  =00000038               7201  mask_MOVEM_abs_add              EQU         $0038
00005B70                          7202   
00005B70  =00000400               7203  match_MOVEM_reg_mem             EQU         $0400
00005B70  =00000010               7204  match_MOVEM_An_indir            EQU         $0010
00005B70                          7205  
00005B70  =00000038               7206  match_MOVEM_abs_add_word        EQU         $0038
00005B70  =00000039               7207  match_MOVEM_abs_add_long        EQU         $0039
00005B70                          7208  
00005B70  =00000010               7209  match_MOVEM_An_indir_r0     EQU         $0010
00005B70  =00000011               7210  match_MOVEM_An_indir_r1     EQU         $0011
00005B70  =00000012               7211  match_MOVEM_An_indir_r2     EQU         $0012
00005B70  =00000013               7212  match_MOVEM_An_indir_r3     EQU         $0013
00005B70  =00000014               7213  match_MOVEM_An_indir_r4     EQU         $0014
00005B70  =00000015               7214  match_MOVEM_An_indir_r5     EQU         $0015
00005B70  =00000016               7215  match_MOVEM_An_indir_r6     EQU         $0016
00005B70  =00000017               7216  match_MOVEM_An_indir_r7     EQU         $0017
00005B70                          7217  
00005B70  =00000020               7218  match_MOVEM_An_indir_pdec_r0            EQU         $0020
00005B70  =00000021               7219  match_MOVEM_An_indir_pdec_r1            EQU         $0021
00005B70  =00000022               7220  match_MOVEM_An_indir_pdec_r2            EQU         $0022
00005B70  =00000023               7221  match_MOVEM_An_indir_pdec_r3            EQU         $0023
00005B70  =00000024               7222  match_MOVEM_An_indir_pdec_r4            EQU         $0024
00005B70  =00000025               7223  match_MOVEM_An_indir_pdec_r5            EQU         $0025
00005B70  =00000026               7224  match_MOVEM_An_indir_pdec_r6            EQU         $0026
00005B70  =00000027               7225  match_MOVEM_An_indir_pdec_r7            EQU         $0027
00005B70                          7226  
00005B70                          7227  
00005B70  =00000400               7228  match_MOVEM_mem_reg             EQU         $0400
00005B70                          7229  
00005B70                          7230  
00005B70  =00000020               7231  match_MOVEM_An_indir_pdec       EQU         $0020
00005B70  =00000010               7232  match_MOVEM_An_indir_pinc       EQU         $0010
00005B70  =00000038               7233  match_MOVEM_abs_add_word        EQU         $0038
00005B70  =00000039               7234  match_MOVEM_abs_add_long        EQU         $0039
00005B70                          7235  
00005B70  =00000010               7236  match_MOVEM_An_indir_r0         EQU         $0010
00005B70  =00000011               7237  match_MOVEM_An_indir_r1         EQU         $0011
00005B70  =00000012               7238  match_MOVEM_An_indir_r2         EQU         $0012
00005B70  =00000013               7239  match_MOVEM_An_indir_r3         EQU         $0013
00005B70  =00000014               7240  match_MOVEM_An_indir_r4         EQU         $0014
00005B70  =00000015               7241  match_MOVEM_An_indir_r5         EQU         $0015
00005B70  =00000016               7242  match_MOVEM_An_indir_r6         EQU         $0016
00005B70  =00000017               7243  match_MOVEM_An_indir_r7         EQU         $0017
00005B70                          7244  
00005B70                          7245  
00005B70  =00000018               7246  match_MOVEM_An_indir_pinc_r0        EQU         $0018
00005B70  =00000019               7247  match_MOVEM_An_indir_pinc_r1        EQU         $0019
00005B70  =0000001A               7248  match_MOVEM_An_indir_pinc_r2        EQU         $001A
00005B70  =0000001B               7249  match_MOVEM_An_indir_pinc_r3        EQU         $001B
00005B70  =0000001C               7250  match_MOVEM_An_indir_pinc_r4        EQU         $001C
00005B70  =0000001D               7251  match_MOVEM_An_indir_pinc_r5        EQU         $001D
00005B70  =0000001E               7252  match_MOVEM_An_indir_pinc_r6        EQU         $001E
00005B70  =0000001F               7253  match_MOVEM_An_indir_pinc_r7        EQU         $001F
00005B70                          7254  
00005B70  =00000038               7255  match_MOVEM_imm_add                 EQU         $0038
00005B70  =00000038               7256  match_MOVEM_imm_add_word            EQU         $0038
00005B70  =00000039               7257  match_MOVEM_imm_add_long            EQU         $0039
00005B70  =00008000               7258  match_MOVEM_reg_mem_D0        EQU         $8000
00005B70  =00004000               7259  match_MOVEM_reg_mem_D1        EQU         $4000
00005B70  =00002000               7260  match_MOVEM_reg_mem_D2        EQU         $2000
00005B70  =00001000               7261  match_MOVEM_reg_mem_D3        EQU         $1000
00005B70  =00000800               7262  match_MOVEM_reg_mem_D4        EQU         $0800
00005B70  =00000400               7263  match_MOVEM_reg_mem_D5        EQU         $0400
00005B70  =00000200               7264  match_MOVEM_reg_mem_D6        EQU         $0200
00005B70  =00000100               7265  match_MOVEM_reg_mem_D7        EQU         $0100
00005B70                          7266  
00005B70  =00000080               7267  match_MOVEM_reg_mem_A0        EQU         $0080
00005B70  =00000040               7268  match_MOVEM_reg_mem_A1        EQU         $0040
00005B70  =00000020               7269  match_MOVEM_reg_mem_A2        EQU         $0020
00005B70  =00000010               7270  match_MOVEM_reg_mem_A3        EQU         $0010
00005B70  =00000008               7271  match_MOVEM_reg_mem_A4        EQU         $0008
00005B70  =00000004               7272  match_MOVEM_reg_mem_A5        EQU         $0004
00005B70  =00000002               7273  match_MOVEM_reg_mem_A6        EQU         $0002
00005B70  =00000001               7274  match_MOVEM_reg_mem_A7        EQU         $0001
00005B70                          7275  
00005B70                          7276  
00005B70  =00008000               7277  match_MOVEM_mem_reg_A7        EQU         $8000
00005B70  =00004000               7278  match_MOVEM_mem_reg_A6        EQU         $4000
00005B70  =00002000               7279  match_MOVEM_mem_reg_A5        EQU         $2000
00005B70  =00001000               7280  match_MOVEM_mem_reg_A4        EQU         $1000
00005B70  =00000800               7281  match_MOVEM_mem_reg_A3        EQU         $0800
00005B70  =00000400               7282  match_MOVEM_mem_reg_A2        EQU         $0400
00005B70  =00000200               7283  match_MOVEM_mem_reg_A1        EQU         $0200
00005B70  =00000100               7284  match_MOVEM_mem_reg_A0        EQU         $0100
00005B70                          7285  
00005B70  =00008000               7286  match_MOVEM_mem_reg_D7        EQU         $8000
00005B70  =00004000               7287  match_MOVEM_mem_reg_D6        EQU         $4000
00005B70  =00002000               7288  match_MOVEM_mem_reg_D5        EQU         $2000
00005B70  =00001000               7289  match_MOVEM_mem_reg_D4        EQU         $1000
00005B70  =00000800               7290  match_MOVEM_mem_reg_D3        EQU         $0800
00005B70  =00000400               7291  match_MOVEM_mem_reg_D2        EQU         $0400
00005B70  =00000200               7292  match_MOVEM_mem_reg_D1        EQU         $0200
00005B70  =00000100               7293  match_MOVEM_mem_reg_D0        EQU         $0100
00005B70                          7294  
00005B70                          7295  
00005B70                          7296  
00005B70                          7297  
00005B70                          7298  -------------------- end include --------------------
00005B70                          7299              INCLUDE 'SUB Subroutine.x68'
00005B70                          7300  
00005B70  48E7 7D3E               7301  SUB_sub                                MOVEM.L           D1-D5/D7/A2-A6, -(SP)                        ;preserve the registers, 
00005B74                          7302  ;-----------------------------ea,Dn-----------------------------------------------------------------------------------------------------
00005B74  C2BC 000001C0           7303                                  AND.L              #mask_opmode,D1                       ;load mask to determine the operand order
00005B7A                          7304                                  
00005B7A  B2BC 00000000           7305  SUB_ea_Dn_match                 CMP.L              #match_SUB_b_Dn_ea,D1                 ;check to see if it's Dn,ea
00005B80  6700 004A               7306                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
00005B84  6600 0002               7307                                  BNE                SUB_ea_Dn_match_w                     ;if not check word size for same order
00005B88                          7308  
00005B88  B2BC 00000040           7309  SUB_ea_Dn_match_w               CMP.L              #match_SUB_w_Dn_ea,D1                 ;check to see if it's Dn,ea
00005B8E  6700 003C               7310                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
00005B92  6600 0002               7311                                  BNE                SUB_ea_Dn_match_l                     ;if not check long size for same order
00005B96                          7312  
00005B96  B2BC 00000080           7313  SUB_ea_Dn_match_l               CMP.L              #match_SUB_l_Dn_ea,D1                 ;check to see if it's Dn,ea
00005B9C  6700 002E               7314                                  BEQ                SUB_ea_Dn                             ;if equal go figure out data register
00005BA0  66D8                    7315                                  BNE                SUB_ea_Dn_match                       ;if not check other order
00005BA2                          7316  
00005BA2  B2BC 00000100           7317  SUB_Dn_ea_match                 CMP.L              #match_SUB_b_ea_Dn,D1                 ;check to see if it's ea,Dn
00005BA8  6700 0500               7318                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
00005BAC  6600 0002               7319                                  BNE                SUB_Dn_ea_match_w                     ;if not go check word size for same order
00005BB0                          7320  
00005BB0  B2BC 00000140           7321  SUB_Dn_ea_match_w               CMP.L              #match_SUB_w_ea_Dn,D1                 ;check to see if it's ea,Dn
00005BB6  6700 04F2               7322                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
00005BBA  6600 0002               7323                                  BNE                SUB_Dn_ea_match_l                     ;if not go check word size for same order
00005BBE                          7324  
00005BBE  B2BC 00000180           7325  SUB_Dn_ea_match_l               CMP.L              #match_SUB_l_ea_Dn,D1                 ;check to see if it's ea,Dn
00005BC4  6700 04E4               7326                                  BEQ                SUB_Dn_ea                             ;if equal go figure out ea mode
00005BC8  6600 D9A2               7327                                  BNE                ERROR                                 ;if not go to error message
00005BCC                          7328  
00005BCC                          7329  
00005BCC                          7330  ;--------------------------------------------------------------------------------------------------------------------------
00005BCC                          7331  ;-------------------------------------------------------------------------------------------------------------------------
00005BCC  4241                    7332  SUB_ea_Dn                        CLR               D1                                     ;clear D1 to load new mask                                
00005BCE  C2BC 00000038           7333                                   AND.L             #mask_SUB_ea_mode,D1                   ;move the mask to D1
00005BD4                          7334  
00005BD4                          7335  
00005BD4                          7336  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
00005BD4  B2BC 00000000           7337  SUB_ea_Dn_data_reg_dir             CMP.L           #match_SUB_Dn,D1                       ;check to see if mode is data reg direct
00005BDA  6600 0006               7338                                     BNE             SUB_ea_Dn_add_reg_indir                ;if not, go check add reg dir
00005BDE  6700 0064               7339                                     BEQ             SUB_ea_Dn_Dn_reg                       ;if equal go figure out the register
00005BE2                          7340  
00005BE2  B2BC 00000010           7341  SUB_ea_Dn_add_reg_indir            CMP.L           #match_SUB_An_indir,D1                 ;check to see if mode is add reg indir
00005BE8  6600 0006               7342                                     BNE             SUB_ea_Dn_add_reg_indir_predec         ;if not, go check add reg indir predec 
00005BEC  6700 0126               7343                                     BEQ             SUB_ea_Dn_An_indir_reg                 ;if equal go figure out the register           
00005BF0                          7344             
00005BF0  B2BC 00000020           7345  SUB_ea_Dn_add_reg_indir_predec     CMP.L           #match_SUB_An_indir_predec,D1          ;check to see if mode is add reg indor w/ postinc
00005BF6  6600 0006               7346                                     BNE             SUB_ea_Dn_add_reg_indir_postinc        ;if not go check add reg indir/predec
00005BFA  6700 02B8               7347                                     BEQ             SUB_ea_Dn_An_indir_predec              ;if equal go figure out the register
00005BFE                          7348                        
00005BFE  B2BC 00000018           7349  SUB_ea_Dn_add_reg_indir_postinc    CMP.L           #match_SUB_An_indir_postinc,D1         ;check to see if mode is add reg indir w/predec
00005C04  6600 0006               7350                                     BNE             SUB_ea_Dn_abs_add_word                 ;if not go check abs add word
00005C08  6700 01DA               7351                                     BEQ             SUB_ea_Dn_An_indir_postinc_reg         ;if equal go figure out the register
00005C0C                          7352  
00005C0C  C4BC 0000003F           7353  SUB_ea_Dn_abs_add_word             AND.L           #mask_SUB_abs_add,D2                   ;load mask to determine if abs add word or long
00005C12                          7354                                   
00005C12  B4BC 00000038           7355                                     CMP.L           #match_SUB_abs_add_word,D2             ;check if abs add word
00005C18  2A18                    7356                                     MOVE.L          (A0)+,D5                               ;pull the next word instruction that holds the address
00005C1A  6600 0006               7357                                     BNE             SUB_ea_Dn_abs_add_long                 ;if not go check abs add long
00005C1E  6700 0364               7358                                     BEQ             SUB_ea_Dn_abs_add_word_out             ;if equal go to output
00005C22                          7359    
00005C22  B4BC 00000039           7360  SUB_ea_Dn_abs_add_long             CMP.L           #match_SUB_abs_add_long,D2             ;check to see if abs add long
00005C28  6700 0368               7361                                     BEQ             SUB_ea_Dn_abs_add_long_out             ;if equal go to output
00005C2C  6600 0002               7362                     BNE             SUB_ea_Dn_immediate_add
00005C30                          7363                                   
00005C30  B2BC 0000003C           7364  SUB_ea_Dn_immediate_add            CMP.L           #match_SUB_imm_add,D1                  ;check if immediate address
00005C36  6700 036A               7365                                     BEQ             SUB_ea_Dn_immediate_add_out            ;if equal go to immediate add sub routine
00005C3A  6600 D930               7366                     BNE             ERROR                                  ;if not equal go to error mesage sub routine
00005C3E                          7367  
00005C3E                          7368  
00005C3E                          7369  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
00005C3E                          7370                                   
00005C3E  C4BC 0000003F           7371                                   AND.L           #mask_SUB_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
00005C44                          7372  ;-----------------------------------Data Register Direct--------------------------------
00005C44  B4BC 00000000           7373  SUB_ea_Dn_Dn_reg             CMP.L              #match_SUB_D0,D2               ;check to see in the register is 0
00005C4A  6600 0006               7374                               BNE                SUB_ea_Dn_rD1                  ;if not go check register 1
00005C4E  6700 0064               7375                               BEQ                SUB_ea_Dn_D0_out               ;if equal go to output subroutine
00005C52                          7376  
00005C52  B4BC 00000001           7377  SUB_ea_Dn_rD1                CMP.L              #match_SUB_D1,D2               ;check to see in the register is 1
00005C58  6600 0006               7378                               BNE                SUB_ea_Dn_rD2                  ;if not go check register 2
00005C5C  6700 0062               7379                               BEQ                SUB_ea_Dn_D1_out               ;if equal go to output subroutine
00005C60                          7380  
00005C60  B4BC 00000002           7381  SUB_ea_Dn_rD2                CMP.L              #match_SUB_D2,D2               ;check to see in the register is 2
00005C66  6600 0006               7382                               BNE                SUB_ea_Dn_rD3                  ;if not go check register 3
00005C6A  6700 0060               7383                               BEQ                SUB_ea_Dn_D2_out               ;if equal go to output subroutine
00005C6E                          7384  
00005C6E  B4BC 00000003           7385  SUB_ea_Dn_rD3                CMP.L              #match_SUB_D3,D2               ;check to see in the register is 3
00005C74  6600 0006               7386                               BNE                SUB_ea_Dn_rD4                  ;if not go check register 4
00005C78  6700 005E               7387                               BEQ                SUB_ea_Dn_D3_out               ;if equal go to output subroutine
00005C7C                          7388  
00005C7C  B4BC 00000004           7389  SUB_ea_Dn_rD4                CMP.L              #match_SUB_D4,D2               ;check to see in the register is 4
00005C82  6600 0006               7390                               BNE                SUB_ea_Dn_rD5                  ;if not go check register 5
00005C86  6700 005C               7391                               BEQ                SUB_ea_Dn_D4_out               ;if equal go to output subroutine
00005C8A                          7392  
00005C8A  B4BC 00000005           7393  SUB_ea_Dn_rD5                CMP.L              #match_SUB_D5,D2               ;check to see in the register is 5
00005C90  6600 0006               7394                               BNE                SUB_ea_Dn_rD6                  ;if not go check register 6
00005C94  6700 005A               7395                               BEQ                SUB_ea_Dn_D5_out               ;if equal go to output subroutine
00005C98                          7396  
00005C98  B4BC 00000006           7397  SUB_ea_Dn_rD6                CMP.L              #match_SUB_D6,D2               ;check to see in the register is 6
00005C9E  6600 0006               7398                               BNE                SUB_ea_Dn_rD7                  ;if not go check register 7
00005CA2  6700 0058               7399                               BEQ                SUB_ea_Dn_D6_out               ;if equal go to output subroutine
00005CA6                          7400  
00005CA6  B4BC 00000007           7401  SUB_ea_Dn_rD7                CMP.L              #match_SUB_D7,D2               ;check to see in the register is 7
00005CAC  6700 005A               7402                               BEQ                SUB_ea_Dn_D7_out               ;if equal go to output subroutine
00005CB0  6600 D8BA               7403                               BNE                ERROR                          ;if not equal, got to error message
00005CB4                          7404  
00005CB4                          7405  
00005CB4                          7406  ;--------------------Data Register Direct Output-----------------------
00005CB4  227C 0000691B           7407  SUB_ea_Dn_D0_out             MOVE.L          #ea_D0,A1              ;load string constant into A1
00005CBA  4EB9 00005FD2           7408                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005CC0                          7409  
00005CC0  227C 0000691E           7410  SUB_ea_Dn_D1_out             MOVE.L          #ea_D1,A1              ;load string constant into A1
00005CC6  4EB9 00005FD2           7411                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005CCC                          7412  
00005CCC  227C 00006921           7413  SUB_ea_Dn_D2_out             MOVE.L          #ea_D2,A1              ;load string constant into A1
00005CD2  4EB9 00005FD2           7414                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005CD8                          7415  
00005CD8  227C 00006924           7416  SUB_ea_Dn_D3_out             MOVE.L      #ea_D3,A1              ;load string constant into A1
00005CDE  4EB9 00005FD2           7417                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005CE4                          7418  
00005CE4                          7419  
00005CE4  227C 00006927           7420  SUB_ea_Dn_D4_out             MOVE.L      #ea_D4,A1              ;load string constant into A1
00005CEA  4EB9 00005FD2           7421                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005CF0                          7422  
00005CF0                          7423  
00005CF0  227C 0000692A           7424  SUB_ea_Dn_D5_out             MOVE.L      #ea_D5,A1              ;load string constant into A1
00005CF6  4EB9 00005FD2           7425                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005CFC                          7426  
00005CFC                          7427  
00005CFC  227C 0000692D           7428  SUB_ea_Dn_D6_out             MOVE.L      #ea_D6,A1              ;load string constant into A1
00005D02  4EB9 00005FD2           7429                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005D08                          7430  
00005D08                          7431  
00005D08  227C 00006930           7432  SUB_ea_Dn_D7_out             MOVE.L          #ea_D7,A1              ;load string constant into A1
00005D0E  4EB9 00005FD2           7433                               JSR             SUB_determine_second_op            ;jump to subroutine to determine second operand
00005D14                          7434  
00005D14                          7435  
00005D14                          7436  ;------------------Address Register Indirect-----------------------
00005D14  B4BC 00000010           7437  SUB_ea_Dn_An_indir_reg           CMP.L           #match_SUB_An_indir_r0,D2           ;check reg is equal to 0
00005D1A  6600 0006               7438                                   BNE             SUB_ea_Dn_An_indir_reg1             ;if not try reg 1
00005D1E  6700 0064               7439                                   BEQ             SUB_ea_Dn_An_indir_reg0_out         ;if equal go to output subroutine
00005D22                          7440  
00005D22  B4BC 00000011           7441  SUB_ea_Dn_An_indir_reg1          CMP.L           #match_SUB_An_indir_r1,D2           ;check reg is equal to 1
00005D28  6600 0006               7442                                   BNE             SUB_ea_Dn_An_indir_reg2             ;if not try reg 2
00005D2C  6700 0062               7443                                   BEQ             SUB_ea_Dn_An_indir_reg1_out         ;if equal go to output subroutine
00005D30                          7444  
00005D30  B4BC 00000012           7445  SUB_ea_Dn_An_indir_reg2          CMP.L           #match_SUB_An_indir_r2,D2           ;check reg is equal to 2
00005D36  6600 0006               7446                                   BNE             SUB_ea_Dn_An_indir_reg3             ;if not try reg 3
00005D3A  6700 0060               7447                                   BEQ             SUB_ea_Dn_An_indir_reg2_out         ;if equal go to output subroutine
00005D3E                          7448  
00005D3E  B4BC 00000013           7449  SUB_ea_Dn_An_indir_reg3          CMP.L           #match_SUB_An_indir_r3,D2           ;check reg is equal to 3
00005D44  6600 0006               7450                                   BNE             SUB_ea_Dn_An_indir_reg4             ;if not try reg 4
00005D48  6700 005E               7451                                   BEQ             SUB_ea_Dn_An_indir_reg3_out         ;if equal go to output subroutine
00005D4C                          7452      
00005D4C  B4BC 00000014           7453  SUB_ea_Dn_An_indir_reg4          CMP.L           #match_SUB_An_indir_r4,D2           ;check reg is equal to 4
00005D52  6600 0006               7454                                   BNE             SUB_ea_Dn_An_indir_reg5             ;if not try reg 5
00005D56  6700 005C               7455                                   BEQ             SUB_ea_Dn_An_indir_reg4_out         ;if equal go to output subroutine
00005D5A                          7456          
00005D5A  B4BC 00000015           7457  SUB_ea_Dn_An_indir_reg5          CMP.L           #match_SUB_An_indir_r5,D2           ;check reg is equal to 5
00005D60  6600 0006               7458                                   BNE             SUB_ea_Dn_An_indir_reg6             ;if not try reg 6
00005D64  6700 005A               7459                                   BEQ             SUB_ea_Dn_An_indir_reg5_out         ;if equal go to output subroutine
00005D68                          7460  
00005D68  B4BC 00000016           7461  SUB_ea_Dn_An_indir_reg6          CMP.L           #match_SUB_An_indir_r6,D2           ;check reg is equal to 6
00005D6E  6600 0006               7462                                   BNE             SUB_ea_Dn_An_indir_reg7             ;if not try reg 7
00005D72  6700 0058               7463                                   BEQ             SUB_ea_Dn_An_indir_reg6_out         ;if equal go to output subroutine
00005D76                          7464  
00005D76  B4BC 00000017           7465  SUB_ea_Dn_An_indir_reg7          CMP.L           #match_SUB_An_indir_r7,D2           ;check reg is equal to 7
00005D7C  6700 005A               7466                                   BEQ             SUB_ea_Dn_An_indir_reg7_out         ;if equal go to output subroutine
00005D80  6600 D7EA               7467                                   BNE             ERROR                               ;if not equal to an addresssing mode, pritn error
00005D84                          7468  
00005D84                          7469  
00005D84                          7470  ;--------------------Address Register Indirect Output-----------------------
00005D84  227C 0000695B           7471  SUB_ea_Dn_An_indir_reg0_out       MOVE.L         #ea_indir_A0,A1            ;load string constant into A1
00005D8A  4EB9 00005FD2           7472                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005D90                          7473  
00005D90  227C 00006960           7474  SUB_ea_Dn_An_indir_reg1_out       MOVE.L         #ea_indir_A1,A1            ;load string constant into A1
00005D96  4EB9 00005FD2           7475                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005D9C                          7476  
00005D9C  227C 00006965           7477  SUB_ea_Dn_An_indir_reg2_out       MOVE.L         #ea_indir_A2,A1            ;load string constant into A1
00005DA2  4EB9 00005FD2           7478                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DA8                          7479  
00005DA8  227C 0000696A           7480  SUB_ea_Dn_An_indir_reg3_out       MOVE.L         #ea_indir_A3,A1            ;load string constant into A1
00005DAE  4EB9 00005FD2           7481                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DB4                          7482  
00005DB4  227C 0000696F           7483  SUB_ea_Dn_An_indir_reg4_out       MOVE.L         #ea_indir_A4,A1            ;load string constant into A1
00005DBA  4EB9 00005FD2           7484                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DC0                          7485  
00005DC0  227C 00006974           7486  SUB_ea_Dn_An_indir_reg5_out       MOVE.L         #ea_indir_A5,A1            ;load string constant into A1
00005DC6  4EB9 00005FD2           7487                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DCC                          7488  
00005DCC  227C 00006979           7489  SUB_ea_Dn_An_indir_reg6_out       MOVE.L         #ea_indir_A6,A1            ;load string constant into A1
00005DD2  4EB9 00005FD2           7490                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DD8                          7491                                          
00005DD8  227C 0000697E           7492  SUB_ea_Dn_An_indir_reg7_out       MOVE.L         #ea_indir_A7,A1            ;load string constant into A1
00005DDE  4EB9 00005FD2           7493                                    JSR            SUB_determine_second_op            ;jump to subroutine to determine second operand
00005DE4                          7494  
00005DE4                          7495  
00005DE4                          7496  ;------------------Address Register Indirect with Post Increment-----------------------
00005DE4  B4BC 00000018           7497  SUB_ea_Dn_An_indir_postinc_reg         CMP.L      #match_SUB_An_indir_postinc_r0,D2           ;check reg is equal to 0
00005DEA  6600 0006               7498                                         BNE        SUB_ea_Dn_An_indir_pinc_r1             ;if not try reg 1
00005DEE  6700 0064               7499                                         BEQ        SUB_ea_Dn_An_indir_pinc_r0_out         ;if equal go to output subroutine
00005DF2                          7500  
00005DF2  B4BC 00000019           7501  SUB_ea_Dn_An_indir_pinc_r1             CMP.L      #match_SUB_An_indir_postinc_r1,D2           ;check reg is equal to 1
00005DF8  6600 0006               7502                                         BNE        SUB_ea_Dn_An_indir_pinc_r2             ;if not try reg 2
00005DFC  6700 0062               7503                                         BEQ        SUB_ea_Dn_An_indir_pinc_r1_out         ;if equal go to output subroutine
00005E00                          7504  
00005E00  B4BC 0000001A           7505  SUB_ea_Dn_An_indir_pinc_r2             CMP.L      #match_SUB_An_indir_postinc_r2,D2           ;check reg is equal to 2
00005E06  6600 0006               7506                                         BNE        SUB_ea_Dn_An_indir_pinc_r3             ;if not try reg 3
00005E0A  6700 0060               7507                                         BEQ        SUB_ea_Dn_An_indir_pinc_r2_out         ;if equal go to output subroutine
00005E0E                          7508  
00005E0E  B4BC 0000001B           7509  SUB_ea_Dn_An_indir_pinc_r3             CMP.L      #match_SUB_An_indir_postinc_r3,D2           ;check reg is equal to 3
00005E14  6600 0006               7510                                         BNE        SUB_ea_Dn_An_indir_pinc_r4             ;if not try reg 4
00005E18  6700 005E               7511                                         BEQ        SUB_ea_Dn_An_indir_pinc_r3_out         ;if equal go to output subroutine
00005E1C                          7512   
00005E1C  B4BC 0000001C           7513  SUB_ea_Dn_An_indir_pinc_r4             CMP.L      #match_SUB_An_indir_postinc_r4,D2           ;check reg is equal to 4
00005E22  6600 0006               7514                                         BNE        SUB_ea_Dn_An_indir_pinc_r5             ;if not try reg 5
00005E26  6700 005C               7515                                         BEQ        SUB_ea_Dn_An_indir_pinc_r4_out         ;if equal go to output subroutine
00005E2A                          7516  
00005E2A  B4BC 0000001D           7517  SUB_ea_Dn_An_indir_pinc_r5             CMP.L      #match_SUB_An_indir_postinc_r5,D2           ;check reg is equal to 5
00005E30  6600 0006               7518                                         BNE        SUB_ea_Dn_An_indir_pinc_r6             ;if not try reg 6
00005E34  6700 005A               7519                                         BEQ        SUB_ea_Dn_An_indir_pinc_r5_out         ;if equal go to output subroutine
00005E38                          7520  
00005E38  B4BC 0000001E           7521  SUB_ea_Dn_An_indir_pinc_r6             CMP.L      #match_SUB_An_indir_postinc_r6,D2           ;check reg is equal to 6
00005E3E  6600 0006               7522                                         BNE        SUB_ea_Dn_An_indir_pinc_r7             ;if not try reg 7
00005E42  6700 0058               7523                                         BEQ        SUB_ea_Dn_An_indir_pinc_r6_out         ;if equal go to output subroutine
00005E46                          7524  
00005E46  B4BC 0000001F           7525  SUB_ea_Dn_An_indir_pinc_r7             CMP.L      #match_SUB_An_indir_postinc_r7,D2           ;check reg is equal to 7
00005E4C  6700 005A               7526                                         BEQ        SUB_ea_Dn_An_indir_pinc_r7_out         ;if equal go to output subroutine
00005E50  6600 D71A               7527                                         BNE        ERROR                                       ;if not equal to an addresssing mode, pritn error
00005E54                          7528  
00005E54                          7529  
00005E54                          7530  ;--------------------Address Register Indirect with Post Increment Output-----------------------
00005E54  227C 00006983           7531  SUB_ea_Dn_An_indir_pinc_r0_out      MOVE.L          #ea_indir_postinc_A0,A1          ;load string constant into A1
00005E5A  4EB9 00005FD2           7532                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005E60                          7533  
00005E60  227C 00006989           7534  SUB_ea_Dn_An_indir_pinc_r1_out      MOVE.L          #ea_indir_postinc_A1,A1          ;load string constant into A1
00005E66  4EB9 00005FD2           7535                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005E6C                          7536  
00005E6C  227C 0000698F           7537  SUB_ea_Dn_An_indir_pinc_r2_out      MOVE.L          #ea_indir_postinc_A2,A1          ;load string constant into A1
00005E72  4EB9 00005FD2           7538                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005E78                          7539  
00005E78  227C 00006995           7540  SUB_ea_Dn_An_indir_pinc_r3_out      MOVE.L          #ea_indir_postinc_A3,A1          ;load string constant into A1
00005E7E  4EB9 00005FD2           7541                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005E84                          7542  
00005E84  227C 0000699B           7543  SUB_ea_Dn_An_indir_pinc_r4_out      MOVE.L          #ea_indir_postinc_A4,A1          ;load string constant into A1
00005E8A  4EB9 00005FD2           7544                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005E90                          7545  
00005E90  227C 000069A1           7546  SUB_ea_Dn_An_indir_pinc_r5_out      MOVE.L          #ea_indir_postinc_A5,A1          ;load string constant into A1
00005E96  4EB9 00005FD2           7547                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005E9C                          7548  
00005E9C  227C 000069A7           7549  SUB_ea_Dn_An_indir_pinc_r6_out      MOVE.L          #ea_indir_postinc_A6,A1          ;load string constant into A1
00005EA2  4EB9 00005FD2           7550                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005EA8                          7551  
00005EA8  227C 000069AD           7552  SUB_ea_Dn_An_indir_pinc_r7_out      MOVE.L          #ea_indir_postinc_A7,A1          ;load string constant into A1
00005EAE  4EB9 00005FD2           7553                                      JSR             SUB_determine_second_op          ;jump to subroutine to determine second operand
00005EB4                          7554  
00005EB4                          7555  
00005EB4                          7556  ;------------------Address Register Indirect with Pre Decrement-----------------------
00005EB4  B4BC 00000020           7557  SUB_ea_Dn_An_indir_predec                CMP.L      #match_SUB_An_indir_predec_reg0,D2       ;check reg is equal to 0
00005EBA  6600 0006               7558                                           BNE        SUB_ea_Dn_An_indir_pdec_r1           ;if not try reg 1
00005EBE  6700 0064               7559                                           BEQ        SUB_ea_Dn_An_indir_pdec_r0_out       ;if equal go to output subroutine
00005EC2                          7560  
00005EC2  B4BC 00000021           7561  SUB_ea_Dn_An_indir_pdec_r1               CMP.L      #match_SUB_An_indir_predec_reg1,D2       ;check reg is equal to 1
00005EC8  6600 0006               7562                                           BNE        SUB_ea_Dn_An_indir_pdec_r2           ;if not try reg 2
00005ECC  6700 0062               7563                                           BEQ        SUB_ea_Dn_An_indir_pdec_r1_out       ;if equal go to output subroutine
00005ED0                          7564  
00005ED0  B4BC 00000022           7565  SUB_ea_Dn_An_indir_pdec_r2               CMP.L      #match_SUB_An_indir_predec_reg2,D2       ;check reg is equal to 2
00005ED6  6600 0006               7566                                           BNE        SUB_ea_Dn_An_indir_pdec_r3           ;if not try reg 3
00005EDA  6700 0060               7567                                           BEQ        SUB_ea_Dn_An_indir_pdec_r2_out       ;if equal go to output subroutine
00005EDE                          7568  
00005EDE  B4BC 00000023           7569  SUB_ea_Dn_An_indir_pdec_r3               CMP.L      #match_SUB_An_indir_predec_reg3,D2       ;check reg is equal to 3
00005EE4  6600 0006               7570                                           BNE        SUB_ea_Dn_An_indir_pdec_r4           ;if not try reg 4
00005EE8  6700 005E               7571                                           BEQ        SUB_ea_Dn_An_indir_pdec_r3_out       ;if equal go to output subroutine
00005EEC                          7572  
00005EEC  B4BC 00000024           7573  SUB_ea_Dn_An_indir_pdec_r4               CMP.L      #match_SUB_An_indir_predec_reg4,D2       ;check reg is equal to 4
00005EF2  6600 0006               7574                                           BNE        SUB_ea_Dn_An_indir_pdec_r5           ;if not try reg 5
00005EF6  6700 005C               7575                                           BEQ        SUB_ea_Dn_An_indir_pdec_r4_out       ;if equal go to output subroutine
00005EFA                          7576  
00005EFA  B4BC 00000025           7577  SUB_ea_Dn_An_indir_pdec_r5               CMP.L      #match_SUB_An_indir_predec_reg5,D2       ;check reg is equal to 5
00005F00  6600 0006               7578                                           BNE        SUB_ea_Dn_An_indir_pdec_r6           ;if not try reg 6
00005F04  6700 005A               7579                                           BEQ        SUB_ea_Dn_An_indir_pdec_r5_out       ;if equal go to output subroutine
00005F08                          7580  
00005F08  B4BC 00000026           7581  SUB_ea_Dn_An_indir_pdec_r6               CMP.L      #match_SUB_An_indir_predec_reg6,D2       ;check reg is equal to 6
00005F0E  6600 0006               7582                                           BNE        SUB_ea_Dn_An_indir_pdec_r7           ;if not try reg 7
00005F12  6700 0058               7583                                           BEQ        SUB_ea_Dn_An_indir_pdec_r6_out       ;if equal go to output subroutine
00005F16                          7584  
00005F16  B4BC 00000027           7585  SUB_ea_Dn_An_indir_pdec_r7               CMP.L      #match_SUB_An_indir_predec_reg7,D2       ;check reg is equal to 7
00005F1C  6700 005A               7586                                           BEQ        SUB_ea_Dn_An_indir_pdec_r7_out       ;if equal go to output subroutine
00005F20  6600 D64A               7587                                           BNE        ERROR                                    ;if not equal to an addresssing mode, pritn error
00005F24                          7588  
00005F24                          7589  
00005F24                          7590  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
00005F24  227C 000069B3           7591  SUB_ea_Dn_An_indir_pdec_r0_out            MOVE.L        #ea_indir_predec_A0,A1          ;load string constant into A1
00005F2A  4EB9 00005FD2           7592                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005F30                          7593                                              
00005F30  227C 000069B9           7594  SUB_ea_Dn_An_indir_pdec_r1_out            MOVE.L        #ea_indir_predec_A1,A1          ;load string constant into A1
00005F36  4EB9 00005FD2           7595                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005F3C                          7596  
00005F3C  227C 000069BF           7597  SUB_ea_Dn_An_indir_pdec_r2_out            MOVE.L        #ea_indir_predec_A2,A1          ;load string constant into A1
00005F42  4EB9 00005FD2           7598                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005F48                          7599  
00005F48  227C 000069C5           7600  SUB_ea_Dn_An_indir_pdec_r3_out            MOVE.L        #ea_indir_predec_A3,A1          ;load string constant into A1
00005F4E  4EB9 00005FD2           7601                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005F54                          7602  
00005F54  227C 000069CB           7603  SUB_ea_Dn_An_indir_pdec_r4_out            MOVE.L        #ea_indir_predec_A4,A1          ;load string constant into A1
00005F5A  4EB9 00005FD2           7604                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005F60                          7605  
00005F60  227C 000069D1           7606  SUB_ea_Dn_An_indir_pdec_r5_out            MOVE.L        #ea_indir_predec_A5,A1          ;load string constant into A1
00005F66  4EB9 00005FD2           7607                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005F6C                          7608  
00005F6C  227C 000069D7           7609  SUB_ea_Dn_An_indir_pdec_r6_out            MOVE.L        #ea_indir_predec_A6,A1          ;load string constant into A1
00005F72  4EB9 00005FD2           7610                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005F78                          7611  
00005F78  227C 000069DD           7612  SUB_ea_Dn_An_indir_pdec_r7_out            MOVE.L        #ea_indir_predec_A7,A1          ;load string constant into A1
00005F7E  4EB9 00005FD2           7613                                            JSR           SUB_determine_second_op         ;jump to subroutine to determine second operand
00005F84                          7614          
00005F84                          7615  
00005F84                          7616  ;------------------Absolute Addressing Output-----------------------
00005F84  22FC 000069ED           7617  SUB_ea_Dn_abs_add_word_out        MOVE.L      #ea_$,(A1)+             ;load $ for hex and increment A1
00005F8A  22C5                    7618                                        MOVE.L      D5,(A1)+                ;load address                  
00005F8C  4CDF 7CBE               7619                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00005F90  4E75                    7620                                        RTS                                 ;return to subroutine
00005F92                          7621                                             
00005F92                          7622  
00005F92  2A18                    7623  SUB_ea_Dn_abs_add_long_out            MOVE.L      (A0)+,D5                ;pull the next long instruction that holds the address
00005F94  22FC 000069ED           7624                                        MOVE.L      #ea_$,(A1)+             ;load $ for hex and increment A1
00005F9A  22C5                    7625                                        MOVE.L      D5,(A1)+                ;load address                  
00005F9C  4CDF 7CBE               7626                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00005FA0  4E75                    7627                                        RTS                                 ;return to subroutine
00005FA2                          7628  
00005FA2                          7629  
00005FA2                          7630                                              
00005FA2                          7631  ;---------------Immediate Addresing---------------------------
00005FA2  2A18                    7632  SUB_ea_Dn_immediate_add_out           MOVE.L      (A0)+,D5                            ;capture the immediate address
00005FA4  BCBC 000000FC           7633                        CMP.L       #match_SUB_imm_add_word,D6          ;check to see if need to pull word
00005FAA  2A18                    7634                        MOVE.L      (A0)+,D5                            ;pull the word
00005FAC  6700 0006               7635                                        BEQ         SUB_ea_Dn_imm_add_w                 ;if equal go pull word    
00005FB0  6600 0010               7636                        BNE         SUB_ea_Dn_imm_add_l                 ;if not equal, go check long
00005FB4                          7637                                           
00005FB4  22FC 000069ED           7638  SUB_ea_Dn_imm_add_w                   MOVE.L     #ea_$,(A1)+                          ;load the $
00005FBA  32C5                    7639                                        MOVE.W     D5,(A1)+                             ;load the word address                           
00005FBC  4EB9 00005FD2           7640                                        JSR        SUB_determine_second_op              ;jump to subroutine to determine second operand
00005FC2                          7641                                           
00005FC2  2A18                    7642  SUB_ea_Dn_imm_add_l                   MOVE.L     (A0)+,D5                             ;pull the long and increase the pointer
00005FC4  22FC 000069ED           7643                                        MOVE.L     #ea_$,(A1)+                          ;load the $
00005FCA  2245                    7644                                        MOVE.L     D5,A1                                ;move to A1
00005FCC  4EB9 00005FD2           7645                                        JSR        SUB_determine_second_op              ;jump to subroutine to determine second operand
00005FD2                          7646  
00005FD2                          7647  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
00005FD2  4282                    7648  SUB_determine_second_op         CLR.L       D2              ;clear D2 
00005FD4  C4BC 00000E00           7649                  AND.L       #mask_SUB_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
00005FDA                          7650                                                  
00005FDA  B4BC 00000000           7651  ea_Dn_SUB_reg0          CMP.L       #match_SUB_reg0,D2      ;check to see if reg equal 0
00005FE0  6600 0006               7652                  BNE     ea_Dn_SUB_reg1          ;if not equal got check reg 1
00005FE4  6700 0064               7653                  BEQ     ea_Dn_SUB_reg0_out      ;if equal go to output
00005FE8                          7654                                                  
00005FE8  B4BC 00000200           7655  ea_Dn_SUB_reg1          CMP.L       #match_SUB_reg1,D2      ;check to see if reg equal 1
00005FEE  6600 0006               7656                  BNE     ea_Dn_SUB_reg2          ;if not equal got check reg 2
00005FF2  6700 0062               7657                  BEQ     ea_Dn_SUB_reg1_out      ;if equal go to output
00005FF6                          7658  
00005FF6  B4BC 00000400           7659  ea_Dn_SUB_reg2          CMP.L       #match_SUB_reg2,D2      ;check to see if reg equal 2
00005FFC  6600 0006               7660                  BNE     ea_Dn_SUB_reg3          ;if not equal got check reg 3
00006000  6700 0060               7661                  BEQ     ea_Dn_SUB_reg2_out      ;if equal go to output
00006004                          7662  
00006004  B4BC 00000600           7663  ea_Dn_SUB_reg3          CMP.L       #match_SUB_reg3,D2      ;check to see if reg equal 3
0000600A  6600 0006               7664                  BNE     ea_Dn_SUB_reg4          ;if not equal got check reg 4
0000600E  6700 005E               7665                  BEQ     ea_Dn_SUB_reg3_out      ;if equal go to output
00006012                          7666                                                  
00006012  B4BC 00000800           7667  ea_Dn_SUB_reg4          CMP.L       #match_SUB_reg4,D2      ;check to see if reg equal 4
00006018  6600 0006               7668                  BNE     ea_Dn_SUB_reg5          ;if not equal got check reg 5
0000601C  6700 005C               7669                  BEQ     ea_Dn_SUB_reg4_out      ;if equal go to output
00006020                          7670  
00006020  B4BC 00000A00           7671  ea_Dn_SUB_reg5          CMP.L       #match_SUB_reg5,D2      ;check to see if reg equal 5
00006026  6600 0006               7672                  BNE     ea_Dn_SUB_reg6          ;if not equal got check reg 6
0000602A  6700 005A               7673                  BEQ     ea_Dn_SUB_reg5_out      ;if equal go to output
0000602E                          7674  
0000602E  B4BC 00000C00           7675  ea_Dn_SUB_reg6          CMP.L       #match_SUB_reg6,D2      ;check to see if reg equal 6
00006034  6600 0006               7676                  BNE     ea_Dn_SUB_reg7          ;if not equal got check reg 7
00006038  6700 0058               7677                  BEQ     ea_Dn_SUB_reg6_out      ;if equal go to output          
0000603C                          7678  
0000603C  B4BC 00000E00           7679  ea_Dn_SUB_reg7              CMP.L       #match_SUB_reg7,D2      ;check to see if reg equal 7
00006042  6700 005A               7680                  BEQ     ea_Dn_SUB_reg7_out      ;if equal go to output
00006046  6600 D524               7681                  BNE             ERROR                           ;if not equal to an addresssing mode, pritn error
0000604A                          7682                                  
0000604A                          7683  
0000604A                          7684  ;--------------------Data Output-----------------------
0000604A  227C 0000691B           7685  ea_Dn_SUB_reg0_out      MOVE.L      #ea_D0,A1           ;load string constant into A1
00006050  4CDF 7CBE               7686                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006054  4E75                    7687                                  RTS
00006056                          7688                                              
00006056  227C 0000691E           7689  ea_Dn_SUB_reg1_out      MOVE.L      #ea_D1,A1           ;load string constant into A1
0000605C  4CDF 7CBE               7690                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006060  4E75                    7691                                  RTS
00006062                          7692                                              
00006062  227C 00006921           7693  ea_Dn_SUB_reg2_out      MOVE.L      #ea_D2,A1       ;load string constant into A1
00006068  4CDF 7CBE               7694                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000606C  4E75                    7695                                  RTS
0000606E                          7696                                              
0000606E  227C 00006924           7697  ea_Dn_SUB_reg3_out      MOVE.L      #ea_D3,A1           ;load string constant into A1
00006074  4CDF 7CBE               7698                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006078  4E75                    7699                                  RTS
0000607A                          7700                                              
0000607A  227C 00006927           7701  ea_Dn_SUB_reg4_out      MOVE.L      #ea_D4,A1       ;load string constant into A1
00006080  4CDF 7CBE               7702                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006084  4E75                    7703                                  RTS
00006086                          7704                                              
00006086  227C 0000692A           7705  ea_Dn_SUB_reg5_out      MOVE.L      #ea_D5,A1           ;load string constant into A1
0000608C  4CDF 7CBE               7706                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006090  4E75                    7707                                  RTS
00006092                          7708                                              
00006092  227C 0000692D           7709  ea_Dn_SUB_reg6_out      MOVE.L      #ea_D6,A1           ;load string constant into A1
00006098  4CDF 7CBE               7710                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000609C  4E75                    7711                                  RTS
0000609E                          7712                                              
0000609E  227C 00006930           7713  ea_Dn_SUB_reg7_out      MOVE.L      #ea_D7,A1           ;load string constant into A1
000060A4  4CDF 7CBE               7714                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000060A8  4E75                    7715                                  RTS             
000060AA                          7716                                                                
000060AA                          7717                        
000060AA                          7718  ;------------------------------------------------------------------------------------------------------------------------------------------
000060AA                          7719  ;------------------------------------------------------------------------------------------------------------------------------------------                                              
000060AA                          7720  ;---------------------------------Determine Register----------------------------------------------------------------------------------------
000060AA  4282                    7721  SUB_Dn_ea                   CLR.L       D2              ;clear D2 
000060AC  C4BC 00000E00           7722                  AND.L       #mask_SUB_An_reg,D2     ;load the mask for the register into D2, masks bit 11-9
000060B2                          7723                                                  
000060B2  B4BC 00000000           7724  Dn_ea_SUB_reg0          CMP.L       #match_SUB_reg0,D2      ;check to see if reg equal 0
000060B8  6600 0006               7725                  BNE     Dn_ea_SUB_reg1          ;if not equal got check reg 1
000060BC  6700 0064               7726                  BEQ     Dn_ea_SUB_reg0_out      ;if equal go to output
000060C0                          7727                                                  
000060C0  B4BC 00000200           7728  Dn_ea_SUB_reg1          CMP.L       #match_SUB_reg1,D2      ;check to see if reg equal 1
000060C6  6600 0006               7729                  BNE     Dn_ea_SUB_reg2          ;if not equal got check reg 2
000060CA  6700 0062               7730                  BEQ     Dn_ea_SUB_reg1_out      ;if equal go to output
000060CE                          7731  
000060CE  B4BC 00000400           7732  Dn_ea_SUB_reg2          CMP.L       #match_SUB_reg2,D2      ;check to see if reg equal 2
000060D4  6600 0006               7733                  BNE     Dn_ea_SUB_reg3          ;if not equal got check reg 3
000060D8  6700 0060               7734                  BEQ     Dn_ea_SUB_reg2_out      ;if equal go to output
000060DC                          7735  
000060DC  B4BC 00000600           7736  Dn_ea_SUB_reg3          CMP.L       #match_SUB_reg3,D2      ;check to see if reg equal 3
000060E2  6600 0006               7737                  BNE     Dn_ea_SUB_reg4          ;if not equal got check reg 4
000060E6  6700 005E               7738                  BEQ     Dn_ea_SUB_reg3_out      ;if equal go to output
000060EA                          7739                                                  
000060EA  B4BC 00000800           7740  Dn_ea_SUB_reg4          CMP.L       #match_SUB_reg4,D2      ;check to see if reg equal 4
000060F0  6600 0006               7741                  BNE     Dn_ea_SUB_reg5          ;if not equal got check reg 5
000060F4  6700 005C               7742                  BEQ     Dn_ea_SUB_reg4_out      ;if equal go to output
000060F8                          7743  
000060F8  B4BC 00000A00           7744  Dn_ea_SUB_reg5          CMP.L       #match_SUB_reg5,D2      ;check to see if reg equal 5
000060FE  6600 0006               7745                  BNE     Dn_ea_SUB_reg6          ;if not equal got check reg 6
00006102  6700 005A               7746                  BEQ     Dn_ea_SUB_reg5_out      ;if equal go to output
00006106                          7747  
00006106  B4BC 00000C00           7748  Dn_ea_SUB_reg6          CMP.L       #match_SUB_reg6,D2      ;check to see if reg equal 6
0000610C  6600 0006               7749                  BNE     Dn_ea_SUB_reg7          ;if not equal got check reg 7
00006110  6700 0058               7750                  BEQ     Dn_ea_SUB_reg6_out      ;if equal go to output          
00006114                          7751  
00006114  B4BC 00000E00           7752  Dn_ea_SUB_reg7          CMP.L       #match_SUB_reg7,D2      ;check to see if reg equal 7
0000611A  6700 005A               7753                  BEQ     Dn_ea_SUB_reg7_out      ;if equal go to output
0000611E  6600 D44C               7754                  BNE             ERROR                           ;if not equal to an addresssing mode, pritn error
00006122                          7755                                  
00006122                          7756  
00006122                          7757  ;--------------------Data Output-----------------------
00006122  227C 0000691B           7758  Dn_ea_SUB_reg0_out        MOVE.L        #ea_D0,A1               ;load string constant into A1
00006128  4EB9 00006182           7759                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
0000612E                          7760                                              
0000612E  227C 0000691E           7761  Dn_ea_SUB_reg1_out        MOVE.L        #ea_D1,A1               ;load string constant into A1
00006134  4EB9 00006182           7762                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
0000613A                          7763                                              
0000613A  227C 00006921           7764  Dn_ea_SUB_reg2_out        MOVE.L        #ea_D2,A1               ;load string constant into A1
00006140  4EB9 00006182           7765                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006146                          7766                                              
00006146  227C 00006924           7767  Dn_ea_SUB_reg3_out        MOVE.L        #ea_D3,A1               ;load string constant into A1
0000614C  4EB9 00006182           7768                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006152                          7769                                              
00006152  227C 00006927           7770  Dn_ea_SUB_reg4_out        MOVE.L        #ea_D4,A1               ;load string constant into A1
00006158  4EB9 00006182           7771                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
0000615E                          7772                                              
0000615E  227C 0000692A           7773  Dn_ea_SUB_reg5_out        MOVE.L        #ea_D5,A1               ;load string constant into A1
00006164  4EB9 00006182           7774                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
0000616A                          7775                                              
0000616A  227C 0000692D           7776  Dn_ea_SUB_reg6_out        MOVE.L        #ea_D6,A1               ;load string constant into A1
00006170  4EB9 00006182           7777                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006176                          7778                                              
00006176  227C 00006930           7779  Dn_ea_SUB_reg7_out            MOVE.L        #ea_D7,A1               ;load string constant into A1
0000617C  4EB9 00006182           7780                                JSR           SUB_determine_second_operand        ;jump to subroutine to determine second operand
00006182                          7781                                              
00006182                          7782  
00006182                          7783  ;------------------------------------------------------Determine Second Operand----------------------------------------------------------------
00006182  4241                    7784  SUB_determine_second_operand         CLR               D1                             ;clear D1 to load new mask                                
00006184  C2BC 00000038           7785                                       AND.L             #mask_SUB_ea_mode,D1           ;move the mask to D1
0000618A                          7786  
0000618A                          7787  ;--------------Determine EFFECTIVE ADDRESS Mode-----------------------------------                
0000618A  B2BC 00000010           7788  SUB_Dn_ea_add_reg_indir              CMP.L           #match_SUB_An_indir,D1                ;check to see if mode is add reg indir
00006190  6600 0006               7789                                       BNE             SUB_Dn_ea_add_reg_indir_predec        ;if not, go check add reg indir predec 
00006194  6700 0048               7790                                       BEQ             SUB_Dn_ea_An_indir_reg                ;if equal go figure out the register           
00006198                          7791             
00006198  B2BC 00000020           7792  SUB_Dn_ea_add_reg_indir_predec       CMP.L           #match_SUB_An_indir_predec,D1         ;check to see if mode is add reg indor w/ postinc
0000619E  6600 0006               7793                                       BNE             SUB_Dn_ea_add_reg_indir_postinc       ;if not go check add reg indir/predec
000061A2  6700 01DA               7794                                       BEQ             SUB_Dn_ea_An_indir_predec             ;if equal go figure out the register
000061A6                          7795                        
000061A6  B2BC 00000018           7796  SUB_Dn_ea_add_reg_indir_postinc      CMP.L           #match_SUB_An_indir_postinc,D1        ;check to see if mode is add reg indir w/predec
000061AC  6600 0006               7797                                       BNE             SUB_Dn_ea_abs_add_word                ;if not go check abs add word
000061B0  6700 00FC               7798                                       BEQ             SUB_Dn_ea_An_indir_postinc_reg        ;if equal go figure out the register
000061B4                          7799  
000061B4  C4BC 0000003F           7800  SUB_Dn_ea_abs_add_word               AND.L           #mask_SUB_abs_add,D2                  ;load mask to determine if abs add word or long
000061BA                          7801                                   
000061BA  B4BC 00000038           7802                                       CMP.L           #match_SUB_abs_add_word,D2            ;check if abs add word
000061C0  2A18                    7803                                       MOVE.L          (A0)+,D5                              ;pull the next word instruction that holds the address
000061C2  6600 0006               7804                                       BNE             SUB_Dn_ea_abs_add_long                ;if not go check abs add long
000061C6  6700 0286               7805                                       BEQ             SUB_Dn_ea_abs_add_word_out            ;if equal go to output
000061CA                          7806    
000061CA  B4BC 00000039           7807  SUB_Dn_ea_abs_add_long               CMP.L           #match_SUB_abs_add_long,D2            ;check to see if abs add long
000061D0  6700 028A               7808                                       BEQ             SUB_Dn_ea_abs_add_long_out            ;if equal go to output
000061D4  6600 D396               7809                                       BNE             ERROR                                 ;if not equal go to error mesage sub routine
000061D8                          7810  
000061D8                          7811  
000061D8                          7812  ;--------------------Determine EFFECTIVE ADDRESS Register----------------------------------------------------------------------------------------
000061D8                          7813                                   
000061D8  C4BC 0000003F           7814                                   AND.L            #mask_SUB_ea_reg_and_mode,D2         ;load the mask into D2 for the mode and the register
000061DE                          7815  ;------------------Address Register Indirect-----------------------
000061DE  B4BC 00000010           7816  SUB_Dn_ea_An_indir_reg           CMP.L           #match_SUB_An_indir_r0,D2              ;check reg is equal to 0
000061E4  6600 0006               7817                                   BNE             SUB_Dn_ea_An_indir_reg1                ;if not try reg 1
000061E8  6700 0064               7818                                   BEQ             SUB_Dn_ea_An_indir_reg0_out            ;if equal go to output subroutine
000061EC                          7819  
000061EC  B4BC 00000011           7820  SUB_Dn_ea_An_indir_reg1          CMP.L           #match_SUB_An_indir_r1,D2              ;check reg is equal to 1
000061F2  6600 0006               7821                                   BNE             SUB_Dn_ea_An_indir_reg2                ;if not try reg 2
000061F6  6700 0062               7822                                   BEQ             SUB_Dn_ea_An_indir_reg1_out            ;if equal go to output subroutine
000061FA                          7823  
000061FA  B4BC 00000012           7824  SUB_Dn_ea_An_indir_reg2          CMP.L           #match_SUB_An_indir_r2,D2              ;check reg is equal to 2
00006200  6600 0006               7825                                   BNE             SUB_Dn_ea_An_indir_reg3                ;if not try reg 3
00006204  6700 0060               7826                                   BEQ             SUB_Dn_ea_An_indir_reg2_out            ;if equal go to output subroutine
00006208                          7827  
00006208  B4BC 00000013           7828  SUB_Dn_ea_An_indir_reg3          CMP.L           #match_SUB_An_indir_r3,D2              ;check reg is equal to 3
0000620E  6600 0006               7829                                   BNE             SUB_Dn_ea_An_indir_reg4                ;if not try reg 4
00006212  6700 005E               7830                                   BEQ             SUB_Dn_ea_An_indir_reg3_out            ;if equal go to output subroutine
00006216                          7831      
00006216  B4BC 00000014           7832  SUB_Dn_ea_An_indir_reg4          CMP.L           #match_SUB_An_indir_r4,D2              ;check reg is equal to 4
0000621C  6600 0006               7833                                   BNE             SUB_Dn_ea_An_indir_reg5                ;if not try reg 5
00006220  6700 005C               7834                                   BEQ             SUB_Dn_ea_An_indir_reg4_out            ;if equal go to output subroutine
00006224                          7835          
00006224  B4BC 00000015           7836  SUB_Dn_ea_An_indir_reg5          CMP.L           #match_SUB_An_indir_r5,D2              ;check reg is equal to 5
0000622A  6600 0006               7837                                   BNE             SUB_Dn_ea_An_indir_reg6                ;if not try reg 6
0000622E  6700 005A               7838                                   BEQ             SUB_Dn_ea_An_indir_reg5_out            ;if equal go to output subroutine
00006232                          7839  
00006232  B4BC 00000016           7840  SUB_Dn_ea_An_indir_reg6          CMP.L           #match_SUB_An_indir_r6,D2              ;check reg is equal to 6
00006238  6600 0006               7841                                   BNE             SUB_Dn_ea_An_indir_reg7                ;if not try reg 7
0000623C  6700 0058               7842                                   BEQ             SUB_Dn_ea_An_indir_reg6_out            ;if equal go to output subroutine
00006240                          7843  
00006240  B4BC 00000017           7844  SUB_Dn_ea_An_indir_reg7          CMP.L           #match_SUB_An_indir_r7,D2              ;check reg is equal to 7
00006246  6700 005A               7845                                   BEQ             SUB_Dn_ea_An_indir_reg7_out            ;if equal go to output subroutine
0000624A  6600 D320               7846                                   BNE             ERROR                                  ;if not equal to an addresssing mode, pritn error
0000624E                          7847  
0000624E                          7848  ;--------------------Address Register Indirect Output-----------------------
0000624E  227C 0000695B           7849  SUB_Dn_ea_An_indir_reg0_out     MOVE.L      #ea_indir_A0,A1             ;load string constant into A1
00006254  4CDF 7CBE               7850                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006258  4E75                    7851                                      RTS
0000625A                          7852  
0000625A  227C 00006960           7853  SUB_Dn_ea_An_indir_reg1_out     MOVE.L      #ea_indir_A1,A1             ;load string constant into A1
00006260  4CDF 7CBE               7854                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006264  4E75                    7855                                      RTS
00006266                          7856  
00006266  227C 00006965           7857  SUB_Dn_ea_An_indir_reg2_out     MOVE.L      #ea_indir_A2,A1             ;load string constant into A1
0000626C  4CDF 7CBE               7858                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006270  4E75                    7859                                      RTS
00006272                          7860  
00006272  227C 0000696A           7861  SUB_Dn_ea_An_indir_reg3_out     MOVE.L      #ea_indir_A3,A1             ;load string constant into A1
00006278  4CDF 7CBE               7862                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000627C  4E75                    7863                                      RTS
0000627E                          7864  
0000627E  227C 0000696F           7865  SUB_Dn_ea_An_indir_reg4_out     MOVE.L      #ea_indir_A4,A1             ;load string constant into A1
00006284  4CDF 7CBE               7866                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006288  4E75                    7867                                          RTS
0000628A                          7868  
0000628A  227C 00006974           7869  SUB_Dn_ea_An_indir_reg5_out     MOVE.L      #ea_indir_A5,A1             ;load string constant into A1
00006290  4CDF 7CBE               7870                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006294  4E75                    7871                                      RTS
00006296                          7872  
00006296  227C 00006979           7873  SUB_Dn_ea_An_indir_reg6_out     MOVE.L      #ea_indir_A6,A1             ;load string constant into A1
0000629C  4CDF 7CBE               7874                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000062A0  4E75                    7875                                      RTS
000062A2                          7876                                          
000062A2  227C 0000697E           7877  SUB_Dn_ea_An_indir_reg7_out     MOVE.L      #ea_indir_A7,A1             ;load string constant into A1
000062A8  4CDF 7CBE               7878                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000062AC  4E75                    7879                                      RTS
000062AE                          7880  
000062AE                          7881  
000062AE                          7882  ;------------------Address Register Indirect with Post Increment-----------------------
000062AE  B4BC 00000018           7883  SUB_Dn_ea_An_indir_postinc_reg          CMP.L      #match_SUB_An_indir_postinc_r0,D2        ;check reg is equal to 0
000062B4  6600 0006               7884                                          BNE        SUB_Dn_ea_An_indir_pinc_r1          ;if not try reg 1
000062B8  6700 0064               7885                                          BEQ        SUB_Dn_ea_An_indir_pinc_r0_out      ;if equal go to output subroutine
000062BC                          7886  
000062BC  B4BC 00000019           7887  SUB_Dn_ea_An_indir_pinc_r1              CMP.L      #match_SUB_An_indir_postinc_r1,D2        ;check reg is equal to 1
000062C2  6600 0006               7888                                          BNE        SUB_Dn_ea_An_indir_pinc_r2          ;if not try reg 2
000062C6  6700 0062               7889                                          BEQ        SUB_Dn_ea_An_indir_pinc_r1_out      ;if equal go to output subroutine
000062CA                          7890  
000062CA  B4BC 0000001A           7891  SUB_Dn_ea_An_indir_pinc_r2              CMP.L      #match_SUB_An_indir_postinc_r2,D2        ;check reg is equal to 2
000062D0  6600 0006               7892                                          BNE        SUB_Dn_ea_An_indir_pinc_r3          ;if not try reg 3
000062D4  6700 0060               7893                                          BEQ        SUB_Dn_ea_An_indir_pinc_r2_out      ;if equal go to output subroutine
000062D8                          7894  
000062D8  B4BC 0000001B           7895  SUB_Dn_ea_An_indir_pinc_r3              CMP.L      #match_SUB_An_indir_postinc_r3,D2        ;check reg is equal to 3
000062DE  6600 0006               7896                                          BNE        SUB_Dn_ea_An_indir_pinc_r4          ;if not try reg 4
000062E2  6700 005E               7897                                          BEQ        SUB_Dn_ea_An_indir_pinc_r3_out      ;if equal go to output subroutine
000062E6                          7898   
000062E6  B4BC 0000001C           7899  SUB_Dn_ea_An_indir_pinc_r4              CMP.L      #match_SUB_An_indir_postinc_r4,D2        ;check reg is equal to 4
000062EC  6600 0006               7900                                          BNE        SUB_Dn_ea_An_indir_pinc_r5          ;if not try reg 5
000062F0  6700 005C               7901                                          BEQ        SUB_Dn_ea_An_indir_pinc_r4_out      ;if equal go to output subroutine
000062F4                          7902  
000062F4  B4BC 0000001D           7903  SUB_Dn_ea_An_indir_pinc_r5              CMP.L      #match_SUB_An_indir_postinc_r5,D2        ;check reg is equal to 5
000062FA  6600 0006               7904                                          BNE        SUB_Dn_ea_An_indir_pinc_r6          ;if not try reg 6
000062FE  6700 005A               7905                                          BEQ        SUB_Dn_ea_An_indir_pinc_r5_out      ;if equal go to output subroutine
00006302                          7906  
00006302  B4BC 0000001E           7907  SUB_Dn_ea_An_indir_pinc_r6              CMP.L      #match_SUB_An_indir_postinc_r6,D2         ;check reg is equal to 6
00006308  6600 0006               7908                                          BNE        SUB_Dn_ea_An_indir_pinc_r7           ;if not try reg 7
0000630C  6700 0058               7909                                          BEQ        SUB_Dn_ea_An_indir_pinc_r6_out       ;if equal go to output subroutine
00006310                          7910  
00006310  B4BC 0000001F           7911  SUB_Dn_ea_An_indir_pinc_r7              CMP.L      #match_SUB_An_indir_postinc_r7,D2         ;check reg is equal to 7
00006316  6700 005A               7912                                          BEQ        SUB_Dn_ea_An_indir_pinc_r7_out       ;if equal go to output subroutine
0000631A  6600 D250               7913                                          BNE        ERROR                                     ;if not equal to an addresssing mode, pritn error
0000631E                          7914  
0000631E                          7915  
0000631E                          7916  ;--------------------Address Register Indirect with Post Increment Output-----------------------
0000631E  227C 00006983           7917  SUB_Dn_ea_An_indir_pinc_r0_out              MOVE.L     #ea_indir_postinc_A0,A1       ;load string constant into A1
00006324  4CDF 7CBE               7918                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006328  4E75                    7919                                              RTS
0000632A                          7920  
0000632A  227C 00006989           7921  SUB_Dn_ea_An_indir_pinc_r1_out              MOVE.L     #ea_indir_postinc_A1,A1       ;load string constant into A1
00006330  4CDF 7CBE               7922                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006334  4E75                    7923                                              RTS
00006336                          7924  
00006336  227C 0000698F           7925  SUB_Dn_ea_An_indir_pinc_r2_out              MOVE.L     #ea_indir_postinc_A2,A1       ;load string constant into A1
0000633C  4CDF 7CBE               7926                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006340  4E75                    7927                                              RTS
00006342                          7928  
00006342  227C 00006995           7929  SUB_Dn_ea_An_indir_pinc_r3_out              MOVE.L     #ea_indir_postinc_A3,A1       ;load string constant into A1
00006348  4CDF 7CBE               7930                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000634C  4E75                    7931                                              RTS
0000634E                          7932  
0000634E  227C 0000699B           7933  SUB_Dn_ea_An_indir_pinc_r4_out              MOVE.L     #ea_indir_postinc_A4,A1       ;load string constant into A1
00006354  4CDF 7CBE               7934                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006358  4E75                    7935                                              RTS
0000635A                          7936  
0000635A  227C 000069A1           7937  SUB_Dn_ea_An_indir_pinc_r5_out              MOVE.L     #ea_indir_postinc_A5,A1       ;load string constant into A1
00006360  4CDF 7CBE               7938                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006364  4E75                    7939                                              RTS
00006366                          7940  
00006366  227C 000069A7           7941  SUB_Dn_ea_An_indir_pinc_r6_out              MOVE.L     #ea_indir_postinc_A6,A1       ;load string constant into A1
0000636C  4CDF 7CBE               7942                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006370  4E75                    7943                                              RTS
00006372                          7944  
00006372  227C 000069AD           7945  SUB_Dn_ea_An_indir_pinc_r7_out              MOVE.L     #ea_indir_postinc_A7,A1       ;load string constant into A1
00006378  4CDF 7CBE               7946                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000637C  4E75                    7947                                              RTS
0000637E                          7948  
0000637E                          7949  
0000637E                          7950  ;------------------Address Register Indirect with Pre Decrement-----------------------
0000637E  B4BC 00000020           7951  SUB_Dn_ea_An_indir_predec                   CMP.L      #match_SUB_An_indir_predec_reg0,D2       ;check reg is equal to 0
00006384  6600 0006               7952                                              BNE        SUB_Dn_ea_An_indir_pdec_r1           ;if not try reg 1
00006388  6700 0064               7953                                              BEQ        SUB_Dn_ea_An_indir_pdec_r0_out       ;if equal go to output subroutine
0000638C                          7954  
0000638C  B4BC 00000021           7955  SUB_Dn_ea_An_indir_pdec_r1                  CMP.L      #match_SUB_An_indir_predec_reg1,D2       ;check reg is equal to 1
00006392  6600 0006               7956                                              BNE        SUB_Dn_ea_An_indir_pdec_r2           ;if not try reg 2
00006396  6700 0062               7957                                              BEQ        SUB_Dn_ea_An_indir_pdec_r1_out       ;if equal go to output subroutine
0000639A                          7958  
0000639A  B4BC 00000022           7959  SUB_Dn_ea_An_indir_pdec_r2                  CMP.L      #match_SUB_An_indir_predec_reg2,D2       ;check reg is equal to 2
000063A0  6600 0006               7960                                              BNE        SUB_Dn_ea_An_indir_pdec_r3           ;if not try reg 3
000063A4  6700 0060               7961                                              BEQ        SUB_Dn_ea_An_indir_pdec_r2_out       ;if equal go to output subroutine
000063A8                          7962  
000063A8  B4BC 00000023           7963  SUB_Dn_ea_An_indir_pdec_r3                  CMP.L      #match_SUB_An_indir_predec_reg3,D2       ;check reg is equal to 3
000063AE  6600 0006               7964                                              BNE        SUB_Dn_ea_An_indir_pdec_r4           ;if not try reg 4
000063B2  6700 005E               7965                                              BEQ        SUB_Dn_ea_An_indir_pdec_r3_out       ;if equal go to output subroutine
000063B6                          7966  
000063B6  B4BC 00000024           7967  SUB_Dn_ea_An_indir_pdec_r4                  CMP.L      #match_SUB_An_indir_predec_reg4,D2       ;check reg is equal to 4
000063BC  6600 0006               7968                                              BNE        SUB_Dn_ea_An_indir_pdec_r5           ;if not try reg 5
000063C0  6700 005C               7969                                              BEQ        SUB_Dn_ea_An_indir_pdec_r4_out       ;if equal go to output subroutine
000063C4                          7970  
000063C4  B4BC 00000025           7971  SUB_Dn_ea_An_indir_pdec_r5                  CMP.L      #match_SUB_An_indir_predec_reg5,D2       ;check reg is equal to 5
000063CA  6600 0006               7972                                              BNE        SUB_Dn_ea_An_indir_pdec_r6           ;if not try reg 6
000063CE  6700 005A               7973                                              BEQ        SUB_Dn_ea_An_indir_pdec_r5_out       ;if equal go to output subroutine
000063D2                          7974  
000063D2  B4BC 00000026           7975  SUB_Dn_ea_An_indir_pdec_r6                  CMP.L      #match_SUB_An_indir_predec_reg6,D2       ;check reg is equal to 6
000063D8  6600 0006               7976                                              BNE        SUB_Dn_ea_An_indir_pdec_r7           ;if not try reg 7
000063DC  6700 0058               7977                                              BEQ        SUB_Dn_ea_An_indir_pdec_r6_out       ;if equal go to output subroutine
000063E0                          7978  
000063E0  B4BC 00000027           7979  SUB_Dn_ea_An_indir_pdec_r7                  CMP.L      #match_SUB_An_indir_predec_reg7,D2       ;check reg is equal to 7
000063E6  6700 005A               7980                                              BEQ        SUB_Dn_ea_An_indir_pdec_r7_out       ;if equal go to output subroutine
000063EA  6600 D180               7981                                              BNE        ERROR                                    ;if not equal to an addresssing mode, pritn error
000063EE                          7982  
000063EE                          7983  
000063EE                          7984  ;--------------------Address Register Indirect with Pre Decrement Output-----------------------
000063EE  227C 000069B3           7985  SUB_Dn_ea_An_indir_pdec_r0_out              MOVE.L  #ea_indir_predec_A0,A1         ;load string constant into A1
000063F4  4CDF 7CBE               7986                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
000063F8  4E75                    7987                                              RTS
000063FA                          7988                                              
000063FA  227C 000069B9           7989  SUB_Dn_ea_An_indir_pdec_r1_out              MOVE.L  #ea_indir_predec_A1,A1         ;load string constant into A1
00006400  4CDF 7CBE               7990                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006404  4E75                    7991                                              RTS
00006406                          7992  
00006406  227C 000069BF           7993  SUB_Dn_ea_An_indir_pdec_r2_out              MOVE.L  #ea_indir_predec_A2,A1         ;load string constant into A1
0000640C  4CDF 7CBE               7994                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006410  4E75                    7995                                              RTS
00006412                          7996  
00006412  227C 000069C5           7997  SUB_Dn_ea_An_indir_pdec_r3_out              MOVE.L  #ea_indir_predec_A3,A1         ;load string constant into A1
00006418  4CDF 7CBE               7998                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000641C  4E75                    7999                                              RTS
0000641E                          8000  
0000641E  227C 000069CB           8001  SUB_Dn_ea_An_indir_pdec_r4_out              MOVE.L  #ea_indir_predec_A4,A1         ;load string constant into A1
00006424  4CDF 7CBE               8002                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006428  4E75                    8003                                              RTS
0000642A                          8004  
0000642A  227C 000069D1           8005  SUB_Dn_ea_An_indir_pdec_r5_out              MOVE.L  #ea_indir_predec_A5,A1         ;load string constant into A1
00006430  4CDF 7CBE               8006                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006434  4E75                    8007                                              RTS
00006436                          8008  
00006436  227C 000069D7           8009  SUB_Dn_ea_An_indir_pdec_r6_out              MOVE.L  #ea_indir_predec_A6,A1         ;load string constant into A1
0000643C  4CDF 7CBE               8010                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
00006440  4E75                    8011                                              RTS
00006442                          8012  
00006442  227C 000069DD           8013  SUB_Dn_ea_An_indir_pdec_r7_out              MOVE.L  #ea_indir_predec_A7,A1         ;load string constant into A1
00006448  4CDF 7CBE               8014                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000644C  4E75                    8015                                              RTS
0000644E                          8016                      
0000644E                          8017                          
0000644E                          8018  ;------------------Absolute Addressing Output-----------------------
0000644E  22FC 000069ED           8019  SUB_Dn_ea_abs_add_word_out        MOVE.L        #ea_$,(A1)+               ;load $ for hex and increment A1
00006454  22C5                    8020                                        MOVE.L        D5,(A1)+                  ;load address                  
00006456  4CDF 7CBE               8021                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000645A  4E75                    8022                                        RTS                                     ;return to subroutine
0000645C                          8023                                             
0000645C                          8024  
0000645C  2A18                    8025  SUB_Dn_ea_abs_add_long_out            MOVE.L        (A0)+,D5                   ;pull the next long instruction that holds the address
0000645E  22FC 000069ED           8026                                        MOVE.L        #ea_$,(A1)+                ;load $ for hex and increment A1
00006464  22C5                    8027                                        MOVE.L        D5,(A1)+                   ;load address                  
00006466  4CDF 7CBE               8028                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000646A  4E75                    8029                                        RTS                                      ;return to subroutine  
0000646C                          8030  
0000646C                          8031                                            
0000646C                          8032  ;---------------Immediate Addresing--------------------------
0000646C  2A18                    8033  SUB_Dn_ea_immediate_add_out           MOVE.L        (A0)+,D5                       ;capture the immediate address
0000646E  BCBC 000000FC           8034                        CMP.L         #match_SUB_imm_add_word,D6     ;check to see if need to pull word
00006474  2A18                    8035                        MOVE.L        (A0)+,D5                       ;pull the word
00006476  6700 0006               8036                                        BEQ           SUB_Dn_ea_imm_add_w            ;if equal go pull word    
0000647A  6600 0010               8037                        BNE           SUB_Dn_ea_imm_add_l            ;if not equal, go check long
0000647E                          8038                                           
0000647E  22FC 000069ED           8039  SUB_Dn_ea_imm_add_w                   MOVE.L        #ea_$,(A1)+                    ;load the $
00006484  32C5                    8040                                        MOVE.W        D5,(A1)+                       ;load the word address                           
00006486  4CDF 7CBE               8041                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000648A  4E75                    8042                                        RTS
0000648C                          8043                                           
0000648C  2A18                    8044  SUB_Dn_ea_imm_add_l                   MOVE.L        (A0)+,D5                       ;pull the long and increase the pointer
0000648E  22FC 000069ED           8045                                        MOVE.L        #ea_$,(A1)+                    ;load the $
00006494  2245                    8046                                        MOVE.L        D5,A1                          ;move to A1
00006496  4CDF 7CBE               8047                                       MOVEM.L           (SP)+, D1-D5/D7/A2-A6
0000649A  4E75                    8048                                        RTS
0000649C                          8049  
0000649C  =000001C0               8050  mask_opmode                     EQU             $01C0            ;mask for the opmode to determine operand order
0000649C                          8051  
0000649C  =00000038               8052  mask_SUB_ea_mode        EQU     $0038
0000649C  =0000003F               8053  mask_SUB_abs_add        EQU     $003F
0000649C  =0000003F               8054  mask_SUB_ea_reg_and_mode    EQU     $003F
0000649C  =00000E00               8055  mask_SUB_An_reg         EQU     $0E00
0000649C                          8056  
0000649C                          8057  
0000649C  =00000100               8058  match_SUB_b_ea_Dn               EQU             $0100            ;match for ea,Dn byte size
0000649C  =00000140               8059  match_SUB_w_ea_Dn               EQU             $0140            ;match for ea,Dn word size
0000649C  =00000180               8060  match_SUB_l_ea_Dn               EQU             $0180            ;match for ea,Dn long size
0000649C                          8061  
0000649C  =00000000               8062  match_SUB_b_Dn_ea               EQU             $0000            ;match for Dn,ea byte size
0000649C  =00000040               8063  match_SUB_w_Dn_ea               EQU             $0040            ;match for Dn,ea word size
0000649C  =00000080               8064  match_SUB_l_Dn_ea               EQU             $0080            ;match for Dn,ea long size
0000649C                          8065  
0000649C                          8066  
0000649C                          8067  
0000649C  =00000000               8068  match_SUB_Dn            EQU     $0000
0000649C  =00000008               8069  match_SUB_An            EQU     $0008
0000649C  =00000010               8070  match_SUB_An_indir      EQU     $0010
0000649C  =00000020               8071  match_SUB_An_indir_predec   EQU     $0020
0000649C  =00000018               8072  match_SUB_An_indir_postinc  EQU     $0018
0000649C  =00000038               8073  match_SUB_abs_add_word      EQU     $0038
0000649C  =00000039               8074  match_SUB_abs_add_long      EQU     $0039
0000649C                          8075  
0000649C  =00000000               8076  match_SUB_D0            EQU     $0000
0000649C  =00000001               8077  match_SUB_D1            EQU     $0001
0000649C  =00000002               8078  match_SUB_D2            EQU     $0002
0000649C  =00000003               8079  match_SUB_D3            EQU     $0003
0000649C  =00000004               8080  match_SUB_D4            EQU     $0004
0000649C  =00000005               8081  match_SUB_D5            EQU     $0005
0000649C  =00000006               8082  match_SUB_D6            EQU     $0006
0000649C  =00000007               8083  match_SUB_D7            EQU     $0007
0000649C                          8084  
0000649C  =00000008               8085  match_SUB_A0            EQU     $0008
0000649C  =00000009               8086  match_SUB_A1            EQU     $0009
0000649C  =0000000A               8087  match_SUB_A2            EQU     $000A
0000649C  =0000000B               8088  match_SUB_A3            EQU     $000B
0000649C  =0000000C               8089  match_SUB_A4            EQU     $000C
0000649C  =0000000D               8090  match_SUB_A5            EQU     $000D
0000649C  =0000000E               8091  match_SUB_A6            EQU     $000E
0000649C  =0000000F               8092  match_SUB_A7            EQU     $000F
0000649C                          8093  
0000649C  =00000010               8094  match_SUB_An_indir_r0       EQU     $0010
0000649C  =00000011               8095  match_SUB_An_indir_r1       EQU     $0011
0000649C  =00000012               8096  match_SUB_An_indir_r2       EQU     $0012
0000649C  =00000013               8097  match_SUB_An_indir_r3       EQU     $0013
0000649C  =00000014               8098  match_SUB_An_indir_r4       EQU     $0014
0000649C  =00000015               8099  match_SUB_An_indir_r5       EQU     $0015
0000649C  =00000016               8100  match_SUB_An_indir_r6       EQU     $0016
0000649C  =00000017               8101  match_SUB_An_indir_r7       EQU     $0017
0000649C                          8102  
0000649C  =00000018               8103  match_SUB_An_indir_postinc_r0   EQU     $0018
0000649C  =00000019               8104  match_SUB_An_indir_postinc_r1   EQU     $0019
0000649C  =0000001A               8105  match_SUB_An_indir_postinc_r2   EQU     $001A
0000649C  =0000001B               8106  match_SUB_An_indir_postinc_r3   EQU     $001B
0000649C  =0000001C               8107  match_SUB_An_indir_postinc_r4   EQU     $001C
0000649C  =0000001D               8108  match_SUB_An_indir_postinc_r5   EQU     $001D
0000649C  =0000001E               8109  match_SUB_An_indir_postinc_r6   EQU     $001E
0000649C  =0000001F               8110  match_SUB_An_indir_postinc_r7   EQU     $001F
0000649C                          8111  
0000649C  =00000020               8112  match_SUB_An_indir_predec_reg0  EQU     $0020
0000649C  =00000021               8113  match_SUB_An_indir_predec_reg1  EQU     $0021
0000649C  =00000022               8114  match_SUB_An_indir_predec_reg2  EQU     $0022
0000649C  =00000023               8115  match_SUB_An_indir_predec_reg3  EQU     $0023
0000649C  =00000024               8116  match_SUB_An_indir_predec_reg4  EQU     $0024
0000649C  =00000025               8117  match_SUB_An_indir_predec_reg5  EQU     $0025
0000649C  =00000026               8118  match_SUB_An_indir_predec_reg6  EQU     $0026
0000649C  =00000027               8119  match_SUB_An_indir_predec_reg7  EQU     $0027
0000649C                          8120  
0000649C  =0000003C               8121  match_SUB_imm_add               EQU             $003C
0000649C  =000000FC               8122  match_SUB_imm_add_word          EQU             $00FC
0000649C  =000001FC               8123  match_SUB_imm_add_long          EQU             $01FC
0000649C                          8124  
0000649C  =00000000               8125  match_SUB_reg0          EQU     $0000
0000649C  =00000200               8126  match_SUB_reg1          EQU     $0200
0000649C  =00000400               8127  match_SUB_reg2          EQU     $0400
0000649C  =00000600               8128  match_SUB_reg3          EQU     $0600
0000649C  =00000800               8129  match_SUB_reg4          EQU     $0800
0000649C  =00000A00               8130  match_SUB_reg5          EQU     $0A00
0000649C  =00000C00               8131  match_SUB_reg6          EQU     $0C00
0000649C  =00000E00               8132  match_SUB_reg7          EQU     $0E00
0000649C                          8133  
0000649C                          8134  
0000649C                          8135  
0000649C                          8136  
0000649C                          8137  -------------------- end include --------------------
0000649C                          8138              INCLUDE 'EA Masks.x68'
0000649C                          8139  
0000649C  =00000FFF               8140  mask_MOVE_EA                EQU     $0FFF
0000649C  =00000E00               8141  mask_MOVE_dst_reg           EQU     $0E00
0000649C  =000001C0               8142  mask_MOVE_dst_mode          EQU     $01C0
0000649C  =00000038               8143  mask_MOVE_src_reg           EQU     $0038
0000649C  =00000007               8144  mask_MOVE_src_mode          EQU     $0007
0000649C                          8145  
0000649C  =00000E3F               8146  mask_MOVEA_EA               EQU     $0E3F
0000649C  =00000E00               8147  mask_MOVEA_dst_reg          EQU     $0E00
0000649C  =00000038               8148  mask_MOVEA_src_mode         EQU     $0038
0000649C  =00000007               8149  mask_MOVEA_src_reg          EQU     $0007
0000649C                          8150  
0000649C  =00000EFF               8151  mask_MOVEQ_EA               EQU     $0EFF
0000649C  =00000E00               8152  mask_MOVEQ_reg              EQU     $0E00
0000649C  =000000FF               8153  mask_MOVEQ_data             EQU     $00FF
0000649C                          8154  
0000649C  =0000047F               8155  mask_MOVEM_EA               EQU     $047F       
0000649C  =00000400               8156  mask_MOVEM_direct           EQU     $0400
0000649C  =00000040               8157  mask_MOVEM_size             EQU     $0040
0000649C                          8158  ;using predecrement bits go from 15-0 15 = D0, 0 = A7
0000649C                          8159  ;using post increment bits ggo from 15-0, 15 = A7, 0 = D0
0000649C                          8160  ;the low order bit is the register transfered first
0000649C  =00000007               8161  mask_MOVEM_ea_reg           EQU     $0007
0000649C                          8162  
0000649C  =00000FFF               8163  mask_ADD_EA                 EQU     $0FFF
0000649C  =00000E00               8164  mask_ADD_reg                EQU     $0E00
0000649C  =000001C0               8165  mask_ADD_opmode             EQU     $01C0
0000649C  =00000007               8166  mask_ADD_ea_reg             EQU     $0007
0000649C                          8167  
0000649C  =00000FFF               8168  mask_ADDA_EA                EQU     $0FFF
0000649C  =00000E00               8169  mask_ADDA_reg               EQU     $0E00
0000649C  =000001C0               8170  mask_ADDA_opmode            EQU     $01C0
0000649C  =00000038               8171  mask_ADDA_ea_mode           EQU     $0038
0000649C  =00000007               8172  mask_ADDA_ea_reg            EQU     $0007
0000649C                          8173  
0000649C  =00000EFF               8174  mask_ADDQ_EA                EQU     $0EFF
0000649C  =00000E00               8175  mask_ADDQ_data              EQU     $0E00
0000649C  =000000C0               8176  mask_ADDQ_size              EQU     $00C0
0000649C  =00000038               8177  mask_ADDQ_ea_mode           EQU     $0038
0000649C  =00000007               8178  mask_ADDQ_ea_reg            EQU     $0007
0000649C                          8179  
0000649C  =00000FFF               8180  mask_SUB_EA                 EQU     $0FFF
0000649C  =00000E00               8181  mask_SUB_reg                EQU     $0E00
0000649C  =000001C0               8182  mask_SUB_opmode             EQU     $01C0
0000649C  =00000038               8183  mask_SUB_ea_mode            EQU     $0038
0000649C  =00000007               8184  mask_SUB_ea_reg             EQU     $0007
0000649C                          8185  
0000649C  =00000E3F               8186  mask_LEA_EA                 EQU     $0E3F
0000649C  =00000E00               8187  mask_LEA_reg                EQU     $0E00
0000649C  =00000038               8188  mask_LEA_ea_mode            EQU     $0038
0000649C  =00000007               8189  mask_LEA_ea_reg             EQU     $0007
0000649C                          8190  
0000649C  =00000FFF               8191  mask_AND_EA                 EQU     $0FFF
0000649C  =00000E00               8192  mask_AND_reg                EQU     $0E00
0000649C  =000001C0               8193  mask_AND_opmode             EQU     $01C0
0000649C  =00000038               8194  mask_AND_ea_mode            EQU     $0038
0000649C  =00000007               8195  mask_AND_ea_reg             EQU     $0007
0000649C                          8196  
0000649C  =00000FFF               8197  mask_OR_EA                  EQU     $0FFF
0000649C  =00000E00               8198  mask_OR_reg                 EQU     $0E00
0000649C  =000001C0               8199  mask_OR_opmode              EQU     $01C0
0000649C  =00000038               8200  mask_OR_ea_mode             EQU     $0038
0000649C  =00000007               8201  mask_OR_ea_reg              EQU     $0007
0000649C                          8202  
0000649C  =000000FF               8203  mask_NOT_EA                 EQU     $00FF
0000649C  =000000C0               8204  mask_NOT_size               EQU     $00C0
0000649C  =00000038               8205  mask_NOT_ea_mode            EQU     $0038
0000649C  =00000007               8206  mask_NOT_ea_reg             EQU     $0007
0000649C                          8207  
0000649C  =0000013F               8208  mask_ASR_mem_shift_EA       EQU     $013F
0000649C  =00000100               8209  mask_ASR_mem_shift_direct   EQU     $0100
0000649C  =00000038               8210  mask_ASR_mem_shift_ea_mode  EQU     $0038
0000649C  =00000007               8211  mask_ASR_mem_shift_ea_reg   EQU     $0007
0000649C                          8212  
0000649C  =0000013F               8213  mask_ASL_mem_shift_EA       EQU     $013F
0000649C  =00000100               8214  mask_ASL_mem_shift_direct   EQU     $0100
0000649C  =00000038               8215  mask_ASL_mem_shift_ea_mode  EQU     $0038
0000649C  =00000007               8216  mask_ASL_mem_shift_ea_reg   EQU     $0007
0000649C                          8217  
0000649C  =00000FE7               8218  mask_ASR_reg_shift_EA       EQU     $0FE7
0000649C  =00000E00               8219  mask_ASR_reg_shift_count    EQU     $0E00
0000649C  =00000100               8220  mask_ASR_reg_shift_direct   EQU     $0100
0000649C  =000000C0               8221  mask_ASR_reg_shift_size     EQU     $00C0
0000649C  =00000020               8222  mask_ASR_reg_shift_ir       EQU     $0020
0000649C  =00000007               8223  mask_ASR_reg_shift_reg      EQU     $0007
0000649C                          8224  
0000649C  =00000FE7               8225  mask_ASL_reg_shift_EA       EQU     $0FE7
0000649C  =00000E00               8226  mask_ASL_reg_shift_count    EQU     $0E00
0000649C  =00000100               8227  mask_ASL_reg_shift_direct   EQU     $0100
0000649C  =000000C0               8228  mask_ASL_reg_shift_size     EQU     $00C0
0000649C  =00000020               8229  mask_ASL_reg_shift_ir       EQU     $0020
0000649C  =00000007               8230  mask_ASL_reg_shift_reg      EQU     $0007
0000649C                          8231  
0000649C  =0000013F               8232  mask_LSR_mem_shift_EA       EQU     $013F
0000649C  =00000100               8233  mask_LSR_mem_shift_direct   EQU     $0100
0000649C  =00000038               8234  mask_LSR_mem_shift_ea_mode  EQU     $0038
0000649C  =00000007               8235  mask_LSR_mem_shift_ea_reg   EQU     $0007
0000649C                          8236  
0000649C  =0000013F               8237  mask_LSL_mem_shift_EA       EQU     $013F
0000649C  =00000100               8238  mask_LSL_mem_shift_direct   EQU     $0100
0000649C  =00000038               8239  mask_LSL_mem_shift_ea_mode  EQU     $0038
0000649C  =00000007               8240  mask_LSL_mem_shift_ea_reg   EQU     $0007
0000649C                          8241  
0000649C  =00000FE7               8242  mask_LSR_reg_shift_EA       EQU     $0FE7
0000649C  =00000E00               8243  mask_LSR_reg_shift_count    EQU     $0E00
0000649C  =00000100               8244  mask_LSR_reg_shift_direct   EQU     $0100
0000649C  =000000C0               8245  mask_LSR_reg_shift_size     EQU     $00C0
0000649C  =00000020               8246  mask_LSR_reg_shift_ir       EQU     $0020
0000649C  =00000007               8247  mask_LSR_reg_shift_reg      EQU     $0007
0000649C                          8248  
0000649C  =00000FE7               8249  mask_LSL_reg_shift_EA       EQU     $0FE7
0000649C  =00000E00               8250  mask_LSL_reg_shift_count    EQU     $0E00
0000649C  =00000100               8251  mask_LSL_reg_shift_direct   EQU     $0100
0000649C  =000000C0               8252  mask_LSL_reg_shift_sIze     EQU     $00C0
0000649C  =00000020               8253  mask_LSL_reg_shift_ir       EQU     $0020
0000649C  =00000007               8254  mask_LSL_reg_shift_reg      EQU     $0007
0000649C                          8255  
0000649C                          8256  
0000649C  =0000013F               8257  mask_ROR_mem_rot_EA         EQU     $013F
0000649C  =00000100               8258  mask_ROR_mem_rot_direct     EQU     $0100
0000649C  =00000038               8259  mask_ROR_mem_rot_ea_mode    EQU     $0038
0000649C  =00000007               8260  mask_ROR_mem_rot_ea_reg     EQU     $0007
0000649C                          8261  
0000649C  =0000013F               8262  mask_ROL_mem_rot_EA         EQU     $013F
0000649C  =00000100               8263  mask_ROL_mem_rot_direct     EQU     $0100
0000649C  =00000038               8264  mask_ROL_mem_rot_ea_mode    EQU     $0038
0000649C  =00000007               8265  mask_ROL_mem_rot_ea_reg     EQU     $0007
0000649C                          8266  
0000649C  =00000FE7               8267  mask_ROR_reg_rot_EA         EQU     $0FE7
0000649C  =00000E00               8268  mask_ROR_reg_rot_count      EQU     $0E00
0000649C  =00000100               8269  mask_ROR_reg_rot_direct     EQU     $0100
0000649C  =000000C0               8270  mask_ROR_reg_rot_size       EQU     $00C0
0000649C  =00000020               8271  mask_ROR_reg_rot_ir         EQU     $0020
0000649C  =00000007               8272  mask_ROR_reg_rot_reg        EQU     $0007
0000649C                          8273  
0000649C  =00000FE7               8274  mask_ROL_reg_rot_EA         EQU     $0FE7
0000649C  =00000E00               8275  mask_ROL_reg_rot_count      EQU     $0E00
0000649C  =00000100               8276  mask_ROL_reg_rot_direct     EQU     $0100
0000649C  =00000C00               8277  mask_ROL_reg_rot_size       EQU     $0C00
0000649C  =00000020               8278  mask_ROL_reg_rot_ir         EQU     $0020
0000649C  =00000007               8279  mask_ROL_reg_rot_reg        EQU     $0007
0000649C                          8280  
0000649C  =00000FFF               8281  mask_Bcc_EA                 EQU     $0FFF
0000649C  =00000E00               8282  mask_Bcc_cond               EQU     $0E00
0000649C  =000000FF               8283  mask_Bcc_displace           EQU     $00FF
0000649C                          8284  
0000649C  =00000F00               8285  mask_BLE_EA                 EQU     $0F00       ;code for LE condition is 1111
0000649C  =000000FF               8286  mask_BLE_displace           EQU     $00FF
0000649C                          8287  
0000649C  =00000F00               8288  mask_BGT_EA                 EQU     $0F00       ;code for GT condition is 1110
0000649C  =000000FF               8289  mask_BGT_displace           EQU     $00FF
0000649C                          8290  
0000649C  =0000003F               8291  mask_JSR_EA                 EQU     $003F
0000649C  =00000038               8292  mask_JSR_ea_mode            EQU     $0038
0000649C  =00000007               8293  mask_JSR_ea_reg             EQU     $0007
0000649C                          8294  
0000649C  =000000FF               8295  mask_BRA_EA                 EQU     $00FF
0000649C                          8296  
0000649C                          8297  
0000649C                          8298  -------------------- end include --------------------
0000649C                          8299              INCLUDE 'variables.X68'
0000649C  =0000F000               8300  mask_opcode     EQU     $F000
0000649C  =0000C000               8301  mask_MOVE       EQU     $C000
0000649C  =000001C0               8302  mask_MOVE_A     EQU     $01C0
0000649C  =0000F1C0               8303  mask_LEA        EQU     $F1C0
0000649C  =0000FFC0               8304  mask_JSR        EQU     $FFC0
0000649C  =0000FF00               8305  mask_NOT        EQU     $FF00
0000649C  =0000F0C0               8306  mask_ADDA       EQU     $F0C0
0000649C  =0000FF00               8307  mask_BCC        EQU     $FF00
0000649C  =0000FFC0               8308  mask_SHFT_M     EQU     $FFC0
0000649C  =0000F118               8309  mask_SHFT_R     EQU     $F118
0000649C  =000000FF               8310  mask_BCC_size   EQU     $00FF
0000649C  =0000FF80               8311  mask_MOVEM      EQU     $FF80
0000649C  =00000000               8312  match_MOVE       EQU     $0000
0000649C  =00001000               8313  match_MOVEB      EQU     $1000
0000649C  =00003000               8314  match_MOVEW      EQU     $3000
0000649C  =00002000               8315  match_MOVEL      EQU     $2000
0000649C  =00000040               8316  match_MOVEA      EQU     $0040
0000649C  =00007000               8317  match_MOVEQ      EQU     $7000
0000649C  =00004000               8318  match_G0100      EQU     $4000
0000649C  =00004E71               8319  match_NOP        EQU     $4E71
0000649C  =00004E75               8320  match_RTS        EQU     $4E75
0000649C  =000041C0               8321  match_LEA        EQU     $41C0
0000649C  =00004E80               8322  match_JSR        EQU     $4E80
0000649C  =00004600               8323  match_NOT        EQU     $4600
0000649C  =0000D000               8324  match_G1101      EQU     $D000
0000649C  =0000D0C0               8325  match_ADDA       EQU     $D0C0
0000649C  =00006000               8326  match_G0110      EQU     $6000
0000649C  =00006E00               8327  match_BGT        EQU     $6E00
0000649C  =00006700               8328  match_BEQ        EQU     $6700
0000649C  =00006F00               8329  match_BLE        EQU     $6F00
0000649C  =00006000               8330  match_BRA        EQU     $6000
0000649C  =0000E000               8331  match_G1110      EQU     $E000
0000649C  =0000E3C0               8332  match_LSL_M      EQU     $E3C0
0000649C  =0000E2C0               8333  match_LSR_M      EQU     $E2C0
0000649C  =0000E1C0               8334  match_ASL_M      EQU     $E1C0
0000649C  =0000E0C0               8335  match_ASR_M      EQU     $E0C0
0000649C  =0000E7C0               8336  match_ROL_M      EQU     $E7C0
0000649C  =0000E6C0               8337  match_ROR_M      EQU     $E6C0
0000649C  =0000E108               8338  match_LSL_R      EQU     $E108
0000649C  =0000E008               8339  match_LSR_R      EQU     $E008
0000649C  =0000E100               8340  match_ASL_R      EQU     $E100
0000649C  =0000E000               8341  match_ASR_R      EQU     $E000
0000649C  =0000E118               8342  match_ROL_R      EQU     $E118
0000649C  =0000E018               8343  match_ROR_R      EQU     $E018
0000649C  =00005000               8344  match_ADDQ       EQU     $5000
0000649C  =00009000               8345  match_SUB        EQU     $9000
0000649C  =0000C000               8346  match_AND        EQU     $C000
0000649C  =00008000               8347  match_OR         EQU     $8000
0000649C  =00004880               8348  match_MOVEM_RM   EQU     $4880
0000649C  =00004C80               8349  match_MOVEM_MR   EQU     $4C80
0000649C  =00003000               8350  mask_size_MOVES     EQU     $3000
0000649C  =000000C0               8351  mask_size_NOT       EQU     $00C0
0000649C  =00000100               8352  mask_size_ADDA      EQU     $0100
0000649C  =000000C0               8353  mask_size_ADD       EQU     $00C0
0000649C  =000000C0               8354  mask_size_shifts    EQU     $00C0
0000649C  =000000C0               8355  mask_size_SUB       EQU     $00C0
0000649C  =000000C0               8356  mask_size_logic     EQU     $00C0
0000649C  =00000040               8357  mask_size_MOVEM     EQU     $0040
0000649C  =0000F100               8358  mask_size_MOVEQ     EQU     $F100
0000649C  =00001000               8359  m_size_B_MOVES      EQU     $1000
0000649C  =00003000               8360  m_size_W_MOVES      EQU     $3000
0000649C  =00002000               8361  m_size_L_MOVES      EQU     $2000
0000649C  =00000000               8362  m_size_B_NOT        EQU     $0000
0000649C  =00000040               8363  m_size_W_NOT        EQU     $0040
0000649C  =00000080               8364  m_size_L_NOT        EQU     $0080
0000649C  =00000000               8365  m_size_W_ADDA       EQU     $0000
0000649C  =00000100               8366  m_size_L_ADDA       EQU     $0100
0000649C  =00000000               8367  m_size_B_ADD        EQU     $0000
0000649C  =00000040               8368  m_size_W_ADD        EQU     $0040
0000649C  =00000080               8369  m_size_L_ADD        EQU     $0080
0000649C  =00000000               8370  m_size_B_shfts      EQU     $0000
0000649C  =00000040               8371  m_size_W_shfts      EQU     $0040
0000649C  =00000080               8372  m_size_L_shfts      EQU     $0080
0000649C  =00000000               8373  m_size_B_SUB        EQU     $0000
0000649C  =00000040               8374  m_size_W_SUB        EQU     $0040
0000649C  =00000080               8375  m_size_L_SUB        EQU     $0080
0000649C  =00000000               8376  m_size_B_logic      EQU     $0000
0000649C  =00000040               8377  m_size_W_logic      EQU     $0040
0000649C  =00000080               8378  m_size_L_logic      EQU     $0080
0000649C  =000000FF               8379  m_size_L_bcc        EQU     $00FF
0000649C  =00000000               8380  m_size_W_bcc        EQU     $0000
0000649C  =00000000               8381  m_size_W_MOVEM      EQU     $0000
0000649C  =00000040               8382  m_size_L_MOVEM      EQU     $0040
0000649C  =00007000               8383  m_size_L_MOVEQ      EQU     $7000
0000649C  =00000001               8384  byte_size           EQU     1
0000649C  =00000002               8385  word_size           EQU     2
0000649C  =00000003               8386  long_size           EQU     3
0000649C  =00000000               8387  no_size             EQU     0
0000649C  =FFFFFFFF               8388  not_hex             EQU     $FFFFFFFF
0000649C  =00000000               8389  hex_clear           EQU     $00000000
0000649C  =00007000               8390  start_Adr           EQU     $00007000
0000649C  =000073BA               8391  end_Adr             EQU     $000073BA
0000649C  =00000038               8392  mask_ADDA_ea_mode                       EQU         $0038
0000649C  =0000003F               8393  mask_ADDA_abs_add                       EQU         $003F
0000649C  =0000003F               8394  mask_ADDA_ea_reg_and_mode               EQU         $003F
0000649C  =00000E00               8395  mask_ADDA_An_reg                        EQU         $0E00
0000649C                          8396  
0000649C  =00000000               8397  match_ADDA_Dn                           EQU         $0000
0000649C  =00000008               8398  match_ADDA_An                           EQU         $0008
0000649C  =00000010               8399  match_ADDA_An_indir                     EQU         $0010
0000649C  =00000020               8400  match_ADDA_An_indir_predec              EQU         $0020
0000649C  =00000018               8401  match_ADDA_An_indir_postinc             EQU         $0018
0000649C  =00000038               8402  match_ADDA_abs_add_word                 EQU         $0038
0000649C  =00000039               8403  match_ADDA_abs_add_long                 EQU         $0039
0000649C                          8404  
0000649C  =00000000               8405  match_ADDA_D0                           EQU         $0000
0000649C  =00000001               8406  match_ADDA_D1                           EQU         $0001
0000649C  =00000002               8407  match_ADDA_D2                           EQU         $0002
0000649C  =00000003               8408  match_ADDA_D3                           EQU         $0003
0000649C  =00000004               8409  match_ADDA_D4                           EQU         $0004
0000649C  =00000005               8410  match_ADDA_D5                           EQU         $0005
0000649C  =00000006               8411  match_ADDA_D6                           EQU         $0006
0000649C  =00000007               8412  match_ADDA_D7                           EQU         $0007
0000649C                          8413  
0000649C  =00000008               8414  match_ADDA_A0                           EQU         $0008
0000649C  =00000009               8415  match_ADDA_A1                           EQU         $0009
0000649C  =0000000A               8416  match_ADDA_A2                           EQU         $000A
0000649C  =0000000B               8417  match_ADDA_A3                           EQU         $000B
0000649C  =0000000C               8418  match_ADDA_A4                           EQU         $000C
0000649C  =0000000D               8419  match_ADDA_A5                           EQU         $000D
0000649C  =0000000E               8420  match_ADDA_A6                           EQU         $000E
0000649C  =0000000F               8421  match_ADDA_A7                           EQU         $000F
0000649C                          8422  
0000649C  =00000010               8423  match_ADDA_An_indir_r0                  EQU         $0010
0000649C  =00000011               8424  match_ADDA_An_indir_r1                  EQU         $0011
0000649C  =00000012               8425  match_ADDA_An_indir_r2                  EQU         $0012
0000649C  =00000013               8426  match_ADDA_An_indir_r3                  EQU         $0013
0000649C  =00000014               8427  match_ADDA_An_indir_r4                  EQU         $0014
0000649C  =00000015               8428  match_ADDA_An_indir_r5                  EQU         $0015
0000649C  =00000016               8429  match_ADDA_An_indir_r6                  EQU         $0016
0000649C  =00000017               8430  match_ADDA_An_indir_r7                  EQU         $0017
0000649C                          8431  
0000649C  =00000018               8432  match_ADDA_An_indir_postinc_reg0        EQU         $0018
0000649C  =00000019               8433  match_ADDA_An_indir_postinc_reg1        EQU         $0019
0000649C  =0000001A               8434  match_ADDA_An_indir_postinc_reg2        EQU         $001A
0000649C  =0000001B               8435  match_ADDA_An_indir_postinc_reg3        EQU         $001B
0000649C  =0000001C               8436  match_ADDA_An_indir_postinc_reg4        EQU         $001C
0000649C  =0000001D               8437  match_ADDA_An_indir_postinc_reg5        EQU         $001D
0000649C  =0000001E               8438  match_ADDA_An_indir_postinc_reg6        EQU         $001E
0000649C  =0000001F               8439  match_ADDA_An_indir_postinc_reg7        EQU         $001F
0000649C                          8440  
0000649C  =00000020               8441  match_ADDA_An_indir_predec_reg0         EQU         $0020
0000649C  =00000021               8442  match_ADDA_An_indir_predec_reg1         EQU         $0021
0000649C  =00000022               8443  match_ADDA_An_indir_predec_reg2         EQU         $0022
0000649C  =00000023               8444  match_ADDA_An_indir_predec_reg3         EQU         $0023
0000649C  =00000024               8445  match_ADDA_An_indir_predec_reg4         EQU         $0024
0000649C  =00000025               8446  match_ADDA_An_indir_predec_reg5         EQU         $0025
0000649C  =00000026               8447  match_ADDA_An_indir_predec_reg6         EQU         $0026
0000649C  =00000027               8448  match_ADDA_An_indir_predec_reg7         EQU         $0027
0000649C                          8449  
0000649C  =0000003C               8450  match_imm_add                           EQU         $003C
0000649C  =000000FC               8451  match_imm_add_word                      EQU         $00FC
0000649C  =000001FC               8452  match_imm_add_long                      EQU         $01FC
0000649C                          8453  
0000649C  =00000000               8454  match_ADDA_reg0                         EQU         $0000
0000649C  =00000200               8455  match_ADDA_reg1                         EQU         $0200
0000649C  =00000400               8456  match_ADDA_reg2                         EQU         $0400
0000649C  =00000600               8457  match_ADDA_reg3                         EQU         $0600
0000649C  =00000800               8458  match_ADDA_reg4                         EQU         $0800
0000649C  =00000A00               8459  match_ADDA_reg5                         EQU         $0A00
0000649C  =00000C00               8460  match_ADDA_reg6                         EQU         $0C00
0000649C  =00000E00               8461  match_ADDA_reg7                         EQU         $0E00
0000649C                          8462  
0000649C  =00000038               8463  mask_ADDQ_ea_mode           EQU         $0038
0000649C  =0000003F               8464  mask_ADDQ_abs_add           EQU         $003F
0000649C  =0000003F               8465  mask_ADDQ_ea_reg_and_mode   EQU         $003F
0000649C  =00000E00               8466  mask_ADDQ_reg               EQU         $0E00
0000649C                          8467  
0000649C  =00000000               8468  match_ADDQ_Dn               EQU         $0000
0000649C  =00000008               8469  match_ADDQ_An               EQU         $0008
0000649C  =00000010               8470  match_ADDQ_An_indir         EQU         $0010
0000649C  =00000020               8471  match_ADDQ_An_indir_predec  EQU         $0020
0000649C  =00000018               8472  match_ADDQ_An_indir_postinc EQU         $0018
0000649C  =00000038               8473  match_ADDQ_abs_add_word     EQU         $0038
0000649C  =00000039               8474  match_ADDQ_abs_add_long     EQU         $0039
0000649C                          8475  
0000649C  =00000000               8476  match_ADDQ_D0               EQU         $0000
0000649C  =00000001               8477  match_ADDQ_D1               EQU         $0001
0000649C  =00000002               8478  match_ADDQ_D2               EQU         $0002
0000649C  =00000003               8479  match_ADDQ_D3               EQU         $0003
0000649C  =00000004               8480  match_ADDQ_D4               EQU         $0004
0000649C  =00000005               8481  match_ADDQ_D5               EQU         $0005
0000649C  =00000006               8482  match_ADDQ_D6               EQU         $0006
0000649C  =00000007               8483  match_ADDQ_D7               EQU         $0007
0000649C                          8484  
0000649C  =00000008               8485  match_ADDQ_A0               EQU         $0008
0000649C  =00000009               8486  match_ADDQ_A1               EQU         $0009
0000649C  =0000000A               8487  match_ADDQ_A2               EQU         $000A
0000649C  =0000000B               8488  match_ADDQ_A3               EQU         $000B
0000649C  =0000000C               8489  match_ADDQ_A4               EQU         $000C
0000649C  =0000000D               8490  match_ADDQ_A5               EQU         $000D
0000649C  =0000000E               8491  match_ADDQ_A6               EQU         $000E
0000649C  =0000000F               8492  match_ADDQ_A7               EQU         $000F
0000649C                          8493  
0000649C  =00000010               8494  match_ADDQ_An_indir_r0      EQU         $0010
0000649C  =00000011               8495  match_ADDQ_An_indir_r1      EQU         $0011
0000649C  =00000012               8496  match_ADDQ_An_indir_r2      EQU         $0012
0000649C  =00000013               8497  match_ADDQ_An_indir_r3      EQU         $0013
0000649C  =00000014               8498  match_ADDQ_An_indir_r4      EQU         $0014
0000649C  =00000015               8499  match_ADDQ_An_indir_r5      EQU         $0015
0000649C  =00000016               8500  match_ADDQ_An_indir_r6      EQU         $0016
0000649C  =00000017               8501  match_ADDQ_An_indir_r7      EQU         $0017
0000649C                          8502  
0000649C  =00000018               8503  match_ADDQ_An_indir_postinc_reg0        EQU         $0018
0000649C  =00000019               8504  match_ADDQ_An_indir_postinc_reg1        EQU         $0019
0000649C  =0000001A               8505  match_ADDQ_An_indir_postinc_reg2        EQU         $001A
0000649C  =0000001B               8506  match_ADDQ_An_indir_postinc_reg3        EQU         $001B
0000649C  =0000001C               8507  match_ADDQ_An_indir_postinc_reg4        EQU         $001C
0000649C  =0000001D               8508  match_ADDQ_An_indir_postinc_reg5        EQU         $001D
0000649C  =0000001E               8509  match_ADDQ_An_indir_postinc_reg6        EQU         $001E
0000649C  =0000001F               8510  match_ADDQ_An_indir_postinc_reg7        EQU         $001F
0000649C                          8511  
0000649C  =00000020               8512  match_ADDQ_An_indir_predec_reg0         EQU         $0020
0000649C  =00000021               8513  match_ADDQ_An_indir_predec_reg1         EQU         $0021
0000649C  =00000022               8514  match_ADDQ_An_indir_predec_reg2         EQU         $0022
0000649C  =00000023               8515  match_ADDQ_An_indir_predec_reg3         EQU         $0023
0000649C  =00000024               8516  match_ADDQ_An_indir_predec_reg4         EQU         $0024
0000649C  =00000025               8517  match_ADDQ_An_indir_predec_reg5         EQU         $0025
0000649C  =00000026               8518  match_ADDQ_An_indir_predec_reg6         EQU         $0026
0000649C  =00000027               8519  match_ADDQ_An_indir_predec_reg7         EQU         $0027
0000649C                          8520  
0000649C                          8521  
0000649C  =00000000               8522  match_ADDQ_reg0                         EQU         $0000
0000649C  =00000200               8523  match_ADDQ_reg1                         EQU         $0200
0000649C  =00000400               8524  match_ADDQ_reg2                         EQU         $0400
0000649C  =00000600               8525  match_ADDQ_reg3                         EQU         $0600
0000649C  =00000800               8526  match_ADDQ_reg4                         EQU         $0800
0000649C  =00000A00               8527  match_ADDQ_reg5                         EQU         $0A00
0000649C  =00000C00               8528  match_ADDQ_reg6                         EQU         $0C00
0000649C  =00000E00               8529  match_ADDQ_reg7                         EQU         $0E00
0000649C                          8530  
0000649C                          8531  
0000649C                          8532  
0000649C                          8533  
0000649C                          8534  
0000649C                          8535  
0000649C                          8536  
0000649C                          8537  
0000649C                          8538  -------------------- end include --------------------
0000649C                          8539              INCLUDE 'strings.x68'
0000649C= 4D 4F 56 45 2E 42 00    8540  opcode_MOVEB    DC.B    'MOVE.B',0
000064A3= 4D 4F 56 45 2E 57 00    8541  opcode_MOVEW    DC.B    'MOVE.W',0
000064AA= 4D 4F 56 45 2E 4C 00    8542  opcode_MOVEL    DC.B    'MOVE.L',0
000064B1= 4D 4F 56 45 4D 00       8543  opcode_MOVEM    DC.B    'MOVEM',0
000064B7= 4D 4F 56 45 51 00       8544  opcode_MOVEQ    DC.B    'MOVEQ',0
000064BD= 4D 4F 56 45 41 2E ...   8545  opcode_MOVEAB   DC.B    'MOVEA.B',0
000064C5= 4D 4F 56 45 41 2E ...   8546  opcode_MOVEAW   DC.B    'MOVEA.W',0
000064CD= 4D 4F 56 45 41 2E ...   8547  opcode_MOVEAL   DC.B    'MOVEA.L',0
000064D5= 4E 4F 50 00             8548  opcode_NOP      DC.B    'NOP',0
000064D9= 41 44 44 2E 42 00       8549  opcode_ADDB     DC.B    'ADD.B',0
000064DF= 41 44 44 2E 57 00       8550  opcode_ADDW     DC.B    'ADD.W',0
000064E5= 41 44 44 2E 4C 00       8551  opcode_ADDL     DC.B    'ADD.L',0
000064EB= 41 44 44 41 2E 57 00    8552  opcode_ADDAW    DC.B    'ADDA.W',0
000064F2= 41 44 44 41 2E 4C 00    8553  opcode_ADDAL    DC.B    'ADDA.L',0
000064F9= 41 44 44 51 2E 42 00    8554  opcode_ADDQB    DC.B    'ADDQ.B',0
00006500= 41 44 44 51 2E 57 00    8555  opcode_ADDQW    DC.B    'ADDQ.W',0
00006507= 41 44 44 51 2E 4C 00    8556  opcode_ADDQL    DC.B    'ADDQ.L',0
0000650E= 53 55 42 2E 42 00       8557  opcode_SUBB     DC.B    'SUB.B',0
00006514= 53 55 42 2E 57 00       8558  opcode_SUBW     DC.B    'SUB.W',0
0000651A= 53 55 42 2E 4C 00       8559  opcode_SUBL     DC.B    'SUB.L',0
00006520= 4C 45 41 00             8560  opcode_LEA      DC.B    'LEA',0
00006524= 41 4E 44 2E 42 00       8561  opcode_ANDB     DC.B    'AND.B',0
0000652A= 41 4E 44 2E 57 00       8562  opcode_ANDW     DC.B    'AND.W',0
00006530= 41 4E 44 2E 4C 00       8563  opcode_ANDL     DC.B    'AND.L',0
00006536= 4F 52 2E 42 00          8564  opcode_ORB      DC.B    'OR.B',0
0000653B= 4F 52 2E 57 00          8565  opcode_ORW      DC.B    'OR.W',0
00006540= 4F 52 2E 4C 00          8566  opcode_ORL      DC.B    'OR.L',0
00006545= 4E 4F 54 2E 42 00       8567  opcode_NOTB     DC.B    'NOT.B',0
0000654B= 4E 4F 54 2E 57 00       8568  opcode_NOTW     DC.B    'NOT.W',0
00006551= 4E 4F 54 2E 4C 00       8569  opcode_NOTL     DC.B    'NOT.L',0
00006557= 4C 53 4C 2E 42 00       8570  opcode_LSLB     DC.B    'LSL.B',0
0000655D= 4C 53 4C 2E 57 00       8571  opcode_LSLW     DC.B    'LSL.W',0
00006563= 4C 53 4C 2E 4C 00       8572  opcode_LSLL     DC.B    'LSL.L',0
00006569= 4C 53 52 2E 42 00       8573  opcode_LSRB     DC.B    'LSR.B',0
0000656F= 4C 53 52 2E 57 00       8574  opcode_LSRW     DC.B    'LSR.W',0
00006575= 4C 53 52 2E 4C 00       8575  opcode_LSRL     DC.B    'LSR.L',0
0000657B= 41 53 4C 2E 42 00       8576  opcode_ASLB     DC.B    'ASL.B',0
00006581= 41 53 4C 2E 57 00       8577  opcode_ASLW     DC.B    'ASL.W',0
00006587= 41 53 4C 2E 4C 00       8578  opcode_ASLL     DC.B    'ASL.L',0
0000658D= 41 53 52 2E 42 00       8579  opcode_ASRB     DC.B    'ASR.B',0
00006593= 41 53 52 2E 57 00       8580  opcode_ASRW     DC.B    'ASR.W',0
00006599= 41 53 52 2E 4C 00       8581  opcode_ASRL     DC.B    'ASR.L',0
0000659F= 52 4F 4C 2E 42 00       8582  opcode_ROLB     DC.B    'ROL.B',0
000065A5= 52 4F 4C 2E 57 00       8583  opcode_ROLW     DC.B    'ROL.W',0
000065AB= 52 4F 4C 2E 4C 00       8584  opcode_ROLL     DC.B    'ROL.L',0
000065B1= 52 4F 52 2E 42 00       8585  opcode_RORB     DC.B    'ROR.B',0
000065B7= 52 4F 52 2E 57 00       8586  opcode_RORW     DC.B    'ROR.W',0
000065BD= 52 4F 52 2E 4C 00       8587  opcode_RORL     DC.B    'ROR.L',0
000065C3= 42 47 54 00             8588  opcode_BGT      DC.B    'BGT',0
000065C7= 42 47 54 2E 42 00       8589  opcode_BGTB     DC.B    'BGT.B',0
000065CD= 42 47 54 2E 57 00       8590  opcode_BGTW     DC.B    'BGT.W',0
000065D3= 42 4C 45 00             8591  opcode_BLE      DC.B    'BLE',0
000065D7= 42 4C 45 2E 42 00       8592  opcode_BLEB     DC.B    'BLE.B',0
000065DD= 42 4C 45 2E 57 00       8593  opcode_BLEW     DC.B    'BLE.W',0
000065E3= 42 45 51 00             8594  opcode_BEQ      DC.B    'BEQ',0
000065E7= 42 45 51 2E 42 00       8595  opcode_BEQB     DC.B    'BEQ.B',0
000065ED= 42 45 51 2E 57 00       8596  opcode_BEQW     DC.B    'BEQ.W',0
000065F3= 4A 53 52 00             8597  opcode_JSR      DC.B    'JSR',0
000065F7= 52 54 53 00             8598  opcode_RTS      DC.B    'RTS',0
000065FB= 42 52 41 00             8599  opcode_BRA      DC.B    'BRA',0
000065FF= 42 52 41 2E 42 00       8600  opcode_BRAB     DC.B    'BRA.B',0
00006605= 42 52 41 2E 57 00       8601  opcode_BRAW     DC.B    'BRA.W',0
0000660B= 4D 4F 56 45 4D 2E ...   8602  opcode_MOVEMW   DC.B    'MOVEM.W',0
00006613= 4D 4F 56 45 4D 2E ...   8603  opcode_MOVEML   DC.B    'MOVEM.L',0
0000661B= 44 41 54 41 00          8604  opcode_DATA     DC.B    'DATA',0
00006620  =0000000D               8605  CR          EQU     $0D *ASCII code for carriage return
00006620  =0000000A               8606  LF          EQU     $0A *ASCII code for line feed
00006620  =00000009               8607  HT          EQU     $09 *ASCII code for horizontal tab
00006620  =00000071               8608  QT          EQU     $71 *ascii for lowercase q
00006620  =00000072               8609  RT          EQU     $72 *ascii for lowercase r
00006620                          8610  
00006620= 57 65 6C 63 6F 6D ...   8611  LOAD_MESSAGE    DC.B    'Welcome to The Disassemblers CSS 422 projectA',CR,LF,'Select "demo_test.s68" in File->Open Data for test data',CR,LF,0
00006689= 49 66 20 79 6F 75 ...   8612  LOAD2_MESSAGE   DC.B    'If you got to this page without loading the test file,',CR,LF,'please exit and follow the directions above.',CR,LF,0
000066F0= 49 6E 70 75 74 20 ...   8613  START_REQUEST   DC.B    'Input starting memory location between $00007000 and $000073BA',CR,LF,'in the format "########": ',0
0000674B= 49 6E 70 75 74 20 ...   8614  END_REQUEST     DC.B    'Input ending memory location between $00007000 and $000073BA',CR,LF,'in the format "########": ',0
000067A4= 49 6E 70 75 74 20 ...   8615  NOT_HEX_MSG     DC.B    'Input was not in the hexadecimal range 0-F',0
000067CF= 49 6E 70 75 74 20 ...   8616  BAD_RANGE       DC.B    'Input is not in the range between $00007000 and $000073BA',CR,LF,0
0000680B= 45 6E 64 69 6E 67 ...   8617  BAD_END         DC.B    'Ending location is less than the starting location, please switch the inputs.',CR,LF,0
0000685B= 49 6E 70 75 74 20 ...   8618  BAD_BOUND       DC.B    'Input is not on an input boundary, please enter address divisible by 2.',CR,LF,0
000068A5= 0D 0A 00                8619  SPACE           DC.B    CR,LF,0
000068A8= 50 72 65 73 73 20 ...   8620  PRESS_ENTER     DC.B    'Press ENTER to continue.',CR,LF,0
000068C3= 09 00                   8621  TAB             DC.B    HT,0
000068C5= 57 6F 75 6C 64 20 ...   8622  RESTART_Q       DC.B    'Would you like to test again?',CR,LF,'Press r to restart or q to quit.',CR,LF,0
00006907                          8623  
00006907= 49 6E 63 6F 72 72 ...   8624  ERROR_MESSAGE                   DC.B            'Incorrect EA Format',0
0000691B= 44 30 00                8625  ea_D0                       DC.B        'D0',0
0000691E= 44 31 00                8626  ea_D1                       DC.B        'D1',0
00006921= 44 32 00                8627  ea_D2                       DC.B        'D2',0
00006924= 44 33 00                8628  ea_D3                       DC.B        'D3',0
00006927= 44 34 00                8629  ea_D4                       DC.B        'D4',0
0000692A= 44 35 00                8630  ea_D5                       DC.B        'D5',0
0000692D= 44 36 00                8631  ea_D6                       DC.B        'D6',0
00006930= 44 37 00                8632  ea_D7                       DC.B        'D7',0
00006933                          8633  
00006933= 41 30 00                8634  ea_A0                       DC.B        'A0',0
00006936= 41 31 00                8635  ea_A1                       DC.B        'A1',0
00006939= 41 32 00                8636  ea_A2                       DC.B        'A2',0
0000693C= 41 33 00                8637  ea_A3                       DC.B        'A3',0
0000693F= 41 34 00                8638  ea_A4                       DC.B        'A4',0
00006942= 41 35 00                8639  ea_A5                       DC.B        'A5',0
00006945= 41 36 00                8640  ea_A6                       DC.B        'A6',0
00006948= 41 37 00                8641  ea_A7                       DC.B        'A7',0
0000694B                          8642  
0000694B= 38 00                   8643  ea_val0                     DC.B        '8',0
0000694D= 31 00                   8644  ea_val1                     DC.B        '1',0
0000694F= 32 00                   8645  ea_val2                     DC.B        '2',0
00006951= 33 00                   8646  ea_val3                     DC.B        '3',0
00006953= 34 00                   8647  ea_val4                     DC.B        '4',0
00006955= 35 00                   8648  ea_val5                     DC.B        '5',0
00006957= 36 00                   8649  ea_val6                     DC.B        '6',0
00006959= 37 00                   8650  ea_val7                     DC.B        '7',0
0000695B                          8651  
0000695B= 28 41 30 29 00          8652  ea_indir_A0                 DC.B        '(A0)',0
00006960= 28 41 31 29 00          8653  ea_indir_A1                 DC.B        '(A1)',0
00006965= 28 41 32 29 00          8654  ea_indir_A2                 DC.B        '(A2)',0
0000696A= 28 41 33 29 00          8655  ea_indir_A3                 DC.B        '(A3)',0
0000696F= 28 41 34 29 00          8656  ea_indir_A4                 DC.B        '(A4)',0
00006974= 28 41 35 29 00          8657  ea_indir_A5                 DC.B        '(A5)',0
00006979= 28 41 36 29 00          8658  ea_indir_A6                 DC.B        '(A6)',0
0000697E= 28 41 37 29 00          8659  ea_indir_A7                 DC.B        '(A7)',0
00006983                          8660  
00006983= 28 41 30 29 2B 00       8661  ea_indir_postinc_A0         DC.B        '(A0)+',0
00006989= 28 41 31 29 2B 00       8662  ea_indir_postinc_A1         DC.B        '(A1)+',0
0000698F= 28 41 32 29 2B 00       8663  ea_indir_postinc_A2         DC.B        '(A2)+',0
00006995= 28 41 33 29 2B 00       8664  ea_indir_postinc_A3         DC.B        '(A3)+',0
0000699B= 28 41 34 29 2B 00       8665  ea_indir_postinc_A4         DC.B        '(A4)+',0
000069A1= 28 41 35 29 2B 00       8666  ea_indir_postinc_A5         DC.B        '(A5)+',0
000069A7= 28 41 36 29 2B 00       8667  ea_indir_postinc_A6         DC.B        '(A6)+',0
000069AD= 28 41 37 29 2B 00       8668  ea_indir_postinc_A7         DC.B        '(A7)+',0
000069B3                          8669  
000069B3                          8670  
000069B3= 2D 28 41 30 29 00       8671  ea_indir_predec_A0          DC.B        '-(A0)',0
000069B9= 2D 28 41 31 29 00       8672  ea_indir_predec_A1          DC.B        '-(A1)',0
000069BF= 2D 28 41 32 29 00       8673  ea_indir_predec_A2          DC.B        '-(A2)',0
000069C5= 2D 28 41 33 29 00       8674  ea_indir_predec_A3          DC.B        '-(A3)',0
000069CB= 2D 28 41 34 29 00       8675  ea_indir_predec_A4          DC.B        '-(A4)',0
000069D1= 2D 28 41 35 29 00       8676  ea_indir_predec_A5          DC.B        '-(A5)',0
000069D7= 2D 28 41 36 29 00       8677  ea_indir_predec_A6          DC.B        '-(A6)',0
000069DD= 2D 28 41 37 29 00       8678  ea_indir_predec_A7          DC.B        '-(A7)',0
000069E3                          8679  
000069E3= 28 00                   8680  ea_paren_open               DC.B        '(',0
000069E5= 29 00                   8681  ea_paren_closed             DC.B        ')',0
000069E7= 2E 57 00                8682  ea_abs_word_string          DC.B        '.W',0
000069EA= 2E 4C 00                8683  ea_abs_long_string          DC.B        '.L',0
000069ED= 24 00                   8684  ea_$                        DC.B        '$',0
000069EF                          8685  
000069EF= 23 30 00                8686  ea_data0                    DC.B      '#0',0
000069F2= 23 31 00                8687  ea_data1                    DC.B      '#1',0
000069F5= 23 32 00                8688  ea_data2                    DC.B      '#2',0
000069F8= 23 33 00                8689  ea_data3                    DC.B      '#3',0
000069FB= 23 34 00                8690  ea_data4                    DC.B      '#4',0
000069FE= 23 35 00                8691  ea_data5                    DC.B      '#5',0
00006A01= 23 36 00                8692  ea_data6                    DC.B      '#6',0
00006A04= 23 37 00                8693  ea_data7                    DC.B      '#7',0
00006A07                          8694  
00006A07                          8695  
00006A07                          8696  
00006A07                          8697  
00006A07                          8698  
00006A07                          8699  
00006A07                          8700  
00006A07                          8701  
00006A07                          8702  
00006A07                          8703  
00006A07                          8704  -------------------- end include --------------------
00006A07                          8705      
00006A07                          8706  
00006A07                          8707  STOP:
00006A07                          8708      END    MAIN

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDA_A0_OUT         373C
ADDA_A1_OUT         3748
ADDA_A2_OUT         3754
ADDA_A3_OUT         3760
ADDA_A4_OUT         376C
ADDA_A5_OUT         3778
ADDA_A6_OUT         3784
ADDA_A7_OUT         3790
ADDA_ABS_ADD_LONG   35DE
ADDA_ABS_ADD_LONG_OUT  3A1A
ADDA_ABS_ADD_WORD   35C8
ADDA_ABS_ADD_WORD_OUT  3A0C
ADDA_ADD_REG_DIR    3590
ADDA_ADD_REG_INDIR  359E
ADDA_ADD_REG_INDIR_POSTINC  35BA
ADDA_ADD_REG_INDIR_PREDEC  35AC
ADDA_AN_INDIR_POSTINC_REG  386C
ADDA_AN_INDIR_POSTINC_REG0_OUT  38DC
ADDA_AN_INDIR_POSTINC_REG1  387A
ADDA_AN_INDIR_POSTINC_REG1_OUT  38E8
ADDA_AN_INDIR_POSTINC_REG2  3888
ADDA_AN_INDIR_POSTINC_REG2_OUT  38F4
ADDA_AN_INDIR_POSTINC_REG3  3896
ADDA_AN_INDIR_POSTINC_REG3_OUT  3900
ADDA_AN_INDIR_POSTINC_REG4  38A4
ADDA_AN_INDIR_POSTINC_REG4_OUT  390C
ADDA_AN_INDIR_POSTINC_REG5  38B2
ADDA_AN_INDIR_POSTINC_REG5_OUT  3918
ADDA_AN_INDIR_POSTINC_REG6  38C0
ADDA_AN_INDIR_POSTINC_REG6_OUT  3924
ADDA_AN_INDIR_POSTINC_REG7  38CE
ADDA_AN_INDIR_POSTINC_REG7_OUT  3930
ADDA_AN_INDIR_PREDEC  393C
ADDA_AN_INDIR_PREDEC_REG0_OUT  39AC
ADDA_AN_INDIR_PREDEC_REG1  394A
ADDA_AN_INDIR_PREDEC_REG1_OUT  39B8
ADDA_AN_INDIR_PREDEC_REG2  3958
ADDA_AN_INDIR_PREDEC_REG2_OUT  39C4
ADDA_AN_INDIR_PREDEC_REG3  3966
ADDA_AN_INDIR_PREDEC_REG3_OUT  39D0
ADDA_AN_INDIR_PREDEC_REG4  3974
ADDA_AN_INDIR_PREDEC_REG4_OUT  39DC
ADDA_AN_INDIR_PREDEC_REG5  3982
ADDA_AN_INDIR_PREDEC_REG5_OUT  39E8
ADDA_AN_INDIR_PREDEC_REG6  3990
ADDA_AN_INDIR_PREDEC_REG6_OUT  39F4
ADDA_AN_INDIR_PREDEC_REG7  399E
ADDA_AN_INDIR_PREDEC_REG7_OUT  3A00
ADDA_AN_INDIR_REG   379C
ADDA_AN_INDIR_REG0_OUT  380C
ADDA_AN_INDIR_REG1  37AA
ADDA_AN_INDIR_REG1_OUT  3818
ADDA_AN_INDIR_REG2  37B8
ADDA_AN_INDIR_REG2_OUT  3824
ADDA_AN_INDIR_REG3  37C6
ADDA_AN_INDIR_REG3_OUT  3830
ADDA_AN_INDIR_REG4  37D4
ADDA_AN_INDIR_REG4_OUT  383C
ADDA_AN_INDIR_REG5  37E2
ADDA_AN_INDIR_REG5_OUT  3848
ADDA_AN_INDIR_REG6  37F0
ADDA_AN_INDIR_REG6_OUT  3854
ADDA_AN_INDIR_REG7  37FE
ADDA_AN_INDIR_REG7_OUT  3860
ADDA_AN_REG         36CC
ADDA_D0_OUT         366C
ADDA_D1_OUT         3678
ADDA_D2_OUT         3684
ADDA_D3_OUT         3690
ADDA_D4_OUT         369C
ADDA_D5_OUT         36A8
ADDA_D6_OUT         36B4
ADDA_D7_OUT         36C0
ADDA_DATA_REG_DIR   3582
ADDA_DETERMINE_SECOND_OP  3A5A
ADDA_DN_REG         35FC
ADDA_END            1744
ADDA_FAIL           173E
ADDA_IMMEDIATE_ADD  35E8
ADDA_IMMEDIATE_ADD_OUT  3A2A
ADDA_IMM_ADD_L      3A4A
ADDA_IMM_ADD_W      3A3C
ADDA_L              171A
ADDA_RA1            36DA
ADDA_RA2            36E8
ADDA_RA3            36F6
ADDA_RA4            3704
ADDA_RA5            3712
ADDA_RA6            3720
ADDA_RA7            372E
ADDA_RD1            360A
ADDA_RD2            3618
ADDA_RD3            3626
ADDA_RD4            3634
ADDA_RD5            3642
ADDA_RD6            3650
ADDA_RD7            365E
ADDA_REG0           3A62
ADDA_REG0_OUT       3AD2
ADDA_REG1           3A70
ADDA_REG1_OUT       3ADE
ADDA_REG2           3A7E
ADDA_REG2_OUT       3AEA
ADDA_REG3           3A8C
ADDA_REG3_OUT       3AF6
ADDA_REG4           3A9A
ADDA_REG4_OUT       3B02
ADDA_REG5           3AA8
ADDA_REG5_OUT       3B0E
ADDA_REG6           3AB6
ADDA_REG6_OUT       3B1A
ADDA_REG7           3AC4
ADDA_REG7_OUT       3B26
ADDA_SIZE           16EC
ADDA_SUB            3578
ADDQ_A0_OUT         3DC4
ADDQ_A1_OUT         3DD0
ADDQ_A2_OUT         3DDC
ADDQ_A3_OUT         3DE8
ADDQ_A4_OUT         3DF4
ADDQ_A5_OUT         3E00
ADDQ_A6_OUT         3E0C
ADDQ_A7_OUT         3E18
ADDQ_ABS_ADD_LONG   3C70
ADDQ_ABS_ADD_LONG_OUT  40A2
ADDQ_ABS_ADD_WORD   3C5A
ADDQ_ABS_ADD_WORD_OUT  4094
ADDQ_ADD_REG_DIR    3C22
ADDQ_ADD_REG_INDIR  3C30
ADDQ_ADD_REG_INDIR_POSTINC  3C4C
ADDQ_ADD_REG_INDIR_PREDEC  3C3E
ADDQ_AN_INDIR_PDEC_R0_OUT  4034
ADDQ_AN_INDIR_PDEC_R1  3FD2
ADDQ_AN_INDIR_PDEC_R1_OUT  4040
ADDQ_AN_INDIR_PDEC_R2  3FE0
ADDQ_AN_INDIR_PDEC_R2_OUT  404C
ADDQ_AN_INDIR_PDEC_R3  3FEE
ADDQ_AN_INDIR_PDEC_R3_OUT  4058
ADDQ_AN_INDIR_PDEC_R4  3FFC
ADDQ_AN_INDIR_PDEC_R4_OUT  4064
ADDQ_AN_INDIR_PDEC_R5  400A
ADDQ_AN_INDIR_PDEC_R5_OUT  4070
ADDQ_AN_INDIR_PDEC_R6  4018
ADDQ_AN_INDIR_PDEC_R6_OUT  407C
ADDQ_AN_INDIR_PDEC_R7  4026
ADDQ_AN_INDIR_PDEC_R7_OUT  4088
ADDQ_AN_INDIR_PINC_R0_OUT  3F64
ADDQ_AN_INDIR_PINC_R1  3F02
ADDQ_AN_INDIR_PINC_R1_OUT  3F70
ADDQ_AN_INDIR_PINC_R2  3F10
ADDQ_AN_INDIR_PINC_R2_OUT  3F7C
ADDQ_AN_INDIR_PINC_R3  3F1E
ADDQ_AN_INDIR_PINC_R3_OUT  3F88
ADDQ_AN_INDIR_PINC_R4  3F2C
ADDQ_AN_INDIR_PINC_R4_OUT  3F94
ADDQ_AN_INDIR_PINC_R5  3F3A
ADDQ_AN_INDIR_PINC_R5_OUT  3FA0
ADDQ_AN_INDIR_PINC_R6  3F48
ADDQ_AN_INDIR_PINC_R6_OUT  3FAC
ADDQ_AN_INDIR_PINC_R7  3F56
ADDQ_AN_INDIR_PINC_R7_OUT  3FB8
ADDQ_AN_INDIR_PINC_REG  3EF4
ADDQ_AN_INDIR_PREDEC  3FC4
ADDQ_AN_INDIR_REG   3E24
ADDQ_AN_INDIR_REG0_OUT  3E94
ADDQ_AN_INDIR_REG1  3E32
ADDQ_AN_INDIR_REG1_OUT  3EA0
ADDQ_AN_INDIR_REG2  3E40
ADDQ_AN_INDIR_REG2_OUT  3EAC
ADDQ_AN_INDIR_REG3  3E4E
ADDQ_AN_INDIR_REG3_OUT  3EB8
ADDQ_AN_INDIR_REG4  3E5C
ADDQ_AN_INDIR_REG4_OUT  3EC4
ADDQ_AN_INDIR_REG5  3E6A
ADDQ_AN_INDIR_REG5_OUT  3ED0
ADDQ_AN_INDIR_REG6  3E78
ADDQ_AN_INDIR_REG6_OUT  3EDC
ADDQ_AN_INDIR_REG7  3E86
ADDQ_AN_INDIR_REG7_OUT  3EE8
ADDQ_AN_REG         3D54
ADDQ_D0_OUT         3CF4
ADDQ_D1_OUT         3D00
ADDQ_D2_OUT         3D0C
ADDQ_D3_OUT         3D18
ADDQ_D4_OUT         3D24
ADDQ_D5_OUT         3D30
ADDQ_D6_OUT         3D3C
ADDQ_D7_OUT         3D48
ADDQ_DATA_REG_DIR   3C14
ADDQ_DETERMINE_SECOND_OPERAND  3C14
ADDQ_DN_REG         3C7E
ADDQ_END            1DDE
ADDQ_FAIL           1DD8
ADDQ_L              1DB4
ADDQ_RA1            3D62
ADDQ_RA2            3D70
ADDQ_RA3            3D7E
ADDQ_RA4            3D8C
ADDQ_RA5            3D9A
ADDQ_RA6            3DA8
ADDQ_RA7            3DB6
ADDQ_RD1            3C92
ADDQ_RD2            3CA0
ADDQ_RD3            3CAE
ADDQ_RD4            3CBC
ADDQ_RD5            3CCA
ADDQ_RD6            3CD8
ADDQ_RD7            3CE6
ADDQ_REG0           3B44
ADDQ_REG0_OUT       3BB4
ADDQ_REG1           3B52
ADDQ_REG1_OUT       3BC0
ADDQ_REG2           3B60
ADDQ_REG2_OUT       3BCC
ADDQ_REG3           3B6E
ADDQ_REG3_OUT       3BD8
ADDQ_REG4           3B7C
ADDQ_REG4_OUT       3BE4
ADDQ_REG5           3B8A
ADDQ_REG5_OUT       3BF0
ADDQ_REG6           3B98
ADDQ_REG6_OUT       3BFC
ADDQ_REG7           3BA6
ADDQ_REG7_OUT       3C08
ADDQ_SIZE           1D62
ADDQ_SUB            3B32
ADDQ_W              1D90
ADD_ADD             2284
ADD_DETERMINE_SECOND_OP  26E4
ADD_DETERMINE_SECOND_OPERAND  2894
ADD_DN_EA           27BC
ADD_DN_EA_ABS_ADD_LONG  28DC
ADD_DN_EA_ABS_ADD_LONG_OUT  2B6E
ADD_DN_EA_ABS_ADD_WORD  28C6
ADD_DN_EA_ABS_ADD_WORD_OUT  2B60
ADD_DN_EA_ADD_REG_INDIR  289C
ADD_DN_EA_ADD_REG_INDIR_POSTINC  28B8
ADD_DN_EA_ADD_REG_INDIR_PREDEC  28AA
ADD_DN_EA_AN_INDIR_POSTINC_REG  29C0
ADD_DN_EA_AN_INDIR_POSTINC_REG1  29CE
ADD_DN_EA_AN_INDIR_POSTINC_REG2  29DC
ADD_DN_EA_AN_INDIR_POSTINC_REG3  29EA
ADD_DN_EA_AN_INDIR_POSTINC_REG4  29F8
ADD_DN_EA_AN_INDIR_POSTINC_REG5  2A06
ADD_DN_EA_AN_INDIR_POSTINC_REG6  2A14
ADD_DN_EA_AN_INDIR_POSTINC_REG7  2A22
ADD_DN_EA_AN_INDIR_POSTIN_R0_OUT  2A30
ADD_DN_EA_AN_INDIR_POSTIN_R1_OUT  2A3C
ADD_DN_EA_AN_INDIR_POSTIN_R2_OUT  2A48
ADD_DN_EA_AN_INDIR_POSTIN_R3_OUT  2A54
ADD_DN_EA_AN_INDIR_POSTIN_R4_OUT  2A60
ADD_DN_EA_AN_INDIR_POSTIN_R5_OUT  2A6C
ADD_DN_EA_AN_INDIR_POSTIN_R6_OUT  2A78
ADD_DN_EA_AN_INDIR_POSTIN_R7_OUT  2A84
ADD_DN_EA_AN_INDIR_PREDEC  2A90
ADD_DN_EA_AN_INDIR_PREDEC_REG1  2A9E
ADD_DN_EA_AN_INDIR_PREDEC_REG2  2AAC
ADD_DN_EA_AN_INDIR_PREDEC_REG3  2ABA
ADD_DN_EA_AN_INDIR_PREDEC_REG4  2AC8
ADD_DN_EA_AN_INDIR_PREDEC_REG5  2AD6
ADD_DN_EA_AN_INDIR_PREDEC_REG6  2AE4
ADD_DN_EA_AN_INDIR_PREDEC_REG7  2AF2
ADD_DN_EA_AN_INDIR_PREDE_R0_OUT  2B00
ADD_DN_EA_AN_INDIR_PREDE_R1_OUT  2B0C
ADD_DN_EA_AN_INDIR_PREDE_R2_OUT  2B18
ADD_DN_EA_AN_INDIR_PREDE_R3_OUT  2B24
ADD_DN_EA_AN_INDIR_PREDE_R4_OUT  2B30
ADD_DN_EA_AN_INDIR_PREDE_R5_OUT  2B3C
ADD_DN_EA_AN_INDIR_PREDE_R6_OUT  2B48
ADD_DN_EA_AN_INDIR_PREDE_R7_OUT  2B54
ADD_DN_EA_AN_INDIR_REG  28F0
ADD_DN_EA_AN_INDIR_REG0_OUT  2960
ADD_DN_EA_AN_INDIR_REG1  28FE
ADD_DN_EA_AN_INDIR_REG1_OUT  296C
ADD_DN_EA_AN_INDIR_REG2  290C
ADD_DN_EA_AN_INDIR_REG2_OUT  2978
ADD_DN_EA_AN_INDIR_REG3  291A
ADD_DN_EA_AN_INDIR_REG3_OUT  2984
ADD_DN_EA_AN_INDIR_REG4  2928
ADD_DN_EA_AN_INDIR_REG4_OUT  2990
ADD_DN_EA_AN_INDIR_REG5  2936
ADD_DN_EA_AN_INDIR_REG5_OUT  299C
ADD_DN_EA_AN_INDIR_REG6  2944
ADD_DN_EA_AN_INDIR_REG6_OUT  29A8
ADD_DN_EA_AN_INDIR_REG7  2952
ADD_DN_EA_AN_INDIR_REG7_OUT  29B4
ADD_DN_EA_IMMEDIATE_ADD_OUT  2B7E
ADD_DN_EA_IMM_ADD_L  2B9E
ADD_DN_EA_IMM_ADD_W  2B90
ADD_DN_EA_MATCH     22B8
ADD_DN_EA_MATCH_L   22D4
ADD_DN_EA_MATCH_W   22C6
ADD_EA_DN           22E2
ADD_EA_DN_ABS_ADD_LONG  2338
ADD_EA_DN_ABS_ADD_LONG_OUT  26A4
ADD_EA_DN_ABS_ADD_WORD  2322
ADD_EA_DN_ABS_ADD_WORD_OUT  2696
ADD_EA_DN_ADD_REG_INDIR  22F8
ADD_EA_DN_ADD_REG_INDIR_POSTINC  2314
ADD_EA_DN_ADD_REG_INDIR_PREDEC  2306
ADD_EA_DN_AN_INDIR_POSTINC_REG  24F6
ADD_EA_DN_AN_INDIR_POSTINC_REG1  2504
ADD_EA_DN_AN_INDIR_POSTINC_REG2  2512
ADD_EA_DN_AN_INDIR_POSTINC_REG3  2520
ADD_EA_DN_AN_INDIR_POSTINC_REG4  252E
ADD_EA_DN_AN_INDIR_POSTINC_REG5  253C
ADD_EA_DN_AN_INDIR_POSTINC_REG6  254A
ADD_EA_DN_AN_INDIR_POSTINC_REG7  2558
ADD_EA_DN_AN_INDIR_POSTIN_R0_OUT  2566
ADD_EA_DN_AN_INDIR_POSTIN_R1_OUT  2572
ADD_EA_DN_AN_INDIR_POSTIN_R2_OUT  257E
ADD_EA_DN_AN_INDIR_POSTIN_R3_OUT  258A
ADD_EA_DN_AN_INDIR_POSTIN_R4_OUT  2596
ADD_EA_DN_AN_INDIR_POSTIN_R5_OUT  25A2
ADD_EA_DN_AN_INDIR_POSTIN_R6_OUT  25AE
ADD_EA_DN_AN_INDIR_POSTIN_R7_OUT  25BA
ADD_EA_DN_AN_INDIR_PREDEC  25C6
ADD_EA_DN_AN_INDIR_PREDEC_REG1  25D4
ADD_EA_DN_AN_INDIR_PREDEC_REG2  25E2
ADD_EA_DN_AN_INDIR_PREDEC_REG3  25F0
ADD_EA_DN_AN_INDIR_PREDEC_REG4  25FE
ADD_EA_DN_AN_INDIR_PREDEC_REG5  260C
ADD_EA_DN_AN_INDIR_PREDEC_REG6  261A
ADD_EA_DN_AN_INDIR_PREDEC_REG7  2628
ADD_EA_DN_AN_INDIR_PREDE_R0_OUT  2636
ADD_EA_DN_AN_INDIR_PREDE_R1_OUT  2642
ADD_EA_DN_AN_INDIR_PREDE_R2_OUT  264E
ADD_EA_DN_AN_INDIR_PREDE_R3_OUT  265A
ADD_EA_DN_AN_INDIR_PREDE_R4_OUT  2666
ADD_EA_DN_AN_INDIR_PREDE_R5_OUT  2672
ADD_EA_DN_AN_INDIR_PREDE_R6_OUT  267E
ADD_EA_DN_AN_INDIR_PREDE_R7_OUT  268A
ADD_EA_DN_AN_INDIR_REG  2426
ADD_EA_DN_AN_INDIR_REG0_OUT  2496
ADD_EA_DN_AN_INDIR_REG1  2434
ADD_EA_DN_AN_INDIR_REG1_OUT  24A2
ADD_EA_DN_AN_INDIR_REG2  2442
ADD_EA_DN_AN_INDIR_REG2_OUT  24AE
ADD_EA_DN_AN_INDIR_REG3  2450
ADD_EA_DN_AN_INDIR_REG3_OUT  24BA
ADD_EA_DN_AN_INDIR_REG4  245E
ADD_EA_DN_AN_INDIR_REG4_OUT  24C6
ADD_EA_DN_AN_INDIR_REG5  246C
ADD_EA_DN_AN_INDIR_REG5_OUT  24D2
ADD_EA_DN_AN_INDIR_REG6  247A
ADD_EA_DN_AN_INDIR_REG6_OUT  24DE
ADD_EA_DN_AN_INDIR_REG7  2488
ADD_EA_DN_AN_INDIR_REG7_OUT  24EA
ADD_EA_DN_D0_OUT    23C6
ADD_EA_DN_D1_OUT    23D2
ADD_EA_DN_D2_OUT    23DE
ADD_EA_DN_D3_OUT    23EA
ADD_EA_DN_D4_OUT    23F6
ADD_EA_DN_D5_OUT    2402
ADD_EA_DN_D6_OUT    240E
ADD_EA_DN_D7_OUT    241A
ADD_EA_DN_DATA_REG_DIR  22EA
ADD_EA_DN_DN_REG    2356
ADD_EA_DN_IMMEDIATE_ADD  2342
ADD_EA_DN_IMMEDIATE_ADD_OUT  26B4
ADD_EA_DN_IMM_ADD_L  26D4
ADD_EA_DN_IMM_ADD_W  26C6
ADD_EA_DN_MATCH     228E
ADD_EA_DN_MATCH_L   22AA
ADD_EA_DN_MATCH_W   229C
ADD_EA_DN_RD1       2364
ADD_EA_DN_RD2       2372
ADD_EA_DN_RD3       2380
ADD_EA_DN_RD4       238E
ADD_EA_DN_RD5       239C
ADD_EA_DN_RD6       23AA
ADD_EA_DN_RD7       23B8
ADD_END             17C6
ADD_ERROR           2BAE
ADD_FAIL            17C0
ADD_L               179C
ADD_SIZE            174A
ADD_W               1778
AND_DETERMINE_SECOND_OP  30D2
AND_DETERMINE_SECOND_OPERAND  3282
AND_DN_EA           31AA
AND_DN_EA_MATCH     2BC4
AND_DN_EA_MATCH_L   2BE0
AND_DN_EA_MATCH_W   2BD2
AND_EA_DN           2C18
AND_EA_DN_A0_OUT    2DB4
AND_EA_DN_A1_OUT    2DC0
AND_EA_DN_A2_OUT    2DCC
AND_EA_DN_A3_OUT    2DD8
AND_EA_DN_A4_OUT    2DE4
AND_EA_DN_A5_OUT    2DF0
AND_EA_DN_A6_OUT    2DFC
AND_EA_DN_A7_OUT    2E08
AND_EA_DN_ABS_ADD_LONG  2C60
AND_EA_DN_ABS_ADD_LONG_OUT  3092
AND_EA_DN_ABS_ADD_WORD  2C4A
AND_EA_DN_ABS_ADD_WORD_OUT  3084
AND_EA_DN_ADD_REG_INDIR  2C20
AND_EA_DN_ADD_REG_INDIR_PDEC  2C2E
AND_EA_DN_ADD_REG_INDIR_PINC  2C3C
AND_EA_DN_AN_INDIR_PDEC_R0_OUT  3024
AND_EA_DN_AN_INDIR_PDEC_R1  2FC2
AND_EA_DN_AN_INDIR_PDEC_R1_OUT  3030
AND_EA_DN_AN_INDIR_PDEC_R2  2FD0
AND_EA_DN_AN_INDIR_PDEC_R2_OUT  303C
AND_EA_DN_AN_INDIR_PDEC_R3  2FDE
AND_EA_DN_AN_INDIR_PDEC_R3_OUT  3048
AND_EA_DN_AN_INDIR_PDEC_R4  2FEC
AND_EA_DN_AN_INDIR_PDEC_R4_OUT  3054
AND_EA_DN_AN_INDIR_PDEC_R5  2FFA
AND_EA_DN_AN_INDIR_PDEC_R5_OUT  3060
AND_EA_DN_AN_INDIR_PDEC_R6  3008
AND_EA_DN_AN_INDIR_PDEC_R6_OUT  306C
AND_EA_DN_AN_INDIR_PDEC_R7  3016
AND_EA_DN_AN_INDIR_PDEC_R7_OUT  3078
AND_EA_DN_AN_INDIR_PINC_R0_OUT  2F54
AND_EA_DN_AN_INDIR_PINC_R1  2EF2
AND_EA_DN_AN_INDIR_PINC_R1_OUT  2F60
AND_EA_DN_AN_INDIR_PINC_R2  2F00
AND_EA_DN_AN_INDIR_PINC_R2_OUT  2F6C
AND_EA_DN_AN_INDIR_PINC_R3  2F0E
AND_EA_DN_AN_INDIR_PINC_R3_OUT  2F78
AND_EA_DN_AN_INDIR_PINC_R4  2F1C
AND_EA_DN_AN_INDIR_PINC_R4_OUT  2F84
AND_EA_DN_AN_INDIR_PINC_R5  2F2A
AND_EA_DN_AN_INDIR_PINC_R5_OUT  2F90
AND_EA_DN_AN_INDIR_PINC_R6  2F38
AND_EA_DN_AN_INDIR_PINC_R6_OUT  2F9C
AND_EA_DN_AN_INDIR_PINC_R7  2F46
AND_EA_DN_AN_INDIR_PINC_R7_OUT  2FA8
AND_EA_DN_AN_INDIR_PINC_REG  2EE4
AND_EA_DN_AN_INDIR_PREDEC  2FB4
AND_EA_DN_AN_INDIR_REG  2E14
AND_EA_DN_AN_INDIR_REG0_OUT  2E84
AND_EA_DN_AN_INDIR_REG1  2E22
AND_EA_DN_AN_INDIR_REG1_OUT  2E90
AND_EA_DN_AN_INDIR_REG2  2E30
AND_EA_DN_AN_INDIR_REG2_OUT  2E9C
AND_EA_DN_AN_INDIR_REG3  2E3E
AND_EA_DN_AN_INDIR_REG3_OUT  2EA8
AND_EA_DN_AN_INDIR_REG4  2E4C
AND_EA_DN_AN_INDIR_REG4_OUT  2EB4
AND_EA_DN_AN_INDIR_REG5  2E5A
AND_EA_DN_AN_INDIR_REG5_OUT  2EC0
AND_EA_DN_AN_INDIR_REG6  2E68
AND_EA_DN_AN_INDIR_REG6_OUT  2ECC
AND_EA_DN_AN_INDIR_REG7  2E76
AND_EA_DN_AN_INDIR_REG7_OUT  2ED8
AND_EA_DN_AN_REG    2D44
AND_EA_DN_D0_OUT    2CE4
AND_EA_DN_D1_OUT    2CF0
AND_EA_DN_D2_OUT    2CFC
AND_EA_DN_D3_OUT    2D08
AND_EA_DN_D4_OUT    2D14
AND_EA_DN_D5_OUT    2D20
AND_EA_DN_D6_OUT    2D2C
AND_EA_DN_D7_OUT    2D38
AND_EA_DN_DN_REG    2C74
AND_EA_DN_IMMEDIATE_ADD_OUT  30A2
AND_EA_DN_IMM_ADD_L  30C2
AND_EA_DN_IMM_ADD_W  30B4
AND_EA_DN_MATCH     2BEE
AND_EA_DN_MATCH_L   2C0A
AND_EA_DN_MATCH_W   2BFC
AND_EA_DN_RA1       2D52
AND_EA_DN_RA2       2D60
AND_EA_DN_RA3       2D6E
AND_EA_DN_RA4       2D7C
AND_EA_DN_RA5       2D8A
AND_EA_DN_RA6       2D98
AND_EA_DN_RA7       2DA6
AND_EA_DN_RD1       2C82
AND_EA_DN_RD2       2C90
AND_EA_DN_RD3       2C9E
AND_EA_DN_RD4       2CAC
AND_EA_DN_RD5       2CBA
AND_EA_DN_RD6       2CC8
AND_EA_DN_RD7       2CD6
AND_END             1EE2
AND_FAIL            1EDC
AND_L               1EB8
AND_SIZE            1E66
AND_SUB             2BBA
AND_W               1E94
ASD_ABS_ADD_LONG    4112
ASD_ABS_ADD_LONG_OUT  43AE
ASD_ABS_ADD_WORD    40FC
ASD_ABS_ADD_WORD_OUT  43A0
ASD_AN_INDIR        40D2
ASD_AN_INDIR_PDEC_R0_OUT  4340
ASD_AN_INDIR_PDEC_R1  42DE
ASD_AN_INDIR_PDEC_R1_OUT  434C
ASD_AN_INDIR_PDEC_R2  42EC
ASD_AN_INDIR_PDEC_R2_OUT  4358
ASD_AN_INDIR_PDEC_R3  42FA
ASD_AN_INDIR_PDEC_R3_OUT  4364
ASD_AN_INDIR_PDEC_R4  4308
ASD_AN_INDIR_PDEC_R4_OUT  4370
ASD_AN_INDIR_PDEC_R5  4316
ASD_AN_INDIR_PDEC_R5_OUT  437C
ASD_AN_INDIR_PDEC_R6  4324
ASD_AN_INDIR_PDEC_R6_OUT  4388
ASD_AN_INDIR_PDEC_R7  4332
ASD_AN_INDIR_PDEC_R7_OUT  4394
ASD_AN_INDIR_PINC_R0_OUT  4270
ASD_AN_INDIR_PINC_R1  420E
ASD_AN_INDIR_PINC_R1_OUT  427C
ASD_AN_INDIR_PINC_R2  421C
ASD_AN_INDIR_PINC_R2_OUT  4288
ASD_AN_INDIR_PINC_R3  422A
ASD_AN_INDIR_PINC_R3_OUT  4294
ASD_AN_INDIR_PINC_R4  4238
ASD_AN_INDIR_PINC_R4_OUT  42A0
ASD_AN_INDIR_PINC_R5  4246
ASD_AN_INDIR_PINC_R5_OUT  42AC
ASD_AN_INDIR_PINC_R6  4254
ASD_AN_INDIR_PINC_R6_OUT  42B8
ASD_AN_INDIR_PINC_R7  4262
ASD_AN_INDIR_PINC_R7_OUT  42C4
ASD_AN_INDIR_POSTINC  40E0
ASD_AN_INDIR_POSTINC_REG  41F8
ASD_AN_INDIR_PREDEC  40EE
ASD_AN_INDIR_PREDEC_REG  42D0
ASD_AN_INDIR_REG    4120
ASD_AN_INDIR_REG0_OUT  4198
ASD_AN_INDIR_REG1   4136
ASD_AN_INDIR_REG1_OUT  41A4
ASD_AN_INDIR_REG2   4144
ASD_AN_INDIR_REG2_OUT  41B0
ASD_AN_INDIR_REG3   4152
ASD_AN_INDIR_REG3_OUT  41BC
ASD_AN_INDIR_REG4   4160
ASD_AN_INDIR_REG4_OUT  41C8
ASD_AN_INDIR_REG5   416E
ASD_AN_INDIR_REG5_OUT  41D4
ASD_AN_INDIR_REG6   417C
ASD_AN_INDIR_REG6_OUT  41E0
ASD_AN_INDIR_REG7   418A
ASD_AN_INDIR_REG7_OUT  41EC
ASD_COUNT_REG0      43DC
ASD_COUNT_REG0_OUT  451C
ASD_COUNT_REG1      43EA
ASD_COUNT_REG1_OUT  4528
ASD_COUNT_REG2      43F8
ASD_COUNT_REG2_OUT  4534
ASD_COUNT_REG3      4406
ASD_COUNT_REG3_OUT  4540
ASD_COUNT_REG4      4414
ASD_COUNT_REG4_OUT  454C
ASD_COUNT_REG5      4422
ASD_COUNT_REG5_OUT  4558
ASD_COUNT_REG6      4430
ASD_COUNT_REG6_OUT  4564
ASD_COUNT_REG7      443E
ASD_COUNT_REG7_OUT  4570
ASD_COUNT_VAL       444C
ASD_COUNT_VAL0_OUT  44BC
ASD_COUNT_VAL1      445A
ASD_COUNT_VAL1_OUT  44C8
ASD_COUNT_VAL2      4468
ASD_COUNT_VAL2_OUT  44D4
ASD_COUNT_VAL3      4476
ASD_COUNT_VAL3_OUT  44E0
ASD_COUNT_VAL4      4484
ASD_COUNT_VAL4_OUT  44EC
ASD_COUNT_VAL5      4492
ASD_COUNT_VAL5_OUT  44F8
ASD_COUNT_VAL6      44A0
ASD_COUNT_VAL6_OUT  4504
ASD_COUNT_VAL7      44AE
ASD_COUNT_VAL7_OUT  4510
ASD_D0_OUT          45F4
ASD_D1_OUT          4600
ASD_D2_OUT          460C
ASD_D3_OUT          4618
ASD_D4_OUT          4624
ASD_D5_OUT          4630
ASD_D6_OUT          463C
ASD_D7_OUT          4648
ASD_DN0             457C
ASD_DN1             4592
ASD_DN2             45A0
ASD_DN3             45AE
ASD_DN4             45BC
ASD_DN5             45CA
ASD_DN6             45D8
ASD_DN7             45E6
ASD_MEM_SHIFT       40CA
ASD_REG_SHIFT       43BE
ASD_SHIFT_REG       43D4
ASD_SUB             40B2
ASLM_END            1BAE
ASLR_END            1B86
ASLR_FAIL           1B80
ASLR_L              1B5C
ASLR_W              1B38
ASL_M_SIZE          1B8C
ASL_R_SIZE          1B0A
ASRM_END            1C58
ASRR_END            1C30
ASRR_FAIL           1C2A
ASRR_L              1C06
ASRR_W              1BE2
ASR_M_SIZE          1C36
ASR_R_SIZE          1BB4
BAD_BOUND           685B
BAD_END             680B
BAD_RANGE           67CF
BCC_ADDRESS         19E4
BCC_ADD_END         1A00
BCC_B               17FE
BCC_END             1806
BCC_L               17D6
BCC_NEGATIVE        19F8
BCC_SIZE            17CC
BCC_W               17EA
BEQ_B               18D4
BEQ_END             18F2
BEQ_L               188C
BEQ_SIZE            1882
BEQ_W               18B0
BGT_B               185E
BGT_END             187C
BGT_L               1816
BGT_SIZE            180C
BGT_W               183A
BLE_B               194A
BLE_END             1968
BLE_L               1902
BLE_SIZE            18F8
BLE_W               1926
BOUNDARY1           10EE
BOUNDARY2           1192
BRA_B               19C0
BRA_END             19DE
BRA_L               1978
BRA_SIZE            196E
BRA_W               199C
BYTE_SIZE           1
CONT                1098
CONT2               113C
CR                  D
DATA                2040
DISP_DONE           1416
DISP_LOOP           1402
DN_EA_ABS_ADD_LONG  32CA
DN_EA_ABS_ADD_LONG_OUT  355C
DN_EA_ABS_ADD_WORD  32B4
DN_EA_ABS_ADD_WORD_OUT  354E
DN_EA_ADD_REG0      27C4
DN_EA_ADD_REG0_OUT  2834
DN_EA_ADD_REG1      27D2
DN_EA_ADD_REG1_OUT  2840
DN_EA_ADD_REG2      27E0
DN_EA_ADD_REG2_OUT  284C
DN_EA_ADD_REG3      27EE
DN_EA_ADD_REG3_OUT  2858
DN_EA_ADD_REG4      27FC
DN_EA_ADD_REG4_OUT  2864
DN_EA_ADD_REG5      280A
DN_EA_ADD_REG5_OUT  2870
DN_EA_ADD_REG6      2818
DN_EA_ADD_REG6_OUT  287C
DN_EA_ADD_REG7      2826
DN_EA_ADD_REG7_OUT  2888
DN_EA_ADD_REG_INDIR  328A
DN_EA_ADD_REG_INDIR_POSTINC  32A6
DN_EA_ADD_REG_INDIR_PREDEC  3298
DN_EA_AND_REG0      31B2
DN_EA_AND_REG0_OUT  3222
DN_EA_AND_REG1      31C0
DN_EA_AND_REG1_OUT  322E
DN_EA_AND_REG2      31CE
DN_EA_AND_REG2_OUT  323A
DN_EA_AND_REG3      31DC
DN_EA_AND_REG3_OUT  3246
DN_EA_AND_REG4      31EA
DN_EA_AND_REG4_OUT  3252
DN_EA_AND_REG5      31F8
DN_EA_AND_REG5_OUT  325E
DN_EA_AND_REG6      3206
DN_EA_AND_REG6_OUT  326A
DN_EA_AND_REG7      3214
DN_EA_AND_REG7_OUT  3276
DN_EA_AN_INDIR_POSTINC_REG  33AE
DN_EA_AN_INDIR_POSTINC_REG0_OUT  341E
DN_EA_AN_INDIR_POSTINC_REG1  33BC
DN_EA_AN_INDIR_POSTINC_REG1_OUT  342A
DN_EA_AN_INDIR_POSTINC_REG2  33CA
DN_EA_AN_INDIR_POSTINC_REG2_OUT  3436
DN_EA_AN_INDIR_POSTINC_REG3  33D8
DN_EA_AN_INDIR_POSTINC_REG3_OUT  3442
DN_EA_AN_INDIR_POSTINC_REG4  33E6
DN_EA_AN_INDIR_POSTINC_REG4_OUT  344E
DN_EA_AN_INDIR_POSTINC_REG5  33F4
DN_EA_AN_INDIR_POSTINC_REG5_OUT  345A
DN_EA_AN_INDIR_POSTINC_REG6  3402
DN_EA_AN_INDIR_POSTINC_REG6_OUT  3466
DN_EA_AN_INDIR_POSTINC_REG7  3410
DN_EA_AN_INDIR_POSTINC_REG7_OUT  3472
DN_EA_AN_INDIR_PREDEC  347E
DN_EA_AN_INDIR_PREDEC_REG0_OUT  34EE
DN_EA_AN_INDIR_PREDEC_REG1  348C
DN_EA_AN_INDIR_PREDEC_REG1_OUT  34FA
DN_EA_AN_INDIR_PREDEC_REG2  349A
DN_EA_AN_INDIR_PREDEC_REG2_OUT  3506
DN_EA_AN_INDIR_PREDEC_REG3  34A8
DN_EA_AN_INDIR_PREDEC_REG3_OUT  3512
DN_EA_AN_INDIR_PREDEC_REG4  34B6
DN_EA_AN_INDIR_PREDEC_REG4_OUT  351E
DN_EA_AN_INDIR_PREDEC_REG5  34C4
DN_EA_AN_INDIR_PREDEC_REG5_OUT  352A
DN_EA_AN_INDIR_PREDEC_REG6  34D2
DN_EA_AN_INDIR_PREDEC_REG6_OUT  3536
DN_EA_AN_INDIR_PREDEC_REG7  34E0
DN_EA_AN_INDIR_PREDEC_REG7_OUT  3542
DN_EA_AN_INDIR_REG  32DE
DN_EA_AN_INDIR_REG0_OUT  334E
DN_EA_AN_INDIR_REG1  32EC
DN_EA_AN_INDIR_REG1_OUT  335A
DN_EA_AN_INDIR_REG2  32FA
DN_EA_AN_INDIR_REG2_OUT  3366
DN_EA_AN_INDIR_REG3  3308
DN_EA_AN_INDIR_REG3_OUT  3372
DN_EA_AN_INDIR_REG4  3316
DN_EA_AN_INDIR_REG4_OUT  337E
DN_EA_AN_INDIR_REG5  3324
DN_EA_AN_INDIR_REG5_OUT  338A
DN_EA_AN_INDIR_REG6  3332
DN_EA_AN_INDIR_REG6_OUT  3396
DN_EA_AN_INDIR_REG7  3340
DN_EA_AN_INDIR_REG7_OUT  33A2
DN_EA_SUB_REG0      60B2
DN_EA_SUB_REG0_OUT  6122
DN_EA_SUB_REG1      60C0
DN_EA_SUB_REG1_OUT  612E
DN_EA_SUB_REG2      60CE
DN_EA_SUB_REG2_OUT  613A
DN_EA_SUB_REG3      60DC
DN_EA_SUB_REG3_OUT  6146
DN_EA_SUB_REG4      60EA
DN_EA_SUB_REG4_OUT  6152
DN_EA_SUB_REG5      60F8
DN_EA_SUB_REG5_OUT  615E
DN_EA_SUB_REG6      6106
DN_EA_SUB_REG6_OUT  616A
DN_EA_SUB_REG7      6114
DN_EA_SUB_REG7_OUT  6176
EA_$                69ED
EA_A0               6933
EA_A1               6936
EA_A2               6939
EA_A3               693C
EA_A4               693F
EA_A5               6942
EA_A6               6945
EA_A7               6948
EA_ABS_LONG_STRING  69EA
EA_ABS_WORD_STRING  69E7
EA_D0               691B
EA_D1               691E
EA_D2               6921
EA_D3               6924
EA_D4               6927
EA_D5               692A
EA_D6               692D
EA_D7               6930
EA_DATA0            69EF
EA_DATA1            69F2
EA_DATA2            69F5
EA_DATA3            69F8
EA_DATA4            69FB
EA_DATA5            69FE
EA_DATA6            6A01
EA_DATA7            6A04
EA_DN_ADD_REG0      26EC
EA_DN_ADD_REG0_OUT  275C
EA_DN_ADD_REG1      26FA
EA_DN_ADD_REG1_OUT  2768
EA_DN_ADD_REG2      2708
EA_DN_ADD_REG2_OUT  2774
EA_DN_ADD_REG3      2716
EA_DN_ADD_REG3_OUT  2780
EA_DN_ADD_REG4      2724
EA_DN_ADD_REG4_OUT  278C
EA_DN_ADD_REG5      2732
EA_DN_ADD_REG5_OUT  2798
EA_DN_ADD_REG6      2740
EA_DN_ADD_REG6_OUT  27A4
EA_DN_ADD_REG7      274E
EA_DN_ADD_REG7_OUT  27B0
EA_DN_AND_REG0      30DA
EA_DN_AND_REG0_OUT  314A
EA_DN_AND_REG1      30E8
EA_DN_AND_REG1_OUT  3156
EA_DN_AND_REG2      30F6
EA_DN_AND_REG2_OUT  3162
EA_DN_AND_REG3      3104
EA_DN_AND_REG3_OUT  316E
EA_DN_AND_REG4      3112
EA_DN_AND_REG4_OUT  317A
EA_DN_AND_REG5      3120
EA_DN_AND_REG5_OUT  3186
EA_DN_AND_REG6      312E
EA_DN_AND_REG6_OUT  3192
EA_DN_AND_REG7      313C
EA_DN_AND_REG7_OUT  319E
EA_DN_SUB_REG0      5FDA
EA_DN_SUB_REG0_OUT  604A
EA_DN_SUB_REG1      5FE8
EA_DN_SUB_REG1_OUT  6056
EA_DN_SUB_REG2      5FF6
EA_DN_SUB_REG2_OUT  6062
EA_DN_SUB_REG3      6004
EA_DN_SUB_REG3_OUT  606E
EA_DN_SUB_REG4      6012
EA_DN_SUB_REG4_OUT  607A
EA_DN_SUB_REG5      6020
EA_DN_SUB_REG5_OUT  6086
EA_DN_SUB_REG6      602E
EA_DN_SUB_REG6_OUT  6092
EA_DN_SUB_REG7      603C
EA_DN_SUB_REG7_OUT  609E
EA_INDIR_A0         695B
EA_INDIR_A1         6960
EA_INDIR_A2         6965
EA_INDIR_A3         696A
EA_INDIR_A4         696F
EA_INDIR_A5         6974
EA_INDIR_A6         6979
EA_INDIR_A7         697E
EA_INDIR_POSTINC_A0  6983
EA_INDIR_POSTINC_A1  6989
EA_INDIR_POSTINC_A2  698F
EA_INDIR_POSTINC_A3  6995
EA_INDIR_POSTINC_A4  699B
EA_INDIR_POSTINC_A5  69A1
EA_INDIR_POSTINC_A6  69A7
EA_INDIR_POSTINC_A7  69AD
EA_INDIR_PREDEC_A0  69B3
EA_INDIR_PREDEC_A1  69B9
EA_INDIR_PREDEC_A2  69BF
EA_INDIR_PREDEC_A3  69C5
EA_INDIR_PREDEC_A4  69CB
EA_INDIR_PREDEC_A5  69D1
EA_INDIR_PREDEC_A6  69D7
EA_INDIR_PREDEC_A7  69DD
EA_PAREN_CLOSED     69E5
EA_PAREN_OPEN       69E3
EA_VAL0             694B
EA_VAL1             694D
EA_VAL2             694F
EA_VAL3             6951
EA_VAL4             6953
EA_VAL5             6955
EA_VAL6             6957
EA_VAL7             6959
END_ADR             73BA
END_AN              224C
END_AQ              2230
END_BAD             11C2
END_DATA            227E
END_G1              20C8
END_G2              210E
END_G3              214C
END_G4              21DA
END_MOVEQ           2268
END_MV              2062
END_OP              2046
END_OR              225A
END_REQUEST         674B
END_SB              223E
ENTR_LP             11F8
ERR                 1030
ERROR               356C
ERROR_MESSAGE       6907
EXIT_LOOP           1266
GROUP1_DECODE       2074
GROUP2_DECODE       20F8
GROUP3_DECODE       2122
GROUP4_DECODE       216A
HEX_CLEAR           0
HT                  9
INPUT1              106E
INPUT1PASS          10C6
INPUT2              1112
INPUT2PASS          116A
INPUT_LOOP          1082
INPUT_LOOP2         1126
IO_SUBROUTINE       1052
IPT_DONE            109C
IPT_DONE2           1140
JSR_ABS_ADD_LONG    4682
JSR_ABS_ADD_LONG_OUT  4774
JSR_ABS_ADD_WORD    466C
JSR_ABS_ADD_WORD_OUT  4766
JSR_ADD_REG_INDIR   465E
JSR_AN_INDIR_REG    4690
JSR_AN_INDIR_REG0_OUT  4706
JSR_AN_INDIR_REG1   46A4
JSR_AN_INDIR_REG1_OUT  4712
JSR_AN_INDIR_REG2   46B2
JSR_AN_INDIR_REG2_OUT  471E
JSR_AN_INDIR_REG3   46C0
JSR_AN_INDIR_REG3_OUT  472A
JSR_AN_INDIR_REG4   46CE
JSR_AN_INDIR_REG4_OUT  4736
JSR_AN_INDIR_REG5   46DC
JSR_AN_INDIR_REG5_OUT  4742
JSR_AN_INDIR_REG6   46EA
JSR_AN_INDIR_REG6_OUT  474E
JSR_AN_INDIR_REG7   46F8
JSR_AN_INDIR_REG7_OUT  475A
JSR_SIZE            1666
JSR_SUB             4654
LEA_ABS_ADD_LONG    47B2
LEA_ABS_ADD_LONG_OUT  48A4
LEA_ABS_ADD_WORD    479C
LEA_ABS_ADD_WORD_OUT  4896
LEA_ADD_REG_INDIR   478E
LEA_AN_INDIR_REG    47C0
LEA_AN_INDIR_REG0_OUT  4836
LEA_AN_INDIR_REG1   47D4
LEA_AN_INDIR_REG1_OUT  4842
LEA_AN_INDIR_REG2   47E2
LEA_AN_INDIR_REG2_OUT  484E
LEA_AN_INDIR_REG3   47F0
LEA_AN_INDIR_REG3_OUT  485A
LEA_AN_INDIR_REG4   47FE
LEA_AN_INDIR_REG4_OUT  4866
LEA_AN_INDIR_REG5   480C
LEA_AN_INDIR_REG5_OUT  4872
LEA_AN_INDIR_REG6   481A
LEA_AN_INDIR_REG6_OUT  487E
LEA_AN_INDIR_REG7   4828
LEA_AN_INDIR_REG7_OUT  488A
LEA_DETERMINE_SECOND_OP  48B4
LEA_REG0            48BC
LEA_REG0_OUT        492C
LEA_REG1            48CA
LEA_REG1_OUT        4938
LEA_REG2            48D8
LEA_REG2_OUT        4944
LEA_REG3            48E6
LEA_REG3_OUT        4950
LEA_REG4            48F4
LEA_REG4_OUT        495C
LEA_REG5            4902
LEA_REG5_OUT        4968
LEA_REG6            4910
LEA_REG6_OUT        4974
LEA_REG7            491E
LEA_REG7_OUT        4980
LEA_SIZE            1644
LEA_SUB             4784
LETTER              103C
LF                  A
LINE_DONE           1440
LINE_LOOP           142C
LOAD2_MESSAGE       6689
LOAD_MESSAGE        6620
LONG_SIZE           3
LOOPM               11E0
LOOPM_CONT          1220
LOOPM_DONE          122E
LSLM_END            1A82
LSLR_END            1A64
LSLR_FAIL           1A5E
LSLR_L              1A44
LSLR_W              1A2A
LSL_M_SIZE          1A6A
LSL_R_SIZE          1A06
LSRM_END            1B04
LSRR_END            1AE6
LSRR_FAIL           1AE0
LSRR_L              1AC6
LSRR_W              1AAC
LSR_M_SIZE          1AEC
LSR_R_SIZE          1A88
MAIN                1000
MAIN_LOOP           11D2
MASK_ADDA           F0C0
MASK_ADDA_ABS_ADD   3F
MASK_ADDA_AN_REG    E00
MASK_ADDA_EA        FFF
MASK_ADDA_EA_MODE   38
MASK_ADDA_EA_REG    7
MASK_ADDA_EA_REG_AND_MODE  3F
MASK_ADDA_OPMODE    1C0
MASK_ADDA_REG       E00
MASK_ADDQ_ABS_ADD   3F
MASK_ADDQ_DATA      E00
MASK_ADDQ_EA        EFF
MASK_ADDQ_EA_MODE   38
MASK_ADDQ_EA_REG    7
MASK_ADDQ_EA_REG_AND_MODE  3F
MASK_ADDQ_REG       E00
MASK_ADDQ_SIZE      C0
MASK_ADD_ABS_ADD    3F
MASK_ADD_AN_REG     E00
MASK_ADD_EA         FFF
MASK_ADD_EA_MODE    38
MASK_ADD_EA_REG     7
MASK_ADD_EA_REG_AND_MODE  3F
MASK_ADD_OPMODE     1C0
MASK_ADD_REG        E00
MASK_AND_ABS_ADD    3F
MASK_AND_AN_REG     E00
MASK_AND_EA         FFF
MASK_AND_EA_MODE    38
MASK_AND_EA_REG     7
MASK_AND_EA_REG_AND_MODE  3F
MASK_AND_OPMODE     1C0
MASK_AND_REG        E00
MASK_ASD_COUNT_SHIFT  E00
MASK_ASD_DATA_REG   7
MASK_ASD_EA_MODE    38
MASK_ASD_EA_MODE_ABS_ADD  3F
MASK_ASD_EA_REG_AND_MODE  3F
MASK_ASD_REG_SHIFT  20
MASK_ASD_REG_SHIFT_IR  20
MASK_ASD_SHIFT_TYPE  C0
MASK_ASL_MEM_SHIFT_DIRECT  100
MASK_ASL_MEM_SHIFT_EA  13F
MASK_ASL_MEM_SHIFT_EA_MODE  38
MASK_ASL_MEM_SHIFT_EA_REG  7
MASK_ASL_REG_SHIFT_COUNT  E00
MASK_ASL_REG_SHIFT_DIRECT  100
MASK_ASL_REG_SHIFT_EA  FE7
MASK_ASL_REG_SHIFT_IR  20
MASK_ASL_REG_SHIFT_REG  7
MASK_ASL_REG_SHIFT_SIZE  C0
MASK_ASR_MEM_SHIFT_DIRECT  100
MASK_ASR_MEM_SHIFT_EA  13F
MASK_ASR_MEM_SHIFT_EA_MODE  38
MASK_ASR_MEM_SHIFT_EA_REG  7
MASK_ASR_REG_SHIFT_COUNT  E00
MASK_ASR_REG_SHIFT_DIRECT  100
MASK_ASR_REG_SHIFT_EA  FE7
MASK_ASR_REG_SHIFT_IR  20
MASK_ASR_REG_SHIFT_REG  7
MASK_ASR_REG_SHIFT_SIZE  C0
MASK_BCC            FF00
MASK_BCC_COND       E00
MASK_BCC_DISPLACE   FF
MASK_BCC_EA         FFF
MASK_BCC_SIZE       FF
MASK_BGT_DISPLACE   FF
MASK_BGT_EA         F00
MASK_BLE_DISPLACE   FF
MASK_BLE_EA         F00
MASK_BRA_EA         FF
MASK_JSR            FFC0
MASK_JSR_ABS_ADD    3F
MASK_JSR_AN_REG     E00
MASK_JSR_EA         3F
MASK_JSR_EA_MODE    38
MASK_JSR_EA_REG     7
MASK_JSR_EA_REG_AND_MODE  3F
MASK_LEA            F1C0
MASK_LEA_ABS_ADD    3F
MASK_LEA_AN_REG     E00
MASK_LEA_EA         E3F
MASK_LEA_EA_MODE    38
MASK_LEA_EA_REG     7
MASK_LEA_EA_REG_AND_MODE  3F
MASK_LEA_REG        E00
MASK_LSL_MEM_SHIFT_DIRECT  100
MASK_LSL_MEM_SHIFT_EA  13F
MASK_LSL_MEM_SHIFT_EA_MODE  38
MASK_LSL_MEM_SHIFT_EA_REG  7
MASK_LSL_REG_SHIFT_COUNT  E00
MASK_LSL_REG_SHIFT_DIRECT  100
MASK_LSL_REG_SHIFT_EA  FE7
MASK_LSL_REG_SHIFT_IR  20
MASK_LSL_REG_SHIFT_REG  7
MASK_LSL_REG_SHIFT_SIZE  C0
MASK_LSR_MEM_SHIFT_DIRECT  100
MASK_LSR_MEM_SHIFT_EA  13F
MASK_LSR_MEM_SHIFT_EA_MODE  38
MASK_LSR_MEM_SHIFT_EA_REG  7
MASK_LSR_REG_SHIFT_COUNT  E00
MASK_LSR_REG_SHIFT_DIRECT  100
MASK_LSR_REG_SHIFT_EA  FE7
MASK_LSR_REG_SHIFT_IR  20
MASK_LSR_REG_SHIFT_REG  7
MASK_LSR_REG_SHIFT_SIZE  C0
MASK_MOVE           C000
MASK_MOVEA_DST_REG  E00
MASK_MOVEA_EA       E3F
MASK_MOVEA_SRC_MODE  38
MASK_MOVEA_SRC_REG  7
MASK_MOVEM          FF80
MASK_MOVEM_ABS_ADD  38
MASK_MOVEM_DIR      400
MASK_MOVEM_DIRECT   400
MASK_MOVEM_EA       47F
MASK_MOVEM_EA_MODE  3C
MASK_MOVEM_EA_REG   7
MASK_MOVEM_EA_REG_AND_MODE  3F
MASK_MOVEM_MEM_REG_A0  100
MASK_MOVEM_MEM_REG_A1  200
MASK_MOVEM_MEM_REG_A2  400
MASK_MOVEM_MEM_REG_A3  800
MASK_MOVEM_MEM_REG_A4  1000
MASK_MOVEM_MEM_REG_A5  2000
MASK_MOVEM_MEM_REG_A6  4000
MASK_MOVEM_MEM_REG_A7  8000
MASK_MOVEM_MEM_REG_D0  100
MASK_MOVEM_MEM_REG_D1  200
MASK_MOVEM_MEM_REG_D2  400
MASK_MOVEM_MEM_REG_D3  800
MASK_MOVEM_MEM_REG_D4  1000
MASK_MOVEM_MEM_REG_D5  2000
MASK_MOVEM_MEM_REG_D6  4000
MASK_MOVEM_MEM_REG_D7  8000
MASK_MOVEM_REG_MEM_A0  80
MASK_MOVEM_REG_MEM_A1  40
MASK_MOVEM_REG_MEM_A2  20
MASK_MOVEM_REG_MEM_A3  10
MASK_MOVEM_REG_MEM_A4  8
MASK_MOVEM_REG_MEM_A5  4
MASK_MOVEM_REG_MEM_A6  2
MASK_MOVEM_REG_MEM_A7  1
MASK_MOVEM_REG_MEM_D0  8000
MASK_MOVEM_REG_MEM_D1  4000
MASK_MOVEM_REG_MEM_D2  2000
MASK_MOVEM_REG_MEM_D3  1000
MASK_MOVEM_REG_MEM_D4  800
MASK_MOVEM_REG_MEM_D5  400
MASK_MOVEM_REG_MEM_D6  200
MASK_MOVEM_REG_MEM_D7  100
MASK_MOVEM_SIZE     40
MASK_MOVEQ_DATA     FF
MASK_MOVEQ_EA       EFF
MASK_MOVEQ_REG      E00
MASK_MOVE_A         1C0
MASK_MOVE_DEST_ABS_ADD  1C0
MASK_MOVE_DEST_EA_MODE  1C0
MASK_MOVE_DEST_EA_REG_AND_MODE  FC0
MASK_MOVE_DST_MODE  1C0
MASK_MOVE_DST_REG   E00
MASK_MOVE_EA        FFF
MASK_MOVE_SRC_ABS_ADD  3F
MASK_MOVE_SRC_EA_MODE  38
MASK_MOVE_SRC_EA_REG_AND_MODE  3F
MASK_MOVE_SRC_MODE  7
MASK_MOVE_SRC_REG   38
MASK_NOT            FF00
MASK_NOT_EA         FF
MASK_NOT_EA_MODE    38
MASK_NOT_EA_REG     7
MASK_NOT_SIZE       C0
MASK_OPCODE         F000
MASK_OPMODE         1C0
MASK_OR_EA          FFF
MASK_OR_EA_MODE     38
MASK_OR_EA_REG      7
MASK_OR_OPMODE      1C0
MASK_OR_REG         E00
MASK_ROL_MEM_ROT_DIRECT  100
MASK_ROL_MEM_ROT_EA  13F
MASK_ROL_MEM_ROT_EA_MODE  38
MASK_ROL_MEM_ROT_EA_REG  7
MASK_ROL_REG_ROT_COUNT  E00
MASK_ROL_REG_ROT_DIRECT  100
MASK_ROL_REG_ROT_EA  FE7
MASK_ROL_REG_ROT_IR  20
MASK_ROL_REG_ROT_REG  7
MASK_ROL_REG_ROT_SIZE  C00
MASK_ROR_MEM_ROT_DIRECT  100
MASK_ROR_MEM_ROT_EA  13F
MASK_ROR_MEM_ROT_EA_MODE  38
MASK_ROR_MEM_ROT_EA_REG  7
MASK_ROR_REG_ROT_COUNT  E00
MASK_ROR_REG_ROT_DIRECT  100
MASK_ROR_REG_ROT_EA  FE7
MASK_ROR_REG_ROT_IR  20
MASK_ROR_REG_ROT_REG  7
MASK_ROR_REG_ROT_SIZE  C0
MASK_SHFT_M         FFC0
MASK_SHFT_R         F118
MASK_SIZE_ADD       C0
MASK_SIZE_ADDA      100
MASK_SIZE_LOGIC     C0
MASK_SIZE_MOVEM     40
MASK_SIZE_MOVEQ     F100
MASK_SIZE_MOVES     3000
MASK_SIZE_NOT       C0
MASK_SIZE_SHIFTS    C0
MASK_SIZE_SUB       C0
MASK_SUB_ABS_ADD    3F
MASK_SUB_AN_REG     E00
MASK_SUB_EA         FFF
MASK_SUB_EA_MODE    38
MASK_SUB_EA_REG     7
MASK_SUB_EA_REG_AND_MODE  3F
MASK_SUB_OPMODE     1C0
MASK_SUB_REG        E00
MATCH_ADDA          D0C0
MATCH_ADDA_A0       8
MATCH_ADDA_A1       9
MATCH_ADDA_A2       A
MATCH_ADDA_A3       B
MATCH_ADDA_A4       C
MATCH_ADDA_A5       D
MATCH_ADDA_A6       E
MATCH_ADDA_A7       F
MATCH_ADDA_ABS_ADD_LONG  39
MATCH_ADDA_ABS_ADD_WORD  38
MATCH_ADDA_AN       8
MATCH_ADDA_AN_INDIR  10
MATCH_ADDA_AN_INDIR_POSTINC  18
MATCH_ADDA_AN_INDIR_POSTINC_REG0  18
MATCH_ADDA_AN_INDIR_POSTINC_REG1  19
MATCH_ADDA_AN_INDIR_POSTINC_REG2  1A
MATCH_ADDA_AN_INDIR_POSTINC_REG3  1B
MATCH_ADDA_AN_INDIR_POSTINC_REG4  1C
MATCH_ADDA_AN_INDIR_POSTINC_REG5  1D
MATCH_ADDA_AN_INDIR_POSTINC_REG6  1E
MATCH_ADDA_AN_INDIR_POSTINC_REG7  1F
MATCH_ADDA_AN_INDIR_PREDEC  20
MATCH_ADDA_AN_INDIR_PREDEC_REG0  20
MATCH_ADDA_AN_INDIR_PREDEC_REG1  21
MATCH_ADDA_AN_INDIR_PREDEC_REG2  22
MATCH_ADDA_AN_INDIR_PREDEC_REG3  23
MATCH_ADDA_AN_INDIR_PREDEC_REG4  24
MATCH_ADDA_AN_INDIR_PREDEC_REG5  25
MATCH_ADDA_AN_INDIR_PREDEC_REG6  26
MATCH_ADDA_AN_INDIR_PREDEC_REG7  27
MATCH_ADDA_AN_INDIR_R0  10
MATCH_ADDA_AN_INDIR_R1  11
MATCH_ADDA_AN_INDIR_R2  12
MATCH_ADDA_AN_INDIR_R3  13
MATCH_ADDA_AN_INDIR_R4  14
MATCH_ADDA_AN_INDIR_R5  15
MATCH_ADDA_AN_INDIR_R6  16
MATCH_ADDA_AN_INDIR_R7  17
MATCH_ADDA_D0       0
MATCH_ADDA_D1       1
MATCH_ADDA_D2       2
MATCH_ADDA_D3       3
MATCH_ADDA_D4       4
MATCH_ADDA_D5       5
MATCH_ADDA_D6       6
MATCH_ADDA_D7       7
MATCH_ADDA_DN       0
MATCH_ADDA_IMM_ADD  3C
MATCH_ADDA_IMM_ADD_LONG  1FC
MATCH_ADDA_IMM_ADD_WORD  FC
MATCH_ADDA_REG0     0
MATCH_ADDA_REG1     200
MATCH_ADDA_REG2     400
MATCH_ADDA_REG3     600
MATCH_ADDA_REG4     800
MATCH_ADDA_REG5     A00
MATCH_ADDA_REG6     C00
MATCH_ADDA_REG7     E00
MATCH_ADDQ          5000
MATCH_ADDQ_A0       8
MATCH_ADDQ_A1       9
MATCH_ADDQ_A2       A
MATCH_ADDQ_A3       B
MATCH_ADDQ_A4       C
MATCH_ADDQ_A5       D
MATCH_ADDQ_A6       E
MATCH_ADDQ_A7       F
MATCH_ADDQ_ABS_ADD_LONG  39
MATCH_ADDQ_ABS_ADD_WORD  38
MATCH_ADDQ_AN       8
MATCH_ADDQ_AN_INDIR  10
MATCH_ADDQ_AN_INDIR_POSTINC  18
MATCH_ADDQ_AN_INDIR_POSTINC_REG0  18
MATCH_ADDQ_AN_INDIR_POSTINC_REG1  19
MATCH_ADDQ_AN_INDIR_POSTINC_REG2  1A
MATCH_ADDQ_AN_INDIR_POSTINC_REG3  1B
MATCH_ADDQ_AN_INDIR_POSTINC_REG4  1C
MATCH_ADDQ_AN_INDIR_POSTINC_REG5  1D
MATCH_ADDQ_AN_INDIR_POSTINC_REG6  1E
MATCH_ADDQ_AN_INDIR_POSTINC_REG7  1F
MATCH_ADDQ_AN_INDIR_PREDEC  20
MATCH_ADDQ_AN_INDIR_PREDEC_REG0  20
MATCH_ADDQ_AN_INDIR_PREDEC_REG1  21
MATCH_ADDQ_AN_INDIR_PREDEC_REG2  22
MATCH_ADDQ_AN_INDIR_PREDEC_REG3  23
MATCH_ADDQ_AN_INDIR_PREDEC_REG4  24
MATCH_ADDQ_AN_INDIR_PREDEC_REG5  25
MATCH_ADDQ_AN_INDIR_PREDEC_REG6  26
MATCH_ADDQ_AN_INDIR_PREDEC_REG7  27
MATCH_ADDQ_AN_INDIR_R0  10
MATCH_ADDQ_AN_INDIR_R1  11
MATCH_ADDQ_AN_INDIR_R2  12
MATCH_ADDQ_AN_INDIR_R3  13
MATCH_ADDQ_AN_INDIR_R4  14
MATCH_ADDQ_AN_INDIR_R5  15
MATCH_ADDQ_AN_INDIR_R6  16
MATCH_ADDQ_AN_INDIR_R7  17
MATCH_ADDQ_D0       0
MATCH_ADDQ_D1       1
MATCH_ADDQ_D2       2
MATCH_ADDQ_D3       3
MATCH_ADDQ_D4       4
MATCH_ADDQ_D5       5
MATCH_ADDQ_D6       6
MATCH_ADDQ_D7       7
MATCH_ADDQ_DN       0
MATCH_ADDQ_REG0     0
MATCH_ADDQ_REG1     200
MATCH_ADDQ_REG2     400
MATCH_ADDQ_REG3     600
MATCH_ADDQ_REG4     800
MATCH_ADDQ_REG5     A00
MATCH_ADDQ_REG6     C00
MATCH_ADDQ_REG7     E00
MATCH_ADD_A0        8
MATCH_ADD_A1        9
MATCH_ADD_A2        A
MATCH_ADD_A3        B
MATCH_ADD_A4        C
MATCH_ADD_A5        D
MATCH_ADD_A6        E
MATCH_ADD_A7        F
MATCH_ADD_ABS_ADD_LONG  39
MATCH_ADD_ABS_ADD_WORD  38
MATCH_ADD_AN        8
MATCH_ADD_AN_INDIR  10
MATCH_ADD_AN_INDIR_POSTINC  18
MATCH_ADD_AN_INDIR_POSTINC_R0  18
MATCH_ADD_AN_INDIR_POSTINC_R1  19
MATCH_ADD_AN_INDIR_POSTINC_R2  1A
MATCH_ADD_AN_INDIR_POSTINC_R3  1B
MATCH_ADD_AN_INDIR_POSTINC_R4  1C
MATCH_ADD_AN_INDIR_POSTINC_R5  1D
MATCH_ADD_AN_INDIR_POSTINC_R6  1E
MATCH_ADD_AN_INDIR_POSTINC_R7  1F
MATCH_ADD_AN_INDIR_PREDEC  20
MATCH_ADD_AN_INDIR_PREDEC_REG0  20
MATCH_ADD_AN_INDIR_PREDEC_REG1  21
MATCH_ADD_AN_INDIR_PREDEC_REG2  22
MATCH_ADD_AN_INDIR_PREDEC_REG3  23
MATCH_ADD_AN_INDIR_PREDEC_REG4  24
MATCH_ADD_AN_INDIR_PREDEC_REG5  25
MATCH_ADD_AN_INDIR_PREDEC_REG6  26
MATCH_ADD_AN_INDIR_PREDEC_REG7  27
MATCH_ADD_AN_INDIR_R0  10
MATCH_ADD_AN_INDIR_R1  11
MATCH_ADD_AN_INDIR_R2  12
MATCH_ADD_AN_INDIR_R3  13
MATCH_ADD_AN_INDIR_R4  14
MATCH_ADD_AN_INDIR_R5  15
MATCH_ADD_AN_INDIR_R6  16
MATCH_ADD_AN_INDIR_R7  17
MATCH_ADD_B_DN_EA   0
MATCH_ADD_B_EA_DN   100
MATCH_ADD_D0        0
MATCH_ADD_D1        1
MATCH_ADD_D2        2
MATCH_ADD_D3        3
MATCH_ADD_D4        4
MATCH_ADD_D5        5
MATCH_ADD_D6        6
MATCH_ADD_D7        7
MATCH_ADD_DN        0
MATCH_ADD_L_DN_EA   80
MATCH_ADD_L_EA_DN   180
MATCH_ADD_REG0      0
MATCH_ADD_REG1      200
MATCH_ADD_REG2      400
MATCH_ADD_REG3      600
MATCH_ADD_REG4      800
MATCH_ADD_REG5      A00
MATCH_ADD_REG6      C00
MATCH_ADD_REG7      E00
MATCH_ADD_W_DN_EA   40
MATCH_ADD_W_EA_DN   140
MATCH_AND           C000
MATCH_AND_A0        8
MATCH_AND_A1        9
MATCH_AND_A2        A
MATCH_AND_A3        B
MATCH_AND_A4        C
MATCH_AND_A5        D
MATCH_AND_A6        E
MATCH_AND_A7        F
MATCH_AND_ABS_ADD_LONG  39
MATCH_AND_ABS_ADD_WORD  38
MATCH_AND_AN_INDIR  10
MATCH_AND_AN_INDIR_POSTINC  18
MATCH_AND_AN_INDIR_POSTINC_R0  18
MATCH_AND_AN_INDIR_POSTINC_R1  19
MATCH_AND_AN_INDIR_POSTINC_R2  1A
MATCH_AND_AN_INDIR_POSTINC_R3  1B
MATCH_AND_AN_INDIR_POSTINC_R4  1C
MATCH_AND_AN_INDIR_POSTINC_R5  1D
MATCH_AND_AN_INDIR_POSTINC_R6  1E
MATCH_AND_AN_INDIR_POSTINC_R7  1F
MATCH_AND_AN_INDIR_PREDEC  20
MATCH_AND_AN_INDIR_PREDEC_REG0  20
MATCH_AND_AN_INDIR_PREDEC_REG1  21
MATCH_AND_AN_INDIR_PREDEC_REG2  22
MATCH_AND_AN_INDIR_PREDEC_REG3  23
MATCH_AND_AN_INDIR_PREDEC_REG4  24
MATCH_AND_AN_INDIR_PREDEC_REG5  25
MATCH_AND_AN_INDIR_PREDEC_REG6  26
MATCH_AND_AN_INDIR_PREDEC_REG7  27
MATCH_AND_AN_INDIR_R0  10
MATCH_AND_AN_INDIR_R1  11
MATCH_AND_AN_INDIR_R2  12
MATCH_AND_AN_INDIR_R3  13
MATCH_AND_AN_INDIR_R4  14
MATCH_AND_AN_INDIR_R5  15
MATCH_AND_AN_INDIR_R6  16
MATCH_AND_AN_INDIR_R7  17
MATCH_AND_B_DN_EA   0
MATCH_AND_B_EA_DN   100
MATCH_AND_D0        0
MATCH_AND_D1        1
MATCH_AND_D2        2
MATCH_AND_D3        3
MATCH_AND_D4        4
MATCH_AND_D5        5
MATCH_AND_D6        6
MATCH_AND_D7        7
MATCH_AND_DN        0
MATCH_AND_IMM_ADD   3C
MATCH_AND_IMM_ADD_LONG  1FC
MATCH_AND_IMM_ADD_WORD  FC
MATCH_AND_L_DN_EA   80
MATCH_AND_L_EA_DN   180
MATCH_AND_REG0      0
MATCH_AND_REG1      200
MATCH_AND_REG2      400
MATCH_AND_REG3      600
MATCH_AND_REG4      800
MATCH_AND_REG5      A00
MATCH_AND_REG6      C00
MATCH_AND_REG7      E00
MATCH_AND_W_DN_EA   40
MATCH_AND_W_EA_DN   140
MATCH_ASD_ABS_ADD_LONG  3C
MATCH_ASD_ABS_ADD_WORD  39
MATCH_ASD_AN_INDIR  10
MATCH_ASD_AN_INDIR_POSTINC  20
MATCH_ASD_AN_INDIR_POSTINC_R0  20
MATCH_ASD_AN_INDIR_POSTINC_R1  21
MATCH_ASD_AN_INDIR_POSTINC_R2  22
MATCH_ASD_AN_INDIR_POSTINC_R3  23
MATCH_ASD_AN_INDIR_POSTINC_R4  24
MATCH_ASD_AN_INDIR_POSTINC_R5  25
MATCH_ASD_AN_INDIR_POSTINC_R6  26
MATCH_ASD_AN_INDIR_POSTINC_R7  27
MATCH_ASD_AN_INDIR_PREDEC  18
MATCH_ASD_AN_INDIR_PREDEC_R0  18
MATCH_ASD_AN_INDIR_PREDEC_R1  19
MATCH_ASD_AN_INDIR_PREDEC_R2  1A
MATCH_ASD_AN_INDIR_PREDEC_R3  1B
MATCH_ASD_AN_INDIR_PREDEC_R4  1C
MATCH_ASD_AN_INDIR_PREDEC_R5  1D
MATCH_ASD_AN_INDIR_PREDEC_R6  1E
MATCH_ASD_AN_INDIR_PREDEC_R7  1F
MATCH_ASD_AN_INDIR_R0  10
MATCH_ASD_AN_INDIR_R1  11
MATCH_ASD_AN_INDIR_R2  12
MATCH_ASD_AN_INDIR_R3  13
MATCH_ASD_AN_INDIR_R4  14
MATCH_ASD_AN_INDIR_R5  15
MATCH_ASD_AN_INDIR_R6  16
MATCH_ASD_AN_INDIR_R7  17
MATCH_ASD_COUNT_REG0  0
MATCH_ASD_COUNT_REG1  200
MATCH_ASD_COUNT_REG2  400
MATCH_ASD_COUNT_REG3  600
MATCH_ASD_COUNT_REG4  800
MATCH_ASD_COUNT_REG5  A00
MATCH_ASD_COUNT_REG6  C00
MATCH_ASD_COUNT_REG7  E00
MATCH_ASD_COUNT_VAL0  0
MATCH_ASD_COUNT_VAL1  200
MATCH_ASD_COUNT_VAL2  400
MATCH_ASD_COUNT_VAL3  600
MATCH_ASD_COUNT_VAL4  800
MATCH_ASD_COUNT_VAL5  A00
MATCH_ASD_COUNT_VAL6  C00
MATCH_ASD_COUNT_VAL7  E00
MATCH_ASD_D_REG0    0
MATCH_ASD_D_REG1    1
MATCH_ASD_D_REG2    2
MATCH_ASD_D_REG3    3
MATCH_ASD_D_REG4    4
MATCH_ASD_D_REG5    5
MATCH_ASD_D_REG6    6
MATCH_ASD_D_REG7    7
MATCH_ASD_MEM_SHIFT  C0
MATCH_ASD_SHIFT_COUNT  20
MATCH_ASD_SHIFT_REG  20
MATCH_ASL_M         E1C0
MATCH_ASL_R         E100
MATCH_ASR_M         E0C0
MATCH_ASR_R         E000
MATCH_BEQ           6700
MATCH_BGT           6E00
MATCH_BLE           6F00
MATCH_BRA           6000
MATCH_G0100         4000
MATCH_G0110         6000
MATCH_G1101         D000
MATCH_G1110         E000
MATCH_IMM_ADD       3C
MATCH_IMM_ADD_LONG  1FC
MATCH_IMM_ADD_WORD  FC
MATCH_JSR           4E80
MATCH_JSR_ABS_ADD_LONG  39
MATCH_JSR_ABS_ADD_WORD  38
MATCH_JSR_AN_INDIR  10
MATCH_JSR_AN_INDIR_R0  10
MATCH_JSR_AN_INDIR_R1  11
MATCH_JSR_AN_INDIR_R2  12
MATCH_JSR_AN_INDIR_R3  13
MATCH_JSR_AN_INDIR_R4  14
MATCH_JSR_AN_INDIR_R5  15
MATCH_JSR_AN_INDIR_R6  16
MATCH_JSR_AN_INDIR_R7  17
MATCH_JSR_D0        0
MATCH_JSR_D1        1
MATCH_JSR_D2        2
MATCH_JSR_D3        3
MATCH_JSR_D4        4
MATCH_JSR_D5        5
MATCH_JSR_D6        6
MATCH_JSR_D7        7
MATCH_JSR_DN        0
MATCH_LEA           41C0
MATCH_LEA_ABS_ADD_LONG  39
MATCH_LEA_ABS_ADD_WORD  38
MATCH_LEA_AN_INDIR  10
MATCH_LEA_AN_INDIR_R0  10
MATCH_LEA_AN_INDIR_R1  11
MATCH_LEA_AN_INDIR_R2  12
MATCH_LEA_AN_INDIR_R3  13
MATCH_LEA_AN_INDIR_R4  14
MATCH_LEA_AN_INDIR_R5  15
MATCH_LEA_AN_INDIR_R6  16
MATCH_LEA_AN_INDIR_R7  17
MATCH_LEA_REG0      0
MATCH_LEA_REG1      200
MATCH_LEA_REG2      400
MATCH_LEA_REG3      600
MATCH_LEA_REG4      800
MATCH_LEA_REG5      A00
MATCH_LEA_REG6      C00
MATCH_LEA_REG7      E00
MATCH_LSL_M         E3C0
MATCH_LSL_R         E108
MATCH_LSR_M         E2C0
MATCH_LSR_R         E008
MATCH_MOVE          0
MATCH_MOVEA         40
MATCH_MOVEB         1000
MATCH_MOVEL         2000
MATCH_MOVEM_ABS_ADD_LONG  39
MATCH_MOVEM_ABS_ADD_WORD  38
MATCH_MOVEM_AN_INDIR  10
MATCH_MOVEM_AN_INDIR_PDEC  20
MATCH_MOVEM_AN_INDIR_PDEC_R0  20
MATCH_MOVEM_AN_INDIR_PDEC_R1  21
MATCH_MOVEM_AN_INDIR_PDEC_R2  22
MATCH_MOVEM_AN_INDIR_PDEC_R3  23
MATCH_MOVEM_AN_INDIR_PDEC_R4  24
MATCH_MOVEM_AN_INDIR_PDEC_R5  25
MATCH_MOVEM_AN_INDIR_PDEC_R6  26
MATCH_MOVEM_AN_INDIR_PDEC_R7  27
MATCH_MOVEM_AN_INDIR_PINC  10
MATCH_MOVEM_AN_INDIR_PINC_R0  18
MATCH_MOVEM_AN_INDIR_PINC_R1  19
MATCH_MOVEM_AN_INDIR_PINC_R2  1A
MATCH_MOVEM_AN_INDIR_PINC_R3  1B
MATCH_MOVEM_AN_INDIR_PINC_R4  1C
MATCH_MOVEM_AN_INDIR_PINC_R5  1D
MATCH_MOVEM_AN_INDIR_PINC_R6  1E
MATCH_MOVEM_AN_INDIR_PINC_R7  1F
MATCH_MOVEM_AN_INDIR_R0  10
MATCH_MOVEM_AN_INDIR_R1  11
MATCH_MOVEM_AN_INDIR_R2  12
MATCH_MOVEM_AN_INDIR_R3  13
MATCH_MOVEM_AN_INDIR_R4  14
MATCH_MOVEM_AN_INDIR_R5  15
MATCH_MOVEM_AN_INDIR_R6  16
MATCH_MOVEM_AN_INDIR_R7  17
MATCH_MOVEM_IMM_ADD  38
MATCH_MOVEM_IMM_ADD_LONG  39
MATCH_MOVEM_IMM_ADD_WORD  38
MATCH_MOVEM_MEM_REG  400
MATCH_MOVEM_MEM_REG_A0  100
MATCH_MOVEM_MEM_REG_A1  200
MATCH_MOVEM_MEM_REG_A2  400
MATCH_MOVEM_MEM_REG_A3  800
MATCH_MOVEM_MEM_REG_A4  1000
MATCH_MOVEM_MEM_REG_A5  2000
MATCH_MOVEM_MEM_REG_A6  4000
MATCH_MOVEM_MEM_REG_A7  8000
MATCH_MOVEM_MEM_REG_D0  100
MATCH_MOVEM_MEM_REG_D1  200
MATCH_MOVEM_MEM_REG_D2  400
MATCH_MOVEM_MEM_REG_D3  800
MATCH_MOVEM_MEM_REG_D4  1000
MATCH_MOVEM_MEM_REG_D5  2000
MATCH_MOVEM_MEM_REG_D6  4000
MATCH_MOVEM_MEM_REG_D7  8000
MATCH_MOVEM_MR      4C80
MATCH_MOVEM_REG_MEM  400
MATCH_MOVEM_REG_MEM_A0  80
MATCH_MOVEM_REG_MEM_A1  40
MATCH_MOVEM_REG_MEM_A2  20
MATCH_MOVEM_REG_MEM_A3  10
MATCH_MOVEM_REG_MEM_A4  8
MATCH_MOVEM_REG_MEM_A5  4
MATCH_MOVEM_REG_MEM_A6  2
MATCH_MOVEM_REG_MEM_A7  1
MATCH_MOVEM_REG_MEM_D0  8000
MATCH_MOVEM_REG_MEM_D1  4000
MATCH_MOVEM_REG_MEM_D2  2000
MATCH_MOVEM_REG_MEM_D3  1000
MATCH_MOVEM_REG_MEM_D4  800
MATCH_MOVEM_REG_MEM_D5  400
MATCH_MOVEM_REG_MEM_D6  200
MATCH_MOVEM_REG_MEM_D7  100
MATCH_MOVEM_RM      4880
MATCH_MOVEQ         7000
MATCH_MOVEW         3000
MATCH_MOVE_DEST_A0  40
MATCH_MOVE_DEST_A1  240
MATCH_MOVE_DEST_A2  440
MATCH_MOVE_DEST_A3  640
MATCH_MOVE_DEST_A4  840
MATCH_MOVE_DEST_A5  A40
MATCH_MOVE_DEST_A6  C40
MATCH_MOVE_DEST_A7  E40
MATCH_MOVE_DEST_ABS_ADD_LONG  9C0
MATCH_MOVE_DEST_ABS_ADD_WORD  1C0
MATCH_MOVE_DEST_AN  40
MATCH_MOVE_DEST_AN_INDIR  80
MATCH_MOVE_DEST_AN_INDIR_PDEC_R0  100
MATCH_MOVE_DEST_AN_INDIR_PDEC_R1  300
MATCH_MOVE_DEST_AN_INDIR_PDEC_R2  500
MATCH_MOVE_DEST_AN_INDIR_PDEC_R3  700
MATCH_MOVE_DEST_AN_INDIR_PDEC_R4  900
MATCH_MOVE_DEST_AN_INDIR_PDEC_R5  B00
MATCH_MOVE_DEST_AN_INDIR_PDEC_R6  D00
MATCH_MOVE_DEST_AN_INDIR_PDEC_R7  F00
MATCH_MOVE_DEST_AN_INDIR_PINC_R0  C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R1  2C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R2  4C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R3  6C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R4  8C0
MATCH_MOVE_DEST_AN_INDIR_PINC_R5  AC0
MATCH_MOVE_DEST_AN_INDIR_PINC_R6  CC0
MATCH_MOVE_DEST_AN_INDIR_PINC_R7  EC0
MATCH_MOVE_DEST_AN_INDIR_POSTINC  C0
MATCH_MOVE_DEST_AN_INDIR_PREDEC  100
MATCH_MOVE_DEST_AN_INDIR_R0  80
MATCH_MOVE_DEST_AN_INDIR_R1  280
MATCH_MOVE_DEST_AN_INDIR_R2  480
MATCH_MOVE_DEST_AN_INDIR_R3  680
MATCH_MOVE_DEST_AN_INDIR_R4  880
MATCH_MOVE_DEST_AN_INDIR_R5  A80
MATCH_MOVE_DEST_AN_INDIR_R6  C80
MATCH_MOVE_DEST_AN_INDIR_R7  E80
MATCH_MOVE_DEST_D0  0
MATCH_MOVE_DEST_D1  200
MATCH_MOVE_DEST_D2  400
MATCH_MOVE_DEST_D3  600
MATCH_MOVE_DEST_D4  800
MATCH_MOVE_DEST_D5  A00
MATCH_MOVE_DEST_D6  C00
MATCH_MOVE_DEST_D7  E00
MATCH_MOVE_DEST_DN  0
MATCH_MOVE_DEST_IMM_ADD  1C0
MATCH_MOVE_DEST_IMM_ADD_LONG  9C0
MATCH_MOVE_DEST_IMM_ADD_WORD  1C0
MATCH_MOVE_SRC_A0   8
MATCH_MOVE_SRC_A1   9
MATCH_MOVE_SRC_A2   A
MATCH_MOVE_SRC_A3   B
MATCH_MOVE_SRC_A4   C
MATCH_MOVE_SRC_A5   D
MATCH_MOVE_SRC_A6   E
MATCH_MOVE_SRC_A7   F
MATCH_MOVE_SRC_ABS_ADD_LONG  39
MATCH_MOVE_SRC_ABS_ADD_WORD  38
MATCH_MOVE_SRC_AN   8
MATCH_MOVE_SRC_AN_INDIR  10
MATCH_MOVE_SRC_AN_INDIR_PINC_R0  18
MATCH_MOVE_SRC_AN_INDIR_PINC_R1  19
MATCH_MOVE_SRC_AN_INDIR_PINC_R2  1A
MATCH_MOVE_SRC_AN_INDIR_PINC_R3  1B
MATCH_MOVE_SRC_AN_INDIR_PINC_R4  1C
MATCH_MOVE_SRC_AN_INDIR_PINC_R5  1D
MATCH_MOVE_SRC_AN_INDIR_PINC_R6  1E
MATCH_MOVE_SRC_AN_INDIR_PINC_R7  1F
MATCH_MOVE_SRC_AN_INDIR_POSTINC  18
MATCH_MOVE_SRC_AN_INDIR_PREDEC  20
MATCH_MOVE_SRC_AN_INDIR_PREDE_R0  20
MATCH_MOVE_SRC_AN_INDIR_PREDE_R1  21
MATCH_MOVE_SRC_AN_INDIR_PREDE_R2  22
MATCH_MOVE_SRC_AN_INDIR_PREDE_R3  23
MATCH_MOVE_SRC_AN_INDIR_PREDE_R4  24
MATCH_MOVE_SRC_AN_INDIR_PREDE_R5  25
MATCH_MOVE_SRC_AN_INDIR_PREDE_R6  26
MATCH_MOVE_SRC_AN_INDIR_PREDE_R7  27
MATCH_MOVE_SRC_AN_INDIR_R0  10
MATCH_MOVE_SRC_AN_INDIR_R1  11
MATCH_MOVE_SRC_AN_INDIR_R2  12
MATCH_MOVE_SRC_AN_INDIR_R3  13
MATCH_MOVE_SRC_AN_INDIR_R4  14
MATCH_MOVE_SRC_AN_INDIR_R5  15
MATCH_MOVE_SRC_AN_INDIR_R6  16
MATCH_MOVE_SRC_AN_INDIR_R7  17
MATCH_MOVE_SRC_D0   0
MATCH_MOVE_SRC_D1   1
MATCH_MOVE_SRC_D2   2
MATCH_MOVE_SRC_D3   3
MATCH_MOVE_SRC_D4   4
MATCH_MOVE_SRC_D5   5
MATCH_MOVE_SRC_D6   6
MATCH_MOVE_SRC_D7   7
MATCH_MOVE_SRC_DN   0
MATCH_MOVE_SRC_IMM_ADD  3C
MATCH_MOVE_SRC_IMM_ADD_LONG  1FC
MATCH_MOVE_SRC_IMM_ADD_WORD  FC
MATCH_NOP           4E71
MATCH_NOT           4600
MATCH_OR            8000
MATCH_ROL_M         E7C0
MATCH_ROL_R         E118
MATCH_ROR_M         E6C0
MATCH_ROR_R         E018
MATCH_RTS           4E75
MATCH_SUB           9000
MATCH_SUB_A0        8
MATCH_SUB_A1        9
MATCH_SUB_A2        A
MATCH_SUB_A3        B
MATCH_SUB_A4        C
MATCH_SUB_A5        D
MATCH_SUB_A6        E
MATCH_SUB_A7        F
MATCH_SUB_ABS_ADD_LONG  39
MATCH_SUB_ABS_ADD_WORD  38
MATCH_SUB_AN        8
MATCH_SUB_AN_INDIR  10
MATCH_SUB_AN_INDIR_POSTINC  18
MATCH_SUB_AN_INDIR_POSTINC_R0  18
MATCH_SUB_AN_INDIR_POSTINC_R1  19
MATCH_SUB_AN_INDIR_POSTINC_R2  1A
MATCH_SUB_AN_INDIR_POSTINC_R3  1B
MATCH_SUB_AN_INDIR_POSTINC_R4  1C
MATCH_SUB_AN_INDIR_POSTINC_R5  1D
MATCH_SUB_AN_INDIR_POSTINC_R6  1E
MATCH_SUB_AN_INDIR_POSTINC_R7  1F
MATCH_SUB_AN_INDIR_PREDEC  20
MATCH_SUB_AN_INDIR_PREDEC_REG0  20
MATCH_SUB_AN_INDIR_PREDEC_REG1  21
MATCH_SUB_AN_INDIR_PREDEC_REG2  22
MATCH_SUB_AN_INDIR_PREDEC_REG3  23
MATCH_SUB_AN_INDIR_PREDEC_REG4  24
MATCH_SUB_AN_INDIR_PREDEC_REG5  25
MATCH_SUB_AN_INDIR_PREDEC_REG6  26
MATCH_SUB_AN_INDIR_PREDEC_REG7  27
MATCH_SUB_AN_INDIR_R0  10
MATCH_SUB_AN_INDIR_R1  11
MATCH_SUB_AN_INDIR_R2  12
MATCH_SUB_AN_INDIR_R3  13
MATCH_SUB_AN_INDIR_R4  14
MATCH_SUB_AN_INDIR_R5  15
MATCH_SUB_AN_INDIR_R6  16
MATCH_SUB_AN_INDIR_R7  17
MATCH_SUB_B_DN_EA   0
MATCH_SUB_B_EA_DN   100
MATCH_SUB_D0        0
MATCH_SUB_D1        1
MATCH_SUB_D2        2
MATCH_SUB_D3        3
MATCH_SUB_D4        4
MATCH_SUB_D5        5
MATCH_SUB_D6        6
MATCH_SUB_D7        7
MATCH_SUB_DN        0
MATCH_SUB_IMM_ADD   3C
MATCH_SUB_IMM_ADD_LONG  1FC
MATCH_SUB_IMM_ADD_WORD  FC
MATCH_SUB_L_DN_EA   80
MATCH_SUB_L_EA_DN   180
MATCH_SUB_REG0      0
MATCH_SUB_REG1      200
MATCH_SUB_REG2      400
MATCH_SUB_REG3      600
MATCH_SUB_REG4      800
MATCH_SUB_REG5      A00
MATCH_SUB_REG6      C00
MATCH_SUB_REG7      E00
MATCH_SUB_W_DN_EA   40
MATCH_SUB_W_EA_DN   140
MA_END              14DE
MA_FAIL             14D8
MA_L                14BE
MA_W                14A4
MOVEA_SIZE          149A
MOVEM_A0_REG_LIST_OUT  5438
MOVEM_A1_REG_LIST_OUT  5442
MOVEM_A2_REG_LIST_OUT  544C
MOVEM_A3_REG_LIST_OUT  5456
MOVEM_A4_REG_LIST_OUT  5460
MOVEM_A5_REG_LIST_OUT  546A
MOVEM_A6_REG_LIST_OUT  5474
MOVEM_A7_REG_LIST_OUT  547E
MOVEM_ABS_ADD_LONG  54C4
MOVEM_ABS_ADD_LONG_OUT  5686
MOVEM_ABS_ADD_WORD  54AE
MOVEM_ABS_ADD_WORD_OUT  5678
MOVEM_ADD_REG_INDIR  5492
MOVEM_ADD_REG_INDIR_PREDEC  54A0
MOVEM_AN_INDIR_PDEC_R0_OUT  5618
MOVEM_AN_INDIR_PDEC_R1  55B6
MOVEM_AN_INDIR_PDEC_R1_OUT  5624
MOVEM_AN_INDIR_PDEC_R2  55C4
MOVEM_AN_INDIR_PDEC_R2_OUT  5630
MOVEM_AN_INDIR_PDEC_R3  55D2
MOVEM_AN_INDIR_PDEC_R3_OUT  563C
MOVEM_AN_INDIR_PDEC_R4  55E0
MOVEM_AN_INDIR_PDEC_R4_OUT  5648
MOVEM_AN_INDIR_PDEC_R5  55EE
MOVEM_AN_INDIR_PDEC_R5_OUT  5654
MOVEM_AN_INDIR_PDEC_R6  55FC
MOVEM_AN_INDIR_PDEC_R6_OUT  5660
MOVEM_AN_INDIR_PDEC_R7  560A
MOVEM_AN_INDIR_PDEC_R7_OUT  566C
MOVEM_AN_INDIR_PREDEC  55A8
MOVEM_AN_INDIR_R0_OUT  5548
MOVEM_AN_INDIR_R1   54E6
MOVEM_AN_INDIR_R1_OUT  5554
MOVEM_AN_INDIR_R2   54F4
MOVEM_AN_INDIR_R2_OUT  5560
MOVEM_AN_INDIR_R3   5502
MOVEM_AN_INDIR_R3_OUT  556C
MOVEM_AN_INDIR_R4   5510
MOVEM_AN_INDIR_R4_OUT  5578
MOVEM_AN_INDIR_R5   551E
MOVEM_AN_INDIR_R5_OUT  5584
MOVEM_AN_INDIR_R6   552C
MOVEM_AN_INDIR_R6_OUT  5590
MOVEM_AN_INDIR_R7   553A
MOVEM_AN_INDIR_R7_OUT  559C
MOVEM_AN_INDIR_REG  54D8
MOVEM_D0_REG_LIST_OUT  53E8
MOVEM_D1_REG_LIST_OUT  53F2
MOVEM_D2_REG_LIST_OUT  53FC
MOVEM_D3_REG_LIST_OUT  5406
MOVEM_D4_REG_LIST_OUT  5410
MOVEM_D5_REG_LIST_OUT  541A
MOVEM_D6_REG_LIST_OUT  5424
MOVEM_D7_REG_LIST_OUT  542E
MOVEM_DETERMINE_SECOND_OP  5696
MOVEM_DETERMINE_SECOND_OPERAND  548A
MOVEM_ERROR         5B64
MOVEM_M2R           5944
MOVEM_M2R_A0        5A02
MOVEM_M2R_A0_REG_LIST_OUT  5B12
MOVEM_M2R_A1        5A1A
MOVEM_M2R_A1_REG_LIST_OUT  5B1C
MOVEM_M2R_A2        5A32
MOVEM_M2R_A2_REG_LIST_OUT  5B26
MOVEM_M2R_A3        5A4A
MOVEM_M2R_A3_REG_LIST_OUT  5B30
MOVEM_M2R_A4        5A62
MOVEM_M2R_A4_REG_LIST_OUT  5B3A
MOVEM_M2R_A5        5A7A
MOVEM_M2R_A5_REG_LIST_OUT  5B44
MOVEM_M2R_A6        5A92
MOVEM_M2R_A6_REG_LIST_OUT  5B4E
MOVEM_M2R_A7        5AAA
MOVEM_M2R_A7_REG_LIST_OUT  5B58
MOVEM_M2R_ABS_ADD_LONG  56D0
MOVEM_M2R_ABS_ADD_LONG_OUT  5932
MOVEM_M2R_ABS_ADD_WORD  56BA
MOVEM_M2R_ABS_ADD_WORD_OUT  5924
MOVEM_M2R_AN_INDIR  569E
MOVEM_M2R_AN_INDIR_PDEC_R0_OUT  58D4
MOVEM_M2R_AN_INDIR_PDEC_R1  5872
MOVEM_M2R_AN_INDIR_PDEC_R1_OUT  58DE
MOVEM_M2R_AN_INDIR_PDEC_R2  5880
MOVEM_M2R_AN_INDIR_PDEC_R2_OUT  58E8
MOVEM_M2R_AN_INDIR_PDEC_R3  588E
MOVEM_M2R_AN_INDIR_PDEC_R3_OUT  58F2
MOVEM_M2R_AN_INDIR_PDEC_R4  589C
MOVEM_M2R_AN_INDIR_PDEC_R4_OUT  58FC
MOVEM_M2R_AN_INDIR_PDEC_R5  58AA
MOVEM_M2R_AN_INDIR_PDEC_R5_OUT  5906
MOVEM_M2R_AN_INDIR_PDEC_R6  58B8
MOVEM_M2R_AN_INDIR_PDEC_R6_OUT  5910
MOVEM_M2R_AN_INDIR_PDEC_R7  58C6
MOVEM_M2R_AN_INDIR_PDEC_R7_OUT  591A
MOVEM_M2R_AN_INDIR_PINC_R0_OUT  5814
MOVEM_M2R_AN_INDIR_PINC_R1  57B2
MOVEM_M2R_AN_INDIR_PINC_R1_OUT  581E
MOVEM_M2R_AN_INDIR_PINC_R2  57C0
MOVEM_M2R_AN_INDIR_PINC_R2_OUT  5828
MOVEM_M2R_AN_INDIR_PINC_R3  57CE
MOVEM_M2R_AN_INDIR_PINC_R3_OUT  5832
MOVEM_M2R_AN_INDIR_PINC_R4  57DC
MOVEM_M2R_AN_INDIR_PINC_R4_OUT  583C
MOVEM_M2R_AN_INDIR_PINC_R5  57EA
MOVEM_M2R_AN_INDIR_PINC_R5_OUT  5846
MOVEM_M2R_AN_INDIR_PINC_R6  57F8
MOVEM_M2R_AN_INDIR_PINC_R6_OUT  5850
MOVEM_M2R_AN_INDIR_PINC_R7  5806
MOVEM_M2R_AN_INDIR_PINC_R7_OUT  585A
MOVEM_M2R_AN_INDIR_PINC_REG  57A4
MOVEM_M2R_AN_INDIR_POSTINC  56AC
MOVEM_M2R_AN_INDIR_R0_OUT  5754
MOVEM_M2R_AN_INDIR_R1  56F2
MOVEM_M2R_AN_INDIR_R1_OUT  575E
MOVEM_M2R_AN_INDIR_R2  5700
MOVEM_M2R_AN_INDIR_R2_OUT  5768
MOVEM_M2R_AN_INDIR_R3  570E
MOVEM_M2R_AN_INDIR_R3_OUT  5772
MOVEM_M2R_AN_INDIR_R4  571C
MOVEM_M2R_AN_INDIR_R4_OUT  577C
MOVEM_M2R_AN_INDIR_R5  572A
MOVEM_M2R_AN_INDIR_R5_OUT  5786
MOVEM_M2R_AN_INDIR_R6  5738
MOVEM_M2R_AN_INDIR_R6_OUT  5790
MOVEM_M2R_AN_INDIR_R7  5746
MOVEM_M2R_AN_INDIR_R7_OUT  579A
MOVEM_M2R_AN_INDIR_REG  56E4
MOVEM_M2R_D0_REG_LIST_OUT  5AC2
MOVEM_M2R_D1        595A
MOVEM_M2R_D1_REG_LIST_OUT  5ACC
MOVEM_M2R_D2        5972
MOVEM_M2R_D2_REG_LIST_OUT  5AD6
MOVEM_M2R_D3        598A
MOVEM_M2R_D3_REG_LIST_OUT  5AE0
MOVEM_M2R_D4        59A2
MOVEM_M2R_D4_REG_LIST_OUT  5AEA
MOVEM_M2R_D5        59BA
MOVEM_M2R_D5_REG_LIST_OUT  5AF4
MOVEM_M2R_D6        59D2
MOVEM_M2R_D6_REG_LIST_OUT  5AFE
MOVEM_M2R_D7        59EA
MOVEM_M2R_D7_REG_LIST_OUT  5B08
MOVEM_MEM_REG_MATCH  525A
MOVEM_MR_END        160E
MOVEM_MR_FAIL       1608
MOVEM_MR_L          15EE
MOVEM_MR_SIZE       15CA
MOVEM_REG_MEM       5268
MOVEM_REG_MEM_A0    5328
MOVEM_REG_MEM_A1    5340
MOVEM_REG_MEM_A2    5358
MOVEM_REG_MEM_A3    5370
MOVEM_REG_MEM_A4    5388
MOVEM_REG_MEM_A5    53A0
MOVEM_REG_MEM_A6    53B8
MOVEM_REG_MEM_A7    53D0
MOVEM_REG_MEM_D1    5280
MOVEM_REG_MEM_D2    5298
MOVEM_REG_MEM_D3    52B0
MOVEM_REG_MEM_D4    52C8
MOVEM_REG_MEM_D5    52E0
MOVEM_REG_MEM_D6    52F8
MOVEM_REG_MEM_D7    5310
MOVEM_RM_END        15C4
MOVEM_RM_FAIL       15BE
MOVEM_RM_L          159A
MOVEM_RM_SIZE       156C
MOVEM_SECOND_OPERAND  5942
MOVEM_SUB           5242
MOVEQ_END           1F76
MOVEQ_FAIL          1F70
MOVEQ_SIZE          1F4C
MOVE_ABS_ADD_LONG   49E4
MOVE_ABS_ADD_LONG_OUT  4D46
MOVE_ABS_ADD_WORD   49CE
MOVE_ABS_ADD_WORD_OUT  4D38
MOVE_ADD_REG_INDIR  49A4
MOVE_ADD_REG_INDIR_POSTINC  49C0
MOVE_ADD_REG_INDIR_PREDEC  49B2
MOVE_AN_INDIR_POSTINC_REG  4B98
MOVE_AN_INDIR_POSTINC_REG0_OUT  4C08
MOVE_AN_INDIR_POSTINC_REG1  4BA6
MOVE_AN_INDIR_POSTINC_REG1_OUT  4C14
MOVE_AN_INDIR_POSTINC_REG2  4BB4
MOVE_AN_INDIR_POSTINC_REG2_OUT  4C20
MOVE_AN_INDIR_POSTINC_REG3  4BC2
MOVE_AN_INDIR_POSTINC_REG3_OUT  4C2C
MOVE_AN_INDIR_POSTINC_REG4  4BD0
MOVE_AN_INDIR_POSTINC_REG4_OUT  4C38
MOVE_AN_INDIR_POSTINC_REG5  4BDE
MOVE_AN_INDIR_POSTINC_REG5_OUT  4C44
MOVE_AN_INDIR_POSTINC_REG6  4BEC
MOVE_AN_INDIR_POSTINC_REG6_OUT  4C50
MOVE_AN_INDIR_POSTINC_REG7  4BFA
MOVE_AN_INDIR_POSTINC_REG7_OUT  4C5C
MOVE_AN_INDIR_PREDEC  4C68
MOVE_AN_INDIR_PREDEC_REG0_OUT  4CD8
MOVE_AN_INDIR_PREDEC_REG1  4C76
MOVE_AN_INDIR_PREDEC_REG1_OUT  4CE4
MOVE_AN_INDIR_PREDEC_REG2  4C84
MOVE_AN_INDIR_PREDEC_REG2_OUT  4CF0
MOVE_AN_INDIR_PREDEC_REG3  4C92
MOVE_AN_INDIR_PREDEC_REG3_OUT  4CFC
MOVE_AN_INDIR_PREDEC_REG4  4CA0
MOVE_AN_INDIR_PREDEC_REG4_OUT  4D08
MOVE_AN_INDIR_PREDEC_REG5  4CAE
MOVE_AN_INDIR_PREDEC_REG5_OUT  4D14
MOVE_AN_INDIR_PREDEC_REG6  4CBC
MOVE_AN_INDIR_PREDEC_REG6_OUT  4D20
MOVE_AN_INDIR_PREDEC_REG7  4CCA
MOVE_AN_INDIR_PREDEC_REG7_OUT  4D2C
MOVE_AN_INDIR_REG   4AC8
MOVE_AN_INDIR_REG0_OUT  4B38
MOVE_AN_INDIR_REG1  4AD6
MOVE_AN_INDIR_REG1_OUT  4B44
MOVE_AN_INDIR_REG2  4AE4
MOVE_AN_INDIR_REG2_OUT  4B50
MOVE_AN_INDIR_REG3  4AF2
MOVE_AN_INDIR_REG3_OUT  4B5C
MOVE_AN_INDIR_REG4  4B00
MOVE_AN_INDIR_REG4_OUT  4B68
MOVE_AN_INDIR_REG5  4B0E
MOVE_AN_INDIR_REG5_OUT  4B74
MOVE_AN_INDIR_REG6  4B1C
MOVE_AN_INDIR_REG6_OUT  4B80
MOVE_AN_INDIR_REG7  4B2A
MOVE_AN_INDIR_REG7_OUT  4B8C
MOVE_D0_OUT         4A68
MOVE_D1_OUT         4A74
MOVE_D2_OUT         4A80
MOVE_D3_OUT         4A8C
MOVE_D4_OUT         4A98
MOVE_D5_OUT         4AA4
MOVE_D6_OUT         4AB0
MOVE_D7_OUT         4ABC
MOVE_DATA_REG_DIR   4996
MOVE_DECODE         204C
MOVE_DEST_A0_OUT    4F18
MOVE_DEST_A1_OUT    4F24
MOVE_DEST_A2_OUT    4F30
MOVE_DEST_A3_OUT    4F3C
MOVE_DEST_A4_OUT    4F48
MOVE_DEST_A5_OUT    4F54
MOVE_DEST_A6_OUT    4F60
MOVE_DEST_A7_OUT    4F6C
MOVE_DEST_ABS_ADD_LONG  4DBA
MOVE_DEST_ABS_ADD_LONG_OUT  51F6
MOVE_DEST_ABS_ADD_WORD  4DA4
MOVE_DEST_ABS_ADD_WORD_OUT  51E8
MOVE_DEST_ADD_REG_DIR  4D6C
MOVE_DEST_ADD_REG_INDIR  4D7A
MOVE_DEST_ADD_REG_INDIR_POSTINC  4D96
MOVE_DEST_ADD_REG_INDIR_PREDEC  4D88
MOVE_DEST_AN_INDIR_PDEC_R0_OUT  5188
MOVE_DEST_AN_INDIR_PDEC_R1  5126
MOVE_DEST_AN_INDIR_PDEC_R1_OUT  5194
MOVE_DEST_AN_INDIR_PDEC_R2  5134
MOVE_DEST_AN_INDIR_PDEC_R2_OUT  51A0
MOVE_DEST_AN_INDIR_PDEC_R3  5142
MOVE_DEST_AN_INDIR_PDEC_R3_OUT  51AC
MOVE_DEST_AN_INDIR_PDEC_R4  5150
MOVE_DEST_AN_INDIR_PDEC_R4_OUT  51B8
MOVE_DEST_AN_INDIR_PDEC_R5  515E
MOVE_DEST_AN_INDIR_PDEC_R5_OUT  51C4
MOVE_DEST_AN_INDIR_PDEC_R6  516C
MOVE_DEST_AN_INDIR_PDEC_R6_OUT  51D0
MOVE_DEST_AN_INDIR_PDEC_R7  517A
MOVE_DEST_AN_INDIR_PDEC_R7_OUT  51DC
MOVE_DEST_AN_INDIR_PINC_R  5048
MOVE_DEST_AN_INDIR_PINC_R0_OUT  50B8
MOVE_DEST_AN_INDIR_PINC_R1  5056
MOVE_DEST_AN_INDIR_PINC_R1_OUT  50C4
MOVE_DEST_AN_INDIR_PINC_R2  5064
MOVE_DEST_AN_INDIR_PINC_R2_OUT  50D0
MOVE_DEST_AN_INDIR_PINC_R3  5072
MOVE_DEST_AN_INDIR_PINC_R3_OUT  50DC
MOVE_DEST_AN_INDIR_PINC_R4  5080
MOVE_DEST_AN_INDIR_PINC_R4_OUT  50E8
MOVE_DEST_AN_INDIR_PINC_R5  508E
MOVE_DEST_AN_INDIR_PINC_R5_OUT  50F4
MOVE_DEST_AN_INDIR_PINC_R6  509C
MOVE_DEST_AN_INDIR_PINC_R6_OUT  5100
MOVE_DEST_AN_INDIR_PINC_R7  50AA
MOVE_DEST_AN_INDIR_PINC_R7_OUT  510C
MOVE_DEST_AN_INDIR_PREDEC  5118
MOVE_DEST_AN_INDIR_REG  4F78
MOVE_DEST_AN_INDIR_REG0_OUT  4FE8
MOVE_DEST_AN_INDIR_REG1  4F86
MOVE_DEST_AN_INDIR_REG1_OUT  4FF4
MOVE_DEST_AN_INDIR_REG2  4F94
MOVE_DEST_AN_INDIR_REG2_OUT  5000
MOVE_DEST_AN_INDIR_REG3  4FA2
MOVE_DEST_AN_INDIR_REG3_OUT  500C
MOVE_DEST_AN_INDIR_REG4  4FB0
MOVE_DEST_AN_INDIR_REG4_OUT  5018
MOVE_DEST_AN_INDIR_REG5  4FBE
MOVE_DEST_AN_INDIR_REG5_OUT  5024
MOVE_DEST_AN_INDIR_REG6  4FCC
MOVE_DEST_AN_INDIR_REG6_OUT  5030
MOVE_DEST_AN_INDIR_REG7  4FDA
MOVE_DEST_AN_INDIR_REG7_OUT  503C
MOVE_DEST_AN_REG    4EA8
MOVE_DEST_D0_OUT    4E48
MOVE_DEST_D1_OUT    4E54
MOVE_DEST_D2_OUT    4E60
MOVE_DEST_D3_OUT    4E6C
MOVE_DEST_D4_OUT    4E78
MOVE_DEST_D5_OUT    4E84
MOVE_DEST_D6_OUT    4E90
MOVE_DEST_D7_OUT    4E9C
MOVE_DEST_DATA_REG_DIR  4D5E
MOVE_DEST_DN_REG    4DD8
MOVE_DEST_IMMEDIATE_ADD  4DC4
MOVE_DEST_IMMEDIATE_ADD_OUT  5206
MOVE_DEST_IMM_ADD_L  5226
MOVE_DEST_IMM_ADD_W  5218
MOVE_DEST_RA1       4EB6
MOVE_DEST_RA2       4EC4
MOVE_DEST_RA3       4ED2
MOVE_DEST_RA4       4EE0
MOVE_DEST_RA5       4EEE
MOVE_DEST_RA6       4EFC
MOVE_DEST_RA7       4F0A
MOVE_DEST_RD1       4DE6
MOVE_DEST_RD2       4DF4
MOVE_DEST_RD3       4E02
MOVE_DEST_RD4       4E10
MOVE_DEST_RD5       4E1E
MOVE_DEST_RD6       4E2C
MOVE_DEST_RD7       4E3A
MOVE_DETERMINE_SECOND_OP  4D56
MOVE_DN_REG         49F8
MOVE_ERROR          5236
MOVE_M2R_AN_INDIR_PREDEC  5864
MOVE_MOVE           498C
MOVE_RD1            4A06
MOVE_RD2            4A14
MOVE_RD3            4A22
MOVE_RD4            4A30
MOVE_RD5            4A3E
MOVE_RD6            4A4C
MOVE_RD7            4A5A
MOVE_SIZE           14E4
M_END               1566
M_FAIL              1560
M_L                 153A
M_SIZE_B_ADD        0
M_SIZE_B_LOGIC      0
M_SIZE_B_MOVES      1000
M_SIZE_B_NOT        0
M_SIZE_B_SHFTS      0
M_SIZE_B_SUB        0
M_SIZE_L_ADD        80
M_SIZE_L_ADDA       100
M_SIZE_L_BCC        FF
M_SIZE_L_LOGIC      80
M_SIZE_L_MOVEM      40
M_SIZE_L_MOVEQ      7000
M_SIZE_L_MOVES      2000
M_SIZE_L_NOT        80
M_SIZE_L_SHFTS      80
M_SIZE_L_SUB        80
M_SIZE_W_ADD        40
M_SIZE_W_ADDA       0
M_SIZE_W_BCC        0
M_SIZE_W_LOGIC      40
M_SIZE_W_MOVEM      0
M_SIZE_W_MOVES      3000
M_SIZE_W_NOT        40
M_SIZE_W_SHFTS      40
M_SIZE_W_SUB        40
M_W                 1514
NOP_SIZE            1614
NOT_END             16E6
NOT_FAIL            16E0
NOT_HEX             FFFFFFFF
NOT_HEX_MSG         67A4
NOT_L               16C6
NOT_SIZE            1688
NOT_W               16AC
NO_SIZE             0
OPCODE_ADDAL        64F2
OPCODE_ADDAW        64EB
OPCODE_ADDB         64D9
OPCODE_ADDL         64E5
OPCODE_ADDQB        64F9
OPCODE_ADDQL        6507
OPCODE_ADDQW        6500
OPCODE_ADDW         64DF
OPCODE_ANDB         6524
OPCODE_ANDL         6530
OPCODE_ANDW         652A
OPCODE_ASLB         657B
OPCODE_ASLL         6587
OPCODE_ASLW         6581
OPCODE_ASRB         658D
OPCODE_ASRL         6599
OPCODE_ASRW         6593
OPCODE_BEQ          65E3
OPCODE_BEQB         65E7
OPCODE_BEQW         65ED
OPCODE_BGT          65C3
OPCODE_BGTB         65C7
OPCODE_BGTW         65CD
OPCODE_BLE          65D3
OPCODE_BLEB         65D7
OPCODE_BLEW         65DD
OPCODE_BRA          65FB
OPCODE_BRAB         65FF
OPCODE_BRAW         6605
OPCODE_DATA         661B
OPCODE_JSR          65F3
OPCODE_LEA          6520
OPCODE_LSLB         6557
OPCODE_LSLL         6563
OPCODE_LSLW         655D
OPCODE_LSRB         6569
OPCODE_LSRL         6575
OPCODE_LSRW         656F
OPCODE_MOVEAB       64BD
OPCODE_MOVEAL       64CD
OPCODE_MOVEAW       64C5
OPCODE_MOVEB        649C
OPCODE_MOVEL        64AA
OPCODE_MOVEM        64B1
OPCODE_MOVEML       6613
OPCODE_MOVEMW       660B
OPCODE_MOVEQ        64B7
OPCODE_MOVEW        64A3
OPCODE_NOP          64D5
OPCODE_NOTB         6545
OPCODE_NOTL         6551
OPCODE_NOTW         654B
OPCODE_ORB          6536
OPCODE_ORL          6540
OPCODE_ORW          653B
OPCODE_ROLB         659F
OPCODE_ROLL         65AB
OPCODE_ROLW         65A5
OPCODE_RORB         65B1
OPCODE_RORL         65BD
OPCODE_RORW         65B7
OPCODE_RTS          65F7
OPCODE_SUBB         650E
OPCODE_SUBL         651A
OPCODE_SUBROUTINE   1F7C
OPCODE_SUBW         6514
OPWD_DONE           1494
OPWD_LOOP           1480
OP_ADD              211C
OP_ADDA             2114
OP_ADDQ             2228
OP_AND              2244
OP_ASL_M            21EC
OP_ASL_R            2210
OP_ASR_M            21F2
OP_ASR_R            2216
OP_BEQ              2158
OP_BGT              2152
OP_BLE              215E
OP_BRA              2164
OP_DATA             226E
OP_JSR              20EC
OP_LEA              20DA
OP_LSL_M            21E0
OP_LSL_R            2204
OP_LSR_M            21E6
OP_LSR_R            220A
OP_MOVE             206E
OP_MOVEA            2068
OP_MOVEM_MR         20E6
OP_MOVEM_RM         20E0
OP_MOVEQ            2260
OP_NOP              20CE
OP_NOT              20F2
OP_OR               2252
OP_ROL_M            21F8
OP_ROL_R            221C
OP_ROR_M            21FE
OP_ROR_R            2222
OP_RTS              20D4
OP_SUB              2236
OR_END              1F46
OR_FAIL             1F40
OR_L                1F26
OR_SIZE             1EE8
OR_W                1F0C
PRESS_ENTER         68A8
PRINT_BCC           13AA
PRINT_DATA          1358
PRINT_DISPLACEDADDRESS  13F4
PRINT_EA            1456
PRINT_EAT           1446
PRINT_HEX           1278
PRINT_LINE_NUMBER   141C
PRINT_OPCODE_WORD   1472
PRINT_STRING        1268
PRINT_STRING_OP_NL  12C0
PRINT_STRING_OP_NN  128C
PRINT_STRING_SIZED  130C
QT                  71
RANGE_CHECK1        10C8
RANGE_CHECK2        116C
RESTART_Q           68C5
ROLM_END            1CDA
ROLR_END            1CBC
ROLR_FAIL           1CB6
ROLR_L              1C9C
ROLR_W              1C82
ROL_M_SIZE          1CC2
ROL_R_SIZE          1C5E
RORM_END            1D5C
RORR_END            1D3E
RORR_FAIL           1D38
RORR_L              1D1E
RORR_W              1D04
ROR_M_SIZE          1D44
ROR_R_SIZE          1CE0
RT                  72
RTS_SIZE            162C
RUN_AGAIN           1256
RUN_PROG            1006
SHIFT_TYPE          40B6
SKIP1               1F98
SKIP2               1FB0
SKIP3               1FC2
SKIP4               1FD4
SKIP5               1FE6
SKIP6               1FF8
SKIP7               200A
SKIP8               201C
SKIP9               202E
SPACE               68A5
START_ADR           7000
START_REQUEST       66F0
STOP                6A07
SUB_DETERMINE_SECOND_OP  5FD2
SUB_DETERMINE_SECOND_OPERAND  6182
SUB_DN_EA           60AA
SUB_DN_EA_ABS_ADD_LONG  61CA
SUB_DN_EA_ABS_ADD_LONG_OUT  645C
SUB_DN_EA_ABS_ADD_WORD  61B4
SUB_DN_EA_ABS_ADD_WORD_OUT  644E
SUB_DN_EA_ADD_REG_INDIR  618A
SUB_DN_EA_ADD_REG_INDIR_POSTINC  61A6
SUB_DN_EA_ADD_REG_INDIR_PREDEC  6198
SUB_DN_EA_AN_INDIR_PDEC_R0_OUT  63EE
SUB_DN_EA_AN_INDIR_PDEC_R1  638C
SUB_DN_EA_AN_INDIR_PDEC_R1_OUT  63FA
SUB_DN_EA_AN_INDIR_PDEC_R2  639A
SUB_DN_EA_AN_INDIR_PDEC_R2_OUT  6406
SUB_DN_EA_AN_INDIR_PDEC_R3  63A8
SUB_DN_EA_AN_INDIR_PDEC_R3_OUT  6412
SUB_DN_EA_AN_INDIR_PDEC_R4  63B6
SUB_DN_EA_AN_INDIR_PDEC_R4_OUT  641E
SUB_DN_EA_AN_INDIR_PDEC_R5  63C4
SUB_DN_EA_AN_INDIR_PDEC_R5_OUT  642A
SUB_DN_EA_AN_INDIR_PDEC_R6  63D2
SUB_DN_EA_AN_INDIR_PDEC_R6_OUT  6436
SUB_DN_EA_AN_INDIR_PDEC_R7  63E0
SUB_DN_EA_AN_INDIR_PDEC_R7_OUT  6442
SUB_DN_EA_AN_INDIR_PINC_R0_OUT  631E
SUB_DN_EA_AN_INDIR_PINC_R1  62BC
SUB_DN_EA_AN_INDIR_PINC_R1_OUT  632A
SUB_DN_EA_AN_INDIR_PINC_R2  62CA
SUB_DN_EA_AN_INDIR_PINC_R2_OUT  6336
SUB_DN_EA_AN_INDIR_PINC_R3  62D8
SUB_DN_EA_AN_INDIR_PINC_R3_OUT  6342
SUB_DN_EA_AN_INDIR_PINC_R4  62E6
SUB_DN_EA_AN_INDIR_PINC_R4_OUT  634E
SUB_DN_EA_AN_INDIR_PINC_R5  62F4
SUB_DN_EA_AN_INDIR_PINC_R5_OUT  635A
SUB_DN_EA_AN_INDIR_PINC_R6  6302
SUB_DN_EA_AN_INDIR_PINC_R6_OUT  6366
SUB_DN_EA_AN_INDIR_PINC_R7  6310
SUB_DN_EA_AN_INDIR_PINC_R7_OUT  6372
SUB_DN_EA_AN_INDIR_POSTINC_REG  62AE
SUB_DN_EA_AN_INDIR_PREDEC  637E
SUB_DN_EA_AN_INDIR_REG  61DE
SUB_DN_EA_AN_INDIR_REG0_OUT  624E
SUB_DN_EA_AN_INDIR_REG1  61EC
SUB_DN_EA_AN_INDIR_REG1_OUT  625A
SUB_DN_EA_AN_INDIR_REG2  61FA
SUB_DN_EA_AN_INDIR_REG2_OUT  6266
SUB_DN_EA_AN_INDIR_REG3  6208
SUB_DN_EA_AN_INDIR_REG3_OUT  6272
SUB_DN_EA_AN_INDIR_REG4  6216
SUB_DN_EA_AN_INDIR_REG4_OUT  627E
SUB_DN_EA_AN_INDIR_REG5  6224
SUB_DN_EA_AN_INDIR_REG5_OUT  628A
SUB_DN_EA_AN_INDIR_REG6  6232
SUB_DN_EA_AN_INDIR_REG6_OUT  6296
SUB_DN_EA_AN_INDIR_REG7  6240
SUB_DN_EA_AN_INDIR_REG7_OUT  62A2
SUB_DN_EA_IMMEDIATE_ADD_OUT  646C
SUB_DN_EA_IMM_ADD_L  648C
SUB_DN_EA_IMM_ADD_W  647E
SUB_DN_EA_MATCH     5BA2
SUB_DN_EA_MATCH_L   5BBE
SUB_DN_EA_MATCH_W   5BB0
SUB_EA_DN           5BCC
SUB_EA_DN_ABS_ADD_LONG  5C22
SUB_EA_DN_ABS_ADD_LONG_OUT  5F92
SUB_EA_DN_ABS_ADD_WORD  5C0C
SUB_EA_DN_ABS_ADD_WORD_OUT  5F84
SUB_EA_DN_ADD_REG_INDIR  5BE2
SUB_EA_DN_ADD_REG_INDIR_POSTINC  5BFE
SUB_EA_DN_ADD_REG_INDIR_PREDEC  5BF0
SUB_EA_DN_AN_INDIR_PDEC_R0_OUT  5F24
SUB_EA_DN_AN_INDIR_PDEC_R1  5EC2
SUB_EA_DN_AN_INDIR_PDEC_R1_OUT  5F30
SUB_EA_DN_AN_INDIR_PDEC_R2  5ED0
SUB_EA_DN_AN_INDIR_PDEC_R2_OUT  5F3C
SUB_EA_DN_AN_INDIR_PDEC_R3  5EDE
SUB_EA_DN_AN_INDIR_PDEC_R3_OUT  5F48
SUB_EA_DN_AN_INDIR_PDEC_R4  5EEC
SUB_EA_DN_AN_INDIR_PDEC_R4_OUT  5F54
SUB_EA_DN_AN_INDIR_PDEC_R5  5EFA
SUB_EA_DN_AN_INDIR_PDEC_R5_OUT  5F60
SUB_EA_DN_AN_INDIR_PDEC_R6  5F08
SUB_EA_DN_AN_INDIR_PDEC_R6_OUT  5F6C
SUB_EA_DN_AN_INDIR_PDEC_R7  5F16
SUB_EA_DN_AN_INDIR_PDEC_R7_OUT  5F78
SUB_EA_DN_AN_INDIR_PINC_R0_OUT  5E54
SUB_EA_DN_AN_INDIR_PINC_R1  5DF2
SUB_EA_DN_AN_INDIR_PINC_R1_OUT  5E60
SUB_EA_DN_AN_INDIR_PINC_R2  5E00
SUB_EA_DN_AN_INDIR_PINC_R2_OUT  5E6C
SUB_EA_DN_AN_INDIR_PINC_R3  5E0E
SUB_EA_DN_AN_INDIR_PINC_R3_OUT  5E78
SUB_EA_DN_AN_INDIR_PINC_R4  5E1C
SUB_EA_DN_AN_INDIR_PINC_R4_OUT  5E84
SUB_EA_DN_AN_INDIR_PINC_R5  5E2A
SUB_EA_DN_AN_INDIR_PINC_R5_OUT  5E90
SUB_EA_DN_AN_INDIR_PINC_R6  5E38
SUB_EA_DN_AN_INDIR_PINC_R6_OUT  5E9C
SUB_EA_DN_AN_INDIR_PINC_R7  5E46
SUB_EA_DN_AN_INDIR_PINC_R7_OUT  5EA8
SUB_EA_DN_AN_INDIR_POSTINC_REG  5DE4
SUB_EA_DN_AN_INDIR_PREDEC  5EB4
SUB_EA_DN_AN_INDIR_REG  5D14
SUB_EA_DN_AN_INDIR_REG0_OUT  5D84
SUB_EA_DN_AN_INDIR_REG1  5D22
SUB_EA_DN_AN_INDIR_REG1_OUT  5D90
SUB_EA_DN_AN_INDIR_REG2  5D30
SUB_EA_DN_AN_INDIR_REG2_OUT  5D9C
SUB_EA_DN_AN_INDIR_REG3  5D3E
SUB_EA_DN_AN_INDIR_REG3_OUT  5DA8
SUB_EA_DN_AN_INDIR_REG4  5D4C
SUB_EA_DN_AN_INDIR_REG4_OUT  5DB4
SUB_EA_DN_AN_INDIR_REG5  5D5A
SUB_EA_DN_AN_INDIR_REG5_OUT  5DC0
SUB_EA_DN_AN_INDIR_REG6  5D68
SUB_EA_DN_AN_INDIR_REG6_OUT  5DCC
SUB_EA_DN_AN_INDIR_REG7  5D76
SUB_EA_DN_AN_INDIR_REG7_OUT  5DD8
SUB_EA_DN_D0_OUT    5CB4
SUB_EA_DN_D1_OUT    5CC0
SUB_EA_DN_D2_OUT    5CCC
SUB_EA_DN_D3_OUT    5CD8
SUB_EA_DN_D4_OUT    5CE4
SUB_EA_DN_D5_OUT    5CF0
SUB_EA_DN_D6_OUT    5CFC
SUB_EA_DN_D7_OUT    5D08
SUB_EA_DN_DATA_REG_DIR  5BD4
SUB_EA_DN_DN_REG    5C44
SUB_EA_DN_IMMEDIATE_ADD  5C30
SUB_EA_DN_IMMEDIATE_ADD_OUT  5FA2
SUB_EA_DN_IMM_ADD_L  5FC2
SUB_EA_DN_IMM_ADD_W  5FB4
SUB_EA_DN_MATCH     5B7A
SUB_EA_DN_MATCH_L   5B96
SUB_EA_DN_MATCH_W   5B88
SUB_EA_DN_RD1       5C52
SUB_EA_DN_RD2       5C60
SUB_EA_DN_RD3       5C6E
SUB_EA_DN_RD4       5C7C
SUB_EA_DN_RD5       5C8A
SUB_EA_DN_RD6       5C98
SUB_EA_DN_RD7       5CA6
SUB_END             1E60
SUB_FAIL            1E5A
SUB_L               1E36
SUB_SIZE            1DE4
SUB_SUB             5B70
SUB_W               1E12
TAB                 68C3
TEST_ENDS           11B6
TOHEX               1016
WORD_SIZE           2
WRONG_RANGE1        10E0
WRONG_RANGE2        1184
